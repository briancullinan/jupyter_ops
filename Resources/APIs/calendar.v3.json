{
  "batchPath": "batch/calendar/v3",
  "kind": "discovery#restDescription",
  "revision": "20210610",
  "baseUrl": "https://www.googleapis.com/calendar/v3/",
  "description": "Manipulates events and other calendar data.",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/calendar.readonly": {
          "description": "See and download any calendar you can access using your Google Calendar"
        },
        "https://www.googleapis.com/auth/calendar.settings.readonly": {
          "description": "View your Calendar settings"
        },
        "https://www.googleapis.com/auth/calendar": {
          "description": "See, edit, share, and permanently delete all the calendars you can access using Google Calendar"
        },
        "https://www.googleapis.com/auth/calendar.events": {
          "description": "View and edit events on all your calendars"
        },
        "https://www.googleapis.com/auth/calendar.events.readonly": {
          "description": "View events on all your calendars"
        }
      }
    }
  },
  "parameters": {
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "userIp": {
      "description": "Deprecated. Please use quotaUser instead.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "location": "query",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "description": "Data format for the response.",
      "enum": [
        "json"
      ]
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    }
  },
  "servicePath": "calendar/v3/",
  "name": "calendar",
  "id": "calendar:v3",
  "documentationLink": "https://developers.google.com/google-apps/calendar/firstapp",
  "schemas": {
    "Acl": {
      "id": "Acl",
      "properties": {
        "items": {
          "items": {
            "$ref": "AclRule"
          },
          "type": "array",
          "description": "List of rules on the access control list."
        },
        "kind": {
          "type": "string",
          "description": "Type of the collection (\"calendar#acl\").",
          "default": "calendar#acl"
        },
        "nextPageToken": {
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the collection.",
          "type": "string"
        },
        "nextSyncToken": {
          "type": "string",
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided."
        }
      },
      "type": "object"
    },
    "ConferenceParametersAddOnParameters": {
      "type": "object",
      "id": "ConferenceParametersAddOnParameters",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Event": {
      "type": "object",
      "id": "Event",
      "properties": {
        "htmlLink": {
          "description": "An absolute link to this event in the Google Calendar Web UI. Read-only.",
          "type": "string"
        },
        "eventType": {
          "description": "Specific type of the event. Read-only. Possible values are:  \n- \"default\" - A regular event or not further specified. \n- \"outOfOffice\" - An out-of-office event.",
          "type": "string",
          "default": "default"
        },
        "organizer": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "The organizer's email address, if available. It must be a valid email address as per RFC5322."
            },
            "displayName": {
              "type": "string",
              "description": "The organizer's name, if available."
            },
            "id": {
              "description": "The organizer's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API",
              "type": "string"
            },
            "self": {
              "default": "false",
              "description": "Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.",
              "type": "boolean"
            }
          },
          "description": "The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event."
        },
        "summary": {
          "type": "string",
          "description": "Title of the event."
        },
        "locked": {
          "default": "false",
          "description": "Whether this is a locked event copy where no changes can be made to the main event fields \"summary\", \"description\", \"location\", \"start\", \"end\" or \"recurrence\". The default is False. Read-Only.",
          "type": "boolean"
        },
        "transparency": {
          "default": "opaque",
          "description": "Whether the event blocks time on the calendar. Optional. Possible values are:  \n- \"opaque\" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI. \n- \"transparent\" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI.",
          "type": "string"
        },
        "colorId": {
          "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "source": {
          "properties": {
            "url": {
              "description": "URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.",
              "type": "string"
            },
            "title": {
              "type": "string",
              "description": "Title of the source; for example a title of a web page or an email subject."
            }
          },
          "description": "Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.",
          "type": "object"
        },
        "endTimeUnspecified": {
          "description": "Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.",
          "type": "boolean",
          "default": "false"
        },
        "iCalUID": {
          "annotations": {
            "required": [
              "calendar.events.import"
            ]
          },
          "description": "Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.",
          "type": "string"
        },
        "attendeesOmitted": {
          "description": "Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.",
          "default": "false",
          "type": "boolean"
        },
        "guestsCanSeeOtherGuests": {
          "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.",
          "type": "boolean",
          "default": "true"
        },
        "start": {
          "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.",
          "$ref": "EventDateTime",
          "annotations": {
            "required": [
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          }
        },
        "privateCopy": {
          "type": "boolean",
          "description": "If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False.",
          "default": "false"
        },
        "attendees": {
          "description": "The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list.",
          "items": {
            "$ref": "EventAttendee"
          },
          "type": "array"
        },
        "guestsCanInviteOthers": {
          "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True.",
          "default": "true",
          "type": "boolean"
        },
        "attachments": {
          "description": "File attachments for the event. Currently only Google Drive attachments are supported.\nIn order to modify attachments the supportsAttachments request parameter should be set to true.\nThere can be at most 25 attachments per event,",
          "type": "array",
          "items": {
            "$ref": "EventAttachment"
          }
        },
        "conferenceData": {
          "$ref": "ConferenceData",
          "description": "The conference-related information, such as details of a Google Meet conference. To create new conference details use the createRequest field. To persist your changes, remember to set the conferenceDataVersion request parameter to 1 for all event modification requests."
        },
        "sequence": {
          "type": "integer",
          "description": "Sequence number as per iCalendar.",
          "format": "int32"
        },
        "gadget": {
          "description": "A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.",
          "properties": {
            "iconLink": {
              "type": "string",
              "description": "The gadget's icon URL. The URL scheme must be HTTPS. Deprecated."
            },
            "display": {
              "type": "string",
              "description": "The gadget's display mode. Deprecated. Possible values are:  \n- \"icon\" - The gadget displays next to the event's title in the calendar view. \n- \"chip\" - The gadget displays when the event is clicked."
            },
            "width": {
              "format": "int32",
              "description": "The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.",
              "type": "integer"
            },
            "type": {
              "description": "The gadget's type. Deprecated.",
              "type": "string"
            },
            "height": {
              "description": "The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.",
              "format": "int32",
              "type": "integer"
            },
            "preferences": {
              "type": "object",
              "description": "Preferences.",
              "additionalProperties": {
                "description": "The preference name and corresponding value.",
                "type": "string"
              }
            },
            "link": {
              "description": "The gadget's URL. The URL scheme must be HTTPS. Deprecated.",
              "type": "string"
            },
            "title": {
              "description": "The gadget's title. Deprecated.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "anyoneCanAddSelf": {
          "description": "Whether anyone can invite themselves to the event (currently works for Google+ events only). Optional. The default is False.",
          "default": "false",
          "type": "boolean"
        },
        "recurrence": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events."
        },
        "location": {
          "description": "Geographic location of the event as free-form text. Optional.",
          "type": "string"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "description": "Last modification time of the event (as a RFC3339 timestamp). Read-only."
        },
        "end": {
          "$ref": "EventDateTime",
          "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.",
          "annotations": {
            "required": [
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          }
        },
        "visibility": {
          "default": "default",
          "type": "string",
          "description": "Visibility of the event. Optional. Possible values are:  \n- \"default\" - Uses the default visibility for events on the calendar. This is the default value. \n- \"public\" - The event is public and event details are visible to all readers of the calendar. \n- \"private\" - The event is private and only event attendees may view event details. \n- \"confidential\" - The event is private. This value is provided for compatibility reasons."
        },
        "id": {
          "type": "string",
          "description": "Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  \n- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 \n- the length of the ID must be between 5 and 1024 characters \n- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.\nIf you do not specify an ID, it will be automatically generated by the server.\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs."
        },
        "guestsCanModify": {
          "type": "boolean",
          "default": "false",
          "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False."
        },
        "status": {
          "type": "string",
          "description": "Status of the event. Optional. Possible values are:  \n- \"confirmed\" - The event is confirmed. This is the default status. \n- \"tentative\" - The event is tentatively confirmed. \n- \"cancelled\" - The event is cancelled (deleted). The list method returns cancelled events only on incremental sync (when syncToken or updatedMin are specified) or if the showDeleted flag is set to true. The get method always returns them.\nA cancelled status represents two different states depending on the event type:  \n- Cancelled exceptions of an uncancelled recurring event indicate that this instance should no longer be presented to the user. Clients should store these events for the lifetime of the parent recurring event.\nCancelled exceptions are only guaranteed to have values for the id, recurringEventId and originalStartTime fields populated. The other fields might be empty.  \n- All other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely.\nDeleted events are only guaranteed to have the id field populated.   On the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with showDeleted set to false will not return these details.\nIf an event changes its organizer (for example via the move operation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the id field is guaranteed to be populated."
        },
        "hangoutLink": {
          "description": "An absolute link to the Google+ hangout associated with this event. Read-only.",
          "type": "string"
        },
        "kind": {
          "description": "Type of the resource (\"calendar#event\").",
          "default": "calendar#event",
          "type": "string"
        },
        "creator": {
          "properties": {
            "displayName": {
              "description": "The creator's name, if available.",
              "type": "string"
            },
            "email": {
              "description": "The creator's email address, if available.",
              "type": "string"
            },
            "self": {
              "type": "boolean",
              "description": "Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.",
              "default": "false"
            },
            "id": {
              "description": "The creator's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API",
              "type": "string"
            }
          },
          "type": "object",
          "description": "The creator of the event. Read-only."
        },
        "extendedProperties": {
          "type": "object",
          "description": "Extended properties of the event.",
          "properties": {
            "private": {
              "type": "object",
              "additionalProperties": {
                "description": "The name of the private property and the corresponding value.",
                "type": "string"
              },
              "description": "Properties that are private to the copy of the event that appears on this calendar."
            },
            "shared": {
              "additionalProperties": {
                "type": "string",
                "description": "The name of the shared property and the corresponding value."
              },
              "description": "Properties that are shared between copies of the event on other attendees' calendars.",
              "type": "object"
            }
          }
        },
        "recurringEventId": {
          "description": "For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.",
          "type": "string"
        },
        "reminders": {
          "description": "Information about the event's reminders for the authenticated user.",
          "properties": {
            "overrides": {
              "items": {
                "$ref": "EventReminder"
              },
              "description": "If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.",
              "type": "array"
            },
            "useDefault": {
              "description": "Whether the default reminders of the calendar apply to the event.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "description": {
          "description": "Description of the event. Can contain HTML. Optional.",
          "type": "string"
        },
        "originalStartTime": {
          "$ref": "EventDateTime",
          "description": "For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. It uniquely identifies the instance within the recurring event series even if the instance was moved to a different time. Immutable."
        },
        "created": {
          "description": "Creation time of the event (as a RFC3339 timestamp). Read-only.",
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ConferenceProperties": {
      "id": "ConferenceProperties",
      "type": "object",
      "properties": {
        "allowedConferenceSolutionTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The types of conference solutions that are supported for this calendar.\nThe possible values are:  \n- \"eventHangout\" \n- \"eventNamedHangout\" \n- \"hangoutsMeet\"  Optional."
        }
      }
    },
    "CreateConferenceRequest": {
      "properties": {
        "status": {
          "description": "The status of the conference create request.",
          "$ref": "ConferenceRequestStatus"
        },
        "requestId": {
          "description": "The client-generated unique ID for this request.\nClients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.",
          "type": "string"
        },
        "conferenceSolutionKey": {
          "$ref": "ConferenceSolutionKey",
          "description": "The conference solution, such as Hangouts or Google Meet."
        }
      },
      "id": "CreateConferenceRequest",
      "type": "object"
    },
    "Setting": {
      "type": "object",
      "properties": {
        "value": {
          "description": "Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters.",
          "type": "string"
        },
        "kind": {
          "description": "Type of the resource (\"calendar#setting\").",
          "default": "calendar#setting",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "id": {
          "description": "The id of the user setting.",
          "type": "string"
        }
      },
      "id": "Setting"
    },
    "Colors": {
      "properties": {
        "kind": {
          "description": "Type of the resource (\"calendar#colors\").",
          "default": "calendar#colors",
          "type": "string"
        },
        "calendar": {
          "type": "object",
          "additionalProperties": {
            "$ref": "ColorDefinition",
            "description": "A calendar color definition."
          },
          "description": "A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only."
        },
        "updated": {
          "description": "Last modification time of the color palette (as a RFC3339 timestamp). Read-only.",
          "format": "date-time",
          "type": "string"
        },
        "event": {
          "type": "object",
          "description": "A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.",
          "additionalProperties": {
            "$ref": "ColorDefinition",
            "description": "An event color definition."
          }
        }
      },
      "type": "object",
      "id": "Colors"
    },
    "FreeBusyCalendar": {
      "type": "object",
      "id": "FreeBusyCalendar",
      "properties": {
        "busy": {
          "description": "List of time ranges during which this calendar should be regarded as busy.",
          "items": {
            "$ref": "TimePeriod"
          },
          "type": "array"
        },
        "errors": {
          "description": "Optional error(s) (if computation for the calendar failed).",
          "items": {
            "$ref": "Error"
          },
          "type": "array"
        }
      }
    },
    "CalendarList": {
      "id": "CalendarList",
      "type": "object",
      "properties": {
        "nextSyncToken": {
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the collection.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "CalendarListEntry"
          },
          "type": "array",
          "description": "Calendars that are present on the user's calendar list."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided."
        },
        "kind": {
          "description": "Type of the collection (\"calendar#calendarList\").",
          "default": "calendar#calendarList",
          "type": "string"
        }
      }
    },
    "EventReminder": {
      "id": "EventReminder",
      "properties": {
        "method": {
          "type": "string",
          "description": "The method used by this reminder. Possible values are:  \n- \"email\" - Reminders are sent via email. \n- \"popup\" - Reminders are sent via a UI popup.  \nRequired when adding a reminder."
        },
        "minutes": {
          "description": "Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).\nRequired when adding a reminder.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AclRule": {
      "type": "object",
      "id": "AclRule",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the Access Control List (ACL) rule. See Sharing calendars.",
          "type": "string"
        },
        "scope": {
          "type": "object",
          "annotations": {
            "required": [
              "calendar.acl.insert",
              "calendar.acl.update"
            ]
          },
          "description": "The extent to which calendar access is granted by this ACL rule.",
          "properties": {
            "value": {
              "type": "string",
              "description": "The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type \"default\"."
            },
            "type": {
              "type": "string",
              "annotations": {
                "required": [
                  "calendar.acl.insert",
                  "calendar.acl.update"
                ]
              },
              "description": "The type of the scope. Possible values are:  \n- \"default\" - The public scope. This is the default value. \n- \"user\" - Limits the scope to a single user. \n- \"group\" - Limits the scope to a group. \n- \"domain\" - Limits the scope to a domain.  Note: The permissions granted to the \"default\", or public, scope apply to any user, authenticated or not."
            }
          }
        },
        "kind": {
          "description": "Type of the resource (\"calendar#aclRule\").",
          "default": "calendar#aclRule",
          "type": "string"
        },
        "role": {
          "description": "The role assigned to the scope. Possible values are:  \n- \"none\" - Provides no access. \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.",
          "type": "string",
          "annotations": {
            "required": [
              "calendar.acl.insert"
            ]
          }
        }
      }
    },
    "ConferenceSolution": {
      "type": "object",
      "properties": {
        "iconUri": {
          "description": "The user-visible icon for this solution.",
          "type": "string"
        },
        "name": {
          "description": "The user-visible name of this solution. Not localized.",
          "type": "string"
        },
        "key": {
          "$ref": "ConferenceSolutionKey",
          "description": "The key which can uniquely identify the conference solution for this event."
        }
      },
      "id": "ConferenceSolution"
    },
    "Channel": {
      "properties": {
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel. Valid values are \"web_hook\" (or \"webhook\"). Both values refer to a channel where Http requests are used to deliver messages.",
          "type": "string"
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "additionalProperties": {
            "type": "string",
            "description": "Declares a new parameter by name."
          },
          "type": "object"
        },
        "resourceId": {
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.",
          "type": "string"
        },
        "expiration": {
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is \"api#channel\".",
          "default": "api#channel"
        }
      },
      "id": "Channel",
      "type": "object"
    },
    "ConferenceSolutionKey": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The conference solution type.\nIf a client encounters an unfamiliar or empty type, it should still be able to display the entry points. However, it should disallow modifications.\nThe possible values are:  \n- \"eventHangout\" for Hangouts for consumers (http://hangouts.google.com)\n- \"eventNamedHangout\" for classic Hangouts for Google Workspace users (http://hangouts.google.com)\n- \"hangoutsMeet\" for Google Meet (http://meet.google.com)\n- \"addOn\" for 3P conference providers"
        }
      },
      "type": "object",
      "id": "ConferenceSolutionKey"
    },
    "ConferenceParameters": {
      "id": "ConferenceParameters",
      "type": "object",
      "properties": {
        "addOnParameters": {
          "description": "Additional add-on specific data.",
          "$ref": "ConferenceParametersAddOnParameters"
        }
      }
    },
    "Settings": {
      "id": "Settings",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided."
        },
        "kind": {
          "description": "Type of the collection (\"calendar#settings\").",
          "default": "calendar#settings",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "Etag of the collection."
        },
        "items": {
          "items": {
            "$ref": "Setting"
          },
          "description": "List of user settings.",
          "type": "array"
        },
        "nextSyncToken": {
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CalendarListEntry": {
      "id": "CalendarListEntry",
      "properties": {
        "timeZone": {
          "type": "string",
          "description": "The time zone of the calendar. Optional. Read-only."
        },
        "location": {
          "description": "Geographic location of the calendar as free-form text. Optional. Read-only.",
          "type": "string"
        },
        "foregroundColor": {
          "type": "string",
          "description": "The foreground color of the calendar in the hexadecimal format \"#ffffff\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional."
        },
        "backgroundColor": {
          "type": "string",
          "description": "The main color of the calendar in the hexadecimal format \"#0088aa\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional."
        },
        "colorId": {
          "description": "The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the calendar.",
          "annotations": {
            "required": [
              "calendar.calendarList.insert"
            ]
          }
        },
        "summary": {
          "type": "string",
          "description": "Title of the calendar. Read-only."
        },
        "description": {
          "description": "Description of the calendar. Optional. Read-only.",
          "type": "string"
        },
        "kind": {
          "default": "calendar#calendarListEntry",
          "type": "string",
          "description": "Type of the resource (\"calendar#calendarListEntry\")."
        },
        "primary": {
          "description": "Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.",
          "default": "false",
          "type": "boolean"
        },
        "selected": {
          "type": "boolean",
          "default": "false",
          "description": "Whether the calendar content shows up in the calendar UI. Optional. The default is False."
        },
        "notificationSettings": {
          "type": "object",
          "properties": {
            "notifications": {
              "items": {
                "$ref": "CalendarNotification"
              },
              "description": "The list of notifications set for this calendar.",
              "type": "array"
            }
          },
          "description": "The notifications that the authenticated user is receiving for this calendar."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "summaryOverride": {
          "type": "string",
          "description": "The summary that the authenticated user has set for this calendar. Optional."
        },
        "hidden": {
          "default": "false",
          "description": "Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.",
          "type": "boolean"
        },
        "defaultReminders": {
          "items": {
            "$ref": "EventReminder"
          },
          "description": "The default reminders that the authenticated user has for this calendar.",
          "type": "array"
        },
        "deleted": {
          "default": "false",
          "description": "Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.",
          "type": "boolean"
        },
        "conferenceProperties": {
          "description": "Conferencing properties for this calendar, for example what types of conferences are allowed.",
          "$ref": "ConferenceProperties"
        },
        "accessRole": {
          "type": "string",
          "description": "The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs."
        }
      },
      "type": "object"
    },
    "ConferenceRequestStatus": {
      "id": "ConferenceRequestStatus",
      "type": "object",
      "properties": {
        "statusCode": {
          "description": "The current status of the conference create request. Read-only.\nThe possible values are:  \n- \"pending\": the conference create request is still being processed.\n- \"success\": the conference create request succeeded, the entry points are populated.\n- \"failure\": the conference create request failed, there are no entry points.",
          "type": "string"
        }
      }
    },
    "ConferenceData": {
      "id": "ConferenceData",
      "properties": {
        "conferenceId": {
          "type": "string",
          "description": "The ID of the conference.\nCan be used by developers to keep track of conferences, should not be displayed to users.\nThe ID value is formed differently for each conference solution type: `\n- eventHangout: ID is not set.\n- eventNamedHangout: ID is the name of the Hangout.\n- hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc.\n- addOn: ID is defined by the third-party provider.  Optional."
        },
        "parameters": {
          "description": "Additional properties related to a conference. An example would be a solution-specific setting for enabling video streaming.",
          "$ref": "ConferenceParameters"
        },
        "conferenceSolution": {
          "$ref": "ConferenceSolution",
          "description": "The conference solution, such as Hangouts or Google Meet.\nUnset for a conference with a failed create request.\nEither conferenceSolution and at least one entryPoint, or createRequest is required."
        },
        "notes": {
          "description": "Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.",
          "type": "string"
        },
        "createRequest": {
          "$ref": "CreateConferenceRequest",
          "description": "A request to generate a new conference and attach it to the event. The data is generated asynchronously. To see whether the data is present check the status field.\nEither conferenceSolution and at least one entryPoint, or createRequest is required."
        },
        "entryPoints": {
          "description": "Information about individual conference entry points, such as URLs or phone numbers.\nAll of them must belong to the same conference.\nEither conferenceSolution and at least one entryPoint, or createRequest is required.",
          "type": "array",
          "items": {
            "$ref": "EntryPoint"
          }
        },
        "signature": {
          "description": "The signature of the conference data.\nGenerated on server side. Must be preserved while copying the conference data between events, otherwise the conference data will not be copied.\nUnset for a conference with a failed create request.\nOptional for a conference with a pending create request.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Calendar": {
      "type": "object",
      "properties": {
        "timeZone": {
          "type": "string",
          "description": "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) Optional."
        },
        "id": {
          "type": "string",
          "description": "Identifier of the calendar. To retrieve IDs call the calendarList.list() method."
        },
        "kind": {
          "type": "string",
          "description": "Type of the resource (\"calendar#calendar\").",
          "default": "calendar#calendar"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "conferenceProperties": {
          "$ref": "ConferenceProperties",
          "description": "Conferencing properties for this calendar, for example what types of conferences are allowed."
        },
        "description": {
          "type": "string",
          "description": "Description of the calendar. Optional."
        },
        "location": {
          "description": "Geographic location of the calendar as free-form text. Optional.",
          "type": "string"
        },
        "summary": {
          "annotations": {
            "required": [
              "calendar.calendars.insert"
            ]
          },
          "type": "string",
          "description": "Title of the calendar."
        }
      },
      "id": "Calendar"
    },
    "TimePeriod": {
      "type": "object",
      "id": "TimePeriod",
      "properties": {
        "end": {
          "format": "date-time",
          "type": "string",
          "description": "The (exclusive) end of the time period."
        },
        "start": {
          "format": "date-time",
          "description": "The (inclusive) start of the time period.",
          "type": "string"
        }
      }
    },
    "FreeBusyRequest": {
      "properties": {
        "timeZone": {
          "description": "Time zone used in the response. Optional. The default is UTC.",
          "type": "string",
          "default": "UTC"
        },
        "timeMin": {
          "format": "date-time",
          "description": "The start of the interval for the query formatted as per RFC3339.",
          "type": "string"
        },
        "groupExpansionMax": {
          "type": "integer",
          "description": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.",
          "format": "int32"
        },
        "items": {
          "items": {
            "$ref": "FreeBusyRequestItem"
          },
          "description": "List of calendars and/or groups to query.",
          "type": "array"
        },
        "calendarExpansionMax": {
          "type": "integer",
          "description": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.",
          "format": "int32"
        },
        "timeMax": {
          "format": "date-time",
          "description": "The end of the interval for the query formatted as per RFC3339.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "FreeBusyRequest"
    },
    "ColorDefinition": {
      "properties": {
        "foreground": {
          "description": "The foreground color that can be used to write on top of a background with 'background' color.",
          "type": "string"
        },
        "background": {
          "type": "string",
          "description": "The background color associated with this color definition."
        }
      },
      "type": "object",
      "id": "ColorDefinition"
    },
    "FreeBusyRequestItem": {
      "type": "object",
      "id": "FreeBusyRequestItem",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of a calendar or a group."
        }
      }
    },
    "FreeBusyResponse": {
      "id": "FreeBusyResponse",
      "properties": {
        "groups": {
          "description": "Expansion of groups.",
          "additionalProperties": {
            "$ref": "FreeBusyGroup",
            "description": "List of calendars that are members of this group."
          },
          "type": "object"
        },
        "timeMax": {
          "format": "date-time",
          "description": "The end of the interval.",
          "type": "string"
        },
        "timeMin": {
          "type": "string",
          "description": "The start of the interval.",
          "format": "date-time"
        },
        "kind": {
          "description": "Type of the resource (\"calendar#freeBusy\").",
          "type": "string",
          "default": "calendar#freeBusy"
        },
        "calendars": {
          "type": "object",
          "description": "List of free/busy information for calendars.",
          "additionalProperties": {
            "$ref": "FreeBusyCalendar",
            "description": "Free/busy expansions for a single calendar."
          }
        }
      },
      "type": "object"
    },
    "EventAttachment": {
      "id": "EventAttachment",
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "ID of the attached file. Read-only.\nFor Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API."
        },
        "title": {
          "type": "string",
          "description": "Attachment title."
        },
        "fileUrl": {
          "description": "URL link to the attachment.\nFor adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.\nRequired when adding an attachment.",
          "type": "string"
        },
        "iconLink": {
          "description": "URL link to the attachment's icon. Read-only.",
          "type": "string"
        },
        "mimeType": {
          "description": "Internet media type (MIME type) of the attachment.",
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "id": "Error",
      "properties": {
        "reason": {
          "description": "Specific reason for the error. Some of the possible values are:  \n- \"groupTooBig\" - The group of users requested is too large for a single query. \n- \"tooManyCalendarsRequested\" - The number of calendars requested is too large for a single query. \n- \"notFound\" - The requested resource was not found. \n- \"internalError\" - The API service has encountered an internal error.  Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list.",
          "type": "string"
        },
        "domain": {
          "type": "string",
          "description": "Domain, or broad category, of the error."
        }
      }
    },
    "EventAttendee": {
      "id": "EventAttendee",
      "properties": {
        "organizer": {
          "description": "Whether the attendee is the organizer of the event. Read-only. The default is False.",
          "type": "boolean"
        },
        "optional": {
          "type": "boolean",
          "default": "false",
          "description": "Whether this is an optional attendee. Optional. The default is False."
        },
        "id": {
          "type": "string",
          "description": "The attendee's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API"
        },
        "responseStatus": {
          "type": "string",
          "description": "The attendee's response status. Possible values are:  \n- \"needsAction\" - The attendee has not responded to the invitation. \n- \"declined\" - The attendee has declined the invitation. \n- \"tentative\" - The attendee has tentatively accepted the invitation. \n- \"accepted\" - The attendee has accepted the invitation."
        },
        "additionalGuests": {
          "default": "0",
          "format": "int32",
          "description": "Number of additional guests. Optional. The default is 0.",
          "type": "integer"
        },
        "email": {
          "type": "string",
          "description": "The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.\nRequired when adding an attendee."
        },
        "displayName": {
          "type": "string",
          "description": "The attendee's name, if available. Optional."
        },
        "self": {
          "default": "false",
          "type": "boolean",
          "description": "Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False."
        },
        "comment": {
          "description": "The attendee's response comment. Optional.",
          "type": "string"
        },
        "resource": {
          "type": "boolean",
          "description": "Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.",
          "default": "false"
        }
      },
      "type": "object"
    },
    "EventDateTime": {
      "id": "EventDateTime",
      "properties": {
        "timeZone": {
          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.",
          "type": "string"
        },
        "date": {
          "type": "string",
          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
          "format": "date"
        },
        "dateTime": {
          "format": "date-time",
          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CalendarNotification": {
      "id": "CalendarNotification",
      "properties": {
        "method": {
          "type": "string",
          "description": "The method used to deliver the notification. The possible value is:  \n- \"email\" - Notifications are sent via email.  \nRequired when adding a notification."
        },
        "type": {
          "description": "The type of notification. Possible values are:  \n- \"eventCreation\" - Notification sent when a new event is put on the calendar. \n- \"eventChange\" - Notification sent when an event is changed. \n- \"eventCancellation\" - Notification sent when an event is cancelled. \n- \"eventResponse\" - Notification sent when an attendee responds to the event invitation. \n- \"agenda\" - An agenda with the events of the day (sent out in the morning).  \nRequired when adding a notification.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Events": {
      "id": "Events",
      "type": "object",
      "properties": {
        "updated": {
          "description": "Last modification time of the calendar (as a RFC3339 timestamp). Read-only.",
          "type": "string",
          "format": "date-time"
        },
        "items": {
          "items": {
            "$ref": "Event"
          },
          "type": "array",
          "description": "List of events on the calendar."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the collection."
        },
        "kind": {
          "description": "Type of the collection (\"calendar#events\").",
          "default": "calendar#events",
          "type": "string"
        },
        "summary": {
          "type": "string",
          "description": "Title of the calendar. Read-only."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided."
        },
        "defaultReminders": {
          "items": {
            "$ref": "EventReminder"
          },
          "type": "array",
          "description": "The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True)."
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone of the calendar. Read-only."
        },
        "accessRole": {
          "description": "The user's access role for this calendar. Read-only. Possible values are:  \n- \"none\" - The user has no access. \n- \"freeBusyReader\" - The user has read access to free/busy information. \n- \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.",
          "type": "string"
        },
        "description": {
          "description": "Description of the calendar. Read-only.",
          "type": "string"
        }
      }
    },
    "EntryPoint": {
      "id": "EntryPoint",
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters.\nExamples:  \n- for video: meet.google.com/aaa-bbbb-ccc\n- for phone: +1 123 268 2601\n- for sip: 12345678@altostrat.com\n- for more: should not be filled  \nOptional."
        },
        "pin": {
          "description": "The PIN to access the conference. The maximum length is 128 characters.\nWhen creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.\nOptional.",
          "type": "string"
        },
        "password": {
          "description": "The password to access the conference. The maximum length is 128 characters.\nWhen creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.\nOptional.",
          "type": "string"
        },
        "meetingCode": {
          "description": "The meeting code to access the conference. The maximum length is 128 characters.\nWhen creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.\nOptional.",
          "type": "string"
        },
        "regionCode": {
          "description": "The CLDR/ISO 3166 region code for the country associated with this phone access. Example: \"SE\" for Sweden.\nCalendar backend will populate this field only for EntryPointType.PHONE.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the entry point. The maximum length is 1300 characters.\nFormat:  \n- for video, http: or https: schema is required.\n- for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234).\n- for sip, sip: schema is required, e.g., sip:12345678@myprovider.com.\n- for more, http: or https: schema is required.",
          "type": "string"
        },
        "accessCode": {
          "type": "string",
          "description": "The access code to access the conference. The maximum length is 128 characters.\nWhen creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.\nOptional."
        },
        "entryPointType": {
          "type": "string",
          "description": "The type of the conference entry point.\nPossible values are:  \n- \"video\" - joining a conference over HTTP. A conference can have zero or one video entry point.\n- \"phone\" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points.\n- \"sip\" - joining a conference over SIP. A conference can have zero or one sip entry point.\n- \"more\" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference."
        },
        "passcode": {
          "description": "The passcode to access the conference. The maximum length is 128 characters.\nWhen creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.",
          "type": "string"
        },
        "entryPointFeatures": {
          "description": "Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "FreeBusyGroup": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Optional error(s) (if computation for the group failed).",
          "items": {
            "$ref": "Error"
          },
          "type": "array"
        },
        "calendars": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of calendars' identifiers within a group."
        }
      },
      "id": "FreeBusyGroup"
    }
  },
  "icons": {
    "x32": "http://fonts.gstatic.com/s/i/productlogos/calendar_2020q4/v8/web-32dp/logo_calendar_2020q4_color_1x_web_32dp.png",
    "x16": "http://fonts.gstatic.com/s/i/productlogos/calendar_2020q4/v8/web-16dp/logo_calendar_2020q4_color_1x_web_16dp.png"
  },
  "resources": {
    "settings": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly",
            "https://www.googleapis.com/auth/calendar.settings.readonly"
          ],
          "id": "calendar.settings.list",
          "description": "Returns all user settings for the authenticated user.",
          "response": {
            "$ref": "Settings"
          },
          "parameters": {
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token specifying which result page to return. Optional."
            }
          },
          "path": "users/me/settings",
          "supportsSubscription": true
        },
        "watch": {
          "path": "users/me/settings/watch",
          "request": {
            "parameterName": "resource",
            "$ref": "Channel"
          },
          "parameters": {
            "syncToken": {
              "location": "query",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "minimum": "1",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token specifying which result page to return. Optional."
            }
          },
          "httpMethod": "POST",
          "supportsSubscription": true,
          "response": {
            "$ref": "Channel"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly",
            "https://www.googleapis.com/auth/calendar.settings.readonly"
          ],
          "description": "Watch for changes to Settings resources.",
          "id": "calendar.settings.watch"
        },
        "get": {
          "path": "users/me/settings/{setting}",
          "response": {
            "$ref": "Setting"
          },
          "description": "Returns a single user setting.",
          "parameterOrder": [
            "setting"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly",
            "https://www.googleapis.com/auth/calendar.settings.readonly"
          ],
          "parameters": {
            "setting": {
              "required": true,
              "description": "The id of the user setting.",
              "location": "path",
              "type": "string"
            }
          },
          "id": "calendar.settings.get",
          "httpMethod": "GET"
        }
      }
    },
    "freebusy": {
      "methods": {
        "query": {
          "response": {
            "$ref": "FreeBusyResponse"
          },
          "httpMethod": "POST",
          "path": "freeBusy",
          "request": {
            "$ref": "FreeBusyRequest"
          },
          "id": "calendar.freebusy.query",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns free/busy information for a set of calendars."
        }
      }
    },
    "calendarList": {
      "methods": {
        "delete": {
          "path": "users/me/calendarList/{calendarId}",
          "id": "calendar.calendarList.delete",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "parameterOrder": [
            "calendarId"
          ],
          "httpMethod": "DELETE",
          "description": "Removes a calendar from the user's calendar list.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          }
        },
        "update": {
          "parameterOrder": [
            "calendarId"
          ],
          "path": "users/me/calendarList/{calendarId}",
          "id": "calendar.calendarList.update",
          "parameters": {
            "calendarId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            },
            "colorRgbFormat": {
              "description": "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.",
              "type": "boolean",
              "location": "query"
            }
          },
          "response": {
            "$ref": "CalendarListEntry"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "CalendarListEntry"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an existing calendar on the user's calendar list."
        },
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "parameters": {
            "showHidden": {
              "description": "Whether to show hidden entries. Optional. The default is False.",
              "location": "query",
              "type": "boolean"
            },
            "minAccessRole": {
              "type": "string",
              "location": "query",
              "enum": [
                "freeBusyReader",
                "owner",
                "reader",
                "writer"
              ],
              "enumDescriptions": [
                "The user can read free/busy information.",
                "The user can read and modify events and access control lists.",
                "The user can read events that are not private.",
                "The user can read and modify events."
              ],
              "description": "The minimum access role for the user in the returned entries. Optional. The default is no restriction."
            },
            "showDeleted": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to include deleted calendar list entries in the result. Optional. The default is False."
            },
            "pageToken": {
              "location": "query",
              "description": "Token specifying which result page to return. Optional.",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "type": "integer",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "location": "query",
              "minimum": "1"
            },
            "syncToken": {
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Returns the calendars on the user's calendar list.",
          "path": "users/me/calendarList",
          "supportsSubscription": true,
          "id": "calendar.calendarList.list",
          "response": {
            "$ref": "CalendarList"
          }
        },
        "insert": {
          "description": "Inserts an existing calendar into the user's calendar list.",
          "request": {
            "$ref": "CalendarListEntry"
          },
          "parameters": {
            "colorRgbFormat": {
              "type": "boolean",
              "description": "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.",
              "location": "query"
            }
          },
          "httpMethod": "POST",
          "id": "calendar.calendarList.insert",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "response": {
            "$ref": "CalendarListEntry"
          },
          "path": "users/me/calendarList"
        },
        "get": {
          "parameterOrder": [
            "calendarId"
          ],
          "description": "Returns a calendar from the user's calendar list.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "response": {
            "$ref": "CalendarListEntry"
          },
          "path": "users/me/calendarList/{calendarId}",
          "parameters": {
            "calendarId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            }
          },
          "id": "calendar.calendarList.get"
        },
        "watch": {
          "parameters": {
            "showDeleted": {
              "location": "query",
              "type": "boolean",
              "description": "Whether to include deleted calendar list entries in the result. Optional. The default is False."
            },
            "pageToken": {
              "description": "Token specifying which result page to return. Optional.",
              "location": "query",
              "type": "string"
            },
            "showHidden": {
              "location": "query",
              "type": "boolean",
              "description": "Whether to show hidden entries. Optional. The default is False."
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "type": "integer"
            },
            "minAccessRole": {
              "description": "The minimum access role for the user in the returned entries. Optional. The default is no restriction.",
              "location": "query",
              "enum": [
                "freeBusyReader",
                "owner",
                "reader",
                "writer"
              ],
              "enumDescriptions": [
                "The user can read free/busy information.",
                "The user can read and modify events and access control lists.",
                "The user can read events that are not private.",
                "The user can read and modify events."
              ],
              "type": "string"
            }
          },
          "id": "calendar.calendarList.watch",
          "httpMethod": "POST",
          "request": {
            "parameterName": "resource",
            "$ref": "Channel"
          },
          "supportsSubscription": true,
          "description": "Watch for changes to CalendarList resources.",
          "response": {
            "$ref": "Channel"
          },
          "path": "users/me/calendarList/watch",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ]
        },
        "patch": {
          "response": {
            "$ref": "CalendarListEntry"
          },
          "httpMethod": "PATCH",
          "path": "users/me/calendarList/{calendarId}",
          "description": "Updates an existing calendar on the user's calendar list. This method supports patch semantics.",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "request": {
            "$ref": "CalendarListEntry"
          },
          "parameterOrder": [
            "calendarId"
          ],
          "id": "calendar.calendarList.patch",
          "parameters": {
            "calendarId": {
              "required": true,
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path",
              "type": "string"
            },
            "colorRgbFormat": {
              "location": "query",
              "description": "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.",
              "type": "boolean"
            }
          }
        }
      }
    },
    "calendars": {
      "methods": {
        "patch": {
          "parameterOrder": [
            "calendarId"
          ],
          "id": "calendar.calendars.patch",
          "request": {
            "$ref": "Calendar"
          },
          "parameters": {
            "calendarId": {
              "required": true,
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Calendar"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "httpMethod": "PATCH",
          "description": "Updates metadata for a calendar. This method supports patch semantics.",
          "path": "calendars/{calendarId}"
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "calendarId": {
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "path": "calendars/{calendarId}",
          "description": "Returns metadata for a calendar.",
          "parameterOrder": [
            "calendarId"
          ],
          "response": {
            "$ref": "Calendar"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "id": "calendar.calendars.get"
        },
        "update": {
          "path": "calendars/{calendarId}",
          "httpMethod": "PUT",
          "description": "Updates metadata for a calendar.",
          "response": {
            "$ref": "Calendar"
          },
          "parameters": {
            "calendarId": {
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "calendarId"
          ],
          "id": "calendar.calendars.update",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "request": {
            "$ref": "Calendar"
          }
        },
        "delete": {
          "parameters": {
            "calendarId": {
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "DELETE",
          "path": "calendars/{calendarId}",
          "description": "Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.",
          "id": "calendar.calendars.delete",
          "parameterOrder": [
            "calendarId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ]
        },
        "clear": {
          "id": "calendar.calendars.clear",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "parameterOrder": [
            "calendarId"
          ],
          "description": "Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.",
          "path": "calendars/{calendarId}/clear",
          "httpMethod": "POST",
          "parameters": {
            "calendarId": {
              "location": "path",
              "required": true,
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string"
            }
          }
        },
        "insert": {
          "httpMethod": "POST",
          "request": {
            "$ref": "Calendar"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "response": {
            "$ref": "Calendar"
          },
          "id": "calendar.calendars.insert",
          "description": "Creates a secondary calendar.",
          "path": "calendars"
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events",
            "https://www.googleapis.com/auth/calendar.events.readonly",
            "https://www.googleapis.com/auth/calendar.readonly",
            "https://www.googleapis.com/auth/calendar.settings.readonly"
          ],
          "id": "calendar.channels.stop",
          "request": {
            "$ref": "Channel",
            "parameterName": "resource"
          },
          "path": "channels/stop",
          "description": "Stop watching resources through this channel"
        }
      }
    },
    "events": {
      "methods": {
        "move": {
          "id": "calendar.events.move",
          "response": {
            "$ref": "Event"
          },
          "description": "Moves an event to another calendar, i.e. changes an event's organizer.",
          "parameters": {
            "sendNotifications": {
              "location": "query",
              "description": "Deprecated. Please use sendUpdates instead.\n\nWhether to send notifications about the change of the event's organizer. Note that some emails might still be sent even if you set the value to false. The default is false.",
              "type": "boolean"
            },
            "sendUpdates": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Notifications are sent to all guests.",
                "Notifications are sent to non-Google Calendar guests only.",
                "No notifications are sent. For calendar migration tasks, consider using the Events.import method instead."
              ],
              "description": "Guests who should receive notifications about the change of the event's organizer.",
              "enum": [
                "all",
                "externalOnly",
                "none"
              ]
            },
            "destination": {
              "type": "string",
              "location": "query",
              "description": "Calendar identifier of the target calendar where the event is to be moved to.",
              "required": true
            },
            "calendarId": {
              "required": true,
              "location": "path",
              "description": "Calendar identifier of the source calendar where the event currently is on.",
              "type": "string"
            },
            "eventId": {
              "required": true,
              "type": "string",
              "description": "Event identifier.",
              "location": "path"
            }
          },
          "parameterOrder": [
            "calendarId",
            "eventId",
            "destination"
          ],
          "httpMethod": "POST",
          "path": "calendars/{calendarId}/events/{eventId}/move",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events"
          ]
        },
        "get": {
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events",
            "https://www.googleapis.com/auth/calendar.events.readonly",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "parameters": {
            "alwaysIncludeEmail": {
              "location": "query",
              "description": "Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).",
              "type": "boolean"
            },
            "eventId": {
              "description": "Event identifier.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "calendarId": {
              "required": true,
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string",
              "location": "path"
            },
            "maxAttendees": {
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            },
            "timeZone": {
              "location": "query",
              "type": "string",
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar."
            }
          },
          "path": "calendars/{calendarId}/events/{eventId}",
          "description": "Returns an event.",
          "httpMethod": "GET",
          "response": {
            "$ref": "Event"
          },
          "id": "calendar.events.get"
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameters": {
            "eventId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Event identifier."
            },
            "sendNotifications": {
              "location": "query",
              "description": "Deprecated. Please use sendUpdates instead.\n\nWhether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false.",
              "type": "boolean"
            },
            "sendUpdates": {
              "enumDescriptions": [
                "Notifications are sent to all guests.",
                "Notifications are sent to non-Google Calendar guests only.",
                "No notifications are sent. For calendar migration tasks, consider using the Events.import method instead."
              ],
              "location": "query",
              "type": "string",
              "description": "Guests who should receive notifications about the deletion of the event.",
              "enum": [
                "all",
                "externalOnly",
                "none"
              ]
            },
            "calendarId": {
              "location": "path",
              "required": true,
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string"
            }
          },
          "description": "Deletes an event.",
          "path": "calendars/{calendarId}/events/{eventId}",
          "id": "calendar.events.delete",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events"
          ],
          "parameterOrder": [
            "calendarId",
            "eventId"
          ]
        },
        "instances": {
          "id": "calendar.events.instances",
          "response": {
            "$ref": "Events"
          },
          "supportsSubscription": true,
          "description": "Returns instances of the specified recurring event.",
          "path": "calendars/{calendarId}/events/{eventId}/instances",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events",
            "https://www.googleapis.com/auth/calendar.events.readonly",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "parameters": {
            "originalStart": {
              "description": "The original start time of the instance in the result. Optional.",
              "location": "query",
              "type": "string"
            },
            "maxAttendees": {
              "location": "query",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "minimum": "1",
              "type": "integer",
              "format": "int32"
            },
            "timeMax": {
              "location": "query",
              "type": "string",
              "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.",
              "format": "date-time"
            },
            "eventId": {
              "type": "string",
              "required": true,
              "description": "Recurring event identifier.",
              "location": "path"
            },
            "timeMin": {
              "description": "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.",
              "format": "date-time",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.",
              "location": "query"
            },
            "alwaysIncludeEmail": {
              "location": "query",
              "type": "boolean",
              "description": "Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided)."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token specifying which result page to return. Optional."
            },
            "timeZone": {
              "location": "query",
              "type": "string",
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar."
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            },
            "showDeleted": {
              "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.",
              "type": "boolean",
              "location": "query"
            }
          },
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "httpMethod": "GET"
        },
        "update": {
          "httpMethod": "PUT",
          "request": {
            "$ref": "Event"
          },
          "id": "calendar.events.update",
          "path": "calendars/{calendarId}/events/{eventId}",
          "parameters": {
            "supportsAttachments": {
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False.",
              "type": "boolean",
              "location": "query"
            },
            "eventId": {
              "description": "Event identifier.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "sendNotifications": {
              "description": "Deprecated. Please use sendUpdates instead.\n\nWhether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.",
              "location": "query",
              "type": "boolean"
            },
            "conferenceDataVersion": {
              "description": "Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.",
              "minimum": "0",
              "type": "integer",
              "location": "query",
              "maximum": "1",
              "format": "int32"
            },
            "maxAttendees": {
              "minimum": "1",
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            },
            "alwaysIncludeEmail": {
              "description": "Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).",
              "type": "boolean",
              "location": "query"
            },
            "sendUpdates": {
              "location": "query",
              "type": "string",
              "description": "Guests who should receive notifications about the event update (for example, title changes, etc.).",
              "enum": [
                "all",
                "externalOnly",
                "none"
              ],
              "enumDescriptions": [
                "Notifications are sent to all guests.",
                "Notifications are sent to non-Google Calendar guests only.",
                "No notifications are sent. For calendar migration tasks, consider using the Events.import method instead."
              ]
            },
            "calendarId": {
              "required": true,
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Event"
          },
          "description": "Updates an event.",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events"
          ],
          "parameterOrder": [
            "calendarId",
            "eventId"
          ]
        },
        "list": {
          "parameters": {
            "sharedExtendedProperty": {
              "repeated": true,
              "description": "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "type": "string",
              "location": "query"
            },
            "privateExtendedProperty": {
              "type": "string",
              "repeated": true,
              "description": "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "location": "query"
            },
            "maxAttendees": {
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "location": "query",
              "format": "int32",
              "type": "integer",
              "minimum": "1"
            },
            "syncToken": {
              "type": "string",
              "location": "query",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            },
            "alwaysIncludeEmail": {
              "description": "Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).",
              "type": "boolean",
              "location": "query"
            },
            "iCalUID": {
              "description": "Specifies event ID in the iCalendar format to be included in the response. Optional.",
              "location": "query",
              "type": "string"
            },
            "q": {
              "description": "Free text search terms to find events that match these terms in any field, except for extended properties. Optional.",
              "type": "string",
              "location": "query"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.",
              "location": "query"
            },
            "maxResults": {
              "default": "250",
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.",
              "minimum": "1",
              "location": "query"
            },
            "timeMin": {
              "location": "query",
              "format": "date-time",
              "type": "string",
              "description": "Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax."
            },
            "showHiddenInvitations": {
              "type": "boolean",
              "description": "Whether to include hidden invitations in the result. Optional. The default is False.",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "enumDescriptions": [
                "Order by the start date/time (ascending). This is only available when querying single events (i.e. the parameter singleEvents is True)",
                "Order by last modification time (ascending)."
              ],
              "description": "The order of the events returned in the result. Optional. The default is an unspecified, stable order.",
              "location": "query",
              "enum": [
                "startTime",
                "updated"
              ]
            },
            "pageToken": {
              "description": "Token specifying which result page to return. Optional.",
              "type": "string",
              "location": "query"
            },
            "timeMax": {
              "type": "string",
              "format": "date-time",
              "location": "query",
              "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin."
            },
            "timeZone": {
              "location": "query",
              "type": "string",
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar."
            },
            "updatedMin": {
              "format": "date-time",
              "description": "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.",
              "type": "string",
              "location": "query"
            },
            "singleEvents": {
              "description": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.",
              "type": "boolean",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            }
          },
          "response": {
            "$ref": "Events"
          },
          "path": "calendars/{calendarId}/events",
          "parameterOrder": [
            "calendarId"
          ],
          "description": "Returns events on the specified calendar.",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events",
            "https://www.googleapis.com/auth/calendar.events.readonly",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "httpMethod": "GET",
          "id": "calendar.events.list",
          "supportsSubscription": true
        },
        "insert": {
          "description": "Creates an event.",
          "id": "calendar.events.insert",
          "path": "calendars/{calendarId}/events",
          "request": {
            "$ref": "Event"
          },
          "parameterOrder": [
            "calendarId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events"
          ],
          "response": {
            "$ref": "Event"
          },
          "parameters": {
            "sendNotifications": {
              "type": "boolean",
              "description": "Deprecated. Please use sendUpdates instead.\n\nWhether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false.",
              "location": "query"
            },
            "sendUpdates": {
              "type": "string",
              "enum": [
                "all",
                "externalOnly",
                "none"
              ],
              "description": "Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false.",
              "location": "query",
              "enumDescriptions": [
                "Notifications are sent to all guests.",
                "Notifications are sent to non-Google Calendar guests only.",
                "No notifications are sent. For calendar migration tasks, consider using the Events.import method instead."
              ]
            },
            "maxAttendees": {
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            },
            "calendarId": {
              "location": "path",
              "required": true,
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string"
            },
            "supportsAttachments": {
              "location": "query",
              "type": "boolean",
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False."
            },
            "conferenceDataVersion": {
              "minimum": "0",
              "type": "integer",
              "format": "int32",
              "location": "query",
              "maximum": "1",
              "description": "Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0."
            }
          },
          "httpMethod": "POST"
        },
        "import": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events"
          ],
          "id": "calendar.events.import",
          "path": "calendars/{calendarId}/events/import",
          "response": {
            "$ref": "Event"
          },
          "parameterOrder": [
            "calendarId"
          ],
          "parameters": {
            "conferenceDataVersion": {
              "maximum": "1",
              "description": "Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.",
              "minimum": "0",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "supportsAttachments": {
              "type": "boolean",
              "location": "query",
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False."
            },
            "calendarId": {
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "Event"
          },
          "description": "Imports an event. This operation is used to add a private copy of an existing event to a calendar."
        },
        "quickAdd": {
          "description": "Creates an event based on a simple text string.",
          "path": "calendars/{calendarId}/events/quickAdd",
          "id": "calendar.events.quickAdd",
          "parameters": {
            "sendUpdates": {
              "description": "Guests who should receive notifications about the creation of the new event.",
              "location": "query",
              "enum": [
                "all",
                "externalOnly",
                "none"
              ],
              "enumDescriptions": [
                "Notifications are sent to all guests.",
                "Notifications are sent to non-Google Calendar guests only.",
                "No notifications are sent. For calendar migration tasks, consider using the Events.import method instead."
              ],
              "type": "string"
            },
            "calendarId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            },
            "text": {
              "required": true,
              "location": "query",
              "description": "The text describing the event to be created.",
              "type": "string"
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Deprecated. Please use sendUpdates instead.\n\nWhether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false.",
              "location": "query"
            }
          },
          "parameterOrder": [
            "calendarId",
            "text"
          ],
          "response": {
            "$ref": "Event"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events"
          ],
          "httpMethod": "POST"
        },
        "watch": {
          "request": {
            "$ref": "Channel",
            "parameterName": "resource"
          },
          "httpMethod": "POST",
          "supportsSubscription": true,
          "response": {
            "$ref": "Channel"
          },
          "parameters": {
            "timeMax": {
              "format": "date-time",
              "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.",
              "type": "string",
              "location": "query"
            },
            "singleEvents": {
              "type": "boolean",
              "description": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.",
              "default": "250",
              "minimum": "1",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "showDeleted": {
              "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.",
              "type": "boolean",
              "location": "query"
            },
            "timeMin": {
              "location": "query",
              "description": "Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.",
              "format": "date-time",
              "type": "string"
            },
            "showHiddenInvitations": {
              "description": "Whether to include hidden invitations in the result. Optional. The default is False.",
              "location": "query",
              "type": "boolean"
            },
            "iCalUID": {
              "location": "query",
              "description": "Specifies event ID in the iCalendar format to be included in the response. Optional.",
              "type": "string"
            },
            "sharedExtendedProperty": {
              "repeated": true,
              "description": "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "type": "string",
              "location": "query"
            },
            "updatedMin": {
              "location": "query",
              "format": "date-time",
              "description": "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.",
              "type": "string"
            },
            "calendarId": {
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "q": {
              "description": "Free text search terms to find events that match these terms in any field, except for extended properties. Optional.",
              "type": "string",
              "location": "query"
            },
            "syncToken": {
              "location": "query",
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            },
            "timeZone": {
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar.",
              "location": "query",
              "type": "string"
            },
            "alwaysIncludeEmail": {
              "location": "query",
              "type": "boolean",
              "description": "Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided)."
            },
            "maxAttendees": {
              "minimum": "1",
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            },
            "privateExtendedProperty": {
              "repeated": true,
              "location": "query",
              "description": "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token specifying which result page to return. Optional."
            },
            "orderBy": {
              "location": "query",
              "description": "The order of the events returned in the result. Optional. The default is an unspecified, stable order.",
              "enumDescriptions": [
                "Order by the start date/time (ascending). This is only available when querying single events (i.e. the parameter singleEvents is True)",
                "Order by last modification time (ascending)."
              ],
              "type": "string",
              "enum": [
                "startTime",
                "updated"
              ]
            }
          },
          "description": "Watch for changes to Events resources.",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events",
            "https://www.googleapis.com/auth/calendar.events.readonly",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "path": "calendars/{calendarId}/events/watch",
          "id": "calendar.events.watch",
          "parameterOrder": [
            "calendarId"
          ]
        },
        "patch": {
          "request": {
            "$ref": "Event"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.events"
          ],
          "id": "calendar.events.patch",
          "httpMethod": "PATCH",
          "path": "calendars/{calendarId}/events/{eventId}",
          "description": "Updates an event. This method supports patch semantics.",
          "parameters": {
            "supportsAttachments": {
              "location": "query",
              "type": "boolean",
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False."
            },
            "calendarId": {
              "required": true,
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path",
              "type": "string"
            },
            "conferenceDataVersion": {
              "description": "Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.",
              "type": "integer",
              "maximum": "1",
              "minimum": "0",
              "format": "int32",
              "location": "query"
            },
            "alwaysIncludeEmail": {
              "type": "boolean",
              "location": "query",
              "description": "Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided)."
            },
            "sendUpdates": {
              "enumDescriptions": [
                "Notifications are sent to all guests.",
                "Notifications are sent to non-Google Calendar guests only.",
                "No notifications are sent. For calendar migration tasks, consider using the Events.import method instead."
              ],
              "location": "query",
              "description": "Guests who should receive notifications about the event update (for example, title changes, etc.).",
              "type": "string",
              "enum": [
                "all",
                "externalOnly",
                "none"
              ]
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Deprecated. Please use sendUpdates instead.\n\nWhether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.",
              "location": "query"
            },
            "eventId": {
              "required": true,
              "description": "Event identifier.",
              "type": "string",
              "location": "path"
            },
            "maxAttendees": {
              "type": "integer",
              "location": "query",
              "minimum": "1",
              "format": "int32",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            }
          },
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "response": {
            "$ref": "Event"
          }
        }
      }
    },
    "acl": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "request": {
            "$ref": "AclRule"
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "AclRule"
          },
          "description": "Creates an access control rule.",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/acl",
          "id": "calendar.acl.insert",
          "parameters": {
            "calendarId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            },
            "sendNotifications": {
              "location": "query",
              "type": "boolean",
              "description": "Whether to send notifications about the calendar sharing change. Optional. The default is True."
            }
          }
        },
        "delete": {
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "ruleId": {
              "type": "string",
              "required": true,
              "description": "ACL rule identifier.",
              "location": "path"
            }
          },
          "description": "Deletes an access control rule.",
          "httpMethod": "DELETE",
          "id": "calendar.acl.delete",
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ],
          "path": "calendars/{calendarId}/acl/{ruleId}",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ]
        },
        "get": {
          "id": "calendar.acl.get",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "path": "calendars/{calendarId}/acl/{ruleId}",
          "description": "Returns an access control rule.",
          "httpMethod": "GET",
          "response": {
            "$ref": "AclRule"
          },
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ],
          "parameters": {
            "calendarId": {
              "required": true,
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string"
            },
            "ruleId": {
              "required": true,
              "location": "path",
              "description": "ACL rule identifier.",
              "type": "string"
            }
          }
        },
        "list": {
          "response": {
            "$ref": "Acl"
          },
          "path": "calendars/{calendarId}/acl",
          "parameters": {
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "calendarId": {
              "type": "string",
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "required": true
            },
            "maxResults": {
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "type": "integer"
            },
            "showDeleted": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token specifying which result page to return. Optional."
            }
          },
          "httpMethod": "GET",
          "description": "Returns the rules in the access control list for the calendar.",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "parameterOrder": [
            "calendarId"
          ],
          "supportsSubscription": true,
          "id": "calendar.acl.list"
        },
        "watch": {
          "description": "Watch for changes to ACL resources.",
          "supportsSubscription": true,
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "httpMethod": "POST",
          "parameters": {
            "syncToken": {
              "location": "query",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "type": "string"
            },
            "calendarId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            },
            "maxResults": {
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "location": "query",
              "type": "integer",
              "minimum": "1",
              "format": "int32"
            },
            "showDeleted": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False."
            },
            "pageToken": {
              "description": "Token specifying which result page to return. Optional.",
              "location": "query",
              "type": "string"
            }
          },
          "path": "calendars/{calendarId}/acl/watch",
          "request": {
            "$ref": "Channel",
            "parameterName": "resource"
          },
          "id": "calendar.acl.watch",
          "parameterOrder": [
            "calendarId"
          ],
          "response": {
            "$ref": "Channel"
          }
        },
        "patch": {
          "request": {
            "$ref": "AclRule"
          },
          "description": "Updates an access control rule. This method supports patch semantics.",
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "parameters": {
            "ruleId": {
              "type": "string",
              "description": "ACL rule identifier.",
              "required": true,
              "location": "path"
            },
            "sendNotifications": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True."
            },
            "calendarId": {
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "PATCH",
          "response": {
            "$ref": "AclRule"
          },
          "id": "calendar.acl.patch",
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ],
          "path": "calendars/{calendarId}/acl/{ruleId}"
        },
        "update": {
          "id": "calendar.acl.update",
          "path": "calendars/{calendarId}/acl/{ruleId}",
          "response": {
            "$ref": "AclRule"
          },
          "parameters": {
            "ruleId": {
              "type": "string",
              "location": "path",
              "description": "ACL rule identifier.",
              "required": true
            },
            "calendarId": {
              "required": true,
              "location": "path",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "type": "string"
            },
            "sendNotifications": {
              "location": "query",
              "type": "boolean",
              "description": "Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True."
            }
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "AclRule"
          },
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an access control rule.",
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ]
        }
      }
    },
    "colors": {
      "methods": {
        "get": {
          "id": "calendar.colors.get",
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "httpMethod": "GET",
          "description": "Returns the color definitions for calendars and events.",
          "response": {
            "$ref": "Colors"
          },
          "path": "colors"
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "version": "v3",
  "basePath": "/calendar/v3/",
  "discoveryVersion": "v1",
  "protocol": "rest",
  "rootUrl": "https://www.googleapis.com/",
  "title": "Calendar API"
}
