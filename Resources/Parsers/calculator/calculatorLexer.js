"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/calculator/calculator.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var Lexer_1 = require("antlr4ts/Lexer");
var LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var calculatorLexer = /** @class */ (function (_super) {
    __extends(calculatorLexer, _super);
    // tslint:enable:no-trailing-whitespace
    function calculatorLexer(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new LexerATNSimulator_1.LexerATNSimulator(calculatorLexer._ATN, _this);
        return _this;
    }
    Object.defineProperty(calculatorLexer.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return calculatorLexer.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(calculatorLexer.prototype, "grammarFileName", {
        // @Override
        get: function () { return "calculator.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(calculatorLexer.prototype, "ruleNames", {
        // @Override
        get: function () { return calculatorLexer.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(calculatorLexer.prototype, "serializedATN", {
        // @Override
        get: function () { return calculatorLexer._serializedATN; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(calculatorLexer.prototype, "channelNames", {
        // @Override
        get: function () { return calculatorLexer.channelNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(calculatorLexer.prototype, "modeNames", {
        // @Override
        get: function () { return calculatorLexer.modeNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(calculatorLexer, "_ATN", {
        get: function () {
            if (!calculatorLexer.__ATN) {
                calculatorLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(calculatorLexer._serializedATN));
            }
            return calculatorLexer.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    calculatorLexer.COS = 1;
    calculatorLexer.SIN = 2;
    calculatorLexer.TAN = 3;
    calculatorLexer.ACOS = 4;
    calculatorLexer.ASIN = 5;
    calculatorLexer.ATAN = 6;
    calculatorLexer.LN = 7;
    calculatorLexer.LOG = 8;
    calculatorLexer.SQRT = 9;
    calculatorLexer.LPAREN = 10;
    calculatorLexer.RPAREN = 11;
    calculatorLexer.PLUS = 12;
    calculatorLexer.MINUS = 13;
    calculatorLexer.TIMES = 14;
    calculatorLexer.DIV = 15;
    calculatorLexer.GT = 16;
    calculatorLexer.LT = 17;
    calculatorLexer.EQ = 18;
    calculatorLexer.COMMA = 19;
    calculatorLexer.POINT = 20;
    calculatorLexer.POW = 21;
    calculatorLexer.PI = 22;
    calculatorLexer.EULER = 23;
    calculatorLexer.I = 24;
    calculatorLexer.VARIABLE = 25;
    calculatorLexer.SCIENTIFIC_NUMBER = 26;
    calculatorLexer.WS = 27;
    // tslint:disable:no-trailing-whitespace
    calculatorLexer.channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    calculatorLexer.modeNames = [
        "DEFAULT_MODE",
    ];
    calculatorLexer.ruleNames = [
        "COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "SQRT", "LPAREN",
        "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "COMMA",
        "POINT", "POW", "PI", "EULER", "I", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR",
        "SCIENTIFIC_NUMBER", "NUMBER", "E1", "E2", "SIGN", "WS",
    ];
    calculatorLexer._LITERAL_NAMES = [
        undefined, "'cos'", "'sin'", "'tan'", "'acos'", "'asin'", "'atan'", "'ln'",
        "'log'", "'sqrt'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'",
        "'='", "','", "'.'", "'^'", "'pi'", undefined, "'i'",
    ];
    calculatorLexer._SYMBOLIC_NAMES = [
        undefined, "COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "SQRT",
        "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ",
        "COMMA", "POINT", "POW", "PI", "EULER", "I", "VARIABLE", "SCIENTIFIC_NUMBER",
        "WS",
    ];
    calculatorLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(calculatorLexer._LITERAL_NAMES, calculatorLexer._SYMBOLIC_NAMES, []);
    calculatorLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\xBF\b\x01" +
        "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
        "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
        "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
        "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
        "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
        "\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
        "\"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
        "\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
        "\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n" +
        "\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03" +
        "\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
        "\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03" +
        "\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x07\x1A\x8E\n\x1A\f\x1A\x0E" +
        "\x1A\x91\v\x1A\x03\x1B\x05\x1B\x94\n\x1B\x03\x1C\x03\x1C\x05\x1C\x98\n" +
        "\x1C\x03\x1D\x03\x1D\x03\x1D\x05\x1D\x9D\n\x1D\x03\x1D\x05\x1D\xA0\n\x1D" +
        "\x03\x1D\x03\x1D\x05\x1D\xA4\n\x1D\x03\x1E\x06\x1E\xA7\n\x1E\r\x1E\x0E" +
        "\x1E\xA8\x03\x1E\x03\x1E\x06\x1E\xAD\n\x1E\r\x1E\x0E\x1E\xAE\x05\x1E\xB1" +
        "\n\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x06\"\xBA\n\"\r\"\x0E" +
        "\"\xBB\x03\"\x03\"\x02\x02\x02#\x03\x02\x03\x05\x02\x04\x07\x02\x05\t" +
        "\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
        "\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
        "%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
        "\x1B5\x02\x027\x02\x029\x02\x1C;\x02\x02=\x02\x02?\x02\x02A\x02\x02C\x02" +
        "\x1D\x03\x02\x05\x05\x02C\\aac|\x04\x02--//\x05\x02\v\f\x0F\x0F\"\"\x02" +
        "\xC1\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02" +
        "\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02" +
        "\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
        "\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02" +
        "\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02" +
        "\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'" +
        "\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02" +
        "\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02" +
        "\x029\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x03E\x03\x02\x02\x02\x05I\x03" +
        "\x02\x02\x02\x07M\x03\x02\x02\x02\tQ\x03\x02\x02\x02\vV\x03\x02\x02\x02" +
        "\r[\x03\x02\x02\x02\x0F`\x03\x02\x02\x02\x11c\x03\x02\x02\x02\x13g\x03" +
        "\x02\x02\x02\x15l\x03\x02\x02\x02\x17n\x03\x02\x02\x02\x19p\x03\x02\x02" +
        "\x02\x1Br\x03\x02\x02\x02\x1Dt\x03\x02\x02\x02\x1Fv\x03\x02\x02\x02!x" +
        "\x03\x02\x02\x02#z\x03\x02\x02\x02%|\x03\x02\x02\x02\'~\x03\x02\x02\x02" +
        ")\x80\x03\x02\x02\x02+\x82\x03\x02\x02\x02-\x84\x03\x02\x02\x02/\x87\x03" +
        "\x02\x02\x021\x89\x03\x02\x02\x023\x8B\x03\x02\x02\x025\x93\x03\x02\x02" +
        "\x027\x97\x03\x02\x02\x029\x99\x03\x02\x02\x02;\xA6\x03\x02\x02\x02=\xB2" +
        "\x03\x02\x02\x02?\xB4\x03\x02\x02\x02A\xB6\x03\x02\x02\x02C\xB9\x03\x02" +
        "\x02\x02EF\x07e\x02\x02FG\x07q\x02\x02GH\x07u\x02\x02H\x04\x03\x02\x02" +
        "\x02IJ\x07u\x02\x02JK\x07k\x02\x02KL\x07p\x02\x02L\x06\x03\x02\x02\x02" +
        "MN\x07v\x02\x02NO\x07c\x02\x02OP\x07p\x02\x02P\b\x03\x02\x02\x02QR\x07" +
        "c\x02\x02RS\x07e\x02\x02ST\x07q\x02\x02TU\x07u\x02\x02U\n\x03\x02\x02" +
        "\x02VW\x07c\x02\x02WX\x07u\x02\x02XY\x07k\x02\x02YZ\x07p\x02\x02Z\f\x03" +
        "\x02\x02\x02[\\\x07c\x02\x02\\]\x07v\x02\x02]^\x07c\x02\x02^_\x07p\x02" +
        "\x02_\x0E\x03\x02\x02\x02`a\x07n\x02\x02ab\x07p\x02\x02b\x10\x03\x02\x02" +
        "\x02cd\x07n\x02\x02de\x07q\x02\x02ef\x07i\x02\x02f\x12\x03\x02\x02\x02" +
        "gh\x07u\x02\x02hi\x07s\x02\x02ij\x07t\x02\x02jk\x07v\x02\x02k\x14\x03" +
        "\x02\x02\x02lm\x07*\x02\x02m\x16\x03\x02\x02\x02no\x07+\x02\x02o\x18\x03" +
        "\x02\x02\x02pq\x07-\x02\x02q\x1A\x03\x02\x02\x02rs\x07/\x02\x02s\x1C\x03" +
        "\x02\x02\x02tu\x07,\x02\x02u\x1E\x03\x02\x02\x02vw\x071\x02\x02w \x03" +
        "\x02\x02\x02xy\x07@\x02\x02y\"\x03\x02\x02\x02z{\x07>\x02\x02{$\x03\x02" +
        "\x02\x02|}\x07?\x02\x02}&\x03\x02\x02\x02~\x7F\x07.\x02\x02\x7F(\x03\x02" +
        "\x02\x02\x80\x81\x070\x02\x02\x81*\x03\x02\x02\x02\x82\x83\x07`\x02\x02" +
        "\x83,\x03\x02\x02\x02\x84\x85\x07r\x02\x02\x85\x86\x07k\x02\x02\x86.\x03" +
        "\x02\x02\x02\x87\x88\x05? \x02\x880\x03\x02\x02\x02\x89\x8A\x07k\x02\x02" +
        "\x8A2\x03\x02\x02\x02\x8B\x8F\x055\x1B\x02\x8C\x8E\x057\x1C\x02\x8D\x8C" +
        "\x03\x02\x02\x02\x8E\x91\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02\x8F\x90" +
        "\x03\x02\x02\x02\x904\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x92\x94" +
        "\t\x02\x02\x02\x93\x92\x03\x02\x02\x02\x946\x03\x02\x02\x02\x95\x98\x05" +
        "5\x1B\x02\x96\x98\x042;\x02\x97\x95\x03\x02\x02\x02\x97\x96\x03\x02\x02" +
        "\x02\x988\x03\x02\x02\x02\x99\xA3\x05;\x1E\x02\x9A\x9D\x05=\x1F\x02\x9B" +
        "\x9D\x05? \x02\x9C\x9A\x03\x02\x02\x02\x9C\x9B\x03\x02\x02\x02\x9D\x9F" +
        "\x03\x02\x02\x02\x9E\xA0\x05A!\x02\x9F\x9E\x03\x02\x02\x02\x9F\xA0\x03" +
        "\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\xA2\x05;\x1E\x02\xA2\xA4\x03" +
        "\x02\x02\x02\xA3\x9C\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4:\x03" +
        "\x02\x02\x02\xA5\xA7\x042;\x02\xA6\xA5\x03\x02\x02\x02\xA7\xA8\x03\x02" +
        "\x02\x02\xA8\xA6\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xB0\x03\x02" +
        "\x02\x02\xAA\xAC\x070\x02\x02\xAB\xAD\x042;\x02\xAC\xAB\x03\x02\x02\x02" +
        "\xAD\xAE\x03\x02\x02\x02\xAE\xAC\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02" +
        "\xAF\xB1\x03\x02\x02\x02\xB0\xAA\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02" +
        "\xB1<\x03\x02\x02\x02\xB2\xB3\x07G\x02\x02\xB3>\x03\x02\x02\x02\xB4\xB5" +
        "\x07g\x02\x02\xB5@\x03\x02\x02\x02\xB6\xB7\t\x03\x02\x02\xB7B\x03\x02" +
        "\x02\x02\xB8\xBA\t\x04\x02\x02\xB9\xB8\x03\x02\x02\x02\xBA\xBB\x03\x02" +
        "\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBD\x03\x02" +
        "\x02\x02\xBD\xBE\b\"\x02\x02\xBED\x03\x02\x02\x02\r\x02\x8F\x93\x97\x9C" +
        "\x9F\xA3\xA8\xAE\xB0\xBB\x03\b\x02\x02";
    return calculatorLexer;
}(Lexer_1.Lexer));
exports.calculatorLexer = calculatorLexer;
