// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/smalltalk/Smalltalk.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SmalltalkLexer extends Lexer {
	public static readonly SEPARATOR = 1;
	public static readonly STRING = 2;
	public static readonly COMMENT = 3;
	public static readonly BLOCK_START = 4;
	public static readonly BLOCK_END = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_PAREN = 7;
	public static readonly PIPE = 8;
	public static readonly PERIOD = 9;
	public static readonly SEMI_COLON = 10;
	public static readonly BINARY_SELECTOR = 11;
	public static readonly LT = 12;
	public static readonly GT = 13;
	public static readonly MINUS = 14;
	public static readonly RESERVED_WORD = 15;
	public static readonly IDENTIFIER = 16;
	public static readonly CARROT = 17;
	public static readonly COLON = 18;
	public static readonly ASSIGNMENT = 19;
	public static readonly HASH = 20;
	public static readonly DOLLAR = 21;
	public static readonly EXP = 22;
	public static readonly HEX = 23;
	public static readonly LITARR_START = 24;
	public static readonly DYNDICT_START = 25;
	public static readonly DYNARR_END = 26;
	public static readonly DYNARR_START = 27;
	public static readonly DIGIT = 28;
	public static readonly HEXDIGIT = 29;
	public static readonly KEYWORD = 30;
	public static readonly BLOCK_PARAM = 31;
	public static readonly CHARACTER_CONSTANT = 32;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"SEPARATOR", "STRING", "COMMENT", "BLOCK_START", "BLOCK_END", "CLOSE_PAREN", 
		"OPEN_PAREN", "PIPE", "PERIOD", "SEMI_COLON", "BINARY_SELECTOR", "LT", 
		"GT", "MINUS", "RESERVED_WORD", "IDENTIFIER", "CARROT", "COLON", "ASSIGNMENT", 
		"HASH", "DOLLAR", "EXP", "HEX", "LITARR_START", "DYNDICT_START", "DYNARR_END", 
		"DYNARR_START", "DIGIT", "HEXDIGIT", "KEYWORD", "BLOCK_PARAM", "CHARACTER_CONSTANT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'['", "']'", "')'", "'('", 
		"'|'", "'.'", "';'", undefined, "'<'", "'>'", "'-'", undefined, undefined, 
		"'^'", "':'", "':='", "'#'", "'$'", "'e'", "'16r'", "'#('", "'#{'", "'}'", 
		"'{'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "SEPARATOR", "STRING", "COMMENT", "BLOCK_START", "BLOCK_END", 
		"CLOSE_PAREN", "OPEN_PAREN", "PIPE", "PERIOD", "SEMI_COLON", "BINARY_SELECTOR", 
		"LT", "GT", "MINUS", "RESERVED_WORD", "IDENTIFIER", "CARROT", "COLON", 
		"ASSIGNMENT", "HASH", "DOLLAR", "EXP", "HEX", "LITARR_START", "DYNDICT_START", 
		"DYNARR_END", "DYNARR_START", "DIGIT", "HEXDIGIT", "KEYWORD", "BLOCK_PARAM", 
		"CHARACTER_CONSTANT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SmalltalkLexer._LITERAL_NAMES, SmalltalkLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SmalltalkLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SmalltalkLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Smalltalk.g4"; }

	// @Override
	public get ruleNames(): string[] { return SmalltalkLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SmalltalkLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SmalltalkLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SmalltalkLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\"\xBE\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x07\x03H\n\x03\f\x03\x0E\x03K\v\x03\x03\x03\x03\x03" +
		"\x03\x04\x03\x04\x07\x04Q\n\x04\f\x04\x0E\x04T\v\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x06\fi\n\f\r\f\x0E\fj\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\x88" +
		"\n\x10\x03\x11\x06\x11\x8B\n\x11\r\x11\x0E\x11\x8C\x03\x11\x07\x11\x90" +
		"\n\x11\f\x11\x0E\x11\x93\v\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18" +
		"\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F" +
		"\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x05!\xBD\n!\x04IR\x02\x02" +
		"\"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
		"\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16" +
		"+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E" +
		";\x02\x1F=\x02 ?\x02!A\x02\"\x03\x02\t\x05\x02\v\f\x0F\x0F\"\"\t\x02\'" +
		"\',.11>@BB^^\x80\x80\x05\x02((//AA\x04\x02C\\c|\x06\x022;C\\aac|\x03\x02" +
		"2;\x05\x022;CHch\x02\xC9\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02" +
		"\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02" +
		"\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02" +
		"\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02" +
		"\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03" +
		"\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02" +
		"\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x02" +
		"3\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02" +
		"\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02" +
		"\x02A\x03\x02\x02\x02\x03C\x03\x02\x02\x02\x05E\x03\x02\x02\x02\x07N\x03" +
		"\x02\x02\x02\tW\x03\x02\x02\x02\vY\x03\x02\x02\x02\r[\x03\x02\x02\x02" +
		"\x0F]\x03\x02\x02\x02\x11_\x03\x02\x02\x02\x13a\x03\x02\x02\x02\x15c\x03" +
		"\x02\x02\x02\x17h\x03\x02\x02\x02\x19l\x03\x02\x02\x02\x1Bn\x03\x02\x02" +
		"\x02\x1Dp\x03\x02\x02\x02\x1F\x87\x03\x02\x02\x02!\x8A\x03\x02\x02\x02" +
		"#\x94\x03\x02\x02\x02%\x96\x03\x02\x02\x02\'\x98\x03\x02\x02\x02)\x9B" +
		"\x03\x02\x02\x02+\x9D\x03\x02\x02\x02-\x9F\x03\x02\x02\x02/\xA1\x03\x02" +
		"\x02\x021\xA5\x03\x02\x02\x023\xA8\x03\x02\x02\x025\xAB\x03\x02\x02\x02" +
		"7\xAD\x03\x02\x02\x029\xAF\x03\x02\x02\x02;\xB1\x03\x02\x02\x02=\xB3\x03" +
		"\x02\x02\x02?\xB6\x03\x02\x02\x02A\xB9\x03\x02\x02\x02CD\t\x02\x02\x02" +
		"D\x04\x03\x02\x02\x02EI\x07)\x02\x02FH\v\x02\x02\x02GF\x03\x02\x02\x02" +
		"HK\x03\x02\x02\x02IJ\x03\x02\x02\x02IG\x03\x02\x02\x02JL\x03\x02\x02\x02" +
		"KI\x03\x02\x02\x02LM\x07)\x02\x02M\x06\x03\x02\x02\x02NR\x07$\x02\x02" +
		"OQ\v\x02\x02\x02PO\x03\x02\x02\x02QT\x03\x02\x02\x02RS\x03\x02\x02\x02" +
		"RP\x03\x02\x02\x02SU\x03\x02\x02\x02TR\x03\x02\x02\x02UV\x07$\x02\x02" +
		"V\b\x03\x02\x02\x02WX\x07]\x02\x02X\n\x03\x02\x02\x02YZ\x07_\x02\x02Z" +
		"\f\x03\x02\x02\x02[\\\x07+\x02\x02\\\x0E\x03\x02\x02\x02]^\x07*\x02\x02" +
		"^\x10\x03\x02\x02\x02_`\x07~\x02\x02`\x12\x03\x02\x02\x02ab\x070\x02\x02" +
		"b\x14\x03\x02\x02\x02cd\x07=\x02\x02d\x16\x03\x02\x02\x02ei\t\x03\x02" +
		"\x02fi\x05\x11\t\x02gi\t\x04\x02\x02he\x03\x02\x02\x02hf\x03\x02\x02\x02" +
		"hg\x03\x02\x02\x02ij\x03\x02\x02\x02jh\x03\x02\x02\x02jk\x03\x02\x02\x02" +
		"k\x18\x03\x02\x02\x02lm\x07>\x02\x02m\x1A\x03\x02\x02\x02no\x07@\x02\x02" +
		"o\x1C\x03\x02\x02\x02pq\x07/\x02\x02q\x1E\x03\x02\x02\x02rs\x07p\x02\x02" +
		"st\x07k\x02\x02t\x88\x07n\x02\x02uv\x07v\x02\x02vw\x07t\x02\x02wx\x07" +
		"w\x02\x02x\x88\x07g\x02\x02yz\x07h\x02\x02z{\x07c\x02\x02{|\x07n\x02\x02" +
		"|}\x07u\x02\x02}\x88\x07g\x02\x02~\x7F\x07u\x02\x02\x7F\x80\x07g\x02\x02" +
		"\x80\x81\x07n\x02\x02\x81\x88\x07h\x02\x02\x82\x83\x07u\x02\x02\x83\x84" +
		"\x07w\x02\x02\x84\x85\x07r\x02\x02\x85\x86\x07g\x02\x02\x86\x88\x07t\x02" +
		"\x02\x87r\x03\x02\x02\x02\x87u\x03\x02\x02\x02\x87y\x03\x02\x02\x02\x87" +
		"~\x03\x02\x02\x02\x87\x82\x03\x02\x02\x02\x88 \x03\x02\x02\x02\x89\x8B" +
		"\t\x05\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8A" +
		"\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x91\x03\x02\x02\x02\x8E\x90" +
		"\t\x06\x02\x02\x8F\x8E\x03\x02\x02\x02\x90\x93\x03\x02\x02\x02\x91\x8F" +
		"\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\"\x03\x02\x02\x02\x93\x91" +
		"\x03\x02\x02\x02\x94\x95\x07`\x02\x02\x95$\x03\x02\x02\x02\x96\x97\x07" +
		"<\x02\x02\x97&\x03\x02\x02\x02\x98\x99\x07<\x02\x02\x99\x9A\x07?\x02\x02" +
		"\x9A(\x03\x02\x02\x02\x9B\x9C\x07%\x02\x02\x9C*\x03\x02\x02\x02\x9D\x9E" +
		"\x07&\x02\x02\x9E,\x03\x02\x02\x02\x9F\xA0\x07g\x02\x02\xA0.\x03\x02\x02" +
		"\x02\xA1\xA2\x073\x02\x02\xA2\xA3\x078\x02\x02\xA3\xA4\x07t\x02\x02\xA4" +
		"0\x03\x02\x02\x02\xA5\xA6\x07%\x02\x02\xA6\xA7\x07*\x02\x02\xA72\x03\x02" +
		"\x02\x02\xA8\xA9\x07%\x02\x02\xA9\xAA\x07}\x02\x02\xAA4\x03\x02\x02\x02" +
		"\xAB\xAC\x07\x7F\x02\x02\xAC6\x03\x02\x02\x02\xAD\xAE\x07}\x02\x02\xAE" +
		"8\x03\x02\x02\x02\xAF\xB0\t\x07\x02\x02\xB0:\x03\x02\x02\x02\xB1\xB2\t" +
		"\b\x02\x02\xB2<\x03\x02\x02\x02\xB3\xB4\x05!\x11\x02\xB4\xB5\x05%\x13" +
		"\x02\xB5>\x03\x02\x02\x02\xB6\xB7\x05%\x13\x02\xB7\xB8\x05!\x11\x02\xB8" +
		"@\x03\x02\x02\x02\xB9\xBC\x05+\x16\x02\xBA\xBD\x05;\x1E\x02\xBB\xBD\x05" +
		"+\x16\x02\xBC\xBA\x03\x02\x02\x02\xBC\xBB\x03\x02\x02\x02\xBDB\x03\x02" +
		"\x02\x02\v\x02IRhj\x87\x8C\x91\xBC\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SmalltalkLexer.__ATN) {
			SmalltalkLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SmalltalkLexer._serializedATN));
		}

		return SmalltalkLexer.__ATN;
	}

}

