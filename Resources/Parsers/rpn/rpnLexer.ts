// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/rpn/rpn.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class rpnLexer extends Lexer {
	public static readonly SCIENTIFIC_NUMBER = 1;
	public static readonly VARIABLE = 2;
	public static readonly POW = 3;
	public static readonly PLUS = 4;
	public static readonly MINUS = 5;
	public static readonly TIMES = 6;
	public static readonly DIV = 7;
	public static readonly COS = 8;
	public static readonly SIN = 9;
	public static readonly TAN = 10;
	public static readonly ACOS = 11;
	public static readonly ASIN = 12;
	public static readonly ATAN = 13;
	public static readonly LN = 14;
	public static readonly LOG = 15;
	public static readonly POINT = 16;
	public static readonly WS = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"SCIENTIFIC_NUMBER", "NUMBER", "E", "SIGN", "VARIABLE", "VALID_ID_START", 
		"VALID_ID_CHAR", "POW", "PLUS", "MINUS", "TIMES", "DIV", "COS", "SIN", 
		"TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "POINT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'^'", "'+'", "'-'", "'*'", "'/'", "'cos'", 
		"'sin'", "'tan'", "'acos'", "'asin'", "'atan'", "'ln'", "'log'", "'.'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "SCIENTIFIC_NUMBER", "VARIABLE", "POW", "PLUS", "MINUS", "TIMES", 
		"DIV", "COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "POINT", 
		"WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(rpnLexer._LITERAL_NAMES, rpnLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return rpnLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(rpnLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "rpn.g4"; }

	// @Override
	public get ruleNames(): string[] { return rpnLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return rpnLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return rpnLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return rpnLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13\x8C\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x02\x05\x023\n\x02\x03\x02\x03\x02\x05\x027\n" +
		"\x02\x03\x03\x06\x03:\n\x03\r\x03\x0E\x03;\x03\x03\x03\x03\x06\x03@\n" +
		"\x03\r\x03\x0E\x03A\x05\x03D\n\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x07\x06L\n\x06\f\x06\x0E\x06O\v\x06\x03\x07\x05\x07R\n\x07" +
		"\x03\b\x03\b\x05\bV\n\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03" +
		"\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x17\x06\x17\x87\n\x17\r\x17\x0E\x17\x88\x03\x17\x03" +
		"\x17\x02\x02\x02\x18\x03\x02\x03\x05\x02\x02\x07\x02\x02\t\x02\x02\v\x02" +
		"\x04\r\x02\x02\x0F\x02\x02\x11\x02\x05\x13\x02\x06\x15\x02\x07\x17\x02" +
		"\b\x19\x02\t\x1B\x02\n\x1D\x02\v\x1F\x02\f!\x02\r#\x02\x0E%\x02\x0F\'" +
		"\x02\x10)\x02\x11+\x02\x12-\x02\x13\x03\x02\x06\x04\x02GGgg\x04\x02--" +
		"//\x05\x02C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\x8E\x02\x03\x03\x02\x02" +
		"\x02\x02\v\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
		"\x02\x02\x02\x03/\x03\x02\x02\x02\x059\x03\x02\x02\x02\x07E\x03\x02\x02" +
		"\x02\tG\x03\x02\x02\x02\vI\x03\x02\x02\x02\rQ\x03\x02\x02\x02\x0FU\x03" +
		"\x02\x02\x02\x11W\x03\x02\x02\x02\x13Y\x03\x02\x02\x02\x15[\x03\x02\x02" +
		"\x02\x17]\x03\x02\x02\x02\x19_\x03\x02\x02\x02\x1Ba\x03\x02\x02\x02\x1D" +
		"e\x03\x02\x02\x02\x1Fi\x03\x02\x02\x02!m\x03\x02\x02\x02#r\x03\x02\x02" +
		"\x02%w\x03\x02\x02\x02\'|\x03\x02\x02\x02)\x7F\x03\x02\x02\x02+\x83\x03" +
		"\x02\x02\x02-\x86\x03\x02\x02\x02/6\x05\x05\x03\x0202\x05\x07\x04\x02" +
		"13\x05\t\x05\x0221\x03\x02\x02\x0223\x03\x02\x02\x0234\x03\x02\x02\x02" +
		"45\x05\x05\x03\x0257\x03\x02\x02\x0260\x03\x02\x02\x0267\x03\x02\x02\x02" +
		"7\x04\x03\x02\x02\x028:\x042;\x0298\x03\x02\x02\x02:;\x03\x02\x02\x02" +
		";9\x03\x02\x02\x02;<\x03\x02\x02\x02<C\x03\x02\x02\x02=?\x070\x02\x02" +
		">@\x042;\x02?>\x03\x02\x02\x02@A\x03\x02\x02\x02A?\x03\x02\x02\x02AB\x03" +
		"\x02\x02\x02BD\x03\x02\x02\x02C=\x03\x02\x02\x02CD\x03\x02\x02\x02D\x06" +
		"\x03\x02\x02\x02EF\t\x02\x02\x02F\b\x03\x02\x02\x02GH\t\x03\x02\x02H\n" +
		"\x03\x02\x02\x02IM\x05\r\x07\x02JL\x05\x0F\b\x02KJ\x03\x02\x02\x02LO\x03" +
		"\x02\x02\x02MK\x03\x02\x02\x02MN\x03\x02\x02\x02N\f\x03\x02\x02\x02OM" +
		"\x03\x02\x02\x02PR\t\x04\x02\x02QP\x03\x02\x02\x02R\x0E\x03\x02\x02\x02" +
		"SV\x05\r\x07\x02TV\x042;\x02US\x03\x02\x02\x02UT\x03\x02\x02\x02V\x10" +
		"\x03\x02\x02\x02WX\x07`\x02\x02X\x12\x03\x02\x02\x02YZ\x07-\x02\x02Z\x14" +
		"\x03\x02\x02\x02[\\\x07/\x02\x02\\\x16\x03\x02\x02\x02]^\x07,\x02\x02" +
		"^\x18\x03\x02\x02\x02_`\x071\x02\x02`\x1A\x03\x02\x02\x02ab\x07e\x02\x02" +
		"bc\x07q\x02\x02cd\x07u\x02\x02d\x1C\x03\x02\x02\x02ef\x07u\x02\x02fg\x07" +
		"k\x02\x02gh\x07p\x02\x02h\x1E\x03\x02\x02\x02ij\x07v\x02\x02jk\x07c\x02" +
		"\x02kl\x07p\x02\x02l \x03\x02\x02\x02mn\x07c\x02\x02no\x07e\x02\x02op" +
		"\x07q\x02\x02pq\x07u\x02\x02q\"\x03\x02\x02\x02rs\x07c\x02\x02st\x07u" +
		"\x02\x02tu\x07k\x02\x02uv\x07p\x02\x02v$\x03\x02\x02\x02wx\x07c\x02\x02" +
		"xy\x07v\x02\x02yz\x07c\x02\x02z{\x07p\x02\x02{&\x03\x02\x02\x02|}\x07" +
		"n\x02\x02}~\x07p\x02\x02~(\x03\x02\x02\x02\x7F\x80\x07n\x02\x02\x80\x81" +
		"\x07q\x02\x02\x81\x82\x07i\x02\x02\x82*\x03\x02\x02\x02\x83\x84\x070\x02" +
		"\x02\x84,\x03\x02\x02\x02\x85\x87\t\x05\x02\x02\x86\x85\x03\x02\x02\x02" +
		"\x87\x88\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02" +
		"\x89\x8A\x03\x02\x02\x02\x8A\x8B\b\x17\x02\x02\x8B.\x03\x02\x02\x02\f" +
		"\x0226;ACMQU\x88\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!rpnLexer.__ATN) {
			rpnLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(rpnLexer._serializedATN));
		}

		return rpnLexer.__ATN;
	}

}

