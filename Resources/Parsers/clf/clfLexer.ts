// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/clf/clf.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class clfLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly DATE = 4;
	public static readonly TIME = 5;
	public static readonly TZ = 6;
	public static readonly LITERAL = 7;
	public static readonly IP = 8;
	public static readonly STRING = 9;
	public static readonly EOL = 10;
	public static readonly WS = 11;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "DATE", "TIME", "TZ", "LITERAL", "IP", "STRING", 
		"EOL", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'['", "':'", "']'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "DATE", "TIME", "TZ", "LITERAL", 
		"IP", "STRING", "EOL", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(clfLexer._LITERAL_NAMES, clfLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return clfLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(clfLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "clf.g4"; }

	// @Override
	public get ruleNames(): string[] { return clfLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return clfLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return clfLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return clfLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\rq\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x06\x05!\n\x05\r\x05\x0E" +
		"\x05\"\x03\x05\x03\x05\x03\x05\x03\x05\x06\x05)\n\x05\r\x05\x0E\x05*\x03" +
		"\x06\x06\x06.\n\x06\r\x06\x0E\x06/\x03\x06\x03\x06\x06\x064\n\x06\r\x06" +
		"\x0E\x065\x03\x06\x03\x06\x06\x06:\n\x06\r\x06\x0E\x06;\x03\x07\x03\x07" +
		"\x06\x07@\n\x07\r\x07\x0E\x07A\x03\b\x03\b\x07\bF\n\b\f\b\x0E\bI\v\b\x03" +
		"\b\x03\b\x03\t\x06\tN\n\t\r\t\x0E\tO\x03\t\x03\t\x06\tT\n\t\r\t\x0E\t" +
		"U\x03\t\x03\t\x06\tZ\n\t\r\t\x0E\t[\x03\t\x03\t\x06\t`\n\t\r\t\x0E\ta" +
		"\x03\n\x06\ne\n\n\r\n\x0E\nf\x03\v\x05\vj\n\v\x03\v\x03\v\x03\f\x03\f" +
		"\x03\f\x03\f\x02\x02\x02\r\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x03" +
		"\x02\x06\x03\x022;\x03\x02$$\t\x02*+/02;==C\\aac|\x05\x02\v\f\x0F\x0F" +
		"\"\"\x02}\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
		"\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x03\x19\x03\x02" +
		"\x02\x02\x05\x1B\x03\x02\x02\x02\x07\x1D\x03\x02\x02\x02\t \x03\x02\x02" +
		"\x02\v-\x03\x02\x02\x02\r=\x03\x02\x02\x02\x0FC\x03\x02\x02\x02\x11M\x03" +
		"\x02\x02\x02\x13d\x03\x02\x02\x02\x15i\x03\x02\x02\x02\x17m\x03\x02\x02" +
		"\x02\x19\x1A\x07]\x02\x02\x1A\x04\x03\x02\x02\x02\x1B\x1C\x07<\x02\x02" +
		"\x1C\x06\x03\x02\x02\x02\x1D\x1E\x07_\x02\x02\x1E\b\x03\x02\x02\x02\x1F" +
		"!\t\x02\x02\x02 \x1F\x03\x02\x02\x02!\"\x03\x02\x02\x02\" \x03\x02\x02" +
		"\x02\"#\x03\x02\x02\x02#$\x03\x02\x02\x02$%\x071\x02\x02%&\x05\x13\n\x02" +
		"&(\x071\x02\x02\')\t\x02\x02\x02(\'\x03\x02\x02\x02)*\x03\x02\x02\x02" +
		"*(\x03\x02\x02\x02*+\x03\x02\x02\x02+\n\x03\x02\x02\x02,.\t\x02\x02\x02" +
		"-,\x03\x02\x02\x02./\x03\x02\x02\x02/-\x03\x02\x02\x02/0\x03\x02\x02\x02" +
		"01\x03\x02\x02\x0213\x07<\x02\x0224\t\x02\x02\x0232\x03\x02\x02\x0245" +
		"\x03\x02\x02\x0253\x03\x02\x02\x0256\x03\x02\x02\x0267\x03\x02\x02\x02" +
		"79\x07<\x02\x028:\t\x02\x02\x0298\x03\x02\x02\x02:;\x03\x02\x02\x02;9" +
		"\x03\x02\x02\x02;<\x03\x02\x02\x02<\f\x03\x02\x02\x02=?\x07/\x02\x02>" +
		"@\t\x02\x02\x02?>\x03\x02\x02\x02@A\x03\x02\x02\x02A?\x03\x02\x02\x02" +
		"AB\x03\x02\x02\x02B\x0E\x03\x02\x02\x02CG\x07$\x02\x02DF\n\x03\x02\x02" +
		"ED\x03\x02\x02\x02FI\x03\x02\x02\x02GE\x03\x02\x02\x02GH\x03\x02\x02\x02" +
		"HJ\x03\x02\x02\x02IG\x03\x02\x02\x02JK\x07$\x02\x02K\x10\x03\x02\x02\x02" +
		"LN\t\x02\x02\x02ML\x03\x02\x02\x02NO\x03\x02\x02\x02OM\x03\x02\x02\x02" +
		"OP\x03\x02\x02\x02PQ\x03\x02\x02\x02QS\x070\x02\x02RT\t\x02\x02\x02SR" +
		"\x03\x02\x02\x02TU\x03\x02\x02\x02US\x03\x02\x02\x02UV\x03\x02\x02\x02" +
		"VW\x03\x02\x02\x02WY\x070\x02\x02XZ\t\x02\x02\x02YX\x03\x02\x02\x02Z[" +
		"\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\]\x03\x02\x02\x02" +
		"]_\x070\x02\x02^`\t\x02\x02\x02_^\x03\x02\x02\x02`a\x03\x02\x02\x02a_" +
		"\x03\x02\x02\x02ab\x03\x02\x02\x02b\x12\x03\x02\x02\x02ce\t\x04\x02\x02" +
		"dc\x03\x02\x02\x02ef\x03\x02\x02\x02fd\x03\x02\x02\x02fg\x03\x02\x02\x02" +
		"g\x14\x03\x02\x02\x02hj\x07\x0F\x02\x02ih\x03\x02\x02\x02ij\x03\x02\x02" +
		"\x02jk\x03\x02\x02\x02kl\x07\f\x02\x02l\x16\x03\x02\x02\x02mn\t\x05\x02" +
		"\x02no\x03\x02\x02\x02op\b\f\x02\x02p\x18\x03\x02\x02\x02\x10\x02\"*/" +
		"5;AGOU[afi\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!clfLexer.__ATN) {
			clfLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(clfLexer._serializedATN));
		}

		return clfLexer.__ATN;
	}

}

