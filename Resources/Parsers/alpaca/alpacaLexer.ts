// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/alpaca/alpaca.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class alpacaLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly QUOTEDCHAR = 23;
	public static readonly QUOTE = 24;
	public static readonly ALPHA = 25;
	public static readonly DIGIT = 26;
	public static readonly ARROW = 27;
	public static readonly COMMENT = 28;
	public static readonly WS = 29;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "QUOTEDCHAR", "QUOTE", "ALPHA", 
		"DIGIT", "ARROW", "COMMENT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'.'", "'begin'", "';'", "'state'", "'class'", "'neighbourhood'", 
		"'is'", "','", "'to'", "'when'", "'me'", "'and'", "'or'", "'xor'", "'('", 
		"')'", "'not'", "'='", "'in'", "'true'", "'false'", "'guess'", undefined, 
		"'\"'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "QUOTEDCHAR", "QUOTE", "ALPHA", "DIGIT", "ARROW", 
		"COMMENT", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(alpacaLexer._LITERAL_NAMES, alpacaLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return alpacaLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(alpacaLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "alpaca.g4"; }

	// @Override
	public get ruleNames(): string[] { return alpacaLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return alpacaLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return alpacaLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return alpacaLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1F\xBD\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x18\x03\x18\x07\x18\x9D\n\x18\f\x18\x0E\x18\xA0\v" +
		"\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03" +
		"\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\xB0\n\x1D\f\x1D\x0E" +
		"\x1D\xB3\v\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\xB1\x02\x02\x1F\x03\x02\x03\x05\x02\x04\x07\x02\x05" +
		"\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
		"\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F\x03\x02\x07\x03\x02$$\x04\x02" +
		"C\\c|\x03\x022;\x06\x02>>@@``xx\x05\x02\v\f\x0F\x0F\"\"\x02\xBE\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02" +
		"\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02" +
		"/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02" +
		"\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02" +
		"\x03=\x03\x02\x02\x02\x05?\x03\x02\x02\x02\x07E\x03\x02\x02\x02\tG\x03" +
		"\x02\x02\x02\vM\x03\x02\x02\x02\rS\x03\x02\x02\x02\x0Fa\x03\x02\x02\x02" +
		"\x11d\x03\x02\x02\x02\x13f\x03\x02\x02\x02\x15i\x03\x02\x02\x02\x17n\x03" +
		"\x02\x02\x02\x19q\x03\x02\x02\x02\x1Bu\x03\x02\x02\x02\x1Dx\x03\x02\x02" +
		"\x02\x1F|\x03\x02\x02\x02!~\x03\x02\x02\x02#\x80\x03\x02\x02\x02%\x84" +
		"\x03\x02\x02\x02\'\x86\x03\x02\x02\x02)\x89\x03\x02\x02\x02+\x8E\x03\x02" +
		"\x02\x02-\x94\x03\x02\x02\x02/\x9A\x03\x02\x02\x021\xA3\x03\x02\x02\x02" +
		"3\xA5\x03\x02\x02\x025\xA7\x03\x02\x02\x027\xA9\x03\x02\x02\x029\xAB\x03" +
		"\x02\x02\x02;\xB9\x03\x02\x02\x02=>\x070\x02\x02>\x04\x03\x02\x02\x02" +
		"?@\x07d\x02\x02@A\x07g\x02\x02AB\x07i\x02\x02BC\x07k\x02\x02CD\x07p\x02" +
		"\x02D\x06\x03\x02\x02\x02EF\x07=\x02\x02F\b\x03\x02\x02\x02GH\x07u\x02" +
		"\x02HI\x07v\x02\x02IJ\x07c\x02\x02JK\x07v\x02\x02KL\x07g\x02\x02L\n\x03" +
		"\x02\x02\x02MN\x07e\x02\x02NO\x07n\x02\x02OP\x07c\x02\x02PQ\x07u\x02\x02" +
		"QR\x07u\x02\x02R\f\x03\x02\x02\x02ST\x07p\x02\x02TU\x07g\x02\x02UV\x07" +
		"k\x02\x02VW\x07i\x02\x02WX\x07j\x02\x02XY\x07d\x02\x02YZ\x07q\x02\x02" +
		"Z[\x07w\x02\x02[\\\x07t\x02\x02\\]\x07j\x02\x02]^\x07q\x02\x02^_\x07q" +
		"\x02\x02_`\x07f\x02\x02`\x0E\x03\x02\x02\x02ab\x07k\x02\x02bc\x07u\x02" +
		"\x02c\x10\x03\x02\x02\x02de\x07.\x02\x02e\x12\x03\x02\x02\x02fg\x07v\x02" +
		"\x02gh\x07q\x02\x02h\x14\x03\x02\x02\x02ij\x07y\x02\x02jk\x07j\x02\x02" +
		"kl\x07g\x02\x02lm\x07p\x02\x02m\x16\x03\x02\x02\x02no\x07o\x02\x02op\x07" +
		"g\x02\x02p\x18\x03\x02\x02\x02qr\x07c\x02\x02rs\x07p\x02\x02st\x07f\x02" +
		"\x02t\x1A\x03\x02\x02\x02uv\x07q\x02\x02vw\x07t\x02\x02w\x1C\x03\x02\x02" +
		"\x02xy\x07z\x02\x02yz\x07q\x02\x02z{\x07t\x02\x02{\x1E\x03\x02\x02\x02" +
		"|}\x07*\x02\x02} \x03\x02\x02\x02~\x7F\x07+\x02\x02\x7F\"\x03\x02\x02" +
		"\x02\x80\x81\x07p\x02\x02\x81\x82\x07q\x02\x02\x82\x83\x07v\x02\x02\x83" +
		"$\x03\x02\x02\x02\x84\x85\x07?\x02\x02\x85&\x03\x02\x02\x02\x86\x87\x07" +
		"k\x02\x02\x87\x88\x07p\x02\x02\x88(\x03\x02\x02\x02\x89\x8A\x07v\x02\x02" +
		"\x8A\x8B\x07t\x02\x02\x8B\x8C\x07w\x02\x02\x8C\x8D\x07g\x02\x02\x8D*\x03" +
		"\x02\x02\x02\x8E\x8F\x07h\x02\x02\x8F\x90\x07c\x02\x02\x90\x91\x07n\x02" +
		"\x02\x91\x92\x07u\x02\x02\x92\x93\x07g\x02\x02\x93,\x03\x02\x02\x02\x94" +
		"\x95\x07i\x02\x02\x95\x96\x07w\x02\x02\x96\x97\x07g\x02\x02\x97\x98\x07" +
		"u\x02\x02\x98\x99\x07u\x02\x02\x99.\x03\x02\x02\x02\x9A\x9E\x07$\x02\x02" +
		"\x9B\x9D\n\x02\x02\x02\x9C\x9B\x03\x02\x02\x02\x9D\xA0\x03\x02\x02\x02" +
		"\x9E\x9C\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\xA1\x03\x02\x02\x02" +
		"\xA0\x9E\x03\x02\x02\x02\xA1\xA2\x07$\x02\x02\xA20\x03\x02\x02\x02\xA3" +
		"\xA4\x07$\x02\x02\xA42\x03\x02\x02\x02\xA5\xA6\t\x03\x02\x02\xA64\x03" +
		"\x02\x02\x02\xA7\xA8\t\x04\x02\x02\xA86\x03\x02\x02\x02\xA9\xAA\t\x05" +
		"\x02\x02\xAA8\x03\x02\x02\x02\xAB\xAC\x071\x02\x02\xAC\xAD\x07,\x02\x02" +
		"\xAD\xB1\x03\x02\x02\x02\xAE\xB0\v\x02\x02\x02\xAF\xAE\x03\x02\x02\x02" +
		"\xB0\xB3\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02\xB1\xAF\x03\x02\x02\x02" +
		"\xB2\xB4\x03\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB4\xB5\x07,\x02\x02" +
		"\xB5\xB6\x071\x02\x02\xB6\xB7\x03\x02\x02\x02\xB7\xB8\b\x1D\x02\x02\xB8" +
		":\x03\x02\x02\x02\xB9\xBA\t\x06\x02\x02\xBA\xBB\x03\x02\x02\x02\xBB\xBC" +
		"\b\x1E\x02\x02\xBC<\x03\x02\x02\x02\x05\x02\x9E\xB1\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!alpacaLexer.__ATN) {
			alpacaLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(alpacaLexer._serializedATN));
		}

		return alpacaLexer.__ATN;
	}

}

