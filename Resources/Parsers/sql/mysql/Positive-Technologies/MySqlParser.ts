// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/sql/mysql/Positive-Technologies/MySqlParser.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { MySqlParserListener } from "./MySqlParserListener";

export class MySqlParser extends Parser {
	public static readonly SPACE = 1;
	public static readonly SPEC_MYSQL_COMMENT = 2;
	public static readonly COMMENT_INPUT = 3;
	public static readonly LINE_COMMENT = 4;
	public static readonly ADD = 5;
	public static readonly ALL = 6;
	public static readonly ALTER = 7;
	public static readonly ALWAYS = 8;
	public static readonly ANALYZE = 9;
	public static readonly AND = 10;
	public static readonly AS = 11;
	public static readonly ASC = 12;
	public static readonly BEFORE = 13;
	public static readonly BETWEEN = 14;
	public static readonly BOTH = 15;
	public static readonly BY = 16;
	public static readonly CALL = 17;
	public static readonly CASCADE = 18;
	public static readonly CASE = 19;
	public static readonly CAST = 20;
	public static readonly CHANGE = 21;
	public static readonly CHARACTER = 22;
	public static readonly CHECK = 23;
	public static readonly COLLATE = 24;
	public static readonly COLUMN = 25;
	public static readonly CONDITION = 26;
	public static readonly CONSTRAINT = 27;
	public static readonly CONTINUE = 28;
	public static readonly CONVERT = 29;
	public static readonly CREATE = 30;
	public static readonly CROSS = 31;
	public static readonly CURRENT_USER = 32;
	public static readonly CURSOR = 33;
	public static readonly DATABASE = 34;
	public static readonly DATABASES = 35;
	public static readonly DECLARE = 36;
	public static readonly DEFAULT = 37;
	public static readonly DELAYED = 38;
	public static readonly DELETE = 39;
	public static readonly DESC = 40;
	public static readonly DESCRIBE = 41;
	public static readonly DETERMINISTIC = 42;
	public static readonly DISTINCT = 43;
	public static readonly DISTINCTROW = 44;
	public static readonly DROP = 45;
	public static readonly EACH = 46;
	public static readonly ELSE = 47;
	public static readonly ELSEIF = 48;
	public static readonly ENCLOSED = 49;
	public static readonly ESCAPED = 50;
	public static readonly EXISTS = 51;
	public static readonly EXIT = 52;
	public static readonly EXPLAIN = 53;
	public static readonly FALSE = 54;
	public static readonly FETCH = 55;
	public static readonly FOR = 56;
	public static readonly FORCE = 57;
	public static readonly FOREIGN = 58;
	public static readonly FROM = 59;
	public static readonly FULLTEXT = 60;
	public static readonly GENERATED = 61;
	public static readonly GRANT = 62;
	public static readonly GROUP = 63;
	public static readonly HAVING = 64;
	public static readonly HIGH_PRIORITY = 65;
	public static readonly IF = 66;
	public static readonly IGNORE = 67;
	public static readonly IN = 68;
	public static readonly INDEX = 69;
	public static readonly INFILE = 70;
	public static readonly INNER = 71;
	public static readonly INOUT = 72;
	public static readonly INSERT = 73;
	public static readonly INTERVAL = 74;
	public static readonly INTO = 75;
	public static readonly IS = 76;
	public static readonly ITERATE = 77;
	public static readonly JOIN = 78;
	public static readonly KEY = 79;
	public static readonly KEYS = 80;
	public static readonly KILL = 81;
	public static readonly LEADING = 82;
	public static readonly LEAVE = 83;
	public static readonly LEFT = 84;
	public static readonly LIKE = 85;
	public static readonly LIMIT = 86;
	public static readonly LINEAR = 87;
	public static readonly LINES = 88;
	public static readonly LOAD = 89;
	public static readonly LOCK = 90;
	public static readonly LOOP = 91;
	public static readonly LOW_PRIORITY = 92;
	public static readonly MASTER_BIND = 93;
	public static readonly MASTER_SSL_VERIFY_SERVER_CERT = 94;
	public static readonly MATCH = 95;
	public static readonly MAXVALUE = 96;
	public static readonly MODIFIES = 97;
	public static readonly NATURAL = 98;
	public static readonly NOT = 99;
	public static readonly NO_WRITE_TO_BINLOG = 100;
	public static readonly NULL_LITERAL = 101;
	public static readonly ON = 102;
	public static readonly OPTIMIZE = 103;
	public static readonly OPTION = 104;
	public static readonly OPTIONALLY = 105;
	public static readonly OR = 106;
	public static readonly ORDER = 107;
	public static readonly OUT = 108;
	public static readonly OUTER = 109;
	public static readonly OUTFILE = 110;
	public static readonly PARTITION = 111;
	public static readonly PRIMARY = 112;
	public static readonly PROCEDURE = 113;
	public static readonly PURGE = 114;
	public static readonly RANGE = 115;
	public static readonly READ = 116;
	public static readonly READS = 117;
	public static readonly REFERENCES = 118;
	public static readonly REGEXP = 119;
	public static readonly RELEASE = 120;
	public static readonly RENAME = 121;
	public static readonly REPEAT = 122;
	public static readonly REPLACE = 123;
	public static readonly REQUIRE = 124;
	public static readonly RESTRICT = 125;
	public static readonly RETURN = 126;
	public static readonly REVOKE = 127;
	public static readonly RIGHT = 128;
	public static readonly RLIKE = 129;
	public static readonly SCHEMA = 130;
	public static readonly SCHEMAS = 131;
	public static readonly SELECT = 132;
	public static readonly SET = 133;
	public static readonly SEPARATOR = 134;
	public static readonly SHOW = 135;
	public static readonly SIGNAL = 136;
	public static readonly SPATIAL = 137;
	public static readonly SQL = 138;
	public static readonly SQLEXCEPTION = 139;
	public static readonly SQLSTATE = 140;
	public static readonly SQLWARNING = 141;
	public static readonly SQL_BIG_RESULT = 142;
	public static readonly SQL_CALC_FOUND_ROWS = 143;
	public static readonly SQL_SMALL_RESULT = 144;
	public static readonly SSL = 145;
	public static readonly STARTING = 146;
	public static readonly STRAIGHT_JOIN = 147;
	public static readonly TABLE = 148;
	public static readonly TERMINATED = 149;
	public static readonly THEN = 150;
	public static readonly TO = 151;
	public static readonly TRAILING = 152;
	public static readonly TRIGGER = 153;
	public static readonly TRUE = 154;
	public static readonly UNDO = 155;
	public static readonly UNION = 156;
	public static readonly UNIQUE = 157;
	public static readonly UNLOCK = 158;
	public static readonly UNSIGNED = 159;
	public static readonly UPDATE = 160;
	public static readonly USAGE = 161;
	public static readonly USE = 162;
	public static readonly USING = 163;
	public static readonly VALUES = 164;
	public static readonly WHEN = 165;
	public static readonly WHERE = 166;
	public static readonly WHILE = 167;
	public static readonly WITH = 168;
	public static readonly WRITE = 169;
	public static readonly XOR = 170;
	public static readonly ZEROFILL = 171;
	public static readonly TINYINT = 172;
	public static readonly SMALLINT = 173;
	public static readonly MEDIUMINT = 174;
	public static readonly INT = 175;
	public static readonly INTEGER = 176;
	public static readonly BIGINT = 177;
	public static readonly REAL = 178;
	public static readonly DOUBLE = 179;
	public static readonly PRECISION = 180;
	public static readonly FLOAT = 181;
	public static readonly DECIMAL = 182;
	public static readonly DEC = 183;
	public static readonly NUMERIC = 184;
	public static readonly DATE = 185;
	public static readonly TIME = 186;
	public static readonly TIMESTAMP = 187;
	public static readonly DATETIME = 188;
	public static readonly YEAR = 189;
	public static readonly CHAR = 190;
	public static readonly VARCHAR = 191;
	public static readonly NVARCHAR = 192;
	public static readonly NATIONAL = 193;
	public static readonly BINARY = 194;
	public static readonly VARBINARY = 195;
	public static readonly TINYBLOB = 196;
	public static readonly BLOB = 197;
	public static readonly MEDIUMBLOB = 198;
	public static readonly LONGBLOB = 199;
	public static readonly TINYTEXT = 200;
	public static readonly TEXT = 201;
	public static readonly MEDIUMTEXT = 202;
	public static readonly LONGTEXT = 203;
	public static readonly ENUM = 204;
	public static readonly VARYING = 205;
	public static readonly SERIAL = 206;
	public static readonly YEAR_MONTH = 207;
	public static readonly DAY_HOUR = 208;
	public static readonly DAY_MINUTE = 209;
	public static readonly DAY_SECOND = 210;
	public static readonly HOUR_MINUTE = 211;
	public static readonly HOUR_SECOND = 212;
	public static readonly MINUTE_SECOND = 213;
	public static readonly SECOND_MICROSECOND = 214;
	public static readonly MINUTE_MICROSECOND = 215;
	public static readonly HOUR_MICROSECOND = 216;
	public static readonly DAY_MICROSECOND = 217;
	public static readonly AVG = 218;
	public static readonly BIT_AND = 219;
	public static readonly BIT_OR = 220;
	public static readonly BIT_XOR = 221;
	public static readonly COUNT = 222;
	public static readonly GROUP_CONCAT = 223;
	public static readonly MAX = 224;
	public static readonly MIN = 225;
	public static readonly STD = 226;
	public static readonly STDDEV = 227;
	public static readonly STDDEV_POP = 228;
	public static readonly STDDEV_SAMP = 229;
	public static readonly SUM = 230;
	public static readonly VAR_POP = 231;
	public static readonly VAR_SAMP = 232;
	public static readonly VARIANCE = 233;
	public static readonly CURRENT_DATE = 234;
	public static readonly CURRENT_TIME = 235;
	public static readonly CURRENT_TIMESTAMP = 236;
	public static readonly LOCALTIME = 237;
	public static readonly CURDATE = 238;
	public static readonly CURTIME = 239;
	public static readonly DATE_ADD = 240;
	public static readonly DATE_SUB = 241;
	public static readonly EXTRACT = 242;
	public static readonly LOCALTIMESTAMP = 243;
	public static readonly NOW = 244;
	public static readonly POSITION = 245;
	public static readonly SUBSTR = 246;
	public static readonly SUBSTRING = 247;
	public static readonly SYSDATE = 248;
	public static readonly TRIM = 249;
	public static readonly UTC_DATE = 250;
	public static readonly UTC_TIME = 251;
	public static readonly UTC_TIMESTAMP = 252;
	public static readonly ACCOUNT = 253;
	public static readonly ACTION = 254;
	public static readonly AFTER = 255;
	public static readonly AGGREGATE = 256;
	public static readonly ALGORITHM = 257;
	public static readonly ANY = 258;
	public static readonly AT = 259;
	public static readonly AUTHORS = 260;
	public static readonly AUTOCOMMIT = 261;
	public static readonly AUTOEXTEND_SIZE = 262;
	public static readonly AUTO_INCREMENT = 263;
	public static readonly AVG_ROW_LENGTH = 264;
	public static readonly BEGIN = 265;
	public static readonly BINLOG = 266;
	public static readonly BIT = 267;
	public static readonly BLOCK = 268;
	public static readonly BOOL = 269;
	public static readonly BOOLEAN = 270;
	public static readonly BTREE = 271;
	public static readonly CACHE = 272;
	public static readonly CASCADED = 273;
	public static readonly CHAIN = 274;
	public static readonly CHANGED = 275;
	public static readonly CHANNEL = 276;
	public static readonly CHECKSUM = 277;
	public static readonly PAGE_CHECKSUM = 278;
	public static readonly CIPHER = 279;
	public static readonly CLASS_ORIGIN = 280;
	public static readonly CLIENT = 281;
	public static readonly CLOSE = 282;
	public static readonly COALESCE = 283;
	public static readonly CODE = 284;
	public static readonly COLUMNS = 285;
	public static readonly COLUMN_FORMAT = 286;
	public static readonly COLUMN_NAME = 287;
	public static readonly COMMENT = 288;
	public static readonly COMMIT = 289;
	public static readonly COMPACT = 290;
	public static readonly COMPLETION = 291;
	public static readonly COMPRESSED = 292;
	public static readonly COMPRESSION = 293;
	public static readonly CONCURRENT = 294;
	public static readonly CONNECTION = 295;
	public static readonly CONSISTENT = 296;
	public static readonly CONSTRAINT_CATALOG = 297;
	public static readonly CONSTRAINT_SCHEMA = 298;
	public static readonly CONSTRAINT_NAME = 299;
	public static readonly CONTAINS = 300;
	public static readonly CONTEXT = 301;
	public static readonly CONTRIBUTORS = 302;
	public static readonly COPY = 303;
	public static readonly CPU = 304;
	public static readonly DATA = 305;
	public static readonly DATAFILE = 306;
	public static readonly DEALLOCATE = 307;
	public static readonly DEFAULT_AUTH = 308;
	public static readonly DEFINER = 309;
	public static readonly DELAY_KEY_WRITE = 310;
	public static readonly DES_KEY_FILE = 311;
	public static readonly DIRECTORY = 312;
	public static readonly DISABLE = 313;
	public static readonly DISCARD = 314;
	public static readonly DISK = 315;
	public static readonly DO = 316;
	public static readonly DUMPFILE = 317;
	public static readonly DUPLICATE = 318;
	public static readonly DYNAMIC = 319;
	public static readonly ENABLE = 320;
	public static readonly ENCRYPTION = 321;
	public static readonly END = 322;
	public static readonly ENDS = 323;
	public static readonly ENGINE = 324;
	public static readonly ENGINES = 325;
	public static readonly ERROR = 326;
	public static readonly ERRORS = 327;
	public static readonly ESCAPE = 328;
	public static readonly EVEN = 329;
	public static readonly EVENT = 330;
	public static readonly EVENTS = 331;
	public static readonly EVERY = 332;
	public static readonly EXCHANGE = 333;
	public static readonly EXCLUSIVE = 334;
	public static readonly EXPIRE = 335;
	public static readonly EXPORT = 336;
	public static readonly EXTENDED = 337;
	public static readonly EXTENT_SIZE = 338;
	public static readonly FAST = 339;
	public static readonly FAULTS = 340;
	public static readonly FIELDS = 341;
	public static readonly FILE_BLOCK_SIZE = 342;
	public static readonly FILTER = 343;
	public static readonly FIRST = 344;
	public static readonly FIXED = 345;
	public static readonly FLUSH = 346;
	public static readonly FOLLOWS = 347;
	public static readonly FOUND = 348;
	public static readonly FULL = 349;
	public static readonly FUNCTION = 350;
	public static readonly GENERAL = 351;
	public static readonly GLOBAL = 352;
	public static readonly GRANTS = 353;
	public static readonly GROUP_REPLICATION = 354;
	public static readonly HANDLER = 355;
	public static readonly HASH = 356;
	public static readonly HELP = 357;
	public static readonly HOST = 358;
	public static readonly HOSTS = 359;
	public static readonly IDENTIFIED = 360;
	public static readonly IGNORE_SERVER_IDS = 361;
	public static readonly IMPORT = 362;
	public static readonly INDEXES = 363;
	public static readonly INITIAL_SIZE = 364;
	public static readonly INPLACE = 365;
	public static readonly INSERT_METHOD = 366;
	public static readonly INSTALL = 367;
	public static readonly INSTANCE = 368;
	public static readonly INVISIBLE = 369;
	public static readonly INVOKER = 370;
	public static readonly IO = 371;
	public static readonly IO_THREAD = 372;
	public static readonly IPC = 373;
	public static readonly ISOLATION = 374;
	public static readonly ISSUER = 375;
	public static readonly JSON = 376;
	public static readonly KEY_BLOCK_SIZE = 377;
	public static readonly LANGUAGE = 378;
	public static readonly LAST = 379;
	public static readonly LEAVES = 380;
	public static readonly LESS = 381;
	public static readonly LEVEL = 382;
	public static readonly LIST = 383;
	public static readonly LOCAL = 384;
	public static readonly LOGFILE = 385;
	public static readonly LOGS = 386;
	public static readonly MASTER = 387;
	public static readonly MASTER_AUTO_POSITION = 388;
	public static readonly MASTER_CONNECT_RETRY = 389;
	public static readonly MASTER_DELAY = 390;
	public static readonly MASTER_HEARTBEAT_PERIOD = 391;
	public static readonly MASTER_HOST = 392;
	public static readonly MASTER_LOG_FILE = 393;
	public static readonly MASTER_LOG_POS = 394;
	public static readonly MASTER_PASSWORD = 395;
	public static readonly MASTER_PORT = 396;
	public static readonly MASTER_RETRY_COUNT = 397;
	public static readonly MASTER_SSL = 398;
	public static readonly MASTER_SSL_CA = 399;
	public static readonly MASTER_SSL_CAPATH = 400;
	public static readonly MASTER_SSL_CERT = 401;
	public static readonly MASTER_SSL_CIPHER = 402;
	public static readonly MASTER_SSL_CRL = 403;
	public static readonly MASTER_SSL_CRLPATH = 404;
	public static readonly MASTER_SSL_KEY = 405;
	public static readonly MASTER_TLS_VERSION = 406;
	public static readonly MASTER_USER = 407;
	public static readonly MAX_CONNECTIONS_PER_HOUR = 408;
	public static readonly MAX_QUERIES_PER_HOUR = 409;
	public static readonly MAX_ROWS = 410;
	public static readonly MAX_SIZE = 411;
	public static readonly MAX_UPDATES_PER_HOUR = 412;
	public static readonly MAX_USER_CONNECTIONS = 413;
	public static readonly MEDIUM = 414;
	public static readonly MERGE = 415;
	public static readonly MESSAGE_TEXT = 416;
	public static readonly MID = 417;
	public static readonly MIGRATE = 418;
	public static readonly MIN_ROWS = 419;
	public static readonly MODE = 420;
	public static readonly MODIFY = 421;
	public static readonly MUTEX = 422;
	public static readonly MYSQL = 423;
	public static readonly MYSQL_ERRNO = 424;
	public static readonly NAME = 425;
	public static readonly NAMES = 426;
	public static readonly NCHAR = 427;
	public static readonly NEVER = 428;
	public static readonly NEXT = 429;
	public static readonly NO = 430;
	public static readonly NODEGROUP = 431;
	public static readonly NONE = 432;
	public static readonly OFFLINE = 433;
	public static readonly OFFSET = 434;
	public static readonly OJ = 435;
	public static readonly OLD_PASSWORD = 436;
	public static readonly ONE = 437;
	public static readonly ONLINE = 438;
	public static readonly ONLY = 439;
	public static readonly OPEN = 440;
	public static readonly OPTIMIZER_COSTS = 441;
	public static readonly OPTIONS = 442;
	public static readonly OWNER = 443;
	public static readonly PACK_KEYS = 444;
	public static readonly PAGE = 445;
	public static readonly PARSER = 446;
	public static readonly PARTIAL = 447;
	public static readonly PARTITIONING = 448;
	public static readonly PARTITIONS = 449;
	public static readonly PASSWORD = 450;
	public static readonly PHASE = 451;
	public static readonly PLUGIN = 452;
	public static readonly PLUGIN_DIR = 453;
	public static readonly PLUGINS = 454;
	public static readonly PORT = 455;
	public static readonly PRECEDES = 456;
	public static readonly PREPARE = 457;
	public static readonly PRESERVE = 458;
	public static readonly PREV = 459;
	public static readonly PROCESSLIST = 460;
	public static readonly PROFILE = 461;
	public static readonly PROFILES = 462;
	public static readonly PROXY = 463;
	public static readonly QUERY = 464;
	public static readonly QUICK = 465;
	public static readonly REBUILD = 466;
	public static readonly RECOVER = 467;
	public static readonly REDO_BUFFER_SIZE = 468;
	public static readonly REDUNDANT = 469;
	public static readonly RELAY = 470;
	public static readonly RELAY_LOG_FILE = 471;
	public static readonly RELAY_LOG_POS = 472;
	public static readonly RELAYLOG = 473;
	public static readonly REMOVE = 474;
	public static readonly REORGANIZE = 475;
	public static readonly REPAIR = 476;
	public static readonly REPLICATE_DO_DB = 477;
	public static readonly REPLICATE_DO_TABLE = 478;
	public static readonly REPLICATE_IGNORE_DB = 479;
	public static readonly REPLICATE_IGNORE_TABLE = 480;
	public static readonly REPLICATE_REWRITE_DB = 481;
	public static readonly REPLICATE_WILD_DO_TABLE = 482;
	public static readonly REPLICATE_WILD_IGNORE_TABLE = 483;
	public static readonly REPLICATION = 484;
	public static readonly RESET = 485;
	public static readonly RESUME = 486;
	public static readonly RETURNS = 487;
	public static readonly ROLLBACK = 488;
	public static readonly ROLLUP = 489;
	public static readonly ROTATE = 490;
	public static readonly ROW = 491;
	public static readonly ROWS = 492;
	public static readonly ROW_FORMAT = 493;
	public static readonly SAVEPOINT = 494;
	public static readonly SCHEDULE = 495;
	public static readonly SECURITY = 496;
	public static readonly SERVER = 497;
	public static readonly SESSION = 498;
	public static readonly SHARE = 499;
	public static readonly SHARED = 500;
	public static readonly SIGNED = 501;
	public static readonly SIMPLE = 502;
	public static readonly SLAVE = 503;
	public static readonly SLOW = 504;
	public static readonly SNAPSHOT = 505;
	public static readonly SOCKET = 506;
	public static readonly SOME = 507;
	public static readonly SONAME = 508;
	public static readonly SOUNDS = 509;
	public static readonly SOURCE = 510;
	public static readonly SQL_AFTER_GTIDS = 511;
	public static readonly SQL_AFTER_MTS_GAPS = 512;
	public static readonly SQL_BEFORE_GTIDS = 513;
	public static readonly SQL_BUFFER_RESULT = 514;
	public static readonly SQL_CACHE = 515;
	public static readonly SQL_NO_CACHE = 516;
	public static readonly SQL_THREAD = 517;
	public static readonly START = 518;
	public static readonly STARTS = 519;
	public static readonly STATS_AUTO_RECALC = 520;
	public static readonly STATS_PERSISTENT = 521;
	public static readonly STATS_SAMPLE_PAGES = 522;
	public static readonly STATUS = 523;
	public static readonly STOP = 524;
	public static readonly STORAGE = 525;
	public static readonly STORED = 526;
	public static readonly STRING = 527;
	public static readonly SUBCLASS_ORIGIN = 528;
	public static readonly SUBJECT = 529;
	public static readonly SUBPARTITION = 530;
	public static readonly SUBPARTITIONS = 531;
	public static readonly SUSPEND = 532;
	public static readonly SWAPS = 533;
	public static readonly SWITCHES = 534;
	public static readonly TABLE_NAME = 535;
	public static readonly TABLESPACE = 536;
	public static readonly TEMPORARY = 537;
	public static readonly TEMPTABLE = 538;
	public static readonly THAN = 539;
	public static readonly TRADITIONAL = 540;
	public static readonly TRANSACTION = 541;
	public static readonly TRIGGERS = 542;
	public static readonly TRUNCATE = 543;
	public static readonly UNDEFINED = 544;
	public static readonly UNDOFILE = 545;
	public static readonly UNDO_BUFFER_SIZE = 546;
	public static readonly UNINSTALL = 547;
	public static readonly UNKNOWN = 548;
	public static readonly UNTIL = 549;
	public static readonly UPGRADE = 550;
	public static readonly USER = 551;
	public static readonly USE_FRM = 552;
	public static readonly USER_RESOURCES = 553;
	public static readonly VALIDATION = 554;
	public static readonly VALUE = 555;
	public static readonly VARIABLES = 556;
	public static readonly VIEW = 557;
	public static readonly VIRTUAL = 558;
	public static readonly VISIBLE = 559;
	public static readonly WAIT = 560;
	public static readonly WARNINGS = 561;
	public static readonly WITHOUT = 562;
	public static readonly WORK = 563;
	public static readonly WRAPPER = 564;
	public static readonly X509 = 565;
	public static readonly XA = 566;
	public static readonly XML = 567;
	public static readonly EUR = 568;
	public static readonly USA = 569;
	public static readonly JIS = 570;
	public static readonly ISO = 571;
	public static readonly INTERNAL = 572;
	public static readonly QUARTER = 573;
	public static readonly MONTH = 574;
	public static readonly DAY = 575;
	public static readonly HOUR = 576;
	public static readonly MINUTE = 577;
	public static readonly WEEK = 578;
	public static readonly SECOND = 579;
	public static readonly MICROSECOND = 580;
	public static readonly TABLES = 581;
	public static readonly ROUTINE = 582;
	public static readonly EXECUTE = 583;
	public static readonly FILE = 584;
	public static readonly PROCESS = 585;
	public static readonly RELOAD = 586;
	public static readonly SHUTDOWN = 587;
	public static readonly SUPER = 588;
	public static readonly PRIVILEGES = 589;
	public static readonly SESSION_VARIABLES_ADMIN = 590;
	public static readonly ARMSCII8 = 591;
	public static readonly ASCII = 592;
	public static readonly BIG5 = 593;
	public static readonly CP1250 = 594;
	public static readonly CP1251 = 595;
	public static readonly CP1256 = 596;
	public static readonly CP1257 = 597;
	public static readonly CP850 = 598;
	public static readonly CP852 = 599;
	public static readonly CP866 = 600;
	public static readonly CP932 = 601;
	public static readonly DEC8 = 602;
	public static readonly EUCJPMS = 603;
	public static readonly EUCKR = 604;
	public static readonly GB2312 = 605;
	public static readonly GBK = 606;
	public static readonly GEOSTD8 = 607;
	public static readonly GREEK = 608;
	public static readonly HEBREW = 609;
	public static readonly HP8 = 610;
	public static readonly KEYBCS2 = 611;
	public static readonly KOI8R = 612;
	public static readonly KOI8U = 613;
	public static readonly LATIN1 = 614;
	public static readonly LATIN2 = 615;
	public static readonly LATIN5 = 616;
	public static readonly LATIN7 = 617;
	public static readonly MACCE = 618;
	public static readonly MACROMAN = 619;
	public static readonly SJIS = 620;
	public static readonly SWE7 = 621;
	public static readonly TIS620 = 622;
	public static readonly UCS2 = 623;
	public static readonly UJIS = 624;
	public static readonly UTF16 = 625;
	public static readonly UTF16LE = 626;
	public static readonly UTF32 = 627;
	public static readonly UTF8 = 628;
	public static readonly UTF8MB3 = 629;
	public static readonly UTF8MB4 = 630;
	public static readonly ARCHIVE = 631;
	public static readonly BLACKHOLE = 632;
	public static readonly CSV = 633;
	public static readonly FEDERATED = 634;
	public static readonly INNODB = 635;
	public static readonly MEMORY = 636;
	public static readonly MRG_MYISAM = 637;
	public static readonly MYISAM = 638;
	public static readonly NDB = 639;
	public static readonly NDBCLUSTER = 640;
	public static readonly PERFORMANCE_SCHEMA = 641;
	public static readonly TOKUDB = 642;
	public static readonly REPEATABLE = 643;
	public static readonly COMMITTED = 644;
	public static readonly UNCOMMITTED = 645;
	public static readonly SERIALIZABLE = 646;
	public static readonly GEOMETRYCOLLECTION = 647;
	public static readonly GEOMCOLLECTION = 648;
	public static readonly GEOMETRY = 649;
	public static readonly LINESTRING = 650;
	public static readonly MULTILINESTRING = 651;
	public static readonly MULTIPOINT = 652;
	public static readonly MULTIPOLYGON = 653;
	public static readonly POINT = 654;
	public static readonly POLYGON = 655;
	public static readonly ABS = 656;
	public static readonly ACOS = 657;
	public static readonly ADDDATE = 658;
	public static readonly ADDTIME = 659;
	public static readonly AES_DECRYPT = 660;
	public static readonly AES_ENCRYPT = 661;
	public static readonly AREA = 662;
	public static readonly ASBINARY = 663;
	public static readonly ASIN = 664;
	public static readonly ASTEXT = 665;
	public static readonly ASWKB = 666;
	public static readonly ASWKT = 667;
	public static readonly ASYMMETRIC_DECRYPT = 668;
	public static readonly ASYMMETRIC_DERIVE = 669;
	public static readonly ASYMMETRIC_ENCRYPT = 670;
	public static readonly ASYMMETRIC_SIGN = 671;
	public static readonly ASYMMETRIC_VERIFY = 672;
	public static readonly ATAN = 673;
	public static readonly ATAN2 = 674;
	public static readonly BENCHMARK = 675;
	public static readonly BIN = 676;
	public static readonly BIT_COUNT = 677;
	public static readonly BIT_LENGTH = 678;
	public static readonly BUFFER = 679;
	public static readonly CATALOG_NAME = 680;
	public static readonly CEIL = 681;
	public static readonly CEILING = 682;
	public static readonly CENTROID = 683;
	public static readonly CHARACTER_LENGTH = 684;
	public static readonly CHARSET = 685;
	public static readonly CHAR_LENGTH = 686;
	public static readonly COERCIBILITY = 687;
	public static readonly COLLATION = 688;
	public static readonly COMPRESS = 689;
	public static readonly CONCAT = 690;
	public static readonly CONCAT_WS = 691;
	public static readonly CONNECTION_ID = 692;
	public static readonly CONV = 693;
	public static readonly CONVERT_TZ = 694;
	public static readonly COS = 695;
	public static readonly COT = 696;
	public static readonly CRC32 = 697;
	public static readonly CREATE_ASYMMETRIC_PRIV_KEY = 698;
	public static readonly CREATE_ASYMMETRIC_PUB_KEY = 699;
	public static readonly CREATE_DH_PARAMETERS = 700;
	public static readonly CREATE_DIGEST = 701;
	public static readonly CROSSES = 702;
	public static readonly DATEDIFF = 703;
	public static readonly DATE_FORMAT = 704;
	public static readonly DAYNAME = 705;
	public static readonly DAYOFMONTH = 706;
	public static readonly DAYOFWEEK = 707;
	public static readonly DAYOFYEAR = 708;
	public static readonly DECODE = 709;
	public static readonly DEGREES = 710;
	public static readonly DES_DECRYPT = 711;
	public static readonly DES_ENCRYPT = 712;
	public static readonly DIMENSION = 713;
	public static readonly DISJOINT = 714;
	public static readonly ELT = 715;
	public static readonly ENCODE = 716;
	public static readonly ENCRYPT = 717;
	public static readonly ENDPOINT = 718;
	public static readonly ENVELOPE = 719;
	public static readonly EQUALS = 720;
	public static readonly EXP = 721;
	public static readonly EXPORT_SET = 722;
	public static readonly EXTERIORRING = 723;
	public static readonly EXTRACTVALUE = 724;
	public static readonly FIELD = 725;
	public static readonly FIND_IN_SET = 726;
	public static readonly FLOOR = 727;
	public static readonly FORMAT = 728;
	public static readonly FOUND_ROWS = 729;
	public static readonly FROM_BASE64 = 730;
	public static readonly FROM_DAYS = 731;
	public static readonly FROM_UNIXTIME = 732;
	public static readonly GEOMCOLLFROMTEXT = 733;
	public static readonly GEOMCOLLFROMWKB = 734;
	public static readonly GEOMETRYCOLLECTIONFROMTEXT = 735;
	public static readonly GEOMETRYCOLLECTIONFROMWKB = 736;
	public static readonly GEOMETRYFROMTEXT = 737;
	public static readonly GEOMETRYFROMWKB = 738;
	public static readonly GEOMETRYN = 739;
	public static readonly GEOMETRYTYPE = 740;
	public static readonly GEOMFROMTEXT = 741;
	public static readonly GEOMFROMWKB = 742;
	public static readonly GET_FORMAT = 743;
	public static readonly GET_LOCK = 744;
	public static readonly GLENGTH = 745;
	public static readonly GREATEST = 746;
	public static readonly GTID_SUBSET = 747;
	public static readonly GTID_SUBTRACT = 748;
	public static readonly HEX = 749;
	public static readonly IFNULL = 750;
	public static readonly INET6_ATON = 751;
	public static readonly INET6_NTOA = 752;
	public static readonly INET_ATON = 753;
	public static readonly INET_NTOA = 754;
	public static readonly INSTR = 755;
	public static readonly INTERIORRINGN = 756;
	public static readonly INTERSECTS = 757;
	public static readonly ISCLOSED = 758;
	public static readonly ISEMPTY = 759;
	public static readonly ISNULL = 760;
	public static readonly ISSIMPLE = 761;
	public static readonly IS_FREE_LOCK = 762;
	public static readonly IS_IPV4 = 763;
	public static readonly IS_IPV4_COMPAT = 764;
	public static readonly IS_IPV4_MAPPED = 765;
	public static readonly IS_IPV6 = 766;
	public static readonly IS_USED_LOCK = 767;
	public static readonly LAST_INSERT_ID = 768;
	public static readonly LCASE = 769;
	public static readonly LEAST = 770;
	public static readonly LENGTH = 771;
	public static readonly LINEFROMTEXT = 772;
	public static readonly LINEFROMWKB = 773;
	public static readonly LINESTRINGFROMTEXT = 774;
	public static readonly LINESTRINGFROMWKB = 775;
	public static readonly LN = 776;
	public static readonly LOAD_FILE = 777;
	public static readonly LOCATE = 778;
	public static readonly LOG = 779;
	public static readonly LOG10 = 780;
	public static readonly LOG2 = 781;
	public static readonly LOWER = 782;
	public static readonly LPAD = 783;
	public static readonly LTRIM = 784;
	public static readonly MAKEDATE = 785;
	public static readonly MAKETIME = 786;
	public static readonly MAKE_SET = 787;
	public static readonly MASTER_POS_WAIT = 788;
	public static readonly MBRCONTAINS = 789;
	public static readonly MBRDISJOINT = 790;
	public static readonly MBREQUAL = 791;
	public static readonly MBRINTERSECTS = 792;
	public static readonly MBROVERLAPS = 793;
	public static readonly MBRTOUCHES = 794;
	public static readonly MBRWITHIN = 795;
	public static readonly MD5 = 796;
	public static readonly MLINEFROMTEXT = 797;
	public static readonly MLINEFROMWKB = 798;
	public static readonly MONTHNAME = 799;
	public static readonly MPOINTFROMTEXT = 800;
	public static readonly MPOINTFROMWKB = 801;
	public static readonly MPOLYFROMTEXT = 802;
	public static readonly MPOLYFROMWKB = 803;
	public static readonly MULTILINESTRINGFROMTEXT = 804;
	public static readonly MULTILINESTRINGFROMWKB = 805;
	public static readonly MULTIPOINTFROMTEXT = 806;
	public static readonly MULTIPOINTFROMWKB = 807;
	public static readonly MULTIPOLYGONFROMTEXT = 808;
	public static readonly MULTIPOLYGONFROMWKB = 809;
	public static readonly NAME_CONST = 810;
	public static readonly NULLIF = 811;
	public static readonly NUMGEOMETRIES = 812;
	public static readonly NUMINTERIORRINGS = 813;
	public static readonly NUMPOINTS = 814;
	public static readonly OCT = 815;
	public static readonly OCTET_LENGTH = 816;
	public static readonly ORD = 817;
	public static readonly OVERLAPS = 818;
	public static readonly PERIOD_ADD = 819;
	public static readonly PERIOD_DIFF = 820;
	public static readonly PI = 821;
	public static readonly POINTFROMTEXT = 822;
	public static readonly POINTFROMWKB = 823;
	public static readonly POINTN = 824;
	public static readonly POLYFROMTEXT = 825;
	public static readonly POLYFROMWKB = 826;
	public static readonly POLYGONFROMTEXT = 827;
	public static readonly POLYGONFROMWKB = 828;
	public static readonly POW = 829;
	public static readonly POWER = 830;
	public static readonly QUOTE = 831;
	public static readonly RADIANS = 832;
	public static readonly RAND = 833;
	public static readonly RANDOM_BYTES = 834;
	public static readonly RELEASE_LOCK = 835;
	public static readonly REVERSE = 836;
	public static readonly ROUND = 837;
	public static readonly ROW_COUNT = 838;
	public static readonly RPAD = 839;
	public static readonly RTRIM = 840;
	public static readonly SEC_TO_TIME = 841;
	public static readonly SESSION_USER = 842;
	public static readonly SHA = 843;
	public static readonly SHA1 = 844;
	public static readonly SHA2 = 845;
	public static readonly SCHEMA_NAME = 846;
	public static readonly SIGN = 847;
	public static readonly SIN = 848;
	public static readonly SLEEP = 849;
	public static readonly SOUNDEX = 850;
	public static readonly SQL_THREAD_WAIT_AFTER_GTIDS = 851;
	public static readonly SQRT = 852;
	public static readonly SRID = 853;
	public static readonly STARTPOINT = 854;
	public static readonly STRCMP = 855;
	public static readonly STR_TO_DATE = 856;
	public static readonly ST_AREA = 857;
	public static readonly ST_ASBINARY = 858;
	public static readonly ST_ASTEXT = 859;
	public static readonly ST_ASWKB = 860;
	public static readonly ST_ASWKT = 861;
	public static readonly ST_BUFFER = 862;
	public static readonly ST_CENTROID = 863;
	public static readonly ST_CONTAINS = 864;
	public static readonly ST_CROSSES = 865;
	public static readonly ST_DIFFERENCE = 866;
	public static readonly ST_DIMENSION = 867;
	public static readonly ST_DISJOINT = 868;
	public static readonly ST_DISTANCE = 869;
	public static readonly ST_ENDPOINT = 870;
	public static readonly ST_ENVELOPE = 871;
	public static readonly ST_EQUALS = 872;
	public static readonly ST_EXTERIORRING = 873;
	public static readonly ST_GEOMCOLLFROMTEXT = 874;
	public static readonly ST_GEOMCOLLFROMTXT = 875;
	public static readonly ST_GEOMCOLLFROMWKB = 876;
	public static readonly ST_GEOMETRYCOLLECTIONFROMTEXT = 877;
	public static readonly ST_GEOMETRYCOLLECTIONFROMWKB = 878;
	public static readonly ST_GEOMETRYFROMTEXT = 879;
	public static readonly ST_GEOMETRYFROMWKB = 880;
	public static readonly ST_GEOMETRYN = 881;
	public static readonly ST_GEOMETRYTYPE = 882;
	public static readonly ST_GEOMFROMTEXT = 883;
	public static readonly ST_GEOMFROMWKB = 884;
	public static readonly ST_INTERIORRINGN = 885;
	public static readonly ST_INTERSECTION = 886;
	public static readonly ST_INTERSECTS = 887;
	public static readonly ST_ISCLOSED = 888;
	public static readonly ST_ISEMPTY = 889;
	public static readonly ST_ISSIMPLE = 890;
	public static readonly ST_LINEFROMTEXT = 891;
	public static readonly ST_LINEFROMWKB = 892;
	public static readonly ST_LINESTRINGFROMTEXT = 893;
	public static readonly ST_LINESTRINGFROMWKB = 894;
	public static readonly ST_NUMGEOMETRIES = 895;
	public static readonly ST_NUMINTERIORRING = 896;
	public static readonly ST_NUMINTERIORRINGS = 897;
	public static readonly ST_NUMPOINTS = 898;
	public static readonly ST_OVERLAPS = 899;
	public static readonly ST_POINTFROMTEXT = 900;
	public static readonly ST_POINTFROMWKB = 901;
	public static readonly ST_POINTN = 902;
	public static readonly ST_POLYFROMTEXT = 903;
	public static readonly ST_POLYFROMWKB = 904;
	public static readonly ST_POLYGONFROMTEXT = 905;
	public static readonly ST_POLYGONFROMWKB = 906;
	public static readonly ST_SRID = 907;
	public static readonly ST_STARTPOINT = 908;
	public static readonly ST_SYMDIFFERENCE = 909;
	public static readonly ST_TOUCHES = 910;
	public static readonly ST_UNION = 911;
	public static readonly ST_WITHIN = 912;
	public static readonly ST_X = 913;
	public static readonly ST_Y = 914;
	public static readonly SUBDATE = 915;
	public static readonly SUBSTRING_INDEX = 916;
	public static readonly SUBTIME = 917;
	public static readonly SYSTEM_USER = 918;
	public static readonly TAN = 919;
	public static readonly TIMEDIFF = 920;
	public static readonly TIMESTAMPADD = 921;
	public static readonly TIMESTAMPDIFF = 922;
	public static readonly TIME_FORMAT = 923;
	public static readonly TIME_TO_SEC = 924;
	public static readonly TOUCHES = 925;
	public static readonly TO_BASE64 = 926;
	public static readonly TO_DAYS = 927;
	public static readonly TO_SECONDS = 928;
	public static readonly UCASE = 929;
	public static readonly UNCOMPRESS = 930;
	public static readonly UNCOMPRESSED_LENGTH = 931;
	public static readonly UNHEX = 932;
	public static readonly UNIX_TIMESTAMP = 933;
	public static readonly UPDATEXML = 934;
	public static readonly UPPER = 935;
	public static readonly UUID = 936;
	public static readonly UUID_SHORT = 937;
	public static readonly VALIDATE_PASSWORD_STRENGTH = 938;
	public static readonly VERSION = 939;
	public static readonly WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 940;
	public static readonly WEEKDAY = 941;
	public static readonly WEEKOFYEAR = 942;
	public static readonly WEIGHT_STRING = 943;
	public static readonly WITHIN = 944;
	public static readonly YEARWEEK = 945;
	public static readonly Y_FUNCTION = 946;
	public static readonly X_FUNCTION = 947;
	public static readonly VAR_ASSIGN = 948;
	public static readonly PLUS_ASSIGN = 949;
	public static readonly MINUS_ASSIGN = 950;
	public static readonly MULT_ASSIGN = 951;
	public static readonly DIV_ASSIGN = 952;
	public static readonly MOD_ASSIGN = 953;
	public static readonly AND_ASSIGN = 954;
	public static readonly XOR_ASSIGN = 955;
	public static readonly OR_ASSIGN = 956;
	public static readonly STAR = 957;
	public static readonly DIVIDE = 958;
	public static readonly MODULE = 959;
	public static readonly PLUS = 960;
	public static readonly MINUSMINUS = 961;
	public static readonly MINUS = 962;
	public static readonly DIV = 963;
	public static readonly MOD = 964;
	public static readonly EQUAL_SYMBOL = 965;
	public static readonly GREATER_SYMBOL = 966;
	public static readonly LESS_SYMBOL = 967;
	public static readonly EXCLAMATION_SYMBOL = 968;
	public static readonly BIT_NOT_OP = 969;
	public static readonly BIT_OR_OP = 970;
	public static readonly BIT_AND_OP = 971;
	public static readonly BIT_XOR_OP = 972;
	public static readonly DOT = 973;
	public static readonly LR_BRACKET = 974;
	public static readonly RR_BRACKET = 975;
	public static readonly COMMA = 976;
	public static readonly SEMI = 977;
	public static readonly AT_SIGN = 978;
	public static readonly ZERO_DECIMAL = 979;
	public static readonly ONE_DECIMAL = 980;
	public static readonly TWO_DECIMAL = 981;
	public static readonly SINGLE_QUOTE_SYMB = 982;
	public static readonly DOUBLE_QUOTE_SYMB = 983;
	public static readonly REVERSE_QUOTE_SYMB = 984;
	public static readonly COLON_SYMB = 985;
	public static readonly CHARSET_REVERSE_QOUTE_STRING = 986;
	public static readonly FILESIZE_LITERAL = 987;
	public static readonly START_NATIONAL_STRING_LITERAL = 988;
	public static readonly STRING_LITERAL = 989;
	public static readonly DECIMAL_LITERAL = 990;
	public static readonly HEXADECIMAL_LITERAL = 991;
	public static readonly REAL_LITERAL = 992;
	public static readonly NULL_SPEC_LITERAL = 993;
	public static readonly BIT_STRING = 994;
	public static readonly STRING_CHARSET_NAME = 995;
	public static readonly DOT_ID = 996;
	public static readonly ID = 997;
	public static readonly REVERSE_QUOTE_ID = 998;
	public static readonly STRING_USER_NAME = 999;
	public static readonly LOCAL_ID = 1000;
	public static readonly GLOBAL_ID = 1001;
	public static readonly ERROR_RECONGNIGION = 1002;
	public static readonly RULE_root = 0;
	public static readonly RULE_sqlStatements = 1;
	public static readonly RULE_sqlStatement = 2;
	public static readonly RULE_emptyStatement = 3;
	public static readonly RULE_ddlStatement = 4;
	public static readonly RULE_dmlStatement = 5;
	public static readonly RULE_transactionStatement = 6;
	public static readonly RULE_replicationStatement = 7;
	public static readonly RULE_preparedStatement = 8;
	public static readonly RULE_compoundStatement = 9;
	public static readonly RULE_administrationStatement = 10;
	public static readonly RULE_utilityStatement = 11;
	public static readonly RULE_createDatabase = 12;
	public static readonly RULE_createEvent = 13;
	public static readonly RULE_createIndex = 14;
	public static readonly RULE_createLogfileGroup = 15;
	public static readonly RULE_createProcedure = 16;
	public static readonly RULE_createFunction = 17;
	public static readonly RULE_createServer = 18;
	public static readonly RULE_createTable = 19;
	public static readonly RULE_createTablespaceInnodb = 20;
	public static readonly RULE_createTablespaceNdb = 21;
	public static readonly RULE_createTrigger = 22;
	public static readonly RULE_createView = 23;
	public static readonly RULE_createDatabaseOption = 24;
	public static readonly RULE_ownerStatement = 25;
	public static readonly RULE_scheduleExpression = 26;
	public static readonly RULE_timestampValue = 27;
	public static readonly RULE_intervalExpr = 28;
	public static readonly RULE_intervalType = 29;
	public static readonly RULE_enableType = 30;
	public static readonly RULE_indexType = 31;
	public static readonly RULE_indexOption = 32;
	public static readonly RULE_procedureParameter = 33;
	public static readonly RULE_functionParameter = 34;
	public static readonly RULE_routineOption = 35;
	public static readonly RULE_serverOption = 36;
	public static readonly RULE_createDefinitions = 37;
	public static readonly RULE_createDefinition = 38;
	public static readonly RULE_columnDefinition = 39;
	public static readonly RULE_columnConstraint = 40;
	public static readonly RULE_tableConstraint = 41;
	public static readonly RULE_referenceDefinition = 42;
	public static readonly RULE_referenceAction = 43;
	public static readonly RULE_referenceControlType = 44;
	public static readonly RULE_indexColumnDefinition = 45;
	public static readonly RULE_tableOption = 46;
	public static readonly RULE_tablespaceStorage = 47;
	public static readonly RULE_partitionDefinitions = 48;
	public static readonly RULE_partitionFunctionDefinition = 49;
	public static readonly RULE_subpartitionFunctionDefinition = 50;
	public static readonly RULE_partitionDefinition = 51;
	public static readonly RULE_partitionDefinerAtom = 52;
	public static readonly RULE_partitionDefinerVector = 53;
	public static readonly RULE_subpartitionDefinition = 54;
	public static readonly RULE_partitionOption = 55;
	public static readonly RULE_alterDatabase = 56;
	public static readonly RULE_alterEvent = 57;
	public static readonly RULE_alterFunction = 58;
	public static readonly RULE_alterInstance = 59;
	public static readonly RULE_alterLogfileGroup = 60;
	public static readonly RULE_alterProcedure = 61;
	public static readonly RULE_alterServer = 62;
	public static readonly RULE_alterTable = 63;
	public static readonly RULE_alterTablespace = 64;
	public static readonly RULE_alterView = 65;
	public static readonly RULE_alterSpecification = 66;
	public static readonly RULE_dropDatabase = 67;
	public static readonly RULE_dropEvent = 68;
	public static readonly RULE_dropIndex = 69;
	public static readonly RULE_dropLogfileGroup = 70;
	public static readonly RULE_dropProcedure = 71;
	public static readonly RULE_dropFunction = 72;
	public static readonly RULE_dropServer = 73;
	public static readonly RULE_dropTable = 74;
	public static readonly RULE_dropTablespace = 75;
	public static readonly RULE_dropTrigger = 76;
	public static readonly RULE_dropView = 77;
	public static readonly RULE_renameTable = 78;
	public static readonly RULE_renameTableClause = 79;
	public static readonly RULE_truncateTable = 80;
	public static readonly RULE_callStatement = 81;
	public static readonly RULE_deleteStatement = 82;
	public static readonly RULE_doStatement = 83;
	public static readonly RULE_handlerStatement = 84;
	public static readonly RULE_insertStatement = 85;
	public static readonly RULE_loadDataStatement = 86;
	public static readonly RULE_loadXmlStatement = 87;
	public static readonly RULE_replaceStatement = 88;
	public static readonly RULE_selectStatement = 89;
	public static readonly RULE_updateStatement = 90;
	public static readonly RULE_insertStatementValue = 91;
	public static readonly RULE_updatedElement = 92;
	public static readonly RULE_assignmentField = 93;
	public static readonly RULE_lockClause = 94;
	public static readonly RULE_singleDeleteStatement = 95;
	public static readonly RULE_multipleDeleteStatement = 96;
	public static readonly RULE_handlerOpenStatement = 97;
	public static readonly RULE_handlerReadIndexStatement = 98;
	public static readonly RULE_handlerReadStatement = 99;
	public static readonly RULE_handlerCloseStatement = 100;
	public static readonly RULE_singleUpdateStatement = 101;
	public static readonly RULE_multipleUpdateStatement = 102;
	public static readonly RULE_orderByClause = 103;
	public static readonly RULE_orderByExpression = 104;
	public static readonly RULE_tableSources = 105;
	public static readonly RULE_tableSource = 106;
	public static readonly RULE_tableSourceItem = 107;
	public static readonly RULE_indexHint = 108;
	public static readonly RULE_indexHintType = 109;
	public static readonly RULE_joinPart = 110;
	public static readonly RULE_queryExpression = 111;
	public static readonly RULE_queryExpressionNointo = 112;
	public static readonly RULE_querySpecification = 113;
	public static readonly RULE_querySpecificationNointo = 114;
	public static readonly RULE_unionParenthesis = 115;
	public static readonly RULE_unionStatement = 116;
	public static readonly RULE_selectSpec = 117;
	public static readonly RULE_selectElements = 118;
	public static readonly RULE_selectElement = 119;
	public static readonly RULE_selectIntoExpression = 120;
	public static readonly RULE_selectFieldsInto = 121;
	public static readonly RULE_selectLinesInto = 122;
	public static readonly RULE_fromClause = 123;
	public static readonly RULE_groupByItem = 124;
	public static readonly RULE_limitClause = 125;
	public static readonly RULE_limitClauseAtom = 126;
	public static readonly RULE_startTransaction = 127;
	public static readonly RULE_beginWork = 128;
	public static readonly RULE_commitWork = 129;
	public static readonly RULE_rollbackWork = 130;
	public static readonly RULE_savepointStatement = 131;
	public static readonly RULE_rollbackStatement = 132;
	public static readonly RULE_releaseStatement = 133;
	public static readonly RULE_lockTables = 134;
	public static readonly RULE_unlockTables = 135;
	public static readonly RULE_setAutocommitStatement = 136;
	public static readonly RULE_setTransactionStatement = 137;
	public static readonly RULE_transactionMode = 138;
	public static readonly RULE_lockTableElement = 139;
	public static readonly RULE_lockAction = 140;
	public static readonly RULE_transactionOption = 141;
	public static readonly RULE_transactionLevel = 142;
	public static readonly RULE_changeMaster = 143;
	public static readonly RULE_changeReplicationFilter = 144;
	public static readonly RULE_purgeBinaryLogs = 145;
	public static readonly RULE_resetMaster = 146;
	public static readonly RULE_resetSlave = 147;
	public static readonly RULE_startSlave = 148;
	public static readonly RULE_stopSlave = 149;
	public static readonly RULE_startGroupReplication = 150;
	public static readonly RULE_stopGroupReplication = 151;
	public static readonly RULE_masterOption = 152;
	public static readonly RULE_stringMasterOption = 153;
	public static readonly RULE_decimalMasterOption = 154;
	public static readonly RULE_boolMasterOption = 155;
	public static readonly RULE_channelOption = 156;
	public static readonly RULE_replicationFilter = 157;
	public static readonly RULE_tablePair = 158;
	public static readonly RULE_threadType = 159;
	public static readonly RULE_untilOption = 160;
	public static readonly RULE_connectionOption = 161;
	public static readonly RULE_gtuidSet = 162;
	public static readonly RULE_xaStartTransaction = 163;
	public static readonly RULE_xaEndTransaction = 164;
	public static readonly RULE_xaPrepareStatement = 165;
	public static readonly RULE_xaCommitWork = 166;
	public static readonly RULE_xaRollbackWork = 167;
	public static readonly RULE_xaRecoverWork = 168;
	public static readonly RULE_prepareStatement = 169;
	public static readonly RULE_executeStatement = 170;
	public static readonly RULE_deallocatePrepare = 171;
	public static readonly RULE_routineBody = 172;
	public static readonly RULE_blockStatement = 173;
	public static readonly RULE_caseStatement = 174;
	public static readonly RULE_ifStatement = 175;
	public static readonly RULE_iterateStatement = 176;
	public static readonly RULE_leaveStatement = 177;
	public static readonly RULE_loopStatement = 178;
	public static readonly RULE_repeatStatement = 179;
	public static readonly RULE_returnStatement = 180;
	public static readonly RULE_whileStatement = 181;
	public static readonly RULE_cursorStatement = 182;
	public static readonly RULE_declareVariable = 183;
	public static readonly RULE_declareCondition = 184;
	public static readonly RULE_declareCursor = 185;
	public static readonly RULE_declareHandler = 186;
	public static readonly RULE_handlerConditionValue = 187;
	public static readonly RULE_procedureSqlStatement = 188;
	public static readonly RULE_caseAlternative = 189;
	public static readonly RULE_elifAlternative = 190;
	public static readonly RULE_alterUser = 191;
	public static readonly RULE_createUser = 192;
	public static readonly RULE_dropUser = 193;
	public static readonly RULE_grantStatement = 194;
	public static readonly RULE_grantProxy = 195;
	public static readonly RULE_renameUser = 196;
	public static readonly RULE_revokeStatement = 197;
	public static readonly RULE_revokeProxy = 198;
	public static readonly RULE_setPasswordStatement = 199;
	public static readonly RULE_userSpecification = 200;
	public static readonly RULE_userAuthOption = 201;
	public static readonly RULE_tlsOption = 202;
	public static readonly RULE_userResourceOption = 203;
	public static readonly RULE_userPasswordOption = 204;
	public static readonly RULE_userLockOption = 205;
	public static readonly RULE_privelegeClause = 206;
	public static readonly RULE_privilege = 207;
	public static readonly RULE_privilegeLevel = 208;
	public static readonly RULE_renameUserClause = 209;
	public static readonly RULE_analyzeTable = 210;
	public static readonly RULE_checkTable = 211;
	public static readonly RULE_checksumTable = 212;
	public static readonly RULE_optimizeTable = 213;
	public static readonly RULE_repairTable = 214;
	public static readonly RULE_checkTableOption = 215;
	public static readonly RULE_createUdfunction = 216;
	public static readonly RULE_installPlugin = 217;
	public static readonly RULE_uninstallPlugin = 218;
	public static readonly RULE_setStatement = 219;
	public static readonly RULE_showStatement = 220;
	public static readonly RULE_variableClause = 221;
	public static readonly RULE_showCommonEntity = 222;
	public static readonly RULE_showFilter = 223;
	public static readonly RULE_showGlobalInfoClause = 224;
	public static readonly RULE_showSchemaEntity = 225;
	public static readonly RULE_showProfileType = 226;
	public static readonly RULE_binlogStatement = 227;
	public static readonly RULE_cacheIndexStatement = 228;
	public static readonly RULE_flushStatement = 229;
	public static readonly RULE_killStatement = 230;
	public static readonly RULE_loadIndexIntoCache = 231;
	public static readonly RULE_resetStatement = 232;
	public static readonly RULE_shutdownStatement = 233;
	public static readonly RULE_tableIndexes = 234;
	public static readonly RULE_flushOption = 235;
	public static readonly RULE_flushTableOption = 236;
	public static readonly RULE_loadedTableIndexes = 237;
	public static readonly RULE_simpleDescribeStatement = 238;
	public static readonly RULE_fullDescribeStatement = 239;
	public static readonly RULE_helpStatement = 240;
	public static readonly RULE_useStatement = 241;
	public static readonly RULE_signalStatement = 242;
	public static readonly RULE_signalConditionInformation = 243;
	public static readonly RULE_describeObjectClause = 244;
	public static readonly RULE_fullId = 245;
	public static readonly RULE_tableName = 246;
	public static readonly RULE_fullColumnName = 247;
	public static readonly RULE_indexColumnName = 248;
	public static readonly RULE_userName = 249;
	public static readonly RULE_mysqlVariable = 250;
	public static readonly RULE_charsetName = 251;
	public static readonly RULE_collationName = 252;
	public static readonly RULE_engineName = 253;
	public static readonly RULE_uuidSet = 254;
	public static readonly RULE_xid = 255;
	public static readonly RULE_xuidStringId = 256;
	public static readonly RULE_authPlugin = 257;
	public static readonly RULE_uid = 258;
	public static readonly RULE_simpleId = 259;
	public static readonly RULE_dottedId = 260;
	public static readonly RULE_decimalLiteral = 261;
	public static readonly RULE_fileSizeLiteral = 262;
	public static readonly RULE_stringLiteral = 263;
	public static readonly RULE_booleanLiteral = 264;
	public static readonly RULE_hexadecimalLiteral = 265;
	public static readonly RULE_nullNotnull = 266;
	public static readonly RULE_constant = 267;
	public static readonly RULE_dataType = 268;
	public static readonly RULE_collectionOptions = 269;
	public static readonly RULE_convertedDataType = 270;
	public static readonly RULE_lengthOneDimension = 271;
	public static readonly RULE_lengthTwoDimension = 272;
	public static readonly RULE_lengthTwoOptionalDimension = 273;
	public static readonly RULE_uidList = 274;
	public static readonly RULE_tables = 275;
	public static readonly RULE_indexColumnNames = 276;
	public static readonly RULE_expressions = 277;
	public static readonly RULE_expressionsWithDefaults = 278;
	public static readonly RULE_constants = 279;
	public static readonly RULE_simpleStrings = 280;
	public static readonly RULE_userVariables = 281;
	public static readonly RULE_defaultValue = 282;
	public static readonly RULE_currentTimestamp = 283;
	public static readonly RULE_expressionOrDefault = 284;
	public static readonly RULE_ifExists = 285;
	public static readonly RULE_ifNotExists = 286;
	public static readonly RULE_functionCall = 287;
	public static readonly RULE_specificFunction = 288;
	public static readonly RULE_caseFuncAlternative = 289;
	public static readonly RULE_levelsInWeightString = 290;
	public static readonly RULE_levelInWeightListElement = 291;
	public static readonly RULE_aggregateWindowedFunction = 292;
	public static readonly RULE_scalarFunctionName = 293;
	public static readonly RULE_passwordFunctionClause = 294;
	public static readonly RULE_functionArgs = 295;
	public static readonly RULE_functionArg = 296;
	public static readonly RULE_expression = 297;
	public static readonly RULE_predicate = 298;
	public static readonly RULE_expressionAtom = 299;
	public static readonly RULE_unaryOperator = 300;
	public static readonly RULE_comparisonOperator = 301;
	public static readonly RULE_logicalOperator = 302;
	public static readonly RULE_bitOperator = 303;
	public static readonly RULE_mathOperator = 304;
	public static readonly RULE_charsetNameBase = 305;
	public static readonly RULE_transactionLevelBase = 306;
	public static readonly RULE_privilegesBase = 307;
	public static readonly RULE_intervalTypeBase = 308;
	public static readonly RULE_dataTypeBase = 309;
	public static readonly RULE_keywordsCanBeId = 310;
	public static readonly RULE_functionNameBase = 311;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
		"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
		"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
		"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
		"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
		"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
		"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
		"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
		"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
		"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
		"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
		"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
		"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
		"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
		"querySpecification", "querySpecificationNointo", "unionParenthesis", 
		"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByItem", "limitClause", 
		"limitClauseAtom", "startTransaction", "beginWork", "commitWork", "rollbackWork", 
		"savepointStatement", "rollbackStatement", "releaseStatement", "lockTables", 
		"unlockTables", "setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "grantProxy", "renameUser", "revokeStatement", "revokeProxy", 
		"setPasswordStatement", "userSpecification", "userAuthOption", "tlsOption", 
		"userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", 
		"privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", 
		"checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
		"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
		"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
		"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
		"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
		"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
		"signalStatement", "signalConditionInformation", "describeObjectClause", 
		"fullId", "tableName", "fullColumnName", "indexColumnName", "userName", 
		"mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet", 
		"xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
		"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
		"nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
		"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
		"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
		"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
		"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
		"mathOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
		"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "'ADD'", "'ALL'", 
		"'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", 
		"'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
		"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", 
		"'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", 
		"'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", 
		"'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GRANT'", "'GROUP'", "'HAVING'", 
		"'HIGH_PRIORITY'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", 
		"'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
		"'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", 
		"'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", 
		"'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
		"'NULL'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", 
		"'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", 
		"'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", 
		"'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", 
		"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
		"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", 
		"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
		"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", 
		"'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", 
		"'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", 
		"'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", 
		"'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		"'PRECISION'", "'FLOAT'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", 
		"'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
		"'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", 
		"'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
		"'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", 
		"'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", 
		"'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
		"'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", 
		"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
		"'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
		"'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
		"'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
		"'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
		"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
		"'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
		"'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", 
		"'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
		"'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
		"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
		"'INSTALL'", "'INSTANCE'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
		"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
		"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
		"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", 
		"'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", 
		"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
		"'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", 
		"'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", 
		"'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
		"'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
		"'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", 
		"'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
		"'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
		"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
		"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
		"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
		"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
		"'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", 
		"'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", 
		"'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", 
		"'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
		"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
		"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", 
		"'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRIGGERS'", "'TRUNCATE'", 
		"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
		"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
		"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
		"'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
		"'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", 
		"'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
		"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
		"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", undefined, "'ARMSCII8'", "'ASCII'", 
		"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
		"'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", 
		"'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
		"'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
		"'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
		"'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
		"'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
		"'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		"'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
		"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
		"'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
		"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
		"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", 
		"'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
		"'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
		"'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'", 
		"'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
		"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
		"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", 
		"'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", 
		"'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
		"'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", 
		"'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", 
		"'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", 
		"'''", "'\"'", "'`'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
		"BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
		"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
		"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", 
		"DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
		"DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", 
		"ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", 
		"FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GRANT", "GROUP", 
		"HAVING", "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
		"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
		"LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		"NULL_LITERAL", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", 
		"OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
		"RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
		"REPEAT", "REPLACE", "REQUIRE", "RESTRICT", "RETURN", "REVOKE", "RIGHT", 
		"RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", 
		"SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
		"SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", 
		"TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", 
		"UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", 
		"VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", 
		"TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", 
		"DOUBLE", "PRECISION", "FLOAT", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", 
		"TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", 
		"BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", 
		"TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
		"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
		"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
		"DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", 
		"MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", 
		"VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
		"LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", 
		"TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
		"AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
		"AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", 
		"BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", 
		"CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", 
		"CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
		"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
		"CONCURRENT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
		"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
		"DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
		"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
		"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", 
		"FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
		"GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", 
		"IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
		"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVISIBLE", "INVOKER", 
		"IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
		"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
		"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
		"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
		"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
		"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
		"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
		"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
		"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
		"MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", 
		"MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", "NEVER", "NEXT", 
		"NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", 
		"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
		"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
		"TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
		"TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", 
		"UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", 
		"VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
		"WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", 
		"ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", 
		"SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", 
		"RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "SESSION_VARIABLES_ADMIN", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", 
		"GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
		"LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
		"UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
		"ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
		"MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", 
		"COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
		"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
		"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
		"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
		"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
		"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
		"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
		"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
		"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
		"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
		"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
		"SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
		"MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MySqlParser._LITERAL_NAMES, MySqlParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MySqlParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "MySqlParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return MySqlParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return MySqlParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(MySqlParser._ATN, this);
	}
	// @RuleVersion(0)
	public root(): RootContext {
		let _localctx: RootContext = new RootContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, MySqlParser.RULE_root);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 625;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MySqlParser.ALTER) | (1 << MySqlParser.ANALYZE) | (1 << MySqlParser.CALL) | (1 << MySqlParser.CHANGE) | (1 << MySqlParser.CHECK) | (1 << MySqlParser.CREATE))) !== 0) || ((((_la - 39)) & ~0x1F) === 0 && ((1 << (_la - 39)) & ((1 << (MySqlParser.DELETE - 39)) | (1 << (MySqlParser.DESC - 39)) | (1 << (MySqlParser.DESCRIBE - 39)) | (1 << (MySqlParser.DROP - 39)) | (1 << (MySqlParser.EXPLAIN - 39)) | (1 << (MySqlParser.GRANT - 39)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MySqlParser.INSERT - 73)) | (1 << (MySqlParser.KILL - 73)) | (1 << (MySqlParser.LOAD - 73)) | (1 << (MySqlParser.LOCK - 73)) | (1 << (MySqlParser.OPTIMIZE - 73)))) !== 0) || ((((_la - 114)) & ~0x1F) === 0 && ((1 << (_la - 114)) & ((1 << (MySqlParser.PURGE - 114)) | (1 << (MySqlParser.RELEASE - 114)) | (1 << (MySqlParser.RENAME - 114)) | (1 << (MySqlParser.REPLACE - 114)) | (1 << (MySqlParser.REVOKE - 114)) | (1 << (MySqlParser.SELECT - 114)) | (1 << (MySqlParser.SET - 114)) | (1 << (MySqlParser.SHOW - 114)) | (1 << (MySqlParser.SIGNAL - 114)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MySqlParser.UNLOCK - 158)) | (1 << (MySqlParser.UPDATE - 158)) | (1 << (MySqlParser.USE - 158)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (MySqlParser.BEGIN - 265)) | (1 << (MySqlParser.BINLOG - 265)) | (1 << (MySqlParser.CACHE - 265)) | (1 << (MySqlParser.CHECKSUM - 265)) | (1 << (MySqlParser.COMMIT - 265)))) !== 0) || _la === MySqlParser.DEALLOCATE || _la === MySqlParser.DO || ((((_la - 346)) & ~0x1F) === 0 && ((1 << (_la - 346)) & ((1 << (MySqlParser.FLUSH - 346)) | (1 << (MySqlParser.HANDLER - 346)) | (1 << (MySqlParser.HELP - 346)) | (1 << (MySqlParser.INSTALL - 346)))) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & ((1 << (MySqlParser.PREPARE - 457)) | (1 << (MySqlParser.REPAIR - 457)) | (1 << (MySqlParser.RESET - 457)) | (1 << (MySqlParser.ROLLBACK - 457)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (MySqlParser.SAVEPOINT - 494)) | (1 << (MySqlParser.START - 494)) | (1 << (MySqlParser.STOP - 494)))) !== 0) || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & ((1 << (MySqlParser.TRUNCATE - 543)) | (1 << (MySqlParser.UNINSTALL - 543)) | (1 << (MySqlParser.XA - 543)))) !== 0) || _la === MySqlParser.EXECUTE || _la === MySqlParser.SHUTDOWN || _la === MySqlParser.LR_BRACKET || _la === MySqlParser.SEMI) {
				{
				this.state = 624;
				this.sqlStatements();
				}
			}

			this.state = 628;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.MINUSMINUS) {
				{
				this.state = 627;
				this.match(MySqlParser.MINUSMINUS);
				}
			}

			this.state = 630;
			this.match(MySqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlStatements(): SqlStatementsContext {
		let _localctx: SqlStatementsContext = new SqlStatementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, MySqlParser.RULE_sqlStatements);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 642;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 640;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.ALTER:
					case MySqlParser.ANALYZE:
					case MySqlParser.CALL:
					case MySqlParser.CHANGE:
					case MySqlParser.CHECK:
					case MySqlParser.CREATE:
					case MySqlParser.DELETE:
					case MySqlParser.DESC:
					case MySqlParser.DESCRIBE:
					case MySqlParser.DROP:
					case MySqlParser.EXPLAIN:
					case MySqlParser.GRANT:
					case MySqlParser.INSERT:
					case MySqlParser.KILL:
					case MySqlParser.LOAD:
					case MySqlParser.LOCK:
					case MySqlParser.OPTIMIZE:
					case MySqlParser.PURGE:
					case MySqlParser.RELEASE:
					case MySqlParser.RENAME:
					case MySqlParser.REPLACE:
					case MySqlParser.REVOKE:
					case MySqlParser.SELECT:
					case MySqlParser.SET:
					case MySqlParser.SHOW:
					case MySqlParser.SIGNAL:
					case MySqlParser.UNLOCK:
					case MySqlParser.UPDATE:
					case MySqlParser.USE:
					case MySqlParser.BEGIN:
					case MySqlParser.BINLOG:
					case MySqlParser.CACHE:
					case MySqlParser.CHECKSUM:
					case MySqlParser.COMMIT:
					case MySqlParser.DEALLOCATE:
					case MySqlParser.DO:
					case MySqlParser.FLUSH:
					case MySqlParser.HANDLER:
					case MySqlParser.HELP:
					case MySqlParser.INSTALL:
					case MySqlParser.PREPARE:
					case MySqlParser.REPAIR:
					case MySqlParser.RESET:
					case MySqlParser.ROLLBACK:
					case MySqlParser.SAVEPOINT:
					case MySqlParser.START:
					case MySqlParser.STOP:
					case MySqlParser.TRUNCATE:
					case MySqlParser.UNINSTALL:
					case MySqlParser.XA:
					case MySqlParser.EXECUTE:
					case MySqlParser.SHUTDOWN:
					case MySqlParser.LR_BRACKET:
						{
						this.state = 632;
						this.sqlStatement();
						this.state = 634;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.MINUSMINUS) {
							{
							this.state = 633;
							this.match(MySqlParser.MINUSMINUS);
							}
						}

						this.state = 637;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 3, this._ctx) ) {
						case 1:
							{
							this.state = 636;
							this.match(MySqlParser.SEMI);
							}
							break;
						}
						}
						break;
					case MySqlParser.SEMI:
						{
						this.state = 639;
						this.emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 644;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			}
			this.state = 653;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALTER:
			case MySqlParser.ANALYZE:
			case MySqlParser.CALL:
			case MySqlParser.CHANGE:
			case MySqlParser.CHECK:
			case MySqlParser.CREATE:
			case MySqlParser.DELETE:
			case MySqlParser.DESC:
			case MySqlParser.DESCRIBE:
			case MySqlParser.DROP:
			case MySqlParser.EXPLAIN:
			case MySqlParser.GRANT:
			case MySqlParser.INSERT:
			case MySqlParser.KILL:
			case MySqlParser.LOAD:
			case MySqlParser.LOCK:
			case MySqlParser.OPTIMIZE:
			case MySqlParser.PURGE:
			case MySqlParser.RELEASE:
			case MySqlParser.RENAME:
			case MySqlParser.REPLACE:
			case MySqlParser.REVOKE:
			case MySqlParser.SELECT:
			case MySqlParser.SET:
			case MySqlParser.SHOW:
			case MySqlParser.SIGNAL:
			case MySqlParser.UNLOCK:
			case MySqlParser.UPDATE:
			case MySqlParser.USE:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.CACHE:
			case MySqlParser.CHECKSUM:
			case MySqlParser.COMMIT:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DO:
			case MySqlParser.FLUSH:
			case MySqlParser.HANDLER:
			case MySqlParser.HELP:
			case MySqlParser.INSTALL:
			case MySqlParser.PREPARE:
			case MySqlParser.REPAIR:
			case MySqlParser.RESET:
			case MySqlParser.ROLLBACK:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.START:
			case MySqlParser.STOP:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.XA:
			case MySqlParser.EXECUTE:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.LR_BRACKET:
				{
				this.state = 645;
				this.sqlStatement();
				this.state = 650;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
				case 1:
					{
					this.state = 647;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.MINUSMINUS) {
						{
						this.state = 646;
						this.match(MySqlParser.MINUSMINUS);
						}
					}

					this.state = 649;
					this.match(MySqlParser.SEMI);
					}
					break;
				}
				}
				break;
			case MySqlParser.SEMI:
				{
				this.state = 652;
				this.emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlStatement(): SqlStatementContext {
		let _localctx: SqlStatementContext = new SqlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, MySqlParser.RULE_sqlStatement);
		try {
			this.state = 662;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 9, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 655;
				this.ddlStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 656;
				this.dmlStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 657;
				this.transactionStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 658;
				this.replicationStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 659;
				this.preparedStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 660;
				this.administrationStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 661;
				this.utilityStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public emptyStatement(): EmptyStatementContext {
		let _localctx: EmptyStatementContext = new EmptyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, MySqlParser.RULE_emptyStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 664;
			this.match(MySqlParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ddlStatement(): DdlStatementContext {
		let _localctx: DdlStatementContext = new DdlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, MySqlParser.RULE_ddlStatement);
		try {
			this.state = 701;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 666;
				this.createDatabase();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 667;
				this.createEvent();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 668;
				this.createIndex();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 669;
				this.createLogfileGroup();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 670;
				this.createProcedure();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 671;
				this.createFunction();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 672;
				this.createServer();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 673;
				this.createTable();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 674;
				this.createTablespaceInnodb();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 675;
				this.createTablespaceNdb();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 676;
				this.createTrigger();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 677;
				this.createView();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 678;
				this.alterDatabase();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 679;
				this.alterEvent();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 680;
				this.alterFunction();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 681;
				this.alterInstance();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 682;
				this.alterLogfileGroup();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 683;
				this.alterProcedure();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 684;
				this.alterServer();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 685;
				this.alterTable();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 686;
				this.alterTablespace();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 687;
				this.alterView();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 688;
				this.dropDatabase();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 689;
				this.dropEvent();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 690;
				this.dropIndex();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 691;
				this.dropLogfileGroup();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 692;
				this.dropProcedure();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 693;
				this.dropFunction();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 694;
				this.dropServer();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 695;
				this.dropTable();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 696;
				this.dropTablespace();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 697;
				this.dropTrigger();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 698;
				this.dropView();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 699;
				this.renameTable();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 700;
				this.truncateTable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dmlStatement(): DmlStatementContext {
		let _localctx: DmlStatementContext = new DmlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, MySqlParser.RULE_dmlStatement);
		try {
			this.state = 713;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 703;
				this.selectStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 704;
				this.insertStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 705;
				this.updateStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 706;
				this.deleteStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 707;
				this.replaceStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 708;
				this.callStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 709;
				this.loadDataStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 710;
				this.loadXmlStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 711;
				this.doStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 712;
				this.handlerStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionStatement(): TransactionStatementContext {
		let _localctx: TransactionStatementContext = new TransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, MySqlParser.RULE_transactionStatement);
		try {
			this.state = 724;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 12, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 715;
				this.startTransaction();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 716;
				this.beginWork();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 717;
				this.commitWork();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 718;
				this.rollbackWork();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 719;
				this.savepointStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 720;
				this.rollbackStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 721;
				this.releaseStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 722;
				this.lockTables();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 723;
				this.unlockTables();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationStatement(): ReplicationStatementContext {
		let _localctx: ReplicationStatementContext = new ReplicationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, MySqlParser.RULE_replicationStatement);
		try {
			this.state = 741;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 726;
				this.changeMaster();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 727;
				this.changeReplicationFilter();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 728;
				this.purgeBinaryLogs();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 729;
				this.resetMaster();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 730;
				this.resetSlave();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 731;
				this.startSlave();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 732;
				this.stopSlave();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 733;
				this.startGroupReplication();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 734;
				this.stopGroupReplication();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 735;
				this.xaStartTransaction();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 736;
				this.xaEndTransaction();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 737;
				this.xaPrepareStatement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 738;
				this.xaCommitWork();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 739;
				this.xaRollbackWork();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 740;
				this.xaRecoverWork();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparedStatement(): PreparedStatementContext {
		let _localctx: PreparedStatementContext = new PreparedStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, MySqlParser.RULE_preparedStatement);
		try {
			this.state = 746;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.PREPARE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 743;
				this.prepareStatement();
				}
				break;
			case MySqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 744;
				this.executeStatement();
				}
				break;
			case MySqlParser.DROP:
			case MySqlParser.DEALLOCATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 745;
				this.deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compoundStatement(): CompoundStatementContext {
		let _localctx: CompoundStatementContext = new CompoundStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, MySqlParser.RULE_compoundStatement);
		try {
			this.state = 758;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 748;
				this.blockStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 749;
				this.caseStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 750;
				this.ifStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 751;
				this.leaveStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 752;
				this.loopStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 753;
				this.repeatStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 754;
				this.whileStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 755;
				this.iterateStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 756;
				this.returnStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 757;
				this.cursorStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public administrationStatement(): AdministrationStatementContext {
		let _localctx: AdministrationStatementContext = new AdministrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, MySqlParser.RULE_administrationStatement);
		try {
			this.state = 785;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 760;
				this.alterUser();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 761;
				this.createUser();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 762;
				this.dropUser();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 763;
				this.grantStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 764;
				this.grantProxy();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 765;
				this.renameUser();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 766;
				this.revokeStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 767;
				this.revokeProxy();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 768;
				this.analyzeTable();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 769;
				this.checkTable();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 770;
				this.checksumTable();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 771;
				this.optimizeTable();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 772;
				this.repairTable();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 773;
				this.createUdfunction();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 774;
				this.installPlugin();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 775;
				this.uninstallPlugin();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 776;
				this.setStatement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 777;
				this.showStatement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 778;
				this.binlogStatement();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 779;
				this.cacheIndexStatement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 780;
				this.flushStatement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 781;
				this.killStatement();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 782;
				this.loadIndexIntoCache();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 783;
				this.resetStatement();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 784;
				this.shutdownStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public utilityStatement(): UtilityStatementContext {
		let _localctx: UtilityStatementContext = new UtilityStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, MySqlParser.RULE_utilityStatement);
		try {
			this.state = 792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 787;
				this.simpleDescribeStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 788;
				this.fullDescribeStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 789;
				this.helpStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 790;
				this.useStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 791;
				this.signalStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabase(): CreateDatabaseContext {
		let _localctx: CreateDatabaseContext = new CreateDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, MySqlParser.RULE_createDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 794;
			this.match(MySqlParser.CREATE);
			this.state = 795;
			_localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
				_localctx._dbFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 797;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 796;
				this.ifNotExists();
				}
			}

			this.state = 799;
			this.uid();
			this.state = 803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 22)) & ~0x1F) === 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la === MySqlParser.CHARSET) {
				{
				{
				this.state = 800;
				this.createDatabaseOption();
				}
				}
				this.state = 805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createEvent(): CreateEventContext {
		let _localctx: CreateEventContext = new CreateEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, MySqlParser.RULE_createEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 806;
			this.match(MySqlParser.CREATE);
			this.state = 808;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 807;
				this.ownerStatement();
				}
			}

			this.state = 810;
			this.match(MySqlParser.EVENT);
			this.state = 812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 811;
				this.ifNotExists();
				}
			}

			this.state = 814;
			this.fullId();
			this.state = 815;
			this.match(MySqlParser.ON);
			this.state = 816;
			this.match(MySqlParser.SCHEDULE);
			this.state = 817;
			this.scheduleExpression();
			this.state = 824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ON) {
				{
				this.state = 818;
				this.match(MySqlParser.ON);
				this.state = 819;
				this.match(MySqlParser.COMPLETION);
				this.state = 821;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 820;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 823;
				this.match(MySqlParser.PRESERVE);
				}
			}

			this.state = 827;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DISABLE || _la === MySqlParser.ENABLE) {
				{
				this.state = 826;
				this.enableType();
				}
			}

			this.state = 831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMENT) {
				{
				this.state = 829;
				this.match(MySqlParser.COMMENT);
				this.state = 830;
				this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 833;
			this.match(MySqlParser.DO);
			this.state = 834;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndex(): CreateIndexContext {
		let _localctx: CreateIndexContext = new CreateIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, MySqlParser.RULE_createIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 836;
			this.match(MySqlParser.CREATE);
			this.state = 838;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE) {
				{
				this.state = 837;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL || _la === MySqlParser.UNIQUE) {
				{
				this.state = 840;
				_localctx._indexCategory = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL || _la === MySqlParser.UNIQUE)) {
					_localctx._indexCategory = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 843;
			this.match(MySqlParser.INDEX);
			this.state = 844;
			this.uid();
			this.state = 846;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.USING) {
				{
				this.state = 845;
				this.indexType();
				}
			}

			this.state = 848;
			this.match(MySqlParser.ON);
			this.state = 849;
			this.tableName();
			this.state = 850;
			this.indexColumnNames();
			this.state = 854;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
				{
				{
				this.state = 851;
				this.indexOption();
				}
				}
				this.state = 856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 869;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 867;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.ALGORITHM:
						{
						this.state = 857;
						this.match(MySqlParser.ALGORITHM);
						this.state = 859;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.EQUAL_SYMBOL) {
							{
							this.state = 858;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 861;
						_localctx._algType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.COPY || _la === MySqlParser.INPLACE)) {
							_localctx._algType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case MySqlParser.LOCK:
						{
						this.state = 862;
						this.match(MySqlParser.LOCK);
						this.state = 864;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.EQUAL_SYMBOL) {
							{
							this.state = 863;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 866;
						_localctx._lockType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.EXCLUSIVE || _la === MySqlParser.NONE || _la === MySqlParser.SHARED)) {
							_localctx._lockType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 871;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createLogfileGroup(): CreateLogfileGroupContext {
		let _localctx: CreateLogfileGroupContext = new CreateLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, MySqlParser.RULE_createLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 872;
			this.match(MySqlParser.CREATE);
			this.state = 873;
			this.match(MySqlParser.LOGFILE);
			this.state = 874;
			this.match(MySqlParser.GROUP);
			this.state = 875;
			this.uid();
			this.state = 876;
			this.match(MySqlParser.ADD);
			this.state = 877;
			this.match(MySqlParser.UNDOFILE);
			this.state = 878;
			_localctx._undoFile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 884;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 879;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 880;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 883;
				_localctx._initSize = this.fileSizeLiteral();
				}
			}

			this.state = 891;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.UNDO_BUFFER_SIZE) {
				{
				this.state = 886;
				this.match(MySqlParser.UNDO_BUFFER_SIZE);
				this.state = 888;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 887;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 890;
				_localctx._undoSize = this.fileSizeLiteral();
				}
			}

			this.state = 898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.REDO_BUFFER_SIZE) {
				{
				this.state = 893;
				this.match(MySqlParser.REDO_BUFFER_SIZE);
				this.state = 895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 894;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 897;
				_localctx._redoSize = this.fileSizeLiteral();
				}
			}

			this.state = 905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NODEGROUP) {
				{
				this.state = 900;
				this.match(MySqlParser.NODEGROUP);
				this.state = 902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 901;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 904;
				this.uid();
				}
			}

			this.state = 908;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 907;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMENT) {
				{
				this.state = 910;
				this.match(MySqlParser.COMMENT);
				this.state = 912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 911;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 914;
				_localctx._comment = this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 917;
			this.match(MySqlParser.ENGINE);
			this.state = 919;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 918;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 921;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createProcedure(): CreateProcedureContext {
		let _localctx: CreateProcedureContext = new CreateProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, MySqlParser.RULE_createProcedure);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 923;
			this.match(MySqlParser.CREATE);
			this.state = 925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 924;
				this.ownerStatement();
				}
			}

			this.state = 927;
			this.match(MySqlParser.PROCEDURE);
			this.state = 928;
			this.fullId();
			this.state = 929;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 931;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (MySqlParser.IN - 68)) | (1 << (MySqlParser.INOUT - 68)) | (1 << (MySqlParser.LEFT - 68)))) !== 0) || _la === MySqlParser.OUT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 930;
				this.procedureParameter();
				}
			}

			this.state = 937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 933;
				this.match(MySqlParser.COMMA);
				this.state = 934;
				this.procedureParameter();
				}
				}
				this.state = 939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 940;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 944;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 941;
					this.routineOption();
					}
					}
				}
				this.state = 946;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
			}
			this.state = 947;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFunction(): CreateFunctionContext {
		let _localctx: CreateFunctionContext = new CreateFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, MySqlParser.RULE_createFunction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 949;
			this.match(MySqlParser.CREATE);
			this.state = 951;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 950;
				this.ownerStatement();
				}
			}

			this.state = 953;
			this.match(MySqlParser.FUNCTION);
			this.state = 954;
			this.fullId();
			this.state = 955;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 957;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 956;
				this.functionParameter();
				}
			}

			this.state = 963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 959;
				this.match(MySqlParser.COMMA);
				this.state = 960;
				this.functionParameter();
				}
				}
				this.state = 965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 966;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 967;
			this.match(MySqlParser.RETURNS);
			this.state = 968;
			this.dataType();
			this.state = 972;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 969;
					this.routineOption();
					}
					}
				}
				this.state = 974;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
			}
			this.state = 977;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALTER:
			case MySqlParser.ANALYZE:
			case MySqlParser.CALL:
			case MySqlParser.CHANGE:
			case MySqlParser.CHECK:
			case MySqlParser.CREATE:
			case MySqlParser.DATABASE:
			case MySqlParser.DELETE:
			case MySqlParser.DESC:
			case MySqlParser.DESCRIBE:
			case MySqlParser.DROP:
			case MySqlParser.EXPLAIN:
			case MySqlParser.GRANT:
			case MySqlParser.INSERT:
			case MySqlParser.KILL:
			case MySqlParser.LEFT:
			case MySqlParser.LOAD:
			case MySqlParser.LOCK:
			case MySqlParser.OPTIMIZE:
			case MySqlParser.PURGE:
			case MySqlParser.RELEASE:
			case MySqlParser.RENAME:
			case MySqlParser.REPLACE:
			case MySqlParser.REVOKE:
			case MySqlParser.RIGHT:
			case MySqlParser.SELECT:
			case MySqlParser.SET:
			case MySqlParser.SHOW:
			case MySqlParser.SIGNAL:
			case MySqlParser.UNLOCK:
			case MySqlParser.UPDATE:
			case MySqlParser.USE:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				{
				this.state = 975;
				this.routineBody();
				}
				break;
			case MySqlParser.RETURN:
				{
				this.state = 976;
				this.returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createServer(): CreateServerContext {
		let _localctx: CreateServerContext = new CreateServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, MySqlParser.RULE_createServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 979;
			this.match(MySqlParser.CREATE);
			this.state = 980;
			this.match(MySqlParser.SERVER);
			this.state = 981;
			this.uid();
			this.state = 982;
			this.match(MySqlParser.FOREIGN);
			this.state = 983;
			this.match(MySqlParser.DATA);
			this.state = 984;
			this.match(MySqlParser.WRAPPER);
			this.state = 985;
			_localctx._wrapperName = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.MYSQL || _la === MySqlParser.STRING_LITERAL)) {
				_localctx._wrapperName = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 986;
			this.match(MySqlParser.OPTIONS);
			this.state = 987;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 988;
			this.serverOption();
			this.state = 993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 989;
				this.match(MySqlParser.COMMA);
				this.state = 990;
				this.serverOption();
				}
				}
				this.state = 995;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 996;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTable(): CreateTableContext {
		let _localctx: CreateTableContext = new CreateTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, MySqlParser.RULE_createTable);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1076;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 998;
				this.match(MySqlParser.CREATE);
				this.state = 1000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.TEMPORARY) {
					{
					this.state = 999;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 1002;
				this.match(MySqlParser.TABLE);
				this.state = 1004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 1003;
					this.ifNotExists();
					}
				}

				this.state = 1006;
				this.tableName();
				this.state = 1014;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.LIKE:
					{
					this.state = 1007;
					this.match(MySqlParser.LIKE);
					this.state = 1008;
					this.tableName();
					}
					break;
				case MySqlParser.LR_BRACKET:
					{
					this.state = 1009;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1010;
					this.match(MySqlParser.LIKE);
					this.state = 1011;
					(_localctx as CopyCreateTableContext)._parenthesisTable = this.tableName();
					this.state = 1012;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1016;
				this.match(MySqlParser.CREATE);
				this.state = 1018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.TEMPORARY) {
					{
					this.state = 1017;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 1020;
				this.match(MySqlParser.TABLE);
				this.state = 1022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 1021;
					this.ifNotExists();
					}
				}

				this.state = 1024;
				this.tableName();
				this.state = 1026;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
				case 1:
					{
					this.state = 1025;
					this.createDefinitions();
					}
					break;
				}
				this.state = 1038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 22)) & ~0x1F) === 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la === MySqlParser.INDEX || _la === MySqlParser.UNION || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & ((1 << (MySqlParser.AUTO_INCREMENT - 263)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 263)) | (1 << (MySqlParser.CHECKSUM - 263)) | (1 << (MySqlParser.PAGE_CHECKSUM - 263)) | (1 << (MySqlParser.COMMENT - 263)) | (1 << (MySqlParser.COMPRESSION - 263)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (MySqlParser.CONNECTION - 295)) | (1 << (MySqlParser.DATA - 295)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 295)) | (1 << (MySqlParser.ENCRYPTION - 295)) | (1 << (MySqlParser.ENGINE - 295)))) !== 0) || _la === MySqlParser.INSERT_METHOD || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.MAX_ROWS || _la === MySqlParser.MIN_ROWS || _la === MySqlParser.PACK_KEYS || _la === MySqlParser.PASSWORD || ((((_la - 493)) & ~0x1F) === 0 && ((1 << (_la - 493)) & ((1 << (MySqlParser.ROW_FORMAT - 493)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 493)) | (1 << (MySqlParser.STATS_PERSISTENT - 493)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 493)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE || _la === MySqlParser.CHARSET) {
					{
					this.state = 1028;
					this.tableOption();
					this.state = 1035;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 22)) & ~0x1F) === 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la === MySqlParser.INDEX || _la === MySqlParser.UNION || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & ((1 << (MySqlParser.AUTO_INCREMENT - 263)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 263)) | (1 << (MySqlParser.CHECKSUM - 263)) | (1 << (MySqlParser.PAGE_CHECKSUM - 263)) | (1 << (MySqlParser.COMMENT - 263)) | (1 << (MySqlParser.COMPRESSION - 263)))) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & ((1 << (MySqlParser.CONNECTION - 295)) | (1 << (MySqlParser.DATA - 295)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 295)) | (1 << (MySqlParser.ENCRYPTION - 295)) | (1 << (MySqlParser.ENGINE - 295)))) !== 0) || _la === MySqlParser.INSERT_METHOD || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.MAX_ROWS || _la === MySqlParser.MIN_ROWS || _la === MySqlParser.PACK_KEYS || _la === MySqlParser.PASSWORD || ((((_la - 493)) & ~0x1F) === 0 && ((1 << (_la - 493)) & ((1 << (MySqlParser.ROW_FORMAT - 493)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 493)) | (1 << (MySqlParser.STATS_PERSISTENT - 493)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 493)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE || _la === MySqlParser.CHARSET || _la === MySqlParser.COMMA) {
						{
						{
						this.state = 1030;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.COMMA) {
							{
							this.state = 1029;
							this.match(MySqlParser.COMMA);
							}
						}

						this.state = 1032;
						this.tableOption();
						}
						}
						this.state = 1037;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PARTITION) {
					{
					this.state = 1040;
					this.partitionDefinitions();
					}
				}

				this.state = 1044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE) {
					{
					this.state = 1043;
					(_localctx as QueryCreateTableContext)._keyViolate = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE)) {
						(_localctx as QueryCreateTableContext)._keyViolate = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1047;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 1046;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 1049;
				this.selectStatement();
				}
				break;

			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1051;
				this.match(MySqlParser.CREATE);
				this.state = 1053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.TEMPORARY) {
					{
					this.state = 1052;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 1055;
				this.match(MySqlParser.TABLE);
				this.state = 1057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 1056;
					this.ifNotExists();
					}
				}

				this.state = 1059;
				this.tableName();
				this.state = 1060;
				this.createDefinitions();
				this.state = 1071;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 72, this._ctx) ) {
				case 1:
					{
					this.state = 1061;
					this.tableOption();
					this.state = 1068;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1063;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MySqlParser.COMMA) {
								{
								this.state = 1062;
								this.match(MySqlParser.COMMA);
								}
							}

							this.state = 1065;
							this.tableOption();
							}
							}
						}
						this.state = 1070;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
					}
					}
					break;
				}
				this.state = 1074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PARTITION) {
					{
					this.state = 1073;
					this.partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTablespaceInnodb(): CreateTablespaceInnodbContext {
		let _localctx: CreateTablespaceInnodbContext = new CreateTablespaceInnodbContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, MySqlParser.RULE_createTablespaceInnodb);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1078;
			this.match(MySqlParser.CREATE);
			this.state = 1079;
			this.match(MySqlParser.TABLESPACE);
			this.state = 1080;
			this.uid();
			this.state = 1081;
			this.match(MySqlParser.ADD);
			this.state = 1082;
			this.match(MySqlParser.DATAFILE);
			this.state = 1083;
			_localctx._datafile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 1087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FILE_BLOCK_SIZE) {
				{
				this.state = 1084;
				this.match(MySqlParser.FILE_BLOCK_SIZE);
				this.state = 1085;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 1086;
				_localctx._fileBlockSize = this.fileSizeLiteral();
				}
			}

			this.state = 1094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ENGINE) {
				{
				this.state = 1089;
				this.match(MySqlParser.ENGINE);
				this.state = 1091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1090;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1093;
				this.engineName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTablespaceNdb(): CreateTablespaceNdbContext {
		let _localctx: CreateTablespaceNdbContext = new CreateTablespaceNdbContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, MySqlParser.RULE_createTablespaceNdb);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1096;
			this.match(MySqlParser.CREATE);
			this.state = 1097;
			this.match(MySqlParser.TABLESPACE);
			this.state = 1098;
			this.uid();
			this.state = 1099;
			this.match(MySqlParser.ADD);
			this.state = 1100;
			this.match(MySqlParser.DATAFILE);
			this.state = 1101;
			_localctx._datafile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 1102;
			this.match(MySqlParser.USE);
			this.state = 1103;
			this.match(MySqlParser.LOGFILE);
			this.state = 1104;
			this.match(MySqlParser.GROUP);
			this.state = 1105;
			this.uid();
			this.state = 1111;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EXTENT_SIZE) {
				{
				this.state = 1106;
				this.match(MySqlParser.EXTENT_SIZE);
				this.state = 1108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1107;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1110;
				_localctx._extentSize = this.fileSizeLiteral();
				}
			}

			this.state = 1118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 1113;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 1115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1114;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1117;
				_localctx._initialSize = this.fileSizeLiteral();
				}
			}

			this.state = 1125;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AUTOEXTEND_SIZE) {
				{
				this.state = 1120;
				this.match(MySqlParser.AUTOEXTEND_SIZE);
				this.state = 1122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1121;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1124;
				_localctx._autoextendSize = this.fileSizeLiteral();
				}
			}

			this.state = 1132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.MAX_SIZE) {
				{
				this.state = 1127;
				this.match(MySqlParser.MAX_SIZE);
				this.state = 1129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1128;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1131;
				_localctx._maxSize = this.fileSizeLiteral();
				}
			}

			this.state = 1139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NODEGROUP) {
				{
				this.state = 1134;
				this.match(MySqlParser.NODEGROUP);
				this.state = 1136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1135;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1138;
				this.uid();
				}
			}

			this.state = 1142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 1141;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 1149;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMENT) {
				{
				this.state = 1144;
				this.match(MySqlParser.COMMENT);
				this.state = 1146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1145;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1148;
				_localctx._comment = this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 1151;
			this.match(MySqlParser.ENGINE);
			this.state = 1153;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 1152;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 1155;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTrigger(): CreateTriggerContext {
		let _localctx: CreateTriggerContext = new CreateTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, MySqlParser.RULE_createTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1157;
			this.match(MySqlParser.CREATE);
			this.state = 1159;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 1158;
				this.ownerStatement();
				}
			}

			this.state = 1161;
			this.match(MySqlParser.TRIGGER);
			this.state = 1162;
			_localctx._thisTrigger = this.fullId();
			this.state = 1163;
			_localctx._triggerTime = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BEFORE || _la === MySqlParser.AFTER)) {
				_localctx._triggerTime = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1164;
			_localctx._triggerEvent = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DELETE || _la === MySqlParser.INSERT || _la === MySqlParser.UPDATE)) {
				_localctx._triggerEvent = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1165;
			this.match(MySqlParser.ON);
			this.state = 1166;
			this.tableName();
			this.state = 1167;
			this.match(MySqlParser.FOR);
			this.state = 1168;
			this.match(MySqlParser.EACH);
			this.state = 1169;
			this.match(MySqlParser.ROW);
			this.state = 1172;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
			case 1:
				{
				this.state = 1170;
				_localctx._triggerPlace = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FOLLOWS || _la === MySqlParser.PRECEDES)) {
					_localctx._triggerPlace = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1171;
				_localctx._otherTrigger = this.fullId();
				}
				break;
			}
			this.state = 1174;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createView(): CreateViewContext {
		let _localctx: CreateViewContext = new CreateViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, MySqlParser.RULE_createView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1176;
			this.match(MySqlParser.CREATE);
			this.state = 1179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.OR) {
				{
				this.state = 1177;
				this.match(MySqlParser.OR);
				this.state = 1178;
				this.match(MySqlParser.REPLACE);
				}
			}

			this.state = 1184;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALGORITHM) {
				{
				this.state = 1181;
				this.match(MySqlParser.ALGORITHM);
				this.state = 1182;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 1183;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.MERGE || _la === MySqlParser.TEMPTABLE || _la === MySqlParser.UNDEFINED)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1187;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 1186;
				this.ownerStatement();
				}
			}

			this.state = 1192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.SQL) {
				{
				this.state = 1189;
				this.match(MySqlParser.SQL);
				this.state = 1190;
				this.match(MySqlParser.SECURITY);
				this.state = 1191;
				_localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFINER || _la === MySqlParser.INVOKER)) {
					_localctx._secContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1194;
			this.match(MySqlParser.VIEW);
			this.state = 1195;
			this.fullId();
			this.state = 1200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 1196;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1197;
				this.uidList();
				this.state = 1198;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 1202;
			this.match(MySqlParser.AS);
			this.state = 1203;
			this.selectStatement();
			this.state = 1210;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 1204;
				this.match(MySqlParser.WITH);
				this.state = 1206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL) {
					{
					this.state = 1205;
					_localctx._checkOption = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL)) {
						_localctx._checkOption = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1208;
				this.match(MySqlParser.CHECK);
				this.state = 1209;
				this.match(MySqlParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabaseOption(): CreateDatabaseOptionContext {
		let _localctx: CreateDatabaseOptionContext = new CreateDatabaseOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, MySqlParser.RULE_createDatabaseOption);
		let _la: number;
		try {
			this.state = 1235;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 107, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1212;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1218;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CHARACTER:
					{
					this.state = 1215;
					this.match(MySqlParser.CHARACTER);
					this.state = 1216;
					this.match(MySqlParser.SET);
					}
					break;
				case MySqlParser.CHARSET:
					{
					this.state = 1217;
					this.match(MySqlParser.CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1221;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1220;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1225;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.BINARY:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
					{
					this.state = 1223;
					this.charsetName();
					}
					break;
				case MySqlParser.DEFAULT:
					{
					this.state = 1224;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1228;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1227;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1230;
				this.match(MySqlParser.COLLATE);
				this.state = 1232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1231;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1234;
				this.collationName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ownerStatement(): OwnerStatementContext {
		let _localctx: OwnerStatementContext = new OwnerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, MySqlParser.RULE_ownerStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1237;
			this.match(MySqlParser.DEFINER);
			this.state = 1238;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 1245;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.STRING_USER_NAME:
				{
				this.state = 1239;
				this.userName();
				}
				break;
			case MySqlParser.CURRENT_USER:
				{
				this.state = 1240;
				this.match(MySqlParser.CURRENT_USER);
				this.state = 1243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 1241;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1242;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scheduleExpression(): ScheduleExpressionContext {
		let _localctx: ScheduleExpressionContext = new ScheduleExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, MySqlParser.RULE_scheduleExpression);
		let _la: number;
		try {
			this.state = 1281;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.AT:
				_localctx = new PreciseScheduleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1247;
				this.match(MySqlParser.AT);
				this.state = 1248;
				this.timestampValue();
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.PLUS) {
					{
					{
					this.state = 1249;
					this.intervalExpr();
					}
					}
					this.state = 1254;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MySqlParser.EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1255;
				this.match(MySqlParser.EVERY);
				this.state = 1258;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 111, this._ctx) ) {
				case 1:
					{
					this.state = 1256;
					this.decimalLiteral();
					}
					break;

				case 2:
					{
					this.state = 1257;
					this.expression(0);
					}
					break;
				}
				this.state = 1260;
				this.intervalType();
				this.state = 1269;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.STARTS) {
					{
					this.state = 1261;
					this.match(MySqlParser.STARTS);
					this.state = 1262;
					(_localctx as IntervalScheduleContext)._startTimestamp = this.timestampValue();
					this.state = 1266;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.PLUS) {
						{
						{
						this.state = 1263;
						(_localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(_localctx as IntervalScheduleContext)._startIntervals.push((_localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1268;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ENDS) {
					{
					this.state = 1271;
					this.match(MySqlParser.ENDS);
					this.state = 1272;
					(_localctx as IntervalScheduleContext)._endTimestamp = this.timestampValue();
					this.state = 1276;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.PLUS) {
						{
						{
						this.state = 1273;
						(_localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(_localctx as IntervalScheduleContext)._endIntervals.push((_localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1278;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timestampValue(): TimestampValueContext {
		let _localctx: TimestampValueContext = new TimestampValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, MySqlParser.RULE_timestampValue);
		try {
			this.state = 1287;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 117, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1283;
				this.match(MySqlParser.CURRENT_TIMESTAMP);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1284;
				this.stringLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1285;
				this.decimalLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1286;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalExpr(): IntervalExprContext {
		let _localctx: IntervalExprContext = new IntervalExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, MySqlParser.RULE_intervalExpr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1289;
			this.match(MySqlParser.PLUS);
			this.state = 1290;
			this.match(MySqlParser.INTERVAL);
			this.state = 1293;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				{
				this.state = 1291;
				this.decimalLiteral();
				}
				break;

			case 2:
				{
				this.state = 1292;
				this.expression(0);
				}
				break;
			}
			this.state = 1295;
			this.intervalType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalType(): IntervalTypeContext {
		let _localctx: IntervalTypeContext = new IntervalTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, MySqlParser.RULE_intervalType);
		try {
			this.state = 1310;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1297;
				this.intervalTypeBase();
				}
				break;
			case MySqlParser.YEAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1298;
				this.match(MySqlParser.YEAR);
				}
				break;
			case MySqlParser.YEAR_MONTH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1299;
				this.match(MySqlParser.YEAR_MONTH);
				}
				break;
			case MySqlParser.DAY_HOUR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1300;
				this.match(MySqlParser.DAY_HOUR);
				}
				break;
			case MySqlParser.DAY_MINUTE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1301;
				this.match(MySqlParser.DAY_MINUTE);
				}
				break;
			case MySqlParser.DAY_SECOND:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1302;
				this.match(MySqlParser.DAY_SECOND);
				}
				break;
			case MySqlParser.HOUR_MINUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1303;
				this.match(MySqlParser.HOUR_MINUTE);
				}
				break;
			case MySqlParser.HOUR_SECOND:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1304;
				this.match(MySqlParser.HOUR_SECOND);
				}
				break;
			case MySqlParser.MINUTE_SECOND:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1305;
				this.match(MySqlParser.MINUTE_SECOND);
				}
				break;
			case MySqlParser.SECOND_MICROSECOND:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1306;
				this.match(MySqlParser.SECOND_MICROSECOND);
				}
				break;
			case MySqlParser.MINUTE_MICROSECOND:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1307;
				this.match(MySqlParser.MINUTE_MICROSECOND);
				}
				break;
			case MySqlParser.HOUR_MICROSECOND:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1308;
				this.match(MySqlParser.HOUR_MICROSECOND);
				}
				break;
			case MySqlParser.DAY_MICROSECOND:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1309;
				this.match(MySqlParser.DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enableType(): EnableTypeContext {
		let _localctx: EnableTypeContext = new EnableTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, MySqlParser.RULE_enableType);
		try {
			this.state = 1317;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1312;
				this.match(MySqlParser.ENABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1313;
				this.match(MySqlParser.DISABLE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1314;
				this.match(MySqlParser.DISABLE);
				this.state = 1315;
				this.match(MySqlParser.ON);
				this.state = 1316;
				this.match(MySqlParser.SLAVE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexType(): IndexTypeContext {
		let _localctx: IndexTypeContext = new IndexTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, MySqlParser.RULE_indexType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1319;
			this.match(MySqlParser.USING);
			this.state = 1320;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BTREE || _la === MySqlParser.HASH)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexOption(): IndexOptionContext {
		let _localctx: IndexOptionContext = new IndexOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, MySqlParser.RULE_indexOption);
		let _la: number;
		try {
			this.state = 1335;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.KEY_BLOCK_SIZE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1322;
				this.match(MySqlParser.KEY_BLOCK_SIZE);
				this.state = 1324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1323;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1326;
				this.fileSizeLiteral();
				}
				break;
			case MySqlParser.USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1327;
				this.indexType();
				}
				break;
			case MySqlParser.WITH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1328;
				this.match(MySqlParser.WITH);
				this.state = 1329;
				this.match(MySqlParser.PARSER);
				this.state = 1330;
				this.uid();
				}
				break;
			case MySqlParser.COMMENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1331;
				this.match(MySqlParser.COMMENT);
				this.state = 1332;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.INVISIBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1333;
				this.match(MySqlParser.INVISIBLE);
				}
				break;
			case MySqlParser.VISIBLE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1334;
				this.match(MySqlParser.VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureParameter(): ProcedureParameterContext {
		let _localctx: ProcedureParameterContext = new ProcedureParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, MySqlParser.RULE_procedureParameter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1338;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IN || _la === MySqlParser.INOUT || _la === MySqlParser.OUT) {
				{
				this.state = 1337;
				_localctx._direction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.IN || _la === MySqlParser.INOUT || _la === MySqlParser.OUT)) {
					_localctx._direction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1340;
			this.uid();
			this.state = 1341;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionParameter(): FunctionParameterContext {
		let _localctx: FunctionParameterContext = new FunctionParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, MySqlParser.RULE_functionParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1343;
			this.uid();
			this.state = 1344;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineOption(): RoutineOptionContext {
		let _localctx: RoutineOptionContext = new RoutineOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, MySqlParser.RULE_routineOption);
		let _la: number;
		try {
			this.state = 1369;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1346;
				this.match(MySqlParser.COMMENT);
				this.state = 1347;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1348;
				this.match(MySqlParser.LANGUAGE);
				this.state = 1349;
				this.match(MySqlParser.SQL);
				}
				break;
			case MySqlParser.DETERMINISTIC:
			case MySqlParser.NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 1350;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 1353;
				this.match(MySqlParser.DETERMINISTIC);
				}
				break;
			case MySqlParser.MODIFIES:
			case MySqlParser.READS:
			case MySqlParser.CONTAINS:
			case MySqlParser.NO:
				_localctx = new RoutineDataContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1364;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CONTAINS:
					{
					this.state = 1354;
					this.match(MySqlParser.CONTAINS);
					this.state = 1355;
					this.match(MySqlParser.SQL);
					}
					break;
				case MySqlParser.NO:
					{
					this.state = 1356;
					this.match(MySqlParser.NO);
					this.state = 1357;
					this.match(MySqlParser.SQL);
					}
					break;
				case MySqlParser.READS:
					{
					this.state = 1358;
					this.match(MySqlParser.READS);
					this.state = 1359;
					this.match(MySqlParser.SQL);
					this.state = 1360;
					this.match(MySqlParser.DATA);
					}
					break;
				case MySqlParser.MODIFIES:
					{
					this.state = 1361;
					this.match(MySqlParser.MODIFIES);
					this.state = 1362;
					this.match(MySqlParser.SQL);
					this.state = 1363;
					this.match(MySqlParser.DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MySqlParser.SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1366;
				this.match(MySqlParser.SQL);
				this.state = 1367;
				this.match(MySqlParser.SECURITY);
				this.state = 1368;
				(_localctx as RoutineSecurityContext)._context = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFINER || _la === MySqlParser.INVOKER)) {
					(_localctx as RoutineSecurityContext)._context = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverOption(): ServerOptionContext {
		let _localctx: ServerOptionContext = new ServerOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, MySqlParser.RULE_serverOption);
		try {
			this.state = 1385;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.HOST:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1371;
				this.match(MySqlParser.HOST);
				this.state = 1372;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DATABASE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1373;
				this.match(MySqlParser.DATABASE);
				this.state = 1374;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.USER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1375;
				this.match(MySqlParser.USER);
				this.state = 1376;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PASSWORD:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1377;
				this.match(MySqlParser.PASSWORD);
				this.state = 1378;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.SOCKET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1379;
				this.match(MySqlParser.SOCKET);
				this.state = 1380;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.OWNER:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1381;
				this.match(MySqlParser.OWNER);
				this.state = 1382;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PORT:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1383;
				this.match(MySqlParser.PORT);
				this.state = 1384;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDefinitions(): CreateDefinitionsContext {
		let _localctx: CreateDefinitionsContext = new CreateDefinitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, MySqlParser.RULE_createDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1387;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1388;
			this.createDefinition();
			this.state = 1393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 1389;
				this.match(MySqlParser.COMMA);
				this.state = 1390;
				this.createDefinition();
				}
				}
				this.state = 1395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1396;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDefinition(): CreateDefinitionContext {
		let _localctx: CreateDefinitionContext = new CreateDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, MySqlParser.RULE_createDefinition);
		try {
			this.state = 1403;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1398;
				this.uid();
				this.state = 1399;
				this.columnDefinition();
				}
				break;
			case MySqlParser.CHECK:
			case MySqlParser.CONSTRAINT:
			case MySqlParser.FOREIGN:
			case MySqlParser.PRIMARY:
			case MySqlParser.UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1401;
				this.tableConstraint();
				}
				break;
			case MySqlParser.FULLTEXT:
			case MySqlParser.INDEX:
			case MySqlParser.KEY:
			case MySqlParser.SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1402;
				this.indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnDefinition(): ColumnDefinitionContext {
		let _localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, MySqlParser.RULE_columnDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1405;
			this.dataType();
			this.state = 1409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & ((1 << (MySqlParser.AS - 11)) | (1 << (MySqlParser.COLLATE - 11)) | (1 << (MySqlParser.DEFAULT - 11)))) !== 0) || _la === MySqlParser.GENERATED || _la === MySqlParser.KEY || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (MySqlParser.NOT - 99)) | (1 << (MySqlParser.NULL_LITERAL - 99)) | (1 << (MySqlParser.ON - 99)) | (1 << (MySqlParser.PRIMARY - 99)) | (1 << (MySqlParser.REFERENCES - 99)))) !== 0) || _la === MySqlParser.UNIQUE || _la === MySqlParser.SERIAL || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & ((1 << (MySqlParser.AUTO_INCREMENT - 263)) | (1 << (MySqlParser.COLUMN_FORMAT - 263)) | (1 << (MySqlParser.COMMENT - 263)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.NULL_SPEC_LITERAL) {
				{
				{
				this.state = 1406;
				this.columnConstraint();
				}
				}
				this.state = 1411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnConstraint(): ColumnConstraintContext {
		let _localctx: ColumnConstraintContext = new ColumnConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, MySqlParser.RULE_columnConstraint);
		let _la: number;
		try {
			this.state = 1452;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1412;
				this.nullNotnull();
				}
				break;
			case MySqlParser.DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1413;
				this.match(MySqlParser.DEFAULT);
				this.state = 1414;
				this.defaultValue();
				}
				break;
			case MySqlParser.ON:
			case MySqlParser.AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1419;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.AUTO_INCREMENT:
					{
					this.state = 1415;
					this.match(MySqlParser.AUTO_INCREMENT);
					}
					break;
				case MySqlParser.ON:
					{
					this.state = 1416;
					this.match(MySqlParser.ON);
					this.state = 1417;
					this.match(MySqlParser.UPDATE);
					this.state = 1418;
					this.currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MySqlParser.KEY:
			case MySqlParser.PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1422;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PRIMARY) {
					{
					this.state = 1421;
					this.match(MySqlParser.PRIMARY);
					}
				}

				this.state = 1424;
				this.match(MySqlParser.KEY);
				}
				break;
			case MySqlParser.UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1425;
				this.match(MySqlParser.UNIQUE);
				this.state = 1427;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 133, this._ctx) ) {
				case 1:
					{
					this.state = 1426;
					this.match(MySqlParser.KEY);
					}
					break;
				}
				}
				break;
			case MySqlParser.COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1429;
				this.match(MySqlParser.COMMENT);
				this.state = 1430;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1431;
				this.match(MySqlParser.COLUMN_FORMAT);
				this.state = 1432;
				(_localctx as FormatColumnConstraintContext)._colformat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.DYNAMIC || _la === MySqlParser.FIXED)) {
					(_localctx as FormatColumnConstraintContext)._colformat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1433;
				this.match(MySqlParser.STORAGE);
				this.state = 1434;
				(_localctx as StorageColumnConstraintContext)._storageval = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.DISK || _la === MySqlParser.MEMORY)) {
					(_localctx as StorageColumnConstraintContext)._storageval = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1435;
				this.referenceDefinition();
				}
				break;
			case MySqlParser.COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1436;
				this.match(MySqlParser.COLLATE);
				this.state = 1437;
				this.collationName();
				}
				break;
			case MySqlParser.AS:
			case MySqlParser.GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1440;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.GENERATED) {
					{
					this.state = 1438;
					this.match(MySqlParser.GENERATED);
					this.state = 1439;
					this.match(MySqlParser.ALWAYS);
					}
				}

				this.state = 1442;
				this.match(MySqlParser.AS);
				this.state = 1443;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1444;
				this.expression(0);
				this.state = 1445;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.STORED || _la === MySqlParser.VIRTUAL) {
					{
					this.state = 1446;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.STORED || _la === MySqlParser.VIRTUAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			case MySqlParser.SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1449;
				this.match(MySqlParser.SERIAL);
				this.state = 1450;
				this.match(MySqlParser.DEFAULT);
				this.state = 1451;
				this.match(MySqlParser.VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableConstraint(): TableConstraintContext {
		let _localctx: TableConstraintContext = new TableConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, MySqlParser.RULE_tableConstraint);
		let _la: number;
		try {
			this.state = 1523;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 153, this._ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1458;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1454;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1456;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 1455;
						(_localctx as PrimaryKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1460;
				this.match(MySqlParser.PRIMARY);
				this.state = 1461;
				this.match(MySqlParser.KEY);
				this.state = 1463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 1462;
					(_localctx as PrimaryKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1466;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 1465;
					this.indexType();
					}
				}

				this.state = 1468;
				this.indexColumnNames();
				this.state = 1472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 1469;
					this.indexOption();
					}
					}
					this.state = 1474;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1475;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1477;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 1476;
						(_localctx as UniqueKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1481;
				this.match(MySqlParser.UNIQUE);
				this.state = 1483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 1482;
					(_localctx as UniqueKeyTableConstraintContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as UniqueKeyTableConstraintContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 1485;
					(_localctx as UniqueKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 1488;
					this.indexType();
					}
				}

				this.state = 1491;
				this.indexColumnNames();
				this.state = 1495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 1492;
					this.indexOption();
					}
					}
					this.state = 1497;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1498;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1500;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 1499;
						(_localctx as ForeignKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1504;
				this.match(MySqlParser.FOREIGN);
				this.state = 1505;
				this.match(MySqlParser.KEY);
				this.state = 1507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 1506;
					(_localctx as ForeignKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1509;
				this.indexColumnNames();
				this.state = 1510;
				this.referenceDefinition();
				}
				break;

			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 1512;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1514;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 1513;
						(_localctx as CheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1518;
				this.match(MySqlParser.CHECK);
				this.state = 1519;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1520;
				this.expression(0);
				this.state = 1521;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceDefinition(): ReferenceDefinitionContext {
		let _localctx: ReferenceDefinitionContext = new ReferenceDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, MySqlParser.RULE_referenceDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1525;
			this.match(MySqlParser.REFERENCES);
			this.state = 1526;
			this.tableName();
			this.state = 1528;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				{
				this.state = 1527;
				this.indexColumnNames();
				}
				break;
			}
			this.state = 1532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.MATCH) {
				{
				this.state = 1530;
				this.match(MySqlParser.MATCH);
				this.state = 1531;
				_localctx._matchType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULL || _la === MySqlParser.PARTIAL || _la === MySqlParser.SIMPLE)) {
					_localctx._matchType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1535;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 1534;
				this.referenceAction();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceAction(): ReferenceActionContext {
		let _localctx: ReferenceActionContext = new ReferenceActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, MySqlParser.RULE_referenceAction);
		try {
			this.state = 1553;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1537;
				this.match(MySqlParser.ON);
				this.state = 1538;
				this.match(MySqlParser.DELETE);
				this.state = 1539;
				_localctx._onDelete = this.referenceControlType();
				this.state = 1543;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
				case 1:
					{
					this.state = 1540;
					this.match(MySqlParser.ON);
					this.state = 1541;
					this.match(MySqlParser.UPDATE);
					this.state = 1542;
					_localctx._onUpdate = this.referenceControlType();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1545;
				this.match(MySqlParser.ON);
				this.state = 1546;
				this.match(MySqlParser.UPDATE);
				this.state = 1547;
				_localctx._onUpdate = this.referenceControlType();
				this.state = 1551;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 158, this._ctx) ) {
				case 1:
					{
					this.state = 1548;
					this.match(MySqlParser.ON);
					this.state = 1549;
					this.match(MySqlParser.DELETE);
					this.state = 1550;
					_localctx._onDelete = this.referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceControlType(): ReferenceControlTypeContext {
		let _localctx: ReferenceControlTypeContext = new ReferenceControlTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, MySqlParser.RULE_referenceControlType);
		try {
			this.state = 1561;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.RESTRICT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1555;
				this.match(MySqlParser.RESTRICT);
				}
				break;
			case MySqlParser.CASCADE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1556;
				this.match(MySqlParser.CASCADE);
				}
				break;
			case MySqlParser.SET:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1557;
				this.match(MySqlParser.SET);
				this.state = 1558;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;
			case MySqlParser.NO:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1559;
				this.match(MySqlParser.NO);
				this.state = 1560;
				this.match(MySqlParser.ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		let _localctx: IndexColumnDefinitionContext = new IndexColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, MySqlParser.RULE_indexColumnDefinition);
		let _la: number;
		try {
			this.state = 1591;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.INDEX:
			case MySqlParser.KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1563;
				(_localctx as SimpleIndexDeclarationContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
					(_localctx as SimpleIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 1564;
					this.uid();
					}
				}

				this.state = 1568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 1567;
					this.indexType();
					}
				}

				this.state = 1570;
				this.indexColumnNames();
				this.state = 1574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 1571;
					this.indexOption();
					}
					}
					this.state = 1576;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MySqlParser.FULLTEXT:
			case MySqlParser.SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1577;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 1578;
					(_localctx as SpecialIndexDeclarationContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as SpecialIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 1581;
					this.uid();
					}
				}

				this.state = 1584;
				this.indexColumnNames();
				this.state = 1588;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 1585;
					this.indexOption();
					}
					}
					this.state = 1590;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableOption(): TableOptionContext {
		let _localctx: TableOptionContext = new TableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, MySqlParser.RULE_tableOption);
		let _la: number;
		try {
			this.state = 1737;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 197, this._ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1593;
				this.match(MySqlParser.ENGINE);
				this.state = 1595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1594;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1597;
				this.engineName();
				}
				break;

			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1598;
				this.match(MySqlParser.AUTO_INCREMENT);
				this.state = 1600;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1599;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1602;
				this.decimalLiteral();
				}
				break;

			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1603;
				this.match(MySqlParser.AVG_ROW_LENGTH);
				this.state = 1605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1604;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1607;
				this.decimalLiteral();
				}
				break;

			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1609;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1608;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1614;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CHARACTER:
					{
					this.state = 1611;
					this.match(MySqlParser.CHARACTER);
					this.state = 1612;
					this.match(MySqlParser.SET);
					}
					break;
				case MySqlParser.CHARSET:
					{
					this.state = 1613;
					this.match(MySqlParser.CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1616;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1621;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.BINARY:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
					{
					this.state = 1619;
					this.charsetName();
					}
					break;
				case MySqlParser.DEFAULT:
					{
					this.state = 1620;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1623;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CHECKSUM || _la === MySqlParser.PAGE_CHECKSUM)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1624;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1627;
				(_localctx as TableOptionChecksumContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionChecksumContext)._boolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 1628;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1631;
				this.match(MySqlParser.COLLATE);
				this.state = 1633;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1632;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1635;
				this.collationName();
				}
				break;

			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1636;
				this.match(MySqlParser.COMMENT);
				this.state = 1638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1637;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1640;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1641;
				this.match(MySqlParser.COMPRESSION);
				this.state = 1643;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1642;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1645;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.STRING_LITERAL || _la === MySqlParser.ID)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1646;
				this.match(MySqlParser.CONNECTION);
				this.state = 1648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1647;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1650;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1651;
				this.match(MySqlParser.DATA);
				this.state = 1652;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1653;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1656;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1657;
				this.match(MySqlParser.DELAY_KEY_WRITE);
				this.state = 1659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1658;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1661;
				(_localctx as TableOptionDelayContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionDelayContext)._boolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1662;
				this.match(MySqlParser.ENCRYPTION);
				this.state = 1664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1663;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1666;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1667;
				this.match(MySqlParser.INDEX);
				this.state = 1668;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1669;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1672;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1673;
				this.match(MySqlParser.INSERT_METHOD);
				this.state = 1675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1674;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1677;
				(_localctx as TableOptionInsertMethodContext)._insertMethod = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FIRST || _la === MySqlParser.LAST || _la === MySqlParser.NO)) {
					(_localctx as TableOptionInsertMethodContext)._insertMethod = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1678;
				this.match(MySqlParser.KEY_BLOCK_SIZE);
				this.state = 1680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1679;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1682;
				this.fileSizeLiteral();
				}
				break;

			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1683;
				this.match(MySqlParser.MAX_ROWS);
				this.state = 1685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1684;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1687;
				this.decimalLiteral();
				}
				break;

			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1688;
				this.match(MySqlParser.MIN_ROWS);
				this.state = 1690;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1689;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1692;
				this.decimalLiteral();
				}
				break;

			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1693;
				this.match(MySqlParser.PACK_KEYS);
				this.state = 1695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1694;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1697;
				(_localctx as TableOptionPackKeysContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionPackKeysContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1698;
				this.match(MySqlParser.PASSWORD);
				this.state = 1700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1699;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1702;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1703;
				this.match(MySqlParser.ROW_FORMAT);
				this.state = 1705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1704;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1707;
				(_localctx as TableOptionRowFormatContext)._rowFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (MySqlParser.COMPACT - 290)) | (1 << (MySqlParser.COMPRESSED - 290)) | (1 << (MySqlParser.DYNAMIC - 290)))) !== 0) || _la === MySqlParser.FIXED || _la === MySqlParser.REDUNDANT)) {
					(_localctx as TableOptionRowFormatContext)._rowFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1708;
				this.match(MySqlParser.STATS_AUTO_RECALC);
				this.state = 1710;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1709;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1712;
				(_localctx as TableOptionRecalculationContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionRecalculationContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1713;
				this.match(MySqlParser.STATS_PERSISTENT);
				this.state = 1715;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1714;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1717;
				(_localctx as TableOptionPersistentContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as TableOptionPersistentContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1718;
				this.match(MySqlParser.STATS_SAMPLE_PAGES);
				this.state = 1720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1719;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1722;
				this.decimalLiteral();
				}
				break;

			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1723;
				this.match(MySqlParser.TABLESPACE);
				this.state = 1724;
				this.uid();
				this.state = 1726;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
				case 1:
					{
					this.state = 1725;
					this.tablespaceStorage();
					}
					break;
				}
				}
				break;

			case 25:
				_localctx = new TableOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1728;
				this.tablespaceStorage();
				}
				break;

			case 26:
				_localctx = new TableOptionUnionContext(_localctx);
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1729;
				this.match(MySqlParser.UNION);
				this.state = 1731;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 1730;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1733;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1734;
				this.tables();
				this.state = 1735;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablespaceStorage(): TablespaceStorageContext {
		let _localctx: TablespaceStorageContext = new TablespaceStorageContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, MySqlParser.RULE_tablespaceStorage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1739;
			this.match(MySqlParser.STORAGE);
			this.state = 1740;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.DISK || _la === MySqlParser.MEMORY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinitions(): PartitionDefinitionsContext {
		let _localctx: PartitionDefinitionsContext = new PartitionDefinitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, MySqlParser.RULE_partitionDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1742;
			this.match(MySqlParser.PARTITION);
			this.state = 1743;
			this.match(MySqlParser.BY);
			this.state = 1744;
			this.partitionFunctionDefinition();
			this.state = 1747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITIONS) {
				{
				this.state = 1745;
				this.match(MySqlParser.PARTITIONS);
				this.state = 1746;
				_localctx._count = this.decimalLiteral();
				}
			}

			this.state = 1756;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.SUBPARTITION) {
				{
				this.state = 1749;
				this.match(MySqlParser.SUBPARTITION);
				this.state = 1750;
				this.match(MySqlParser.BY);
				this.state = 1751;
				this.subpartitionFunctionDefinition();
				this.state = 1754;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITIONS) {
					{
					this.state = 1752;
					this.match(MySqlParser.SUBPARTITIONS);
					this.state = 1753;
					_localctx._subCount = this.decimalLiteral();
					}
				}

				}
			}

			this.state = 1769;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 202, this._ctx) ) {
			case 1:
				{
				this.state = 1758;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1759;
				this.partitionDefinition();
				this.state = 1764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1760;
					this.match(MySqlParser.COMMA);
					this.state = 1761;
					this.partitionDefinition();
					}
					}
					this.state = 1766;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1767;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		let _localctx: PartitionFunctionDefinitionContext = new PartitionFunctionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, MySqlParser.RULE_partitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 1816;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 208, this._ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1771;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1774;
				this.match(MySqlParser.HASH);
				this.state = 1775;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1776;
				this.expression(0);
				this.state = 1777;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1779;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1782;
				this.match(MySqlParser.KEY);
				this.state = 1786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALGORITHM) {
					{
					this.state = 1783;
					this.match(MySqlParser.ALGORITHM);
					this.state = 1784;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 1785;
					(_localctx as PartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.ONE_DECIMAL || _la === MySqlParser.TWO_DECIMAL)) {
						(_localctx as PartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1788;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1789;
				this.uidList();
				this.state = 1790;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1792;
				this.match(MySqlParser.RANGE);
				this.state = 1802;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.LR_BRACKET:
					{
					this.state = 1793;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1794;
					this.expression(0);
					this.state = 1795;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				case MySqlParser.COLUMNS:
					{
					this.state = 1797;
					this.match(MySqlParser.COLUMNS);
					this.state = 1798;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1799;
					this.uidList();
					this.state = 1800;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1804;
				this.match(MySqlParser.LIST);
				this.state = 1814;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.LR_BRACKET:
					{
					this.state = 1805;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1806;
					this.expression(0);
					this.state = 1807;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				case MySqlParser.COLUMNS:
					{
					this.state = 1809;
					this.match(MySqlParser.COLUMNS);
					this.state = 1810;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1811;
					this.uidList();
					this.state = 1812;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext {
		let _localctx: SubpartitionFunctionDefinitionContext = new SubpartitionFunctionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, MySqlParser.RULE_subpartitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 1839;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 212, this._ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1819;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1818;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1821;
				this.match(MySqlParser.HASH);
				this.state = 1822;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1823;
				this.expression(0);
				this.state = 1824;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINEAR) {
					{
					this.state = 1826;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 1829;
				this.match(MySqlParser.KEY);
				this.state = 1833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALGORITHM) {
					{
					this.state = 1830;
					this.match(MySqlParser.ALGORITHM);
					this.state = 1831;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 1832;
					(_localctx as SubPartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.ONE_DECIMAL || _la === MySqlParser.TWO_DECIMAL)) {
						(_localctx as SubPartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1835;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1836;
				this.uidList();
				this.state = 1837;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinition(): PartitionDefinitionContext {
		let _localctx: PartitionDefinitionContext = new PartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, MySqlParser.RULE_partitionDefinition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1972;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1841;
				this.match(MySqlParser.PARTITION);
				this.state = 1842;
				this.uid();
				this.state = 1843;
				this.match(MySqlParser.VALUES);
				this.state = 1844;
				this.match(MySqlParser.LESS);
				this.state = 1845;
				this.match(MySqlParser.THAN);
				this.state = 1846;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1847;
				this.partitionDefinerAtom();
				this.state = 1852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1848;
					this.match(MySqlParser.COMMA);
					this.state = 1849;
					this.partitionDefinerAtom();
					}
					}
					this.state = 1854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1855;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (MySqlParser.MAX_ROWS - 410)) | (1 << (MySqlParser.MIN_ROWS - 410)) | (1 << (MySqlParser.NODEGROUP - 410)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1856;
					this.partitionOption();
					}
					}
					this.state = 1861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1870;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1862;
					this.subpartitionDefinition();
					this.state = 1867;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1863;
							this.match(MySqlParser.COMMA);
							this.state = 1864;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1869;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
					}
					}
				}

				}
				break;

			case 2:
				_localctx = new PartitionComparisionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1872;
				this.match(MySqlParser.PARTITION);
				this.state = 1873;
				this.uid();
				this.state = 1874;
				this.match(MySqlParser.VALUES);
				this.state = 1875;
				this.match(MySqlParser.LESS);
				this.state = 1876;
				this.match(MySqlParser.THAN);
				this.state = 1877;
				this.partitionDefinerAtom();
				this.state = 1881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (MySqlParser.MAX_ROWS - 410)) | (1 << (MySqlParser.MIN_ROWS - 410)) | (1 << (MySqlParser.NODEGROUP - 410)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1878;
					this.partitionOption();
					}
					}
					this.state = 1883;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1892;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1884;
					this.subpartitionDefinition();
					this.state = 1889;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1885;
							this.match(MySqlParser.COMMA);
							this.state = 1886;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1891;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 218, this._ctx);
					}
					}
				}

				}
				break;

			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1894;
				this.match(MySqlParser.PARTITION);
				this.state = 1895;
				this.uid();
				this.state = 1896;
				this.match(MySqlParser.VALUES);
				this.state = 1897;
				this.match(MySqlParser.IN);
				this.state = 1898;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1899;
				this.partitionDefinerAtom();
				this.state = 1904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1900;
					this.match(MySqlParser.COMMA);
					this.state = 1901;
					this.partitionDefinerAtom();
					}
					}
					this.state = 1906;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1907;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (MySqlParser.MAX_ROWS - 410)) | (1 << (MySqlParser.MIN_ROWS - 410)) | (1 << (MySqlParser.NODEGROUP - 410)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1908;
					this.partitionOption();
					}
					}
					this.state = 1913;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1914;
					this.subpartitionDefinition();
					this.state = 1919;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1915;
							this.match(MySqlParser.COMMA);
							this.state = 1916;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1921;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 222, this._ctx);
					}
					}
				}

				}
				break;

			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1924;
				this.match(MySqlParser.PARTITION);
				this.state = 1925;
				this.uid();
				this.state = 1926;
				this.match(MySqlParser.VALUES);
				this.state = 1927;
				this.match(MySqlParser.IN);
				this.state = 1928;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1929;
				this.partitionDefinerVector();
				this.state = 1934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 1930;
					this.match(MySqlParser.COMMA);
					this.state = 1931;
					this.partitionDefinerVector();
					}
					}
					this.state = 1936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1937;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (MySqlParser.MAX_ROWS - 410)) | (1 << (MySqlParser.MIN_ROWS - 410)) | (1 << (MySqlParser.NODEGROUP - 410)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1938;
					this.partitionOption();
					}
					}
					this.state = 1943;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1952;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1944;
					this.subpartitionDefinition();
					this.state = 1949;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1945;
							this.match(MySqlParser.COMMA);
							this.state = 1946;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1951;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
					}
					}
				}

				}
				break;

			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1954;
				this.match(MySqlParser.PARTITION);
				this.state = 1955;
				this.uid();
				this.state = 1959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (MySqlParser.MAX_ROWS - 410)) | (1 << (MySqlParser.MIN_ROWS - 410)) | (1 << (MySqlParser.NODEGROUP - 410)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
					{
					{
					this.state = 1956;
					this.partitionOption();
					}
					}
					this.state = 1961;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1970;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SUBPARTITION) {
					{
					this.state = 1962;
					this.subpartitionDefinition();
					this.state = 1967;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1963;
							this.match(MySqlParser.COMMA);
							this.state = 1964;
							this.subpartitionDefinition();
							}
							}
						}
						this.state = 1969;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
					}
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerAtom(): PartitionDefinerAtomContext {
		let _localctx: PartitionDefinerAtomContext = new PartitionDefinerAtomContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, MySqlParser.RULE_partitionDefinerAtom);
		try {
			this.state = 1977;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1974;
				this.constant();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1975;
				this.expression(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1976;
				this.match(MySqlParser.MAXVALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerVector(): PartitionDefinerVectorContext {
		let _localctx: PartitionDefinerVectorContext = new PartitionDefinerVectorContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, MySqlParser.RULE_partitionDefinerVector);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1979;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1980;
			this.partitionDefinerAtom();
			this.state = 1983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1981;
				this.match(MySqlParser.COMMA);
				this.state = 1982;
				this.partitionDefinerAtom();
				}
				}
				this.state = 1985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MySqlParser.COMMA);
			this.state = 1987;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subpartitionDefinition(): SubpartitionDefinitionContext {
		let _localctx: SubpartitionDefinitionContext = new SubpartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, MySqlParser.RULE_subpartitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1989;
			this.match(MySqlParser.SUBPARTITION);
			this.state = 1990;
			this.uid();
			this.state = 1994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.INDEX || _la === MySqlParser.COMMENT || _la === MySqlParser.DATA || _la === MySqlParser.ENGINE || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (MySqlParser.MAX_ROWS - 410)) | (1 << (MySqlParser.MIN_ROWS - 410)) | (1 << (MySqlParser.NODEGROUP - 410)))) !== 0) || _la === MySqlParser.STORAGE || _la === MySqlParser.TABLESPACE) {
				{
				{
				this.state = 1991;
				this.partitionOption();
				}
				}
				this.state = 1996;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionOption(): PartitionOptionContext {
		let _localctx: PartitionOptionContext = new PartitionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, MySqlParser.RULE_partitionOption);
		let _la: number;
		try {
			this.state = 2042;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ENGINE:
			case MySqlParser.STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.STORAGE) {
					{
					this.state = 1997;
					this.match(MySqlParser.STORAGE);
					}
				}

				this.state = 2000;
				this.match(MySqlParser.ENGINE);
				this.state = 2002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2001;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2004;
				this.engineName();
				}
				break;
			case MySqlParser.COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2005;
				this.match(MySqlParser.COMMENT);
				this.state = 2007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2006;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2009;
				(_localctx as PartitionOptionCommentContext)._comment = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2010;
				this.match(MySqlParser.DATA);
				this.state = 2011;
				this.match(MySqlParser.DIRECTORY);
				this.state = 2013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2012;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2015;
				(_localctx as PartitionOptionDataDirectoryContext)._dataDirectory = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2016;
				this.match(MySqlParser.INDEX);
				this.state = 2017;
				this.match(MySqlParser.DIRECTORY);
				this.state = 2019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2018;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2021;
				(_localctx as PartitionOptionIndexDirectoryContext)._indexDirectory = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2022;
				this.match(MySqlParser.MAX_ROWS);
				this.state = 2024;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2023;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2026;
				(_localctx as PartitionOptionMaxRowsContext)._maxRows = this.decimalLiteral();
				}
				break;
			case MySqlParser.MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2027;
				this.match(MySqlParser.MIN_ROWS);
				this.state = 2029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2028;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2031;
				(_localctx as PartitionOptionMinRowsContext)._minRows = this.decimalLiteral();
				}
				break;
			case MySqlParser.TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2032;
				this.match(MySqlParser.TABLESPACE);
				this.state = 2034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2033;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2036;
				(_localctx as PartitionOptionTablespaceContext)._tablespace = this.uid();
				}
				break;
			case MySqlParser.NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2037;
				this.match(MySqlParser.NODEGROUP);
				this.state = 2039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2038;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2041;
				(_localctx as PartitionOptionNodeGroupContext)._nodegroup = this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabase(): AlterDatabaseContext {
		let _localctx: AlterDatabaseContext = new AlterDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, MySqlParser.RULE_alterDatabase);
		let _la: number;
		try {
			this.state = 2062;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 247, this._ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2044;
				this.match(MySqlParser.ALTER);
				this.state = 2045;
				(_localctx as AlterSimpleDatabaseContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
					(_localctx as AlterSimpleDatabaseContext)._dbFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2047;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 245, this._ctx) ) {
				case 1:
					{
					this.state = 2046;
					this.uid();
					}
					break;
				}
				this.state = 2050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2049;
					this.createDatabaseOption();
					}
					}
					this.state = 2052;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 22)) & ~0x1F) === 0 && ((1 << (_la - 22)) & ((1 << (MySqlParser.CHARACTER - 22)) | (1 << (MySqlParser.COLLATE - 22)) | (1 << (MySqlParser.DEFAULT - 22)))) !== 0) || _la === MySqlParser.CHARSET);
				}
				break;

			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2054;
				this.match(MySqlParser.ALTER);
				this.state = 2055;
				(_localctx as AlterUpgradeNameContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
					(_localctx as AlterUpgradeNameContext)._dbFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2056;
				this.uid();
				this.state = 2057;
				this.match(MySqlParser.UPGRADE);
				this.state = 2058;
				this.match(MySqlParser.DATA);
				this.state = 2059;
				this.match(MySqlParser.DIRECTORY);
				this.state = 2060;
				this.match(MySqlParser.NAME);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterEvent(): AlterEventContext {
		let _localctx: AlterEventContext = new AlterEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, MySqlParser.RULE_alterEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2064;
			this.match(MySqlParser.ALTER);
			this.state = 2066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 2065;
				this.ownerStatement();
				}
			}

			this.state = 2068;
			this.match(MySqlParser.EVENT);
			this.state = 2069;
			this.fullId();
			this.state = 2073;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 249, this._ctx) ) {
			case 1:
				{
				this.state = 2070;
				this.match(MySqlParser.ON);
				this.state = 2071;
				this.match(MySqlParser.SCHEDULE);
				this.state = 2072;
				this.scheduleExpression();
				}
				break;
			}
			this.state = 2081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ON) {
				{
				this.state = 2075;
				this.match(MySqlParser.ON);
				this.state = 2076;
				this.match(MySqlParser.COMPLETION);
				this.state = 2078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 2077;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 2080;
				this.match(MySqlParser.PRESERVE);
				}
			}

			this.state = 2086;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 252, this._ctx) ) {
			case 1:
				{
				this.state = 2083;
				this.match(MySqlParser.RENAME);
				this.state = 2084;
				this.match(MySqlParser.TO);
				this.state = 2085;
				this.fullId();
				}
				break;
			}
			this.state = 2089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DISABLE || _la === MySqlParser.ENABLE) {
				{
				this.state = 2088;
				this.enableType();
				}
			}

			this.state = 2093;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMENT) {
				{
				this.state = 2091;
				this.match(MySqlParser.COMMENT);
				this.state = 2092;
				this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 2097;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
			case 1:
				{
				this.state = 2095;
				this.match(MySqlParser.DO);
				this.state = 2096;
				this.routineBody();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterFunction(): AlterFunctionContext {
		let _localctx: AlterFunctionContext = new AlterFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, MySqlParser.RULE_alterFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2099;
			this.match(MySqlParser.ALTER);
			this.state = 2100;
			this.match(MySqlParser.FUNCTION);
			this.state = 2101;
			this.fullId();
			this.state = 2105;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.DETERMINISTIC || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (MySqlParser.MODIFIES - 97)) | (1 << (MySqlParser.NOT - 97)) | (1 << (MySqlParser.READS - 97)))) !== 0) || _la === MySqlParser.SQL || _la === MySqlParser.COMMENT || _la === MySqlParser.CONTAINS || _la === MySqlParser.LANGUAGE || _la === MySqlParser.NO) {
				{
				{
				this.state = 2102;
				this.routineOption();
				}
				}
				this.state = 2107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterInstance(): AlterInstanceContext {
		let _localctx: AlterInstanceContext = new AlterInstanceContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, MySqlParser.RULE_alterInstance);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2108;
			this.match(MySqlParser.ALTER);
			this.state = 2109;
			this.match(MySqlParser.INSTANCE);
			this.state = 2110;
			this.match(MySqlParser.ROTATE);
			this.state = 2111;
			this.match(MySqlParser.INNODB);
			this.state = 2112;
			this.match(MySqlParser.MASTER);
			this.state = 2113;
			this.match(MySqlParser.KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroup(): AlterLogfileGroupContext {
		let _localctx: AlterLogfileGroupContext = new AlterLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, MySqlParser.RULE_alterLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2115;
			this.match(MySqlParser.ALTER);
			this.state = 2116;
			this.match(MySqlParser.LOGFILE);
			this.state = 2117;
			this.match(MySqlParser.GROUP);
			this.state = 2118;
			this.uid();
			this.state = 2119;
			this.match(MySqlParser.ADD);
			this.state = 2120;
			this.match(MySqlParser.UNDOFILE);
			this.state = 2121;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 2127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 2122;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 2124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2123;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2126;
				this.fileSizeLiteral();
				}
			}

			this.state = 2130;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 2129;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 2132;
			this.match(MySqlParser.ENGINE);
			this.state = 2134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 2133;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2136;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterProcedure(): AlterProcedureContext {
		let _localctx: AlterProcedureContext = new AlterProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, MySqlParser.RULE_alterProcedure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2138;
			this.match(MySqlParser.ALTER);
			this.state = 2139;
			this.match(MySqlParser.PROCEDURE);
			this.state = 2140;
			this.fullId();
			this.state = 2144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.DETERMINISTIC || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (MySqlParser.MODIFIES - 97)) | (1 << (MySqlParser.NOT - 97)) | (1 << (MySqlParser.READS - 97)))) !== 0) || _la === MySqlParser.SQL || _la === MySqlParser.COMMENT || _la === MySqlParser.CONTAINS || _la === MySqlParser.LANGUAGE || _la === MySqlParser.NO) {
				{
				{
				this.state = 2141;
				this.routineOption();
				}
				}
				this.state = 2146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterServer(): AlterServerContext {
		let _localctx: AlterServerContext = new AlterServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, MySqlParser.RULE_alterServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2147;
			this.match(MySqlParser.ALTER);
			this.state = 2148;
			this.match(MySqlParser.SERVER);
			this.state = 2149;
			this.uid();
			this.state = 2150;
			this.match(MySqlParser.OPTIONS);
			this.state = 2151;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 2152;
			this.serverOption();
			this.state = 2157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 2153;
				this.match(MySqlParser.COMMA);
				this.state = 2154;
				this.serverOption();
				}
				}
				this.state = 2159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2160;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTable(): AlterTableContext {
		let _localctx: AlterTableContext = new AlterTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, MySqlParser.RULE_alterTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2162;
			this.match(MySqlParser.ALTER);
			this.state = 2164;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE) {
				{
				this.state = 2163;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2166;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 2169;
			this.match(MySqlParser.TABLE);
			this.state = 2170;
			this.tableName();
			this.state = 2179;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 266, this._ctx) ) {
			case 1:
				{
				this.state = 2171;
				this.alterSpecification();
				this.state = 2176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2172;
					this.match(MySqlParser.COMMA);
					this.state = 2173;
					this.alterSpecification();
					}
					}
					this.state = 2178;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 2182;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2181;
				this.partitionDefinitions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTablespace(): AlterTablespaceContext {
		let _localctx: AlterTablespaceContext = new AlterTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, MySqlParser.RULE_alterTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2184;
			this.match(MySqlParser.ALTER);
			this.state = 2185;
			this.match(MySqlParser.TABLESPACE);
			this.state = 2186;
			this.uid();
			this.state = 2187;
			_localctx._objectAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.ADD || _la === MySqlParser.DROP)) {
				_localctx._objectAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2188;
			this.match(MySqlParser.DATAFILE);
			this.state = 2189;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 2193;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INITIAL_SIZE) {
				{
				this.state = 2190;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 2191;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2192;
				this.fileSizeLiteral();
				}
			}

			this.state = 2196;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WAIT) {
				{
				this.state = 2195;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 2198;
			this.match(MySqlParser.ENGINE);
			this.state = 2200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EQUAL_SYMBOL) {
				{
				this.state = 2199;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2202;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterView(): AlterViewContext {
		let _localctx: AlterViewContext = new AlterViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, MySqlParser.RULE_alterView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2204;
			this.match(MySqlParser.ALTER);
			this.state = 2208;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALGORITHM) {
				{
				this.state = 2205;
				this.match(MySqlParser.ALGORITHM);
				this.state = 2206;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2207;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.MERGE || _la === MySqlParser.TEMPTABLE || _la === MySqlParser.UNDEFINED)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2211;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFINER) {
				{
				this.state = 2210;
				this.ownerStatement();
				}
			}

			this.state = 2216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.SQL) {
				{
				this.state = 2213;
				this.match(MySqlParser.SQL);
				this.state = 2214;
				this.match(MySqlParser.SECURITY);
				this.state = 2215;
				_localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFINER || _la === MySqlParser.INVOKER)) {
					_localctx._secContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2218;
			this.match(MySqlParser.VIEW);
			this.state = 2219;
			this.fullId();
			this.state = 2224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 2220;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2221;
				this.uidList();
				this.state = 2222;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2226;
			this.match(MySqlParser.AS);
			this.state = 2227;
			this.selectStatement();
			this.state = 2234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 2228;
				this.match(MySqlParser.WITH);
				this.state = 2230;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL) {
					{
					this.state = 2229;
					_localctx._checkOpt = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CASCADED || _la === MySqlParser.LOCAL)) {
						_localctx._checkOpt = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2232;
				this.match(MySqlParser.CHECK);
				this.state = 2233;
				this.match(MySqlParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterSpecification(): AlterSpecificationContext {
		let _localctx: AlterSpecificationContext = new AlterSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, MySqlParser.RULE_alterSpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2591;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 330, this._ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2236;
				this.tableOption();
				this.state = 2243;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2238;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.COMMA) {
							{
							this.state = 2237;
							this.match(MySqlParser.COMMA);
							}
						}

						this.state = 2240;
						this.tableOption();
						}
						}
					}
					this.state = 2245;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2246;
				this.match(MySqlParser.ADD);
				this.state = 2248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2247;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2250;
				this.uid();
				this.state = 2251;
				this.columnDefinition();
				this.state = 2255;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.FIRST:
					{
					this.state = 2252;
					this.match(MySqlParser.FIRST);
					}
					break;
				case MySqlParser.AFTER:
					{
					this.state = 2253;
					this.match(MySqlParser.AFTER);
					this.state = 2254;
					this.uid();
					}
					break;
				case MySqlParser.EOF:
				case MySqlParser.ALTER:
				case MySqlParser.ANALYZE:
				case MySqlParser.CALL:
				case MySqlParser.CHANGE:
				case MySqlParser.CHECK:
				case MySqlParser.CREATE:
				case MySqlParser.DELETE:
				case MySqlParser.DESC:
				case MySqlParser.DESCRIBE:
				case MySqlParser.DROP:
				case MySqlParser.EXPLAIN:
				case MySqlParser.GRANT:
				case MySqlParser.INSERT:
				case MySqlParser.KILL:
				case MySqlParser.LOAD:
				case MySqlParser.LOCK:
				case MySqlParser.OPTIMIZE:
				case MySqlParser.PARTITION:
				case MySqlParser.PURGE:
				case MySqlParser.RELEASE:
				case MySqlParser.RENAME:
				case MySqlParser.REPLACE:
				case MySqlParser.REVOKE:
				case MySqlParser.SELECT:
				case MySqlParser.SET:
				case MySqlParser.SHOW:
				case MySqlParser.SIGNAL:
				case MySqlParser.UNLOCK:
				case MySqlParser.UPDATE:
				case MySqlParser.USE:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.CACHE:
				case MySqlParser.CHECKSUM:
				case MySqlParser.COMMIT:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DO:
				case MySqlParser.FLUSH:
				case MySqlParser.HANDLER:
				case MySqlParser.HELP:
				case MySqlParser.INSTALL:
				case MySqlParser.PREPARE:
				case MySqlParser.REPAIR:
				case MySqlParser.RESET:
				case MySqlParser.ROLLBACK:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.START:
				case MySqlParser.STOP:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.XA:
				case MySqlParser.EXECUTE:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.MINUSMINUS:
				case MySqlParser.LR_BRACKET:
				case MySqlParser.COMMA:
				case MySqlParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;

			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2257;
				this.match(MySqlParser.ADD);
				this.state = 2259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2258;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2261;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2262;
				this.uid();
				this.state = 2263;
				this.columnDefinition();
				this.state = 2270;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2264;
					this.match(MySqlParser.COMMA);
					this.state = 2265;
					this.uid();
					this.state = 2266;
					this.columnDefinition();
					}
					}
					this.state = 2272;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2273;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2275;
				this.match(MySqlParser.ADD);
				this.state = 2276;
				(_localctx as AlterByAddIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
					(_localctx as AlterByAddIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2278;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 2277;
					this.uid();
					}
				}

				this.state = 2281;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 2280;
					this.indexType();
					}
				}

				this.state = 2283;
				this.indexColumnNames();
				this.state = 2287;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 2284;
					this.indexOption();
					}
					}
					this.state = 2289;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2290;
				this.match(MySqlParser.ADD);
				this.state = 2295;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2291;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2293;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 2292;
						(_localctx as AlterByAddPrimaryKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2297;
				this.match(MySqlParser.PRIMARY);
				this.state = 2298;
				this.match(MySqlParser.KEY);
				this.state = 2300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 2299;
					this.indexType();
					}
				}

				this.state = 2302;
				this.indexColumnNames();
				this.state = 2306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 2303;
					this.indexOption();
					}
					}
					this.state = 2308;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2309;
				this.match(MySqlParser.ADD);
				this.state = 2314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2310;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2312;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 2311;
						(_localctx as AlterByAddUniqueKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2316;
				this.match(MySqlParser.UNIQUE);
				this.state = 2318;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 2317;
					(_localctx as AlterByAddUniqueKeyContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as AlterByAddUniqueKeyContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 2320;
					(_localctx as AlterByAddUniqueKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 2323;
					this.indexType();
					}
				}

				this.state = 2326;
				this.indexColumnNames();
				this.state = 2330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 2327;
					this.indexOption();
					}
					}
					this.state = 2332;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2333;
				this.match(MySqlParser.ADD);
				this.state = 2334;
				(_localctx as AlterByAddSpecialIndexContext)._keyType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FULLTEXT || _la === MySqlParser.SPATIAL)) {
					(_localctx as AlterByAddSpecialIndexContext)._keyType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 2335;
					(_localctx as AlterByAddSpecialIndexContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						(_localctx as AlterByAddSpecialIndexContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2339;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 2338;
					this.uid();
					}
				}

				this.state = 2341;
				this.indexColumnNames();
				this.state = 2345;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.USING || _la === MySqlParser.WITH || _la === MySqlParser.COMMENT || _la === MySqlParser.INVISIBLE || _la === MySqlParser.KEY_BLOCK_SIZE || _la === MySqlParser.VISIBLE) {
					{
					{
					this.state = 2342;
					this.indexOption();
					}
					}
					this.state = 2347;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2348;
				this.match(MySqlParser.ADD);
				this.state = 2353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2349;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2351;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 2350;
						(_localctx as AlterByAddForeignKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2355;
				this.match(MySqlParser.FOREIGN);
				this.state = 2356;
				this.match(MySqlParser.KEY);
				this.state = 2358;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 2357;
					(_localctx as AlterByAddForeignKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2360;
				this.indexColumnNames();
				this.state = 2361;
				this.referenceDefinition();
				}
				break;

			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2363;
				this.match(MySqlParser.ADD);
				this.state = 2368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CONSTRAINT) {
					{
					this.state = 2364;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2366;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
						{
						this.state = 2365;
						(_localctx as AlterByAddCheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2370;
				this.match(MySqlParser.CHECK);
				this.state = 2371;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2372;
				this.expression(0);
				this.state = 2373;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2375;
				this.match(MySqlParser.ALGORITHM);
				this.state = 2377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2376;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2379;
				(_localctx as AlterBySetAlgorithmContext)._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.COPY || _la === MySqlParser.INPLACE)) {
					(_localctx as AlterBySetAlgorithmContext)._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2380;
				this.match(MySqlParser.ALTER);
				this.state = 2382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2381;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2384;
				this.uid();
				this.state = 2390;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.SET:
					{
					this.state = 2385;
					this.match(MySqlParser.SET);
					this.state = 2386;
					this.match(MySqlParser.DEFAULT);
					this.state = 2387;
					this.defaultValue();
					}
					break;
				case MySqlParser.DROP:
					{
					this.state = 2388;
					this.match(MySqlParser.DROP);
					this.state = 2389;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2392;
				this.match(MySqlParser.CHANGE);
				this.state = 2394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2393;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2396;
				(_localctx as AlterByChangeColumnContext)._oldColumn = this.uid();
				this.state = 2397;
				(_localctx as AlterByChangeColumnContext)._newColumn = this.uid();
				this.state = 2398;
				this.columnDefinition();
				this.state = 2402;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.FIRST:
					{
					this.state = 2399;
					this.match(MySqlParser.FIRST);
					}
					break;
				case MySqlParser.AFTER:
					{
					this.state = 2400;
					this.match(MySqlParser.AFTER);
					this.state = 2401;
					(_localctx as AlterByChangeColumnContext)._afterColumn = this.uid();
					}
					break;
				case MySqlParser.EOF:
				case MySqlParser.ALTER:
				case MySqlParser.ANALYZE:
				case MySqlParser.CALL:
				case MySqlParser.CHANGE:
				case MySqlParser.CHECK:
				case MySqlParser.CREATE:
				case MySqlParser.DELETE:
				case MySqlParser.DESC:
				case MySqlParser.DESCRIBE:
				case MySqlParser.DROP:
				case MySqlParser.EXPLAIN:
				case MySqlParser.GRANT:
				case MySqlParser.INSERT:
				case MySqlParser.KILL:
				case MySqlParser.LOAD:
				case MySqlParser.LOCK:
				case MySqlParser.OPTIMIZE:
				case MySqlParser.PARTITION:
				case MySqlParser.PURGE:
				case MySqlParser.RELEASE:
				case MySqlParser.RENAME:
				case MySqlParser.REPLACE:
				case MySqlParser.REVOKE:
				case MySqlParser.SELECT:
				case MySqlParser.SET:
				case MySqlParser.SHOW:
				case MySqlParser.SIGNAL:
				case MySqlParser.UNLOCK:
				case MySqlParser.UPDATE:
				case MySqlParser.USE:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.CACHE:
				case MySqlParser.CHECKSUM:
				case MySqlParser.COMMIT:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DO:
				case MySqlParser.FLUSH:
				case MySqlParser.HANDLER:
				case MySqlParser.HELP:
				case MySqlParser.INSTALL:
				case MySqlParser.PREPARE:
				case MySqlParser.REPAIR:
				case MySqlParser.RESET:
				case MySqlParser.ROLLBACK:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.START:
				case MySqlParser.STOP:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.XA:
				case MySqlParser.EXECUTE:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.MINUSMINUS:
				case MySqlParser.LR_BRACKET:
				case MySqlParser.COMMA:
				case MySqlParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;

			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2404;
				this.match(MySqlParser.RENAME);
				this.state = 2405;
				this.match(MySqlParser.COLUMN);
				this.state = 2406;
				(_localctx as AlterByRenameColumnContext)._oldColumn = this.uid();
				this.state = 2407;
				this.match(MySqlParser.TO);
				this.state = 2408;
				(_localctx as AlterByRenameColumnContext)._newColumn = this.uid();
				}
				break;

			case 14:
				_localctx = new AlterByLockContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2410;
				this.match(MySqlParser.LOCK);
				this.state = 2412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2411;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2414;
				(_localctx as AlterByLockContext)._lockType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.EXCLUSIVE || _la === MySqlParser.NONE || _la === MySqlParser.SHARED)) {
					(_localctx as AlterByLockContext)._lockType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2415;
				this.match(MySqlParser.MODIFY);
				this.state = 2417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2416;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2419;
				this.uid();
				this.state = 2420;
				this.columnDefinition();
				this.state = 2424;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.FIRST:
					{
					this.state = 2421;
					this.match(MySqlParser.FIRST);
					}
					break;
				case MySqlParser.AFTER:
					{
					this.state = 2422;
					this.match(MySqlParser.AFTER);
					this.state = 2423;
					this.uid();
					}
					break;
				case MySqlParser.EOF:
				case MySqlParser.ALTER:
				case MySqlParser.ANALYZE:
				case MySqlParser.CALL:
				case MySqlParser.CHANGE:
				case MySqlParser.CHECK:
				case MySqlParser.CREATE:
				case MySqlParser.DELETE:
				case MySqlParser.DESC:
				case MySqlParser.DESCRIBE:
				case MySqlParser.DROP:
				case MySqlParser.EXPLAIN:
				case MySqlParser.GRANT:
				case MySqlParser.INSERT:
				case MySqlParser.KILL:
				case MySqlParser.LOAD:
				case MySqlParser.LOCK:
				case MySqlParser.OPTIMIZE:
				case MySqlParser.PARTITION:
				case MySqlParser.PURGE:
				case MySqlParser.RELEASE:
				case MySqlParser.RENAME:
				case MySqlParser.REPLACE:
				case MySqlParser.REVOKE:
				case MySqlParser.SELECT:
				case MySqlParser.SET:
				case MySqlParser.SHOW:
				case MySqlParser.SIGNAL:
				case MySqlParser.UNLOCK:
				case MySqlParser.UPDATE:
				case MySqlParser.USE:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.CACHE:
				case MySqlParser.CHECKSUM:
				case MySqlParser.COMMIT:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DO:
				case MySqlParser.FLUSH:
				case MySqlParser.HANDLER:
				case MySqlParser.HELP:
				case MySqlParser.INSTALL:
				case MySqlParser.PREPARE:
				case MySqlParser.REPAIR:
				case MySqlParser.RESET:
				case MySqlParser.ROLLBACK:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.START:
				case MySqlParser.STOP:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.XA:
				case MySqlParser.EXECUTE:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.MINUSMINUS:
				case MySqlParser.LR_BRACKET:
				case MySqlParser.COMMA:
				case MySqlParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;

			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2426;
				this.match(MySqlParser.DROP);
				this.state = 2428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLUMN) {
					{
					this.state = 2427;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2430;
				this.uid();
				this.state = 2432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.RESTRICT) {
					{
					this.state = 2431;
					this.match(MySqlParser.RESTRICT);
					}
				}

				}
				break;

			case 17:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2434;
				this.match(MySqlParser.DROP);
				this.state = 2435;
				this.match(MySqlParser.PRIMARY);
				this.state = 2436;
				this.match(MySqlParser.KEY);
				}
				break;

			case 18:
				_localctx = new AlterByRenameIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2437;
				this.match(MySqlParser.RENAME);
				this.state = 2438;
				(_localctx as AlterByRenameIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
					(_localctx as AlterByRenameIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2439;
				this.uid();
				this.state = 2440;
				this.match(MySqlParser.TO);
				this.state = 2441;
				this.uid();
				}
				break;

			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2443;
				this.match(MySqlParser.DROP);
				this.state = 2444;
				(_localctx as AlterByDropIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
					(_localctx as AlterByDropIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2445;
				this.uid();
				}
				break;

			case 20:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2446;
				this.match(MySqlParser.DROP);
				this.state = 2447;
				this.match(MySqlParser.FOREIGN);
				this.state = 2448;
				this.match(MySqlParser.KEY);
				this.state = 2449;
				this.uid();
				}
				break;

			case 21:
				_localctx = new AlterByDisableKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2450;
				this.match(MySqlParser.DISABLE);
				this.state = 2451;
				this.match(MySqlParser.KEYS);
				}
				break;

			case 22:
				_localctx = new AlterByEnableKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 2452;
				this.match(MySqlParser.ENABLE);
				this.state = 2453;
				this.match(MySqlParser.KEYS);
				}
				break;

			case 23:
				_localctx = new AlterByRenameContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 2454;
				this.match(MySqlParser.RENAME);
				this.state = 2456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS || _la === MySqlParser.TO) {
					{
					this.state = 2455;
					(_localctx as AlterByRenameContext)._renameFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.AS || _la === MySqlParser.TO)) {
						(_localctx as AlterByRenameContext)._renameFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2460;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 315, this._ctx) ) {
				case 1:
					{
					this.state = 2458;
					this.uid();
					}
					break;

				case 2:
					{
					this.state = 2459;
					this.fullId();
					}
					break;
				}
				}
				break;

			case 24:
				_localctx = new AlterByOrderContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 2462;
				this.match(MySqlParser.ORDER);
				this.state = 2463;
				this.match(MySqlParser.BY);
				this.state = 2464;
				this.uidList();
				}
				break;

			case 25:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 2465;
				this.match(MySqlParser.CONVERT);
				this.state = 2466;
				this.match(MySqlParser.TO);
				this.state = 2467;
				this.match(MySqlParser.CHARACTER);
				this.state = 2468;
				this.match(MySqlParser.SET);
				this.state = 2469;
				this.charsetName();
				this.state = 2472;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLLATE) {
					{
					this.state = 2470;
					this.match(MySqlParser.COLLATE);
					this.state = 2471;
					this.collationName();
					}
				}

				}
				break;

			case 26:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 2475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DEFAULT) {
					{
					this.state = 2474;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 2477;
				this.match(MySqlParser.CHARACTER);
				this.state = 2478;
				this.match(MySqlParser.SET);
				this.state = 2479;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2480;
				this.charsetName();
				this.state = 2484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COLLATE) {
					{
					this.state = 2481;
					this.match(MySqlParser.COLLATE);
					this.state = 2482;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 2483;
					this.collationName();
					}
				}

				}
				break;

			case 27:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 2486;
				this.match(MySqlParser.DISCARD);
				this.state = 2487;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 28:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 2488;
				this.match(MySqlParser.IMPORT);
				this.state = 2489;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 29:
				_localctx = new AlterByForceContext(_localctx);
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 2490;
				this.match(MySqlParser.FORCE);
				}
				break;

			case 30:
				_localctx = new AlterByValidateContext(_localctx);
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 2491;
				(_localctx as AlterByValidateContext)._validationFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.WITH || _la === MySqlParser.WITHOUT)) {
					(_localctx as AlterByValidateContext)._validationFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2492;
				this.match(MySqlParser.VALIDATION);
				}
				break;

			case 31:
				_localctx = new AlterByAddPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 2493;
				this.match(MySqlParser.ADD);
				this.state = 2494;
				this.match(MySqlParser.PARTITION);
				this.state = 2495;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2496;
				this.partitionDefinition();
				this.state = 2501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2497;
					this.match(MySqlParser.COMMA);
					this.state = 2498;
					this.partitionDefinition();
					}
					}
					this.state = 2503;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2504;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 32:
				_localctx = new AlterByDropPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 2506;
				this.match(MySqlParser.DROP);
				this.state = 2507;
				this.match(MySqlParser.PARTITION);
				this.state = 2508;
				this.uidList();
				}
				break;

			case 33:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 2509;
				this.match(MySqlParser.DISCARD);
				this.state = 2510;
				this.match(MySqlParser.PARTITION);
				this.state = 2513;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2511;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2512;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2515;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 34:
				_localctx = new AlterByImportPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 2516;
				this.match(MySqlParser.IMPORT);
				this.state = 2517;
				this.match(MySqlParser.PARTITION);
				this.state = 2520;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2518;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2519;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2522;
				this.match(MySqlParser.TABLESPACE);
				}
				break;

			case 35:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 2523;
				this.match(MySqlParser.TRUNCATE);
				this.state = 2524;
				this.match(MySqlParser.PARTITION);
				this.state = 2527;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2525;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2526;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 36:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 2529;
				this.match(MySqlParser.COALESCE);
				this.state = 2530;
				this.match(MySqlParser.PARTITION);
				this.state = 2531;
				this.decimalLiteral();
				}
				break;

			case 37:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 2532;
				this.match(MySqlParser.REORGANIZE);
				this.state = 2533;
				this.match(MySqlParser.PARTITION);
				this.state = 2534;
				this.uidList();
				this.state = 2535;
				this.match(MySqlParser.INTO);
				this.state = 2536;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2537;
				this.partitionDefinition();
				this.state = 2542;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2538;
					this.match(MySqlParser.COMMA);
					this.state = 2539;
					this.partitionDefinition();
					}
					}
					this.state = 2544;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2545;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 38:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 2547;
				this.match(MySqlParser.EXCHANGE);
				this.state = 2548;
				this.match(MySqlParser.PARTITION);
				this.state = 2549;
				this.uid();
				this.state = 2550;
				this.match(MySqlParser.WITH);
				this.state = 2551;
				this.match(MySqlParser.TABLE);
				this.state = 2552;
				this.tableName();
				this.state = 2555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WITH || _la === MySqlParser.WITHOUT) {
					{
					this.state = 2553;
					(_localctx as AlterByExchangePartitionContext)._validationFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.WITH || _la === MySqlParser.WITHOUT)) {
						(_localctx as AlterByExchangePartitionContext)._validationFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2554;
					this.match(MySqlParser.VALIDATION);
					}
				}

				}
				break;

			case 39:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 2557;
				this.match(MySqlParser.ANALYZE);
				this.state = 2558;
				this.match(MySqlParser.PARTITION);
				this.state = 2561;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2559;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2560;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 40:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 2563;
				this.match(MySqlParser.CHECK);
				this.state = 2564;
				this.match(MySqlParser.PARTITION);
				this.state = 2567;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2565;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2566;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 41:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 2569;
				this.match(MySqlParser.OPTIMIZE);
				this.state = 2570;
				this.match(MySqlParser.PARTITION);
				this.state = 2573;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2571;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2572;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 42:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 2575;
				this.match(MySqlParser.REBUILD);
				this.state = 2576;
				this.match(MySqlParser.PARTITION);
				this.state = 2579;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2577;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2578;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 43:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 2581;
				this.match(MySqlParser.REPAIR);
				this.state = 2582;
				this.match(MySqlParser.PARTITION);
				this.state = 2585;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 2583;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 2584;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 44:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 2587;
				this.match(MySqlParser.REMOVE);
				this.state = 2588;
				this.match(MySqlParser.PARTITIONING);
				}
				break;

			case 45:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 2589;
				this.match(MySqlParser.UPGRADE);
				this.state = 2590;
				this.match(MySqlParser.PARTITIONING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropDatabase(): DropDatabaseContext {
		let _localctx: DropDatabaseContext = new DropDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, MySqlParser.RULE_dropDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2593;
			this.match(MySqlParser.DROP);
			this.state = 2594;
			_localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
				_localctx._dbFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2595;
				this.ifExists();
				}
			}

			this.state = 2598;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropEvent(): DropEventContext {
		let _localctx: DropEventContext = new DropEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, MySqlParser.RULE_dropEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2600;
			this.match(MySqlParser.DROP);
			this.state = 2601;
			this.match(MySqlParser.EVENT);
			this.state = 2603;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2602;
				this.ifExists();
				}
			}

			this.state = 2605;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndex(): DropIndexContext {
		let _localctx: DropIndexContext = new DropIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, MySqlParser.RULE_dropIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2607;
			this.match(MySqlParser.DROP);
			this.state = 2608;
			this.match(MySqlParser.INDEX);
			this.state = 2610;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 333, this._ctx) ) {
			case 1:
				{
				this.state = 2609;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.OFFLINE || _la === MySqlParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2612;
			this.uid();
			this.state = 2613;
			this.match(MySqlParser.ON);
			this.state = 2614;
			this.tableName();
			this.state = 2627;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 2625;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.ALGORITHM:
						{
						this.state = 2615;
						this.match(MySqlParser.ALGORITHM);
						this.state = 2617;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.EQUAL_SYMBOL) {
							{
							this.state = 2616;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 2619;
						_localctx._algType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.COPY || _la === MySqlParser.INPLACE)) {
							_localctx._algType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case MySqlParser.LOCK:
						{
						this.state = 2620;
						this.match(MySqlParser.LOCK);
						this.state = 2622;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.EQUAL_SYMBOL) {
							{
							this.state = 2621;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 2624;
						_localctx._lockType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.DEFAULT || _la === MySqlParser.EXCLUSIVE || _la === MySqlParser.NONE || _la === MySqlParser.SHARED)) {
							_localctx._lockType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 2629;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroup(): DropLogfileGroupContext {
		let _localctx: DropLogfileGroupContext = new DropLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, MySqlParser.RULE_dropLogfileGroup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2630;
			this.match(MySqlParser.DROP);
			this.state = 2631;
			this.match(MySqlParser.LOGFILE);
			this.state = 2632;
			this.match(MySqlParser.GROUP);
			this.state = 2633;
			this.uid();
			this.state = 2634;
			this.match(MySqlParser.ENGINE);
			this.state = 2635;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 2636;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropProcedure(): DropProcedureContext {
		let _localctx: DropProcedureContext = new DropProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, MySqlParser.RULE_dropProcedure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2638;
			this.match(MySqlParser.DROP);
			this.state = 2639;
			this.match(MySqlParser.PROCEDURE);
			this.state = 2641;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2640;
				this.ifExists();
				}
			}

			this.state = 2643;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFunction(): DropFunctionContext {
		let _localctx: DropFunctionContext = new DropFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, MySqlParser.RULE_dropFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2645;
			this.match(MySqlParser.DROP);
			this.state = 2646;
			this.match(MySqlParser.FUNCTION);
			this.state = 2648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2647;
				this.ifExists();
				}
			}

			this.state = 2650;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropServer(): DropServerContext {
		let _localctx: DropServerContext = new DropServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, MySqlParser.RULE_dropServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2652;
			this.match(MySqlParser.DROP);
			this.state = 2653;
			this.match(MySqlParser.SERVER);
			this.state = 2655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2654;
				this.ifExists();
				}
			}

			this.state = 2657;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTable(): DropTableContext {
		let _localctx: DropTableContext = new DropTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, MySqlParser.RULE_dropTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2659;
			this.match(MySqlParser.DROP);
			this.state = 2661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.TEMPORARY) {
				{
				this.state = 2660;
				this.match(MySqlParser.TEMPORARY);
				}
			}

			this.state = 2663;
			this.match(MySqlParser.TABLE);
			this.state = 2665;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2664;
				this.ifExists();
				}
			}

			this.state = 2667;
			this.tables();
			this.state = 2669;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT) {
				{
				this.state = 2668;
				_localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT)) {
					_localctx._dropType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTablespace(): DropTablespaceContext {
		let _localctx: DropTablespaceContext = new DropTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, MySqlParser.RULE_dropTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2671;
			this.match(MySqlParser.DROP);
			this.state = 2672;
			this.match(MySqlParser.TABLESPACE);
			this.state = 2673;
			this.uid();
			this.state = 2679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ENGINE) {
				{
				this.state = 2674;
				this.match(MySqlParser.ENGINE);
				this.state = 2676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.EQUAL_SYMBOL) {
					{
					this.state = 2675;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2678;
				this.engineName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTrigger(): DropTriggerContext {
		let _localctx: DropTriggerContext = new DropTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, MySqlParser.RULE_dropTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2681;
			this.match(MySqlParser.DROP);
			this.state = 2682;
			this.match(MySqlParser.TRIGGER);
			this.state = 2684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2683;
				this.ifExists();
				}
			}

			this.state = 2686;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropView(): DropViewContext {
		let _localctx: DropViewContext = new DropViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, MySqlParser.RULE_dropView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2688;
			this.match(MySqlParser.DROP);
			this.state = 2689;
			this.match(MySqlParser.VIEW);
			this.state = 2691;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 2690;
				this.ifExists();
				}
			}

			this.state = 2693;
			this.fullId();
			this.state = 2698;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 2694;
				this.match(MySqlParser.COMMA);
				this.state = 2695;
				this.fullId();
				}
				}
				this.state = 2700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2702;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT) {
				{
				this.state = 2701;
				_localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CASCADE || _la === MySqlParser.RESTRICT)) {
					_localctx._dropType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameTable(): RenameTableContext {
		let _localctx: RenameTableContext = new RenameTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, MySqlParser.RULE_renameTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2704;
			this.match(MySqlParser.RENAME);
			this.state = 2705;
			this.match(MySqlParser.TABLE);
			this.state = 2706;
			this.renameTableClause();
			this.state = 2711;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 2707;
				this.match(MySqlParser.COMMA);
				this.state = 2708;
				this.renameTableClause();
				}
				}
				this.state = 2713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameTableClause(): RenameTableClauseContext {
		let _localctx: RenameTableClauseContext = new RenameTableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, MySqlParser.RULE_renameTableClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2714;
			this.tableName();
			this.state = 2715;
			this.match(MySqlParser.TO);
			this.state = 2716;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncateTable(): TruncateTableContext {
		let _localctx: TruncateTableContext = new TruncateTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, MySqlParser.RULE_truncateTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2718;
			this.match(MySqlParser.TRUNCATE);
			this.state = 2720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.TABLE) {
				{
				this.state = 2719;
				this.match(MySqlParser.TABLE);
				}
			}

			this.state = 2722;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callStatement(): CallStatementContext {
		let _localctx: CallStatementContext = new CallStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, MySqlParser.RULE_callStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2724;
			this.match(MySqlParser.CALL);
			this.state = 2725;
			this.fullId();
			this.state = 2732;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 353, this._ctx) ) {
			case 1:
				{
				this.state = 2726;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2729;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 352, this._ctx) ) {
				case 1:
					{
					this.state = 2727;
					this.constants();
					}
					break;

				case 2:
					{
					this.state = 2728;
					this.expressions();
					}
					break;
				}
				this.state = 2731;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let _localctx: DeleteStatementContext = new DeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, MySqlParser.RULE_deleteStatement);
		try {
			this.state = 2736;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 354, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2734;
				this.singleDeleteStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2735;
				this.multipleDeleteStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public doStatement(): DoStatementContext {
		let _localctx: DoStatementContext = new DoStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, MySqlParser.RULE_doStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2738;
			this.match(MySqlParser.DO);
			this.state = 2739;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerStatement(): HandlerStatementContext {
		let _localctx: HandlerStatementContext = new HandlerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, MySqlParser.RULE_handlerStatement);
		try {
			this.state = 2745;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 355, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2741;
				this.handlerOpenStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2742;
				this.handlerReadIndexStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2743;
				this.handlerReadStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2744;
				this.handlerCloseStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatement(): InsertStatementContext {
		let _localctx: InsertStatementContext = new InsertStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, MySqlParser.RULE_insertStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2747;
			this.match(MySqlParser.INSERT);
			this.state = 2749;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DELAYED || _la === MySqlParser.HIGH_PRIORITY || _la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 2748;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DELAYED || _la === MySqlParser.HIGH_PRIORITY || _la === MySqlParser.LOW_PRIORITY)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2752;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2751;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 2755;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INTO) {
				{
				this.state = 2754;
				this.match(MySqlParser.INTO);
				}
			}

			this.state = 2757;
			this.tableName();
			this.state = 2763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2758;
				this.match(MySqlParser.PARTITION);
				this.state = 2759;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2760;
				_localctx._partitions = this.uidList();
				this.state = 2761;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
			case MySqlParser.VALUES:
			case MySqlParser.VALUE:
			case MySqlParser.LR_BRACKET:
				{
				this.state = 2769;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 360, this._ctx) ) {
				case 1:
					{
					this.state = 2765;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2766;
					_localctx._columns = this.uidList();
					this.state = 2767;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 2771;
				this.insertStatementValue();
				}
				break;
			case MySqlParser.SET:
				{
				this.state = 2772;
				this.match(MySqlParser.SET);
				this.state = 2773;
				_localctx._setFirst = this.updatedElement();
				this.state = 2778;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2774;
					this.match(MySqlParser.COMMA);
					this.state = 2775;
					_localctx._updatedElement = this.updatedElement();
					_localctx._setElements.push(_localctx._updatedElement);
					}
					}
					this.state = 2780;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2795;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ON) {
				{
				this.state = 2783;
				this.match(MySqlParser.ON);
				this.state = 2784;
				this.match(MySqlParser.DUPLICATE);
				this.state = 2785;
				this.match(MySqlParser.KEY);
				this.state = 2786;
				this.match(MySqlParser.UPDATE);
				this.state = 2787;
				_localctx._duplicatedFirst = this.updatedElement();
				this.state = 2792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2788;
					this.match(MySqlParser.COMMA);
					this.state = 2789;
					_localctx._updatedElement = this.updatedElement();
					_localctx._duplicatedElements.push(_localctx._updatedElement);
					}
					}
					this.state = 2794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadDataStatement(): LoadDataStatementContext {
		let _localctx: LoadDataStatementContext = new LoadDataStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, MySqlParser.RULE_loadDataStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2797;
			this.match(MySqlParser.LOAD);
			this.state = 2798;
			this.match(MySqlParser.DATA);
			this.state = 2800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT) {
				{
				this.state = 2799;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOCAL) {
				{
				this.state = 2802;
				this.match(MySqlParser.LOCAL);
				}
			}

			this.state = 2805;
			this.match(MySqlParser.INFILE);
			this.state = 2806;
			_localctx._filename = this.match(MySqlParser.STRING_LITERAL);
			this.state = 2808;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE) {
				{
				this.state = 2807;
				_localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE)) {
					_localctx._violation = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2810;
			this.match(MySqlParser.INTO);
			this.state = 2811;
			this.match(MySqlParser.TABLE);
			this.state = 2812;
			this.tableName();
			this.state = 2818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2813;
				this.match(MySqlParser.PARTITION);
				this.state = 2814;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2815;
				this.uidList();
				this.state = 2816;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2823;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CHARACTER) {
				{
				this.state = 2820;
				this.match(MySqlParser.CHARACTER);
				this.state = 2821;
				this.match(MySqlParser.SET);
				this.state = 2822;
				_localctx._charset = this.charsetName();
				}
			}

			this.state = 2831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COLUMNS || _la === MySqlParser.FIELDS) {
				{
				this.state = 2825;
				_localctx._fieldsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.COLUMNS || _la === MySqlParser.FIELDS)) {
					_localctx._fieldsFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2826;
					this.selectFieldsInto();
					}
					}
					this.state = 2829;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.ENCLOSED || _la === MySqlParser.ESCAPED || _la === MySqlParser.OPTIONALLY || _la === MySqlParser.TERMINATED);
				}
			}

			this.state = 2839;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LINES) {
				{
				this.state = 2833;
				this.match(MySqlParser.LINES);
				this.state = 2835;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2834;
					this.selectLinesInto();
					}
					}
					this.state = 2837;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.STARTING || _la === MySqlParser.TERMINATED);
				}
			}

			this.state = 2845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2841;
				this.match(MySqlParser.IGNORE);
				this.state = 2842;
				this.decimalLiteral();
				this.state = 2843;
				_localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LINES || _la === MySqlParser.ROWS)) {
					_localctx._linesFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2858;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
			case 1:
				{
				this.state = 2847;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2848;
				this.assignmentField();
				this.state = 2853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2849;
					this.match(MySqlParser.COMMA);
					this.state = 2850;
					this.assignmentField();
					}
					}
					this.state = 2855;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2856;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 2869;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 378, this._ctx) ) {
			case 1:
				{
				this.state = 2860;
				this.match(MySqlParser.SET);
				this.state = 2861;
				this.updatedElement();
				this.state = 2866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2862;
					this.match(MySqlParser.COMMA);
					this.state = 2863;
					this.updatedElement();
					}
					}
					this.state = 2868;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadXmlStatement(): LoadXmlStatementContext {
		let _localctx: LoadXmlStatementContext = new LoadXmlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, MySqlParser.RULE_loadXmlStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2871;
			this.match(MySqlParser.LOAD);
			this.state = 2872;
			this.match(MySqlParser.XML);
			this.state = 2874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT) {
				{
				this.state = 2873;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LOW_PRIORITY || _la === MySqlParser.CONCURRENT)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2877;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOCAL) {
				{
				this.state = 2876;
				this.match(MySqlParser.LOCAL);
				}
			}

			this.state = 2879;
			this.match(MySqlParser.INFILE);
			this.state = 2880;
			_localctx._filename = this.match(MySqlParser.STRING_LITERAL);
			this.state = 2882;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE) {
				{
				this.state = 2881;
				_localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.IGNORE || _la === MySqlParser.REPLACE)) {
					_localctx._violation = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2884;
			this.match(MySqlParser.INTO);
			this.state = 2885;
			this.match(MySqlParser.TABLE);
			this.state = 2886;
			this.tableName();
			this.state = 2890;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CHARACTER) {
				{
				this.state = 2887;
				this.match(MySqlParser.CHARACTER);
				this.state = 2888;
				this.match(MySqlParser.SET);
				this.state = 2889;
				_localctx._charset = this.charsetName();
				}
			}

			this.state = 2898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ROWS) {
				{
				this.state = 2892;
				this.match(MySqlParser.ROWS);
				this.state = 2893;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 2894;
				this.match(MySqlParser.BY);
				this.state = 2895;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 2896;
				_localctx._tag = this.match(MySqlParser.STRING_LITERAL);
				this.state = 2897;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
			}

			this.state = 2904;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 2900;
				this.match(MySqlParser.IGNORE);
				this.state = 2901;
				this.decimalLiteral();
				this.state = 2902;
				_localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LINES || _la === MySqlParser.ROWS)) {
					_localctx._linesFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2917;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 386, this._ctx) ) {
			case 1:
				{
				this.state = 2906;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2907;
				this.assignmentField();
				this.state = 2912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2908;
					this.match(MySqlParser.COMMA);
					this.state = 2909;
					this.assignmentField();
					}
					}
					this.state = 2914;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2915;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 2928;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 388, this._ctx) ) {
			case 1:
				{
				this.state = 2919;
				this.match(MySqlParser.SET);
				this.state = 2920;
				this.updatedElement();
				this.state = 2925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2921;
					this.match(MySqlParser.COMMA);
					this.state = 2922;
					this.updatedElement();
					}
					}
					this.state = 2927;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replaceStatement(): ReplaceStatementContext {
		let _localctx: ReplaceStatementContext = new ReplaceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, MySqlParser.RULE_replaceStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2930;
			this.match(MySqlParser.REPLACE);
			this.state = 2932;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DELAYED || _la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 2931;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DELAYED || _la === MySqlParser.LOW_PRIORITY)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INTO) {
				{
				this.state = 2934;
				this.match(MySqlParser.INTO);
				}
			}

			this.state = 2937;
			this.tableName();
			this.state = 2943;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 2938;
				this.match(MySqlParser.PARTITION);
				this.state = 2939;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2940;
				_localctx._partitions = this.uidList();
				this.state = 2941;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2961;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
			case MySqlParser.VALUES:
			case MySqlParser.VALUE:
			case MySqlParser.LR_BRACKET:
				{
				this.state = 2949;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 392, this._ctx) ) {
				case 1:
					{
					this.state = 2945;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2946;
					_localctx._columns = this.uidList();
					this.state = 2947;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 2951;
				this.insertStatementValue();
				}
				break;
			case MySqlParser.SET:
				{
				this.state = 2952;
				this.match(MySqlParser.SET);
				this.state = 2953;
				_localctx._setFirst = this.updatedElement();
				this.state = 2958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 2954;
					this.match(MySqlParser.COMMA);
					this.state = 2955;
					_localctx._updatedElement = this.updatedElement();
					_localctx._setElements.push(_localctx._updatedElement);
					}
					}
					this.state = 2960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let _localctx: SelectStatementContext = new SelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, MySqlParser.RULE_selectStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3018;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 410, this._ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2963;
				this.querySpecification();
				this.state = 2965;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 395, this._ctx) ) {
				case 1:
					{
					this.state = 2964;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2967;
				this.queryExpression();
				this.state = 2969;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
				case 1:
					{
					this.state = 2968;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new UnionSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2971;
				this.querySpecificationNointo();
				this.state = 2973;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2972;
						this.unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2975;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 397, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.UNION) {
					{
					this.state = 2977;
					this.match(MySqlParser.UNION);
					this.state = 2979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
						{
						this.state = 2978;
						(_localctx as UnionSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
							(_localctx as UnionSelectContext)._unionType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 2983;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.SELECT:
						{
						this.state = 2981;
						this.querySpecification();
						}
						break;
					case MySqlParser.LR_BRACKET:
						{
						this.state = 2982;
						this.queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 2988;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ORDER) {
					{
					this.state = 2987;
					this.orderByClause();
					}
				}

				this.state = 2991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIMIT) {
					{
					this.state = 2990;
					this.limitClause();
					}
				}

				this.state = 2994;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
				case 1:
					{
					this.state = 2993;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2996;
				this.queryExpressionNointo();
				this.state = 2998;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2997;
						this.unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3000;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.UNION) {
					{
					this.state = 3002;
					this.match(MySqlParser.UNION);
					this.state = 3004;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
						{
						this.state = 3003;
						(_localctx as UnionParenthesisSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
							(_localctx as UnionParenthesisSelectContext)._unionType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 3006;
					this.queryExpression();
					}
				}

				this.state = 3010;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ORDER) {
					{
					this.state = 3009;
					this.orderByClause();
					}
				}

				this.state = 3013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIMIT) {
					{
					this.state = 3012;
					this.limitClause();
					}
				}

				this.state = 3016;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
				case 1:
					{
					this.state = 3015;
					this.lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let _localctx: UpdateStatementContext = new UpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, MySqlParser.RULE_updateStatement);
		try {
			this.state = 3022;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 411, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3020;
				this.singleUpdateStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3021;
				this.multipleUpdateStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatementValue(): InsertStatementValueContext {
		let _localctx: InsertStatementValueContext = new InsertStatementValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, MySqlParser.RULE_insertStatementValue);
		let _la: number;
		try {
			this.state = 3039;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
			case MySqlParser.LR_BRACKET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3024;
				this.selectStatement();
				}
				break;
			case MySqlParser.VALUES:
			case MySqlParser.VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3025;
				_localctx._insertFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.VALUES || _la === MySqlParser.VALUE)) {
					_localctx._insertFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3026;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3027;
				this.expressionsWithDefaults();
				this.state = 3028;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 3036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3029;
					this.match(MySqlParser.COMMA);
					this.state = 3030;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3031;
					this.expressionsWithDefaults();
					this.state = 3032;
					this.match(MySqlParser.RR_BRACKET);
					}
					}
					this.state = 3038;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updatedElement(): UpdatedElementContext {
		let _localctx: UpdatedElementContext = new UpdatedElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, MySqlParser.RULE_updatedElement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3041;
			this.fullColumnName();
			this.state = 3042;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 3045;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CASE:
			case MySqlParser.CAST:
			case MySqlParser.CONVERT:
			case MySqlParser.CURRENT_USER:
			case MySqlParser.DATABASE:
			case MySqlParser.EXISTS:
			case MySqlParser.FALSE:
			case MySqlParser.IF:
			case MySqlParser.INSERT:
			case MySqlParser.INTERVAL:
			case MySqlParser.LEFT:
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.REPLACE:
			case MySqlParser.RIGHT:
			case MySqlParser.TRUE:
			case MySqlParser.VALUES:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.CHAR:
			case MySqlParser.BINARY:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.AVG:
			case MySqlParser.BIT_AND:
			case MySqlParser.BIT_OR:
			case MySqlParser.BIT_XOR:
			case MySqlParser.COUNT:
			case MySqlParser.GROUP_CONCAT:
			case MySqlParser.MAX:
			case MySqlParser.MIN:
			case MySqlParser.STD:
			case MySqlParser.STDDEV:
			case MySqlParser.STDDEV_POP:
			case MySqlParser.STDDEV_SAMP:
			case MySqlParser.SUM:
			case MySqlParser.VAR_POP:
			case MySqlParser.VAR_SAMP:
			case MySqlParser.VARIANCE:
			case MySqlParser.CURRENT_DATE:
			case MySqlParser.CURRENT_TIME:
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.CURDATE:
			case MySqlParser.CURTIME:
			case MySqlParser.DATE_ADD:
			case MySqlParser.DATE_SUB:
			case MySqlParser.EXTRACT:
			case MySqlParser.LOCALTIMESTAMP:
			case MySqlParser.NOW:
			case MySqlParser.POSITION:
			case MySqlParser.SUBSTR:
			case MySqlParser.SUBSTRING:
			case MySqlParser.SYSDATE:
			case MySqlParser.TRIM:
			case MySqlParser.UTC_DATE:
			case MySqlParser.UTC_TIME:
			case MySqlParser.UTC_TIMESTAMP:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.PLUS:
			case MySqlParser.MINUS:
			case MySqlParser.EXCLAMATION_SYMBOL:
			case MySqlParser.BIT_NOT_OP:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.START_NATIONAL_STRING_LITERAL:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.DECIMAL_LITERAL:
			case MySqlParser.HEXADECIMAL_LITERAL:
			case MySqlParser.REAL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
			case MySqlParser.BIT_STRING:
			case MySqlParser.STRING_CHARSET_NAME:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
			case MySqlParser.LOCAL_ID:
			case MySqlParser.GLOBAL_ID:
				{
				this.state = 3043;
				this.expression(0);
				}
				break;
			case MySqlParser.DEFAULT:
				{
				this.state = 3044;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignmentField(): AssignmentFieldContext {
		let _localctx: AssignmentFieldContext = new AssignmentFieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, MySqlParser.RULE_assignmentField);
		try {
			this.state = 3049;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3047;
				this.uid();
				}
				break;
			case MySqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3048;
				this.match(MySqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockClause(): LockClauseContext {
		let _localctx: LockClauseContext = new LockClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, MySqlParser.RULE_lockClause);
		try {
			this.state = 3057;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.FOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3051;
				this.match(MySqlParser.FOR);
				this.state = 3052;
				this.match(MySqlParser.UPDATE);
				}
				break;
			case MySqlParser.LOCK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3053;
				this.match(MySqlParser.LOCK);
				this.state = 3054;
				this.match(MySqlParser.IN);
				this.state = 3055;
				this.match(MySqlParser.SHARE);
				this.state = 3056;
				this.match(MySqlParser.MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleDeleteStatement(): SingleDeleteStatementContext {
		let _localctx: SingleDeleteStatementContext = new SingleDeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, MySqlParser.RULE_singleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3059;
			this.match(MySqlParser.DELETE);
			this.state = 3061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 3060;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3064;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.QUICK) {
				{
				this.state = 3063;
				this.match(MySqlParser.QUICK);
				}
			}

			this.state = 3067;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 3066;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3069;
			this.match(MySqlParser.FROM);
			this.state = 3070;
			this.tableName();
			this.state = 3076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 3071;
				this.match(MySqlParser.PARTITION);
				this.state = 3072;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3073;
				this.uidList();
				this.state = 3074;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 3080;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3078;
				this.match(MySqlParser.WHERE);
				this.state = 3079;
				this.expression(0);
				}
			}

			this.state = 3083;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ORDER) {
				{
				this.state = 3082;
				this.orderByClause();
				}
			}

			this.state = 3087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 3085;
				this.match(MySqlParser.LIMIT);
				this.state = 3086;
				this.decimalLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleDeleteStatement(): MultipleDeleteStatementContext {
		let _localctx: MultipleDeleteStatementContext = new MultipleDeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, MySqlParser.RULE_multipleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3089;
			this.match(MySqlParser.DELETE);
			this.state = 3091;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 3090;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3094;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 425, this._ctx) ) {
			case 1:
				{
				this.state = 3093;
				this.match(MySqlParser.QUICK);
				}
				break;
			}
			this.state = 3097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 3096;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3138;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				{
				this.state = 3099;
				this.tableName();
				this.state = 3102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DOT) {
					{
					this.state = 3100;
					this.match(MySqlParser.DOT);
					this.state = 3101;
					this.match(MySqlParser.STAR);
					}
				}

				this.state = 3112;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3104;
					this.match(MySqlParser.COMMA);
					this.state = 3105;
					this.tableName();
					this.state = 3108;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DOT) {
						{
						this.state = 3106;
						this.match(MySqlParser.DOT);
						this.state = 3107;
						this.match(MySqlParser.STAR);
						}
					}

					}
					}
					this.state = 3114;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3115;
				this.match(MySqlParser.FROM);
				this.state = 3116;
				this.tableSources();
				}
				break;
			case MySqlParser.FROM:
				{
				this.state = 3118;
				this.match(MySqlParser.FROM);
				this.state = 3119;
				this.tableName();
				this.state = 3122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DOT) {
					{
					this.state = 3120;
					this.match(MySqlParser.DOT);
					this.state = 3121;
					this.match(MySqlParser.STAR);
					}
				}

				this.state = 3132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3124;
					this.match(MySqlParser.COMMA);
					this.state = 3125;
					this.tableName();
					this.state = 3128;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.DOT) {
						{
						this.state = 3126;
						this.match(MySqlParser.DOT);
						this.state = 3127;
						this.match(MySqlParser.STAR);
						}
					}

					}
					}
					this.state = 3134;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3135;
				this.match(MySqlParser.USING);
				this.state = 3136;
				this.tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3140;
				this.match(MySqlParser.WHERE);
				this.state = 3141;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerOpenStatement(): HandlerOpenStatementContext {
		let _localctx: HandlerOpenStatementContext = new HandlerOpenStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, MySqlParser.RULE_handlerOpenStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3144;
			this.match(MySqlParser.HANDLER);
			this.state = 3145;
			this.tableName();
			this.state = 3146;
			this.match(MySqlParser.OPEN);
			this.state = 3151;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 436, this._ctx) ) {
			case 1:
				{
				this.state = 3148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3147;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3150;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext {
		let _localctx: HandlerReadIndexStatementContext = new HandlerReadIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, MySqlParser.RULE_handlerReadIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3153;
			this.match(MySqlParser.HANDLER);
			this.state = 3154;
			this.tableName();
			this.state = 3155;
			this.match(MySqlParser.READ);
			this.state = 3156;
			_localctx._index = this.uid();
			this.state = 3163;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.EQUAL_SYMBOL:
			case MySqlParser.GREATER_SYMBOL:
			case MySqlParser.LESS_SYMBOL:
			case MySqlParser.EXCLAMATION_SYMBOL:
				{
				this.state = 3157;
				this.comparisonOperator();
				this.state = 3158;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3159;
				this.constants();
				this.state = 3160;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.FIRST:
			case MySqlParser.LAST:
			case MySqlParser.NEXT:
			case MySqlParser.PREV:
				{
				this.state = 3162;
				_localctx._moveOrder = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FIRST || _la === MySqlParser.LAST || _la === MySqlParser.NEXT || _la === MySqlParser.PREV)) {
					_localctx._moveOrder = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3165;
				this.match(MySqlParser.WHERE);
				this.state = 3166;
				this.expression(0);
				}
			}

			this.state = 3171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 3169;
				this.match(MySqlParser.LIMIT);
				this.state = 3170;
				this.decimalLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerReadStatement(): HandlerReadStatementContext {
		let _localctx: HandlerReadStatementContext = new HandlerReadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, MySqlParser.RULE_handlerReadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3173;
			this.match(MySqlParser.HANDLER);
			this.state = 3174;
			this.tableName();
			this.state = 3175;
			this.match(MySqlParser.READ);
			this.state = 3176;
			_localctx._moveOrder = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.FIRST || _la === MySqlParser.NEXT)) {
				_localctx._moveOrder = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3177;
				this.match(MySqlParser.WHERE);
				this.state = 3178;
				this.expression(0);
				}
			}

			this.state = 3183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 3181;
				this.match(MySqlParser.LIMIT);
				this.state = 3182;
				this.decimalLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerCloseStatement(): HandlerCloseStatementContext {
		let _localctx: HandlerCloseStatementContext = new HandlerCloseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, MySqlParser.RULE_handlerCloseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3185;
			this.match(MySqlParser.HANDLER);
			this.state = 3186;
			this.tableName();
			this.state = 3187;
			this.match(MySqlParser.CLOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleUpdateStatement(): SingleUpdateStatementContext {
		let _localctx: SingleUpdateStatementContext = new SingleUpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, MySqlParser.RULE_singleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3189;
			this.match(MySqlParser.UPDATE);
			this.state = 3191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 3190;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 3193;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3196;
			this.tableName();
			this.state = 3201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AS || _la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 3198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3197;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3200;
				this.uid();
				}
			}

			this.state = 3203;
			this.match(MySqlParser.SET);
			this.state = 3204;
			this.updatedElement();
			this.state = 3209;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3205;
				this.match(MySqlParser.COMMA);
				this.state = 3206;
				this.updatedElement();
				}
				}
				this.state = 3211;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3212;
				this.match(MySqlParser.WHERE);
				this.state = 3213;
				this.expression(0);
				}
			}

			this.state = 3217;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ORDER) {
				{
				this.state = 3216;
				this.orderByClause();
				}
			}

			this.state = 3220;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LIMIT) {
				{
				this.state = 3219;
				this.limitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleUpdateStatement(): MultipleUpdateStatementContext {
		let _localctx: MultipleUpdateStatementContext = new MultipleUpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, MySqlParser.RULE_multipleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3222;
			this.match(MySqlParser.UPDATE);
			this.state = 3224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LOW_PRIORITY) {
				{
				this.state = 3223;
				_localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3227;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 3226;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3229;
			this.tableSources();
			this.state = 3230;
			this.match(MySqlParser.SET);
			this.state = 3231;
			this.updatedElement();
			this.state = 3236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3232;
				this.match(MySqlParser.COMMA);
				this.state = 3233;
				this.updatedElement();
				}
				}
				this.state = 3238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3239;
				this.match(MySqlParser.WHERE);
				this.state = 3240;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let _localctx: OrderByClauseContext = new OrderByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, MySqlParser.RULE_orderByClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3243;
			this.match(MySqlParser.ORDER);
			this.state = 3244;
			this.match(MySqlParser.BY);
			this.state = 3245;
			this.orderByExpression();
			this.state = 3250;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3246;
				this.match(MySqlParser.COMMA);
				this.state = 3247;
				this.orderByExpression();
				}
				}
				this.state = 3252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByExpression(): OrderByExpressionContext {
		let _localctx: OrderByExpressionContext = new OrderByExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, MySqlParser.RULE_orderByExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3253;
			this.expression(0);
			this.state = 3255;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 455, this._ctx) ) {
			case 1:
				{
				this.state = 3254;
				_localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC)) {
					_localctx._order = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSources(): TableSourcesContext {
		let _localctx: TableSourcesContext = new TableSourcesContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, MySqlParser.RULE_tableSources);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3257;
			this.tableSource();
			this.state = 3262;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3258;
				this.match(MySqlParser.COMMA);
				this.state = 3259;
				this.tableSource();
				}
				}
				this.state = 3264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSource(): TableSourceContext {
		let _localctx: TableSourceContext = new TableSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, MySqlParser.RULE_tableSource);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3282;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 459, this._ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3265;
				this.tableSourceItem();
				this.state = 3269;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3266;
						this.joinPart();
						}
						}
					}
					this.state = 3271;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3272;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3273;
				this.tableSourceItem();
				this.state = 3277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.CROSS || ((((_la - 71)) & ~0x1F) === 0 && ((1 << (_la - 71)) & ((1 << (MySqlParser.INNER - 71)) | (1 << (MySqlParser.JOIN - 71)) | (1 << (MySqlParser.LEFT - 71)) | (1 << (MySqlParser.NATURAL - 71)))) !== 0) || _la === MySqlParser.RIGHT || _la === MySqlParser.STRAIGHT_JOIN) {
					{
					{
					this.state = 3274;
					this.joinPart();
					}
					}
					this.state = 3279;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3280;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSourceItem(): TableSourceItemContext {
		let _localctx: TableSourceItemContext = new TableSourceItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, MySqlParser.RULE_tableSourceItem);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3324;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 467, this._ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3284;
				this.tableName();
				this.state = 3290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PARTITION) {
					{
					this.state = 3285;
					this.match(MySqlParser.PARTITION);
					this.state = 3286;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3287;
					this.uidList();
					this.state = 3288;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				this.state = 3296;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
				case 1:
					{
					this.state = 3293;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3292;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3295;
					(_localctx as AtomTableItemContext)._alias = this.uid();
					}
					break;
				}
				this.state = 3306;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 464, this._ctx) ) {
				case 1:
					{
					this.state = 3298;
					this.indexHint();
					this.state = 3303;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3299;
							this.match(MySqlParser.COMMA);
							this.state = 3300;
							this.indexHint();
							}
							}
						}
						this.state = 3305;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 463, this._ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3313;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 465, this._ctx) ) {
				case 1:
					{
					this.state = 3308;
					this.selectStatement();
					}
					break;

				case 2:
					{
					this.state = 3309;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3310;
					(_localctx as SubqueryTableItemContext)._parenthesisSubquery = this.selectStatement();
					this.state = 3311;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3315;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3318;
				(_localctx as SubqueryTableItemContext)._alias = this.uid();
				}
				break;

			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3320;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3321;
				this.tableSources();
				this.state = 3322;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHint(): IndexHintContext {
		let _localctx: IndexHintContext = new IndexHintContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, MySqlParser.RULE_indexHint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3326;
			_localctx._indexHintAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.FORCE || _la === MySqlParser.IGNORE || _la === MySqlParser.USE)) {
				_localctx._indexHintAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3327;
			_localctx._keyFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
				_localctx._keyFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3330;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3328;
				this.match(MySqlParser.FOR);
				this.state = 3329;
				this.indexHintType();
				}
			}

			this.state = 3332;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 3333;
			this.uidList();
			this.state = 3334;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHintType(): IndexHintTypeContext {
		let _localctx: IndexHintTypeContext = new IndexHintTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, MySqlParser.RULE_indexHintType);
		try {
			this.state = 3341;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.JOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3336;
				this.match(MySqlParser.JOIN);
				}
				break;
			case MySqlParser.ORDER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3337;
				this.match(MySqlParser.ORDER);
				this.state = 3338;
				this.match(MySqlParser.BY);
				}
				break;
			case MySqlParser.GROUP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3339;
				this.match(MySqlParser.GROUP);
				this.state = 3340;
				this.match(MySqlParser.BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinPart(): JoinPartContext {
		let _localctx: JoinPartContext = new JoinPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, MySqlParser.RULE_joinPart);
		let _la: number;
		try {
			this.state = 3387;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CROSS:
			case MySqlParser.INNER:
			case MySqlParser.JOIN:
				_localctx = new InnerJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3344;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CROSS || _la === MySqlParser.INNER) {
					{
					this.state = 3343;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CROSS || _la === MySqlParser.INNER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3346;
				this.match(MySqlParser.JOIN);
				this.state = 3347;
				this.tableSourceItem();
				this.state = 3355;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 471, this._ctx) ) {
				case 1:
					{
					this.state = 3348;
					this.match(MySqlParser.ON);
					this.state = 3349;
					this.expression(0);
					}
					break;

				case 2:
					{
					this.state = 3350;
					this.match(MySqlParser.USING);
					this.state = 3351;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3352;
					this.uidList();
					this.state = 3353;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case MySqlParser.STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3357;
				this.match(MySqlParser.STRAIGHT_JOIN);
				this.state = 3358;
				this.tableSourceItem();
				this.state = 3361;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 472, this._ctx) ) {
				case 1:
					{
					this.state = 3359;
					this.match(MySqlParser.ON);
					this.state = 3360;
					this.expression(0);
					}
					break;
				}
				}
				break;
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3363;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.LEFT || _la === MySqlParser.RIGHT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.OUTER) {
					{
					this.state = 3364;
					this.match(MySqlParser.OUTER);
					}
				}

				this.state = 3367;
				this.match(MySqlParser.JOIN);
				this.state = 3368;
				this.tableSourceItem();
				this.state = 3376;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.ON:
					{
					this.state = 3369;
					this.match(MySqlParser.ON);
					this.state = 3370;
					this.expression(0);
					}
					break;
				case MySqlParser.USING:
					{
					this.state = 3371;
					this.match(MySqlParser.USING);
					this.state = 3372;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3373;
					this.uidList();
					this.state = 3374;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MySqlParser.NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3378;
				this.match(MySqlParser.NATURAL);
				this.state = 3383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LEFT || _la === MySqlParser.RIGHT) {
					{
					this.state = 3379;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.LEFT || _la === MySqlParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3381;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.OUTER) {
						{
						this.state = 3380;
						this.match(MySqlParser.OUTER);
						}
					}

					}
				}

				this.state = 3385;
				this.match(MySqlParser.JOIN);
				this.state = 3386;
				this.tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpression(): QueryExpressionContext {
		let _localctx: QueryExpressionContext = new QueryExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, MySqlParser.RULE_queryExpression);
		try {
			this.state = 3397;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 478, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3389;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3390;
				this.querySpecification();
				this.state = 3391;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3393;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3394;
				this.queryExpression();
				this.state = 3395;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpressionNointo(): QueryExpressionNointoContext {
		let _localctx: QueryExpressionNointoContext = new QueryExpressionNointoContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, MySqlParser.RULE_queryExpressionNointo);
		try {
			this.state = 3407;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 479, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3399;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3400;
				this.querySpecificationNointo();
				this.state = 3401;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3403;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3404;
				this.queryExpressionNointo();
				this.state = 3405;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let _localctx: QuerySpecificationContext = new QuerySpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, MySqlParser.RULE_querySpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3449;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3409;
				this.match(MySqlParser.SELECT);
				this.state = 3413;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3410;
						this.selectSpec();
						}
						}
					}
					this.state = 3415;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 480, this._ctx);
				}
				this.state = 3416;
				this.selectElements();
				this.state = 3418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INTO) {
					{
					this.state = 3417;
					this.selectIntoExpression();
					}
				}

				this.state = 3421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM) {
					{
					this.state = 3420;
					this.fromClause();
					}
				}

				this.state = 3424;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 483, this._ctx) ) {
				case 1:
					{
					this.state = 3423;
					this.orderByClause();
					}
					break;
				}
				this.state = 3427;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
				case 1:
					{
					this.state = 3426;
					this.limitClause();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3429;
				this.match(MySqlParser.SELECT);
				this.state = 3433;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3430;
						this.selectSpec();
						}
						}
					}
					this.state = 3435;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 485, this._ctx);
				}
				this.state = 3436;
				this.selectElements();
				this.state = 3438;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM) {
					{
					this.state = 3437;
					this.fromClause();
					}
				}

				this.state = 3441;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 487, this._ctx) ) {
				case 1:
					{
					this.state = 3440;
					this.orderByClause();
					}
					break;
				}
				this.state = 3444;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 488, this._ctx) ) {
				case 1:
					{
					this.state = 3443;
					this.limitClause();
					}
					break;
				}
				this.state = 3447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INTO) {
					{
					this.state = 3446;
					this.selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		let _localctx: QuerySpecificationNointoContext = new QuerySpecificationNointoContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, MySqlParser.RULE_querySpecificationNointo);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3451;
			this.match(MySqlParser.SELECT);
			this.state = 3455;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3452;
					this.selectSpec();
					}
					}
				}
				this.state = 3457;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
			}
			this.state = 3458;
			this.selectElements();
			this.state = 3460;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FROM) {
				{
				this.state = 3459;
				this.fromClause();
				}
			}

			this.state = 3463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 493, this._ctx) ) {
			case 1:
				{
				this.state = 3462;
				this.orderByClause();
				}
				break;
			}
			this.state = 3466;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 494, this._ctx) ) {
			case 1:
				{
				this.state = 3465;
				this.limitClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionParenthesis(): UnionParenthesisContext {
		let _localctx: UnionParenthesisContext = new UnionParenthesisContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, MySqlParser.RULE_unionParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3468;
			this.match(MySqlParser.UNION);
			this.state = 3470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
				{
				this.state = 3469;
				_localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
					_localctx._unionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3472;
			this.queryExpressionNointo();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionStatement(): UnionStatementContext {
		let _localctx: UnionStatementContext = new UnionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, MySqlParser.RULE_unionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3474;
			this.match(MySqlParser.UNION);
			this.state = 3476;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
				{
				this.state = 3475;
				_localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
					_localctx._unionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3480;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SELECT:
				{
				this.state = 3478;
				this.querySpecificationNointo();
				}
				break;
			case MySqlParser.LR_BRACKET:
				{
				this.state = 3479;
				this.queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectSpec(): SelectSpecContext {
		let _localctx: SelectSpecContext = new SelectSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, MySqlParser.RULE_selectSpec);
		let _la: number;
		try {
			this.state = 3490;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALL:
			case MySqlParser.DISTINCT:
			case MySqlParser.DISTINCTROW:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3482;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT || _la === MySqlParser.DISTINCTROW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.HIGH_PRIORITY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3483;
				this.match(MySqlParser.HIGH_PRIORITY);
				}
				break;
			case MySqlParser.STRAIGHT_JOIN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3484;
				this.match(MySqlParser.STRAIGHT_JOIN);
				}
				break;
			case MySqlParser.SQL_SMALL_RESULT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3485;
				this.match(MySqlParser.SQL_SMALL_RESULT);
				}
				break;
			case MySqlParser.SQL_BIG_RESULT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3486;
				this.match(MySqlParser.SQL_BIG_RESULT);
				}
				break;
			case MySqlParser.SQL_BUFFER_RESULT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3487;
				this.match(MySqlParser.SQL_BUFFER_RESULT);
				}
				break;
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3488;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SQL_CACHE || _la === MySqlParser.SQL_NO_CACHE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.SQL_CALC_FOUND_ROWS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3489;
				this.match(MySqlParser.SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectElements(): SelectElementsContext {
		let _localctx: SelectElementsContext = new SelectElementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, MySqlParser.RULE_selectElements);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3494;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STAR:
				{
				this.state = 3492;
				_localctx._star = this.match(MySqlParser.STAR);
				}
				break;
			case MySqlParser.CASE:
			case MySqlParser.CAST:
			case MySqlParser.CONVERT:
			case MySqlParser.CURRENT_USER:
			case MySqlParser.DATABASE:
			case MySqlParser.EXISTS:
			case MySqlParser.FALSE:
			case MySqlParser.IF:
			case MySqlParser.INSERT:
			case MySqlParser.INTERVAL:
			case MySqlParser.LEFT:
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.REPLACE:
			case MySqlParser.RIGHT:
			case MySqlParser.TRUE:
			case MySqlParser.VALUES:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.CHAR:
			case MySqlParser.BINARY:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.AVG:
			case MySqlParser.BIT_AND:
			case MySqlParser.BIT_OR:
			case MySqlParser.BIT_XOR:
			case MySqlParser.COUNT:
			case MySqlParser.GROUP_CONCAT:
			case MySqlParser.MAX:
			case MySqlParser.MIN:
			case MySqlParser.STD:
			case MySqlParser.STDDEV:
			case MySqlParser.STDDEV_POP:
			case MySqlParser.STDDEV_SAMP:
			case MySqlParser.SUM:
			case MySqlParser.VAR_POP:
			case MySqlParser.VAR_SAMP:
			case MySqlParser.VARIANCE:
			case MySqlParser.CURRENT_DATE:
			case MySqlParser.CURRENT_TIME:
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.CURDATE:
			case MySqlParser.CURTIME:
			case MySqlParser.DATE_ADD:
			case MySqlParser.DATE_SUB:
			case MySqlParser.EXTRACT:
			case MySqlParser.LOCALTIMESTAMP:
			case MySqlParser.NOW:
			case MySqlParser.POSITION:
			case MySqlParser.SUBSTR:
			case MySqlParser.SUBSTRING:
			case MySqlParser.SYSDATE:
			case MySqlParser.TRIM:
			case MySqlParser.UTC_DATE:
			case MySqlParser.UTC_TIME:
			case MySqlParser.UTC_TIMESTAMP:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.PLUS:
			case MySqlParser.MINUS:
			case MySqlParser.EXCLAMATION_SYMBOL:
			case MySqlParser.BIT_NOT_OP:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.START_NATIONAL_STRING_LITERAL:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.DECIMAL_LITERAL:
			case MySqlParser.HEXADECIMAL_LITERAL:
			case MySqlParser.REAL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
			case MySqlParser.BIT_STRING:
			case MySqlParser.STRING_CHARSET_NAME:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
			case MySqlParser.LOCAL_ID:
			case MySqlParser.GLOBAL_ID:
				{
				this.state = 3493;
				this.selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3496;
				this.match(MySqlParser.COMMA);
				this.state = 3497;
				this.selectElement();
				}
				}
				this.state = 3502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectElement(): SelectElementContext {
		let _localctx: SelectElementContext = new SelectElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, MySqlParser.RULE_selectElement);
		let _la: number;
		try {
			this.state = 3532;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 508, this._ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3503;
				this.fullId();
				this.state = 3504;
				this.match(MySqlParser.DOT);
				this.state = 3505;
				this.match(MySqlParser.STAR);
				}
				break;

			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3507;
				this.fullColumnName();
				this.state = 3512;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 502, this._ctx) ) {
				case 1:
					{
					this.state = 3509;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3508;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3511;
					this.uid();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3514;
				this.functionCall();
				this.state = 3519;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 504, this._ctx) ) {
				case 1:
					{
					this.state = 3516;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3515;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3518;
					this.uid();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3523;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 505, this._ctx) ) {
				case 1:
					{
					this.state = 3521;
					this.match(MySqlParser.LOCAL_ID);
					this.state = 3522;
					this.match(MySqlParser.VAR_ASSIGN);
					}
					break;
				}
				this.state = 3525;
				this.expression(0);
				this.state = 3530;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 507, this._ctx) ) {
				case 1:
					{
					this.state = 3527;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AS) {
						{
						this.state = 3526;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3529;
					this.uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectIntoExpression(): SelectIntoExpressionContext {
		let _localctx: SelectIntoExpressionContext = new SelectIntoExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, MySqlParser.RULE_selectIntoExpression);
		let _la: number;
		try {
			this.state = 3570;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 515, this._ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3534;
				this.match(MySqlParser.INTO);
				this.state = 3535;
				this.assignmentField();
				this.state = 3540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3536;
					this.match(MySqlParser.COMMA);
					this.state = 3537;
					this.assignmentField();
					}
					}
					this.state = 3542;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3543;
				this.match(MySqlParser.INTO);
				this.state = 3544;
				this.match(MySqlParser.DUMPFILE);
				this.state = 3545;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 3546;
				this.match(MySqlParser.INTO);
				this.state = 3547;
				this.match(MySqlParser.OUTFILE);
				this.state = 3548;
				(_localctx as SelectIntoTextFileContext)._filename = this.match(MySqlParser.STRING_LITERAL);
				this.state = 3552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CHARACTER) {
					{
					this.state = 3549;
					this.match(MySqlParser.CHARACTER);
					this.state = 3550;
					this.match(MySqlParser.SET);
					this.state = 3551;
					(_localctx as SelectIntoTextFileContext)._charset = this.charsetName();
					}
				}

				this.state = 3560;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 512, this._ctx) ) {
				case 1:
					{
					this.state = 3554;
					(_localctx as SelectIntoTextFileContext)._fieldsFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.COLUMNS || _la === MySqlParser.FIELDS)) {
						(_localctx as SelectIntoTextFileContext)._fieldsFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3556;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3555;
						this.selectFieldsInto();
						}
						}
						this.state = 3558;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === MySqlParser.ENCLOSED || _la === MySqlParser.ESCAPED || _la === MySqlParser.OPTIONALLY || _la === MySqlParser.TERMINATED);
					}
					break;
				}
				this.state = 3568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LINES) {
					{
					this.state = 3562;
					this.match(MySqlParser.LINES);
					this.state = 3564;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3563;
						this.selectLinesInto();
						}
						}
						this.state = 3566;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === MySqlParser.STARTING || _la === MySqlParser.TERMINATED);
					}
				}

				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectFieldsInto(): SelectFieldsIntoContext {
		let _localctx: SelectFieldsIntoContext = new SelectFieldsIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, MySqlParser.RULE_selectFieldsInto);
		let _la: number;
		try {
			this.state = 3584;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.TERMINATED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3572;
				this.match(MySqlParser.TERMINATED);
				this.state = 3573;
				this.match(MySqlParser.BY);
				this.state = 3574;
				_localctx._terminationField = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.ENCLOSED:
			case MySqlParser.OPTIONALLY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.OPTIONALLY) {
					{
					this.state = 3575;
					this.match(MySqlParser.OPTIONALLY);
					}
				}

				this.state = 3578;
				this.match(MySqlParser.ENCLOSED);
				this.state = 3579;
				this.match(MySqlParser.BY);
				this.state = 3580;
				_localctx._enclosion = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.ESCAPED:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3581;
				this.match(MySqlParser.ESCAPED);
				this.state = 3582;
				this.match(MySqlParser.BY);
				this.state = 3583;
				_localctx._escaping = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectLinesInto(): SelectLinesIntoContext {
		let _localctx: SelectLinesIntoContext = new SelectLinesIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, MySqlParser.RULE_selectLinesInto);
		try {
			this.state = 3592;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STARTING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3586;
				this.match(MySqlParser.STARTING);
				this.state = 3587;
				this.match(MySqlParser.BY);
				this.state = 3588;
				_localctx._starting = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.TERMINATED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3589;
				this.match(MySqlParser.TERMINATED);
				this.state = 3590;
				this.match(MySqlParser.BY);
				this.state = 3591;
				_localctx._terminationLine = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let _localctx: FromClauseContext = new FromClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, MySqlParser.RULE_fromClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3594;
			this.match(MySqlParser.FROM);
			this.state = 3595;
			this.tableSources();
			this.state = 3598;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WHERE) {
				{
				this.state = 3596;
				this.match(MySqlParser.WHERE);
				this.state = 3597;
				_localctx._whereExpr = this.expression(0);
				}
			}

			this.state = 3614;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.GROUP) {
				{
				this.state = 3600;
				this.match(MySqlParser.GROUP);
				this.state = 3601;
				this.match(MySqlParser.BY);
				this.state = 3602;
				this.groupByItem();
				this.state = 3607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3603;
					this.match(MySqlParser.COMMA);
					this.state = 3604;
					this.groupByItem();
					}
					}
					this.state = 3609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3612;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 521, this._ctx) ) {
				case 1:
					{
					this.state = 3610;
					this.match(MySqlParser.WITH);
					this.state = 3611;
					this.match(MySqlParser.ROLLUP);
					}
					break;
				}
				}
			}

			this.state = 3618;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.HAVING) {
				{
				this.state = 3616;
				this.match(MySqlParser.HAVING);
				this.state = 3617;
				_localctx._havingExpr = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupByItem(): GroupByItemContext {
		let _localctx: GroupByItemContext = new GroupByItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, MySqlParser.RULE_groupByItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3620;
			this.expression(0);
			this.state = 3622;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 524, this._ctx) ) {
			case 1:
				{
				this.state = 3621;
				_localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC)) {
					_localctx._order = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let _localctx: LimitClauseContext = new LimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, MySqlParser.RULE_limitClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3624;
			this.match(MySqlParser.LIMIT);
			this.state = 3635;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 526, this._ctx) ) {
			case 1:
				{
				this.state = 3628;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 525, this._ctx) ) {
				case 1:
					{
					this.state = 3625;
					_localctx._offset = this.limitClauseAtom();
					this.state = 3626;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 3630;
				_localctx._limit = this.limitClauseAtom();
				}
				break;

			case 2:
				{
				this.state = 3631;
				_localctx._limit = this.limitClauseAtom();
				this.state = 3632;
				this.match(MySqlParser.OFFSET);
				this.state = 3633;
				_localctx._offset = this.limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitClauseAtom(): LimitClauseAtomContext {
		let _localctx: LimitClauseAtomContext = new LimitClauseAtomContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, MySqlParser.RULE_limitClauseAtom);
		try {
			this.state = 3639;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3637;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.LOCAL_ID:
			case MySqlParser.GLOBAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3638;
				this.mysqlVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startTransaction(): StartTransactionContext {
		let _localctx: StartTransactionContext = new StartTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, MySqlParser.RULE_startTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3641;
			this.match(MySqlParser.START);
			this.state = 3642;
			this.match(MySqlParser.TRANSACTION);
			this.state = 3651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.READ || _la === MySqlParser.WITH) {
				{
				this.state = 3643;
				this.transactionMode();
				this.state = 3648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3644;
					this.match(MySqlParser.COMMA);
					this.state = 3645;
					this.transactionMode();
					}
					}
					this.state = 3650;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public beginWork(): BeginWorkContext {
		let _localctx: BeginWorkContext = new BeginWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, MySqlParser.RULE_beginWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3653;
			this.match(MySqlParser.BEGIN);
			this.state = 3655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WORK) {
				{
				this.state = 3654;
				this.match(MySqlParser.WORK);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commitWork(): CommitWorkContext {
		let _localctx: CommitWorkContext = new CommitWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, MySqlParser.RULE_commitWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3657;
			this.match(MySqlParser.COMMIT);
			this.state = 3659;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WORK) {
				{
				this.state = 3658;
				this.match(MySqlParser.WORK);
				}
			}

			this.state = 3666;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AND) {
				{
				this.state = 3661;
				this.match(MySqlParser.AND);
				this.state = 3663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3662;
					_localctx._nochain = this.match(MySqlParser.NO);
					}
				}

				this.state = 3665;
				this.match(MySqlParser.CHAIN);
				}
			}

			this.state = 3672;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 535, this._ctx) ) {
			case 1:
				{
				this.state = 3669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3668;
					_localctx._norelease = this.match(MySqlParser.NO);
					}
				}

				this.state = 3671;
				this.match(MySqlParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollbackWork(): RollbackWorkContext {
		let _localctx: RollbackWorkContext = new RollbackWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, MySqlParser.RULE_rollbackWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3674;
			this.match(MySqlParser.ROLLBACK);
			this.state = 3676;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WORK) {
				{
				this.state = 3675;
				this.match(MySqlParser.WORK);
				}
			}

			this.state = 3683;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AND) {
				{
				this.state = 3678;
				this.match(MySqlParser.AND);
				this.state = 3680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3679;
					_localctx._nochain = this.match(MySqlParser.NO);
					}
				}

				this.state = 3682;
				this.match(MySqlParser.CHAIN);
				}
			}

			this.state = 3689;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 540, this._ctx) ) {
			case 1:
				{
				this.state = 3686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NO) {
					{
					this.state = 3685;
					_localctx._norelease = this.match(MySqlParser.NO);
					}
				}

				this.state = 3688;
				this.match(MySqlParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public savepointStatement(): SavepointStatementContext {
		let _localctx: SavepointStatementContext = new SavepointStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, MySqlParser.RULE_savepointStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3691;
			this.match(MySqlParser.SAVEPOINT);
			this.state = 3692;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollbackStatement(): RollbackStatementContext {
		let _localctx: RollbackStatementContext = new RollbackStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, MySqlParser.RULE_rollbackStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3694;
			this.match(MySqlParser.ROLLBACK);
			this.state = 3696;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WORK) {
				{
				this.state = 3695;
				this.match(MySqlParser.WORK);
				}
			}

			this.state = 3698;
			this.match(MySqlParser.TO);
			this.state = 3700;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 542, this._ctx) ) {
			case 1:
				{
				this.state = 3699;
				this.match(MySqlParser.SAVEPOINT);
				}
				break;
			}
			this.state = 3702;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public releaseStatement(): ReleaseStatementContext {
		let _localctx: ReleaseStatementContext = new ReleaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, MySqlParser.RULE_releaseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3704;
			this.match(MySqlParser.RELEASE);
			this.state = 3705;
			this.match(MySqlParser.SAVEPOINT);
			this.state = 3706;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockTables(): LockTablesContext {
		let _localctx: LockTablesContext = new LockTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, MySqlParser.RULE_lockTables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3708;
			this.match(MySqlParser.LOCK);
			this.state = 3709;
			this.match(MySqlParser.TABLES);
			this.state = 3710;
			this.lockTableElement();
			this.state = 3715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3711;
				this.match(MySqlParser.COMMA);
				this.state = 3712;
				this.lockTableElement();
				}
				}
				this.state = 3717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlockTables(): UnlockTablesContext {
		let _localctx: UnlockTablesContext = new UnlockTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, MySqlParser.RULE_unlockTables);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3718;
			this.match(MySqlParser.UNLOCK);
			this.state = 3719;
			this.match(MySqlParser.TABLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setAutocommitStatement(): SetAutocommitStatementContext {
		let _localctx: SetAutocommitStatementContext = new SetAutocommitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, MySqlParser.RULE_setAutocommitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3721;
			this.match(MySqlParser.SET);
			this.state = 3722;
			this.match(MySqlParser.AUTOCOMMIT);
			this.state = 3723;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 3724;
			_localctx._autocommitValue = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
				_localctx._autocommitValue = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setTransactionStatement(): SetTransactionStatementContext {
		let _localctx: SetTransactionStatementContext = new SetTransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, MySqlParser.RULE_setTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3726;
			this.match(MySqlParser.SET);
			this.state = 3728;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION) {
				{
				this.state = 3727;
				_localctx._transactionContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION)) {
					_localctx._transactionContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3730;
			this.match(MySqlParser.TRANSACTION);
			this.state = 3731;
			this.transactionOption();
			this.state = 3736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3732;
				this.match(MySqlParser.COMMA);
				this.state = 3733;
				this.transactionOption();
				}
				}
				this.state = 3738;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let _localctx: TransactionModeContext = new TransactionModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, MySqlParser.RULE_transactionMode);
		try {
			this.state = 3746;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 546, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3739;
				this.match(MySqlParser.WITH);
				this.state = 3740;
				this.match(MySqlParser.CONSISTENT);
				this.state = 3741;
				this.match(MySqlParser.SNAPSHOT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3742;
				this.match(MySqlParser.READ);
				this.state = 3743;
				this.match(MySqlParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3744;
				this.match(MySqlParser.READ);
				this.state = 3745;
				this.match(MySqlParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockTableElement(): LockTableElementContext {
		let _localctx: LockTableElementContext = new LockTableElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, MySqlParser.RULE_lockTableElement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3748;
			this.tableName();
			this.state = 3753;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AS || _la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 3750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 3749;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3752;
				this.uid();
				}
			}

			this.state = 3755;
			this.lockAction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockAction(): LockActionContext {
		let _localctx: LockActionContext = new LockActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, MySqlParser.RULE_lockAction);
		let _la: number;
		try {
			this.state = 3765;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.READ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3757;
				this.match(MySqlParser.READ);
				this.state = 3759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LOCAL) {
					{
					this.state = 3758;
					this.match(MySqlParser.LOCAL);
					}
				}

				}
				break;
			case MySqlParser.LOW_PRIORITY:
			case MySqlParser.WRITE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LOW_PRIORITY) {
					{
					this.state = 3761;
					this.match(MySqlParser.LOW_PRIORITY);
					}
				}

				this.state = 3764;
				this.match(MySqlParser.WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionOption(): TransactionOptionContext {
		let _localctx: TransactionOptionContext = new TransactionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, MySqlParser.RULE_transactionOption);
		try {
			this.state = 3774;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 552, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3767;
				this.match(MySqlParser.ISOLATION);
				this.state = 3768;
				this.match(MySqlParser.LEVEL);
				this.state = 3769;
				this.transactionLevel();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3770;
				this.match(MySqlParser.READ);
				this.state = 3771;
				this.match(MySqlParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3772;
				this.match(MySqlParser.READ);
				this.state = 3773;
				this.match(MySqlParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionLevel(): TransactionLevelContext {
		let _localctx: TransactionLevelContext = new TransactionLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, MySqlParser.RULE_transactionLevel);
		try {
			this.state = 3783;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 553, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3776;
				this.match(MySqlParser.REPEATABLE);
				this.state = 3777;
				this.match(MySqlParser.READ);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3778;
				this.match(MySqlParser.READ);
				this.state = 3779;
				this.match(MySqlParser.COMMITTED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3780;
				this.match(MySqlParser.READ);
				this.state = 3781;
				this.match(MySqlParser.UNCOMMITTED);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3782;
				this.match(MySqlParser.SERIALIZABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeMaster(): ChangeMasterContext {
		let _localctx: ChangeMasterContext = new ChangeMasterContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, MySqlParser.RULE_changeMaster);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3785;
			this.match(MySqlParser.CHANGE);
			this.state = 3786;
			this.match(MySqlParser.MASTER);
			this.state = 3787;
			this.match(MySqlParser.TO);
			this.state = 3788;
			this.masterOption();
			this.state = 3793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3789;
				this.match(MySqlParser.COMMA);
				this.state = 3790;
				this.masterOption();
				}
				}
				this.state = 3795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3797;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3796;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeReplicationFilter(): ChangeReplicationFilterContext {
		let _localctx: ChangeReplicationFilterContext = new ChangeReplicationFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, MySqlParser.RULE_changeReplicationFilter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3799;
			this.match(MySqlParser.CHANGE);
			this.state = 3800;
			this.match(MySqlParser.REPLICATION);
			this.state = 3801;
			this.match(MySqlParser.FILTER);
			this.state = 3802;
			this.replicationFilter();
			this.state = 3807;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 3803;
				this.match(MySqlParser.COMMA);
				this.state = 3804;
				this.replicationFilter();
				}
				}
				this.state = 3809;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public purgeBinaryLogs(): PurgeBinaryLogsContext {
		let _localctx: PurgeBinaryLogsContext = new PurgeBinaryLogsContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, MySqlParser.RULE_purgeBinaryLogs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3810;
			this.match(MySqlParser.PURGE);
			this.state = 3811;
			_localctx._purgeFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BINARY || _la === MySqlParser.MASTER)) {
				_localctx._purgeFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3812;
			this.match(MySqlParser.LOGS);
			this.state = 3817;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.TO:
				{
				this.state = 3813;
				this.match(MySqlParser.TO);
				this.state = 3814;
				_localctx._fileName = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.BEFORE:
				{
				this.state = 3815;
				this.match(MySqlParser.BEFORE);
				this.state = 3816;
				_localctx._timeValue = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetMaster(): ResetMasterContext {
		let _localctx: ResetMasterContext = new ResetMasterContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, MySqlParser.RULE_resetMaster);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3819;
			this.match(MySqlParser.RESET);
			this.state = 3820;
			this.match(MySqlParser.MASTER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetSlave(): ResetSlaveContext {
		let _localctx: ResetSlaveContext = new ResetSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, MySqlParser.RULE_resetSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3822;
			this.match(MySqlParser.RESET);
			this.state = 3823;
			this.match(MySqlParser.SLAVE);
			this.state = 3825;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ALL) {
				{
				this.state = 3824;
				this.match(MySqlParser.ALL);
				}
			}

			this.state = 3828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3827;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startSlave(): StartSlaveContext {
		let _localctx: StartSlaveContext = new StartSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, MySqlParser.RULE_startSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3830;
			this.match(MySqlParser.START);
			this.state = 3831;
			this.match(MySqlParser.SLAVE);
			this.state = 3840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IO_THREAD || _la === MySqlParser.SQL_THREAD) {
				{
				this.state = 3832;
				this.threadType();
				this.state = 3837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3833;
					this.match(MySqlParser.COMMA);
					this.state = 3834;
					this.threadType();
					}
					}
					this.state = 3839;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.UNTIL) {
				{
				this.state = 3842;
				this.match(MySqlParser.UNTIL);
				this.state = 3843;
				this.untilOption();
				}
			}

			this.state = 3849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.DEFAULT_AUTH || _la === MySqlParser.PASSWORD || _la === MySqlParser.PLUGIN_DIR || _la === MySqlParser.USER) {
				{
				{
				this.state = 3846;
				this.connectionOption();
				}
				}
				this.state = 3851;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 3852;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopSlave(): StopSlaveContext {
		let _localctx: StopSlaveContext = new StopSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, MySqlParser.RULE_stopSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3855;
			this.match(MySqlParser.STOP);
			this.state = 3856;
			this.match(MySqlParser.SLAVE);
			this.state = 3865;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IO_THREAD || _la === MySqlParser.SQL_THREAD) {
				{
				this.state = 3857;
				this.threadType();
				this.state = 3862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3858;
					this.match(MySqlParser.COMMA);
					this.state = 3859;
					this.threadType();
					}
					}
					this.state = 3864;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startGroupReplication(): StartGroupReplicationContext {
		let _localctx: StartGroupReplicationContext = new StartGroupReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, MySqlParser.RULE_startGroupReplication);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3867;
			this.match(MySqlParser.START);
			this.state = 3868;
			this.match(MySqlParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopGroupReplication(): StopGroupReplicationContext {
		let _localctx: StopGroupReplicationContext = new StopGroupReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, MySqlParser.RULE_stopGroupReplication);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3870;
			this.match(MySqlParser.STOP);
			this.state = 3871;
			this.match(MySqlParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public masterOption(): MasterOptionContext {
		let _localctx: MasterOptionContext = new MasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, MySqlParser.RULE_masterOption);
		let _la: number;
		try {
			this.state = 3902;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.MASTER_BIND:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3873;
				this.stringMasterOption();
				this.state = 3874;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3875;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3877;
				this.decimalMasterOption();
				this.state = 3878;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3879;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3881;
				this.boolMasterOption();
				this.state = 3882;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3883;
				(_localctx as MasterBoolOptionContext)._boolVal = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ZERO_DECIMAL || _la === MySqlParser.ONE_DECIMAL)) {
					(_localctx as MasterBoolOptionContext)._boolVal = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3885;
				this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
				this.state = 3886;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3887;
				this.match(MySqlParser.REAL_LITERAL);
				}
				break;
			case MySqlParser.IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3888;
				this.match(MySqlParser.IGNORE_SERVER_IDS);
				this.state = 3889;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3890;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3899;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
					{
					this.state = 3891;
					this.uid();
					this.state = 3896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.COMMA) {
						{
						{
						this.state = 3892;
						this.match(MySqlParser.COMMA);
						this.state = 3893;
						this.uid();
						}
						}
						this.state = 3898;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3901;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringMasterOption(): StringMasterOptionContext {
		let _localctx: StringMasterOptionContext = new StringMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, MySqlParser.RULE_stringMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3904;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.MASTER_BIND || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & ((1 << (MySqlParser.MASTER_HOST - 392)) | (1 << (MySqlParser.MASTER_LOG_FILE - 392)) | (1 << (MySqlParser.MASTER_PASSWORD - 392)) | (1 << (MySqlParser.MASTER_SSL_CA - 392)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 392)) | (1 << (MySqlParser.MASTER_SSL_CERT - 392)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 392)) | (1 << (MySqlParser.MASTER_SSL_CRL - 392)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 392)) | (1 << (MySqlParser.MASTER_SSL_KEY - 392)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 392)) | (1 << (MySqlParser.MASTER_USER - 392)))) !== 0) || _la === MySqlParser.RELAY_LOG_FILE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalMasterOption(): DecimalMasterOptionContext {
		let _localctx: DecimalMasterOptionContext = new DecimalMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, MySqlParser.RULE_decimalMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3906;
			_la = this._input.LA(1);
			if (!(((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 389)) | (1 << (MySqlParser.MASTER_DELAY - 389)) | (1 << (MySqlParser.MASTER_LOG_POS - 389)) | (1 << (MySqlParser.MASTER_PORT - 389)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 389)))) !== 0) || _la === MySqlParser.RELAY_LOG_POS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boolMasterOption(): BoolMasterOptionContext {
		let _localctx: BoolMasterOptionContext = new BoolMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, MySqlParser.RULE_boolMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3908;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT || _la === MySqlParser.MASTER_AUTO_POSITION || _la === MySqlParser.MASTER_SSL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public channelOption(): ChannelOptionContext {
		let _localctx: ChannelOptionContext = new ChannelOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, MySqlParser.RULE_channelOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3910;
			this.match(MySqlParser.FOR);
			this.state = 3911;
			this.match(MySqlParser.CHANNEL);
			this.state = 3912;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationFilter(): ReplicationFilterContext {
		let _localctx: ReplicationFilterContext = new ReplicationFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, MySqlParser.RULE_replicationFilter);
		let _la: number;
		try {
			this.state = 3963;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3914;
				this.match(MySqlParser.REPLICATE_DO_DB);
				this.state = 3915;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3916;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3917;
				this.uidList();
				this.state = 3918;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3920;
				this.match(MySqlParser.REPLICATE_IGNORE_DB);
				this.state = 3921;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3922;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3923;
				this.uidList();
				this.state = 3924;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3926;
				this.match(MySqlParser.REPLICATE_DO_TABLE);
				this.state = 3927;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3928;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3929;
				this.tables();
				this.state = 3930;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3932;
				this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
				this.state = 3933;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3934;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3935;
				this.tables();
				this.state = 3936;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3938;
				this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
				this.state = 3939;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3940;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3941;
				this.simpleStrings();
				this.state = 3942;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3944;
				this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
				this.state = 3945;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3946;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3947;
				this.simpleStrings();
				this.state = 3948;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case MySqlParser.REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3950;
				this.match(MySqlParser.REPLICATE_REWRITE_DB);
				this.state = 3951;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3952;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3953;
				this.tablePair();
				this.state = 3958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 3954;
					this.match(MySqlParser.COMMA);
					this.state = 3955;
					this.tablePair();
					}
					}
					this.state = 3960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3961;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablePair(): TablePairContext {
		let _localctx: TablePairContext = new TablePairContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, MySqlParser.RULE_tablePair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3965;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 3966;
			_localctx._firstTable = this.tableName();
			this.state = 3967;
			this.match(MySqlParser.COMMA);
			this.state = 3968;
			_localctx._secondTable = this.tableName();
			this.state = 3969;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public threadType(): ThreadTypeContext {
		let _localctx: ThreadTypeContext = new ThreadTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, MySqlParser.RULE_threadType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3971;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.IO_THREAD || _la === MySqlParser.SQL_THREAD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public untilOption(): UntilOptionContext {
		let _localctx: UntilOptionContext = new UntilOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, MySqlParser.RULE_untilOption);
		let _la: number;
		try {
			this.state = 3991;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3973;
				(_localctx as GtidsUntilOptionContext)._gtids = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SQL_AFTER_GTIDS || _la === MySqlParser.SQL_BEFORE_GTIDS)) {
					(_localctx as GtidsUntilOptionContext)._gtids = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3974;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3975;
				this.gtuidSet();
				}
				break;
			case MySqlParser.MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3976;
				this.match(MySqlParser.MASTER_LOG_FILE);
				this.state = 3977;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3978;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 3979;
				this.match(MySqlParser.COMMA);
				this.state = 3980;
				this.match(MySqlParser.MASTER_LOG_POS);
				this.state = 3981;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3982;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3983;
				this.match(MySqlParser.RELAY_LOG_FILE);
				this.state = 3984;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3985;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 3986;
				this.match(MySqlParser.COMMA);
				this.state = 3987;
				this.match(MySqlParser.RELAY_LOG_POS);
				this.state = 3988;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3989;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3990;
				this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public connectionOption(): ConnectionOptionContext {
		let _localctx: ConnectionOptionContext = new ConnectionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, MySqlParser.RULE_connectionOption);
		try {
			this.state = 4005;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3993;
				this.match(MySqlParser.USER);
				this.state = 3994;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3995;
				(_localctx as UserConnectionOptionContext)._conOptUser = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3996;
				this.match(MySqlParser.PASSWORD);
				this.state = 3997;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 3998;
				(_localctx as PasswordConnectionOptionContext)._conOptPassword = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3999;
				this.match(MySqlParser.DEFAULT_AUTH);
				this.state = 4000;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4001;
				(_localctx as DefaultAuthConnectionOptionContext)._conOptDefAuth = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4002;
				this.match(MySqlParser.PLUGIN_DIR);
				this.state = 4003;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4004;
				(_localctx as PluginDirConnectionOptionContext)._conOptPluginDir = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public gtuidSet(): GtuidSetContext {
		let _localctx: GtuidSetContext = new GtuidSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, MySqlParser.RULE_gtuidSet);
		let _la: number;
		try {
			this.state = 4016;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4007;
				this.uuidSet();
				this.state = 4012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4008;
					this.match(MySqlParser.COMMA);
					this.state = 4009;
					this.uuidSet();
					}
					}
					this.state = 4014;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MySqlParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4015;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaStartTransaction(): XaStartTransactionContext {
		let _localctx: XaStartTransactionContext = new XaStartTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, MySqlParser.RULE_xaStartTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4018;
			this.match(MySqlParser.XA);
			this.state = 4019;
			_localctx._xaStart = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.BEGIN || _la === MySqlParser.START)) {
				_localctx._xaStart = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4020;
			this.xid();
			this.state = 4022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.JOIN || _la === MySqlParser.RESUME) {
				{
				this.state = 4021;
				_localctx._xaAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.JOIN || _la === MySqlParser.RESUME)) {
					_localctx._xaAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaEndTransaction(): XaEndTransactionContext {
		let _localctx: XaEndTransactionContext = new XaEndTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, MySqlParser.RULE_xaEndTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4024;
			this.match(MySqlParser.XA);
			this.state = 4025;
			this.match(MySqlParser.END);
			this.state = 4026;
			this.xid();
			this.state = 4032;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.SUSPEND) {
				{
				this.state = 4027;
				this.match(MySqlParser.SUSPEND);
				this.state = 4030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 4028;
					this.match(MySqlParser.FOR);
					this.state = 4029;
					this.match(MySqlParser.MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaPrepareStatement(): XaPrepareStatementContext {
		let _localctx: XaPrepareStatementContext = new XaPrepareStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, MySqlParser.RULE_xaPrepareStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4034;
			this.match(MySqlParser.XA);
			this.state = 4035;
			this.match(MySqlParser.PREPARE);
			this.state = 4036;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaCommitWork(): XaCommitWorkContext {
		let _localctx: XaCommitWorkContext = new XaCommitWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, MySqlParser.RULE_xaCommitWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4038;
			this.match(MySqlParser.XA);
			this.state = 4039;
			this.match(MySqlParser.COMMIT);
			this.state = 4040;
			this.xid();
			this.state = 4043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ONE) {
				{
				this.state = 4041;
				this.match(MySqlParser.ONE);
				this.state = 4042;
				this.match(MySqlParser.PHASE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaRollbackWork(): XaRollbackWorkContext {
		let _localctx: XaRollbackWorkContext = new XaRollbackWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, MySqlParser.RULE_xaRollbackWork);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4045;
			this.match(MySqlParser.XA);
			this.state = 4046;
			this.match(MySqlParser.ROLLBACK);
			this.state = 4047;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaRecoverWork(): XaRecoverWorkContext {
		let _localctx: XaRecoverWorkContext = new XaRecoverWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, MySqlParser.RULE_xaRecoverWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4049;
			this.match(MySqlParser.XA);
			this.state = 4050;
			this.match(MySqlParser.RECOVER);
			this.state = 4053;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CONVERT) {
				{
				this.state = 4051;
				this.match(MySqlParser.CONVERT);
				this.state = 4052;
				this.xid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prepareStatement(): PrepareStatementContext {
		let _localctx: PrepareStatementContext = new PrepareStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, MySqlParser.RULE_prepareStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4055;
			this.match(MySqlParser.PREPARE);
			this.state = 4056;
			this.uid();
			this.state = 4057;
			this.match(MySqlParser.FROM);
			this.state = 4060;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STRING_LITERAL:
				{
				this.state = 4058;
				_localctx._query = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.LOCAL_ID:
				{
				this.state = 4059;
				_localctx._variable = this.match(MySqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeStatement(): ExecuteStatementContext {
		let _localctx: ExecuteStatementContext = new ExecuteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, MySqlParser.RULE_executeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4062;
			this.match(MySqlParser.EXECUTE);
			this.state = 4063;
			this.uid();
			this.state = 4066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.USING) {
				{
				this.state = 4064;
				this.match(MySqlParser.USING);
				this.state = 4065;
				this.userVariables();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deallocatePrepare(): DeallocatePrepareContext {
		let _localctx: DeallocatePrepareContext = new DeallocatePrepareContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, MySqlParser.RULE_deallocatePrepare);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4068;
			_localctx._dropFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DROP || _la === MySqlParser.DEALLOCATE)) {
				_localctx._dropFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4069;
			this.match(MySqlParser.PREPARE);
			this.state = 4070;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineBody(): RoutineBodyContext {
		let _localctx: RoutineBodyContext = new RoutineBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, MySqlParser.RULE_routineBody);
		try {
			this.state = 4074;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 583, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4072;
				this.blockStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4073;
				this.sqlStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockStatement(): BlockStatementContext {
		let _localctx: BlockStatementContext = new BlockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, MySqlParser.RULE_blockStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4079;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 584, this._ctx) ) {
			case 1:
				{
				this.state = 4076;
				this.uid();
				this.state = 4077;
				this.match(MySqlParser.COLON_SYMB);
				}
				break;
			}
			this.state = 4081;
			this.match(MySqlParser.BEGIN);
			this.state = 4120;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 590, this._ctx) ) {
			case 1:
				{
				this.state = 4087;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4082;
						this.declareVariable();
						this.state = 4083;
						this.match(MySqlParser.SEMI);
						}
						}
					}
					this.state = 4089;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 585, this._ctx);
				}
				this.state = 4095;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4090;
						this.declareCondition();
						this.state = 4091;
						this.match(MySqlParser.SEMI);
						}
						}
					}
					this.state = 4097;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 586, this._ctx);
				}
				this.state = 4103;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 587, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4098;
						this.declareCursor();
						this.state = 4099;
						this.match(MySqlParser.SEMI);
						}
						}
					}
					this.state = 4105;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 587, this._ctx);
				}
				this.state = 4111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.DECLARE) {
					{
					{
					this.state = 4106;
					this.declareHandler();
					this.state = 4107;
					this.match(MySqlParser.SEMI);
					}
					}
					this.state = 4113;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4117;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4114;
						this.procedureSqlStatement();
						}
						}
					}
					this.state = 4119;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 589, this._ctx);
				}
				}
				break;
			}
			this.state = 4122;
			this.match(MySqlParser.END);
			this.state = 4124;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 591, this._ctx) ) {
			case 1:
				{
				this.state = 4123;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseStatement(): CaseStatementContext {
		let _localctx: CaseStatementContext = new CaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, MySqlParser.RULE_caseStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4126;
			this.match(MySqlParser.CASE);
			this.state = 4129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 592, this._ctx) ) {
			case 1:
				{
				this.state = 4127;
				this.uid();
				}
				break;

			case 2:
				{
				this.state = 4128;
				this.expression(0);
				}
				break;
			}
			this.state = 4132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4131;
				this.caseAlternative();
				}
				}
				this.state = 4134;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MySqlParser.WHEN);
			this.state = 4142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ELSE) {
				{
				this.state = 4136;
				this.match(MySqlParser.ELSE);
				this.state = 4138;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4137;
						this.procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4140;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 594, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4144;
			this.match(MySqlParser.END);
			this.state = 4145;
			this.match(MySqlParser.CASE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let _localctx: IfStatementContext = new IfStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, MySqlParser.RULE_ifStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4147;
			this.match(MySqlParser.IF);
			this.state = 4148;
			this.expression(0);
			this.state = 4149;
			this.match(MySqlParser.THEN);
			this.state = 4151;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4150;
					_localctx._procedureSqlStatement = this.procedureSqlStatement();
					_localctx._thenStatements.push(_localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4153;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 596, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.ELSEIF) {
				{
				{
				this.state = 4155;
				this.elifAlternative();
				}
				}
				this.state = 4160;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ELSE) {
				{
				this.state = 4161;
				this.match(MySqlParser.ELSE);
				this.state = 4163;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4162;
						_localctx._procedureSqlStatement = this.procedureSqlStatement();
						_localctx._elseStatements.push(_localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4165;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 598, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4169;
			this.match(MySqlParser.END);
			this.state = 4170;
			this.match(MySqlParser.IF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public iterateStatement(): IterateStatementContext {
		let _localctx: IterateStatementContext = new IterateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, MySqlParser.RULE_iterateStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4172;
			this.match(MySqlParser.ITERATE);
			this.state = 4173;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leaveStatement(): LeaveStatementContext {
		let _localctx: LeaveStatementContext = new LeaveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, MySqlParser.RULE_leaveStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4175;
			this.match(MySqlParser.LEAVE);
			this.state = 4176;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loopStatement(): LoopStatementContext {
		let _localctx: LoopStatementContext = new LoopStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, MySqlParser.RULE_loopStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 4178;
				this.uid();
				this.state = 4179;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4183;
			this.match(MySqlParser.LOOP);
			this.state = 4185;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4184;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4187;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 601, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4189;
			this.match(MySqlParser.END);
			this.state = 4190;
			this.match(MySqlParser.LOOP);
			this.state = 4192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 4191;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repeatStatement(): RepeatStatementContext {
		let _localctx: RepeatStatementContext = new RepeatStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, MySqlParser.RULE_repeatStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 4194;
				this.uid();
				this.state = 4195;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4199;
			this.match(MySqlParser.REPEAT);
			this.state = 4201;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4200;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4203;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 604, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4205;
			this.match(MySqlParser.UNTIL);
			this.state = 4206;
			this.expression(0);
			this.state = 4207;
			this.match(MySqlParser.END);
			this.state = 4208;
			this.match(MySqlParser.REPEAT);
			this.state = 4210;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 4209;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let _localctx: ReturnStatementContext = new ReturnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, MySqlParser.RULE_returnStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4212;
			this.match(MySqlParser.RETURN);
			this.state = 4213;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whileStatement(): WhileStatementContext {
		let _localctx: WhileStatementContext = new WhileStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, MySqlParser.RULE_whileStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 4215;
				this.uid();
				this.state = 4216;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4220;
			this.match(MySqlParser.WHILE);
			this.state = 4221;
			this.expression(0);
			this.state = 4222;
			this.match(MySqlParser.DO);
			this.state = 4224;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4223;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4226;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4228;
			this.match(MySqlParser.END);
			this.state = 4229;
			this.match(MySqlParser.WHILE);
			this.state = 4231;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MySqlParser.COUNT - 222)) | (1 << (MySqlParser.POSITION - 222)) | (1 << (MySqlParser.ACCOUNT - 222)))) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & ((1 << (MySqlParser.ACTION - 254)) | (1 << (MySqlParser.AFTER - 254)) | (1 << (MySqlParser.AGGREGATE - 254)) | (1 << (MySqlParser.ALGORITHM - 254)) | (1 << (MySqlParser.ANY - 254)) | (1 << (MySqlParser.AT - 254)) | (1 << (MySqlParser.AUTHORS - 254)) | (1 << (MySqlParser.AUTOCOMMIT - 254)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 254)) | (1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.BEGIN - 254)) | (1 << (MySqlParser.BINLOG - 254)) | (1 << (MySqlParser.BIT - 254)) | (1 << (MySqlParser.BLOCK - 254)) | (1 << (MySqlParser.BOOL - 254)) | (1 << (MySqlParser.BOOLEAN - 254)) | (1 << (MySqlParser.BTREE - 254)) | (1 << (MySqlParser.CACHE - 254)) | (1 << (MySqlParser.CASCADED - 254)) | (1 << (MySqlParser.CHAIN - 254)) | (1 << (MySqlParser.CHANGED - 254)) | (1 << (MySqlParser.CHANNEL - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.PAGE_CHECKSUM - 254)) | (1 << (MySqlParser.CIPHER - 254)) | (1 << (MySqlParser.CLASS_ORIGIN - 254)) | (1 << (MySqlParser.CLIENT - 254)) | (1 << (MySqlParser.CLOSE - 254)) | (1 << (MySqlParser.COALESCE - 254)) | (1 << (MySqlParser.CODE - 254)) | (1 << (MySqlParser.COLUMNS - 254)))) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MySqlParser.COLUMN_FORMAT - 286)) | (1 << (MySqlParser.COLUMN_NAME - 286)) | (1 << (MySqlParser.COMMENT - 286)) | (1 << (MySqlParser.COMMIT - 286)) | (1 << (MySqlParser.COMPACT - 286)) | (1 << (MySqlParser.COMPLETION - 286)) | (1 << (MySqlParser.COMPRESSED - 286)) | (1 << (MySqlParser.COMPRESSION - 286)) | (1 << (MySqlParser.CONCURRENT - 286)) | (1 << (MySqlParser.CONNECTION - 286)) | (1 << (MySqlParser.CONSISTENT - 286)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 286)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 286)) | (1 << (MySqlParser.CONSTRAINT_NAME - 286)) | (1 << (MySqlParser.CONTAINS - 286)) | (1 << (MySqlParser.CONTEXT - 286)) | (1 << (MySqlParser.CONTRIBUTORS - 286)) | (1 << (MySqlParser.COPY - 286)) | (1 << (MySqlParser.CPU - 286)) | (1 << (MySqlParser.DATA - 286)) | (1 << (MySqlParser.DATAFILE - 286)) | (1 << (MySqlParser.DEALLOCATE - 286)) | (1 << (MySqlParser.DEFAULT_AUTH - 286)) | (1 << (MySqlParser.DEFINER - 286)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 286)) | (1 << (MySqlParser.DES_KEY_FILE - 286)) | (1 << (MySqlParser.DIRECTORY - 286)) | (1 << (MySqlParser.DISABLE - 286)) | (1 << (MySqlParser.DISCARD - 286)) | (1 << (MySqlParser.DISK - 286)) | (1 << (MySqlParser.DO - 286)) | (1 << (MySqlParser.DUMPFILE - 286)))) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & ((1 << (MySqlParser.DUPLICATE - 318)) | (1 << (MySqlParser.DYNAMIC - 318)) | (1 << (MySqlParser.ENABLE - 318)) | (1 << (MySqlParser.ENCRYPTION - 318)) | (1 << (MySqlParser.END - 318)) | (1 << (MySqlParser.ENDS - 318)) | (1 << (MySqlParser.ENGINE - 318)) | (1 << (MySqlParser.ENGINES - 318)) | (1 << (MySqlParser.ERROR - 318)) | (1 << (MySqlParser.ERRORS - 318)) | (1 << (MySqlParser.ESCAPE - 318)) | (1 << (MySqlParser.EVEN - 318)) | (1 << (MySqlParser.EVENT - 318)) | (1 << (MySqlParser.EVENTS - 318)) | (1 << (MySqlParser.EVERY - 318)) | (1 << (MySqlParser.EXCHANGE - 318)) | (1 << (MySqlParser.EXCLUSIVE - 318)) | (1 << (MySqlParser.EXPIRE - 318)) | (1 << (MySqlParser.EXPORT - 318)) | (1 << (MySqlParser.EXTENDED - 318)) | (1 << (MySqlParser.EXTENT_SIZE - 318)) | (1 << (MySqlParser.FAST - 318)) | (1 << (MySqlParser.FAULTS - 318)) | (1 << (MySqlParser.FIELDS - 318)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 318)) | (1 << (MySqlParser.FILTER - 318)) | (1 << (MySqlParser.FIRST - 318)) | (1 << (MySqlParser.FIXED - 318)) | (1 << (MySqlParser.FLUSH - 318)) | (1 << (MySqlParser.FOLLOWS - 318)) | (1 << (MySqlParser.FOUND - 318)) | (1 << (MySqlParser.FULL - 318)))) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & ((1 << (MySqlParser.FUNCTION - 350)) | (1 << (MySqlParser.GENERAL - 350)) | (1 << (MySqlParser.GLOBAL - 350)) | (1 << (MySqlParser.GRANTS - 350)) | (1 << (MySqlParser.GROUP_REPLICATION - 350)) | (1 << (MySqlParser.HANDLER - 350)) | (1 << (MySqlParser.HASH - 350)) | (1 << (MySqlParser.HELP - 350)) | (1 << (MySqlParser.HOST - 350)) | (1 << (MySqlParser.HOSTS - 350)) | (1 << (MySqlParser.IDENTIFIED - 350)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 350)) | (1 << (MySqlParser.IMPORT - 350)) | (1 << (MySqlParser.INDEXES - 350)) | (1 << (MySqlParser.INITIAL_SIZE - 350)) | (1 << (MySqlParser.INPLACE - 350)) | (1 << (MySqlParser.INSERT_METHOD - 350)) | (1 << (MySqlParser.INSTALL - 350)) | (1 << (MySqlParser.INSTANCE - 350)) | (1 << (MySqlParser.INVISIBLE - 350)) | (1 << (MySqlParser.INVOKER - 350)) | (1 << (MySqlParser.IO - 350)) | (1 << (MySqlParser.IO_THREAD - 350)) | (1 << (MySqlParser.IPC - 350)) | (1 << (MySqlParser.ISOLATION - 350)) | (1 << (MySqlParser.ISSUER - 350)) | (1 << (MySqlParser.JSON - 350)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 350)) | (1 << (MySqlParser.LANGUAGE - 350)) | (1 << (MySqlParser.LAST - 350)) | (1 << (MySqlParser.LEAVES - 350)) | (1 << (MySqlParser.LESS - 350)))) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & ((1 << (MySqlParser.LEVEL - 382)) | (1 << (MySqlParser.LIST - 382)) | (1 << (MySqlParser.LOCAL - 382)) | (1 << (MySqlParser.LOGFILE - 382)) | (1 << (MySqlParser.LOGS - 382)) | (1 << (MySqlParser.MASTER - 382)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 382)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 382)) | (1 << (MySqlParser.MASTER_DELAY - 382)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 382)) | (1 << (MySqlParser.MASTER_HOST - 382)) | (1 << (MySqlParser.MASTER_LOG_FILE - 382)) | (1 << (MySqlParser.MASTER_LOG_POS - 382)) | (1 << (MySqlParser.MASTER_PASSWORD - 382)) | (1 << (MySqlParser.MASTER_PORT - 382)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 382)) | (1 << (MySqlParser.MASTER_SSL - 382)) | (1 << (MySqlParser.MASTER_SSL_CA - 382)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_CERT - 382)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 382)) | (1 << (MySqlParser.MASTER_SSL_CRL - 382)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 382)) | (1 << (MySqlParser.MASTER_SSL_KEY - 382)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 382)) | (1 << (MySqlParser.MASTER_USER - 382)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_ROWS - 382)) | (1 << (MySqlParser.MAX_SIZE - 382)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 382)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 382)))) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & ((1 << (MySqlParser.MEDIUM - 414)) | (1 << (MySqlParser.MERGE - 414)) | (1 << (MySqlParser.MESSAGE_TEXT - 414)) | (1 << (MySqlParser.MID - 414)) | (1 << (MySqlParser.MIGRATE - 414)) | (1 << (MySqlParser.MIN_ROWS - 414)) | (1 << (MySqlParser.MODE - 414)) | (1 << (MySqlParser.MODIFY - 414)) | (1 << (MySqlParser.MUTEX - 414)) | (1 << (MySqlParser.MYSQL - 414)) | (1 << (MySqlParser.MYSQL_ERRNO - 414)) | (1 << (MySqlParser.NAME - 414)) | (1 << (MySqlParser.NAMES - 414)) | (1 << (MySqlParser.NCHAR - 414)) | (1 << (MySqlParser.NEVER - 414)) | (1 << (MySqlParser.NEXT - 414)) | (1 << (MySqlParser.NO - 414)) | (1 << (MySqlParser.NODEGROUP - 414)) | (1 << (MySqlParser.NONE - 414)) | (1 << (MySqlParser.OFFLINE - 414)) | (1 << (MySqlParser.OFFSET - 414)) | (1 << (MySqlParser.OJ - 414)) | (1 << (MySqlParser.OLD_PASSWORD - 414)) | (1 << (MySqlParser.ONE - 414)) | (1 << (MySqlParser.ONLINE - 414)) | (1 << (MySqlParser.ONLY - 414)) | (1 << (MySqlParser.OPEN - 414)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 414)) | (1 << (MySqlParser.OPTIONS - 414)) | (1 << (MySqlParser.OWNER - 414)) | (1 << (MySqlParser.PACK_KEYS - 414)) | (1 << (MySqlParser.PAGE - 414)))) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & ((1 << (MySqlParser.PARSER - 446)) | (1 << (MySqlParser.PARTIAL - 446)) | (1 << (MySqlParser.PARTITIONING - 446)) | (1 << (MySqlParser.PARTITIONS - 446)) | (1 << (MySqlParser.PASSWORD - 446)) | (1 << (MySqlParser.PHASE - 446)) | (1 << (MySqlParser.PLUGIN - 446)) | (1 << (MySqlParser.PLUGIN_DIR - 446)) | (1 << (MySqlParser.PLUGINS - 446)) | (1 << (MySqlParser.PORT - 446)) | (1 << (MySqlParser.PRECEDES - 446)) | (1 << (MySqlParser.PREPARE - 446)) | (1 << (MySqlParser.PRESERVE - 446)) | (1 << (MySqlParser.PREV - 446)) | (1 << (MySqlParser.PROCESSLIST - 446)) | (1 << (MySqlParser.PROFILE - 446)) | (1 << (MySqlParser.PROFILES - 446)) | (1 << (MySqlParser.PROXY - 446)) | (1 << (MySqlParser.QUERY - 446)) | (1 << (MySqlParser.QUICK - 446)) | (1 << (MySqlParser.REBUILD - 446)) | (1 << (MySqlParser.RECOVER - 446)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 446)) | (1 << (MySqlParser.REDUNDANT - 446)) | (1 << (MySqlParser.RELAY - 446)) | (1 << (MySqlParser.RELAY_LOG_FILE - 446)) | (1 << (MySqlParser.RELAY_LOG_POS - 446)) | (1 << (MySqlParser.RELAYLOG - 446)) | (1 << (MySqlParser.REMOVE - 446)) | (1 << (MySqlParser.REORGANIZE - 446)) | (1 << (MySqlParser.REPAIR - 446)) | (1 << (MySqlParser.REPLICATE_DO_DB - 446)))) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & ((1 << (MySqlParser.REPLICATE_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 478)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 478)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 478)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 478)) | (1 << (MySqlParser.REPLICATION - 478)) | (1 << (MySqlParser.RESET - 478)) | (1 << (MySqlParser.RESUME - 478)) | (1 << (MySqlParser.RETURNS - 478)) | (1 << (MySqlParser.ROLLBACK - 478)) | (1 << (MySqlParser.ROLLUP - 478)) | (1 << (MySqlParser.ROTATE - 478)) | (1 << (MySqlParser.ROW - 478)) | (1 << (MySqlParser.ROWS - 478)) | (1 << (MySqlParser.ROW_FORMAT - 478)) | (1 << (MySqlParser.SAVEPOINT - 478)) | (1 << (MySqlParser.SCHEDULE - 478)) | (1 << (MySqlParser.SECURITY - 478)) | (1 << (MySqlParser.SERVER - 478)) | (1 << (MySqlParser.SESSION - 478)) | (1 << (MySqlParser.SHARE - 478)) | (1 << (MySqlParser.SHARED - 478)) | (1 << (MySqlParser.SIGNED - 478)) | (1 << (MySqlParser.SIMPLE - 478)) | (1 << (MySqlParser.SLAVE - 478)) | (1 << (MySqlParser.SLOW - 478)) | (1 << (MySqlParser.SNAPSHOT - 478)) | (1 << (MySqlParser.SOCKET - 478)) | (1 << (MySqlParser.SOME - 478)) | (1 << (MySqlParser.SONAME - 478)) | (1 << (MySqlParser.SOUNDS - 478)))) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & ((1 << (MySqlParser.SOURCE - 510)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 510)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 510)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 510)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 510)) | (1 << (MySqlParser.SQL_CACHE - 510)) | (1 << (MySqlParser.SQL_NO_CACHE - 510)) | (1 << (MySqlParser.SQL_THREAD - 510)) | (1 << (MySqlParser.START - 510)) | (1 << (MySqlParser.STARTS - 510)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 510)) | (1 << (MySqlParser.STATS_PERSISTENT - 510)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 510)) | (1 << (MySqlParser.STATUS - 510)) | (1 << (MySqlParser.STOP - 510)) | (1 << (MySqlParser.STORAGE - 510)) | (1 << (MySqlParser.STRING - 510)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 510)) | (1 << (MySqlParser.SUBJECT - 510)) | (1 << (MySqlParser.SUBPARTITION - 510)) | (1 << (MySqlParser.SUBPARTITIONS - 510)) | (1 << (MySqlParser.SUSPEND - 510)) | (1 << (MySqlParser.SWAPS - 510)) | (1 << (MySqlParser.SWITCHES - 510)) | (1 << (MySqlParser.TABLE_NAME - 510)) | (1 << (MySqlParser.TABLESPACE - 510)) | (1 << (MySqlParser.TEMPORARY - 510)) | (1 << (MySqlParser.TEMPTABLE - 510)) | (1 << (MySqlParser.THAN - 510)) | (1 << (MySqlParser.TRADITIONAL - 510)) | (1 << (MySqlParser.TRANSACTION - 510)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (MySqlParser.TRIGGERS - 542)) | (1 << (MySqlParser.TRUNCATE - 542)) | (1 << (MySqlParser.UNDEFINED - 542)) | (1 << (MySqlParser.UNDOFILE - 542)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 542)) | (1 << (MySqlParser.UNINSTALL - 542)) | (1 << (MySqlParser.UNKNOWN - 542)) | (1 << (MySqlParser.UNTIL - 542)) | (1 << (MySqlParser.UPGRADE - 542)) | (1 << (MySqlParser.USER - 542)) | (1 << (MySqlParser.USE_FRM - 542)) | (1 << (MySqlParser.USER_RESOURCES - 542)) | (1 << (MySqlParser.VALIDATION - 542)) | (1 << (MySqlParser.VALUE - 542)) | (1 << (MySqlParser.VARIABLES - 542)) | (1 << (MySqlParser.VIEW - 542)) | (1 << (MySqlParser.VISIBLE - 542)) | (1 << (MySqlParser.WAIT - 542)) | (1 << (MySqlParser.WARNINGS - 542)) | (1 << (MySqlParser.WITHOUT - 542)) | (1 << (MySqlParser.WORK - 542)) | (1 << (MySqlParser.WRAPPER - 542)) | (1 << (MySqlParser.X509 - 542)) | (1 << (MySqlParser.XA - 542)) | (1 << (MySqlParser.XML - 542)) | (1 << (MySqlParser.INTERNAL - 542)) | (1 << (MySqlParser.QUARTER - 542)))) !== 0) || ((((_la - 574)) & ~0x1F) === 0 && ((1 << (_la - 574)) & ((1 << (MySqlParser.MONTH - 574)) | (1 << (MySqlParser.DAY - 574)) | (1 << (MySqlParser.HOUR - 574)) | (1 << (MySqlParser.MINUTE - 574)) | (1 << (MySqlParser.WEEK - 574)) | (1 << (MySqlParser.SECOND - 574)) | (1 << (MySqlParser.MICROSECOND - 574)) | (1 << (MySqlParser.TABLES - 574)) | (1 << (MySqlParser.ROUTINE - 574)) | (1 << (MySqlParser.EXECUTE - 574)) | (1 << (MySqlParser.FILE - 574)) | (1 << (MySqlParser.PROCESS - 574)) | (1 << (MySqlParser.RELOAD - 574)) | (1 << (MySqlParser.SHUTDOWN - 574)) | (1 << (MySqlParser.SUPER - 574)) | (1 << (MySqlParser.PRIVILEGES - 574)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 574)) | (1 << (MySqlParser.ARMSCII8 - 574)) | (1 << (MySqlParser.ASCII - 574)) | (1 << (MySqlParser.BIG5 - 574)) | (1 << (MySqlParser.CP1250 - 574)) | (1 << (MySqlParser.CP1251 - 574)) | (1 << (MySqlParser.CP1256 - 574)) | (1 << (MySqlParser.CP1257 - 574)) | (1 << (MySqlParser.CP850 - 574)) | (1 << (MySqlParser.CP852 - 574)) | (1 << (MySqlParser.CP866 - 574)) | (1 << (MySqlParser.CP932 - 574)) | (1 << (MySqlParser.DEC8 - 574)) | (1 << (MySqlParser.EUCJPMS - 574)) | (1 << (MySqlParser.EUCKR - 574)) | (1 << (MySqlParser.GB2312 - 574)))) !== 0) || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & ((1 << (MySqlParser.GBK - 606)) | (1 << (MySqlParser.GEOSTD8 - 606)) | (1 << (MySqlParser.GREEK - 606)) | (1 << (MySqlParser.HEBREW - 606)) | (1 << (MySqlParser.HP8 - 606)) | (1 << (MySqlParser.KEYBCS2 - 606)) | (1 << (MySqlParser.KOI8R - 606)) | (1 << (MySqlParser.KOI8U - 606)) | (1 << (MySqlParser.LATIN1 - 606)) | (1 << (MySqlParser.LATIN2 - 606)) | (1 << (MySqlParser.LATIN5 - 606)) | (1 << (MySqlParser.LATIN7 - 606)) | (1 << (MySqlParser.MACCE - 606)) | (1 << (MySqlParser.MACROMAN - 606)) | (1 << (MySqlParser.SJIS - 606)) | (1 << (MySqlParser.SWE7 - 606)) | (1 << (MySqlParser.TIS620 - 606)) | (1 << (MySqlParser.UCS2 - 606)) | (1 << (MySqlParser.UJIS - 606)) | (1 << (MySqlParser.UTF16 - 606)) | (1 << (MySqlParser.UTF16LE - 606)) | (1 << (MySqlParser.UTF32 - 606)) | (1 << (MySqlParser.UTF8 - 606)) | (1 << (MySqlParser.UTF8MB3 - 606)) | (1 << (MySqlParser.UTF8MB4 - 606)) | (1 << (MySqlParser.ARCHIVE - 606)) | (1 << (MySqlParser.BLACKHOLE - 606)) | (1 << (MySqlParser.CSV - 606)) | (1 << (MySqlParser.FEDERATED - 606)) | (1 << (MySqlParser.INNODB - 606)) | (1 << (MySqlParser.MEMORY - 606)) | (1 << (MySqlParser.MRG_MYISAM - 606)))) !== 0) || ((((_la - 638)) & ~0x1F) === 0 && ((1 << (_la - 638)) & ((1 << (MySqlParser.MYISAM - 638)) | (1 << (MySqlParser.NDB - 638)) | (1 << (MySqlParser.NDBCLUSTER - 638)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 638)) | (1 << (MySqlParser.TOKUDB - 638)) | (1 << (MySqlParser.REPEATABLE - 638)) | (1 << (MySqlParser.COMMITTED - 638)) | (1 << (MySqlParser.UNCOMMITTED - 638)) | (1 << (MySqlParser.SERIALIZABLE - 638)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 638)) | (1 << (MySqlParser.LINESTRING - 638)) | (1 << (MySqlParser.MULTILINESTRING - 638)) | (1 << (MySqlParser.MULTIPOINT - 638)) | (1 << (MySqlParser.MULTIPOLYGON - 638)) | (1 << (MySqlParser.POINT - 638)) | (1 << (MySqlParser.POLYGON - 638)) | (1 << (MySqlParser.ABS - 638)) | (1 << (MySqlParser.ACOS - 638)) | (1 << (MySqlParser.ADDDATE - 638)) | (1 << (MySqlParser.ADDTIME - 638)) | (1 << (MySqlParser.AES_DECRYPT - 638)) | (1 << (MySqlParser.AES_ENCRYPT - 638)) | (1 << (MySqlParser.AREA - 638)) | (1 << (MySqlParser.ASBINARY - 638)) | (1 << (MySqlParser.ASIN - 638)) | (1 << (MySqlParser.ASTEXT - 638)) | (1 << (MySqlParser.ASWKB - 638)) | (1 << (MySqlParser.ASWKT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 638)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 638)))) !== 0) || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & ((1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 670)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 670)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 670)) | (1 << (MySqlParser.ATAN - 670)) | (1 << (MySqlParser.ATAN2 - 670)) | (1 << (MySqlParser.BENCHMARK - 670)) | (1 << (MySqlParser.BIN - 670)) | (1 << (MySqlParser.BIT_COUNT - 670)) | (1 << (MySqlParser.BIT_LENGTH - 670)) | (1 << (MySqlParser.BUFFER - 670)) | (1 << (MySqlParser.CATALOG_NAME - 670)) | (1 << (MySqlParser.CEIL - 670)) | (1 << (MySqlParser.CEILING - 670)) | (1 << (MySqlParser.CENTROID - 670)) | (1 << (MySqlParser.CHARACTER_LENGTH - 670)) | (1 << (MySqlParser.CHARSET - 670)) | (1 << (MySqlParser.CHAR_LENGTH - 670)) | (1 << (MySqlParser.COERCIBILITY - 670)) | (1 << (MySqlParser.COLLATION - 670)) | (1 << (MySqlParser.COMPRESS - 670)) | (1 << (MySqlParser.CONCAT - 670)) | (1 << (MySqlParser.CONCAT_WS - 670)) | (1 << (MySqlParser.CONNECTION_ID - 670)) | (1 << (MySqlParser.CONV - 670)) | (1 << (MySqlParser.CONVERT_TZ - 670)) | (1 << (MySqlParser.COS - 670)) | (1 << (MySqlParser.COT - 670)) | (1 << (MySqlParser.CRC32 - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 670)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 670)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 670)) | (1 << (MySqlParser.CREATE_DIGEST - 670)))) !== 0) || ((((_la - 702)) & ~0x1F) === 0 && ((1 << (_la - 702)) & ((1 << (MySqlParser.CROSSES - 702)) | (1 << (MySqlParser.DATEDIFF - 702)) | (1 << (MySqlParser.DATE_FORMAT - 702)) | (1 << (MySqlParser.DAYNAME - 702)) | (1 << (MySqlParser.DAYOFMONTH - 702)) | (1 << (MySqlParser.DAYOFWEEK - 702)) | (1 << (MySqlParser.DAYOFYEAR - 702)) | (1 << (MySqlParser.DECODE - 702)) | (1 << (MySqlParser.DEGREES - 702)) | (1 << (MySqlParser.DES_DECRYPT - 702)) | (1 << (MySqlParser.DES_ENCRYPT - 702)) | (1 << (MySqlParser.DIMENSION - 702)) | (1 << (MySqlParser.DISJOINT - 702)) | (1 << (MySqlParser.ELT - 702)) | (1 << (MySqlParser.ENCODE - 702)) | (1 << (MySqlParser.ENCRYPT - 702)) | (1 << (MySqlParser.ENDPOINT - 702)) | (1 << (MySqlParser.ENVELOPE - 702)) | (1 << (MySqlParser.EQUALS - 702)) | (1 << (MySqlParser.EXP - 702)) | (1 << (MySqlParser.EXPORT_SET - 702)) | (1 << (MySqlParser.EXTERIORRING - 702)) | (1 << (MySqlParser.EXTRACTVALUE - 702)) | (1 << (MySqlParser.FIELD - 702)) | (1 << (MySqlParser.FIND_IN_SET - 702)) | (1 << (MySqlParser.FLOOR - 702)) | (1 << (MySqlParser.FORMAT - 702)) | (1 << (MySqlParser.FOUND_ROWS - 702)) | (1 << (MySqlParser.FROM_BASE64 - 702)) | (1 << (MySqlParser.FROM_DAYS - 702)) | (1 << (MySqlParser.FROM_UNIXTIME - 702)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 702)))) !== 0) || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (MySqlParser.GEOMCOLLFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 734)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 734)) | (1 << (MySqlParser.GEOMETRYN - 734)) | (1 << (MySqlParser.GEOMETRYTYPE - 734)) | (1 << (MySqlParser.GEOMFROMTEXT - 734)) | (1 << (MySqlParser.GEOMFROMWKB - 734)) | (1 << (MySqlParser.GET_FORMAT - 734)) | (1 << (MySqlParser.GET_LOCK - 734)) | (1 << (MySqlParser.GLENGTH - 734)) | (1 << (MySqlParser.GREATEST - 734)) | (1 << (MySqlParser.GTID_SUBSET - 734)) | (1 << (MySqlParser.GTID_SUBTRACT - 734)) | (1 << (MySqlParser.HEX - 734)) | (1 << (MySqlParser.IFNULL - 734)) | (1 << (MySqlParser.INET6_ATON - 734)) | (1 << (MySqlParser.INET6_NTOA - 734)) | (1 << (MySqlParser.INET_ATON - 734)) | (1 << (MySqlParser.INET_NTOA - 734)) | (1 << (MySqlParser.INSTR - 734)) | (1 << (MySqlParser.INTERIORRINGN - 734)) | (1 << (MySqlParser.INTERSECTS - 734)) | (1 << (MySqlParser.ISCLOSED - 734)) | (1 << (MySqlParser.ISEMPTY - 734)) | (1 << (MySqlParser.ISNULL - 734)) | (1 << (MySqlParser.ISSIMPLE - 734)) | (1 << (MySqlParser.IS_FREE_LOCK - 734)) | (1 << (MySqlParser.IS_IPV4 - 734)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 734)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 734)))) !== 0) || ((((_la - 766)) & ~0x1F) === 0 && ((1 << (_la - 766)) & ((1 << (MySqlParser.IS_IPV6 - 766)) | (1 << (MySqlParser.IS_USED_LOCK - 766)) | (1 << (MySqlParser.LAST_INSERT_ID - 766)) | (1 << (MySqlParser.LCASE - 766)) | (1 << (MySqlParser.LEAST - 766)) | (1 << (MySqlParser.LENGTH - 766)) | (1 << (MySqlParser.LINEFROMTEXT - 766)) | (1 << (MySqlParser.LINEFROMWKB - 766)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 766)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 766)) | (1 << (MySqlParser.LN - 766)) | (1 << (MySqlParser.LOAD_FILE - 766)) | (1 << (MySqlParser.LOCATE - 766)) | (1 << (MySqlParser.LOG - 766)) | (1 << (MySqlParser.LOG10 - 766)) | (1 << (MySqlParser.LOG2 - 766)) | (1 << (MySqlParser.LOWER - 766)) | (1 << (MySqlParser.LPAD - 766)) | (1 << (MySqlParser.LTRIM - 766)) | (1 << (MySqlParser.MAKEDATE - 766)) | (1 << (MySqlParser.MAKETIME - 766)) | (1 << (MySqlParser.MAKE_SET - 766)) | (1 << (MySqlParser.MASTER_POS_WAIT - 766)) | (1 << (MySqlParser.MBRCONTAINS - 766)) | (1 << (MySqlParser.MBRDISJOINT - 766)) | (1 << (MySqlParser.MBREQUAL - 766)) | (1 << (MySqlParser.MBRINTERSECTS - 766)) | (1 << (MySqlParser.MBROVERLAPS - 766)) | (1 << (MySqlParser.MBRTOUCHES - 766)) | (1 << (MySqlParser.MBRWITHIN - 766)) | (1 << (MySqlParser.MD5 - 766)) | (1 << (MySqlParser.MLINEFROMTEXT - 766)))) !== 0) || ((((_la - 798)) & ~0x1F) === 0 && ((1 << (_la - 798)) & ((1 << (MySqlParser.MLINEFROMWKB - 798)) | (1 << (MySqlParser.MONTHNAME - 798)) | (1 << (MySqlParser.MPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MPOINTFROMWKB - 798)) | (1 << (MySqlParser.MPOLYFROMTEXT - 798)) | (1 << (MySqlParser.MPOLYFROMWKB - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 798)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 798)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 798)) | (1 << (MySqlParser.NAME_CONST - 798)) | (1 << (MySqlParser.NULLIF - 798)) | (1 << (MySqlParser.NUMGEOMETRIES - 798)) | (1 << (MySqlParser.NUMINTERIORRINGS - 798)) | (1 << (MySqlParser.NUMPOINTS - 798)) | (1 << (MySqlParser.OCT - 798)) | (1 << (MySqlParser.OCTET_LENGTH - 798)) | (1 << (MySqlParser.ORD - 798)) | (1 << (MySqlParser.OVERLAPS - 798)) | (1 << (MySqlParser.PERIOD_ADD - 798)) | (1 << (MySqlParser.PERIOD_DIFF - 798)) | (1 << (MySqlParser.PI - 798)) | (1 << (MySqlParser.POINTFROMTEXT - 798)) | (1 << (MySqlParser.POINTFROMWKB - 798)) | (1 << (MySqlParser.POINTN - 798)) | (1 << (MySqlParser.POLYFROMTEXT - 798)) | (1 << (MySqlParser.POLYFROMWKB - 798)) | (1 << (MySqlParser.POLYGONFROMTEXT - 798)) | (1 << (MySqlParser.POLYGONFROMWKB - 798)) | (1 << (MySqlParser.POW - 798)))) !== 0) || ((((_la - 830)) & ~0x1F) === 0 && ((1 << (_la - 830)) & ((1 << (MySqlParser.POWER - 830)) | (1 << (MySqlParser.QUOTE - 830)) | (1 << (MySqlParser.RADIANS - 830)) | (1 << (MySqlParser.RAND - 830)) | (1 << (MySqlParser.RANDOM_BYTES - 830)) | (1 << (MySqlParser.RELEASE_LOCK - 830)) | (1 << (MySqlParser.REVERSE - 830)) | (1 << (MySqlParser.ROUND - 830)) | (1 << (MySqlParser.ROW_COUNT - 830)) | (1 << (MySqlParser.RPAD - 830)) | (1 << (MySqlParser.RTRIM - 830)) | (1 << (MySqlParser.SEC_TO_TIME - 830)) | (1 << (MySqlParser.SESSION_USER - 830)) | (1 << (MySqlParser.SHA - 830)) | (1 << (MySqlParser.SHA1 - 830)) | (1 << (MySqlParser.SHA2 - 830)) | (1 << (MySqlParser.SCHEMA_NAME - 830)) | (1 << (MySqlParser.SIGN - 830)) | (1 << (MySqlParser.SIN - 830)) | (1 << (MySqlParser.SLEEP - 830)) | (1 << (MySqlParser.SOUNDEX - 830)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 830)) | (1 << (MySqlParser.SQRT - 830)) | (1 << (MySqlParser.SRID - 830)) | (1 << (MySqlParser.STARTPOINT - 830)) | (1 << (MySqlParser.STRCMP - 830)) | (1 << (MySqlParser.STR_TO_DATE - 830)) | (1 << (MySqlParser.ST_AREA - 830)) | (1 << (MySqlParser.ST_ASBINARY - 830)) | (1 << (MySqlParser.ST_ASTEXT - 830)) | (1 << (MySqlParser.ST_ASWKB - 830)) | (1 << (MySqlParser.ST_ASWKT - 830)))) !== 0) || ((((_la - 862)) & ~0x1F) === 0 && ((1 << (_la - 862)) & ((1 << (MySqlParser.ST_BUFFER - 862)) | (1 << (MySqlParser.ST_CENTROID - 862)) | (1 << (MySqlParser.ST_CONTAINS - 862)) | (1 << (MySqlParser.ST_CROSSES - 862)) | (1 << (MySqlParser.ST_DIFFERENCE - 862)) | (1 << (MySqlParser.ST_DIMENSION - 862)) | (1 << (MySqlParser.ST_DISJOINT - 862)) | (1 << (MySqlParser.ST_DISTANCE - 862)) | (1 << (MySqlParser.ST_ENDPOINT - 862)) | (1 << (MySqlParser.ST_ENVELOPE - 862)) | (1 << (MySqlParser.ST_EQUALS - 862)) | (1 << (MySqlParser.ST_EXTERIORRING - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 862)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 862)) | (1 << (MySqlParser.ST_GEOMETRYN - 862)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 862)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 862)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 862)) | (1 << (MySqlParser.ST_INTERIORRINGN - 862)) | (1 << (MySqlParser.ST_INTERSECTION - 862)) | (1 << (MySqlParser.ST_INTERSECTS - 862)) | (1 << (MySqlParser.ST_ISCLOSED - 862)) | (1 << (MySqlParser.ST_ISEMPTY - 862)) | (1 << (MySqlParser.ST_ISSIMPLE - 862)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 862)) | (1 << (MySqlParser.ST_LINEFROMWKB - 862)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 862)))) !== 0) || ((((_la - 894)) & ~0x1F) === 0 && ((1 << (_la - 894)) & ((1 << (MySqlParser.ST_LINESTRINGFROMWKB - 894)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 894)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 894)) | (1 << (MySqlParser.ST_NUMPOINTS - 894)) | (1 << (MySqlParser.ST_OVERLAPS - 894)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 894)) | (1 << (MySqlParser.ST_POINTFROMWKB - 894)) | (1 << (MySqlParser.ST_POINTN - 894)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYFROMWKB - 894)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 894)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 894)) | (1 << (MySqlParser.ST_SRID - 894)) | (1 << (MySqlParser.ST_STARTPOINT - 894)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 894)) | (1 << (MySqlParser.ST_TOUCHES - 894)) | (1 << (MySqlParser.ST_UNION - 894)) | (1 << (MySqlParser.ST_WITHIN - 894)) | (1 << (MySqlParser.ST_X - 894)) | (1 << (MySqlParser.ST_Y - 894)) | (1 << (MySqlParser.SUBDATE - 894)) | (1 << (MySqlParser.SUBSTRING_INDEX - 894)) | (1 << (MySqlParser.SUBTIME - 894)) | (1 << (MySqlParser.SYSTEM_USER - 894)) | (1 << (MySqlParser.TAN - 894)) | (1 << (MySqlParser.TIMEDIFF - 894)) | (1 << (MySqlParser.TIMESTAMPADD - 894)) | (1 << (MySqlParser.TIMESTAMPDIFF - 894)) | (1 << (MySqlParser.TIME_FORMAT - 894)) | (1 << (MySqlParser.TIME_TO_SEC - 894)) | (1 << (MySqlParser.TOUCHES - 894)))) !== 0) || ((((_la - 926)) & ~0x1F) === 0 && ((1 << (_la - 926)) & ((1 << (MySqlParser.TO_BASE64 - 926)) | (1 << (MySqlParser.TO_DAYS - 926)) | (1 << (MySqlParser.TO_SECONDS - 926)) | (1 << (MySqlParser.UCASE - 926)) | (1 << (MySqlParser.UNCOMPRESS - 926)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 926)) | (1 << (MySqlParser.UNHEX - 926)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 926)) | (1 << (MySqlParser.UPDATEXML - 926)) | (1 << (MySqlParser.UPPER - 926)) | (1 << (MySqlParser.UUID - 926)) | (1 << (MySqlParser.UUID_SHORT - 926)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 926)) | (1 << (MySqlParser.VERSION - 926)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 926)) | (1 << (MySqlParser.WEEKDAY - 926)) | (1 << (MySqlParser.WEEKOFYEAR - 926)) | (1 << (MySqlParser.WEIGHT_STRING - 926)) | (1 << (MySqlParser.WITHIN - 926)) | (1 << (MySqlParser.YEARWEEK - 926)) | (1 << (MySqlParser.Y_FUNCTION - 926)) | (1 << (MySqlParser.X_FUNCTION - 926)))) !== 0) || ((((_la - 986)) & ~0x1F) === 0 && ((1 << (_la - 986)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 986)) | (1 << (MySqlParser.STRING_LITERAL - 986)) | (1 << (MySqlParser.ID - 986)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 986)))) !== 0)) {
				{
				this.state = 4230;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursorStatement(): CursorStatementContext {
		let _localctx: CursorStatementContext = new CursorStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, MySqlParser.RULE_cursorStatement);
		let _la: number;
		try {
			this.state = 4248;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4233;
				this.match(MySqlParser.CLOSE);
				this.state = 4234;
				this.uid();
				}
				break;
			case MySqlParser.FETCH:
				_localctx = new FetchCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4235;
				this.match(MySqlParser.FETCH);
				this.state = 4240;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 610, this._ctx) ) {
				case 1:
					{
					this.state = 4237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.NEXT) {
						{
						this.state = 4236;
						this.match(MySqlParser.NEXT);
						}
					}

					this.state = 4239;
					this.match(MySqlParser.FROM);
					}
					break;
				}
				this.state = 4242;
				this.uid();
				this.state = 4243;
				this.match(MySqlParser.INTO);
				this.state = 4244;
				this.uidList();
				}
				break;
			case MySqlParser.OPEN:
				_localctx = new OpenCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4246;
				this.match(MySqlParser.OPEN);
				this.state = 4247;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareVariable(): DeclareVariableContext {
		let _localctx: DeclareVariableContext = new DeclareVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, MySqlParser.RULE_declareVariable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4250;
			this.match(MySqlParser.DECLARE);
			this.state = 4251;
			this.uidList();
			this.state = 4252;
			this.dataType();
			this.state = 4255;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.DEFAULT) {
				{
				this.state = 4253;
				this.match(MySqlParser.DEFAULT);
				this.state = 4254;
				this.defaultValue();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareCondition(): DeclareConditionContext {
		let _localctx: DeclareConditionContext = new DeclareConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, MySqlParser.RULE_declareCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4257;
			this.match(MySqlParser.DECLARE);
			this.state = 4258;
			this.uid();
			this.state = 4259;
			this.match(MySqlParser.CONDITION);
			this.state = 4260;
			this.match(MySqlParser.FOR);
			this.state = 4267;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				{
				this.state = 4261;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.SQLSTATE:
				{
				this.state = 4262;
				this.match(MySqlParser.SQLSTATE);
				this.state = 4264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.VALUE) {
					{
					this.state = 4263;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 4266;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareCursor(): DeclareCursorContext {
		let _localctx: DeclareCursorContext = new DeclareCursorContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, MySqlParser.RULE_declareCursor);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4269;
			this.match(MySqlParser.DECLARE);
			this.state = 4270;
			this.uid();
			this.state = 4271;
			this.match(MySqlParser.CURSOR);
			this.state = 4272;
			this.match(MySqlParser.FOR);
			this.state = 4273;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareHandler(): DeclareHandlerContext {
		let _localctx: DeclareHandlerContext = new DeclareHandlerContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, MySqlParser.RULE_declareHandler);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4275;
			this.match(MySqlParser.DECLARE);
			this.state = 4276;
			_localctx._handlerAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.CONTINUE || _la === MySqlParser.EXIT || _la === MySqlParser.UNDO)) {
				_localctx._handlerAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4277;
			this.match(MySqlParser.HANDLER);
			this.state = 4278;
			this.match(MySqlParser.FOR);
			this.state = 4279;
			this.handlerConditionValue();
			this.state = 4284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4280;
				this.match(MySqlParser.COMMA);
				this.state = 4281;
				this.handlerConditionValue();
				}
				}
				this.state = 4286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4287;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerConditionValue(): HandlerConditionValueContext {
		let _localctx: HandlerConditionValueContext = new HandlerConditionValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, MySqlParser.RULE_handlerConditionValue);
		let _la: number;
		try {
			this.state = 4300;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4289;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4290;
				this.match(MySqlParser.SQLSTATE);
				this.state = 4292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.VALUE) {
					{
					this.state = 4291;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 4294;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4295;
				this.uid();
				}
				break;
			case MySqlParser.SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4296;
				this.match(MySqlParser.SQLWARNING);
				}
				break;
			case MySqlParser.NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4297;
				this.match(MySqlParser.NOT);
				this.state = 4298;
				this.match(MySqlParser.FOUND);
				}
				break;
			case MySqlParser.SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4299;
				this.match(MySqlParser.SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureSqlStatement(): ProcedureSqlStatementContext {
		let _localctx: ProcedureSqlStatementContext = new ProcedureSqlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, MySqlParser.RULE_procedureSqlStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4304;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 618, this._ctx) ) {
			case 1:
				{
				this.state = 4302;
				this.compoundStatement();
				}
				break;

			case 2:
				{
				this.state = 4303;
				this.sqlStatement();
				}
				break;
			}
			this.state = 4306;
			this.match(MySqlParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseAlternative(): CaseAlternativeContext {
		let _localctx: CaseAlternativeContext = new CaseAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, MySqlParser.RULE_caseAlternative);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4308;
			this.match(MySqlParser.WHEN);
			this.state = 4311;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 619, this._ctx) ) {
			case 1:
				{
				this.state = 4309;
				this.constant();
				}
				break;

			case 2:
				{
				this.state = 4310;
				this.expression(0);
				}
				break;
			}
			this.state = 4313;
			this.match(MySqlParser.THEN);
			this.state = 4315;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4314;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4317;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 620, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elifAlternative(): ElifAlternativeContext {
		let _localctx: ElifAlternativeContext = new ElifAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, MySqlParser.RULE_elifAlternative);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4319;
			this.match(MySqlParser.ELSEIF);
			this.state = 4320;
			this.expression(0);
			this.state = 4321;
			this.match(MySqlParser.THEN);
			this.state = 4323;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4322;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4325;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 621, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUser(): AlterUserContext {
		let _localctx: AlterUserContext = new AlterUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, MySqlParser.RULE_alterUser);
		let _la: number;
		try {
			this.state = 4381;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 633, this._ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4327;
				this.match(MySqlParser.ALTER);
				this.state = 4328;
				this.match(MySqlParser.USER);
				this.state = 4329;
				this.userSpecification();
				this.state = 4334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4330;
					this.match(MySqlParser.COMMA);
					this.state = 4331;
					this.userSpecification();
					}
					}
					this.state = 4336;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4337;
				this.match(MySqlParser.ALTER);
				this.state = 4338;
				this.match(MySqlParser.USER);
				this.state = 4340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 4339;
					this.ifExists();
					}
				}

				this.state = 4342;
				this.userAuthOption();
				this.state = 4347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4343;
					this.match(MySqlParser.COMMA);
					this.state = 4344;
					this.userAuthOption();
					}
					}
					this.state = 4349;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.REQUIRE) {
					{
					this.state = 4350;
					this.match(MySqlParser.REQUIRE);
					this.state = 4362;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.NONE:
						{
						this.state = 4351;
						(_localctx as AlterUserMysqlV57Context)._tlsNone = this.match(MySqlParser.NONE);
						}
						break;
					case MySqlParser.SSL:
					case MySqlParser.CIPHER:
					case MySqlParser.ISSUER:
					case MySqlParser.SUBJECT:
					case MySqlParser.X509:
						{
						this.state = 4352;
						this.tlsOption();
						this.state = 4359;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === MySqlParser.AND || _la === MySqlParser.SSL || _la === MySqlParser.CIPHER || _la === MySqlParser.ISSUER || _la === MySqlParser.SUBJECT || _la === MySqlParser.X509) {
							{
							{
							this.state = 4354;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MySqlParser.AND) {
								{
								this.state = 4353;
								this.match(MySqlParser.AND);
								}
							}

							this.state = 4356;
							this.tlsOption();
							}
							}
							this.state = 4361;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 4372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WITH) {
					{
					this.state = 4366;
					this.match(MySqlParser.WITH);
					this.state = 4368;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4367;
						this.userResourceOption();
						}
						}
						this.state = 4370;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 408)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 408)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 408)))) !== 0));
					}
				}

				this.state = 4378;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.ACCOUNT || _la === MySqlParser.PASSWORD) {
					{
					this.state = 4376;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.PASSWORD:
						{
						this.state = 4374;
						this.userPasswordOption();
						}
						break;
					case MySqlParser.ACCOUNT:
						{
						this.state = 4375;
						this.userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 4380;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUser(): CreateUserContext {
		let _localctx: CreateUserContext = new CreateUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, MySqlParser.RULE_createUser);
		let _la: number;
		try {
			this.state = 4437;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 645, this._ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4383;
				this.match(MySqlParser.CREATE);
				this.state = 4384;
				this.match(MySqlParser.USER);
				this.state = 4385;
				this.userAuthOption();
				this.state = 4390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4386;
					this.match(MySqlParser.COMMA);
					this.state = 4387;
					this.userAuthOption();
					}
					}
					this.state = 4392;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4393;
				this.match(MySqlParser.CREATE);
				this.state = 4394;
				this.match(MySqlParser.USER);
				this.state = 4396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 4395;
					this.ifNotExists();
					}
				}

				this.state = 4398;
				this.userAuthOption();
				this.state = 4403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4399;
					this.match(MySqlParser.COMMA);
					this.state = 4400;
					this.userAuthOption();
					}
					}
					this.state = 4405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4420;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.REQUIRE) {
					{
					this.state = 4406;
					this.match(MySqlParser.REQUIRE);
					this.state = 4418;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.NONE:
						{
						this.state = 4407;
						(_localctx as CreateUserMysqlV57Context)._tlsNone = this.match(MySqlParser.NONE);
						}
						break;
					case MySqlParser.SSL:
					case MySqlParser.CIPHER:
					case MySqlParser.ISSUER:
					case MySqlParser.SUBJECT:
					case MySqlParser.X509:
						{
						this.state = 4408;
						this.tlsOption();
						this.state = 4415;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === MySqlParser.AND || _la === MySqlParser.SSL || _la === MySqlParser.CIPHER || _la === MySqlParser.ISSUER || _la === MySqlParser.SUBJECT || _la === MySqlParser.X509) {
							{
							{
							this.state = 4410;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MySqlParser.AND) {
								{
								this.state = 4409;
								this.match(MySqlParser.AND);
								}
							}

							this.state = 4412;
							this.tlsOption();
							}
							}
							this.state = 4417;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 4428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WITH) {
					{
					this.state = 4422;
					this.match(MySqlParser.WITH);
					this.state = 4424;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4423;
						this.userResourceOption();
						}
						}
						this.state = 4426;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 408)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 408)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 408)))) !== 0));
					}
				}

				this.state = 4434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.ACCOUNT || _la === MySqlParser.PASSWORD) {
					{
					this.state = 4432;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.PASSWORD:
						{
						this.state = 4430;
						this.userPasswordOption();
						}
						break;
					case MySqlParser.ACCOUNT:
						{
						this.state = 4431;
						this.userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 4436;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropUser(): DropUserContext {
		let _localctx: DropUserContext = new DropUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, MySqlParser.RULE_dropUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4439;
			this.match(MySqlParser.DROP);
			this.state = 4440;
			this.match(MySqlParser.USER);
			this.state = 4442;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IF) {
				{
				this.state = 4441;
				this.ifExists();
				}
			}

			this.state = 4444;
			this.userName();
			this.state = 4449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4445;
				this.match(MySqlParser.COMMA);
				this.state = 4446;
				this.userName();
				}
				}
				this.state = 4451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantStatement(): GrantStatementContext {
		let _localctx: GrantStatementContext = new GrantStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, MySqlParser.RULE_grantStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4452;
			this.match(MySqlParser.GRANT);
			this.state = 4453;
			this.privelegeClause();
			this.state = 4458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4454;
				this.match(MySqlParser.COMMA);
				this.state = 4455;
				this.privelegeClause();
				}
				}
				this.state = 4460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4461;
			this.match(MySqlParser.ON);
			this.state = 4463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 649, this._ctx) ) {
			case 1:
				{
				this.state = 4462;
				_localctx._privilegeObject = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.TABLE || _la === MySqlParser.FUNCTION)) {
					_localctx._privilegeObject = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 4465;
			this.privilegeLevel();
			this.state = 4466;
			this.match(MySqlParser.TO);
			this.state = 4467;
			this.userAuthOption();
			this.state = 4472;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4468;
				this.match(MySqlParser.COMMA);
				this.state = 4469;
				this.userAuthOption();
				}
				}
				this.state = 4474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4489;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.REQUIRE) {
				{
				this.state = 4475;
				this.match(MySqlParser.REQUIRE);
				this.state = 4487;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.NONE:
					{
					this.state = 4476;
					_localctx._tlsNone = this.match(MySqlParser.NONE);
					}
					break;
				case MySqlParser.SSL:
				case MySqlParser.CIPHER:
				case MySqlParser.ISSUER:
				case MySqlParser.SUBJECT:
				case MySqlParser.X509:
					{
					this.state = 4477;
					this.tlsOption();
					this.state = 4484;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.AND || _la === MySqlParser.SSL || _la === MySqlParser.CIPHER || _la === MySqlParser.ISSUER || _la === MySqlParser.SUBJECT || _la === MySqlParser.X509) {
						{
						{
						this.state = 4479;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.AND) {
							{
							this.state = 4478;
							this.match(MySqlParser.AND);
							}
						}

						this.state = 4481;
						this.tlsOption();
						}
						}
						this.state = 4486;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			this.state = 4500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 4491;
				this.match(MySqlParser.WITH);
				this.state = 4497;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 656, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 4495;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case MySqlParser.GRANT:
							{
							this.state = 4492;
							this.match(MySqlParser.GRANT);
							this.state = 4493;
							this.match(MySqlParser.OPTION);
							}
							break;
						case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
						case MySqlParser.MAX_QUERIES_PER_HOUR:
						case MySqlParser.MAX_UPDATES_PER_HOUR:
						case MySqlParser.MAX_USER_CONNECTIONS:
							{
							this.state = 4494;
							this.userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 4499;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 656, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantProxy(): GrantProxyContext {
		let _localctx: GrantProxyContext = new GrantProxyContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, MySqlParser.RULE_grantProxy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4502;
			this.match(MySqlParser.GRANT);
			this.state = 4503;
			this.match(MySqlParser.PROXY);
			this.state = 4504;
			this.match(MySqlParser.ON);
			this.state = 4505;
			_localctx._fromFirst = this.userName();
			this.state = 4506;
			this.match(MySqlParser.TO);
			this.state = 4507;
			_localctx._toFirst = this.userName();
			this.state = 4512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4508;
				this.match(MySqlParser.COMMA);
				this.state = 4509;
				_localctx._userName = this.userName();
				_localctx._toOther.push(_localctx._userName);
				}
				}
				this.state = 4514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4518;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.WITH) {
				{
				this.state = 4515;
				this.match(MySqlParser.WITH);
				this.state = 4516;
				this.match(MySqlParser.GRANT);
				this.state = 4517;
				this.match(MySqlParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUser(): RenameUserContext {
		let _localctx: RenameUserContext = new RenameUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, MySqlParser.RULE_renameUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4520;
			this.match(MySqlParser.RENAME);
			this.state = 4521;
			this.match(MySqlParser.USER);
			this.state = 4522;
			this.renameUserClause();
			this.state = 4527;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4523;
				this.match(MySqlParser.COMMA);
				this.state = 4524;
				this.renameUserClause();
				}
				}
				this.state = 4529;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeStatement(): RevokeStatementContext {
		let _localctx: RevokeStatementContext = new RevokeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, MySqlParser.RULE_revokeStatement);
		let _la: number;
		try {
			this.state = 4570;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4530;
				this.match(MySqlParser.REVOKE);
				this.state = 4531;
				this.privelegeClause();
				this.state = 4536;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4532;
					this.match(MySqlParser.COMMA);
					this.state = 4533;
					this.privelegeClause();
					}
					}
					this.state = 4538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4539;
				this.match(MySqlParser.ON);
				this.state = 4541;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 662, this._ctx) ) {
				case 1:
					{
					this.state = 4540;
					(_localctx as DetailRevokeContext)._privilegeObject = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.TABLE || _la === MySqlParser.FUNCTION)) {
						(_localctx as DetailRevokeContext)._privilegeObject = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 4543;
				this.privilegeLevel();
				this.state = 4544;
				this.match(MySqlParser.FROM);
				this.state = 4545;
				this.userName();
				this.state = 4550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4546;
					this.match(MySqlParser.COMMA);
					this.state = 4547;
					this.userName();
					}
					}
					this.state = 4552;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4553;
				this.match(MySqlParser.REVOKE);
				this.state = 4554;
				this.match(MySqlParser.ALL);
				this.state = 4556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PRIVILEGES) {
					{
					this.state = 4555;
					this.match(MySqlParser.PRIVILEGES);
					}
				}

				this.state = 4558;
				this.match(MySqlParser.COMMA);
				this.state = 4559;
				this.match(MySqlParser.GRANT);
				this.state = 4560;
				this.match(MySqlParser.OPTION);
				this.state = 4561;
				this.match(MySqlParser.FROM);
				this.state = 4562;
				this.userName();
				this.state = 4567;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4563;
					this.match(MySqlParser.COMMA);
					this.state = 4564;
					this.userName();
					}
					}
					this.state = 4569;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeProxy(): RevokeProxyContext {
		let _localctx: RevokeProxyContext = new RevokeProxyContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, MySqlParser.RULE_revokeProxy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4572;
			this.match(MySqlParser.REVOKE);
			this.state = 4573;
			this.match(MySqlParser.PROXY);
			this.state = 4574;
			this.match(MySqlParser.ON);
			this.state = 4575;
			_localctx._onUser = this.userName();
			this.state = 4576;
			this.match(MySqlParser.FROM);
			this.state = 4577;
			_localctx._fromFirst = this.userName();
			this.state = 4582;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 4578;
				this.match(MySqlParser.COMMA);
				this.state = 4579;
				_localctx._userName = this.userName();
				_localctx._fromOther.push(_localctx._userName);
				}
				}
				this.state = 4584;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setPasswordStatement(): SetPasswordStatementContext {
		let _localctx: SetPasswordStatementContext = new SetPasswordStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, MySqlParser.RULE_setPasswordStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4585;
			this.match(MySqlParser.SET);
			this.state = 4586;
			this.match(MySqlParser.PASSWORD);
			this.state = 4589;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.FOR) {
				{
				this.state = 4587;
				this.match(MySqlParser.FOR);
				this.state = 4588;
				this.userName();
				}
			}

			this.state = 4591;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 4594;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.PASSWORD:
				{
				this.state = 4592;
				this.passwordFunctionClause();
				}
				break;
			case MySqlParser.STRING_LITERAL:
				{
				this.state = 4593;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userSpecification(): UserSpecificationContext {
		let _localctx: UserSpecificationContext = new UserSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, MySqlParser.RULE_userSpecification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4596;
			this.userName();
			this.state = 4597;
			this.userPasswordOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userAuthOption(): UserAuthOptionContext {
		let _localctx: UserAuthOptionContext = new UserAuthOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, MySqlParser.RULE_userAuthOption);
		let _la: number;
		try {
			this.state = 4623;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 672, this._ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4599;
				this.userName();
				this.state = 4600;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 4601;
				this.match(MySqlParser.BY);
				this.state = 4602;
				this.match(MySqlParser.PASSWORD);
				this.state = 4603;
				(_localctx as PasswordAuthOptionContext)._hashed = this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4605;
				this.userName();
				this.state = 4606;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 4609;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WITH) {
					{
					this.state = 4607;
					this.match(MySqlParser.WITH);
					this.state = 4608;
					this.authPlugin();
					}
				}

				this.state = 4611;
				this.match(MySqlParser.BY);
				this.state = 4612;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4614;
				this.userName();
				this.state = 4615;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 4616;
				this.match(MySqlParser.WITH);
				this.state = 4617;
				this.authPlugin();
				this.state = 4620;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 4618;
					this.match(MySqlParser.AS);
					this.state = 4619;
					this.match(MySqlParser.STRING_LITERAL);
					}
				}

				}
				break;

			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4622;
				this.userName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tlsOption(): TlsOptionContext {
		let _localctx: TlsOptionContext = new TlsOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, MySqlParser.RULE_tlsOption);
		try {
			this.state = 4633;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SSL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4625;
				this.match(MySqlParser.SSL);
				}
				break;
			case MySqlParser.X509:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4626;
				this.match(MySqlParser.X509);
				}
				break;
			case MySqlParser.CIPHER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4627;
				this.match(MySqlParser.CIPHER);
				this.state = 4628;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.ISSUER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4629;
				this.match(MySqlParser.ISSUER);
				this.state = 4630;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.SUBJECT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4631;
				this.match(MySqlParser.SUBJECT);
				this.state = 4632;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userResourceOption(): UserResourceOptionContext {
		let _localctx: UserResourceOptionContext = new UserResourceOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, MySqlParser.RULE_userResourceOption);
		try {
			this.state = 4643;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.MAX_QUERIES_PER_HOUR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4635;
				this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
				this.state = 4636;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MAX_UPDATES_PER_HOUR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4637;
				this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
				this.state = 4638;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4639;
				this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
				this.state = 4640;
				this.decimalLiteral();
				}
				break;
			case MySqlParser.MAX_USER_CONNECTIONS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4641;
				this.match(MySqlParser.MAX_USER_CONNECTIONS);
				this.state = 4642;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userPasswordOption(): UserPasswordOptionContext {
		let _localctx: UserPasswordOptionContext = new UserPasswordOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, MySqlParser.RULE_userPasswordOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4645;
			this.match(MySqlParser.PASSWORD);
			this.state = 4646;
			this.match(MySqlParser.EXPIRE);
			this.state = 4653;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DEFAULT:
				{
				this.state = 4647;
				_localctx._expireType = this.match(MySqlParser.DEFAULT);
				}
				break;
			case MySqlParser.NEVER:
				{
				this.state = 4648;
				_localctx._expireType = this.match(MySqlParser.NEVER);
				}
				break;
			case MySqlParser.INTERVAL:
				{
				this.state = 4649;
				_localctx._expireType = this.match(MySqlParser.INTERVAL);
				this.state = 4650;
				this.decimalLiteral();
				this.state = 4651;
				this.match(MySqlParser.DAY);
				}
				break;
			case MySqlParser.EOF:
			case MySqlParser.ALTER:
			case MySqlParser.ANALYZE:
			case MySqlParser.CALL:
			case MySqlParser.CHANGE:
			case MySqlParser.CHECK:
			case MySqlParser.CREATE:
			case MySqlParser.DELETE:
			case MySqlParser.DESC:
			case MySqlParser.DESCRIBE:
			case MySqlParser.DROP:
			case MySqlParser.EXPLAIN:
			case MySqlParser.GRANT:
			case MySqlParser.INSERT:
			case MySqlParser.KILL:
			case MySqlParser.LOAD:
			case MySqlParser.LOCK:
			case MySqlParser.OPTIMIZE:
			case MySqlParser.PURGE:
			case MySqlParser.RELEASE:
			case MySqlParser.RENAME:
			case MySqlParser.REPLACE:
			case MySqlParser.REVOKE:
			case MySqlParser.SELECT:
			case MySqlParser.SET:
			case MySqlParser.SHOW:
			case MySqlParser.SIGNAL:
			case MySqlParser.UNLOCK:
			case MySqlParser.UPDATE:
			case MySqlParser.USE:
			case MySqlParser.ACCOUNT:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.CACHE:
			case MySqlParser.CHECKSUM:
			case MySqlParser.COMMIT:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DO:
			case MySqlParser.FLUSH:
			case MySqlParser.HANDLER:
			case MySqlParser.HELP:
			case MySqlParser.INSTALL:
			case MySqlParser.PASSWORD:
			case MySqlParser.PREPARE:
			case MySqlParser.REPAIR:
			case MySqlParser.RESET:
			case MySqlParser.ROLLBACK:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.START:
			case MySqlParser.STOP:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.XA:
			case MySqlParser.EXECUTE:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.MINUSMINUS:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.COMMA:
			case MySqlParser.SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userLockOption(): UserLockOptionContext {
		let _localctx: UserLockOptionContext = new UserLockOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, MySqlParser.RULE_userLockOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4655;
			this.match(MySqlParser.ACCOUNT);
			this.state = 4656;
			_localctx._lockType = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.LOCK || _la === MySqlParser.UNLOCK)) {
				_localctx._lockType = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privelegeClause(): PrivelegeClauseContext {
		let _localctx: PrivelegeClauseContext = new PrivelegeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, MySqlParser.RULE_privelegeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4658;
			this.privilege();
			this.state = 4663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 4659;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4660;
				this.uidList();
				this.state = 4661;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege(): PrivilegeContext {
		let _localctx: PrivilegeContext = new PrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, MySqlParser.RULE_privilege);
		let _la: number;
		try {
			this.state = 4708;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4665;
				this.match(MySqlParser.ALL);
				this.state = 4667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PRIVILEGES) {
					{
					this.state = 4666;
					this.match(MySqlParser.PRIVILEGES);
					}
				}

				}
				break;
			case MySqlParser.ALTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4669;
				this.match(MySqlParser.ALTER);
				this.state = 4671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ROUTINE) {
					{
					this.state = 4670;
					this.match(MySqlParser.ROUTINE);
					}
				}

				}
				break;
			case MySqlParser.CREATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4673;
				this.match(MySqlParser.CREATE);
				this.state = 4680;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.TEMPORARY:
					{
					this.state = 4674;
					this.match(MySqlParser.TEMPORARY);
					this.state = 4675;
					this.match(MySqlParser.TABLES);
					}
					break;
				case MySqlParser.ROUTINE:
					{
					this.state = 4676;
					this.match(MySqlParser.ROUTINE);
					}
					break;
				case MySqlParser.VIEW:
					{
					this.state = 4677;
					this.match(MySqlParser.VIEW);
					}
					break;
				case MySqlParser.USER:
					{
					this.state = 4678;
					this.match(MySqlParser.USER);
					}
					break;
				case MySqlParser.TABLESPACE:
					{
					this.state = 4679;
					this.match(MySqlParser.TABLESPACE);
					}
					break;
				case MySqlParser.ON:
				case MySqlParser.LR_BRACKET:
				case MySqlParser.COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case MySqlParser.DELETE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4682;
				this.match(MySqlParser.DELETE);
				}
				break;
			case MySqlParser.DROP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4683;
				this.match(MySqlParser.DROP);
				}
				break;
			case MySqlParser.EVENT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4684;
				this.match(MySqlParser.EVENT);
				}
				break;
			case MySqlParser.EXECUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4685;
				this.match(MySqlParser.EXECUTE);
				}
				break;
			case MySqlParser.FILE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4686;
				this.match(MySqlParser.FILE);
				}
				break;
			case MySqlParser.GRANT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4687;
				this.match(MySqlParser.GRANT);
				this.state = 4688;
				this.match(MySqlParser.OPTION);
				}
				break;
			case MySqlParser.INDEX:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4689;
				this.match(MySqlParser.INDEX);
				}
				break;
			case MySqlParser.INSERT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4690;
				this.match(MySqlParser.INSERT);
				}
				break;
			case MySqlParser.LOCK:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4691;
				this.match(MySqlParser.LOCK);
				this.state = 4692;
				this.match(MySqlParser.TABLES);
				}
				break;
			case MySqlParser.PROCESS:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4693;
				this.match(MySqlParser.PROCESS);
				}
				break;
			case MySqlParser.PROXY:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4694;
				this.match(MySqlParser.PROXY);
				}
				break;
			case MySqlParser.REFERENCES:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4695;
				this.match(MySqlParser.REFERENCES);
				}
				break;
			case MySqlParser.RELOAD:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4696;
				this.match(MySqlParser.RELOAD);
				}
				break;
			case MySqlParser.REPLICATION:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4697;
				this.match(MySqlParser.REPLICATION);
				this.state = 4698;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CLIENT || _la === MySqlParser.SLAVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.SELECT:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4699;
				this.match(MySqlParser.SELECT);
				}
				break;
			case MySqlParser.SHOW:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4700;
				this.match(MySqlParser.SHOW);
				this.state = 4701;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASES || _la === MySqlParser.VIEW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.SHUTDOWN:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4702;
				this.match(MySqlParser.SHUTDOWN);
				}
				break;
			case MySqlParser.SUPER:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 4703;
				this.match(MySqlParser.SUPER);
				}
				break;
			case MySqlParser.TRIGGER:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 4704;
				this.match(MySqlParser.TRIGGER);
				}
				break;
			case MySqlParser.UPDATE:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 4705;
				this.match(MySqlParser.UPDATE);
				}
				break;
			case MySqlParser.USAGE:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 4706;
				this.match(MySqlParser.USAGE);
				}
				break;
			case MySqlParser.SESSION_VARIABLES_ADMIN:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 4707;
				this.match(MySqlParser.SESSION_VARIABLES_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeLevel(): PrivilegeLevelContext {
		let _localctx: PrivilegeLevelContext = new PrivilegeLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, MySqlParser.RULE_privilegeLevel);
		try {
			this.state = 4726;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 681, this._ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4710;
				this.match(MySqlParser.STAR);
				}
				break;

			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4711;
				this.match(MySqlParser.STAR);
				this.state = 4712;
				this.match(MySqlParser.DOT);
				this.state = 4713;
				this.match(MySqlParser.STAR);
				}
				break;

			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4714;
				this.uid();
				this.state = 4715;
				this.match(MySqlParser.DOT);
				this.state = 4716;
				this.match(MySqlParser.STAR);
				}
				break;

			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4718;
				this.uid();
				this.state = 4719;
				this.match(MySqlParser.DOT);
				this.state = 4720;
				this.uid();
				}
				break;

			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4722;
				this.uid();
				this.state = 4723;
				this.dottedId();
				}
				break;

			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4725;
				this.uid();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUserClause(): RenameUserClauseContext {
		let _localctx: RenameUserClauseContext = new RenameUserClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, MySqlParser.RULE_renameUserClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4728;
			_localctx._fromFirst = this.userName();
			this.state = 4729;
			this.match(MySqlParser.TO);
			this.state = 4730;
			_localctx._toFirst = this.userName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzeTable(): AnalyzeTableContext {
		let _localctx: AnalyzeTableContext = new AnalyzeTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, MySqlParser.RULE_analyzeTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4732;
			this.match(MySqlParser.ANALYZE);
			this.state = 4734;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 4733;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4736;
			this.match(MySqlParser.TABLE);
			this.state = 4737;
			this.tables();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkTable(): CheckTableContext {
		let _localctx: CheckTableContext = new CheckTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, MySqlParser.RULE_checkTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4739;
			this.match(MySqlParser.CHECK);
			this.state = 4740;
			this.match(MySqlParser.TABLE);
			this.state = 4741;
			this.tables();
			this.state = 4745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.FOR || _la === MySqlParser.CHANGED || _la === MySqlParser.EXTENDED || _la === MySqlParser.FAST || _la === MySqlParser.MEDIUM || _la === MySqlParser.QUICK) {
				{
				{
				this.state = 4742;
				this.checkTableOption();
				}
				}
				this.state = 4747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checksumTable(): ChecksumTableContext {
		let _localctx: ChecksumTableContext = new ChecksumTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, MySqlParser.RULE_checksumTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4748;
			this.match(MySqlParser.CHECKSUM);
			this.state = 4749;
			this.match(MySqlParser.TABLE);
			this.state = 4750;
			this.tables();
			this.state = 4752;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EXTENDED || _la === MySqlParser.QUICK) {
				{
				this.state = 4751;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.EXTENDED || _la === MySqlParser.QUICK)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optimizeTable(): OptimizeTableContext {
		let _localctx: OptimizeTableContext = new OptimizeTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, MySqlParser.RULE_optimizeTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4754;
			this.match(MySqlParser.OPTIMIZE);
			this.state = 4756;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 4755;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4758;
			this.match(MySqlParser.TABLE);
			this.state = 4759;
			this.tables();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repairTable(): RepairTableContext {
		let _localctx: RepairTableContext = new RepairTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, MySqlParser.RULE_repairTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4761;
			this.match(MySqlParser.REPAIR);
			this.state = 4763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 4762;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4765;
			this.match(MySqlParser.TABLE);
			this.state = 4766;
			this.tables();
			this.state = 4768;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.QUICK) {
				{
				this.state = 4767;
				this.match(MySqlParser.QUICK);
				}
			}

			this.state = 4771;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EXTENDED) {
				{
				this.state = 4770;
				this.match(MySqlParser.EXTENDED);
				}
			}

			this.state = 4774;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.USE_FRM) {
				{
				this.state = 4773;
				this.match(MySqlParser.USE_FRM);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkTableOption(): CheckTableOptionContext {
		let _localctx: CheckTableOptionContext = new CheckTableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, MySqlParser.RULE_checkTableOption);
		try {
			this.state = 4783;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.FOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4776;
				this.match(MySqlParser.FOR);
				this.state = 4777;
				this.match(MySqlParser.UPGRADE);
				}
				break;
			case MySqlParser.QUICK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4778;
				this.match(MySqlParser.QUICK);
				}
				break;
			case MySqlParser.FAST:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4779;
				this.match(MySqlParser.FAST);
				}
				break;
			case MySqlParser.MEDIUM:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4780;
				this.match(MySqlParser.MEDIUM);
				}
				break;
			case MySqlParser.EXTENDED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4781;
				this.match(MySqlParser.EXTENDED);
				}
				break;
			case MySqlParser.CHANGED:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4782;
				this.match(MySqlParser.CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUdfunction(): CreateUdfunctionContext {
		let _localctx: CreateUdfunctionContext = new CreateUdfunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, MySqlParser.RULE_createUdfunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4785;
			this.match(MySqlParser.CREATE);
			this.state = 4787;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.AGGREGATE) {
				{
				this.state = 4786;
				this.match(MySqlParser.AGGREGATE);
				}
			}

			this.state = 4789;
			this.match(MySqlParser.FUNCTION);
			this.state = 4790;
			this.uid();
			this.state = 4791;
			this.match(MySqlParser.RETURNS);
			this.state = 4792;
			_localctx._returnType = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & ((1 << (MySqlParser.INTEGER - 176)) | (1 << (MySqlParser.REAL - 176)) | (1 << (MySqlParser.DECIMAL - 176)))) !== 0) || _la === MySqlParser.STRING)) {
				_localctx._returnType = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4793;
			this.match(MySqlParser.SONAME);
			this.state = 4794;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installPlugin(): InstallPluginContext {
		let _localctx: InstallPluginContext = new InstallPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, MySqlParser.RULE_installPlugin);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4796;
			this.match(MySqlParser.INSTALL);
			this.state = 4797;
			this.match(MySqlParser.PLUGIN);
			this.state = 4798;
			this.uid();
			this.state = 4799;
			this.match(MySqlParser.SONAME);
			this.state = 4800;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uninstallPlugin(): UninstallPluginContext {
		let _localctx: UninstallPluginContext = new UninstallPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, MySqlParser.RULE_uninstallPlugin);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4802;
			this.match(MySqlParser.UNINSTALL);
			this.state = 4803;
			this.match(MySqlParser.PLUGIN);
			this.state = 4804;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let _localctx: SetStatementContext = new SetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, MySqlParser.RULE_setStatement);
		let _la: number;
		try {
			this.state = 4848;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 697, this._ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4806;
				this.match(MySqlParser.SET);
				this.state = 4807;
				this.variableClause();
				this.state = 4808;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.VAR_ASSIGN || _la === MySqlParser.EQUAL_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4809;
				this.expression(0);
				this.state = 4817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4810;
					this.match(MySqlParser.COMMA);
					this.state = 4811;
					this.variableClause();
					this.state = 4812;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.VAR_ASSIGN || _la === MySqlParser.EQUAL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4813;
					this.expression(0);
					}
					}
					this.state = 4819;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new SetCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4820;
				this.match(MySqlParser.SET);
				this.state = 4824;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.CHARACTER:
					{
					this.state = 4821;
					this.match(MySqlParser.CHARACTER);
					this.state = 4822;
					this.match(MySqlParser.SET);
					}
					break;
				case MySqlParser.CHARSET:
					{
					this.state = 4823;
					this.match(MySqlParser.CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4828;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.BINARY:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
					{
					this.state = 4826;
					this.charsetName();
					}
					break;
				case MySqlParser.DEFAULT:
					{
					this.state = 4827;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				_localctx = new SetNamesContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4830;
				this.match(MySqlParser.SET);
				this.state = 4831;
				this.match(MySqlParser.NAMES);
				this.state = 4838;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.BINARY:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
					{
					this.state = 4832;
					this.charsetName();
					this.state = 4835;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.COLLATE) {
						{
						this.state = 4833;
						this.match(MySqlParser.COLLATE);
						this.state = 4834;
						this.collationName();
						}
					}

					}
					break;
				case MySqlParser.DEFAULT:
					{
					this.state = 4837;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new SetPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4840;
				this.setPasswordStatement();
				}
				break;

			case 5:
				_localctx = new SetTransactionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4841;
				this.setTransactionStatement();
				}
				break;

			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4842;
				this.setAutocommitStatement();
				}
				break;

			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4843;
				this.match(MySqlParser.SET);
				this.state = 4844;
				this.fullId();
				this.state = 4845;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.VAR_ASSIGN || _la === MySqlParser.EQUAL_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4846;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let _localctx: ShowStatementContext = new ShowStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, MySqlParser.RULE_showStatement);
		let _la: number;
		try {
			this.state = 5001;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 719, this._ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4850;
				this.match(MySqlParser.SHOW);
				this.state = 4851;
				(_localctx as ShowMasterLogsContext)._logFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BINARY || _la === MySqlParser.MASTER)) {
					(_localctx as ShowMasterLogsContext)._logFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4852;
				this.match(MySqlParser.LOGS);
				}
				break;

			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4853;
				this.match(MySqlParser.SHOW);
				this.state = 4854;
				(_localctx as ShowLogEventsContext)._logFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BINLOG || _la === MySqlParser.RELAYLOG)) {
					(_localctx as ShowLogEventsContext)._logFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4855;
				this.match(MySqlParser.EVENTS);
				this.state = 4858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IN) {
					{
					this.state = 4856;
					this.match(MySqlParser.IN);
					this.state = 4857;
					(_localctx as ShowLogEventsContext)._filename = this.match(MySqlParser.STRING_LITERAL);
					}
				}

				this.state = 4862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM) {
					{
					this.state = 4860;
					this.match(MySqlParser.FROM);
					this.state = 4861;
					(_localctx as ShowLogEventsContext)._fromPosition = this.decimalLiteral();
					}
				}

				this.state = 4871;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIMIT) {
					{
					this.state = 4864;
					this.match(MySqlParser.LIMIT);
					this.state = 4868;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 700, this._ctx) ) {
					case 1:
						{
						this.state = 4865;
						(_localctx as ShowLogEventsContext)._offset = this.decimalLiteral();
						this.state = 4866;
						this.match(MySqlParser.COMMA);
						}
						break;
					}
					this.state = 4870;
					(_localctx as ShowLogEventsContext)._rowCount = this.decimalLiteral();
					}
				}

				}
				break;

			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4873;
				this.match(MySqlParser.SHOW);
				this.state = 4874;
				this.showCommonEntity();
				this.state = 4876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4875;
					this.showFilter();
					}
				}

				}
				break;

			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4878;
				this.match(MySqlParser.SHOW);
				this.state = 4880;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FULL) {
					{
					this.state = 4879;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 4882;
				(_localctx as ShowColumnsContext)._columnsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.COLUMNS || _la === MySqlParser.FIELDS)) {
					(_localctx as ShowColumnsContext)._columnsFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4883;
				(_localctx as ShowColumnsContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
					(_localctx as ShowColumnsContext)._tableFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4884;
				this.tableName();
				this.state = 4887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4885;
					(_localctx as ShowColumnsContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowColumnsContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4886;
					this.uid();
					}
				}

				this.state = 4890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4889;
					this.showFilter();
					}
				}

				}
				break;

			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4892;
				this.match(MySqlParser.SHOW);
				this.state = 4893;
				this.match(MySqlParser.CREATE);
				this.state = 4894;
				(_localctx as ShowCreateDbContext)._schemaFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.SCHEMA)) {
					(_localctx as ShowCreateDbContext)._schemaFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.IF) {
					{
					this.state = 4895;
					this.ifNotExists();
					}
				}

				this.state = 4898;
				this.uid();
				}
				break;

			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4899;
				this.match(MySqlParser.SHOW);
				this.state = 4900;
				this.match(MySqlParser.CREATE);
				this.state = 4901;
				(_localctx as ShowCreateFullIdObjectContext)._namedEntity = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.TABLE || _la === MySqlParser.TRIGGER || _la === MySqlParser.EVENT || _la === MySqlParser.FUNCTION || _la === MySqlParser.VIEW)) {
					(_localctx as ShowCreateFullIdObjectContext)._namedEntity = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4902;
				this.fullId();
				}
				break;

			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4903;
				this.match(MySqlParser.SHOW);
				this.state = 4904;
				this.match(MySqlParser.CREATE);
				this.state = 4905;
				this.match(MySqlParser.USER);
				this.state = 4906;
				this.userName();
				}
				break;

			case 8:
				_localctx = new ShowEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4907;
				this.match(MySqlParser.SHOW);
				this.state = 4908;
				this.match(MySqlParser.ENGINE);
				this.state = 4909;
				this.engineName();
				this.state = 4910;
				(_localctx as ShowEngineContext)._engineOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.MUTEX || _la === MySqlParser.STATUS)) {
					(_localctx as ShowEngineContext)._engineOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4912;
				this.match(MySqlParser.SHOW);
				this.state = 4913;
				this.showGlobalInfoClause();
				}
				break;

			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4914;
				this.match(MySqlParser.SHOW);
				this.state = 4915;
				(_localctx as ShowErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ERRORS || _la === MySqlParser.WARNINGS)) {
					(_localctx as ShowErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				{
				this.state = 4916;
				this.match(MySqlParser.LIMIT);
				this.state = 4920;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 707, this._ctx) ) {
				case 1:
					{
					this.state = 4917;
					(_localctx as ShowErrorsContext)._offset = this.decimalLiteral();
					this.state = 4918;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 4922;
				(_localctx as ShowErrorsContext)._rowCount = this.decimalLiteral();
				}
				}
				break;

			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4923;
				this.match(MySqlParser.SHOW);
				this.state = 4924;
				this.match(MySqlParser.COUNT);
				this.state = 4925;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4926;
				this.match(MySqlParser.STAR);
				this.state = 4927;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 4928;
				(_localctx as ShowCountErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ERRORS || _la === MySqlParser.WARNINGS)) {
					(_localctx as ShowCountErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4929;
				this.match(MySqlParser.SHOW);
				this.state = 4930;
				this.showSchemaEntity();
				this.state = 4933;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4931;
					(_localctx as ShowSchemaFilterContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowSchemaFilterContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4932;
					this.uid();
					}
				}

				this.state = 4936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4935;
					this.showFilter();
					}
				}

				}
				break;

			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4938;
				this.match(MySqlParser.SHOW);
				this.state = 4939;
				(_localctx as ShowRoutineContext)._routine = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.PROCEDURE || _la === MySqlParser.FUNCTION)) {
					(_localctx as ShowRoutineContext)._routine = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4940;
				this.match(MySqlParser.CODE);
				this.state = 4941;
				this.fullId();
				}
				break;

			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4942;
				this.match(MySqlParser.SHOW);
				this.state = 4943;
				this.match(MySqlParser.GRANTS);
				this.state = 4946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 4944;
					this.match(MySqlParser.FOR);
					this.state = 4945;
					this.userName();
					}
				}

				}
				break;

			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4948;
				this.match(MySqlParser.SHOW);
				this.state = 4949;
				(_localctx as ShowIndexesContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEYS || _la === MySqlParser.INDEXES)) {
					(_localctx as ShowIndexesContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4950;
				(_localctx as ShowIndexesContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
					(_localctx as ShowIndexesContext)._tableFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4951;
				this.tableName();
				this.state = 4954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4952;
					(_localctx as ShowIndexesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowIndexesContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4953;
					this.uid();
					}
				}

				this.state = 4958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.WHERE) {
					{
					this.state = 4956;
					this.match(MySqlParser.WHERE);
					this.state = 4957;
					this.expression(0);
					}
				}

				}
				break;

			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4960;
				this.match(MySqlParser.SHOW);
				this.state = 4961;
				this.match(MySqlParser.OPEN);
				this.state = 4962;
				this.match(MySqlParser.TABLES);
				this.state = 4965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FROM || _la === MySqlParser.IN) {
					{
					this.state = 4963;
					(_localctx as ShowOpenTablesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.FROM || _la === MySqlParser.IN)) {
						(_localctx as ShowOpenTablesContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4964;
					this.uid();
					}
				}

				this.state = 4968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LIKE || _la === MySqlParser.WHERE) {
					{
					this.state = 4967;
					this.showFilter();
					}
				}

				}
				break;

			case 17:
				_localctx = new ShowProfileContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4970;
				this.match(MySqlParser.SHOW);
				this.state = 4971;
				this.match(MySqlParser.PROFILE);
				this.state = 4972;
				this.showProfileType();
				this.state = 4977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 4973;
					this.match(MySqlParser.COMMA);
					this.state = 4974;
					this.showProfileType();
					}
					}
					this.state = 4979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 4980;
					this.match(MySqlParser.FOR);
					this.state = 4981;
					this.match(MySqlParser.QUERY);
					this.state = 4982;
					(_localctx as ShowProfileContext)._queryCount = this.decimalLiteral();
					}
				}

				{
				this.state = 4985;
				this.match(MySqlParser.LIMIT);
				this.state = 4989;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
				case 1:
					{
					this.state = 4986;
					(_localctx as ShowProfileContext)._offset = this.decimalLiteral();
					this.state = 4987;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 4991;
				(_localctx as ShowProfileContext)._rowCount = this.decimalLiteral();
				}
				}
				break;

			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4993;
				this.match(MySqlParser.SHOW);
				this.state = 4994;
				this.match(MySqlParser.SLAVE);
				this.state = 4995;
				this.match(MySqlParser.STATUS);
				this.state = 4999;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 4996;
					this.match(MySqlParser.FOR);
					this.state = 4997;
					this.match(MySqlParser.CHANNEL);
					this.state = 4998;
					this.match(MySqlParser.STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableClause(): VariableClauseContext {
		let _localctx: VariableClauseContext = new VariableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, MySqlParser.RULE_variableClause);
		let _la: number;
		try {
			this.state = 5013;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5003;
				this.match(MySqlParser.LOCAL_ID);
				}
				break;
			case MySqlParser.GLOBAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5004;
				this.match(MySqlParser.GLOBAL_ID);
				}
				break;
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.AT_SIGN:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5010;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 721, this._ctx) ) {
				case 1:
					{
					this.state = 5007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.AT_SIGN) {
						{
						this.state = 5005;
						this.match(MySqlParser.AT_SIGN);
						this.state = 5006;
						this.match(MySqlParser.AT_SIGN);
						}
					}

					this.state = 5009;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.GLOBAL || _la === MySqlParser.LOCAL || _la === MySqlParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5012;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCommonEntity(): ShowCommonEntityContext {
		let _localctx: ShowCommonEntityContext = new ShowCommonEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, MySqlParser.RULE_showCommonEntity);
		let _la: number;
		try {
			this.state = 5028;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CHARACTER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5015;
				this.match(MySqlParser.CHARACTER);
				this.state = 5016;
				this.match(MySqlParser.SET);
				}
				break;
			case MySqlParser.COLLATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5017;
				this.match(MySqlParser.COLLATION);
				}
				break;
			case MySqlParser.DATABASES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5018;
				this.match(MySqlParser.DATABASES);
				}
				break;
			case MySqlParser.SCHEMAS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5019;
				this.match(MySqlParser.SCHEMAS);
				}
				break;
			case MySqlParser.FUNCTION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5020;
				this.match(MySqlParser.FUNCTION);
				this.state = 5021;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.PROCEDURE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5022;
				this.match(MySqlParser.PROCEDURE);
				this.state = 5023;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.GLOBAL:
			case MySqlParser.SESSION:
			case MySqlParser.STATUS:
			case MySqlParser.VARIABLES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION) {
					{
					this.state = 5024;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.GLOBAL || _la === MySqlParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5027;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.STATUS || _la === MySqlParser.VARIABLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showFilter(): ShowFilterContext {
		let _localctx: ShowFilterContext = new ShowFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, MySqlParser.RULE_showFilter);
		try {
			this.state = 5034;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.LIKE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5030;
				this.match(MySqlParser.LIKE);
				this.state = 5031;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.WHERE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5032;
				this.match(MySqlParser.WHERE);
				this.state = 5033;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		let _localctx: ShowGlobalInfoClauseContext = new ShowGlobalInfoClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, MySqlParser.RULE_showGlobalInfoClause);
		let _la: number;
		try {
			this.state = 5053;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ENGINES:
			case MySqlParser.STORAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.STORAGE) {
					{
					this.state = 5036;
					this.match(MySqlParser.STORAGE);
					}
				}

				this.state = 5039;
				this.match(MySqlParser.ENGINES);
				}
				break;
			case MySqlParser.MASTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5040;
				this.match(MySqlParser.MASTER);
				this.state = 5041;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.PLUGINS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5042;
				this.match(MySqlParser.PLUGINS);
				}
				break;
			case MySqlParser.PRIVILEGES:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5043;
				this.match(MySqlParser.PRIVILEGES);
				}
				break;
			case MySqlParser.FULL:
			case MySqlParser.PROCESSLIST:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5045;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FULL) {
					{
					this.state = 5044;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 5047;
				this.match(MySqlParser.PROCESSLIST);
				}
				break;
			case MySqlParser.PROFILES:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5048;
				this.match(MySqlParser.PROFILES);
				}
				break;
			case MySqlParser.SLAVE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5049;
				this.match(MySqlParser.SLAVE);
				this.state = 5050;
				this.match(MySqlParser.HOSTS);
				}
				break;
			case MySqlParser.AUTHORS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5051;
				this.match(MySqlParser.AUTHORS);
				}
				break;
			case MySqlParser.CONTRIBUTORS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5052;
				this.match(MySqlParser.CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSchemaEntity(): ShowSchemaEntityContext {
		let _localctx: ShowSchemaEntityContext = new ShowSchemaEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, MySqlParser.RULE_showSchemaEntity);
		let _la: number;
		try {
			this.state = 5063;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.EVENTS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5055;
				this.match(MySqlParser.EVENTS);
				}
				break;
			case MySqlParser.TABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5056;
				this.match(MySqlParser.TABLE);
				this.state = 5057;
				this.match(MySqlParser.STATUS);
				}
				break;
			case MySqlParser.FULL:
			case MySqlParser.TABLES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FULL) {
					{
					this.state = 5058;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 5061;
				this.match(MySqlParser.TABLES);
				}
				break;
			case MySqlParser.TRIGGERS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5062;
				this.match(MySqlParser.TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProfileType(): ShowProfileTypeContext {
		let _localctx: ShowProfileTypeContext = new ShowProfileTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, MySqlParser.RULE_showProfileType);
		try {
			this.state = 5077;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5065;
				this.match(MySqlParser.ALL);
				}
				break;
			case MySqlParser.BLOCK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5066;
				this.match(MySqlParser.BLOCK);
				this.state = 5067;
				this.match(MySqlParser.IO);
				}
				break;
			case MySqlParser.CONTEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5068;
				this.match(MySqlParser.CONTEXT);
				this.state = 5069;
				this.match(MySqlParser.SWITCHES);
				}
				break;
			case MySqlParser.CPU:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5070;
				this.match(MySqlParser.CPU);
				}
				break;
			case MySqlParser.IPC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5071;
				this.match(MySqlParser.IPC);
				}
				break;
			case MySqlParser.MEMORY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5072;
				this.match(MySqlParser.MEMORY);
				}
				break;
			case MySqlParser.PAGE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5073;
				this.match(MySqlParser.PAGE);
				this.state = 5074;
				this.match(MySqlParser.FAULTS);
				}
				break;
			case MySqlParser.SOURCE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5075;
				this.match(MySqlParser.SOURCE);
				}
				break;
			case MySqlParser.SWAPS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5076;
				this.match(MySqlParser.SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binlogStatement(): BinlogStatementContext {
		let _localctx: BinlogStatementContext = new BinlogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, MySqlParser.RULE_binlogStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5079;
			this.match(MySqlParser.BINLOG);
			this.state = 5080;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cacheIndexStatement(): CacheIndexStatementContext {
		let _localctx: CacheIndexStatementContext = new CacheIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, MySqlParser.RULE_cacheIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5082;
			this.match(MySqlParser.CACHE);
			this.state = 5083;
			this.match(MySqlParser.INDEX);
			this.state = 5084;
			this.tableIndexes();
			this.state = 5089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5085;
				this.match(MySqlParser.COMMA);
				this.state = 5086;
				this.tableIndexes();
				}
				}
				this.state = 5091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 5092;
				this.match(MySqlParser.PARTITION);
				this.state = 5093;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5096;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 5094;
					this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 5095;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5098;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 5101;
			this.match(MySqlParser.IN);
			this.state = 5102;
			_localctx._schema = this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushStatement(): FlushStatementContext {
		let _localctx: FlushStatementContext = new FlushStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, MySqlParser.RULE_flushStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5104;
			this.match(MySqlParser.FLUSH);
			this.state = 5106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL) {
				{
				this.state = 5105;
				_localctx._flushFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NO_WRITE_TO_BINLOG || _la === MySqlParser.LOCAL)) {
					_localctx._flushFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5108;
			this.flushOption();
			this.state = 5113;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5109;
				this.match(MySqlParser.COMMA);
				this.state = 5110;
				this.flushOption();
				}
				}
				this.state = 5115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public killStatement(): KillStatementContext {
		let _localctx: KillStatementContext = new KillStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, MySqlParser.RULE_killStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5116;
			this.match(MySqlParser.KILL);
			this.state = 5118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.CONNECTION || _la === MySqlParser.QUERY) {
				{
				this.state = 5117;
				_localctx._connectionFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CONNECTION || _la === MySqlParser.QUERY)) {
					_localctx._connectionFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5121;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5120;
				this.decimalLiteral();
				}
				}
				this.state = 5123;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 979)) & ~0x1F) === 0 && ((1 << (_la - 979)) & ((1 << (MySqlParser.ZERO_DECIMAL - 979)) | (1 << (MySqlParser.ONE_DECIMAL - 979)) | (1 << (MySqlParser.TWO_DECIMAL - 979)) | (1 << (MySqlParser.DECIMAL_LITERAL - 979)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadIndexIntoCache(): LoadIndexIntoCacheContext {
		let _localctx: LoadIndexIntoCacheContext = new LoadIndexIntoCacheContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, MySqlParser.RULE_loadIndexIntoCache);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5125;
			this.match(MySqlParser.LOAD);
			this.state = 5126;
			this.match(MySqlParser.INDEX);
			this.state = 5127;
			this.match(MySqlParser.INTO);
			this.state = 5128;
			this.match(MySqlParser.CACHE);
			this.state = 5129;
			this.loadedTableIndexes();
			this.state = 5134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5130;
				this.match(MySqlParser.COMMA);
				this.state = 5131;
				this.loadedTableIndexes();
				}
				}
				this.state = 5136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetStatement(): ResetStatementContext {
		let _localctx: ResetStatementContext = new ResetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, MySqlParser.RULE_resetStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5137;
			this.match(MySqlParser.RESET);
			this.state = 5138;
			this.match(MySqlParser.QUERY);
			this.state = 5139;
			this.match(MySqlParser.CACHE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shutdownStatement(): ShutdownStatementContext {
		let _localctx: ShutdownStatementContext = new ShutdownStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, MySqlParser.RULE_shutdownStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5141;
			this.match(MySqlParser.SHUTDOWN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableIndexes(): TableIndexesContext {
		let _localctx: TableIndexesContext = new TableIndexesContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, MySqlParser.RULE_tableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5143;
			this.tableName();
			this.state = 5151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY || _la === MySqlParser.LR_BRACKET) {
				{
				this.state = 5145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 5144;
					_localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						_localctx._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5147;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5148;
				this.uidList();
				this.state = 5149;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushOption(): FlushOptionContext {
		let _localctx: FlushOptionContext = new FlushOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, MySqlParser.RULE_flushOption);
		let _la: number;
		try {
			this.state = 5183;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 747, this._ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5171;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DES_KEY_FILE:
					{
					this.state = 5153;
					this.match(MySqlParser.DES_KEY_FILE);
					}
					break;
				case MySqlParser.HOSTS:
					{
					this.state = 5154;
					this.match(MySqlParser.HOSTS);
					}
					break;
				case MySqlParser.BINARY:
				case MySqlParser.ENGINE:
				case MySqlParser.ERROR:
				case MySqlParser.GENERAL:
				case MySqlParser.LOGS:
				case MySqlParser.RELAY:
				case MySqlParser.SLOW:
					{
					this.state = 5156;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.BINARY || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (MySqlParser.ENGINE - 324)) | (1 << (MySqlParser.ERROR - 324)) | (1 << (MySqlParser.GENERAL - 324)))) !== 0) || _la === MySqlParser.RELAY || _la === MySqlParser.SLOW) {
						{
						this.state = 5155;
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.BINARY || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (MySqlParser.ENGINE - 324)) | (1 << (MySqlParser.ERROR - 324)) | (1 << (MySqlParser.GENERAL - 324)))) !== 0) || _la === MySqlParser.RELAY || _la === MySqlParser.SLOW)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 5158;
					this.match(MySqlParser.LOGS);
					}
					break;
				case MySqlParser.OPTIMIZER_COSTS:
					{
					this.state = 5159;
					this.match(MySqlParser.OPTIMIZER_COSTS);
					}
					break;
				case MySqlParser.PRIVILEGES:
					{
					this.state = 5160;
					this.match(MySqlParser.PRIVILEGES);
					}
					break;
				case MySqlParser.QUERY:
					{
					this.state = 5161;
					this.match(MySqlParser.QUERY);
					this.state = 5162;
					this.match(MySqlParser.CACHE);
					}
					break;
				case MySqlParser.STATUS:
					{
					this.state = 5163;
					this.match(MySqlParser.STATUS);
					}
					break;
				case MySqlParser.USER_RESOURCES:
					{
					this.state = 5164;
					this.match(MySqlParser.USER_RESOURCES);
					}
					break;
				case MySqlParser.TABLES:
					{
					this.state = 5165;
					this.match(MySqlParser.TABLES);
					this.state = 5169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.WITH) {
						{
						this.state = 5166;
						this.match(MySqlParser.WITH);
						this.state = 5167;
						this.match(MySqlParser.READ);
						this.state = 5168;
						this.match(MySqlParser.LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5173;
				this.match(MySqlParser.RELAY);
				this.state = 5174;
				this.match(MySqlParser.LOGS);
				this.state = 5176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 5175;
					this.channelOption();
					}
				}

				}
				break;

			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5178;
				this.match(MySqlParser.TABLES);
				this.state = 5179;
				this.tables();
				this.state = 5181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR || _la === MySqlParser.WITH) {
					{
					this.state = 5180;
					this.flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushTableOption(): FlushTableOptionContext {
		let _localctx: FlushTableOptionContext = new FlushTableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, MySqlParser.RULE_flushTableOption);
		try {
			this.state = 5190;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5185;
				this.match(MySqlParser.WITH);
				this.state = 5186;
				this.match(MySqlParser.READ);
				this.state = 5187;
				this.match(MySqlParser.LOCK);
				}
				break;
			case MySqlParser.FOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5188;
				this.match(MySqlParser.FOR);
				this.state = 5189;
				this.match(MySqlParser.EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadedTableIndexes(): LoadedTableIndexesContext {
		let _localctx: LoadedTableIndexesContext = new LoadedTableIndexesContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, MySqlParser.RULE_loadedTableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5192;
			this.tableName();
			this.state = 5200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.PARTITION) {
				{
				this.state = 5193;
				this.match(MySqlParser.PARTITION);
				this.state = 5194;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5197;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.DATABASE:
				case MySqlParser.LEFT:
				case MySqlParser.RIGHT:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.COUNT:
				case MySqlParser.POSITION:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
					{
					this.state = 5195;
					_localctx._partitionList = this.uidList();
					}
					break;
				case MySqlParser.ALL:
					{
					this.state = 5196;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5199;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 5209;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 752, this._ctx) ) {
			case 1:
				{
				this.state = 5203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INDEX || _la === MySqlParser.KEY) {
					{
					this.state = 5202;
					_localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.INDEX || _la === MySqlParser.KEY)) {
						_localctx._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5205;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5206;
				_localctx._indexList = this.uidList();
				this.state = 5207;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 5213;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.IGNORE) {
				{
				this.state = 5211;
				this.match(MySqlParser.IGNORE);
				this.state = 5212;
				this.match(MySqlParser.LEAVES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleDescribeStatement(): SimpleDescribeStatementContext {
		let _localctx: SimpleDescribeStatementContext = new SimpleDescribeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, MySqlParser.RULE_simpleDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5215;
			_localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.EXPLAIN - 40)))) !== 0))) {
				_localctx._command = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5216;
			this.tableName();
			this.state = 5219;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 754, this._ctx) ) {
			case 1:
				{
				this.state = 5217;
				_localctx._column = this.uid();
				}
				break;

			case 2:
				{
				this.state = 5218;
				_localctx._pattern = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullDescribeStatement(): FullDescribeStatementContext {
		let _localctx: FullDescribeStatementContext = new FullDescribeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, MySqlParser.RULE_fullDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5221;
			_localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & ((1 << (MySqlParser.DESC - 40)) | (1 << (MySqlParser.DESCRIBE - 40)) | (1 << (MySqlParser.EXPLAIN - 40)))) !== 0))) {
				_localctx._command = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.EXTENDED || _la === MySqlParser.PARTITIONS || _la === MySqlParser.FORMAT) {
				{
				this.state = 5222;
				_localctx._formatType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.EXTENDED || _la === MySqlParser.PARTITIONS || _la === MySqlParser.FORMAT)) {
					_localctx._formatType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5223;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 5224;
				_localctx._formatValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.JSON || _la === MySqlParser.TRADITIONAL)) {
					_localctx._formatValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5227;
			this.describeObjectClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public helpStatement(): HelpStatementContext {
		let _localctx: HelpStatementContext = new HelpStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, MySqlParser.RULE_helpStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5229;
			this.match(MySqlParser.HELP);
			this.state = 5230;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useStatement(): UseStatementContext {
		let _localctx: UseStatementContext = new UseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, MySqlParser.RULE_useStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5232;
			this.match(MySqlParser.USE);
			this.state = 5233;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalStatement(): SignalStatementContext {
		let _localctx: SignalStatementContext = new SignalStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, MySqlParser.RULE_signalStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5235;
			this.match(MySqlParser.SIGNAL);
			this.state = 5243;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.SQLSTATE:
				{
				{
				this.state = 5236;
				this.match(MySqlParser.SQLSTATE);
				this.state = 5238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.VALUE) {
					{
					this.state = 5237;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 5240;
				this.stringLiteral();
				}
				}
				break;
			case MySqlParser.ID:
				{
				this.state = 5241;
				this.match(MySqlParser.ID);
				}
				break;
			case MySqlParser.REVERSE_QUOTE_ID:
				{
				this.state = 5242;
				this.match(MySqlParser.REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5254;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 759, this._ctx) ) {
			case 1:
				{
				this.state = 5245;
				this.match(MySqlParser.SET);
				this.state = 5246;
				this.signalConditionInformation();
				this.state = 5251;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 5247;
					this.match(MySqlParser.COMMA);
					this.state = 5248;
					this.signalConditionInformation();
					}
					}
					this.state = 5253;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalConditionInformation(): SignalConditionInformationContext {
		let _localctx: SignalConditionInformationContext = new SignalConditionInformationContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, MySqlParser.RULE_signalConditionInformation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5256;
			_la = this._input.LA(1);
			if (!(((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & ((1 << (MySqlParser.CLASS_ORIGIN - 280)) | (1 << (MySqlParser.COLUMN_NAME - 280)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 280)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 280)) | (1 << (MySqlParser.CONSTRAINT_NAME - 280)))) !== 0) || _la === MySqlParser.MESSAGE_TEXT || _la === MySqlParser.MYSQL_ERRNO || _la === MySqlParser.SUBCLASS_ORIGIN || _la === MySqlParser.TABLE_NAME || _la === MySqlParser.CATALOG_NAME || _la === MySqlParser.SCHEMA_NAME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5257;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 5260;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.START_NATIONAL_STRING_LITERAL:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.STRING_CHARSET_NAME:
				{
				this.state = 5258;
				this.stringLiteral();
				}
				break;
			case MySqlParser.DECIMAL_LITERAL:
				{
				this.state = 5259;
				this.match(MySqlParser.DECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public describeObjectClause(): DescribeObjectClauseContext {
		let _localctx: DescribeObjectClauseContext = new DescribeObjectClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, MySqlParser.RULE_describeObjectClause);
		try {
			this.state = 5272;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DELETE:
			case MySqlParser.INSERT:
			case MySqlParser.REPLACE:
			case MySqlParser.SELECT:
			case MySqlParser.UPDATE:
			case MySqlParser.LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5267;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.SELECT:
				case MySqlParser.LR_BRACKET:
					{
					this.state = 5262;
					this.selectStatement();
					}
					break;
				case MySqlParser.DELETE:
					{
					this.state = 5263;
					this.deleteStatement();
					}
					break;
				case MySqlParser.INSERT:
					{
					this.state = 5264;
					this.insertStatement();
					}
					break;
				case MySqlParser.REPLACE:
					{
					this.state = 5265;
					this.replaceStatement();
					}
					break;
				case MySqlParser.UPDATE:
					{
					this.state = 5266;
					this.updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MySqlParser.FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5269;
				this.match(MySqlParser.FOR);
				this.state = 5270;
				this.match(MySqlParser.CONNECTION);
				this.state = 5271;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullId(): FullIdContext {
		let _localctx: FullIdContext = new FullIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, MySqlParser.RULE_fullId);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5274;
			this.uid();
			this.state = 5278;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 763, this._ctx) ) {
			case 1:
				{
				this.state = 5275;
				this.match(MySqlParser.DOT_ID);
				}
				break;

			case 2:
				{
				this.state = 5276;
				this.match(MySqlParser.DOT);
				this.state = 5277;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let _localctx: TableNameContext = new TableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, MySqlParser.RULE_tableName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5280;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullColumnName(): FullColumnNameContext {
		let _localctx: FullColumnNameContext = new FullColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, MySqlParser.RULE_fullColumnName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5282;
			this.uid();
			this.state = 5287;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 765, this._ctx) ) {
			case 1:
				{
				this.state = 5283;
				this.dottedId();
				this.state = 5285;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 764, this._ctx) ) {
				case 1:
					{
					this.state = 5284;
					this.dottedId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnName(): IndexColumnNameContext {
		let _localctx: IndexColumnNameContext = new IndexColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, MySqlParser.RULE_indexColumnName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5291;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 766, this._ctx) ) {
			case 1:
				{
				this.state = 5289;
				this.uid();
				}
				break;

			case 2:
				{
				this.state = 5290;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
			this.state = 5297;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.LR_BRACKET) {
				{
				this.state = 5293;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5294;
				this.decimalLiteral();
				this.state = 5295;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 5300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ASC || _la === MySqlParser.DESC) {
				{
				this.state = 5299;
				_localctx._sortType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC)) {
					_localctx._sortType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userName(): UserNameContext {
		let _localctx: UserNameContext = new UserNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, MySqlParser.RULE_userName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5302;
			_la = this._input.LA(1);
			if (!(((((_la - 989)) & ~0x1F) === 0 && ((1 << (_la - 989)) & ((1 << (MySqlParser.STRING_LITERAL - 989)) | (1 << (MySqlParser.ID - 989)) | (1 << (MySqlParser.STRING_USER_NAME - 989)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mysqlVariable(): MysqlVariableContext {
		let _localctx: MysqlVariableContext = new MysqlVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, MySqlParser.RULE_mysqlVariable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5304;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.LOCAL_ID || _la === MySqlParser.GLOBAL_ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetName(): CharsetNameContext {
		let _localctx: CharsetNameContext = new CharsetNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, MySqlParser.RULE_charsetName);
		try {
			this.state = 5310;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5306;
				this.match(MySqlParser.BINARY);
				}
				break;
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5307;
				this.charsetNameBase();
				}
				break;
			case MySqlParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5308;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5309;
				this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collationName(): CollationNameContext {
		let _localctx: CollationNameContext = new CollationNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, MySqlParser.RULE_collationName);
		try {
			this.state = 5314;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 770, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5312;
				this.uid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5313;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public engineName(): EngineNameContext {
		let _localctx: EngineNameContext = new EngineNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, MySqlParser.RULE_engineName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5316;
			_la = this._input.LA(1);
			if (!(((((_la - 631)) & ~0x1F) === 0 && ((1 << (_la - 631)) & ((1 << (MySqlParser.ARCHIVE - 631)) | (1 << (MySqlParser.BLACKHOLE - 631)) | (1 << (MySqlParser.CSV - 631)) | (1 << (MySqlParser.FEDERATED - 631)) | (1 << (MySqlParser.INNODB - 631)) | (1 << (MySqlParser.MEMORY - 631)) | (1 << (MySqlParser.MRG_MYISAM - 631)) | (1 << (MySqlParser.MYISAM - 631)) | (1 << (MySqlParser.NDB - 631)) | (1 << (MySqlParser.NDBCLUSTER - 631)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 631)) | (1 << (MySqlParser.TOKUDB - 631)))) !== 0) || ((((_la - 989)) & ~0x1F) === 0 && ((1 << (_la - 989)) & ((1 << (MySqlParser.STRING_LITERAL - 989)) | (1 << (MySqlParser.ID - 989)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 989)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uuidSet(): UuidSetContext {
		let _localctx: UuidSetContext = new UuidSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, MySqlParser.RULE_uuidSet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5318;
			this.decimalLiteral();
			this.state = 5319;
			this.match(MySqlParser.MINUS);
			this.state = 5320;
			this.decimalLiteral();
			this.state = 5321;
			this.match(MySqlParser.MINUS);
			this.state = 5322;
			this.decimalLiteral();
			this.state = 5323;
			this.match(MySqlParser.MINUS);
			this.state = 5324;
			this.decimalLiteral();
			this.state = 5325;
			this.match(MySqlParser.MINUS);
			this.state = 5326;
			this.decimalLiteral();
			this.state = 5332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5327;
				this.match(MySqlParser.COLON_SYMB);
				this.state = 5328;
				this.decimalLiteral();
				this.state = 5329;
				this.match(MySqlParser.MINUS);
				this.state = 5330;
				this.decimalLiteral();
				}
				}
				this.state = 5334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MySqlParser.COLON_SYMB);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xid(): XidContext {
		let _localctx: XidContext = new XidContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, MySqlParser.RULE_xid);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5336;
			_localctx._globalTableUid = this.xuidStringId();
			this.state = 5343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMA) {
				{
				this.state = 5337;
				this.match(MySqlParser.COMMA);
				this.state = 5338;
				_localctx._qualifier = this.xuidStringId();
				this.state = 5341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.COMMA) {
					{
					this.state = 5339;
					this.match(MySqlParser.COMMA);
					this.state = 5340;
					_localctx._idFormat = this.decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xuidStringId(): XuidStringIdContext {
		let _localctx: XuidStringIdContext = new XuidStringIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, MySqlParser.RULE_xuidStringId);
		let _la: number;
		try {
			this.state = 5352;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5345;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case MySqlParser.BIT_STRING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5346;
				this.match(MySqlParser.BIT_STRING);
				}
				break;
			case MySqlParser.HEXADECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5348;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5347;
					this.match(MySqlParser.HEXADECIMAL_LITERAL);
					}
					}
					this.state = 5350;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.HEXADECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authPlugin(): AuthPluginContext {
		let _localctx: AuthPluginContext = new AuthPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, MySqlParser.RULE_authPlugin);
		try {
			this.state = 5356;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 776, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5354;
				this.uid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5355;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uid(): UidContext {
		let _localctx: UidContext = new UidContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, MySqlParser.RULE_uid);
		try {
			this.state = 5361;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 777, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5358;
				this.simpleId();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5359;
				this.match(MySqlParser.REVERSE_QUOTE_ID);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5360;
				this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleId(): SimpleIdContext {
		let _localctx: SimpleIdContext = new SimpleIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, MySqlParser.RULE_simpleId);
		try {
			this.state = 5372;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 778, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5363;
				this.match(MySqlParser.ID);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5364;
				this.charsetNameBase();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5365;
				this.transactionLevelBase();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5366;
				this.engineName();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5367;
				this.privilegesBase();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5368;
				this.intervalTypeBase();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5369;
				this.dataTypeBase();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5370;
				this.keywordsCanBeId();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5371;
				this.functionNameBase();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dottedId(): DottedIdContext {
		let _localctx: DottedIdContext = new DottedIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, MySqlParser.RULE_dottedId);
		try {
			this.state = 5377;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DOT_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5374;
				this.match(MySqlParser.DOT_ID);
				}
				break;
			case MySqlParser.DOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5375;
				this.match(MySqlParser.DOT);
				this.state = 5376;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalLiteral(): DecimalLiteralContext {
		let _localctx: DecimalLiteralContext = new DecimalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, MySqlParser.RULE_decimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5379;
			_la = this._input.LA(1);
			if (!(((((_la - 979)) & ~0x1F) === 0 && ((1 << (_la - 979)) & ((1 << (MySqlParser.ZERO_DECIMAL - 979)) | (1 << (MySqlParser.ONE_DECIMAL - 979)) | (1 << (MySqlParser.TWO_DECIMAL - 979)) | (1 << (MySqlParser.DECIMAL_LITERAL - 979)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileSizeLiteral(): FileSizeLiteralContext {
		let _localctx: FileSizeLiteralContext = new FileSizeLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, MySqlParser.RULE_fileSizeLiteral);
		try {
			this.state = 5383;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.FILESIZE_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5381;
				this.match(MySqlParser.FILESIZE_LITERAL);
				}
				break;
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.DECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5382;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringLiteral(): StringLiteralContext {
		let _localctx: StringLiteralContext = new StringLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, MySqlParser.RULE_stringLiteral);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5408;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 787, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5390;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.STRING_CHARSET_NAME:
					{
					this.state = 5386;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.STRING_CHARSET_NAME) {
						{
						this.state = 5385;
						this.match(MySqlParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 5388;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case MySqlParser.START_NATIONAL_STRING_LITERAL:
					{
					this.state = 5389;
					this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5393;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5392;
						this.match(MySqlParser.STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5395;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 783, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5402;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.STRING_CHARSET_NAME:
					{
					this.state = 5398;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.STRING_CHARSET_NAME) {
						{
						this.state = 5397;
						this.match(MySqlParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 5400;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case MySqlParser.START_NATIONAL_STRING_LITERAL:
					{
					this.state = 5401;
					this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5406;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 786, this._ctx) ) {
				case 1:
					{
					this.state = 5404;
					this.match(MySqlParser.COLLATE);
					this.state = 5405;
					this.collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanLiteral(): BooleanLiteralContext {
		let _localctx: BooleanLiteralContext = new BooleanLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, MySqlParser.RULE_booleanLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5410;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.FALSE || _la === MySqlParser.TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hexadecimalLiteral(): HexadecimalLiteralContext {
		let _localctx: HexadecimalLiteralContext = new HexadecimalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, MySqlParser.RULE_hexadecimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5413;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.STRING_CHARSET_NAME) {
				{
				this.state = 5412;
				this.match(MySqlParser.STRING_CHARSET_NAME);
				}
			}

			this.state = 5415;
			this.match(MySqlParser.HEXADECIMAL_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nullNotnull(): NullNotnullContext {
		let _localctx: NullNotnullContext = new NullNotnullContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, MySqlParser.RULE_nullNotnull);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5418;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.NOT) {
				{
				this.state = 5417;
				this.match(MySqlParser.NOT);
				}
			}

			this.state = 5420;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.NULL_LITERAL || _la === MySqlParser.NULL_SPEC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, MySqlParser.RULE_constant);
		let _la: number;
		try {
			this.state = 5434;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 791, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5422;
				this.stringLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5423;
				this.decimalLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5424;
				this.match(MySqlParser.MINUS);
				this.state = 5425;
				this.decimalLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5426;
				this.hexadecimalLiteral();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5427;
				this.booleanLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5428;
				this.match(MySqlParser.REAL_LITERAL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5429;
				this.match(MySqlParser.BIT_STRING);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5431;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 5430;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 5433;
				_localctx._nullLiteral = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NULL_LITERAL || _la === MySqlParser.NULL_SPEC_LITERAL)) {
					_localctx._nullLiteral = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataType(): DataTypeContext {
		let _localctx: DataTypeContext = new DataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, MySqlParser.RULE_dataType);
		let _la: number;
		try {
			this.state = 5542;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 820, this._ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5436;
				(_localctx as StringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 190)) & ~0x1F) === 0 && ((1 << (_la - 190)) & ((1 << (MySqlParser.CHAR - 190)) | (1 << (MySqlParser.VARCHAR - 190)) | (1 << (MySqlParser.NVARCHAR - 190)) | (1 << (MySqlParser.TINYTEXT - 190)) | (1 << (MySqlParser.TEXT - 190)) | (1 << (MySqlParser.MEDIUMTEXT - 190)) | (1 << (MySqlParser.LONGTEXT - 190)))) !== 0) || _la === MySqlParser.NCHAR)) {
					(_localctx as StringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5438;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 792, this._ctx) ) {
				case 1:
					{
					this.state = 5437;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 5441;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.BINARY) {
					{
					this.state = 5440;
					this.match(MySqlParser.BINARY);
					}
				}

				this.state = 5449;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 795, this._ctx) ) {
				case 1:
					{
					this.state = 5446;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.CHARACTER:
						{
						this.state = 5443;
						this.match(MySqlParser.CHARACTER);
						this.state = 5444;
						this.match(MySqlParser.SET);
						}
						break;
					case MySqlParser.CHARSET:
						{
						this.state = 5445;
						this.match(MySqlParser.CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5448;
					this.charsetName();
					}
					break;
				}
				this.state = 5453;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 796, this._ctx) ) {
				case 1:
					{
					this.state = 5451;
					this.match(MySqlParser.COLLATE);
					this.state = 5452;
					this.collationName();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5455;
				this.match(MySqlParser.NATIONAL);
				this.state = 5456;
				(_localctx as NationalStringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CHARACTER || _la === MySqlParser.VARCHAR)) {
					(_localctx as NationalStringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5458;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 797, this._ctx) ) {
				case 1:
					{
					this.state = 5457;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 5461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.BINARY) {
					{
					this.state = 5460;
					this.match(MySqlParser.BINARY);
					}
				}

				}
				break;

			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5463;
				this.match(MySqlParser.NCHAR);
				this.state = 5464;
				(_localctx as NationalStringDataTypeContext)._typeName = this.match(MySqlParser.VARCHAR);
				this.state = 5466;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 799, this._ctx) ) {
				case 1:
					{
					this.state = 5465;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 5469;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.BINARY) {
					{
					this.state = 5468;
					this.match(MySqlParser.BINARY);
					}
				}

				}
				break;

			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5471;
				this.match(MySqlParser.NATIONAL);
				this.state = 5472;
				(_localctx as NationalVaryingStringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CHARACTER || _la === MySqlParser.CHAR)) {
					(_localctx as NationalVaryingStringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5473;
				this.match(MySqlParser.VARYING);
				this.state = 5475;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 801, this._ctx) ) {
				case 1:
					{
					this.state = 5474;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 5478;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.BINARY) {
					{
					this.state = 5477;
					this.match(MySqlParser.BINARY);
					}
				}

				}
				break;

			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5480;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (MySqlParser.TINYINT - 172)) | (1 << (MySqlParser.SMALLINT - 172)) | (1 << (MySqlParser.MEDIUMINT - 172)) | (1 << (MySqlParser.INT - 172)) | (1 << (MySqlParser.INTEGER - 172)) | (1 << (MySqlParser.BIGINT - 172)))) !== 0))) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5482;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 803, this._ctx) ) {
				case 1:
					{
					this.state = 5481;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 5485;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 804, this._ctx) ) {
				case 1:
					{
					this.state = 5484;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.UNSIGNED || _la === MySqlParser.SIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ZEROFILL) {
					{
					this.state = 5487;
					this.match(MySqlParser.ZEROFILL);
					}
				}

				}
				break;

			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5490;
				(_localctx as DimensionDataTypeContext)._typeName = this.match(MySqlParser.REAL);
				this.state = 5492;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 806, this._ctx) ) {
				case 1:
					{
					this.state = 5491;
					this.lengthTwoDimension();
					}
					break;
				}
				this.state = 5495;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 807, this._ctx) ) {
				case 1:
					{
					this.state = 5494;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.UNSIGNED || _la === MySqlParser.SIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ZEROFILL) {
					{
					this.state = 5497;
					this.match(MySqlParser.ZEROFILL);
					}
				}

				}
				break;

			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5500;
				(_localctx as DimensionDataTypeContext)._typeName = this.match(MySqlParser.DOUBLE);
				this.state = 5502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.PRECISION) {
					{
					this.state = 5501;
					this.match(MySqlParser.PRECISION);
					}
				}

				this.state = 5505;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 810, this._ctx) ) {
				case 1:
					{
					this.state = 5504;
					this.lengthTwoDimension();
					}
					break;
				}
				this.state = 5508;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 811, this._ctx) ) {
				case 1:
					{
					this.state = 5507;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.UNSIGNED || _la === MySqlParser.SIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5511;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ZEROFILL) {
					{
					this.state = 5510;
					this.match(MySqlParser.ZEROFILL);
					}
				}

				}
				break;

			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5513;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (MySqlParser.FLOAT - 181)) | (1 << (MySqlParser.DECIMAL - 181)) | (1 << (MySqlParser.DEC - 181)) | (1 << (MySqlParser.NUMERIC - 181)))) !== 0) || _la === MySqlParser.FIXED)) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5515;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 813, this._ctx) ) {
				case 1:
					{
					this.state = 5514;
					this.lengthTwoOptionalDimension();
					}
					break;
				}
				this.state = 5518;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 814, this._ctx) ) {
				case 1:
					{
					this.state = 5517;
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.UNSIGNED || _la === MySqlParser.SIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ZEROFILL) {
					{
					this.state = 5520;
					this.match(MySqlParser.ZEROFILL);
					}
				}

				}
				break;

			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5523;
				(_localctx as SimpleDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TINYBLOB - 185)) | (1 << (MySqlParser.BLOB - 185)) | (1 << (MySqlParser.MEDIUMBLOB - 185)) | (1 << (MySqlParser.LONGBLOB - 185)) | (1 << (MySqlParser.SERIAL - 185)))) !== 0) || _la === MySqlParser.BOOL || _la === MySqlParser.BOOLEAN)) {
					(_localctx as SimpleDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5524;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & ((1 << (MySqlParser.TIME - 186)) | (1 << (MySqlParser.TIMESTAMP - 186)) | (1 << (MySqlParser.DATETIME - 186)) | (1 << (MySqlParser.YEAR - 186)) | (1 << (MySqlParser.BINARY - 186)) | (1 << (MySqlParser.VARBINARY - 186)))) !== 0) || _la === MySqlParser.BIT)) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5526;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 816, this._ctx) ) {
				case 1:
					{
					this.state = 5525;
					this.lengthOneDimension();
					}
					break;
				}
				}
				break;

			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5528;
				(_localctx as CollectionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SET || _la === MySqlParser.ENUM)) {
					(_localctx as CollectionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5529;
				this.collectionOptions();
				this.state = 5531;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.BINARY) {
					{
					this.state = 5530;
					this.match(MySqlParser.BINARY);
					}
				}

				this.state = 5539;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 819, this._ctx) ) {
				case 1:
					{
					this.state = 5536;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.CHARACTER:
						{
						this.state = 5533;
						this.match(MySqlParser.CHARACTER);
						this.state = 5534;
						this.match(MySqlParser.SET);
						}
						break;
					case MySqlParser.CHARSET:
						{
						this.state = 5535;
						this.match(MySqlParser.CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5538;
					this.charsetName();
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5541;
				(_localctx as SpatialDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.JSON || ((((_la - 647)) & ~0x1F) === 0 && ((1 << (_la - 647)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 647)) | (1 << (MySqlParser.GEOMCOLLECTION - 647)) | (1 << (MySqlParser.GEOMETRY - 647)) | (1 << (MySqlParser.LINESTRING - 647)) | (1 << (MySqlParser.MULTILINESTRING - 647)) | (1 << (MySqlParser.MULTIPOINT - 647)) | (1 << (MySqlParser.MULTIPOLYGON - 647)) | (1 << (MySqlParser.POINT - 647)) | (1 << (MySqlParser.POLYGON - 647)))) !== 0))) {
					(_localctx as SpatialDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collectionOptions(): CollectionOptionsContext {
		let _localctx: CollectionOptionsContext = new CollectionOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, MySqlParser.RULE_collectionOptions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5544;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5545;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 5550;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5546;
				this.match(MySqlParser.COMMA);
				this.state = 5547;
				this.match(MySqlParser.STRING_LITERAL);
				}
				}
				this.state = 5552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5553;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public convertedDataType(): ConvertedDataTypeContext {
		let _localctx: ConvertedDataTypeContext = new ConvertedDataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, MySqlParser.RULE_convertedDataType);
		let _la: number;
		try {
			this.state = 5580;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.BINARY:
			case MySqlParser.NCHAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5555;
				_localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BINARY || _la === MySqlParser.NCHAR)) {
					_localctx._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 5556;
					this.lengthOneDimension();
					}
				}

				}
				break;
			case MySqlParser.CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5559;
				_localctx._typeName = this.match(MySqlParser.CHAR);
				this.state = 5561;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 5560;
					this.lengthOneDimension();
					}
				}

				this.state = 5569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.CHARACTER || _la === MySqlParser.CHARSET) {
					{
					this.state = 5566;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MySqlParser.CHARACTER:
						{
						this.state = 5563;
						this.match(MySqlParser.CHARACTER);
						this.state = 5564;
						this.match(MySqlParser.SET);
						}
						break;
					case MySqlParser.CHARSET:
						{
						this.state = 5565;
						this.match(MySqlParser.CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5568;
					this.charsetName();
					}
				}

				}
				break;
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.DATETIME:
			case MySqlParser.JSON:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5571;
				_localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.DATETIME - 185)))) !== 0) || _la === MySqlParser.JSON)) {
					_localctx._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MySqlParser.DECIMAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5572;
				_localctx._typeName = this.match(MySqlParser.DECIMAL);
				this.state = 5574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LR_BRACKET) {
					{
					this.state = 5573;
					this.lengthTwoDimension();
					}
				}

				}
				break;
			case MySqlParser.UNSIGNED:
			case MySqlParser.SIGNED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5576;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.UNSIGNED || _la === MySqlParser.SIGNED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5578;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.INTEGER) {
					{
					this.state = 5577;
					this.match(MySqlParser.INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthOneDimension(): LengthOneDimensionContext {
		let _localctx: LengthOneDimensionContext = new LengthOneDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, MySqlParser.RULE_lengthOneDimension);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5582;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5583;
			this.decimalLiteral();
			this.state = 5584;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthTwoDimension(): LengthTwoDimensionContext {
		let _localctx: LengthTwoDimensionContext = new LengthTwoDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, MySqlParser.RULE_lengthTwoDimension);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5586;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5587;
			this.decimalLiteral();
			this.state = 5588;
			this.match(MySqlParser.COMMA);
			this.state = 5589;
			this.decimalLiteral();
			this.state = 5590;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
		let _localctx: LengthTwoOptionalDimensionContext = new LengthTwoOptionalDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, MySqlParser.RULE_lengthTwoOptionalDimension);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5592;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5593;
			this.decimalLiteral();
			this.state = 5596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.COMMA) {
				{
				this.state = 5594;
				this.match(MySqlParser.COMMA);
				this.state = 5595;
				this.decimalLiteral();
				}
			}

			this.state = 5598;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uidList(): UidListContext {
		let _localctx: UidListContext = new UidListContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, MySqlParser.RULE_uidList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5600;
			this.uid();
			this.state = 5605;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 830, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5601;
					this.match(MySqlParser.COMMA);
					this.state = 5602;
					this.uid();
					}
					}
				}
				this.state = 5607;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 830, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tables(): TablesContext {
		let _localctx: TablesContext = new TablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, MySqlParser.RULE_tables);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5608;
			this.tableName();
			this.state = 5613;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 831, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5609;
					this.match(MySqlParser.COMMA);
					this.state = 5610;
					this.tableName();
					}
					}
				}
				this.state = 5615;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 831, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnNames(): IndexColumnNamesContext {
		let _localctx: IndexColumnNamesContext = new IndexColumnNamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, MySqlParser.RULE_indexColumnNames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5616;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5617;
			this.indexColumnName();
			this.state = 5622;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5618;
				this.match(MySqlParser.COMMA);
				this.state = 5619;
				this.indexColumnName();
				}
				}
				this.state = 5624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5625;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressions(): ExpressionsContext {
		let _localctx: ExpressionsContext = new ExpressionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, MySqlParser.RULE_expressions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5627;
			this.expression(0);
			this.state = 5632;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5628;
				this.match(MySqlParser.COMMA);
				this.state = 5629;
				this.expression(0);
				}
				}
				this.state = 5634;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext {
		let _localctx: ExpressionsWithDefaultsContext = new ExpressionsWithDefaultsContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, MySqlParser.RULE_expressionsWithDefaults);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5635;
			this.expressionOrDefault();
			this.state = 5640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5636;
				this.match(MySqlParser.COMMA);
				this.state = 5637;
				this.expressionOrDefault();
				}
				}
				this.state = 5642;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constants(): ConstantsContext {
		let _localctx: ConstantsContext = new ConstantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, MySqlParser.RULE_constants);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5643;
			this.constant();
			this.state = 5648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5644;
				this.match(MySqlParser.COMMA);
				this.state = 5645;
				this.constant();
				}
				}
				this.state = 5650;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleStrings(): SimpleStringsContext {
		let _localctx: SimpleStringsContext = new SimpleStringsContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, MySqlParser.RULE_simpleStrings);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5651;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 5656;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5652;
				this.match(MySqlParser.COMMA);
				this.state = 5653;
				this.match(MySqlParser.STRING_LITERAL);
				}
				}
				this.state = 5658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userVariables(): UserVariablesContext {
		let _localctx: UserVariablesContext = new UserVariablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, MySqlParser.RULE_userVariables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5659;
			this.match(MySqlParser.LOCAL_ID);
			this.state = 5664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 5660;
				this.match(MySqlParser.COMMA);
				this.state = 5661;
				this.match(MySqlParser.LOCAL_ID);
				}
				}
				this.state = 5666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultValue(): DefaultValueContext {
		let _localctx: DefaultValueContext = new DefaultValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, MySqlParser.RULE_defaultValue);
		try {
			this.state = 5678;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 840, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5667;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5669;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 838, this._ctx) ) {
				case 1:
					{
					this.state = 5668;
					this.unaryOperator();
					}
					break;
				}
				this.state = 5671;
				this.constant();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5672;
				this.currentTimestamp();
				this.state = 5676;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 839, this._ctx) ) {
				case 1:
					{
					this.state = 5673;
					this.match(MySqlParser.ON);
					this.state = 5674;
					this.match(MySqlParser.UPDATE);
					this.state = 5675;
					this.currentTimestamp();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currentTimestamp(): CurrentTimestampContext {
		let _localctx: CurrentTimestampContext = new CurrentTimestampContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, MySqlParser.RULE_currentTimestamp);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5694;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.LOCALTIMESTAMP:
				{
				this.state = 5680;
				_la = this._input.LA(1);
				if (!(((((_la - 236)) & ~0x1F) === 0 && ((1 << (_la - 236)) & ((1 << (MySqlParser.CURRENT_TIMESTAMP - 236)) | (1 << (MySqlParser.LOCALTIME - 236)) | (1 << (MySqlParser.LOCALTIMESTAMP - 236)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5686;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 842, this._ctx) ) {
				case 1:
					{
					this.state = 5681;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 5683;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 979)) & ~0x1F) === 0 && ((1 << (_la - 979)) & ((1 << (MySqlParser.ZERO_DECIMAL - 979)) | (1 << (MySqlParser.ONE_DECIMAL - 979)) | (1 << (MySqlParser.TWO_DECIMAL - 979)) | (1 << (MySqlParser.DECIMAL_LITERAL - 979)))) !== 0)) {
						{
						this.state = 5682;
						this.decimalLiteral();
						}
					}

					this.state = 5685;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case MySqlParser.NOW:
				{
				this.state = 5688;
				this.match(MySqlParser.NOW);
				this.state = 5689;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 979)) & ~0x1F) === 0 && ((1 << (_la - 979)) & ((1 << (MySqlParser.ZERO_DECIMAL - 979)) | (1 << (MySqlParser.ONE_DECIMAL - 979)) | (1 << (MySqlParser.TWO_DECIMAL - 979)) | (1 << (MySqlParser.DECIMAL_LITERAL - 979)))) !== 0)) {
					{
					this.state = 5690;
					this.decimalLiteral();
					}
				}

				this.state = 5693;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionOrDefault(): ExpressionOrDefaultContext {
		let _localctx: ExpressionOrDefaultContext = new ExpressionOrDefaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, MySqlParser.RULE_expressionOrDefault);
		try {
			this.state = 5698;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.CASE:
			case MySqlParser.CAST:
			case MySqlParser.CONVERT:
			case MySqlParser.CURRENT_USER:
			case MySqlParser.DATABASE:
			case MySqlParser.EXISTS:
			case MySqlParser.FALSE:
			case MySqlParser.IF:
			case MySqlParser.INSERT:
			case MySqlParser.INTERVAL:
			case MySqlParser.LEFT:
			case MySqlParser.NOT:
			case MySqlParser.NULL_LITERAL:
			case MySqlParser.REPLACE:
			case MySqlParser.RIGHT:
			case MySqlParser.TRUE:
			case MySqlParser.VALUES:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.DATETIME:
			case MySqlParser.YEAR:
			case MySqlParser.CHAR:
			case MySqlParser.BINARY:
			case MySqlParser.TEXT:
			case MySqlParser.ENUM:
			case MySqlParser.SERIAL:
			case MySqlParser.AVG:
			case MySqlParser.BIT_AND:
			case MySqlParser.BIT_OR:
			case MySqlParser.BIT_XOR:
			case MySqlParser.COUNT:
			case MySqlParser.GROUP_CONCAT:
			case MySqlParser.MAX:
			case MySqlParser.MIN:
			case MySqlParser.STD:
			case MySqlParser.STDDEV:
			case MySqlParser.STDDEV_POP:
			case MySqlParser.STDDEV_SAMP:
			case MySqlParser.SUM:
			case MySqlParser.VAR_POP:
			case MySqlParser.VAR_SAMP:
			case MySqlParser.VARIANCE:
			case MySqlParser.CURRENT_DATE:
			case MySqlParser.CURRENT_TIME:
			case MySqlParser.CURRENT_TIMESTAMP:
			case MySqlParser.LOCALTIME:
			case MySqlParser.CURDATE:
			case MySqlParser.CURTIME:
			case MySqlParser.DATE_ADD:
			case MySqlParser.DATE_SUB:
			case MySqlParser.EXTRACT:
			case MySqlParser.LOCALTIMESTAMP:
			case MySqlParser.NOW:
			case MySqlParser.POSITION:
			case MySqlParser.SUBSTR:
			case MySqlParser.SUBSTRING:
			case MySqlParser.SYSDATE:
			case MySqlParser.TRIM:
			case MySqlParser.UTC_DATE:
			case MySqlParser.UTC_TIME:
			case MySqlParser.UTC_TIMESTAMP:
			case MySqlParser.ACCOUNT:
			case MySqlParser.ACTION:
			case MySqlParser.AFTER:
			case MySqlParser.AGGREGATE:
			case MySqlParser.ALGORITHM:
			case MySqlParser.ANY:
			case MySqlParser.AT:
			case MySqlParser.AUTHORS:
			case MySqlParser.AUTOCOMMIT:
			case MySqlParser.AUTOEXTEND_SIZE:
			case MySqlParser.AUTO_INCREMENT:
			case MySqlParser.AVG_ROW_LENGTH:
			case MySqlParser.BEGIN:
			case MySqlParser.BINLOG:
			case MySqlParser.BIT:
			case MySqlParser.BLOCK:
			case MySqlParser.BOOL:
			case MySqlParser.BOOLEAN:
			case MySqlParser.BTREE:
			case MySqlParser.CACHE:
			case MySqlParser.CASCADED:
			case MySqlParser.CHAIN:
			case MySqlParser.CHANGED:
			case MySqlParser.CHANNEL:
			case MySqlParser.CHECKSUM:
			case MySqlParser.PAGE_CHECKSUM:
			case MySqlParser.CIPHER:
			case MySqlParser.CLASS_ORIGIN:
			case MySqlParser.CLIENT:
			case MySqlParser.CLOSE:
			case MySqlParser.COALESCE:
			case MySqlParser.CODE:
			case MySqlParser.COLUMNS:
			case MySqlParser.COLUMN_FORMAT:
			case MySqlParser.COLUMN_NAME:
			case MySqlParser.COMMENT:
			case MySqlParser.COMMIT:
			case MySqlParser.COMPACT:
			case MySqlParser.COMPLETION:
			case MySqlParser.COMPRESSED:
			case MySqlParser.COMPRESSION:
			case MySqlParser.CONCURRENT:
			case MySqlParser.CONNECTION:
			case MySqlParser.CONSISTENT:
			case MySqlParser.CONSTRAINT_CATALOG:
			case MySqlParser.CONSTRAINT_SCHEMA:
			case MySqlParser.CONSTRAINT_NAME:
			case MySqlParser.CONTAINS:
			case MySqlParser.CONTEXT:
			case MySqlParser.CONTRIBUTORS:
			case MySqlParser.COPY:
			case MySqlParser.CPU:
			case MySqlParser.DATA:
			case MySqlParser.DATAFILE:
			case MySqlParser.DEALLOCATE:
			case MySqlParser.DEFAULT_AUTH:
			case MySqlParser.DEFINER:
			case MySqlParser.DELAY_KEY_WRITE:
			case MySqlParser.DES_KEY_FILE:
			case MySqlParser.DIRECTORY:
			case MySqlParser.DISABLE:
			case MySqlParser.DISCARD:
			case MySqlParser.DISK:
			case MySqlParser.DO:
			case MySqlParser.DUMPFILE:
			case MySqlParser.DUPLICATE:
			case MySqlParser.DYNAMIC:
			case MySqlParser.ENABLE:
			case MySqlParser.ENCRYPTION:
			case MySqlParser.END:
			case MySqlParser.ENDS:
			case MySqlParser.ENGINE:
			case MySqlParser.ENGINES:
			case MySqlParser.ERROR:
			case MySqlParser.ERRORS:
			case MySqlParser.ESCAPE:
			case MySqlParser.EVEN:
			case MySqlParser.EVENT:
			case MySqlParser.EVENTS:
			case MySqlParser.EVERY:
			case MySqlParser.EXCHANGE:
			case MySqlParser.EXCLUSIVE:
			case MySqlParser.EXPIRE:
			case MySqlParser.EXPORT:
			case MySqlParser.EXTENDED:
			case MySqlParser.EXTENT_SIZE:
			case MySqlParser.FAST:
			case MySqlParser.FAULTS:
			case MySqlParser.FIELDS:
			case MySqlParser.FILE_BLOCK_SIZE:
			case MySqlParser.FILTER:
			case MySqlParser.FIRST:
			case MySqlParser.FIXED:
			case MySqlParser.FLUSH:
			case MySqlParser.FOLLOWS:
			case MySqlParser.FOUND:
			case MySqlParser.FULL:
			case MySqlParser.FUNCTION:
			case MySqlParser.GENERAL:
			case MySqlParser.GLOBAL:
			case MySqlParser.GRANTS:
			case MySqlParser.GROUP_REPLICATION:
			case MySqlParser.HANDLER:
			case MySqlParser.HASH:
			case MySqlParser.HELP:
			case MySqlParser.HOST:
			case MySqlParser.HOSTS:
			case MySqlParser.IDENTIFIED:
			case MySqlParser.IGNORE_SERVER_IDS:
			case MySqlParser.IMPORT:
			case MySqlParser.INDEXES:
			case MySqlParser.INITIAL_SIZE:
			case MySqlParser.INPLACE:
			case MySqlParser.INSERT_METHOD:
			case MySqlParser.INSTALL:
			case MySqlParser.INSTANCE:
			case MySqlParser.INVISIBLE:
			case MySqlParser.INVOKER:
			case MySqlParser.IO:
			case MySqlParser.IO_THREAD:
			case MySqlParser.IPC:
			case MySqlParser.ISOLATION:
			case MySqlParser.ISSUER:
			case MySqlParser.JSON:
			case MySqlParser.KEY_BLOCK_SIZE:
			case MySqlParser.LANGUAGE:
			case MySqlParser.LAST:
			case MySqlParser.LEAVES:
			case MySqlParser.LESS:
			case MySqlParser.LEVEL:
			case MySqlParser.LIST:
			case MySqlParser.LOCAL:
			case MySqlParser.LOGFILE:
			case MySqlParser.LOGS:
			case MySqlParser.MASTER:
			case MySqlParser.MASTER_AUTO_POSITION:
			case MySqlParser.MASTER_CONNECT_RETRY:
			case MySqlParser.MASTER_DELAY:
			case MySqlParser.MASTER_HEARTBEAT_PERIOD:
			case MySqlParser.MASTER_HOST:
			case MySqlParser.MASTER_LOG_FILE:
			case MySqlParser.MASTER_LOG_POS:
			case MySqlParser.MASTER_PASSWORD:
			case MySqlParser.MASTER_PORT:
			case MySqlParser.MASTER_RETRY_COUNT:
			case MySqlParser.MASTER_SSL:
			case MySqlParser.MASTER_SSL_CA:
			case MySqlParser.MASTER_SSL_CAPATH:
			case MySqlParser.MASTER_SSL_CERT:
			case MySqlParser.MASTER_SSL_CIPHER:
			case MySqlParser.MASTER_SSL_CRL:
			case MySqlParser.MASTER_SSL_CRLPATH:
			case MySqlParser.MASTER_SSL_KEY:
			case MySqlParser.MASTER_TLS_VERSION:
			case MySqlParser.MASTER_USER:
			case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
			case MySqlParser.MAX_QUERIES_PER_HOUR:
			case MySqlParser.MAX_ROWS:
			case MySqlParser.MAX_SIZE:
			case MySqlParser.MAX_UPDATES_PER_HOUR:
			case MySqlParser.MAX_USER_CONNECTIONS:
			case MySqlParser.MEDIUM:
			case MySqlParser.MERGE:
			case MySqlParser.MESSAGE_TEXT:
			case MySqlParser.MID:
			case MySqlParser.MIGRATE:
			case MySqlParser.MIN_ROWS:
			case MySqlParser.MODE:
			case MySqlParser.MODIFY:
			case MySqlParser.MUTEX:
			case MySqlParser.MYSQL:
			case MySqlParser.MYSQL_ERRNO:
			case MySqlParser.NAME:
			case MySqlParser.NAMES:
			case MySqlParser.NCHAR:
			case MySqlParser.NEVER:
			case MySqlParser.NEXT:
			case MySqlParser.NO:
			case MySqlParser.NODEGROUP:
			case MySqlParser.NONE:
			case MySqlParser.OFFLINE:
			case MySqlParser.OFFSET:
			case MySqlParser.OJ:
			case MySqlParser.OLD_PASSWORD:
			case MySqlParser.ONE:
			case MySqlParser.ONLINE:
			case MySqlParser.ONLY:
			case MySqlParser.OPEN:
			case MySqlParser.OPTIMIZER_COSTS:
			case MySqlParser.OPTIONS:
			case MySqlParser.OWNER:
			case MySqlParser.PACK_KEYS:
			case MySqlParser.PAGE:
			case MySqlParser.PARSER:
			case MySqlParser.PARTIAL:
			case MySqlParser.PARTITIONING:
			case MySqlParser.PARTITIONS:
			case MySqlParser.PASSWORD:
			case MySqlParser.PHASE:
			case MySqlParser.PLUGIN:
			case MySqlParser.PLUGIN_DIR:
			case MySqlParser.PLUGINS:
			case MySqlParser.PORT:
			case MySqlParser.PRECEDES:
			case MySqlParser.PREPARE:
			case MySqlParser.PRESERVE:
			case MySqlParser.PREV:
			case MySqlParser.PROCESSLIST:
			case MySqlParser.PROFILE:
			case MySqlParser.PROFILES:
			case MySqlParser.PROXY:
			case MySqlParser.QUERY:
			case MySqlParser.QUICK:
			case MySqlParser.REBUILD:
			case MySqlParser.RECOVER:
			case MySqlParser.REDO_BUFFER_SIZE:
			case MySqlParser.REDUNDANT:
			case MySqlParser.RELAY:
			case MySqlParser.RELAY_LOG_FILE:
			case MySqlParser.RELAY_LOG_POS:
			case MySqlParser.RELAYLOG:
			case MySqlParser.REMOVE:
			case MySqlParser.REORGANIZE:
			case MySqlParser.REPAIR:
			case MySqlParser.REPLICATE_DO_DB:
			case MySqlParser.REPLICATE_DO_TABLE:
			case MySqlParser.REPLICATE_IGNORE_DB:
			case MySqlParser.REPLICATE_IGNORE_TABLE:
			case MySqlParser.REPLICATE_REWRITE_DB:
			case MySqlParser.REPLICATE_WILD_DO_TABLE:
			case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
			case MySqlParser.REPLICATION:
			case MySqlParser.RESET:
			case MySqlParser.RESUME:
			case MySqlParser.RETURNS:
			case MySqlParser.ROLLBACK:
			case MySqlParser.ROLLUP:
			case MySqlParser.ROTATE:
			case MySqlParser.ROW:
			case MySqlParser.ROWS:
			case MySqlParser.ROW_FORMAT:
			case MySqlParser.SAVEPOINT:
			case MySqlParser.SCHEDULE:
			case MySqlParser.SECURITY:
			case MySqlParser.SERVER:
			case MySqlParser.SESSION:
			case MySqlParser.SHARE:
			case MySqlParser.SHARED:
			case MySqlParser.SIGNED:
			case MySqlParser.SIMPLE:
			case MySqlParser.SLAVE:
			case MySqlParser.SLOW:
			case MySqlParser.SNAPSHOT:
			case MySqlParser.SOCKET:
			case MySqlParser.SOME:
			case MySqlParser.SONAME:
			case MySqlParser.SOUNDS:
			case MySqlParser.SOURCE:
			case MySqlParser.SQL_AFTER_GTIDS:
			case MySqlParser.SQL_AFTER_MTS_GAPS:
			case MySqlParser.SQL_BEFORE_GTIDS:
			case MySqlParser.SQL_BUFFER_RESULT:
			case MySqlParser.SQL_CACHE:
			case MySqlParser.SQL_NO_CACHE:
			case MySqlParser.SQL_THREAD:
			case MySqlParser.START:
			case MySqlParser.STARTS:
			case MySqlParser.STATS_AUTO_RECALC:
			case MySqlParser.STATS_PERSISTENT:
			case MySqlParser.STATS_SAMPLE_PAGES:
			case MySqlParser.STATUS:
			case MySqlParser.STOP:
			case MySqlParser.STORAGE:
			case MySqlParser.STRING:
			case MySqlParser.SUBCLASS_ORIGIN:
			case MySqlParser.SUBJECT:
			case MySqlParser.SUBPARTITION:
			case MySqlParser.SUBPARTITIONS:
			case MySqlParser.SUSPEND:
			case MySqlParser.SWAPS:
			case MySqlParser.SWITCHES:
			case MySqlParser.TABLE_NAME:
			case MySqlParser.TABLESPACE:
			case MySqlParser.TEMPORARY:
			case MySqlParser.TEMPTABLE:
			case MySqlParser.THAN:
			case MySqlParser.TRADITIONAL:
			case MySqlParser.TRANSACTION:
			case MySqlParser.TRIGGERS:
			case MySqlParser.TRUNCATE:
			case MySqlParser.UNDEFINED:
			case MySqlParser.UNDOFILE:
			case MySqlParser.UNDO_BUFFER_SIZE:
			case MySqlParser.UNINSTALL:
			case MySqlParser.UNKNOWN:
			case MySqlParser.UNTIL:
			case MySqlParser.UPGRADE:
			case MySqlParser.USER:
			case MySqlParser.USE_FRM:
			case MySqlParser.USER_RESOURCES:
			case MySqlParser.VALIDATION:
			case MySqlParser.VALUE:
			case MySqlParser.VARIABLES:
			case MySqlParser.VIEW:
			case MySqlParser.VISIBLE:
			case MySqlParser.WAIT:
			case MySqlParser.WARNINGS:
			case MySqlParser.WITHOUT:
			case MySqlParser.WORK:
			case MySqlParser.WRAPPER:
			case MySqlParser.X509:
			case MySqlParser.XA:
			case MySqlParser.XML:
			case MySqlParser.INTERNAL:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.TABLES:
			case MySqlParser.ROUTINE:
			case MySqlParser.EXECUTE:
			case MySqlParser.FILE:
			case MySqlParser.PROCESS:
			case MySqlParser.RELOAD:
			case MySqlParser.SHUTDOWN:
			case MySqlParser.SUPER:
			case MySqlParser.PRIVILEGES:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.ARMSCII8:
			case MySqlParser.ASCII:
			case MySqlParser.BIG5:
			case MySqlParser.CP1250:
			case MySqlParser.CP1251:
			case MySqlParser.CP1256:
			case MySqlParser.CP1257:
			case MySqlParser.CP850:
			case MySqlParser.CP852:
			case MySqlParser.CP866:
			case MySqlParser.CP932:
			case MySqlParser.DEC8:
			case MySqlParser.EUCJPMS:
			case MySqlParser.EUCKR:
			case MySqlParser.GB2312:
			case MySqlParser.GBK:
			case MySqlParser.GEOSTD8:
			case MySqlParser.GREEK:
			case MySqlParser.HEBREW:
			case MySqlParser.HP8:
			case MySqlParser.KEYBCS2:
			case MySqlParser.KOI8R:
			case MySqlParser.KOI8U:
			case MySqlParser.LATIN1:
			case MySqlParser.LATIN2:
			case MySqlParser.LATIN5:
			case MySqlParser.LATIN7:
			case MySqlParser.MACCE:
			case MySqlParser.MACROMAN:
			case MySqlParser.SJIS:
			case MySqlParser.SWE7:
			case MySqlParser.TIS620:
			case MySqlParser.UCS2:
			case MySqlParser.UJIS:
			case MySqlParser.UTF16:
			case MySqlParser.UTF16LE:
			case MySqlParser.UTF32:
			case MySqlParser.UTF8:
			case MySqlParser.UTF8MB3:
			case MySqlParser.UTF8MB4:
			case MySqlParser.ARCHIVE:
			case MySqlParser.BLACKHOLE:
			case MySqlParser.CSV:
			case MySqlParser.FEDERATED:
			case MySqlParser.INNODB:
			case MySqlParser.MEMORY:
			case MySqlParser.MRG_MYISAM:
			case MySqlParser.MYISAM:
			case MySqlParser.NDB:
			case MySqlParser.NDBCLUSTER:
			case MySqlParser.PERFORMANCE_SCHEMA:
			case MySqlParser.TOKUDB:
			case MySqlParser.REPEATABLE:
			case MySqlParser.COMMITTED:
			case MySqlParser.UNCOMMITTED:
			case MySqlParser.SERIALIZABLE:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CATALOG_NAME:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SCHEMA_NAME:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
			case MySqlParser.PLUS:
			case MySqlParser.MINUS:
			case MySqlParser.EXCLAMATION_SYMBOL:
			case MySqlParser.BIT_NOT_OP:
			case MySqlParser.LR_BRACKET:
			case MySqlParser.ZERO_DECIMAL:
			case MySqlParser.ONE_DECIMAL:
			case MySqlParser.TWO_DECIMAL:
			case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
			case MySqlParser.START_NATIONAL_STRING_LITERAL:
			case MySqlParser.STRING_LITERAL:
			case MySqlParser.DECIMAL_LITERAL:
			case MySqlParser.HEXADECIMAL_LITERAL:
			case MySqlParser.REAL_LITERAL:
			case MySqlParser.NULL_SPEC_LITERAL:
			case MySqlParser.BIT_STRING:
			case MySqlParser.STRING_CHARSET_NAME:
			case MySqlParser.ID:
			case MySqlParser.REVERSE_QUOTE_ID:
			case MySqlParser.LOCAL_ID:
			case MySqlParser.GLOBAL_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5696;
				this.expression(0);
				}
				break;
			case MySqlParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5697;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let _localctx: IfExistsContext = new IfExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, MySqlParser.RULE_ifExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5700;
			this.match(MySqlParser.IF);
			this.state = 5701;
			this.match(MySqlParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let _localctx: IfNotExistsContext = new IfNotExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, MySqlParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5703;
			this.match(MySqlParser.IF);
			this.state = 5704;
			this.match(MySqlParser.NOT);
			this.state = 5705;
			this.match(MySqlParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let _localctx: FunctionCallContext = new FunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, MySqlParser.RULE_functionCall);
		let _la: number;
		try {
			this.state = 5724;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 848, this._ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5707;
				this.specificFunction();
				}
				break;

			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5708;
				this.aggregateWindowedFunction();
				}
				break;

			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5709;
				this.scalarFunctionName();
				this.state = 5710;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 19)) & ~0x1F) === 0 && ((1 << (_la - 19)) & ((1 << (MySqlParser.CASE - 19)) | (1 << (MySqlParser.CAST - 19)) | (1 << (MySqlParser.CONVERT - 19)) | (1 << (MySqlParser.CURRENT_USER - 19)) | (1 << (MySqlParser.DATABASE - 19)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (MySqlParser.EXISTS - 51)) | (1 << (MySqlParser.FALSE - 51)) | (1 << (MySqlParser.IF - 51)) | (1 << (MySqlParser.INSERT - 51)) | (1 << (MySqlParser.INTERVAL - 51)))) !== 0) || ((((_la - 84)) & ~0x1F) === 0 && ((1 << (_la - 84)) & ((1 << (MySqlParser.LEFT - 84)) | (1 << (MySqlParser.NOT - 84)) | (1 << (MySqlParser.NULL_LITERAL - 84)))) !== 0) || ((((_la - 123)) & ~0x1F) === 0 && ((1 << (_la - 123)) & ((1 << (MySqlParser.REPLACE - 123)) | (1 << (MySqlParser.RIGHT - 123)) | (1 << (MySqlParser.TRUE - 123)))) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & ((1 << (MySqlParser.VALUES - 164)) | (1 << (MySqlParser.DATE - 164)) | (1 << (MySqlParser.TIME - 164)) | (1 << (MySqlParser.TIMESTAMP - 164)) | (1 << (MySqlParser.DATETIME - 164)) | (1 << (MySqlParser.YEAR - 164)) | (1 << (MySqlParser.CHAR - 164)) | (1 << (MySqlParser.BINARY - 164)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (MySqlParser.TEXT - 201)) | (1 << (MySqlParser.ENUM - 201)) | (1 << (MySqlParser.SERIAL - 201)) | (1 << (MySqlParser.AVG - 201)) | (1 << (MySqlParser.BIT_AND - 201)) | (1 << (MySqlParser.BIT_OR - 201)) | (1 << (MySqlParser.BIT_XOR - 201)) | (1 << (MySqlParser.COUNT - 201)) | (1 << (MySqlParser.GROUP_CONCAT - 201)) | (1 << (MySqlParser.MAX - 201)) | (1 << (MySqlParser.MIN - 201)) | (1 << (MySqlParser.STD - 201)) | (1 << (MySqlParser.STDDEV - 201)) | (1 << (MySqlParser.STDDEV_POP - 201)) | (1 << (MySqlParser.STDDEV_SAMP - 201)) | (1 << (MySqlParser.SUM - 201)) | (1 << (MySqlParser.VAR_POP - 201)) | (1 << (MySqlParser.VAR_SAMP - 201)))) !== 0) || ((((_la - 233)) & ~0x1F) === 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.CURRENT_DATE - 233)) | (1 << (MySqlParser.CURRENT_TIME - 233)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 233)) | (1 << (MySqlParser.LOCALTIME - 233)) | (1 << (MySqlParser.CURDATE - 233)) | (1 << (MySqlParser.CURTIME - 233)) | (1 << (MySqlParser.DATE_ADD - 233)) | (1 << (MySqlParser.DATE_SUB - 233)) | (1 << (MySqlParser.EXTRACT - 233)) | (1 << (MySqlParser.LOCALTIMESTAMP - 233)) | (1 << (MySqlParser.NOW - 233)) | (1 << (MySqlParser.POSITION - 233)) | (1 << (MySqlParser.SUBSTR - 233)) | (1 << (MySqlParser.SUBSTRING - 233)) | (1 << (MySqlParser.SYSDATE - 233)) | (1 << (MySqlParser.TRIM - 233)) | (1 << (MySqlParser.UTC_DATE - 233)) | (1 << (MySqlParser.UTC_TIME - 233)) | (1 << (MySqlParser.UTC_TIMESTAMP - 233)) | (1 << (MySqlParser.ACCOUNT - 233)) | (1 << (MySqlParser.ACTION - 233)) | (1 << (MySqlParser.AFTER - 233)) | (1 << (MySqlParser.AGGREGATE - 233)) | (1 << (MySqlParser.ALGORITHM - 233)) | (1 << (MySqlParser.ANY - 233)) | (1 << (MySqlParser.AT - 233)) | (1 << (MySqlParser.AUTHORS - 233)) | (1 << (MySqlParser.AUTOCOMMIT - 233)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 233)) | (1 << (MySqlParser.AUTO_INCREMENT - 233)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 233)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (MySqlParser.BEGIN - 265)) | (1 << (MySqlParser.BINLOG - 265)) | (1 << (MySqlParser.BIT - 265)) | (1 << (MySqlParser.BLOCK - 265)) | (1 << (MySqlParser.BOOL - 265)) | (1 << (MySqlParser.BOOLEAN - 265)) | (1 << (MySqlParser.BTREE - 265)) | (1 << (MySqlParser.CACHE - 265)) | (1 << (MySqlParser.CASCADED - 265)) | (1 << (MySqlParser.CHAIN - 265)) | (1 << (MySqlParser.CHANGED - 265)) | (1 << (MySqlParser.CHANNEL - 265)) | (1 << (MySqlParser.CHECKSUM - 265)) | (1 << (MySqlParser.PAGE_CHECKSUM - 265)) | (1 << (MySqlParser.CIPHER - 265)) | (1 << (MySqlParser.CLASS_ORIGIN - 265)) | (1 << (MySqlParser.CLIENT - 265)) | (1 << (MySqlParser.CLOSE - 265)) | (1 << (MySqlParser.COALESCE - 265)) | (1 << (MySqlParser.CODE - 265)) | (1 << (MySqlParser.COLUMNS - 265)) | (1 << (MySqlParser.COLUMN_FORMAT - 265)) | (1 << (MySqlParser.COLUMN_NAME - 265)) | (1 << (MySqlParser.COMMENT - 265)) | (1 << (MySqlParser.COMMIT - 265)) | (1 << (MySqlParser.COMPACT - 265)) | (1 << (MySqlParser.COMPLETION - 265)) | (1 << (MySqlParser.COMPRESSED - 265)) | (1 << (MySqlParser.COMPRESSION - 265)) | (1 << (MySqlParser.CONCURRENT - 265)) | (1 << (MySqlParser.CONNECTION - 265)) | (1 << (MySqlParser.CONSISTENT - 265)))) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & ((1 << (MySqlParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySqlParser.CONSTRAINT_NAME - 297)) | (1 << (MySqlParser.CONTAINS - 297)) | (1 << (MySqlParser.CONTEXT - 297)) | (1 << (MySqlParser.CONTRIBUTORS - 297)) | (1 << (MySqlParser.COPY - 297)) | (1 << (MySqlParser.CPU - 297)) | (1 << (MySqlParser.DATA - 297)) | (1 << (MySqlParser.DATAFILE - 297)) | (1 << (MySqlParser.DEALLOCATE - 297)) | (1 << (MySqlParser.DEFAULT_AUTH - 297)) | (1 << (MySqlParser.DEFINER - 297)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 297)) | (1 << (MySqlParser.DES_KEY_FILE - 297)) | (1 << (MySqlParser.DIRECTORY - 297)) | (1 << (MySqlParser.DISABLE - 297)) | (1 << (MySqlParser.DISCARD - 297)) | (1 << (MySqlParser.DISK - 297)) | (1 << (MySqlParser.DO - 297)) | (1 << (MySqlParser.DUMPFILE - 297)) | (1 << (MySqlParser.DUPLICATE - 297)) | (1 << (MySqlParser.DYNAMIC - 297)) | (1 << (MySqlParser.ENABLE - 297)) | (1 << (MySqlParser.ENCRYPTION - 297)) | (1 << (MySqlParser.END - 297)) | (1 << (MySqlParser.ENDS - 297)) | (1 << (MySqlParser.ENGINE - 297)) | (1 << (MySqlParser.ENGINES - 297)) | (1 << (MySqlParser.ERROR - 297)) | (1 << (MySqlParser.ERRORS - 297)) | (1 << (MySqlParser.ESCAPE - 297)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (MySqlParser.EVEN - 329)) | (1 << (MySqlParser.EVENT - 329)) | (1 << (MySqlParser.EVENTS - 329)) | (1 << (MySqlParser.EVERY - 329)) | (1 << (MySqlParser.EXCHANGE - 329)) | (1 << (MySqlParser.EXCLUSIVE - 329)) | (1 << (MySqlParser.EXPIRE - 329)) | (1 << (MySqlParser.EXPORT - 329)) | (1 << (MySqlParser.EXTENDED - 329)) | (1 << (MySqlParser.EXTENT_SIZE - 329)) | (1 << (MySqlParser.FAST - 329)) | (1 << (MySqlParser.FAULTS - 329)) | (1 << (MySqlParser.FIELDS - 329)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 329)) | (1 << (MySqlParser.FILTER - 329)) | (1 << (MySqlParser.FIRST - 329)) | (1 << (MySqlParser.FIXED - 329)) | (1 << (MySqlParser.FLUSH - 329)) | (1 << (MySqlParser.FOLLOWS - 329)) | (1 << (MySqlParser.FOUND - 329)) | (1 << (MySqlParser.FULL - 329)) | (1 << (MySqlParser.FUNCTION - 329)) | (1 << (MySqlParser.GENERAL - 329)) | (1 << (MySqlParser.GLOBAL - 329)) | (1 << (MySqlParser.GRANTS - 329)) | (1 << (MySqlParser.GROUP_REPLICATION - 329)) | (1 << (MySqlParser.HANDLER - 329)) | (1 << (MySqlParser.HASH - 329)) | (1 << (MySqlParser.HELP - 329)) | (1 << (MySqlParser.HOST - 329)) | (1 << (MySqlParser.HOSTS - 329)) | (1 << (MySqlParser.IDENTIFIED - 329)))) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & ((1 << (MySqlParser.IGNORE_SERVER_IDS - 361)) | (1 << (MySqlParser.IMPORT - 361)) | (1 << (MySqlParser.INDEXES - 361)) | (1 << (MySqlParser.INITIAL_SIZE - 361)) | (1 << (MySqlParser.INPLACE - 361)) | (1 << (MySqlParser.INSERT_METHOD - 361)) | (1 << (MySqlParser.INSTALL - 361)) | (1 << (MySqlParser.INSTANCE - 361)) | (1 << (MySqlParser.INVISIBLE - 361)) | (1 << (MySqlParser.INVOKER - 361)) | (1 << (MySqlParser.IO - 361)) | (1 << (MySqlParser.IO_THREAD - 361)) | (1 << (MySqlParser.IPC - 361)) | (1 << (MySqlParser.ISOLATION - 361)) | (1 << (MySqlParser.ISSUER - 361)) | (1 << (MySqlParser.JSON - 361)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 361)) | (1 << (MySqlParser.LANGUAGE - 361)) | (1 << (MySqlParser.LAST - 361)) | (1 << (MySqlParser.LEAVES - 361)) | (1 << (MySqlParser.LESS - 361)) | (1 << (MySqlParser.LEVEL - 361)) | (1 << (MySqlParser.LIST - 361)) | (1 << (MySqlParser.LOCAL - 361)) | (1 << (MySqlParser.LOGFILE - 361)) | (1 << (MySqlParser.LOGS - 361)) | (1 << (MySqlParser.MASTER - 361)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 361)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 361)) | (1 << (MySqlParser.MASTER_DELAY - 361)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 361)) | (1 << (MySqlParser.MASTER_HOST - 361)))) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & ((1 << (MySqlParser.MASTER_LOG_FILE - 393)) | (1 << (MySqlParser.MASTER_LOG_POS - 393)) | (1 << (MySqlParser.MASTER_PASSWORD - 393)) | (1 << (MySqlParser.MASTER_PORT - 393)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 393)) | (1 << (MySqlParser.MASTER_SSL - 393)) | (1 << (MySqlParser.MASTER_SSL_CA - 393)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 393)) | (1 << (MySqlParser.MASTER_SSL_CERT - 393)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 393)) | (1 << (MySqlParser.MASTER_SSL_CRL - 393)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 393)) | (1 << (MySqlParser.MASTER_SSL_KEY - 393)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 393)) | (1 << (MySqlParser.MASTER_USER - 393)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 393)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 393)) | (1 << (MySqlParser.MAX_ROWS - 393)) | (1 << (MySqlParser.MAX_SIZE - 393)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 393)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 393)) | (1 << (MySqlParser.MEDIUM - 393)) | (1 << (MySqlParser.MERGE - 393)) | (1 << (MySqlParser.MESSAGE_TEXT - 393)) | (1 << (MySqlParser.MID - 393)) | (1 << (MySqlParser.MIGRATE - 393)) | (1 << (MySqlParser.MIN_ROWS - 393)) | (1 << (MySqlParser.MODE - 393)) | (1 << (MySqlParser.MODIFY - 393)) | (1 << (MySqlParser.MUTEX - 393)) | (1 << (MySqlParser.MYSQL - 393)) | (1 << (MySqlParser.MYSQL_ERRNO - 393)))) !== 0) || ((((_la - 425)) & ~0x1F) === 0 && ((1 << (_la - 425)) & ((1 << (MySqlParser.NAME - 425)) | (1 << (MySqlParser.NAMES - 425)) | (1 << (MySqlParser.NCHAR - 425)) | (1 << (MySqlParser.NEVER - 425)) | (1 << (MySqlParser.NEXT - 425)) | (1 << (MySqlParser.NO - 425)) | (1 << (MySqlParser.NODEGROUP - 425)) | (1 << (MySqlParser.NONE - 425)) | (1 << (MySqlParser.OFFLINE - 425)) | (1 << (MySqlParser.OFFSET - 425)) | (1 << (MySqlParser.OJ - 425)) | (1 << (MySqlParser.OLD_PASSWORD - 425)) | (1 << (MySqlParser.ONE - 425)) | (1 << (MySqlParser.ONLINE - 425)) | (1 << (MySqlParser.ONLY - 425)) | (1 << (MySqlParser.OPEN - 425)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 425)) | (1 << (MySqlParser.OPTIONS - 425)) | (1 << (MySqlParser.OWNER - 425)) | (1 << (MySqlParser.PACK_KEYS - 425)) | (1 << (MySqlParser.PAGE - 425)) | (1 << (MySqlParser.PARSER - 425)) | (1 << (MySqlParser.PARTIAL - 425)) | (1 << (MySqlParser.PARTITIONING - 425)) | (1 << (MySqlParser.PARTITIONS - 425)) | (1 << (MySqlParser.PASSWORD - 425)) | (1 << (MySqlParser.PHASE - 425)) | (1 << (MySqlParser.PLUGIN - 425)) | (1 << (MySqlParser.PLUGIN_DIR - 425)) | (1 << (MySqlParser.PLUGINS - 425)) | (1 << (MySqlParser.PORT - 425)) | (1 << (MySqlParser.PRECEDES - 425)))) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & ((1 << (MySqlParser.PREPARE - 457)) | (1 << (MySqlParser.PRESERVE - 457)) | (1 << (MySqlParser.PREV - 457)) | (1 << (MySqlParser.PROCESSLIST - 457)) | (1 << (MySqlParser.PROFILE - 457)) | (1 << (MySqlParser.PROFILES - 457)) | (1 << (MySqlParser.PROXY - 457)) | (1 << (MySqlParser.QUERY - 457)) | (1 << (MySqlParser.QUICK - 457)) | (1 << (MySqlParser.REBUILD - 457)) | (1 << (MySqlParser.RECOVER - 457)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 457)) | (1 << (MySqlParser.REDUNDANT - 457)) | (1 << (MySqlParser.RELAY - 457)) | (1 << (MySqlParser.RELAY_LOG_FILE - 457)) | (1 << (MySqlParser.RELAY_LOG_POS - 457)) | (1 << (MySqlParser.RELAYLOG - 457)) | (1 << (MySqlParser.REMOVE - 457)) | (1 << (MySqlParser.REORGANIZE - 457)) | (1 << (MySqlParser.REPAIR - 457)) | (1 << (MySqlParser.REPLICATE_DO_DB - 457)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 457)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 457)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 457)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 457)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 457)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 457)) | (1 << (MySqlParser.REPLICATION - 457)) | (1 << (MySqlParser.RESET - 457)) | (1 << (MySqlParser.RESUME - 457)) | (1 << (MySqlParser.RETURNS - 457)) | (1 << (MySqlParser.ROLLBACK - 457)))) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & ((1 << (MySqlParser.ROLLUP - 489)) | (1 << (MySqlParser.ROTATE - 489)) | (1 << (MySqlParser.ROW - 489)) | (1 << (MySqlParser.ROWS - 489)) | (1 << (MySqlParser.ROW_FORMAT - 489)) | (1 << (MySqlParser.SAVEPOINT - 489)) | (1 << (MySqlParser.SCHEDULE - 489)) | (1 << (MySqlParser.SECURITY - 489)) | (1 << (MySqlParser.SERVER - 489)) | (1 << (MySqlParser.SESSION - 489)) | (1 << (MySqlParser.SHARE - 489)) | (1 << (MySqlParser.SHARED - 489)) | (1 << (MySqlParser.SIGNED - 489)) | (1 << (MySqlParser.SIMPLE - 489)) | (1 << (MySqlParser.SLAVE - 489)) | (1 << (MySqlParser.SLOW - 489)) | (1 << (MySqlParser.SNAPSHOT - 489)) | (1 << (MySqlParser.SOCKET - 489)) | (1 << (MySqlParser.SOME - 489)) | (1 << (MySqlParser.SONAME - 489)) | (1 << (MySqlParser.SOUNDS - 489)) | (1 << (MySqlParser.SOURCE - 489)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 489)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 489)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 489)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 489)) | (1 << (MySqlParser.SQL_CACHE - 489)) | (1 << (MySqlParser.SQL_NO_CACHE - 489)) | (1 << (MySqlParser.SQL_THREAD - 489)) | (1 << (MySqlParser.START - 489)) | (1 << (MySqlParser.STARTS - 489)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 489)))) !== 0) || ((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & ((1 << (MySqlParser.STATS_PERSISTENT - 521)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 521)) | (1 << (MySqlParser.STATUS - 521)) | (1 << (MySqlParser.STOP - 521)) | (1 << (MySqlParser.STORAGE - 521)) | (1 << (MySqlParser.STRING - 521)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 521)) | (1 << (MySqlParser.SUBJECT - 521)) | (1 << (MySqlParser.SUBPARTITION - 521)) | (1 << (MySqlParser.SUBPARTITIONS - 521)) | (1 << (MySqlParser.SUSPEND - 521)) | (1 << (MySqlParser.SWAPS - 521)) | (1 << (MySqlParser.SWITCHES - 521)) | (1 << (MySqlParser.TABLE_NAME - 521)) | (1 << (MySqlParser.TABLESPACE - 521)) | (1 << (MySqlParser.TEMPORARY - 521)) | (1 << (MySqlParser.TEMPTABLE - 521)) | (1 << (MySqlParser.THAN - 521)) | (1 << (MySqlParser.TRADITIONAL - 521)) | (1 << (MySqlParser.TRANSACTION - 521)) | (1 << (MySqlParser.TRIGGERS - 521)) | (1 << (MySqlParser.TRUNCATE - 521)) | (1 << (MySqlParser.UNDEFINED - 521)) | (1 << (MySqlParser.UNDOFILE - 521)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 521)) | (1 << (MySqlParser.UNINSTALL - 521)) | (1 << (MySqlParser.UNKNOWN - 521)) | (1 << (MySqlParser.UNTIL - 521)) | (1 << (MySqlParser.UPGRADE - 521)) | (1 << (MySqlParser.USER - 521)) | (1 << (MySqlParser.USE_FRM - 521)))) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & ((1 << (MySqlParser.USER_RESOURCES - 553)) | (1 << (MySqlParser.VALIDATION - 553)) | (1 << (MySqlParser.VALUE - 553)) | (1 << (MySqlParser.VARIABLES - 553)) | (1 << (MySqlParser.VIEW - 553)) | (1 << (MySqlParser.VISIBLE - 553)) | (1 << (MySqlParser.WAIT - 553)) | (1 << (MySqlParser.WARNINGS - 553)) | (1 << (MySqlParser.WITHOUT - 553)) | (1 << (MySqlParser.WORK - 553)) | (1 << (MySqlParser.WRAPPER - 553)) | (1 << (MySqlParser.X509 - 553)) | (1 << (MySqlParser.XA - 553)) | (1 << (MySqlParser.XML - 553)) | (1 << (MySqlParser.INTERNAL - 553)) | (1 << (MySqlParser.QUARTER - 553)) | (1 << (MySqlParser.MONTH - 553)) | (1 << (MySqlParser.DAY - 553)) | (1 << (MySqlParser.HOUR - 553)) | (1 << (MySqlParser.MINUTE - 553)) | (1 << (MySqlParser.WEEK - 553)) | (1 << (MySqlParser.SECOND - 553)) | (1 << (MySqlParser.MICROSECOND - 553)) | (1 << (MySqlParser.TABLES - 553)) | (1 << (MySqlParser.ROUTINE - 553)) | (1 << (MySqlParser.EXECUTE - 553)) | (1 << (MySqlParser.FILE - 553)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (MySqlParser.PROCESS - 585)) | (1 << (MySqlParser.RELOAD - 585)) | (1 << (MySqlParser.SHUTDOWN - 585)) | (1 << (MySqlParser.SUPER - 585)) | (1 << (MySqlParser.PRIVILEGES - 585)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 585)) | (1 << (MySqlParser.ARMSCII8 - 585)) | (1 << (MySqlParser.ASCII - 585)) | (1 << (MySqlParser.BIG5 - 585)) | (1 << (MySqlParser.CP1250 - 585)) | (1 << (MySqlParser.CP1251 - 585)) | (1 << (MySqlParser.CP1256 - 585)) | (1 << (MySqlParser.CP1257 - 585)) | (1 << (MySqlParser.CP850 - 585)) | (1 << (MySqlParser.CP852 - 585)) | (1 << (MySqlParser.CP866 - 585)) | (1 << (MySqlParser.CP932 - 585)) | (1 << (MySqlParser.DEC8 - 585)) | (1 << (MySqlParser.EUCJPMS - 585)) | (1 << (MySqlParser.EUCKR - 585)) | (1 << (MySqlParser.GB2312 - 585)) | (1 << (MySqlParser.GBK - 585)) | (1 << (MySqlParser.GEOSTD8 - 585)) | (1 << (MySqlParser.GREEK - 585)) | (1 << (MySqlParser.HEBREW - 585)) | (1 << (MySqlParser.HP8 - 585)) | (1 << (MySqlParser.KEYBCS2 - 585)) | (1 << (MySqlParser.KOI8R - 585)) | (1 << (MySqlParser.KOI8U - 585)) | (1 << (MySqlParser.LATIN1 - 585)) | (1 << (MySqlParser.LATIN2 - 585)) | (1 << (MySqlParser.LATIN5 - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (MySqlParser.LATIN7 - 617)) | (1 << (MySqlParser.MACCE - 617)) | (1 << (MySqlParser.MACROMAN - 617)) | (1 << (MySqlParser.SJIS - 617)) | (1 << (MySqlParser.SWE7 - 617)) | (1 << (MySqlParser.TIS620 - 617)) | (1 << (MySqlParser.UCS2 - 617)) | (1 << (MySqlParser.UJIS - 617)) | (1 << (MySqlParser.UTF16 - 617)) | (1 << (MySqlParser.UTF16LE - 617)) | (1 << (MySqlParser.UTF32 - 617)) | (1 << (MySqlParser.UTF8 - 617)) | (1 << (MySqlParser.UTF8MB3 - 617)) | (1 << (MySqlParser.UTF8MB4 - 617)) | (1 << (MySqlParser.ARCHIVE - 617)) | (1 << (MySqlParser.BLACKHOLE - 617)) | (1 << (MySqlParser.CSV - 617)) | (1 << (MySqlParser.FEDERATED - 617)) | (1 << (MySqlParser.INNODB - 617)) | (1 << (MySqlParser.MEMORY - 617)) | (1 << (MySqlParser.MRG_MYISAM - 617)) | (1 << (MySqlParser.MYISAM - 617)) | (1 << (MySqlParser.NDB - 617)) | (1 << (MySqlParser.NDBCLUSTER - 617)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 617)) | (1 << (MySqlParser.TOKUDB - 617)) | (1 << (MySqlParser.REPEATABLE - 617)) | (1 << (MySqlParser.COMMITTED - 617)) | (1 << (MySqlParser.UNCOMMITTED - 617)) | (1 << (MySqlParser.SERIALIZABLE - 617)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 617)))) !== 0) || ((((_la - 650)) & ~0x1F) === 0 && ((1 << (_la - 650)) & ((1 << (MySqlParser.LINESTRING - 650)) | (1 << (MySqlParser.MULTILINESTRING - 650)) | (1 << (MySqlParser.MULTIPOINT - 650)) | (1 << (MySqlParser.MULTIPOLYGON - 650)) | (1 << (MySqlParser.POINT - 650)) | (1 << (MySqlParser.POLYGON - 650)) | (1 << (MySqlParser.ABS - 650)) | (1 << (MySqlParser.ACOS - 650)) | (1 << (MySqlParser.ADDDATE - 650)) | (1 << (MySqlParser.ADDTIME - 650)) | (1 << (MySqlParser.AES_DECRYPT - 650)) | (1 << (MySqlParser.AES_ENCRYPT - 650)) | (1 << (MySqlParser.AREA - 650)) | (1 << (MySqlParser.ASBINARY - 650)) | (1 << (MySqlParser.ASIN - 650)) | (1 << (MySqlParser.ASTEXT - 650)) | (1 << (MySqlParser.ASWKB - 650)) | (1 << (MySqlParser.ASWKT - 650)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 650)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 650)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 650)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 650)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 650)) | (1 << (MySqlParser.ATAN - 650)) | (1 << (MySqlParser.ATAN2 - 650)) | (1 << (MySqlParser.BENCHMARK - 650)) | (1 << (MySqlParser.BIN - 650)) | (1 << (MySqlParser.BIT_COUNT - 650)) | (1 << (MySqlParser.BIT_LENGTH - 650)) | (1 << (MySqlParser.BUFFER - 650)) | (1 << (MySqlParser.CATALOG_NAME - 650)) | (1 << (MySqlParser.CEIL - 650)))) !== 0) || ((((_la - 682)) & ~0x1F) === 0 && ((1 << (_la - 682)) & ((1 << (MySqlParser.CEILING - 682)) | (1 << (MySqlParser.CENTROID - 682)) | (1 << (MySqlParser.CHARACTER_LENGTH - 682)) | (1 << (MySqlParser.CHARSET - 682)) | (1 << (MySqlParser.CHAR_LENGTH - 682)) | (1 << (MySqlParser.COERCIBILITY - 682)) | (1 << (MySqlParser.COLLATION - 682)) | (1 << (MySqlParser.COMPRESS - 682)) | (1 << (MySqlParser.CONCAT - 682)) | (1 << (MySqlParser.CONCAT_WS - 682)) | (1 << (MySqlParser.CONNECTION_ID - 682)) | (1 << (MySqlParser.CONV - 682)) | (1 << (MySqlParser.CONVERT_TZ - 682)) | (1 << (MySqlParser.COS - 682)) | (1 << (MySqlParser.COT - 682)) | (1 << (MySqlParser.CRC32 - 682)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 682)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 682)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 682)) | (1 << (MySqlParser.CREATE_DIGEST - 682)) | (1 << (MySqlParser.CROSSES - 682)) | (1 << (MySqlParser.DATEDIFF - 682)) | (1 << (MySqlParser.DATE_FORMAT - 682)) | (1 << (MySqlParser.DAYNAME - 682)) | (1 << (MySqlParser.DAYOFMONTH - 682)) | (1 << (MySqlParser.DAYOFWEEK - 682)) | (1 << (MySqlParser.DAYOFYEAR - 682)) | (1 << (MySqlParser.DECODE - 682)) | (1 << (MySqlParser.DEGREES - 682)) | (1 << (MySqlParser.DES_DECRYPT - 682)) | (1 << (MySqlParser.DES_ENCRYPT - 682)) | (1 << (MySqlParser.DIMENSION - 682)))) !== 0) || ((((_la - 714)) & ~0x1F) === 0 && ((1 << (_la - 714)) & ((1 << (MySqlParser.DISJOINT - 714)) | (1 << (MySqlParser.ELT - 714)) | (1 << (MySqlParser.ENCODE - 714)) | (1 << (MySqlParser.ENCRYPT - 714)) | (1 << (MySqlParser.ENDPOINT - 714)) | (1 << (MySqlParser.ENVELOPE - 714)) | (1 << (MySqlParser.EQUALS - 714)) | (1 << (MySqlParser.EXP - 714)) | (1 << (MySqlParser.EXPORT_SET - 714)) | (1 << (MySqlParser.EXTERIORRING - 714)) | (1 << (MySqlParser.EXTRACTVALUE - 714)) | (1 << (MySqlParser.FIELD - 714)) | (1 << (MySqlParser.FIND_IN_SET - 714)) | (1 << (MySqlParser.FLOOR - 714)) | (1 << (MySqlParser.FORMAT - 714)) | (1 << (MySqlParser.FOUND_ROWS - 714)) | (1 << (MySqlParser.FROM_BASE64 - 714)) | (1 << (MySqlParser.FROM_DAYS - 714)) | (1 << (MySqlParser.FROM_UNIXTIME - 714)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 714)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 714)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 714)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 714)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 714)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 714)) | (1 << (MySqlParser.GEOMETRYN - 714)) | (1 << (MySqlParser.GEOMETRYTYPE - 714)) | (1 << (MySqlParser.GEOMFROMTEXT - 714)) | (1 << (MySqlParser.GEOMFROMWKB - 714)) | (1 << (MySqlParser.GET_FORMAT - 714)) | (1 << (MySqlParser.GET_LOCK - 714)) | (1 << (MySqlParser.GLENGTH - 714)))) !== 0) || ((((_la - 746)) & ~0x1F) === 0 && ((1 << (_la - 746)) & ((1 << (MySqlParser.GREATEST - 746)) | (1 << (MySqlParser.GTID_SUBSET - 746)) | (1 << (MySqlParser.GTID_SUBTRACT - 746)) | (1 << (MySqlParser.HEX - 746)) | (1 << (MySqlParser.IFNULL - 746)) | (1 << (MySqlParser.INET6_ATON - 746)) | (1 << (MySqlParser.INET6_NTOA - 746)) | (1 << (MySqlParser.INET_ATON - 746)) | (1 << (MySqlParser.INET_NTOA - 746)) | (1 << (MySqlParser.INSTR - 746)) | (1 << (MySqlParser.INTERIORRINGN - 746)) | (1 << (MySqlParser.INTERSECTS - 746)) | (1 << (MySqlParser.ISCLOSED - 746)) | (1 << (MySqlParser.ISEMPTY - 746)) | (1 << (MySqlParser.ISNULL - 746)) | (1 << (MySqlParser.ISSIMPLE - 746)) | (1 << (MySqlParser.IS_FREE_LOCK - 746)) | (1 << (MySqlParser.IS_IPV4 - 746)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 746)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 746)) | (1 << (MySqlParser.IS_IPV6 - 746)) | (1 << (MySqlParser.IS_USED_LOCK - 746)) | (1 << (MySqlParser.LAST_INSERT_ID - 746)) | (1 << (MySqlParser.LCASE - 746)) | (1 << (MySqlParser.LEAST - 746)) | (1 << (MySqlParser.LENGTH - 746)) | (1 << (MySqlParser.LINEFROMTEXT - 746)) | (1 << (MySqlParser.LINEFROMWKB - 746)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 746)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 746)) | (1 << (MySqlParser.LN - 746)) | (1 << (MySqlParser.LOAD_FILE - 746)))) !== 0) || ((((_la - 778)) & ~0x1F) === 0 && ((1 << (_la - 778)) & ((1 << (MySqlParser.LOCATE - 778)) | (1 << (MySqlParser.LOG - 778)) | (1 << (MySqlParser.LOG10 - 778)) | (1 << (MySqlParser.LOG2 - 778)) | (1 << (MySqlParser.LOWER - 778)) | (1 << (MySqlParser.LPAD - 778)) | (1 << (MySqlParser.LTRIM - 778)) | (1 << (MySqlParser.MAKEDATE - 778)) | (1 << (MySqlParser.MAKETIME - 778)) | (1 << (MySqlParser.MAKE_SET - 778)) | (1 << (MySqlParser.MASTER_POS_WAIT - 778)) | (1 << (MySqlParser.MBRCONTAINS - 778)) | (1 << (MySqlParser.MBRDISJOINT - 778)) | (1 << (MySqlParser.MBREQUAL - 778)) | (1 << (MySqlParser.MBRINTERSECTS - 778)) | (1 << (MySqlParser.MBROVERLAPS - 778)) | (1 << (MySqlParser.MBRTOUCHES - 778)) | (1 << (MySqlParser.MBRWITHIN - 778)) | (1 << (MySqlParser.MD5 - 778)) | (1 << (MySqlParser.MLINEFROMTEXT - 778)) | (1 << (MySqlParser.MLINEFROMWKB - 778)) | (1 << (MySqlParser.MONTHNAME - 778)) | (1 << (MySqlParser.MPOINTFROMTEXT - 778)) | (1 << (MySqlParser.MPOINTFROMWKB - 778)) | (1 << (MySqlParser.MPOLYFROMTEXT - 778)) | (1 << (MySqlParser.MPOLYFROMWKB - 778)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 778)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 778)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 778)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 778)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 778)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 778)))) !== 0) || ((((_la - 810)) & ~0x1F) === 0 && ((1 << (_la - 810)) & ((1 << (MySqlParser.NAME_CONST - 810)) | (1 << (MySqlParser.NULLIF - 810)) | (1 << (MySqlParser.NUMGEOMETRIES - 810)) | (1 << (MySqlParser.NUMINTERIORRINGS - 810)) | (1 << (MySqlParser.NUMPOINTS - 810)) | (1 << (MySqlParser.OCT - 810)) | (1 << (MySqlParser.OCTET_LENGTH - 810)) | (1 << (MySqlParser.ORD - 810)) | (1 << (MySqlParser.OVERLAPS - 810)) | (1 << (MySqlParser.PERIOD_ADD - 810)) | (1 << (MySqlParser.PERIOD_DIFF - 810)) | (1 << (MySqlParser.PI - 810)) | (1 << (MySqlParser.POINTFROMTEXT - 810)) | (1 << (MySqlParser.POINTFROMWKB - 810)) | (1 << (MySqlParser.POINTN - 810)) | (1 << (MySqlParser.POLYFROMTEXT - 810)) | (1 << (MySqlParser.POLYFROMWKB - 810)) | (1 << (MySqlParser.POLYGONFROMTEXT - 810)) | (1 << (MySqlParser.POLYGONFROMWKB - 810)) | (1 << (MySqlParser.POW - 810)) | (1 << (MySqlParser.POWER - 810)) | (1 << (MySqlParser.QUOTE - 810)) | (1 << (MySqlParser.RADIANS - 810)) | (1 << (MySqlParser.RAND - 810)) | (1 << (MySqlParser.RANDOM_BYTES - 810)) | (1 << (MySqlParser.RELEASE_LOCK - 810)) | (1 << (MySqlParser.REVERSE - 810)) | (1 << (MySqlParser.ROUND - 810)) | (1 << (MySqlParser.ROW_COUNT - 810)) | (1 << (MySqlParser.RPAD - 810)) | (1 << (MySqlParser.RTRIM - 810)) | (1 << (MySqlParser.SEC_TO_TIME - 810)))) !== 0) || ((((_la - 842)) & ~0x1F) === 0 && ((1 << (_la - 842)) & ((1 << (MySqlParser.SESSION_USER - 842)) | (1 << (MySqlParser.SHA - 842)) | (1 << (MySqlParser.SHA1 - 842)) | (1 << (MySqlParser.SHA2 - 842)) | (1 << (MySqlParser.SCHEMA_NAME - 842)) | (1 << (MySqlParser.SIGN - 842)) | (1 << (MySqlParser.SIN - 842)) | (1 << (MySqlParser.SLEEP - 842)) | (1 << (MySqlParser.SOUNDEX - 842)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 842)) | (1 << (MySqlParser.SQRT - 842)) | (1 << (MySqlParser.SRID - 842)) | (1 << (MySqlParser.STARTPOINT - 842)) | (1 << (MySqlParser.STRCMP - 842)) | (1 << (MySqlParser.STR_TO_DATE - 842)) | (1 << (MySqlParser.ST_AREA - 842)) | (1 << (MySqlParser.ST_ASBINARY - 842)) | (1 << (MySqlParser.ST_ASTEXT - 842)) | (1 << (MySqlParser.ST_ASWKB - 842)) | (1 << (MySqlParser.ST_ASWKT - 842)) | (1 << (MySqlParser.ST_BUFFER - 842)) | (1 << (MySqlParser.ST_CENTROID - 842)) | (1 << (MySqlParser.ST_CONTAINS - 842)) | (1 << (MySqlParser.ST_CROSSES - 842)) | (1 << (MySqlParser.ST_DIFFERENCE - 842)) | (1 << (MySqlParser.ST_DIMENSION - 842)) | (1 << (MySqlParser.ST_DISJOINT - 842)) | (1 << (MySqlParser.ST_DISTANCE - 842)) | (1 << (MySqlParser.ST_ENDPOINT - 842)) | (1 << (MySqlParser.ST_ENVELOPE - 842)) | (1 << (MySqlParser.ST_EQUALS - 842)) | (1 << (MySqlParser.ST_EXTERIORRING - 842)))) !== 0) || ((((_la - 874)) & ~0x1F) === 0 && ((1 << (_la - 874)) & ((1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 874)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 874)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 874)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 874)) | (1 << (MySqlParser.ST_GEOMETRYN - 874)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 874)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 874)) | (1 << (MySqlParser.ST_INTERIORRINGN - 874)) | (1 << (MySqlParser.ST_INTERSECTION - 874)) | (1 << (MySqlParser.ST_INTERSECTS - 874)) | (1 << (MySqlParser.ST_ISCLOSED - 874)) | (1 << (MySqlParser.ST_ISEMPTY - 874)) | (1 << (MySqlParser.ST_ISSIMPLE - 874)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 874)) | (1 << (MySqlParser.ST_LINEFROMWKB - 874)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 874)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 874)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 874)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 874)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 874)) | (1 << (MySqlParser.ST_NUMPOINTS - 874)) | (1 << (MySqlParser.ST_OVERLAPS - 874)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 874)) | (1 << (MySqlParser.ST_POINTFROMWKB - 874)) | (1 << (MySqlParser.ST_POINTN - 874)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 874)) | (1 << (MySqlParser.ST_POLYFROMWKB - 874)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 874)))) !== 0) || ((((_la - 906)) & ~0x1F) === 0 && ((1 << (_la - 906)) & ((1 << (MySqlParser.ST_POLYGONFROMWKB - 906)) | (1 << (MySqlParser.ST_SRID - 906)) | (1 << (MySqlParser.ST_STARTPOINT - 906)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 906)) | (1 << (MySqlParser.ST_TOUCHES - 906)) | (1 << (MySqlParser.ST_UNION - 906)) | (1 << (MySqlParser.ST_WITHIN - 906)) | (1 << (MySqlParser.ST_X - 906)) | (1 << (MySqlParser.ST_Y - 906)) | (1 << (MySqlParser.SUBDATE - 906)) | (1 << (MySqlParser.SUBSTRING_INDEX - 906)) | (1 << (MySqlParser.SUBTIME - 906)) | (1 << (MySqlParser.SYSTEM_USER - 906)) | (1 << (MySqlParser.TAN - 906)) | (1 << (MySqlParser.TIMEDIFF - 906)) | (1 << (MySqlParser.TIMESTAMPADD - 906)) | (1 << (MySqlParser.TIMESTAMPDIFF - 906)) | (1 << (MySqlParser.TIME_FORMAT - 906)) | (1 << (MySqlParser.TIME_TO_SEC - 906)) | (1 << (MySqlParser.TOUCHES - 906)) | (1 << (MySqlParser.TO_BASE64 - 906)) | (1 << (MySqlParser.TO_DAYS - 906)) | (1 << (MySqlParser.TO_SECONDS - 906)) | (1 << (MySqlParser.UCASE - 906)) | (1 << (MySqlParser.UNCOMPRESS - 906)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 906)) | (1 << (MySqlParser.UNHEX - 906)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 906)) | (1 << (MySqlParser.UPDATEXML - 906)) | (1 << (MySqlParser.UPPER - 906)) | (1 << (MySqlParser.UUID - 906)) | (1 << (MySqlParser.UUID_SHORT - 906)))) !== 0) || ((((_la - 938)) & ~0x1F) === 0 && ((1 << (_la - 938)) & ((1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 938)) | (1 << (MySqlParser.VERSION - 938)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 938)) | (1 << (MySqlParser.WEEKDAY - 938)) | (1 << (MySqlParser.WEEKOFYEAR - 938)) | (1 << (MySqlParser.WEIGHT_STRING - 938)) | (1 << (MySqlParser.WITHIN - 938)) | (1 << (MySqlParser.YEARWEEK - 938)) | (1 << (MySqlParser.Y_FUNCTION - 938)) | (1 << (MySqlParser.X_FUNCTION - 938)) | (1 << (MySqlParser.PLUS - 938)) | (1 << (MySqlParser.MINUS - 938)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 938)) | (1 << (MySqlParser.BIT_NOT_OP - 938)))) !== 0) || ((((_la - 974)) & ~0x1F) === 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.LR_BRACKET - 974)) | (1 << (MySqlParser.ZERO_DECIMAL - 974)) | (1 << (MySqlParser.ONE_DECIMAL - 974)) | (1 << (MySqlParser.TWO_DECIMAL - 974)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 974)) | (1 << (MySqlParser.START_NATIONAL_STRING_LITERAL - 974)) | (1 << (MySqlParser.STRING_LITERAL - 974)) | (1 << (MySqlParser.DECIMAL_LITERAL - 974)) | (1 << (MySqlParser.HEXADECIMAL_LITERAL - 974)) | (1 << (MySqlParser.REAL_LITERAL - 974)) | (1 << (MySqlParser.NULL_SPEC_LITERAL - 974)) | (1 << (MySqlParser.BIT_STRING - 974)) | (1 << (MySqlParser.STRING_CHARSET_NAME - 974)) | (1 << (MySqlParser.ID - 974)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 974)) | (1 << (MySqlParser.LOCAL_ID - 974)) | (1 << (MySqlParser.GLOBAL_ID - 974)))) !== 0)) {
					{
					this.state = 5711;
					this.functionArgs();
					}
				}

				this.state = 5714;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5716;
				this.fullId();
				this.state = 5717;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5719;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 19)) & ~0x1F) === 0 && ((1 << (_la - 19)) & ((1 << (MySqlParser.CASE - 19)) | (1 << (MySqlParser.CAST - 19)) | (1 << (MySqlParser.CONVERT - 19)) | (1 << (MySqlParser.CURRENT_USER - 19)) | (1 << (MySqlParser.DATABASE - 19)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (MySqlParser.EXISTS - 51)) | (1 << (MySqlParser.FALSE - 51)) | (1 << (MySqlParser.IF - 51)) | (1 << (MySqlParser.INSERT - 51)) | (1 << (MySqlParser.INTERVAL - 51)))) !== 0) || ((((_la - 84)) & ~0x1F) === 0 && ((1 << (_la - 84)) & ((1 << (MySqlParser.LEFT - 84)) | (1 << (MySqlParser.NOT - 84)) | (1 << (MySqlParser.NULL_LITERAL - 84)))) !== 0) || ((((_la - 123)) & ~0x1F) === 0 && ((1 << (_la - 123)) & ((1 << (MySqlParser.REPLACE - 123)) | (1 << (MySqlParser.RIGHT - 123)) | (1 << (MySqlParser.TRUE - 123)))) !== 0) || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & ((1 << (MySqlParser.VALUES - 164)) | (1 << (MySqlParser.DATE - 164)) | (1 << (MySqlParser.TIME - 164)) | (1 << (MySqlParser.TIMESTAMP - 164)) | (1 << (MySqlParser.DATETIME - 164)) | (1 << (MySqlParser.YEAR - 164)) | (1 << (MySqlParser.CHAR - 164)) | (1 << (MySqlParser.BINARY - 164)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (MySqlParser.TEXT - 201)) | (1 << (MySqlParser.ENUM - 201)) | (1 << (MySqlParser.SERIAL - 201)) | (1 << (MySqlParser.AVG - 201)) | (1 << (MySqlParser.BIT_AND - 201)) | (1 << (MySqlParser.BIT_OR - 201)) | (1 << (MySqlParser.BIT_XOR - 201)) | (1 << (MySqlParser.COUNT - 201)) | (1 << (MySqlParser.GROUP_CONCAT - 201)) | (1 << (MySqlParser.MAX - 201)) | (1 << (MySqlParser.MIN - 201)) | (1 << (MySqlParser.STD - 201)) | (1 << (MySqlParser.STDDEV - 201)) | (1 << (MySqlParser.STDDEV_POP - 201)) | (1 << (MySqlParser.STDDEV_SAMP - 201)) | (1 << (MySqlParser.SUM - 201)) | (1 << (MySqlParser.VAR_POP - 201)) | (1 << (MySqlParser.VAR_SAMP - 201)))) !== 0) || ((((_la - 233)) & ~0x1F) === 0 && ((1 << (_la - 233)) & ((1 << (MySqlParser.VARIANCE - 233)) | (1 << (MySqlParser.CURRENT_DATE - 233)) | (1 << (MySqlParser.CURRENT_TIME - 233)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 233)) | (1 << (MySqlParser.LOCALTIME - 233)) | (1 << (MySqlParser.CURDATE - 233)) | (1 << (MySqlParser.CURTIME - 233)) | (1 << (MySqlParser.DATE_ADD - 233)) | (1 << (MySqlParser.DATE_SUB - 233)) | (1 << (MySqlParser.EXTRACT - 233)) | (1 << (MySqlParser.LOCALTIMESTAMP - 233)) | (1 << (MySqlParser.NOW - 233)) | (1 << (MySqlParser.POSITION - 233)) | (1 << (MySqlParser.SUBSTR - 233)) | (1 << (MySqlParser.SUBSTRING - 233)) | (1 << (MySqlParser.SYSDATE - 233)) | (1 << (MySqlParser.TRIM - 233)) | (1 << (MySqlParser.UTC_DATE - 233)) | (1 << (MySqlParser.UTC_TIME - 233)) | (1 << (MySqlParser.UTC_TIMESTAMP - 233)) | (1 << (MySqlParser.ACCOUNT - 233)) | (1 << (MySqlParser.ACTION - 233)) | (1 << (MySqlParser.AFTER - 233)) | (1 << (MySqlParser.AGGREGATE - 233)) | (1 << (MySqlParser.ALGORITHM - 233)) | (1 << (MySqlParser.ANY - 233)) | (1 << (MySqlParser.AT - 233)) | (1 << (MySqlParser.AUTHORS - 233)) | (1 << (MySqlParser.AUTOCOMMIT - 233)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 233)) | (1 << (MySqlParser.AUTO_INCREMENT - 233)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 233)))) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & ((1 << (MySqlParser.BEGIN - 265)) | (1 << (MySqlParser.BINLOG - 265)) | (1 << (MySqlParser.BIT - 265)) | (1 << (MySqlParser.BLOCK - 265)) | (1 << (MySqlParser.BOOL - 265)) | (1 << (MySqlParser.BOOLEAN - 265)) | (1 << (MySqlParser.BTREE - 265)) | (1 << (MySqlParser.CACHE - 265)) | (1 << (MySqlParser.CASCADED - 265)) | (1 << (MySqlParser.CHAIN - 265)) | (1 << (MySqlParser.CHANGED - 265)) | (1 << (MySqlParser.CHANNEL - 265)) | (1 << (MySqlParser.CHECKSUM - 265)) | (1 << (MySqlParser.PAGE_CHECKSUM - 265)) | (1 << (MySqlParser.CIPHER - 265)) | (1 << (MySqlParser.CLASS_ORIGIN - 265)) | (1 << (MySqlParser.CLIENT - 265)) | (1 << (MySqlParser.CLOSE - 265)) | (1 << (MySqlParser.COALESCE - 265)) | (1 << (MySqlParser.CODE - 265)) | (1 << (MySqlParser.COLUMNS - 265)) | (1 << (MySqlParser.COLUMN_FORMAT - 265)) | (1 << (MySqlParser.COLUMN_NAME - 265)) | (1 << (MySqlParser.COMMENT - 265)) | (1 << (MySqlParser.COMMIT - 265)) | (1 << (MySqlParser.COMPACT - 265)) | (1 << (MySqlParser.COMPLETION - 265)) | (1 << (MySqlParser.COMPRESSED - 265)) | (1 << (MySqlParser.COMPRESSION - 265)) | (1 << (MySqlParser.CONCURRENT - 265)) | (1 << (MySqlParser.CONNECTION - 265)) | (1 << (MySqlParser.CONSISTENT - 265)))) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & ((1 << (MySqlParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySqlParser.CONSTRAINT_NAME - 297)) | (1 << (MySqlParser.CONTAINS - 297)) | (1 << (MySqlParser.CONTEXT - 297)) | (1 << (MySqlParser.CONTRIBUTORS - 297)) | (1 << (MySqlParser.COPY - 297)) | (1 << (MySqlParser.CPU - 297)) | (1 << (MySqlParser.DATA - 297)) | (1 << (MySqlParser.DATAFILE - 297)) | (1 << (MySqlParser.DEALLOCATE - 297)) | (1 << (MySqlParser.DEFAULT_AUTH - 297)) | (1 << (MySqlParser.DEFINER - 297)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 297)) | (1 << (MySqlParser.DES_KEY_FILE - 297)) | (1 << (MySqlParser.DIRECTORY - 297)) | (1 << (MySqlParser.DISABLE - 297)) | (1 << (MySqlParser.DISCARD - 297)) | (1 << (MySqlParser.DISK - 297)) | (1 << (MySqlParser.DO - 297)) | (1 << (MySqlParser.DUMPFILE - 297)) | (1 << (MySqlParser.DUPLICATE - 297)) | (1 << (MySqlParser.DYNAMIC - 297)) | (1 << (MySqlParser.ENABLE - 297)) | (1 << (MySqlParser.ENCRYPTION - 297)) | (1 << (MySqlParser.END - 297)) | (1 << (MySqlParser.ENDS - 297)) | (1 << (MySqlParser.ENGINE - 297)) | (1 << (MySqlParser.ENGINES - 297)) | (1 << (MySqlParser.ERROR - 297)) | (1 << (MySqlParser.ERRORS - 297)) | (1 << (MySqlParser.ESCAPE - 297)))) !== 0) || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (MySqlParser.EVEN - 329)) | (1 << (MySqlParser.EVENT - 329)) | (1 << (MySqlParser.EVENTS - 329)) | (1 << (MySqlParser.EVERY - 329)) | (1 << (MySqlParser.EXCHANGE - 329)) | (1 << (MySqlParser.EXCLUSIVE - 329)) | (1 << (MySqlParser.EXPIRE - 329)) | (1 << (MySqlParser.EXPORT - 329)) | (1 << (MySqlParser.EXTENDED - 329)) | (1 << (MySqlParser.EXTENT_SIZE - 329)) | (1 << (MySqlParser.FAST - 329)) | (1 << (MySqlParser.FAULTS - 329)) | (1 << (MySqlParser.FIELDS - 329)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 329)) | (1 << (MySqlParser.FILTER - 329)) | (1 << (MySqlParser.FIRST - 329)) | (1 << (MySqlParser.FIXED - 329)) | (1 << (MySqlParser.FLUSH - 329)) | (1 << (MySqlParser.FOLLOWS - 329)) | (1 << (MySqlParser.FOUND - 329)) | (1 << (MySqlParser.FULL - 329)) | (1 << (MySqlParser.FUNCTION - 329)) | (1 << (MySqlParser.GENERAL - 329)) | (1 << (MySqlParser.GLOBAL - 329)) | (1 << (MySqlParser.GRANTS - 329)) | (1 << (MySqlParser.GROUP_REPLICATION - 329)) | (1 << (MySqlParser.HANDLER - 329)) | (1 << (MySqlParser.HASH - 329)) | (1 << (MySqlParser.HELP - 329)) | (1 << (MySqlParser.HOST - 329)) | (1 << (MySqlParser.HOSTS - 329)) | (1 << (MySqlParser.IDENTIFIED - 329)))) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & ((1 << (MySqlParser.IGNORE_SERVER_IDS - 361)) | (1 << (MySqlParser.IMPORT - 361)) | (1 << (MySqlParser.INDEXES - 361)) | (1 << (MySqlParser.INITIAL_SIZE - 361)) | (1 << (MySqlParser.INPLACE - 361)) | (1 << (MySqlParser.INSERT_METHOD - 361)) | (1 << (MySqlParser.INSTALL - 361)) | (1 << (MySqlParser.INSTANCE - 361)) | (1 << (MySqlParser.INVISIBLE - 361)) | (1 << (MySqlParser.INVOKER - 361)) | (1 << (MySqlParser.IO - 361)) | (1 << (MySqlParser.IO_THREAD - 361)) | (1 << (MySqlParser.IPC - 361)) | (1 << (MySqlParser.ISOLATION - 361)) | (1 << (MySqlParser.ISSUER - 361)) | (1 << (MySqlParser.JSON - 361)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 361)) | (1 << (MySqlParser.LANGUAGE - 361)) | (1 << (MySqlParser.LAST - 361)) | (1 << (MySqlParser.LEAVES - 361)) | (1 << (MySqlParser.LESS - 361)) | (1 << (MySqlParser.LEVEL - 361)) | (1 << (MySqlParser.LIST - 361)) | (1 << (MySqlParser.LOCAL - 361)) | (1 << (MySqlParser.LOGFILE - 361)) | (1 << (MySqlParser.LOGS - 361)) | (1 << (MySqlParser.MASTER - 361)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 361)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 361)) | (1 << (MySqlParser.MASTER_DELAY - 361)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 361)) | (1 << (MySqlParser.MASTER_HOST - 361)))) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & ((1 << (MySqlParser.MASTER_LOG_FILE - 393)) | (1 << (MySqlParser.MASTER_LOG_POS - 393)) | (1 << (MySqlParser.MASTER_PASSWORD - 393)) | (1 << (MySqlParser.MASTER_PORT - 393)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 393)) | (1 << (MySqlParser.MASTER_SSL - 393)) | (1 << (MySqlParser.MASTER_SSL_CA - 393)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 393)) | (1 << (MySqlParser.MASTER_SSL_CERT - 393)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 393)) | (1 << (MySqlParser.MASTER_SSL_CRL - 393)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 393)) | (1 << (MySqlParser.MASTER_SSL_KEY - 393)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 393)) | (1 << (MySqlParser.MASTER_USER - 393)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 393)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 393)) | (1 << (MySqlParser.MAX_ROWS - 393)) | (1 << (MySqlParser.MAX_SIZE - 393)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 393)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 393)) | (1 << (MySqlParser.MEDIUM - 393)) | (1 << (MySqlParser.MERGE - 393)) | (1 << (MySqlParser.MESSAGE_TEXT - 393)) | (1 << (MySqlParser.MID - 393)) | (1 << (MySqlParser.MIGRATE - 393)) | (1 << (MySqlParser.MIN_ROWS - 393)) | (1 << (MySqlParser.MODE - 393)) | (1 << (MySqlParser.MODIFY - 393)) | (1 << (MySqlParser.MUTEX - 393)) | (1 << (MySqlParser.MYSQL - 393)) | (1 << (MySqlParser.MYSQL_ERRNO - 393)))) !== 0) || ((((_la - 425)) & ~0x1F) === 0 && ((1 << (_la - 425)) & ((1 << (MySqlParser.NAME - 425)) | (1 << (MySqlParser.NAMES - 425)) | (1 << (MySqlParser.NCHAR - 425)) | (1 << (MySqlParser.NEVER - 425)) | (1 << (MySqlParser.NEXT - 425)) | (1 << (MySqlParser.NO - 425)) | (1 << (MySqlParser.NODEGROUP - 425)) | (1 << (MySqlParser.NONE - 425)) | (1 << (MySqlParser.OFFLINE - 425)) | (1 << (MySqlParser.OFFSET - 425)) | (1 << (MySqlParser.OJ - 425)) | (1 << (MySqlParser.OLD_PASSWORD - 425)) | (1 << (MySqlParser.ONE - 425)) | (1 << (MySqlParser.ONLINE - 425)) | (1 << (MySqlParser.ONLY - 425)) | (1 << (MySqlParser.OPEN - 425)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 425)) | (1 << (MySqlParser.OPTIONS - 425)) | (1 << (MySqlParser.OWNER - 425)) | (1 << (MySqlParser.PACK_KEYS - 425)) | (1 << (MySqlParser.PAGE - 425)) | (1 << (MySqlParser.PARSER - 425)) | (1 << (MySqlParser.PARTIAL - 425)) | (1 << (MySqlParser.PARTITIONING - 425)) | (1 << (MySqlParser.PARTITIONS - 425)) | (1 << (MySqlParser.PASSWORD - 425)) | (1 << (MySqlParser.PHASE - 425)) | (1 << (MySqlParser.PLUGIN - 425)) | (1 << (MySqlParser.PLUGIN_DIR - 425)) | (1 << (MySqlParser.PLUGINS - 425)) | (1 << (MySqlParser.PORT - 425)) | (1 << (MySqlParser.PRECEDES - 425)))) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & ((1 << (MySqlParser.PREPARE - 457)) | (1 << (MySqlParser.PRESERVE - 457)) | (1 << (MySqlParser.PREV - 457)) | (1 << (MySqlParser.PROCESSLIST - 457)) | (1 << (MySqlParser.PROFILE - 457)) | (1 << (MySqlParser.PROFILES - 457)) | (1 << (MySqlParser.PROXY - 457)) | (1 << (MySqlParser.QUERY - 457)) | (1 << (MySqlParser.QUICK - 457)) | (1 << (MySqlParser.REBUILD - 457)) | (1 << (MySqlParser.RECOVER - 457)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 457)) | (1 << (MySqlParser.REDUNDANT - 457)) | (1 << (MySqlParser.RELAY - 457)) | (1 << (MySqlParser.RELAY_LOG_FILE - 457)) | (1 << (MySqlParser.RELAY_LOG_POS - 457)) | (1 << (MySqlParser.RELAYLOG - 457)) | (1 << (MySqlParser.REMOVE - 457)) | (1 << (MySqlParser.REORGANIZE - 457)) | (1 << (MySqlParser.REPAIR - 457)) | (1 << (MySqlParser.REPLICATE_DO_DB - 457)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 457)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 457)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 457)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 457)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 457)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 457)) | (1 << (MySqlParser.REPLICATION - 457)) | (1 << (MySqlParser.RESET - 457)) | (1 << (MySqlParser.RESUME - 457)) | (1 << (MySqlParser.RETURNS - 457)) | (1 << (MySqlParser.ROLLBACK - 457)))) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & ((1 << (MySqlParser.ROLLUP - 489)) | (1 << (MySqlParser.ROTATE - 489)) | (1 << (MySqlParser.ROW - 489)) | (1 << (MySqlParser.ROWS - 489)) | (1 << (MySqlParser.ROW_FORMAT - 489)) | (1 << (MySqlParser.SAVEPOINT - 489)) | (1 << (MySqlParser.SCHEDULE - 489)) | (1 << (MySqlParser.SECURITY - 489)) | (1 << (MySqlParser.SERVER - 489)) | (1 << (MySqlParser.SESSION - 489)) | (1 << (MySqlParser.SHARE - 489)) | (1 << (MySqlParser.SHARED - 489)) | (1 << (MySqlParser.SIGNED - 489)) | (1 << (MySqlParser.SIMPLE - 489)) | (1 << (MySqlParser.SLAVE - 489)) | (1 << (MySqlParser.SLOW - 489)) | (1 << (MySqlParser.SNAPSHOT - 489)) | (1 << (MySqlParser.SOCKET - 489)) | (1 << (MySqlParser.SOME - 489)) | (1 << (MySqlParser.SONAME - 489)) | (1 << (MySqlParser.SOUNDS - 489)) | (1 << (MySqlParser.SOURCE - 489)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 489)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 489)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 489)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 489)) | (1 << (MySqlParser.SQL_CACHE - 489)) | (1 << (MySqlParser.SQL_NO_CACHE - 489)) | (1 << (MySqlParser.SQL_THREAD - 489)) | (1 << (MySqlParser.START - 489)) | (1 << (MySqlParser.STARTS - 489)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 489)))) !== 0) || ((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & ((1 << (MySqlParser.STATS_PERSISTENT - 521)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 521)) | (1 << (MySqlParser.STATUS - 521)) | (1 << (MySqlParser.STOP - 521)) | (1 << (MySqlParser.STORAGE - 521)) | (1 << (MySqlParser.STRING - 521)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 521)) | (1 << (MySqlParser.SUBJECT - 521)) | (1 << (MySqlParser.SUBPARTITION - 521)) | (1 << (MySqlParser.SUBPARTITIONS - 521)) | (1 << (MySqlParser.SUSPEND - 521)) | (1 << (MySqlParser.SWAPS - 521)) | (1 << (MySqlParser.SWITCHES - 521)) | (1 << (MySqlParser.TABLE_NAME - 521)) | (1 << (MySqlParser.TABLESPACE - 521)) | (1 << (MySqlParser.TEMPORARY - 521)) | (1 << (MySqlParser.TEMPTABLE - 521)) | (1 << (MySqlParser.THAN - 521)) | (1 << (MySqlParser.TRADITIONAL - 521)) | (1 << (MySqlParser.TRANSACTION - 521)) | (1 << (MySqlParser.TRIGGERS - 521)) | (1 << (MySqlParser.TRUNCATE - 521)) | (1 << (MySqlParser.UNDEFINED - 521)) | (1 << (MySqlParser.UNDOFILE - 521)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 521)) | (1 << (MySqlParser.UNINSTALL - 521)) | (1 << (MySqlParser.UNKNOWN - 521)) | (1 << (MySqlParser.UNTIL - 521)) | (1 << (MySqlParser.UPGRADE - 521)) | (1 << (MySqlParser.USER - 521)) | (1 << (MySqlParser.USE_FRM - 521)))) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & ((1 << (MySqlParser.USER_RESOURCES - 553)) | (1 << (MySqlParser.VALIDATION - 553)) | (1 << (MySqlParser.VALUE - 553)) | (1 << (MySqlParser.VARIABLES - 553)) | (1 << (MySqlParser.VIEW - 553)) | (1 << (MySqlParser.VISIBLE - 553)) | (1 << (MySqlParser.WAIT - 553)) | (1 << (MySqlParser.WARNINGS - 553)) | (1 << (MySqlParser.WITHOUT - 553)) | (1 << (MySqlParser.WORK - 553)) | (1 << (MySqlParser.WRAPPER - 553)) | (1 << (MySqlParser.X509 - 553)) | (1 << (MySqlParser.XA - 553)) | (1 << (MySqlParser.XML - 553)) | (1 << (MySqlParser.INTERNAL - 553)) | (1 << (MySqlParser.QUARTER - 553)) | (1 << (MySqlParser.MONTH - 553)) | (1 << (MySqlParser.DAY - 553)) | (1 << (MySqlParser.HOUR - 553)) | (1 << (MySqlParser.MINUTE - 553)) | (1 << (MySqlParser.WEEK - 553)) | (1 << (MySqlParser.SECOND - 553)) | (1 << (MySqlParser.MICROSECOND - 553)) | (1 << (MySqlParser.TABLES - 553)) | (1 << (MySqlParser.ROUTINE - 553)) | (1 << (MySqlParser.EXECUTE - 553)) | (1 << (MySqlParser.FILE - 553)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (MySqlParser.PROCESS - 585)) | (1 << (MySqlParser.RELOAD - 585)) | (1 << (MySqlParser.SHUTDOWN - 585)) | (1 << (MySqlParser.SUPER - 585)) | (1 << (MySqlParser.PRIVILEGES - 585)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 585)) | (1 << (MySqlParser.ARMSCII8 - 585)) | (1 << (MySqlParser.ASCII - 585)) | (1 << (MySqlParser.BIG5 - 585)) | (1 << (MySqlParser.CP1250 - 585)) | (1 << (MySqlParser.CP1251 - 585)) | (1 << (MySqlParser.CP1256 - 585)) | (1 << (MySqlParser.CP1257 - 585)) | (1 << (MySqlParser.CP850 - 585)) | (1 << (MySqlParser.CP852 - 585)) | (1 << (MySqlParser.CP866 - 585)) | (1 << (MySqlParser.CP932 - 585)) | (1 << (MySqlParser.DEC8 - 585)) | (1 << (MySqlParser.EUCJPMS - 585)) | (1 << (MySqlParser.EUCKR - 585)) | (1 << (MySqlParser.GB2312 - 585)) | (1 << (MySqlParser.GBK - 585)) | (1 << (MySqlParser.GEOSTD8 - 585)) | (1 << (MySqlParser.GREEK - 585)) | (1 << (MySqlParser.HEBREW - 585)) | (1 << (MySqlParser.HP8 - 585)) | (1 << (MySqlParser.KEYBCS2 - 585)) | (1 << (MySqlParser.KOI8R - 585)) | (1 << (MySqlParser.KOI8U - 585)) | (1 << (MySqlParser.LATIN1 - 585)) | (1 << (MySqlParser.LATIN2 - 585)) | (1 << (MySqlParser.LATIN5 - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (MySqlParser.LATIN7 - 617)) | (1 << (MySqlParser.MACCE - 617)) | (1 << (MySqlParser.MACROMAN - 617)) | (1 << (MySqlParser.SJIS - 617)) | (1 << (MySqlParser.SWE7 - 617)) | (1 << (MySqlParser.TIS620 - 617)) | (1 << (MySqlParser.UCS2 - 617)) | (1 << (MySqlParser.UJIS - 617)) | (1 << (MySqlParser.UTF16 - 617)) | (1 << (MySqlParser.UTF16LE - 617)) | (1 << (MySqlParser.UTF32 - 617)) | (1 << (MySqlParser.UTF8 - 617)) | (1 << (MySqlParser.UTF8MB3 - 617)) | (1 << (MySqlParser.UTF8MB4 - 617)) | (1 << (MySqlParser.ARCHIVE - 617)) | (1 << (MySqlParser.BLACKHOLE - 617)) | (1 << (MySqlParser.CSV - 617)) | (1 << (MySqlParser.FEDERATED - 617)) | (1 << (MySqlParser.INNODB - 617)) | (1 << (MySqlParser.MEMORY - 617)) | (1 << (MySqlParser.MRG_MYISAM - 617)) | (1 << (MySqlParser.MYISAM - 617)) | (1 << (MySqlParser.NDB - 617)) | (1 << (MySqlParser.NDBCLUSTER - 617)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 617)) | (1 << (MySqlParser.TOKUDB - 617)) | (1 << (MySqlParser.REPEATABLE - 617)) | (1 << (MySqlParser.COMMITTED - 617)) | (1 << (MySqlParser.UNCOMMITTED - 617)) | (1 << (MySqlParser.SERIALIZABLE - 617)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 617)))) !== 0) || ((((_la - 650)) & ~0x1F) === 0 && ((1 << (_la - 650)) & ((1 << (MySqlParser.LINESTRING - 650)) | (1 << (MySqlParser.MULTILINESTRING - 650)) | (1 << (MySqlParser.MULTIPOINT - 650)) | (1 << (MySqlParser.MULTIPOLYGON - 650)) | (1 << (MySqlParser.POINT - 650)) | (1 << (MySqlParser.POLYGON - 650)) | (1 << (MySqlParser.ABS - 650)) | (1 << (MySqlParser.ACOS - 650)) | (1 << (MySqlParser.ADDDATE - 650)) | (1 << (MySqlParser.ADDTIME - 650)) | (1 << (MySqlParser.AES_DECRYPT - 650)) | (1 << (MySqlParser.AES_ENCRYPT - 650)) | (1 << (MySqlParser.AREA - 650)) | (1 << (MySqlParser.ASBINARY - 650)) | (1 << (MySqlParser.ASIN - 650)) | (1 << (MySqlParser.ASTEXT - 650)) | (1 << (MySqlParser.ASWKB - 650)) | (1 << (MySqlParser.ASWKT - 650)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 650)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 650)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 650)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 650)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 650)) | (1 << (MySqlParser.ATAN - 650)) | (1 << (MySqlParser.ATAN2 - 650)) | (1 << (MySqlParser.BENCHMARK - 650)) | (1 << (MySqlParser.BIN - 650)) | (1 << (MySqlParser.BIT_COUNT - 650)) | (1 << (MySqlParser.BIT_LENGTH - 650)) | (1 << (MySqlParser.BUFFER - 650)) | (1 << (MySqlParser.CATALOG_NAME - 650)) | (1 << (MySqlParser.CEIL - 650)))) !== 0) || ((((_la - 682)) & ~0x1F) === 0 && ((1 << (_la - 682)) & ((1 << (MySqlParser.CEILING - 682)) | (1 << (MySqlParser.CENTROID - 682)) | (1 << (MySqlParser.CHARACTER_LENGTH - 682)) | (1 << (MySqlParser.CHARSET - 682)) | (1 << (MySqlParser.CHAR_LENGTH - 682)) | (1 << (MySqlParser.COERCIBILITY - 682)) | (1 << (MySqlParser.COLLATION - 682)) | (1 << (MySqlParser.COMPRESS - 682)) | (1 << (MySqlParser.CONCAT - 682)) | (1 << (MySqlParser.CONCAT_WS - 682)) | (1 << (MySqlParser.CONNECTION_ID - 682)) | (1 << (MySqlParser.CONV - 682)) | (1 << (MySqlParser.CONVERT_TZ - 682)) | (1 << (MySqlParser.COS - 682)) | (1 << (MySqlParser.COT - 682)) | (1 << (MySqlParser.CRC32 - 682)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 682)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 682)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 682)) | (1 << (MySqlParser.CREATE_DIGEST - 682)) | (1 << (MySqlParser.CROSSES - 682)) | (1 << (MySqlParser.DATEDIFF - 682)) | (1 << (MySqlParser.DATE_FORMAT - 682)) | (1 << (MySqlParser.DAYNAME - 682)) | (1 << (MySqlParser.DAYOFMONTH - 682)) | (1 << (MySqlParser.DAYOFWEEK - 682)) | (1 << (MySqlParser.DAYOFYEAR - 682)) | (1 << (MySqlParser.DECODE - 682)) | (1 << (MySqlParser.DEGREES - 682)) | (1 << (MySqlParser.DES_DECRYPT - 682)) | (1 << (MySqlParser.DES_ENCRYPT - 682)) | (1 << (MySqlParser.DIMENSION - 682)))) !== 0) || ((((_la - 714)) & ~0x1F) === 0 && ((1 << (_la - 714)) & ((1 << (MySqlParser.DISJOINT - 714)) | (1 << (MySqlParser.ELT - 714)) | (1 << (MySqlParser.ENCODE - 714)) | (1 << (MySqlParser.ENCRYPT - 714)) | (1 << (MySqlParser.ENDPOINT - 714)) | (1 << (MySqlParser.ENVELOPE - 714)) | (1 << (MySqlParser.EQUALS - 714)) | (1 << (MySqlParser.EXP - 714)) | (1 << (MySqlParser.EXPORT_SET - 714)) | (1 << (MySqlParser.EXTERIORRING - 714)) | (1 << (MySqlParser.EXTRACTVALUE - 714)) | (1 << (MySqlParser.FIELD - 714)) | (1 << (MySqlParser.FIND_IN_SET - 714)) | (1 << (MySqlParser.FLOOR - 714)) | (1 << (MySqlParser.FORMAT - 714)) | (1 << (MySqlParser.FOUND_ROWS - 714)) | (1 << (MySqlParser.FROM_BASE64 - 714)) | (1 << (MySqlParser.FROM_DAYS - 714)) | (1 << (MySqlParser.FROM_UNIXTIME - 714)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 714)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 714)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 714)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 714)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 714)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 714)) | (1 << (MySqlParser.GEOMETRYN - 714)) | (1 << (MySqlParser.GEOMETRYTYPE - 714)) | (1 << (MySqlParser.GEOMFROMTEXT - 714)) | (1 << (MySqlParser.GEOMFROMWKB - 714)) | (1 << (MySqlParser.GET_FORMAT - 714)) | (1 << (MySqlParser.GET_LOCK - 714)) | (1 << (MySqlParser.GLENGTH - 714)))) !== 0) || ((((_la - 746)) & ~0x1F) === 0 && ((1 << (_la - 746)) & ((1 << (MySqlParser.GREATEST - 746)) | (1 << (MySqlParser.GTID_SUBSET - 746)) | (1 << (MySqlParser.GTID_SUBTRACT - 746)) | (1 << (MySqlParser.HEX - 746)) | (1 << (MySqlParser.IFNULL - 746)) | (1 << (MySqlParser.INET6_ATON - 746)) | (1 << (MySqlParser.INET6_NTOA - 746)) | (1 << (MySqlParser.INET_ATON - 746)) | (1 << (MySqlParser.INET_NTOA - 746)) | (1 << (MySqlParser.INSTR - 746)) | (1 << (MySqlParser.INTERIORRINGN - 746)) | (1 << (MySqlParser.INTERSECTS - 746)) | (1 << (MySqlParser.ISCLOSED - 746)) | (1 << (MySqlParser.ISEMPTY - 746)) | (1 << (MySqlParser.ISNULL - 746)) | (1 << (MySqlParser.ISSIMPLE - 746)) | (1 << (MySqlParser.IS_FREE_LOCK - 746)) | (1 << (MySqlParser.IS_IPV4 - 746)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 746)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 746)) | (1 << (MySqlParser.IS_IPV6 - 746)) | (1 << (MySqlParser.IS_USED_LOCK - 746)) | (1 << (MySqlParser.LAST_INSERT_ID - 746)) | (1 << (MySqlParser.LCASE - 746)) | (1 << (MySqlParser.LEAST - 746)) | (1 << (MySqlParser.LENGTH - 746)) | (1 << (MySqlParser.LINEFROMTEXT - 746)) | (1 << (MySqlParser.LINEFROMWKB - 746)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 746)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 746)) | (1 << (MySqlParser.LN - 746)) | (1 << (MySqlParser.LOAD_FILE - 746)))) !== 0) || ((((_la - 778)) & ~0x1F) === 0 && ((1 << (_la - 778)) & ((1 << (MySqlParser.LOCATE - 778)) | (1 << (MySqlParser.LOG - 778)) | (1 << (MySqlParser.LOG10 - 778)) | (1 << (MySqlParser.LOG2 - 778)) | (1 << (MySqlParser.LOWER - 778)) | (1 << (MySqlParser.LPAD - 778)) | (1 << (MySqlParser.LTRIM - 778)) | (1 << (MySqlParser.MAKEDATE - 778)) | (1 << (MySqlParser.MAKETIME - 778)) | (1 << (MySqlParser.MAKE_SET - 778)) | (1 << (MySqlParser.MASTER_POS_WAIT - 778)) | (1 << (MySqlParser.MBRCONTAINS - 778)) | (1 << (MySqlParser.MBRDISJOINT - 778)) | (1 << (MySqlParser.MBREQUAL - 778)) | (1 << (MySqlParser.MBRINTERSECTS - 778)) | (1 << (MySqlParser.MBROVERLAPS - 778)) | (1 << (MySqlParser.MBRTOUCHES - 778)) | (1 << (MySqlParser.MBRWITHIN - 778)) | (1 << (MySqlParser.MD5 - 778)) | (1 << (MySqlParser.MLINEFROMTEXT - 778)) | (1 << (MySqlParser.MLINEFROMWKB - 778)) | (1 << (MySqlParser.MONTHNAME - 778)) | (1 << (MySqlParser.MPOINTFROMTEXT - 778)) | (1 << (MySqlParser.MPOINTFROMWKB - 778)) | (1 << (MySqlParser.MPOLYFROMTEXT - 778)) | (1 << (MySqlParser.MPOLYFROMWKB - 778)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 778)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 778)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 778)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 778)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 778)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 778)))) !== 0) || ((((_la - 810)) & ~0x1F) === 0 && ((1 << (_la - 810)) & ((1 << (MySqlParser.NAME_CONST - 810)) | (1 << (MySqlParser.NULLIF - 810)) | (1 << (MySqlParser.NUMGEOMETRIES - 810)) | (1 << (MySqlParser.NUMINTERIORRINGS - 810)) | (1 << (MySqlParser.NUMPOINTS - 810)) | (1 << (MySqlParser.OCT - 810)) | (1 << (MySqlParser.OCTET_LENGTH - 810)) | (1 << (MySqlParser.ORD - 810)) | (1 << (MySqlParser.OVERLAPS - 810)) | (1 << (MySqlParser.PERIOD_ADD - 810)) | (1 << (MySqlParser.PERIOD_DIFF - 810)) | (1 << (MySqlParser.PI - 810)) | (1 << (MySqlParser.POINTFROMTEXT - 810)) | (1 << (MySqlParser.POINTFROMWKB - 810)) | (1 << (MySqlParser.POINTN - 810)) | (1 << (MySqlParser.POLYFROMTEXT - 810)) | (1 << (MySqlParser.POLYFROMWKB - 810)) | (1 << (MySqlParser.POLYGONFROMTEXT - 810)) | (1 << (MySqlParser.POLYGONFROMWKB - 810)) | (1 << (MySqlParser.POW - 810)) | (1 << (MySqlParser.POWER - 810)) | (1 << (MySqlParser.QUOTE - 810)) | (1 << (MySqlParser.RADIANS - 810)) | (1 << (MySqlParser.RAND - 810)) | (1 << (MySqlParser.RANDOM_BYTES - 810)) | (1 << (MySqlParser.RELEASE_LOCK - 810)) | (1 << (MySqlParser.REVERSE - 810)) | (1 << (MySqlParser.ROUND - 810)) | (1 << (MySqlParser.ROW_COUNT - 810)) | (1 << (MySqlParser.RPAD - 810)) | (1 << (MySqlParser.RTRIM - 810)) | (1 << (MySqlParser.SEC_TO_TIME - 810)))) !== 0) || ((((_la - 842)) & ~0x1F) === 0 && ((1 << (_la - 842)) & ((1 << (MySqlParser.SESSION_USER - 842)) | (1 << (MySqlParser.SHA - 842)) | (1 << (MySqlParser.SHA1 - 842)) | (1 << (MySqlParser.SHA2 - 842)) | (1 << (MySqlParser.SCHEMA_NAME - 842)) | (1 << (MySqlParser.SIGN - 842)) | (1 << (MySqlParser.SIN - 842)) | (1 << (MySqlParser.SLEEP - 842)) | (1 << (MySqlParser.SOUNDEX - 842)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 842)) | (1 << (MySqlParser.SQRT - 842)) | (1 << (MySqlParser.SRID - 842)) | (1 << (MySqlParser.STARTPOINT - 842)) | (1 << (MySqlParser.STRCMP - 842)) | (1 << (MySqlParser.STR_TO_DATE - 842)) | (1 << (MySqlParser.ST_AREA - 842)) | (1 << (MySqlParser.ST_ASBINARY - 842)) | (1 << (MySqlParser.ST_ASTEXT - 842)) | (1 << (MySqlParser.ST_ASWKB - 842)) | (1 << (MySqlParser.ST_ASWKT - 842)) | (1 << (MySqlParser.ST_BUFFER - 842)) | (1 << (MySqlParser.ST_CENTROID - 842)) | (1 << (MySqlParser.ST_CONTAINS - 842)) | (1 << (MySqlParser.ST_CROSSES - 842)) | (1 << (MySqlParser.ST_DIFFERENCE - 842)) | (1 << (MySqlParser.ST_DIMENSION - 842)) | (1 << (MySqlParser.ST_DISJOINT - 842)) | (1 << (MySqlParser.ST_DISTANCE - 842)) | (1 << (MySqlParser.ST_ENDPOINT - 842)) | (1 << (MySqlParser.ST_ENVELOPE - 842)) | (1 << (MySqlParser.ST_EQUALS - 842)) | (1 << (MySqlParser.ST_EXTERIORRING - 842)))) !== 0) || ((((_la - 874)) & ~0x1F) === 0 && ((1 << (_la - 874)) & ((1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 874)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 874)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 874)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 874)) | (1 << (MySqlParser.ST_GEOMETRYN - 874)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 874)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 874)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 874)) | (1 << (MySqlParser.ST_INTERIORRINGN - 874)) | (1 << (MySqlParser.ST_INTERSECTION - 874)) | (1 << (MySqlParser.ST_INTERSECTS - 874)) | (1 << (MySqlParser.ST_ISCLOSED - 874)) | (1 << (MySqlParser.ST_ISEMPTY - 874)) | (1 << (MySqlParser.ST_ISSIMPLE - 874)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 874)) | (1 << (MySqlParser.ST_LINEFROMWKB - 874)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 874)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 874)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 874)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 874)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 874)) | (1 << (MySqlParser.ST_NUMPOINTS - 874)) | (1 << (MySqlParser.ST_OVERLAPS - 874)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 874)) | (1 << (MySqlParser.ST_POINTFROMWKB - 874)) | (1 << (MySqlParser.ST_POINTN - 874)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 874)) | (1 << (MySqlParser.ST_POLYFROMWKB - 874)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 874)))) !== 0) || ((((_la - 906)) & ~0x1F) === 0 && ((1 << (_la - 906)) & ((1 << (MySqlParser.ST_POLYGONFROMWKB - 906)) | (1 << (MySqlParser.ST_SRID - 906)) | (1 << (MySqlParser.ST_STARTPOINT - 906)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 906)) | (1 << (MySqlParser.ST_TOUCHES - 906)) | (1 << (MySqlParser.ST_UNION - 906)) | (1 << (MySqlParser.ST_WITHIN - 906)) | (1 << (MySqlParser.ST_X - 906)) | (1 << (MySqlParser.ST_Y - 906)) | (1 << (MySqlParser.SUBDATE - 906)) | (1 << (MySqlParser.SUBSTRING_INDEX - 906)) | (1 << (MySqlParser.SUBTIME - 906)) | (1 << (MySqlParser.SYSTEM_USER - 906)) | (1 << (MySqlParser.TAN - 906)) | (1 << (MySqlParser.TIMEDIFF - 906)) | (1 << (MySqlParser.TIMESTAMPADD - 906)) | (1 << (MySqlParser.TIMESTAMPDIFF - 906)) | (1 << (MySqlParser.TIME_FORMAT - 906)) | (1 << (MySqlParser.TIME_TO_SEC - 906)) | (1 << (MySqlParser.TOUCHES - 906)) | (1 << (MySqlParser.TO_BASE64 - 906)) | (1 << (MySqlParser.TO_DAYS - 906)) | (1 << (MySqlParser.TO_SECONDS - 906)) | (1 << (MySqlParser.UCASE - 906)) | (1 << (MySqlParser.UNCOMPRESS - 906)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 906)) | (1 << (MySqlParser.UNHEX - 906)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 906)) | (1 << (MySqlParser.UPDATEXML - 906)) | (1 << (MySqlParser.UPPER - 906)) | (1 << (MySqlParser.UUID - 906)) | (1 << (MySqlParser.UUID_SHORT - 906)))) !== 0) || ((((_la - 938)) & ~0x1F) === 0 && ((1 << (_la - 938)) & ((1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 938)) | (1 << (MySqlParser.VERSION - 938)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 938)) | (1 << (MySqlParser.WEEKDAY - 938)) | (1 << (MySqlParser.WEEKOFYEAR - 938)) | (1 << (MySqlParser.WEIGHT_STRING - 938)) | (1 << (MySqlParser.WITHIN - 938)) | (1 << (MySqlParser.YEARWEEK - 938)) | (1 << (MySqlParser.Y_FUNCTION - 938)) | (1 << (MySqlParser.X_FUNCTION - 938)) | (1 << (MySqlParser.PLUS - 938)) | (1 << (MySqlParser.MINUS - 938)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 938)) | (1 << (MySqlParser.BIT_NOT_OP - 938)))) !== 0) || ((((_la - 974)) & ~0x1F) === 0 && ((1 << (_la - 974)) & ((1 << (MySqlParser.LR_BRACKET - 974)) | (1 << (MySqlParser.ZERO_DECIMAL - 974)) | (1 << (MySqlParser.ONE_DECIMAL - 974)) | (1 << (MySqlParser.TWO_DECIMAL - 974)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 974)) | (1 << (MySqlParser.START_NATIONAL_STRING_LITERAL - 974)) | (1 << (MySqlParser.STRING_LITERAL - 974)) | (1 << (MySqlParser.DECIMAL_LITERAL - 974)) | (1 << (MySqlParser.HEXADECIMAL_LITERAL - 974)) | (1 << (MySqlParser.REAL_LITERAL - 974)) | (1 << (MySqlParser.NULL_SPEC_LITERAL - 974)) | (1 << (MySqlParser.BIT_STRING - 974)) | (1 << (MySqlParser.STRING_CHARSET_NAME - 974)) | (1 << (MySqlParser.ID - 974)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 974)) | (1 << (MySqlParser.LOCAL_ID - 974)) | (1 << (MySqlParser.GLOBAL_ID - 974)))) !== 0)) {
					{
					this.state = 5718;
					this.functionArgs();
					}
				}

				this.state = 5721;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5723;
				this.passwordFunctionClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specificFunction(): SpecificFunctionContext {
		let _localctx: SpecificFunctionContext = new SpecificFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, MySqlParser.RULE_specificFunction);
		let _la: number;
		try {
			this.state = 5883;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 868, this._ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5726;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.CURRENT_USER || ((((_la - 234)) & ~0x1F) === 0 && ((1 << (_la - 234)) & ((1 << (MySqlParser.CURRENT_DATE - 234)) | (1 << (MySqlParser.CURRENT_TIME - 234)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 234)) | (1 << (MySqlParser.LOCALTIME - 234)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5727;
				this.match(MySqlParser.CONVERT);
				this.state = 5728;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5729;
				this.expression(0);
				this.state = 5730;
				(_localctx as DataTypeFunctionCallContext)._separator = this.match(MySqlParser.COMMA);
				this.state = 5731;
				this.convertedDataType();
				this.state = 5732;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5734;
				this.match(MySqlParser.CONVERT);
				this.state = 5735;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5736;
				this.expression(0);
				this.state = 5737;
				this.match(MySqlParser.USING);
				this.state = 5738;
				this.charsetName();
				this.state = 5739;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5741;
				this.match(MySqlParser.CAST);
				this.state = 5742;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5743;
				this.expression(0);
				this.state = 5744;
				this.match(MySqlParser.AS);
				this.state = 5745;
				this.convertedDataType();
				this.state = 5746;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5748;
				this.match(MySqlParser.VALUES);
				this.state = 5749;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5750;
				this.fullColumnName();
				this.state = 5751;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5753;
				this.match(MySqlParser.CASE);
				this.state = 5754;
				this.expression(0);
				this.state = 5756;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5755;
					this.caseFuncAlternative();
					}
					}
					this.state = 5758;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.WHEN);
				this.state = 5762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ELSE) {
					{
					this.state = 5760;
					this.match(MySqlParser.ELSE);
					this.state = 5761;
					(_localctx as CaseFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 5764;
				this.match(MySqlParser.END);
				}
				break;

			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5766;
				this.match(MySqlParser.CASE);
				this.state = 5768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5767;
					this.caseFuncAlternative();
					}
					}
					this.state = 5770;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.WHEN);
				this.state = 5774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ELSE) {
					{
					this.state = 5772;
					this.match(MySqlParser.ELSE);
					this.state = 5773;
					(_localctx as CaseFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 5776;
				this.match(MySqlParser.END);
				}
				break;

			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5778;
				this.match(MySqlParser.CHAR);
				this.state = 5779;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5780;
				this.functionArgs();
				this.state = 5783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.USING) {
					{
					this.state = 5781;
					this.match(MySqlParser.USING);
					this.state = 5782;
					this.charsetName();
					}
				}

				this.state = 5785;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5787;
				this.match(MySqlParser.POSITION);
				this.state = 5788;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5791;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 854, this._ctx) ) {
				case 1:
					{
					this.state = 5789;
					(_localctx as PositionFunctionCallContext)._positionString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5790;
					(_localctx as PositionFunctionCallContext)._positionExpression = this.expression(0);
					}
					break;
				}
				this.state = 5793;
				this.match(MySqlParser.IN);
				this.state = 5796;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 855, this._ctx) ) {
				case 1:
					{
					this.state = 5794;
					(_localctx as PositionFunctionCallContext)._inString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5795;
					(_localctx as PositionFunctionCallContext)._inExpression = this.expression(0);
					}
					break;
				}
				this.state = 5798;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5800;
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.SUBSTR || _la === MySqlParser.SUBSTRING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5801;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5804;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 856, this._ctx) ) {
				case 1:
					{
					this.state = 5802;
					(_localctx as SubstrFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5803;
					(_localctx as SubstrFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5806;
				this.match(MySqlParser.FROM);
				this.state = 5809;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 857, this._ctx) ) {
				case 1:
					{
					this.state = 5807;
					(_localctx as SubstrFunctionCallContext)._fromDecimal = this.decimalLiteral();
					}
					break;

				case 2:
					{
					this.state = 5808;
					(_localctx as SubstrFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 5816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.FOR) {
					{
					this.state = 5811;
					this.match(MySqlParser.FOR);
					this.state = 5814;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 858, this._ctx) ) {
					case 1:
						{
						this.state = 5812;
						(_localctx as SubstrFunctionCallContext)._forDecimal = this.decimalLiteral();
						}
						break;

					case 2:
						{
						this.state = 5813;
						(_localctx as SubstrFunctionCallContext)._forExpression = this.expression(0);
						}
						break;
					}
					}
				}

				this.state = 5818;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5820;
				this.match(MySqlParser.TRIM);
				this.state = 5821;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5822;
				(_localctx as TrimFunctionCallContext)._positioinForm = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.BOTH || _la === MySqlParser.LEADING || _la === MySqlParser.TRAILING)) {
					(_localctx as TrimFunctionCallContext)._positioinForm = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5825;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 860, this._ctx) ) {
				case 1:
					{
					this.state = 5823;
					(_localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5824;
					(_localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5827;
				this.match(MySqlParser.FROM);
				this.state = 5830;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
				case 1:
					{
					this.state = 5828;
					(_localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5829;
					(_localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 5832;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5834;
				this.match(MySqlParser.TRIM);
				this.state = 5835;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5838;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 862, this._ctx) ) {
				case 1:
					{
					this.state = 5836;
					(_localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5837;
					(_localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5840;
				this.match(MySqlParser.FROM);
				this.state = 5843;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 863, this._ctx) ) {
				case 1:
					{
					this.state = 5841;
					(_localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5842;
					(_localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 5845;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5847;
				this.match(MySqlParser.WEIGHT_STRING);
				this.state = 5848;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5851;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 864, this._ctx) ) {
				case 1:
					{
					this.state = 5849;
					this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5850;
					this.expression(0);
					}
					break;
				}
				this.state = 5859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.AS) {
					{
					this.state = 5853;
					this.match(MySqlParser.AS);
					this.state = 5854;
					(_localctx as WeightFunctionCallContext)._stringFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.CHAR || _la === MySqlParser.BINARY)) {
						(_localctx as WeightFunctionCallContext)._stringFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5855;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 5856;
					this.decimalLiteral();
					this.state = 5857;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				this.state = 5862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.LEVEL) {
					{
					this.state = 5861;
					this.levelsInWeightString();
					}
				}

				this.state = 5864;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5866;
				this.match(MySqlParser.EXTRACT);
				this.state = 5867;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5868;
				this.intervalType();
				this.state = 5869;
				this.match(MySqlParser.FROM);
				this.state = 5872;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 867, this._ctx) ) {
				case 1:
					{
					this.state = 5870;
					(_localctx as ExtractFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 5871;
					(_localctx as ExtractFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 5874;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5876;
				this.match(MySqlParser.GET_FORMAT);
				this.state = 5877;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5878;
				(_localctx as GetFormatFunctionCallContext)._datetimeFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.DATETIME - 185)))) !== 0))) {
					(_localctx as GetFormatFunctionCallContext)._datetimeFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5879;
				this.match(MySqlParser.COMMA);
				this.state = 5880;
				this.stringLiteral();
				this.state = 5881;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseFuncAlternative(): CaseFuncAlternativeContext {
		let _localctx: CaseFuncAlternativeContext = new CaseFuncAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, MySqlParser.RULE_caseFuncAlternative);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5885;
			this.match(MySqlParser.WHEN);
			this.state = 5886;
			_localctx._condition = this.functionArg();
			this.state = 5887;
			this.match(MySqlParser.THEN);
			this.state = 5888;
			_localctx._consequent = this.functionArg();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelsInWeightString(): LevelsInWeightStringContext {
		let _localctx: LevelsInWeightStringContext = new LevelsInWeightStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, MySqlParser.RULE_levelsInWeightString);
		let _la: number;
		try {
			this.state = 5904;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 870, this._ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5890;
				this.match(MySqlParser.LEVEL);
				this.state = 5891;
				this.levelInWeightListElement();
				this.state = 5896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 5892;
					this.match(MySqlParser.COMMA);
					this.state = 5893;
					this.levelInWeightListElement();
					}
					}
					this.state = 5898;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5899;
				this.match(MySqlParser.LEVEL);
				this.state = 5900;
				(_localctx as LevelWeightRangeContext)._firstLevel = this.decimalLiteral();
				this.state = 5901;
				this.match(MySqlParser.MINUS);
				this.state = 5902;
				(_localctx as LevelWeightRangeContext)._lastLevel = this.decimalLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelInWeightListElement(): LevelInWeightListElementContext {
		let _localctx: LevelInWeightListElementContext = new LevelInWeightListElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, MySqlParser.RULE_levelInWeightListElement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5906;
			this.decimalLiteral();
			this.state = 5908;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MySqlParser.ASC || _la === MySqlParser.DESC || _la === MySqlParser.REVERSE) {
				{
				this.state = 5907;
				_localctx._orderType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.ASC || _la === MySqlParser.DESC || _la === MySqlParser.REVERSE)) {
					_localctx._orderType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		let _localctx: AggregateWindowedFunctionContext = new AggregateWindowedFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, MySqlParser.RULE_aggregateWindowedFunction);
		let _la: number;
		try {
			this.state = 5966;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 880, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5910;
				_la = this._input.LA(1);
				if (!(((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & ((1 << (MySqlParser.AVG - 218)) | (1 << (MySqlParser.MAX - 218)) | (1 << (MySqlParser.MIN - 218)) | (1 << (MySqlParser.SUM - 218)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5911;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5913;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT) {
					{
					this.state = 5912;
					_localctx._aggregator = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MySqlParser.ALL || _la === MySqlParser.DISTINCT)) {
						_localctx._aggregator = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5915;
				this.functionArg();
				this.state = 5916;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5918;
				this.match(MySqlParser.COUNT);
				this.state = 5919;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5925;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MySqlParser.STAR:
					{
					this.state = 5920;
					_localctx._starArg = this.match(MySqlParser.STAR);
					}
					break;
				case MySqlParser.ALL:
				case MySqlParser.CASE:
				case MySqlParser.CAST:
				case MySqlParser.CONVERT:
				case MySqlParser.CURRENT_USER:
				case MySqlParser.DATABASE:
				case MySqlParser.EXISTS:
				case MySqlParser.FALSE:
				case MySqlParser.IF:
				case MySqlParser.INSERT:
				case MySqlParser.INTERVAL:
				case MySqlParser.LEFT:
				case MySqlParser.NOT:
				case MySqlParser.NULL_LITERAL:
				case MySqlParser.REPLACE:
				case MySqlParser.RIGHT:
				case MySqlParser.TRUE:
				case MySqlParser.VALUES:
				case MySqlParser.DATE:
				case MySqlParser.TIME:
				case MySqlParser.TIMESTAMP:
				case MySqlParser.DATETIME:
				case MySqlParser.YEAR:
				case MySqlParser.CHAR:
				case MySqlParser.BINARY:
				case MySqlParser.TEXT:
				case MySqlParser.ENUM:
				case MySqlParser.SERIAL:
				case MySqlParser.AVG:
				case MySqlParser.BIT_AND:
				case MySqlParser.BIT_OR:
				case MySqlParser.BIT_XOR:
				case MySqlParser.COUNT:
				case MySqlParser.GROUP_CONCAT:
				case MySqlParser.MAX:
				case MySqlParser.MIN:
				case MySqlParser.STD:
				case MySqlParser.STDDEV:
				case MySqlParser.STDDEV_POP:
				case MySqlParser.STDDEV_SAMP:
				case MySqlParser.SUM:
				case MySqlParser.VAR_POP:
				case MySqlParser.VAR_SAMP:
				case MySqlParser.VARIANCE:
				case MySqlParser.CURRENT_DATE:
				case MySqlParser.CURRENT_TIME:
				case MySqlParser.CURRENT_TIMESTAMP:
				case MySqlParser.LOCALTIME:
				case MySqlParser.CURDATE:
				case MySqlParser.CURTIME:
				case MySqlParser.DATE_ADD:
				case MySqlParser.DATE_SUB:
				case MySqlParser.EXTRACT:
				case MySqlParser.LOCALTIMESTAMP:
				case MySqlParser.NOW:
				case MySqlParser.POSITION:
				case MySqlParser.SUBSTR:
				case MySqlParser.SUBSTRING:
				case MySqlParser.SYSDATE:
				case MySqlParser.TRIM:
				case MySqlParser.UTC_DATE:
				case MySqlParser.UTC_TIME:
				case MySqlParser.UTC_TIMESTAMP:
				case MySqlParser.ACCOUNT:
				case MySqlParser.ACTION:
				case MySqlParser.AFTER:
				case MySqlParser.AGGREGATE:
				case MySqlParser.ALGORITHM:
				case MySqlParser.ANY:
				case MySqlParser.AT:
				case MySqlParser.AUTHORS:
				case MySqlParser.AUTOCOMMIT:
				case MySqlParser.AUTOEXTEND_SIZE:
				case MySqlParser.AUTO_INCREMENT:
				case MySqlParser.AVG_ROW_LENGTH:
				case MySqlParser.BEGIN:
				case MySqlParser.BINLOG:
				case MySqlParser.BIT:
				case MySqlParser.BLOCK:
				case MySqlParser.BOOL:
				case MySqlParser.BOOLEAN:
				case MySqlParser.BTREE:
				case MySqlParser.CACHE:
				case MySqlParser.CASCADED:
				case MySqlParser.CHAIN:
				case MySqlParser.CHANGED:
				case MySqlParser.CHANNEL:
				case MySqlParser.CHECKSUM:
				case MySqlParser.PAGE_CHECKSUM:
				case MySqlParser.CIPHER:
				case MySqlParser.CLASS_ORIGIN:
				case MySqlParser.CLIENT:
				case MySqlParser.CLOSE:
				case MySqlParser.COALESCE:
				case MySqlParser.CODE:
				case MySqlParser.COLUMNS:
				case MySqlParser.COLUMN_FORMAT:
				case MySqlParser.COLUMN_NAME:
				case MySqlParser.COMMENT:
				case MySqlParser.COMMIT:
				case MySqlParser.COMPACT:
				case MySqlParser.COMPLETION:
				case MySqlParser.COMPRESSED:
				case MySqlParser.COMPRESSION:
				case MySqlParser.CONCURRENT:
				case MySqlParser.CONNECTION:
				case MySqlParser.CONSISTENT:
				case MySqlParser.CONSTRAINT_CATALOG:
				case MySqlParser.CONSTRAINT_SCHEMA:
				case MySqlParser.CONSTRAINT_NAME:
				case MySqlParser.CONTAINS:
				case MySqlParser.CONTEXT:
				case MySqlParser.CONTRIBUTORS:
				case MySqlParser.COPY:
				case MySqlParser.CPU:
				case MySqlParser.DATA:
				case MySqlParser.DATAFILE:
				case MySqlParser.DEALLOCATE:
				case MySqlParser.DEFAULT_AUTH:
				case MySqlParser.DEFINER:
				case MySqlParser.DELAY_KEY_WRITE:
				case MySqlParser.DES_KEY_FILE:
				case MySqlParser.DIRECTORY:
				case MySqlParser.DISABLE:
				case MySqlParser.DISCARD:
				case MySqlParser.DISK:
				case MySqlParser.DO:
				case MySqlParser.DUMPFILE:
				case MySqlParser.DUPLICATE:
				case MySqlParser.DYNAMIC:
				case MySqlParser.ENABLE:
				case MySqlParser.ENCRYPTION:
				case MySqlParser.END:
				case MySqlParser.ENDS:
				case MySqlParser.ENGINE:
				case MySqlParser.ENGINES:
				case MySqlParser.ERROR:
				case MySqlParser.ERRORS:
				case MySqlParser.ESCAPE:
				case MySqlParser.EVEN:
				case MySqlParser.EVENT:
				case MySqlParser.EVENTS:
				case MySqlParser.EVERY:
				case MySqlParser.EXCHANGE:
				case MySqlParser.EXCLUSIVE:
				case MySqlParser.EXPIRE:
				case MySqlParser.EXPORT:
				case MySqlParser.EXTENDED:
				case MySqlParser.EXTENT_SIZE:
				case MySqlParser.FAST:
				case MySqlParser.FAULTS:
				case MySqlParser.FIELDS:
				case MySqlParser.FILE_BLOCK_SIZE:
				case MySqlParser.FILTER:
				case MySqlParser.FIRST:
				case MySqlParser.FIXED:
				case MySqlParser.FLUSH:
				case MySqlParser.FOLLOWS:
				case MySqlParser.FOUND:
				case MySqlParser.FULL:
				case MySqlParser.FUNCTION:
				case MySqlParser.GENERAL:
				case MySqlParser.GLOBAL:
				case MySqlParser.GRANTS:
				case MySqlParser.GROUP_REPLICATION:
				case MySqlParser.HANDLER:
				case MySqlParser.HASH:
				case MySqlParser.HELP:
				case MySqlParser.HOST:
				case MySqlParser.HOSTS:
				case MySqlParser.IDENTIFIED:
				case MySqlParser.IGNORE_SERVER_IDS:
				case MySqlParser.IMPORT:
				case MySqlParser.INDEXES:
				case MySqlParser.INITIAL_SIZE:
				case MySqlParser.INPLACE:
				case MySqlParser.INSERT_METHOD:
				case MySqlParser.INSTALL:
				case MySqlParser.INSTANCE:
				case MySqlParser.INVISIBLE:
				case MySqlParser.INVOKER:
				case MySqlParser.IO:
				case MySqlParser.IO_THREAD:
				case MySqlParser.IPC:
				case MySqlParser.ISOLATION:
				case MySqlParser.ISSUER:
				case MySqlParser.JSON:
				case MySqlParser.KEY_BLOCK_SIZE:
				case MySqlParser.LANGUAGE:
				case MySqlParser.LAST:
				case MySqlParser.LEAVES:
				case MySqlParser.LESS:
				case MySqlParser.LEVEL:
				case MySqlParser.LIST:
				case MySqlParser.LOCAL:
				case MySqlParser.LOGFILE:
				case MySqlParser.LOGS:
				case MySqlParser.MASTER:
				case MySqlParser.MASTER_AUTO_POSITION:
				case MySqlParser.MASTER_CONNECT_RETRY:
				case MySqlParser.MASTER_DELAY:
				case MySqlParser.MASTER_HEARTBEAT_PERIOD:
				case MySqlParser.MASTER_HOST:
				case MySqlParser.MASTER_LOG_FILE:
				case MySqlParser.MASTER_LOG_POS:
				case MySqlParser.MASTER_PASSWORD:
				case MySqlParser.MASTER_PORT:
				case MySqlParser.MASTER_RETRY_COUNT:
				case MySqlParser.MASTER_SSL:
				case MySqlParser.MASTER_SSL_CA:
				case MySqlParser.MASTER_SSL_CAPATH:
				case MySqlParser.MASTER_SSL_CERT:
				case MySqlParser.MASTER_SSL_CIPHER:
				case MySqlParser.MASTER_SSL_CRL:
				case MySqlParser.MASTER_SSL_CRLPATH:
				case MySqlParser.MASTER_SSL_KEY:
				case MySqlParser.MASTER_TLS_VERSION:
				case MySqlParser.MASTER_USER:
				case MySqlParser.MAX_CONNECTIONS_PER_HOUR:
				case MySqlParser.MAX_QUERIES_PER_HOUR:
				case MySqlParser.MAX_ROWS:
				case MySqlParser.MAX_SIZE:
				case MySqlParser.MAX_UPDATES_PER_HOUR:
				case MySqlParser.MAX_USER_CONNECTIONS:
				case MySqlParser.MEDIUM:
				case MySqlParser.MERGE:
				case MySqlParser.MESSAGE_TEXT:
				case MySqlParser.MID:
				case MySqlParser.MIGRATE:
				case MySqlParser.MIN_ROWS:
				case MySqlParser.MODE:
				case MySqlParser.MODIFY:
				case MySqlParser.MUTEX:
				case MySqlParser.MYSQL:
				case MySqlParser.MYSQL_ERRNO:
				case MySqlParser.NAME:
				case MySqlParser.NAMES:
				case MySqlParser.NCHAR:
				case MySqlParser.NEVER:
				case MySqlParser.NEXT:
				case MySqlParser.NO:
				case MySqlParser.NODEGROUP:
				case MySqlParser.NONE:
				case MySqlParser.OFFLINE:
				case MySqlParser.OFFSET:
				case MySqlParser.OJ:
				case MySqlParser.OLD_PASSWORD:
				case MySqlParser.ONE:
				case MySqlParser.ONLINE:
				case MySqlParser.ONLY:
				case MySqlParser.OPEN:
				case MySqlParser.OPTIMIZER_COSTS:
				case MySqlParser.OPTIONS:
				case MySqlParser.OWNER:
				case MySqlParser.PACK_KEYS:
				case MySqlParser.PAGE:
				case MySqlParser.PARSER:
				case MySqlParser.PARTIAL:
				case MySqlParser.PARTITIONING:
				case MySqlParser.PARTITIONS:
				case MySqlParser.PASSWORD:
				case MySqlParser.PHASE:
				case MySqlParser.PLUGIN:
				case MySqlParser.PLUGIN_DIR:
				case MySqlParser.PLUGINS:
				case MySqlParser.PORT:
				case MySqlParser.PRECEDES:
				case MySqlParser.PREPARE:
				case MySqlParser.PRESERVE:
				case MySqlParser.PREV:
				case MySqlParser.PROCESSLIST:
				case MySqlParser.PROFILE:
				case MySqlParser.PROFILES:
				case MySqlParser.PROXY:
				case MySqlParser.QUERY:
				case MySqlParser.QUICK:
				case MySqlParser.REBUILD:
				case MySqlParser.RECOVER:
				case MySqlParser.REDO_BUFFER_SIZE:
				case MySqlParser.REDUNDANT:
				case MySqlParser.RELAY:
				case MySqlParser.RELAY_LOG_FILE:
				case MySqlParser.RELAY_LOG_POS:
				case MySqlParser.RELAYLOG:
				case MySqlParser.REMOVE:
				case MySqlParser.REORGANIZE:
				case MySqlParser.REPAIR:
				case MySqlParser.REPLICATE_DO_DB:
				case MySqlParser.REPLICATE_DO_TABLE:
				case MySqlParser.REPLICATE_IGNORE_DB:
				case MySqlParser.REPLICATE_IGNORE_TABLE:
				case MySqlParser.REPLICATE_REWRITE_DB:
				case MySqlParser.REPLICATE_WILD_DO_TABLE:
				case MySqlParser.REPLICATE_WILD_IGNORE_TABLE:
				case MySqlParser.REPLICATION:
				case MySqlParser.RESET:
				case MySqlParser.RESUME:
				case MySqlParser.RETURNS:
				case MySqlParser.ROLLBACK:
				case MySqlParser.ROLLUP:
				case MySqlParser.ROTATE:
				case MySqlParser.ROW:
				case MySqlParser.ROWS:
				case MySqlParser.ROW_FORMAT:
				case MySqlParser.SAVEPOINT:
				case MySqlParser.SCHEDULE:
				case MySqlParser.SECURITY:
				case MySqlParser.SERVER:
				case MySqlParser.SESSION:
				case MySqlParser.SHARE:
				case MySqlParser.SHARED:
				case MySqlParser.SIGNED:
				case MySqlParser.SIMPLE:
				case MySqlParser.SLAVE:
				case MySqlParser.SLOW:
				case MySqlParser.SNAPSHOT:
				case MySqlParser.SOCKET:
				case MySqlParser.SOME:
				case MySqlParser.SONAME:
				case MySqlParser.SOUNDS:
				case MySqlParser.SOURCE:
				case MySqlParser.SQL_AFTER_GTIDS:
				case MySqlParser.SQL_AFTER_MTS_GAPS:
				case MySqlParser.SQL_BEFORE_GTIDS:
				case MySqlParser.SQL_BUFFER_RESULT:
				case MySqlParser.SQL_CACHE:
				case MySqlParser.SQL_NO_CACHE:
				case MySqlParser.SQL_THREAD:
				case MySqlParser.START:
				case MySqlParser.STARTS:
				case MySqlParser.STATS_AUTO_RECALC:
				case MySqlParser.STATS_PERSISTENT:
				case MySqlParser.STATS_SAMPLE_PAGES:
				case MySqlParser.STATUS:
				case MySqlParser.STOP:
				case MySqlParser.STORAGE:
				case MySqlParser.STRING:
				case MySqlParser.SUBCLASS_ORIGIN:
				case MySqlParser.SUBJECT:
				case MySqlParser.SUBPARTITION:
				case MySqlParser.SUBPARTITIONS:
				case MySqlParser.SUSPEND:
				case MySqlParser.SWAPS:
				case MySqlParser.SWITCHES:
				case MySqlParser.TABLE_NAME:
				case MySqlParser.TABLESPACE:
				case MySqlParser.TEMPORARY:
				case MySqlParser.TEMPTABLE:
				case MySqlParser.THAN:
				case MySqlParser.TRADITIONAL:
				case MySqlParser.TRANSACTION:
				case MySqlParser.TRIGGERS:
				case MySqlParser.TRUNCATE:
				case MySqlParser.UNDEFINED:
				case MySqlParser.UNDOFILE:
				case MySqlParser.UNDO_BUFFER_SIZE:
				case MySqlParser.UNINSTALL:
				case MySqlParser.UNKNOWN:
				case MySqlParser.UNTIL:
				case MySqlParser.UPGRADE:
				case MySqlParser.USER:
				case MySqlParser.USE_FRM:
				case MySqlParser.USER_RESOURCES:
				case MySqlParser.VALIDATION:
				case MySqlParser.VALUE:
				case MySqlParser.VARIABLES:
				case MySqlParser.VIEW:
				case MySqlParser.VISIBLE:
				case MySqlParser.WAIT:
				case MySqlParser.WARNINGS:
				case MySqlParser.WITHOUT:
				case MySqlParser.WORK:
				case MySqlParser.WRAPPER:
				case MySqlParser.X509:
				case MySqlParser.XA:
				case MySqlParser.XML:
				case MySqlParser.INTERNAL:
				case MySqlParser.QUARTER:
				case MySqlParser.MONTH:
				case MySqlParser.DAY:
				case MySqlParser.HOUR:
				case MySqlParser.MINUTE:
				case MySqlParser.WEEK:
				case MySqlParser.SECOND:
				case MySqlParser.MICROSECOND:
				case MySqlParser.TABLES:
				case MySqlParser.ROUTINE:
				case MySqlParser.EXECUTE:
				case MySqlParser.FILE:
				case MySqlParser.PROCESS:
				case MySqlParser.RELOAD:
				case MySqlParser.SHUTDOWN:
				case MySqlParser.SUPER:
				case MySqlParser.PRIVILEGES:
				case MySqlParser.SESSION_VARIABLES_ADMIN:
				case MySqlParser.ARMSCII8:
				case MySqlParser.ASCII:
				case MySqlParser.BIG5:
				case MySqlParser.CP1250:
				case MySqlParser.CP1251:
				case MySqlParser.CP1256:
				case MySqlParser.CP1257:
				case MySqlParser.CP850:
				case MySqlParser.CP852:
				case MySqlParser.CP866:
				case MySqlParser.CP932:
				case MySqlParser.DEC8:
				case MySqlParser.EUCJPMS:
				case MySqlParser.EUCKR:
				case MySqlParser.GB2312:
				case MySqlParser.GBK:
				case MySqlParser.GEOSTD8:
				case MySqlParser.GREEK:
				case MySqlParser.HEBREW:
				case MySqlParser.HP8:
				case MySqlParser.KEYBCS2:
				case MySqlParser.KOI8R:
				case MySqlParser.KOI8U:
				case MySqlParser.LATIN1:
				case MySqlParser.LATIN2:
				case MySqlParser.LATIN5:
				case MySqlParser.LATIN7:
				case MySqlParser.MACCE:
				case MySqlParser.MACROMAN:
				case MySqlParser.SJIS:
				case MySqlParser.SWE7:
				case MySqlParser.TIS620:
				case MySqlParser.UCS2:
				case MySqlParser.UJIS:
				case MySqlParser.UTF16:
				case MySqlParser.UTF16LE:
				case MySqlParser.UTF32:
				case MySqlParser.UTF8:
				case MySqlParser.UTF8MB3:
				case MySqlParser.UTF8MB4:
				case MySqlParser.ARCHIVE:
				case MySqlParser.BLACKHOLE:
				case MySqlParser.CSV:
				case MySqlParser.FEDERATED:
				case MySqlParser.INNODB:
				case MySqlParser.MEMORY:
				case MySqlParser.MRG_MYISAM:
				case MySqlParser.MYISAM:
				case MySqlParser.NDB:
				case MySqlParser.NDBCLUSTER:
				case MySqlParser.PERFORMANCE_SCHEMA:
				case MySqlParser.TOKUDB:
				case MySqlParser.REPEATABLE:
				case MySqlParser.COMMITTED:
				case MySqlParser.UNCOMMITTED:
				case MySqlParser.SERIALIZABLE:
				case MySqlParser.GEOMETRYCOLLECTION:
				case MySqlParser.LINESTRING:
				case MySqlParser.MULTILINESTRING:
				case MySqlParser.MULTIPOINT:
				case MySqlParser.MULTIPOLYGON:
				case MySqlParser.POINT:
				case MySqlParser.POLYGON:
				case MySqlParser.ABS:
				case MySqlParser.ACOS:
				case MySqlParser.ADDDATE:
				case MySqlParser.ADDTIME:
				case MySqlParser.AES_DECRYPT:
				case MySqlParser.AES_ENCRYPT:
				case MySqlParser.AREA:
				case MySqlParser.ASBINARY:
				case MySqlParser.ASIN:
				case MySqlParser.ASTEXT:
				case MySqlParser.ASWKB:
				case MySqlParser.ASWKT:
				case MySqlParser.ASYMMETRIC_DECRYPT:
				case MySqlParser.ASYMMETRIC_DERIVE:
				case MySqlParser.ASYMMETRIC_ENCRYPT:
				case MySqlParser.ASYMMETRIC_SIGN:
				case MySqlParser.ASYMMETRIC_VERIFY:
				case MySqlParser.ATAN:
				case MySqlParser.ATAN2:
				case MySqlParser.BENCHMARK:
				case MySqlParser.BIN:
				case MySqlParser.BIT_COUNT:
				case MySqlParser.BIT_LENGTH:
				case MySqlParser.BUFFER:
				case MySqlParser.CATALOG_NAME:
				case MySqlParser.CEIL:
				case MySqlParser.CEILING:
				case MySqlParser.CENTROID:
				case MySqlParser.CHARACTER_LENGTH:
				case MySqlParser.CHARSET:
				case MySqlParser.CHAR_LENGTH:
				case MySqlParser.COERCIBILITY:
				case MySqlParser.COLLATION:
				case MySqlParser.COMPRESS:
				case MySqlParser.CONCAT:
				case MySqlParser.CONCAT_WS:
				case MySqlParser.CONNECTION_ID:
				case MySqlParser.CONV:
				case MySqlParser.CONVERT_TZ:
				case MySqlParser.COS:
				case MySqlParser.COT:
				case MySqlParser.CRC32:
				case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MySqlParser.CREATE_DH_PARAMETERS:
				case MySqlParser.CREATE_DIGEST:
				case MySqlParser.CROSSES:
				case MySqlParser.DATEDIFF:
				case MySqlParser.DATE_FORMAT:
				case MySqlParser.DAYNAME:
				case MySqlParser.DAYOFMONTH:
				case MySqlParser.DAYOFWEEK:
				case MySqlParser.DAYOFYEAR:
				case MySqlParser.DECODE:
				case MySqlParser.DEGREES:
				case MySqlParser.DES_DECRYPT:
				case MySqlParser.DES_ENCRYPT:
				case MySqlParser.DIMENSION:
				case MySqlParser.DISJOINT:
				case MySqlParser.ELT:
				case MySqlParser.ENCODE:
				case MySqlParser.ENCRYPT:
				case MySqlParser.ENDPOINT:
				case MySqlParser.ENVELOPE:
				case MySqlParser.EQUALS:
				case MySqlParser.EXP:
				case MySqlParser.EXPORT_SET:
				case MySqlParser.EXTERIORRING:
				case MySqlParser.EXTRACTVALUE:
				case MySqlParser.FIELD:
				case MySqlParser.FIND_IN_SET:
				case MySqlParser.FLOOR:
				case MySqlParser.FORMAT:
				case MySqlParser.FOUND_ROWS:
				case MySqlParser.FROM_BASE64:
				case MySqlParser.FROM_DAYS:
				case MySqlParser.FROM_UNIXTIME:
				case MySqlParser.GEOMCOLLFROMTEXT:
				case MySqlParser.GEOMCOLLFROMWKB:
				case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.GEOMETRYFROMTEXT:
				case MySqlParser.GEOMETRYFROMWKB:
				case MySqlParser.GEOMETRYN:
				case MySqlParser.GEOMETRYTYPE:
				case MySqlParser.GEOMFROMTEXT:
				case MySqlParser.GEOMFROMWKB:
				case MySqlParser.GET_FORMAT:
				case MySqlParser.GET_LOCK:
				case MySqlParser.GLENGTH:
				case MySqlParser.GREATEST:
				case MySqlParser.GTID_SUBSET:
				case MySqlParser.GTID_SUBTRACT:
				case MySqlParser.HEX:
				case MySqlParser.IFNULL:
				case MySqlParser.INET6_ATON:
				case MySqlParser.INET6_NTOA:
				case MySqlParser.INET_ATON:
				case MySqlParser.INET_NTOA:
				case MySqlParser.INSTR:
				case MySqlParser.INTERIORRINGN:
				case MySqlParser.INTERSECTS:
				case MySqlParser.ISCLOSED:
				case MySqlParser.ISEMPTY:
				case MySqlParser.ISNULL:
				case MySqlParser.ISSIMPLE:
				case MySqlParser.IS_FREE_LOCK:
				case MySqlParser.IS_IPV4:
				case MySqlParser.IS_IPV4_COMPAT:
				case MySqlParser.IS_IPV4_MAPPED:
				case MySqlParser.IS_IPV6:
				case MySqlParser.IS_USED_LOCK:
				case MySqlParser.LAST_INSERT_ID:
				case MySqlParser.LCASE:
				case MySqlParser.LEAST:
				case MySqlParser.LENGTH:
				case MySqlParser.LINEFROMTEXT:
				case MySqlParser.LINEFROMWKB:
				case MySqlParser.LINESTRINGFROMTEXT:
				case MySqlParser.LINESTRINGFROMWKB:
				case MySqlParser.LN:
				case MySqlParser.LOAD_FILE:
				case MySqlParser.LOCATE:
				case MySqlParser.LOG:
				case MySqlParser.LOG10:
				case MySqlParser.LOG2:
				case MySqlParser.LOWER:
				case MySqlParser.LPAD:
				case MySqlParser.LTRIM:
				case MySqlParser.MAKEDATE:
				case MySqlParser.MAKETIME:
				case MySqlParser.MAKE_SET:
				case MySqlParser.MASTER_POS_WAIT:
				case MySqlParser.MBRCONTAINS:
				case MySqlParser.MBRDISJOINT:
				case MySqlParser.MBREQUAL:
				case MySqlParser.MBRINTERSECTS:
				case MySqlParser.MBROVERLAPS:
				case MySqlParser.MBRTOUCHES:
				case MySqlParser.MBRWITHIN:
				case MySqlParser.MD5:
				case MySqlParser.MLINEFROMTEXT:
				case MySqlParser.MLINEFROMWKB:
				case MySqlParser.MONTHNAME:
				case MySqlParser.MPOINTFROMTEXT:
				case MySqlParser.MPOINTFROMWKB:
				case MySqlParser.MPOLYFROMTEXT:
				case MySqlParser.MPOLYFROMWKB:
				case MySqlParser.MULTILINESTRINGFROMTEXT:
				case MySqlParser.MULTILINESTRINGFROMWKB:
				case MySqlParser.MULTIPOINTFROMTEXT:
				case MySqlParser.MULTIPOINTFROMWKB:
				case MySqlParser.MULTIPOLYGONFROMTEXT:
				case MySqlParser.MULTIPOLYGONFROMWKB:
				case MySqlParser.NAME_CONST:
				case MySqlParser.NULLIF:
				case MySqlParser.NUMGEOMETRIES:
				case MySqlParser.NUMINTERIORRINGS:
				case MySqlParser.NUMPOINTS:
				case MySqlParser.OCT:
				case MySqlParser.OCTET_LENGTH:
				case MySqlParser.ORD:
				case MySqlParser.OVERLAPS:
				case MySqlParser.PERIOD_ADD:
				case MySqlParser.PERIOD_DIFF:
				case MySqlParser.PI:
				case MySqlParser.POINTFROMTEXT:
				case MySqlParser.POINTFROMWKB:
				case MySqlParser.POINTN:
				case MySqlParser.POLYFROMTEXT:
				case MySqlParser.POLYFROMWKB:
				case MySqlParser.POLYGONFROMTEXT:
				case MySqlParser.POLYGONFROMWKB:
				case MySqlParser.POW:
				case MySqlParser.POWER:
				case MySqlParser.QUOTE:
				case MySqlParser.RADIANS:
				case MySqlParser.RAND:
				case MySqlParser.RANDOM_BYTES:
				case MySqlParser.RELEASE_LOCK:
				case MySqlParser.REVERSE:
				case MySqlParser.ROUND:
				case MySqlParser.ROW_COUNT:
				case MySqlParser.RPAD:
				case MySqlParser.RTRIM:
				case MySqlParser.SEC_TO_TIME:
				case MySqlParser.SESSION_USER:
				case MySqlParser.SHA:
				case MySqlParser.SHA1:
				case MySqlParser.SHA2:
				case MySqlParser.SCHEMA_NAME:
				case MySqlParser.SIGN:
				case MySqlParser.SIN:
				case MySqlParser.SLEEP:
				case MySqlParser.SOUNDEX:
				case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MySqlParser.SQRT:
				case MySqlParser.SRID:
				case MySqlParser.STARTPOINT:
				case MySqlParser.STRCMP:
				case MySqlParser.STR_TO_DATE:
				case MySqlParser.ST_AREA:
				case MySqlParser.ST_ASBINARY:
				case MySqlParser.ST_ASTEXT:
				case MySqlParser.ST_ASWKB:
				case MySqlParser.ST_ASWKT:
				case MySqlParser.ST_BUFFER:
				case MySqlParser.ST_CENTROID:
				case MySqlParser.ST_CONTAINS:
				case MySqlParser.ST_CROSSES:
				case MySqlParser.ST_DIFFERENCE:
				case MySqlParser.ST_DIMENSION:
				case MySqlParser.ST_DISJOINT:
				case MySqlParser.ST_DISTANCE:
				case MySqlParser.ST_ENDPOINT:
				case MySqlParser.ST_ENVELOPE:
				case MySqlParser.ST_EQUALS:
				case MySqlParser.ST_EXTERIORRING:
				case MySqlParser.ST_GEOMCOLLFROMTEXT:
				case MySqlParser.ST_GEOMCOLLFROMTXT:
				case MySqlParser.ST_GEOMCOLLFROMWKB:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MySqlParser.ST_GEOMETRYFROMTEXT:
				case MySqlParser.ST_GEOMETRYFROMWKB:
				case MySqlParser.ST_GEOMETRYN:
				case MySqlParser.ST_GEOMETRYTYPE:
				case MySqlParser.ST_GEOMFROMTEXT:
				case MySqlParser.ST_GEOMFROMWKB:
				case MySqlParser.ST_INTERIORRINGN:
				case MySqlParser.ST_INTERSECTION:
				case MySqlParser.ST_INTERSECTS:
				case MySqlParser.ST_ISCLOSED:
				case MySqlParser.ST_ISEMPTY:
				case MySqlParser.ST_ISSIMPLE:
				case MySqlParser.ST_LINEFROMTEXT:
				case MySqlParser.ST_LINEFROMWKB:
				case MySqlParser.ST_LINESTRINGFROMTEXT:
				case MySqlParser.ST_LINESTRINGFROMWKB:
				case MySqlParser.ST_NUMGEOMETRIES:
				case MySqlParser.ST_NUMINTERIORRING:
				case MySqlParser.ST_NUMINTERIORRINGS:
				case MySqlParser.ST_NUMPOINTS:
				case MySqlParser.ST_OVERLAPS:
				case MySqlParser.ST_POINTFROMTEXT:
				case MySqlParser.ST_POINTFROMWKB:
				case MySqlParser.ST_POINTN:
				case MySqlParser.ST_POLYFROMTEXT:
				case MySqlParser.ST_POLYFROMWKB:
				case MySqlParser.ST_POLYGONFROMTEXT:
				case MySqlParser.ST_POLYGONFROMWKB:
				case MySqlParser.ST_SRID:
				case MySqlParser.ST_STARTPOINT:
				case MySqlParser.ST_SYMDIFFERENCE:
				case MySqlParser.ST_TOUCHES:
				case MySqlParser.ST_UNION:
				case MySqlParser.ST_WITHIN:
				case MySqlParser.ST_X:
				case MySqlParser.ST_Y:
				case MySqlParser.SUBDATE:
				case MySqlParser.SUBSTRING_INDEX:
				case MySqlParser.SUBTIME:
				case MySqlParser.SYSTEM_USER:
				case MySqlParser.TAN:
				case MySqlParser.TIMEDIFF:
				case MySqlParser.TIMESTAMPADD:
				case MySqlParser.TIMESTAMPDIFF:
				case MySqlParser.TIME_FORMAT:
				case MySqlParser.TIME_TO_SEC:
				case MySqlParser.TOUCHES:
				case MySqlParser.TO_BASE64:
				case MySqlParser.TO_DAYS:
				case MySqlParser.TO_SECONDS:
				case MySqlParser.UCASE:
				case MySqlParser.UNCOMPRESS:
				case MySqlParser.UNCOMPRESSED_LENGTH:
				case MySqlParser.UNHEX:
				case MySqlParser.UNIX_TIMESTAMP:
				case MySqlParser.UPDATEXML:
				case MySqlParser.UPPER:
				case MySqlParser.UUID:
				case MySqlParser.UUID_SHORT:
				case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
				case MySqlParser.VERSION:
				case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MySqlParser.WEEKDAY:
				case MySqlParser.WEEKOFYEAR:
				case MySqlParser.WEIGHT_STRING:
				case MySqlParser.WITHIN:
				case MySqlParser.YEARWEEK:
				case MySqlParser.Y_FUNCTION:
				case MySqlParser.X_FUNCTION:
				case MySqlParser.PLUS:
				case MySqlParser.MINUS:
				case MySqlParser.EXCLAMATION_SYMBOL:
				case MySqlParser.BIT_NOT_OP:
				case MySqlParser.LR_BRACKET:
				case MySqlParser.ZERO_DECIMAL:
				case MySqlParser.ONE_DECIMAL:
				case MySqlParser.TWO_DECIMAL:
				case MySqlParser.CHARSET_REVERSE_QOUTE_STRING:
				case MySqlParser.START_NATIONAL_STRING_LITERAL:
				case MySqlParser.STRING_LITERAL:
				case MySqlParser.DECIMAL_LITERAL:
				case MySqlParser.HEXADECIMAL_LITERAL:
				case MySqlParser.REAL_LITERAL:
				case MySqlParser.NULL_SPEC_LITERAL:
				case MySqlParser.BIT_STRING:
				case MySqlParser.STRING_CHARSET_NAME:
				case MySqlParser.ID:
				case MySqlParser.REVERSE_QUOTE_ID:
				case MySqlParser.LOCAL_ID:
				case MySqlParser.GLOBAL_ID:
					{
					this.state = 5922;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MySqlParser.ALL) {
						{
						this.state = 5921;
						_localctx._aggregator = this.match(MySqlParser.ALL);
						}
					}

					this.state = 5924;
					this.functionArg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5927;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5928;
				this.match(MySqlParser.COUNT);
				this.state = 5929;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5930;
				_localctx._aggregator = this.match(MySqlParser.DISTINCT);
				this.state = 5931;
				this.functionArgs();
				this.state = 5932;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5934;
				_la = this._input.LA(1);
				if (!(((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & ((1 << (MySqlParser.BIT_AND - 219)) | (1 << (MySqlParser.BIT_OR - 219)) | (1 << (MySqlParser.BIT_XOR - 219)) | (1 << (MySqlParser.STD - 219)) | (1 << (MySqlParser.STDDEV - 219)) | (1 << (MySqlParser.STDDEV_POP - 219)) | (1 << (MySqlParser.STDDEV_SAMP - 219)) | (1 << (MySqlParser.VAR_POP - 219)) | (1 << (MySqlParser.VAR_SAMP - 219)) | (1 << (MySqlParser.VARIANCE - 219)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5935;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ALL) {
					{
					this.state = 5936;
					_localctx._aggregator = this.match(MySqlParser.ALL);
					}
				}

				this.state = 5939;
				this.functionArg();
				this.state = 5940;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5942;
				this.match(MySqlParser.GROUP_CONCAT);
				this.state = 5943;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5945;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.DISTINCT) {
					{
					this.state = 5944;
					_localctx._aggregator = this.match(MySqlParser.DISTINCT);
					}
				}

				this.state = 5947;
				this.functionArgs();
				this.state = 5958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.ORDER) {
					{
					this.state = 5948;
					this.match(MySqlParser.ORDER);
					this.state = 5949;
					this.match(MySqlParser.BY);
					this.state = 5950;
					this.orderByExpression();
					this.state = 5955;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MySqlParser.COMMA) {
						{
						{
						this.state = 5951;
						this.match(MySqlParser.COMMA);
						this.state = 5952;
						this.orderByExpression();
						}
						}
						this.state = 5957;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5962;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.SEPARATOR) {
					{
					this.state = 5960;
					this.match(MySqlParser.SEPARATOR);
					this.state = 5961;
					_localctx._separator = this.match(MySqlParser.STRING_LITERAL);
					}
				}

				this.state = 5964;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scalarFunctionName(): ScalarFunctionNameContext {
		let _localctx: ScalarFunctionNameContext = new ScalarFunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, MySqlParser.RULE_scalarFunctionName);
		try {
			this.state = 5991;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.DATABASE:
			case MySqlParser.LEFT:
			case MySqlParser.RIGHT:
			case MySqlParser.DATE:
			case MySqlParser.TIME:
			case MySqlParser.TIMESTAMP:
			case MySqlParser.YEAR:
			case MySqlParser.COUNT:
			case MySqlParser.POSITION:
			case MySqlParser.INVISIBLE:
			case MySqlParser.VISIBLE:
			case MySqlParser.QUARTER:
			case MySqlParser.MONTH:
			case MySqlParser.DAY:
			case MySqlParser.HOUR:
			case MySqlParser.MINUTE:
			case MySqlParser.WEEK:
			case MySqlParser.SECOND:
			case MySqlParser.MICROSECOND:
			case MySqlParser.SESSION_VARIABLES_ADMIN:
			case MySqlParser.GEOMETRYCOLLECTION:
			case MySqlParser.LINESTRING:
			case MySqlParser.MULTILINESTRING:
			case MySqlParser.MULTIPOINT:
			case MySqlParser.MULTIPOLYGON:
			case MySqlParser.POINT:
			case MySqlParser.POLYGON:
			case MySqlParser.ABS:
			case MySqlParser.ACOS:
			case MySqlParser.ADDDATE:
			case MySqlParser.ADDTIME:
			case MySqlParser.AES_DECRYPT:
			case MySqlParser.AES_ENCRYPT:
			case MySqlParser.AREA:
			case MySqlParser.ASBINARY:
			case MySqlParser.ASIN:
			case MySqlParser.ASTEXT:
			case MySqlParser.ASWKB:
			case MySqlParser.ASWKT:
			case MySqlParser.ASYMMETRIC_DECRYPT:
			case MySqlParser.ASYMMETRIC_DERIVE:
			case MySqlParser.ASYMMETRIC_ENCRYPT:
			case MySqlParser.ASYMMETRIC_SIGN:
			case MySqlParser.ASYMMETRIC_VERIFY:
			case MySqlParser.ATAN:
			case MySqlParser.ATAN2:
			case MySqlParser.BENCHMARK:
			case MySqlParser.BIN:
			case MySqlParser.BIT_COUNT:
			case MySqlParser.BIT_LENGTH:
			case MySqlParser.BUFFER:
			case MySqlParser.CEIL:
			case MySqlParser.CEILING:
			case MySqlParser.CENTROID:
			case MySqlParser.CHARACTER_LENGTH:
			case MySqlParser.CHARSET:
			case MySqlParser.CHAR_LENGTH:
			case MySqlParser.COERCIBILITY:
			case MySqlParser.COLLATION:
			case MySqlParser.COMPRESS:
			case MySqlParser.CONCAT:
			case MySqlParser.CONCAT_WS:
			case MySqlParser.CONNECTION_ID:
			case MySqlParser.CONV:
			case MySqlParser.CONVERT_TZ:
			case MySqlParser.COS:
			case MySqlParser.COT:
			case MySqlParser.CRC32:
			case MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MySqlParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MySqlParser.CREATE_DH_PARAMETERS:
			case MySqlParser.CREATE_DIGEST:
			case MySqlParser.CROSSES:
			case MySqlParser.DATEDIFF:
			case MySqlParser.DATE_FORMAT:
			case MySqlParser.DAYNAME:
			case MySqlParser.DAYOFMONTH:
			case MySqlParser.DAYOFWEEK:
			case MySqlParser.DAYOFYEAR:
			case MySqlParser.DECODE:
			case MySqlParser.DEGREES:
			case MySqlParser.DES_DECRYPT:
			case MySqlParser.DES_ENCRYPT:
			case MySqlParser.DIMENSION:
			case MySqlParser.DISJOINT:
			case MySqlParser.ELT:
			case MySqlParser.ENCODE:
			case MySqlParser.ENCRYPT:
			case MySqlParser.ENDPOINT:
			case MySqlParser.ENVELOPE:
			case MySqlParser.EQUALS:
			case MySqlParser.EXP:
			case MySqlParser.EXPORT_SET:
			case MySqlParser.EXTERIORRING:
			case MySqlParser.EXTRACTVALUE:
			case MySqlParser.FIELD:
			case MySqlParser.FIND_IN_SET:
			case MySqlParser.FLOOR:
			case MySqlParser.FORMAT:
			case MySqlParser.FOUND_ROWS:
			case MySqlParser.FROM_BASE64:
			case MySqlParser.FROM_DAYS:
			case MySqlParser.FROM_UNIXTIME:
			case MySqlParser.GEOMCOLLFROMTEXT:
			case MySqlParser.GEOMCOLLFROMWKB:
			case MySqlParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.GEOMETRYFROMTEXT:
			case MySqlParser.GEOMETRYFROMWKB:
			case MySqlParser.GEOMETRYN:
			case MySqlParser.GEOMETRYTYPE:
			case MySqlParser.GEOMFROMTEXT:
			case MySqlParser.GEOMFROMWKB:
			case MySqlParser.GET_FORMAT:
			case MySqlParser.GET_LOCK:
			case MySqlParser.GLENGTH:
			case MySqlParser.GREATEST:
			case MySqlParser.GTID_SUBSET:
			case MySqlParser.GTID_SUBTRACT:
			case MySqlParser.HEX:
			case MySqlParser.IFNULL:
			case MySqlParser.INET6_ATON:
			case MySqlParser.INET6_NTOA:
			case MySqlParser.INET_ATON:
			case MySqlParser.INET_NTOA:
			case MySqlParser.INSTR:
			case MySqlParser.INTERIORRINGN:
			case MySqlParser.INTERSECTS:
			case MySqlParser.ISCLOSED:
			case MySqlParser.ISEMPTY:
			case MySqlParser.ISNULL:
			case MySqlParser.ISSIMPLE:
			case MySqlParser.IS_FREE_LOCK:
			case MySqlParser.IS_IPV4:
			case MySqlParser.IS_IPV4_COMPAT:
			case MySqlParser.IS_IPV4_MAPPED:
			case MySqlParser.IS_IPV6:
			case MySqlParser.IS_USED_LOCK:
			case MySqlParser.LAST_INSERT_ID:
			case MySqlParser.LCASE:
			case MySqlParser.LEAST:
			case MySqlParser.LENGTH:
			case MySqlParser.LINEFROMTEXT:
			case MySqlParser.LINEFROMWKB:
			case MySqlParser.LINESTRINGFROMTEXT:
			case MySqlParser.LINESTRINGFROMWKB:
			case MySqlParser.LN:
			case MySqlParser.LOAD_FILE:
			case MySqlParser.LOCATE:
			case MySqlParser.LOG:
			case MySqlParser.LOG10:
			case MySqlParser.LOG2:
			case MySqlParser.LOWER:
			case MySqlParser.LPAD:
			case MySqlParser.LTRIM:
			case MySqlParser.MAKEDATE:
			case MySqlParser.MAKETIME:
			case MySqlParser.MAKE_SET:
			case MySqlParser.MASTER_POS_WAIT:
			case MySqlParser.MBRCONTAINS:
			case MySqlParser.MBRDISJOINT:
			case MySqlParser.MBREQUAL:
			case MySqlParser.MBRINTERSECTS:
			case MySqlParser.MBROVERLAPS:
			case MySqlParser.MBRTOUCHES:
			case MySqlParser.MBRWITHIN:
			case MySqlParser.MD5:
			case MySqlParser.MLINEFROMTEXT:
			case MySqlParser.MLINEFROMWKB:
			case MySqlParser.MONTHNAME:
			case MySqlParser.MPOINTFROMTEXT:
			case MySqlParser.MPOINTFROMWKB:
			case MySqlParser.MPOLYFROMTEXT:
			case MySqlParser.MPOLYFROMWKB:
			case MySqlParser.MULTILINESTRINGFROMTEXT:
			case MySqlParser.MULTILINESTRINGFROMWKB:
			case MySqlParser.MULTIPOINTFROMTEXT:
			case MySqlParser.MULTIPOINTFROMWKB:
			case MySqlParser.MULTIPOLYGONFROMTEXT:
			case MySqlParser.MULTIPOLYGONFROMWKB:
			case MySqlParser.NAME_CONST:
			case MySqlParser.NULLIF:
			case MySqlParser.NUMGEOMETRIES:
			case MySqlParser.NUMINTERIORRINGS:
			case MySqlParser.NUMPOINTS:
			case MySqlParser.OCT:
			case MySqlParser.OCTET_LENGTH:
			case MySqlParser.ORD:
			case MySqlParser.OVERLAPS:
			case MySqlParser.PERIOD_ADD:
			case MySqlParser.PERIOD_DIFF:
			case MySqlParser.PI:
			case MySqlParser.POINTFROMTEXT:
			case MySqlParser.POINTFROMWKB:
			case MySqlParser.POINTN:
			case MySqlParser.POLYFROMTEXT:
			case MySqlParser.POLYFROMWKB:
			case MySqlParser.POLYGONFROMTEXT:
			case MySqlParser.POLYGONFROMWKB:
			case MySqlParser.POW:
			case MySqlParser.POWER:
			case MySqlParser.QUOTE:
			case MySqlParser.RADIANS:
			case MySqlParser.RAND:
			case MySqlParser.RANDOM_BYTES:
			case MySqlParser.RELEASE_LOCK:
			case MySqlParser.REVERSE:
			case MySqlParser.ROUND:
			case MySqlParser.ROW_COUNT:
			case MySqlParser.RPAD:
			case MySqlParser.RTRIM:
			case MySqlParser.SEC_TO_TIME:
			case MySqlParser.SESSION_USER:
			case MySqlParser.SHA:
			case MySqlParser.SHA1:
			case MySqlParser.SHA2:
			case MySqlParser.SIGN:
			case MySqlParser.SIN:
			case MySqlParser.SLEEP:
			case MySqlParser.SOUNDEX:
			case MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MySqlParser.SQRT:
			case MySqlParser.SRID:
			case MySqlParser.STARTPOINT:
			case MySqlParser.STRCMP:
			case MySqlParser.STR_TO_DATE:
			case MySqlParser.ST_AREA:
			case MySqlParser.ST_ASBINARY:
			case MySqlParser.ST_ASTEXT:
			case MySqlParser.ST_ASWKB:
			case MySqlParser.ST_ASWKT:
			case MySqlParser.ST_BUFFER:
			case MySqlParser.ST_CENTROID:
			case MySqlParser.ST_CONTAINS:
			case MySqlParser.ST_CROSSES:
			case MySqlParser.ST_DIFFERENCE:
			case MySqlParser.ST_DIMENSION:
			case MySqlParser.ST_DISJOINT:
			case MySqlParser.ST_DISTANCE:
			case MySqlParser.ST_ENDPOINT:
			case MySqlParser.ST_ENVELOPE:
			case MySqlParser.ST_EQUALS:
			case MySqlParser.ST_EXTERIORRING:
			case MySqlParser.ST_GEOMCOLLFROMTEXT:
			case MySqlParser.ST_GEOMCOLLFROMTXT:
			case MySqlParser.ST_GEOMCOLLFROMWKB:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MySqlParser.ST_GEOMETRYFROMTEXT:
			case MySqlParser.ST_GEOMETRYFROMWKB:
			case MySqlParser.ST_GEOMETRYN:
			case MySqlParser.ST_GEOMETRYTYPE:
			case MySqlParser.ST_GEOMFROMTEXT:
			case MySqlParser.ST_GEOMFROMWKB:
			case MySqlParser.ST_INTERIORRINGN:
			case MySqlParser.ST_INTERSECTION:
			case MySqlParser.ST_INTERSECTS:
			case MySqlParser.ST_ISCLOSED:
			case MySqlParser.ST_ISEMPTY:
			case MySqlParser.ST_ISSIMPLE:
			case MySqlParser.ST_LINEFROMTEXT:
			case MySqlParser.ST_LINEFROMWKB:
			case MySqlParser.ST_LINESTRINGFROMTEXT:
			case MySqlParser.ST_LINESTRINGFROMWKB:
			case MySqlParser.ST_NUMGEOMETRIES:
			case MySqlParser.ST_NUMINTERIORRING:
			case MySqlParser.ST_NUMINTERIORRINGS:
			case MySqlParser.ST_NUMPOINTS:
			case MySqlParser.ST_OVERLAPS:
			case MySqlParser.ST_POINTFROMTEXT:
			case MySqlParser.ST_POINTFROMWKB:
			case MySqlParser.ST_POINTN:
			case MySqlParser.ST_POLYFROMTEXT:
			case MySqlParser.ST_POLYFROMWKB:
			case MySqlParser.ST_POLYGONFROMTEXT:
			case MySqlParser.ST_POLYGONFROMWKB:
			case MySqlParser.ST_SRID:
			case MySqlParser.ST_STARTPOINT:
			case MySqlParser.ST_SYMDIFFERENCE:
			case MySqlParser.ST_TOUCHES:
			case MySqlParser.ST_UNION:
			case MySqlParser.ST_WITHIN:
			case MySqlParser.ST_X:
			case MySqlParser.ST_Y:
			case MySqlParser.SUBDATE:
			case MySqlParser.SUBSTRING_INDEX:
			case MySqlParser.SUBTIME:
			case MySqlParser.SYSTEM_USER:
			case MySqlParser.TAN:
			case MySqlParser.TIMEDIFF:
			case MySqlParser.TIMESTAMPADD:
			case MySqlParser.TIMESTAMPDIFF:
			case MySqlParser.TIME_FORMAT:
			case MySqlParser.TIME_TO_SEC:
			case MySqlParser.TOUCHES:
			case MySqlParser.TO_BASE64:
			case MySqlParser.TO_DAYS:
			case MySqlParser.TO_SECONDS:
			case MySqlParser.UCASE:
			case MySqlParser.UNCOMPRESS:
			case MySqlParser.UNCOMPRESSED_LENGTH:
			case MySqlParser.UNHEX:
			case MySqlParser.UNIX_TIMESTAMP:
			case MySqlParser.UPDATEXML:
			case MySqlParser.UPPER:
			case MySqlParser.UUID:
			case MySqlParser.UUID_SHORT:
			case MySqlParser.VALIDATE_PASSWORD_STRENGTH:
			case MySqlParser.VERSION:
			case MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MySqlParser.WEEKDAY:
			case MySqlParser.WEEKOFYEAR:
			case MySqlParser.WEIGHT_STRING:
			case MySqlParser.WITHIN:
			case MySqlParser.YEARWEEK:
			case MySqlParser.Y_FUNCTION:
			case MySqlParser.X_FUNCTION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5968;
				this.functionNameBase();
				}
				break;
			case MySqlParser.ASCII:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5969;
				this.match(MySqlParser.ASCII);
				}
				break;
			case MySqlParser.CURDATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5970;
				this.match(MySqlParser.CURDATE);
				}
				break;
			case MySqlParser.CURRENT_DATE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5971;
				this.match(MySqlParser.CURRENT_DATE);
				}
				break;
			case MySqlParser.CURRENT_TIME:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5972;
				this.match(MySqlParser.CURRENT_TIME);
				}
				break;
			case MySqlParser.CURRENT_TIMESTAMP:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5973;
				this.match(MySqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case MySqlParser.CURTIME:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5974;
				this.match(MySqlParser.CURTIME);
				}
				break;
			case MySqlParser.DATE_ADD:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5975;
				this.match(MySqlParser.DATE_ADD);
				}
				break;
			case MySqlParser.DATE_SUB:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5976;
				this.match(MySqlParser.DATE_SUB);
				}
				break;
			case MySqlParser.IF:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5977;
				this.match(MySqlParser.IF);
				}
				break;
			case MySqlParser.INSERT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5978;
				this.match(MySqlParser.INSERT);
				}
				break;
			case MySqlParser.LOCALTIME:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5979;
				this.match(MySqlParser.LOCALTIME);
				}
				break;
			case MySqlParser.LOCALTIMESTAMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5980;
				this.match(MySqlParser.LOCALTIMESTAMP);
				}
				break;
			case MySqlParser.MID:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5981;
				this.match(MySqlParser.MID);
				}
				break;
			case MySqlParser.NOW:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5982;
				this.match(MySqlParser.NOW);
				}
				break;
			case MySqlParser.REPLACE:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5983;
				this.match(MySqlParser.REPLACE);
				}
				break;
			case MySqlParser.SUBSTR:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5984;
				this.match(MySqlParser.SUBSTR);
				}
				break;
			case MySqlParser.SUBSTRING:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5985;
				this.match(MySqlParser.SUBSTRING);
				}
				break;
			case MySqlParser.SYSDATE:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5986;
				this.match(MySqlParser.SYSDATE);
				}
				break;
			case MySqlParser.TRIM:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 5987;
				this.match(MySqlParser.TRIM);
				}
				break;
			case MySqlParser.UTC_DATE:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 5988;
				this.match(MySqlParser.UTC_DATE);
				}
				break;
			case MySqlParser.UTC_TIME:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 5989;
				this.match(MySqlParser.UTC_TIME);
				}
				break;
			case MySqlParser.UTC_TIMESTAMP:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 5990;
				this.match(MySqlParser.UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		let _localctx: PasswordFunctionClauseContext = new PasswordFunctionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, MySqlParser.RULE_passwordFunctionClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5993;
			_localctx._functionName = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.OLD_PASSWORD || _la === MySqlParser.PASSWORD)) {
				_localctx._functionName = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5994;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 5995;
			this.functionArg();
			this.state = 5996;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionArgs(): FunctionArgsContext {
		let _localctx: FunctionArgsContext = new FunctionArgsContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, MySqlParser.RULE_functionArgs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 882, this._ctx) ) {
			case 1:
				{
				this.state = 5998;
				this.constant();
				}
				break;

			case 2:
				{
				this.state = 5999;
				this.fullColumnName();
				}
				break;

			case 3:
				{
				this.state = 6000;
				this.functionCall();
				}
				break;

			case 4:
				{
				this.state = 6001;
				this.expression(0);
				}
				break;
			}
			this.state = 6013;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MySqlParser.COMMA) {
				{
				{
				this.state = 6004;
				this.match(MySqlParser.COMMA);
				this.state = 6009;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 883, this._ctx) ) {
				case 1:
					{
					this.state = 6005;
					this.constant();
					}
					break;

				case 2:
					{
					this.state = 6006;
					this.fullColumnName();
					}
					break;

				case 3:
					{
					this.state = 6007;
					this.functionCall();
					}
					break;

				case 4:
					{
					this.state = 6008;
					this.expression(0);
					}
					break;
				}
				}
				}
				this.state = 6015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionArg(): FunctionArgContext {
		let _localctx: FunctionArgContext = new FunctionArgContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, MySqlParser.RULE_functionArg);
		try {
			this.state = 6020;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 885, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6016;
				this.constant();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6017;
				this.fullColumnName();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6018;
				this.functionCall();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6019;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 594;
		this.enterRecursionRule(_localctx, 594, MySqlParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6033;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 887, this._ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 6023;
				(_localctx as NotExpressionContext)._notOperator = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.NOT || _la === MySqlParser.EXCLAMATION_SYMBOL)) {
					(_localctx as NotExpressionContext)._notOperator = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6024;
				this.expression(4);
				}
				break;

			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6025;
				this.predicate(0);
				this.state = 6026;
				this.match(MySqlParser.IS);
				this.state = 6028;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MySqlParser.NOT) {
					{
					this.state = 6027;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 6030;
				(_localctx as IsExpressionContext)._testValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MySqlParser.FALSE || _la === MySqlParser.TRUE || _la === MySqlParser.UNKNOWN)) {
					(_localctx as IsExpressionContext)._testValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6032;
				this.predicate(0);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6041;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 888, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expression);
					this.state = 6035;
					if (!(this.precpred(this._ctx, 3))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
					}
					this.state = 6036;
					this.logicalOperator();
					this.state = 6037;
					this.expression(4);
					}
					}
				}
				this.state = 6043;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 888, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public predicate(): PredicateContext;
	public predicate(_p: number): PredicateContext;
	// @RuleVersion(0)
	public predicate(_p?: number): PredicateContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: PredicateContext = new PredicateContext(this._ctx, _parentState);
		let _prevctx: PredicateContext = _localctx;
		let _startState: number = 596;
		this.enterRecursionRule(_localctx, 596, MySqlParser.RULE_predicate, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 6047;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 889, this._ctx) ) {
			case 1:
				{
				this.state = 6045;
				this.match(MySqlParser.LOCAL_ID);
				this.state = 6046;
				this.match(MySqlParser.VAR_ASSIGN);
				}
				break;
			}
			this.state = 6049;
			this.expressionAtom(0);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6108;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 897, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 6106;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 896, this._ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						(_localctx as BinaryComparasionPredicateContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6051;
						if (!(this.precpred(this._ctx, 7))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 7)");
						}
						this.state = 6052;
						this.comparisonOperator();
						this.state = 6053;
						(_localctx as BinaryComparasionPredicateContext)._right = this.predicate(8);
						}
						break;

					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6055;
						if (!(this.precpred(this._ctx, 5))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 5)");
						}
						this.state = 6057;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 6056;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 6059;
						this.match(MySqlParser.BETWEEN);
						this.state = 6060;
						this.predicate(0);
						this.state = 6061;
						this.match(MySqlParser.AND);
						this.state = 6062;
						this.predicate(6);
						}
						break;

					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6064;
						if (!(this.precpred(this._ctx, 4))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
						}
						this.state = 6065;
						this.match(MySqlParser.SOUNDS);
						this.state = 6066;
						this.match(MySqlParser.LIKE);
						this.state = 6067;
						this.predicate(5);
						}
						break;

					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6068;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 6070;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 6069;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 6072;
						(_localctx as RegexpPredicateContext)._regex = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.REGEXP || _la === MySqlParser.RLIKE)) {
							(_localctx as RegexpPredicateContext)._regex = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 6073;
						this.predicate(3);
						}
						break;

					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6074;
						if (!(this.precpred(this._ctx, 9))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 9)");
						}
						this.state = 6076;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 6075;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 6078;
						this.match(MySqlParser.IN);
						this.state = 6079;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 6082;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 893, this._ctx) ) {
						case 1:
							{
							this.state = 6080;
							this.selectStatement();
							}
							break;

						case 2:
							{
							this.state = 6081;
							this.expressions();
							}
							break;
						}
						this.state = 6084;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;

					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6086;
						if (!(this.precpred(this._ctx, 8))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 8)");
						}
						this.state = 6087;
						this.match(MySqlParser.IS);
						this.state = 6088;
						this.nullNotnull();
						}
						break;

					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6089;
						if (!(this.precpred(this._ctx, 6))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
						}
						this.state = 6090;
						this.comparisonOperator();
						this.state = 6091;
						(_localctx as SubqueryComparasionPredicateContext)._quantifier = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MySqlParser.ALL || _la === MySqlParser.ANY || _la === MySqlParser.SOME)) {
							(_localctx as SubqueryComparasionPredicateContext)._quantifier = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 6092;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 6093;
						this.selectStatement();
						this.state = 6094;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;

					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 6096;
						if (!(this.precpred(this._ctx, 3))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 3)");
						}
						this.state = 6098;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MySqlParser.NOT) {
							{
							this.state = 6097;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 6100;
						this.match(MySqlParser.LIKE);
						this.state = 6101;
						this.predicate(0);
						this.state = 6104;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 895, this._ctx) ) {
						case 1:
							{
							this.state = 6102;
							this.match(MySqlParser.ESCAPE);
							this.state = 6103;
							this.match(MySqlParser.STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					}
				}
				this.state = 6110;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 897, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public expressionAtom(): ExpressionAtomContext;
	public expressionAtom(_p: number): ExpressionAtomContext;
	// @RuleVersion(0)
	public expressionAtom(_p?: number): ExpressionAtomContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionAtomContext = new ExpressionAtomContext(this._ctx, _parentState);
		let _prevctx: ExpressionAtomContext = _localctx;
		let _startState: number = 598;
		this.enterRecursionRule(_localctx, 598, MySqlParser.RULE_expressionAtom, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6156;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 900, this._ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 6112;
				this.constant();
				}
				break;

			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6113;
				this.fullColumnName();
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6114;
				this.functionCall();
				}
				break;

			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6115;
				this.mysqlVariable();
				}
				break;

			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6116;
				this.unaryOperator();
				this.state = 6117;
				this.expressionAtom(9);
				}
				break;

			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6119;
				this.match(MySqlParser.BINARY);
				this.state = 6120;
				this.expressionAtom(8);
				}
				break;

			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6121;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6122;
				this.expression(0);
				this.state = 6127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MySqlParser.COMMA) {
					{
					{
					this.state = 6123;
					this.match(MySqlParser.COMMA);
					this.state = 6124;
					this.expression(0);
					}
					}
					this.state = 6129;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6130;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6132;
				this.match(MySqlParser.ROW);
				this.state = 6133;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6134;
				this.expression(0);
				this.state = 6137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6135;
					this.match(MySqlParser.COMMA);
					this.state = 6136;
					this.expression(0);
					}
					}
					this.state = 6139;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MySqlParser.COMMA);
				this.state = 6141;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6143;
				this.match(MySqlParser.EXISTS);
				this.state = 6144;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6145;
				this.selectStatement();
				this.state = 6146;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6148;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6149;
				this.selectStatement();
				this.state = 6150;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;

			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 6152;
				this.match(MySqlParser.INTERVAL);
				this.state = 6153;
				this.expression(0);
				this.state = 6154;
				this.intervalType();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6171;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 902, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 6169;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 901, this._ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						(_localctx as BitExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 6158;
						if (!(this.precpred(this._ctx, 2))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 2)");
						}
						this.state = 6159;
						this.bitOperator();
						this.state = 6160;
						(_localctx as BitExpressionAtomContext)._right = this.expressionAtom(3);
						}
						break;

					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						(_localctx as MathExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 6162;
						if (!(this.precpred(this._ctx, 1))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
						}
						this.state = 6163;
						this.mathOperator();
						this.state = 6164;
						(_localctx as MathExpressionAtomContext)._right = this.expressionAtom(2);
						}
						break;

					case 3:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 6166;
						if (!(this.precpred(this._ctx, 11))) {
							throw new FailedPredicateException(this, "this.precpred(this._ctx, 11)");
						}
						this.state = 6167;
						this.match(MySqlParser.COLLATE);
						this.state = 6168;
						this.collationName();
						}
						break;
					}
					}
				}
				this.state = 6173;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 902, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unaryOperator(): UnaryOperatorContext {
		let _localctx: UnaryOperatorContext = new UnaryOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, MySqlParser.RULE_unaryOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6174;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.NOT || ((((_la - 960)) & ~0x1F) === 0 && ((1 << (_la - 960)) & ((1 << (MySqlParser.PLUS - 960)) | (1 << (MySqlParser.MINUS - 960)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 960)) | (1 << (MySqlParser.BIT_NOT_OP - 960)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let _localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, MySqlParser.RULE_comparisonOperator);
		try {
			this.state = 6190;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 903, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6176;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6177;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6178;
				this.match(MySqlParser.LESS_SYMBOL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6179;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 6180;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6181;
				this.match(MySqlParser.GREATER_SYMBOL);
				this.state = 6182;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6183;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 6184;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6185;
				this.match(MySqlParser.EXCLAMATION_SYMBOL);
				this.state = 6186;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6187;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 6188;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 6189;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logicalOperator(): LogicalOperatorContext {
		let _localctx: LogicalOperatorContext = new LogicalOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, MySqlParser.RULE_logicalOperator);
		try {
			this.state = 6199;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.AND:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6192;
				this.match(MySqlParser.AND);
				}
				break;
			case MySqlParser.BIT_AND_OP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6193;
				this.match(MySqlParser.BIT_AND_OP);
				this.state = 6194;
				this.match(MySqlParser.BIT_AND_OP);
				}
				break;
			case MySqlParser.XOR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6195;
				this.match(MySqlParser.XOR);
				}
				break;
			case MySqlParser.OR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6196;
				this.match(MySqlParser.OR);
				}
				break;
			case MySqlParser.BIT_OR_OP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6197;
				this.match(MySqlParser.BIT_OR_OP);
				this.state = 6198;
				this.match(MySqlParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitOperator(): BitOperatorContext {
		let _localctx: BitOperatorContext = new BitOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, MySqlParser.RULE_bitOperator);
		try {
			this.state = 6208;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MySqlParser.LESS_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6201;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 6202;
				this.match(MySqlParser.LESS_SYMBOL);
				}
				break;
			case MySqlParser.GREATER_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6203;
				this.match(MySqlParser.GREATER_SYMBOL);
				this.state = 6204;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			case MySqlParser.BIT_AND_OP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6205;
				this.match(MySqlParser.BIT_AND_OP);
				}
				break;
			case MySqlParser.BIT_XOR_OP:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6206;
				this.match(MySqlParser.BIT_XOR_OP);
				}
				break;
			case MySqlParser.BIT_OR_OP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6207;
				this.match(MySqlParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mathOperator(): MathOperatorContext {
		let _localctx: MathOperatorContext = new MathOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, MySqlParser.RULE_mathOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6210;
			_la = this._input.LA(1);
			if (!(((((_la - 957)) & ~0x1F) === 0 && ((1 << (_la - 957)) & ((1 << (MySqlParser.STAR - 957)) | (1 << (MySqlParser.DIVIDE - 957)) | (1 << (MySqlParser.MODULE - 957)) | (1 << (MySqlParser.PLUS - 957)) | (1 << (MySqlParser.MINUSMINUS - 957)) | (1 << (MySqlParser.MINUS - 957)) | (1 << (MySqlParser.DIV - 957)) | (1 << (MySqlParser.MOD - 957)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetNameBase(): CharsetNameBaseContext {
		let _localctx: CharsetNameBaseContext = new CharsetNameBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, MySqlParser.RULE_charsetNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6212;
			_la = this._input.LA(1);
			if (!(((((_la - 591)) & ~0x1F) === 0 && ((1 << (_la - 591)) & ((1 << (MySqlParser.ARMSCII8 - 591)) | (1 << (MySqlParser.ASCII - 591)) | (1 << (MySqlParser.BIG5 - 591)) | (1 << (MySqlParser.CP1250 - 591)) | (1 << (MySqlParser.CP1251 - 591)) | (1 << (MySqlParser.CP1256 - 591)) | (1 << (MySqlParser.CP1257 - 591)) | (1 << (MySqlParser.CP850 - 591)) | (1 << (MySqlParser.CP852 - 591)) | (1 << (MySqlParser.CP866 - 591)) | (1 << (MySqlParser.CP932 - 591)) | (1 << (MySqlParser.DEC8 - 591)) | (1 << (MySqlParser.EUCJPMS - 591)) | (1 << (MySqlParser.EUCKR - 591)) | (1 << (MySqlParser.GB2312 - 591)) | (1 << (MySqlParser.GBK - 591)) | (1 << (MySqlParser.GEOSTD8 - 591)) | (1 << (MySqlParser.GREEK - 591)) | (1 << (MySqlParser.HEBREW - 591)) | (1 << (MySqlParser.HP8 - 591)) | (1 << (MySqlParser.KEYBCS2 - 591)) | (1 << (MySqlParser.KOI8R - 591)) | (1 << (MySqlParser.KOI8U - 591)) | (1 << (MySqlParser.LATIN1 - 591)) | (1 << (MySqlParser.LATIN2 - 591)) | (1 << (MySqlParser.LATIN5 - 591)) | (1 << (MySqlParser.LATIN7 - 591)) | (1 << (MySqlParser.MACCE - 591)) | (1 << (MySqlParser.MACROMAN - 591)) | (1 << (MySqlParser.SJIS - 591)) | (1 << (MySqlParser.SWE7 - 591)) | (1 << (MySqlParser.TIS620 - 591)))) !== 0) || ((((_la - 623)) & ~0x1F) === 0 && ((1 << (_la - 623)) & ((1 << (MySqlParser.UCS2 - 623)) | (1 << (MySqlParser.UJIS - 623)) | (1 << (MySqlParser.UTF16 - 623)) | (1 << (MySqlParser.UTF16LE - 623)) | (1 << (MySqlParser.UTF32 - 623)) | (1 << (MySqlParser.UTF8 - 623)) | (1 << (MySqlParser.UTF8MB3 - 623)) | (1 << (MySqlParser.UTF8MB4 - 623)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionLevelBase(): TransactionLevelBaseContext {
		let _localctx: TransactionLevelBaseContext = new TransactionLevelBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, MySqlParser.RULE_transactionLevelBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6214;
			_la = this._input.LA(1);
			if (!(((((_la - 643)) & ~0x1F) === 0 && ((1 << (_la - 643)) & ((1 << (MySqlParser.REPEATABLE - 643)) | (1 << (MySqlParser.COMMITTED - 643)) | (1 << (MySqlParser.UNCOMMITTED - 643)) | (1 << (MySqlParser.SERIALIZABLE - 643)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegesBase(): PrivilegesBaseContext {
		let _localctx: PrivilegesBaseContext = new PrivilegesBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, MySqlParser.RULE_privilegesBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6216;
			_la = this._input.LA(1);
			if (!(((((_la - 581)) & ~0x1F) === 0 && ((1 << (_la - 581)) & ((1 << (MySqlParser.TABLES - 581)) | (1 << (MySqlParser.ROUTINE - 581)) | (1 << (MySqlParser.EXECUTE - 581)) | (1 << (MySqlParser.FILE - 581)) | (1 << (MySqlParser.PROCESS - 581)) | (1 << (MySqlParser.RELOAD - 581)) | (1 << (MySqlParser.SHUTDOWN - 581)) | (1 << (MySqlParser.SUPER - 581)) | (1 << (MySqlParser.PRIVILEGES - 581)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalTypeBase(): IntervalTypeBaseContext {
		let _localctx: IntervalTypeBaseContext = new IntervalTypeBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, MySqlParser.RULE_intervalTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6218;
			_la = this._input.LA(1);
			if (!(((((_la - 573)) & ~0x1F) === 0 && ((1 << (_la - 573)) & ((1 << (MySqlParser.QUARTER - 573)) | (1 << (MySqlParser.MONTH - 573)) | (1 << (MySqlParser.DAY - 573)) | (1 << (MySqlParser.HOUR - 573)) | (1 << (MySqlParser.MINUTE - 573)) | (1 << (MySqlParser.WEEK - 573)) | (1 << (MySqlParser.SECOND - 573)) | (1 << (MySqlParser.MICROSECOND - 573)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataTypeBase(): DataTypeBaseContext {
		let _localctx: DataTypeBaseContext = new DataTypeBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, MySqlParser.RULE_dataTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6220;
			_la = this._input.LA(1);
			if (!(((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.DATETIME - 185)) | (1 << (MySqlParser.YEAR - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.ENUM - 185)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keywordsCanBeId(): KeywordsCanBeIdContext {
		let _localctx: KeywordsCanBeIdContext = new KeywordsCanBeIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, MySqlParser.RULE_keywordsCanBeId);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6222;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.SERIAL || ((((_la - 253)) & ~0x1F) === 0 && ((1 << (_la - 253)) & ((1 << (MySqlParser.ACCOUNT - 253)) | (1 << (MySqlParser.ACTION - 253)) | (1 << (MySqlParser.AFTER - 253)) | (1 << (MySqlParser.AGGREGATE - 253)) | (1 << (MySqlParser.ALGORITHM - 253)) | (1 << (MySqlParser.ANY - 253)) | (1 << (MySqlParser.AT - 253)) | (1 << (MySqlParser.AUTHORS - 253)) | (1 << (MySqlParser.AUTOCOMMIT - 253)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 253)) | (1 << (MySqlParser.AUTO_INCREMENT - 253)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 253)) | (1 << (MySqlParser.BEGIN - 253)) | (1 << (MySqlParser.BINLOG - 253)) | (1 << (MySqlParser.BIT - 253)) | (1 << (MySqlParser.BLOCK - 253)) | (1 << (MySqlParser.BOOL - 253)) | (1 << (MySqlParser.BOOLEAN - 253)) | (1 << (MySqlParser.BTREE - 253)) | (1 << (MySqlParser.CACHE - 253)) | (1 << (MySqlParser.CASCADED - 253)) | (1 << (MySqlParser.CHAIN - 253)) | (1 << (MySqlParser.CHANGED - 253)) | (1 << (MySqlParser.CHANNEL - 253)) | (1 << (MySqlParser.CHECKSUM - 253)) | (1 << (MySqlParser.PAGE_CHECKSUM - 253)) | (1 << (MySqlParser.CIPHER - 253)) | (1 << (MySqlParser.CLASS_ORIGIN - 253)) | (1 << (MySqlParser.CLIENT - 253)) | (1 << (MySqlParser.CLOSE - 253)) | (1 << (MySqlParser.COALESCE - 253)) | (1 << (MySqlParser.CODE - 253)))) !== 0) || ((((_la - 285)) & ~0x1F) === 0 && ((1 << (_la - 285)) & ((1 << (MySqlParser.COLUMNS - 285)) | (1 << (MySqlParser.COLUMN_FORMAT - 285)) | (1 << (MySqlParser.COLUMN_NAME - 285)) | (1 << (MySqlParser.COMMENT - 285)) | (1 << (MySqlParser.COMMIT - 285)) | (1 << (MySqlParser.COMPACT - 285)) | (1 << (MySqlParser.COMPLETION - 285)) | (1 << (MySqlParser.COMPRESSED - 285)) | (1 << (MySqlParser.COMPRESSION - 285)) | (1 << (MySqlParser.CONCURRENT - 285)) | (1 << (MySqlParser.CONNECTION - 285)) | (1 << (MySqlParser.CONSISTENT - 285)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 285)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 285)) | (1 << (MySqlParser.CONSTRAINT_NAME - 285)) | (1 << (MySqlParser.CONTAINS - 285)) | (1 << (MySqlParser.CONTEXT - 285)) | (1 << (MySqlParser.CONTRIBUTORS - 285)) | (1 << (MySqlParser.COPY - 285)) | (1 << (MySqlParser.CPU - 285)) | (1 << (MySqlParser.DATA - 285)) | (1 << (MySqlParser.DATAFILE - 285)) | (1 << (MySqlParser.DEALLOCATE - 285)) | (1 << (MySqlParser.DEFAULT_AUTH - 285)) | (1 << (MySqlParser.DEFINER - 285)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 285)) | (1 << (MySqlParser.DES_KEY_FILE - 285)) | (1 << (MySqlParser.DIRECTORY - 285)) | (1 << (MySqlParser.DISABLE - 285)) | (1 << (MySqlParser.DISCARD - 285)) | (1 << (MySqlParser.DISK - 285)) | (1 << (MySqlParser.DO - 285)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (MySqlParser.DUMPFILE - 317)) | (1 << (MySqlParser.DUPLICATE - 317)) | (1 << (MySqlParser.DYNAMIC - 317)) | (1 << (MySqlParser.ENABLE - 317)) | (1 << (MySqlParser.ENCRYPTION - 317)) | (1 << (MySqlParser.END - 317)) | (1 << (MySqlParser.ENDS - 317)) | (1 << (MySqlParser.ENGINE - 317)) | (1 << (MySqlParser.ENGINES - 317)) | (1 << (MySqlParser.ERROR - 317)) | (1 << (MySqlParser.ERRORS - 317)) | (1 << (MySqlParser.ESCAPE - 317)) | (1 << (MySqlParser.EVEN - 317)) | (1 << (MySqlParser.EVENT - 317)) | (1 << (MySqlParser.EVENTS - 317)) | (1 << (MySqlParser.EVERY - 317)) | (1 << (MySqlParser.EXCHANGE - 317)) | (1 << (MySqlParser.EXCLUSIVE - 317)) | (1 << (MySqlParser.EXPIRE - 317)) | (1 << (MySqlParser.EXPORT - 317)) | (1 << (MySqlParser.EXTENDED - 317)) | (1 << (MySqlParser.EXTENT_SIZE - 317)) | (1 << (MySqlParser.FAST - 317)) | (1 << (MySqlParser.FAULTS - 317)) | (1 << (MySqlParser.FIELDS - 317)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 317)) | (1 << (MySqlParser.FILTER - 317)) | (1 << (MySqlParser.FIRST - 317)) | (1 << (MySqlParser.FIXED - 317)) | (1 << (MySqlParser.FLUSH - 317)) | (1 << (MySqlParser.FOLLOWS - 317)) | (1 << (MySqlParser.FOUND - 317)))) !== 0) || ((((_la - 349)) & ~0x1F) === 0 && ((1 << (_la - 349)) & ((1 << (MySqlParser.FULL - 349)) | (1 << (MySqlParser.FUNCTION - 349)) | (1 << (MySqlParser.GENERAL - 349)) | (1 << (MySqlParser.GLOBAL - 349)) | (1 << (MySqlParser.GRANTS - 349)) | (1 << (MySqlParser.GROUP_REPLICATION - 349)) | (1 << (MySqlParser.HANDLER - 349)) | (1 << (MySqlParser.HASH - 349)) | (1 << (MySqlParser.HELP - 349)) | (1 << (MySqlParser.HOST - 349)) | (1 << (MySqlParser.HOSTS - 349)) | (1 << (MySqlParser.IDENTIFIED - 349)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 349)) | (1 << (MySqlParser.IMPORT - 349)) | (1 << (MySqlParser.INDEXES - 349)) | (1 << (MySqlParser.INITIAL_SIZE - 349)) | (1 << (MySqlParser.INPLACE - 349)) | (1 << (MySqlParser.INSERT_METHOD - 349)) | (1 << (MySqlParser.INSTALL - 349)) | (1 << (MySqlParser.INSTANCE - 349)) | (1 << (MySqlParser.INVOKER - 349)) | (1 << (MySqlParser.IO - 349)) | (1 << (MySqlParser.IO_THREAD - 349)) | (1 << (MySqlParser.IPC - 349)) | (1 << (MySqlParser.ISOLATION - 349)) | (1 << (MySqlParser.ISSUER - 349)) | (1 << (MySqlParser.JSON - 349)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 349)) | (1 << (MySqlParser.LANGUAGE - 349)) | (1 << (MySqlParser.LAST - 349)) | (1 << (MySqlParser.LEAVES - 349)))) !== 0) || ((((_la - 381)) & ~0x1F) === 0 && ((1 << (_la - 381)) & ((1 << (MySqlParser.LESS - 381)) | (1 << (MySqlParser.LEVEL - 381)) | (1 << (MySqlParser.LIST - 381)) | (1 << (MySqlParser.LOCAL - 381)) | (1 << (MySqlParser.LOGFILE - 381)) | (1 << (MySqlParser.LOGS - 381)) | (1 << (MySqlParser.MASTER - 381)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 381)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 381)) | (1 << (MySqlParser.MASTER_DELAY - 381)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 381)) | (1 << (MySqlParser.MASTER_HOST - 381)) | (1 << (MySqlParser.MASTER_LOG_FILE - 381)) | (1 << (MySqlParser.MASTER_LOG_POS - 381)) | (1 << (MySqlParser.MASTER_PASSWORD - 381)) | (1 << (MySqlParser.MASTER_PORT - 381)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 381)) | (1 << (MySqlParser.MASTER_SSL - 381)) | (1 << (MySqlParser.MASTER_SSL_CA - 381)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 381)) | (1 << (MySqlParser.MASTER_SSL_CERT - 381)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 381)) | (1 << (MySqlParser.MASTER_SSL_CRL - 381)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 381)) | (1 << (MySqlParser.MASTER_SSL_KEY - 381)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 381)) | (1 << (MySqlParser.MASTER_USER - 381)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 381)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 381)) | (1 << (MySqlParser.MAX_ROWS - 381)) | (1 << (MySqlParser.MAX_SIZE - 381)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 381)))) !== 0) || ((((_la - 413)) & ~0x1F) === 0 && ((1 << (_la - 413)) & ((1 << (MySqlParser.MAX_USER_CONNECTIONS - 413)) | (1 << (MySqlParser.MEDIUM - 413)) | (1 << (MySqlParser.MERGE - 413)) | (1 << (MySqlParser.MESSAGE_TEXT - 413)) | (1 << (MySqlParser.MID - 413)) | (1 << (MySqlParser.MIGRATE - 413)) | (1 << (MySqlParser.MIN_ROWS - 413)) | (1 << (MySqlParser.MODE - 413)) | (1 << (MySqlParser.MODIFY - 413)) | (1 << (MySqlParser.MUTEX - 413)) | (1 << (MySqlParser.MYSQL - 413)) | (1 << (MySqlParser.MYSQL_ERRNO - 413)) | (1 << (MySqlParser.NAME - 413)) | (1 << (MySqlParser.NAMES - 413)) | (1 << (MySqlParser.NCHAR - 413)) | (1 << (MySqlParser.NEVER - 413)) | (1 << (MySqlParser.NEXT - 413)) | (1 << (MySqlParser.NO - 413)) | (1 << (MySqlParser.NODEGROUP - 413)) | (1 << (MySqlParser.NONE - 413)) | (1 << (MySqlParser.OFFLINE - 413)) | (1 << (MySqlParser.OFFSET - 413)) | (1 << (MySqlParser.OJ - 413)) | (1 << (MySqlParser.OLD_PASSWORD - 413)) | (1 << (MySqlParser.ONE - 413)) | (1 << (MySqlParser.ONLINE - 413)) | (1 << (MySqlParser.ONLY - 413)) | (1 << (MySqlParser.OPEN - 413)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 413)) | (1 << (MySqlParser.OPTIONS - 413)) | (1 << (MySqlParser.OWNER - 413)) | (1 << (MySqlParser.PACK_KEYS - 413)))) !== 0) || ((((_la - 445)) & ~0x1F) === 0 && ((1 << (_la - 445)) & ((1 << (MySqlParser.PAGE - 445)) | (1 << (MySqlParser.PARSER - 445)) | (1 << (MySqlParser.PARTIAL - 445)) | (1 << (MySqlParser.PARTITIONING - 445)) | (1 << (MySqlParser.PARTITIONS - 445)) | (1 << (MySqlParser.PASSWORD - 445)) | (1 << (MySqlParser.PHASE - 445)) | (1 << (MySqlParser.PLUGIN - 445)) | (1 << (MySqlParser.PLUGIN_DIR - 445)) | (1 << (MySqlParser.PLUGINS - 445)) | (1 << (MySqlParser.PORT - 445)) | (1 << (MySqlParser.PRECEDES - 445)) | (1 << (MySqlParser.PREPARE - 445)) | (1 << (MySqlParser.PRESERVE - 445)) | (1 << (MySqlParser.PREV - 445)) | (1 << (MySqlParser.PROCESSLIST - 445)) | (1 << (MySqlParser.PROFILE - 445)) | (1 << (MySqlParser.PROFILES - 445)) | (1 << (MySqlParser.PROXY - 445)) | (1 << (MySqlParser.QUERY - 445)) | (1 << (MySqlParser.QUICK - 445)) | (1 << (MySqlParser.REBUILD - 445)) | (1 << (MySqlParser.RECOVER - 445)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 445)) | (1 << (MySqlParser.REDUNDANT - 445)) | (1 << (MySqlParser.RELAY - 445)) | (1 << (MySqlParser.RELAY_LOG_FILE - 445)) | (1 << (MySqlParser.RELAY_LOG_POS - 445)) | (1 << (MySqlParser.RELAYLOG - 445)) | (1 << (MySqlParser.REMOVE - 445)) | (1 << (MySqlParser.REORGANIZE - 445)) | (1 << (MySqlParser.REPAIR - 445)))) !== 0) || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & ((1 << (MySqlParser.REPLICATE_DO_DB - 477)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 477)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 477)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 477)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 477)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 477)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 477)) | (1 << (MySqlParser.REPLICATION - 477)) | (1 << (MySqlParser.RESET - 477)) | (1 << (MySqlParser.RESUME - 477)) | (1 << (MySqlParser.RETURNS - 477)) | (1 << (MySqlParser.ROLLBACK - 477)) | (1 << (MySqlParser.ROLLUP - 477)) | (1 << (MySqlParser.ROTATE - 477)) | (1 << (MySqlParser.ROW - 477)) | (1 << (MySqlParser.ROWS - 477)) | (1 << (MySqlParser.ROW_FORMAT - 477)) | (1 << (MySqlParser.SAVEPOINT - 477)) | (1 << (MySqlParser.SCHEDULE - 477)) | (1 << (MySqlParser.SECURITY - 477)) | (1 << (MySqlParser.SERVER - 477)) | (1 << (MySqlParser.SESSION - 477)) | (1 << (MySqlParser.SHARE - 477)) | (1 << (MySqlParser.SHARED - 477)) | (1 << (MySqlParser.SIGNED - 477)) | (1 << (MySqlParser.SIMPLE - 477)) | (1 << (MySqlParser.SLAVE - 477)) | (1 << (MySqlParser.SLOW - 477)) | (1 << (MySqlParser.SNAPSHOT - 477)) | (1 << (MySqlParser.SOCKET - 477)) | (1 << (MySqlParser.SOME - 477)) | (1 << (MySqlParser.SONAME - 477)))) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & ((1 << (MySqlParser.SOUNDS - 509)) | (1 << (MySqlParser.SOURCE - 509)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 509)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 509)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 509)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 509)) | (1 << (MySqlParser.SQL_CACHE - 509)) | (1 << (MySqlParser.SQL_NO_CACHE - 509)) | (1 << (MySqlParser.SQL_THREAD - 509)) | (1 << (MySqlParser.START - 509)) | (1 << (MySqlParser.STARTS - 509)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 509)) | (1 << (MySqlParser.STATS_PERSISTENT - 509)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 509)) | (1 << (MySqlParser.STATUS - 509)) | (1 << (MySqlParser.STOP - 509)) | (1 << (MySqlParser.STORAGE - 509)) | (1 << (MySqlParser.STRING - 509)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 509)) | (1 << (MySqlParser.SUBJECT - 509)) | (1 << (MySqlParser.SUBPARTITION - 509)) | (1 << (MySqlParser.SUBPARTITIONS - 509)) | (1 << (MySqlParser.SUSPEND - 509)) | (1 << (MySqlParser.SWAPS - 509)) | (1 << (MySqlParser.SWITCHES - 509)) | (1 << (MySqlParser.TABLE_NAME - 509)) | (1 << (MySqlParser.TABLESPACE - 509)) | (1 << (MySqlParser.TEMPORARY - 509)) | (1 << (MySqlParser.TEMPTABLE - 509)) | (1 << (MySqlParser.THAN - 509)) | (1 << (MySqlParser.TRADITIONAL - 509)))) !== 0) || ((((_la - 541)) & ~0x1F) === 0 && ((1 << (_la - 541)) & ((1 << (MySqlParser.TRANSACTION - 541)) | (1 << (MySqlParser.TRIGGERS - 541)) | (1 << (MySqlParser.TRUNCATE - 541)) | (1 << (MySqlParser.UNDEFINED - 541)) | (1 << (MySqlParser.UNDOFILE - 541)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 541)) | (1 << (MySqlParser.UNINSTALL - 541)) | (1 << (MySqlParser.UNKNOWN - 541)) | (1 << (MySqlParser.UNTIL - 541)) | (1 << (MySqlParser.UPGRADE - 541)) | (1 << (MySqlParser.USER - 541)) | (1 << (MySqlParser.USE_FRM - 541)) | (1 << (MySqlParser.USER_RESOURCES - 541)) | (1 << (MySqlParser.VALIDATION - 541)) | (1 << (MySqlParser.VALUE - 541)) | (1 << (MySqlParser.VARIABLES - 541)) | (1 << (MySqlParser.VIEW - 541)) | (1 << (MySqlParser.WAIT - 541)) | (1 << (MySqlParser.WARNINGS - 541)) | (1 << (MySqlParser.WITHOUT - 541)) | (1 << (MySqlParser.WORK - 541)) | (1 << (MySqlParser.WRAPPER - 541)) | (1 << (MySqlParser.X509 - 541)) | (1 << (MySqlParser.XA - 541)) | (1 << (MySqlParser.XML - 541)) | (1 << (MySqlParser.INTERNAL - 541)))) !== 0) || _la === MySqlParser.MEMORY || _la === MySqlParser.CATALOG_NAME || _la === MySqlParser.SCHEMA_NAME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionNameBase(): FunctionNameBaseContext {
		let _localctx: FunctionNameBaseContext = new FunctionNameBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, MySqlParser.RULE_functionNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6224;
			_la = this._input.LA(1);
			if (!(_la === MySqlParser.DATABASE || _la === MySqlParser.LEFT || _la === MySqlParser.RIGHT || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & ((1 << (MySqlParser.DATE - 185)) | (1 << (MySqlParser.TIME - 185)) | (1 << (MySqlParser.TIMESTAMP - 185)) | (1 << (MySqlParser.YEAR - 185)))) !== 0) || _la === MySqlParser.COUNT || _la === MySqlParser.POSITION || _la === MySqlParser.INVISIBLE || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (MySqlParser.VISIBLE - 559)) | (1 << (MySqlParser.QUARTER - 559)) | (1 << (MySqlParser.MONTH - 559)) | (1 << (MySqlParser.DAY - 559)) | (1 << (MySqlParser.HOUR - 559)) | (1 << (MySqlParser.MINUTE - 559)) | (1 << (MySqlParser.WEEK - 559)) | (1 << (MySqlParser.SECOND - 559)) | (1 << (MySqlParser.MICROSECOND - 559)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 559)))) !== 0) || ((((_la - 647)) & ~0x1F) === 0 && ((1 << (_la - 647)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 647)) | (1 << (MySqlParser.LINESTRING - 647)) | (1 << (MySqlParser.MULTILINESTRING - 647)) | (1 << (MySqlParser.MULTIPOINT - 647)) | (1 << (MySqlParser.MULTIPOLYGON - 647)) | (1 << (MySqlParser.POINT - 647)) | (1 << (MySqlParser.POLYGON - 647)) | (1 << (MySqlParser.ABS - 647)) | (1 << (MySqlParser.ACOS - 647)) | (1 << (MySqlParser.ADDDATE - 647)) | (1 << (MySqlParser.ADDTIME - 647)) | (1 << (MySqlParser.AES_DECRYPT - 647)) | (1 << (MySqlParser.AES_ENCRYPT - 647)) | (1 << (MySqlParser.AREA - 647)) | (1 << (MySqlParser.ASBINARY - 647)) | (1 << (MySqlParser.ASIN - 647)) | (1 << (MySqlParser.ASTEXT - 647)) | (1 << (MySqlParser.ASWKB - 647)) | (1 << (MySqlParser.ASWKT - 647)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 647)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 647)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 647)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 647)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 647)) | (1 << (MySqlParser.ATAN - 647)) | (1 << (MySqlParser.ATAN2 - 647)) | (1 << (MySqlParser.BENCHMARK - 647)) | (1 << (MySqlParser.BIN - 647)) | (1 << (MySqlParser.BIT_COUNT - 647)) | (1 << (MySqlParser.BIT_LENGTH - 647)))) !== 0) || ((((_la - 679)) & ~0x1F) === 0 && ((1 << (_la - 679)) & ((1 << (MySqlParser.BUFFER - 679)) | (1 << (MySqlParser.CEIL - 679)) | (1 << (MySqlParser.CEILING - 679)) | (1 << (MySqlParser.CENTROID - 679)) | (1 << (MySqlParser.CHARACTER_LENGTH - 679)) | (1 << (MySqlParser.CHARSET - 679)) | (1 << (MySqlParser.CHAR_LENGTH - 679)) | (1 << (MySqlParser.COERCIBILITY - 679)) | (1 << (MySqlParser.COLLATION - 679)) | (1 << (MySqlParser.COMPRESS - 679)) | (1 << (MySqlParser.CONCAT - 679)) | (1 << (MySqlParser.CONCAT_WS - 679)) | (1 << (MySqlParser.CONNECTION_ID - 679)) | (1 << (MySqlParser.CONV - 679)) | (1 << (MySqlParser.CONVERT_TZ - 679)) | (1 << (MySqlParser.COS - 679)) | (1 << (MySqlParser.COT - 679)) | (1 << (MySqlParser.CRC32 - 679)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 679)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 679)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 679)) | (1 << (MySqlParser.CREATE_DIGEST - 679)) | (1 << (MySqlParser.CROSSES - 679)) | (1 << (MySqlParser.DATEDIFF - 679)) | (1 << (MySqlParser.DATE_FORMAT - 679)) | (1 << (MySqlParser.DAYNAME - 679)) | (1 << (MySqlParser.DAYOFMONTH - 679)) | (1 << (MySqlParser.DAYOFWEEK - 679)) | (1 << (MySqlParser.DAYOFYEAR - 679)) | (1 << (MySqlParser.DECODE - 679)) | (1 << (MySqlParser.DEGREES - 679)))) !== 0) || ((((_la - 711)) & ~0x1F) === 0 && ((1 << (_la - 711)) & ((1 << (MySqlParser.DES_DECRYPT - 711)) | (1 << (MySqlParser.DES_ENCRYPT - 711)) | (1 << (MySqlParser.DIMENSION - 711)) | (1 << (MySqlParser.DISJOINT - 711)) | (1 << (MySqlParser.ELT - 711)) | (1 << (MySqlParser.ENCODE - 711)) | (1 << (MySqlParser.ENCRYPT - 711)) | (1 << (MySqlParser.ENDPOINT - 711)) | (1 << (MySqlParser.ENVELOPE - 711)) | (1 << (MySqlParser.EQUALS - 711)) | (1 << (MySqlParser.EXP - 711)) | (1 << (MySqlParser.EXPORT_SET - 711)) | (1 << (MySqlParser.EXTERIORRING - 711)) | (1 << (MySqlParser.EXTRACTVALUE - 711)) | (1 << (MySqlParser.FIELD - 711)) | (1 << (MySqlParser.FIND_IN_SET - 711)) | (1 << (MySqlParser.FLOOR - 711)) | (1 << (MySqlParser.FORMAT - 711)) | (1 << (MySqlParser.FOUND_ROWS - 711)) | (1 << (MySqlParser.FROM_BASE64 - 711)) | (1 << (MySqlParser.FROM_DAYS - 711)) | (1 << (MySqlParser.FROM_UNIXTIME - 711)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 711)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 711)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 711)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 711)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 711)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 711)) | (1 << (MySqlParser.GEOMETRYN - 711)) | (1 << (MySqlParser.GEOMETRYTYPE - 711)) | (1 << (MySqlParser.GEOMFROMTEXT - 711)) | (1 << (MySqlParser.GEOMFROMWKB - 711)))) !== 0) || ((((_la - 743)) & ~0x1F) === 0 && ((1 << (_la - 743)) & ((1 << (MySqlParser.GET_FORMAT - 743)) | (1 << (MySqlParser.GET_LOCK - 743)) | (1 << (MySqlParser.GLENGTH - 743)) | (1 << (MySqlParser.GREATEST - 743)) | (1 << (MySqlParser.GTID_SUBSET - 743)) | (1 << (MySqlParser.GTID_SUBTRACT - 743)) | (1 << (MySqlParser.HEX - 743)) | (1 << (MySqlParser.IFNULL - 743)) | (1 << (MySqlParser.INET6_ATON - 743)) | (1 << (MySqlParser.INET6_NTOA - 743)) | (1 << (MySqlParser.INET_ATON - 743)) | (1 << (MySqlParser.INET_NTOA - 743)) | (1 << (MySqlParser.INSTR - 743)) | (1 << (MySqlParser.INTERIORRINGN - 743)) | (1 << (MySqlParser.INTERSECTS - 743)) | (1 << (MySqlParser.ISCLOSED - 743)) | (1 << (MySqlParser.ISEMPTY - 743)) | (1 << (MySqlParser.ISNULL - 743)) | (1 << (MySqlParser.ISSIMPLE - 743)) | (1 << (MySqlParser.IS_FREE_LOCK - 743)) | (1 << (MySqlParser.IS_IPV4 - 743)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 743)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 743)) | (1 << (MySqlParser.IS_IPV6 - 743)) | (1 << (MySqlParser.IS_USED_LOCK - 743)) | (1 << (MySqlParser.LAST_INSERT_ID - 743)) | (1 << (MySqlParser.LCASE - 743)) | (1 << (MySqlParser.LEAST - 743)) | (1 << (MySqlParser.LENGTH - 743)) | (1 << (MySqlParser.LINEFROMTEXT - 743)) | (1 << (MySqlParser.LINEFROMWKB - 743)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 743)))) !== 0) || ((((_la - 775)) & ~0x1F) === 0 && ((1 << (_la - 775)) & ((1 << (MySqlParser.LINESTRINGFROMWKB - 775)) | (1 << (MySqlParser.LN - 775)) | (1 << (MySqlParser.LOAD_FILE - 775)) | (1 << (MySqlParser.LOCATE - 775)) | (1 << (MySqlParser.LOG - 775)) | (1 << (MySqlParser.LOG10 - 775)) | (1 << (MySqlParser.LOG2 - 775)) | (1 << (MySqlParser.LOWER - 775)) | (1 << (MySqlParser.LPAD - 775)) | (1 << (MySqlParser.LTRIM - 775)) | (1 << (MySqlParser.MAKEDATE - 775)) | (1 << (MySqlParser.MAKETIME - 775)) | (1 << (MySqlParser.MAKE_SET - 775)) | (1 << (MySqlParser.MASTER_POS_WAIT - 775)) | (1 << (MySqlParser.MBRCONTAINS - 775)) | (1 << (MySqlParser.MBRDISJOINT - 775)) | (1 << (MySqlParser.MBREQUAL - 775)) | (1 << (MySqlParser.MBRINTERSECTS - 775)) | (1 << (MySqlParser.MBROVERLAPS - 775)) | (1 << (MySqlParser.MBRTOUCHES - 775)) | (1 << (MySqlParser.MBRWITHIN - 775)) | (1 << (MySqlParser.MD5 - 775)) | (1 << (MySqlParser.MLINEFROMTEXT - 775)) | (1 << (MySqlParser.MLINEFROMWKB - 775)) | (1 << (MySqlParser.MONTHNAME - 775)) | (1 << (MySqlParser.MPOINTFROMTEXT - 775)) | (1 << (MySqlParser.MPOINTFROMWKB - 775)) | (1 << (MySqlParser.MPOLYFROMTEXT - 775)) | (1 << (MySqlParser.MPOLYFROMWKB - 775)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 775)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 775)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 775)))) !== 0) || ((((_la - 807)) & ~0x1F) === 0 && ((1 << (_la - 807)) & ((1 << (MySqlParser.MULTIPOINTFROMWKB - 807)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 807)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 807)) | (1 << (MySqlParser.NAME_CONST - 807)) | (1 << (MySqlParser.NULLIF - 807)) | (1 << (MySqlParser.NUMGEOMETRIES - 807)) | (1 << (MySqlParser.NUMINTERIORRINGS - 807)) | (1 << (MySqlParser.NUMPOINTS - 807)) | (1 << (MySqlParser.OCT - 807)) | (1 << (MySqlParser.OCTET_LENGTH - 807)) | (1 << (MySqlParser.ORD - 807)) | (1 << (MySqlParser.OVERLAPS - 807)) | (1 << (MySqlParser.PERIOD_ADD - 807)) | (1 << (MySqlParser.PERIOD_DIFF - 807)) | (1 << (MySqlParser.PI - 807)) | (1 << (MySqlParser.POINTFROMTEXT - 807)) | (1 << (MySqlParser.POINTFROMWKB - 807)) | (1 << (MySqlParser.POINTN - 807)) | (1 << (MySqlParser.POLYFROMTEXT - 807)) | (1 << (MySqlParser.POLYFROMWKB - 807)) | (1 << (MySqlParser.POLYGONFROMTEXT - 807)) | (1 << (MySqlParser.POLYGONFROMWKB - 807)) | (1 << (MySqlParser.POW - 807)) | (1 << (MySqlParser.POWER - 807)) | (1 << (MySqlParser.QUOTE - 807)) | (1 << (MySqlParser.RADIANS - 807)) | (1 << (MySqlParser.RAND - 807)) | (1 << (MySqlParser.RANDOM_BYTES - 807)) | (1 << (MySqlParser.RELEASE_LOCK - 807)) | (1 << (MySqlParser.REVERSE - 807)) | (1 << (MySqlParser.ROUND - 807)) | (1 << (MySqlParser.ROW_COUNT - 807)))) !== 0) || ((((_la - 839)) & ~0x1F) === 0 && ((1 << (_la - 839)) & ((1 << (MySqlParser.RPAD - 839)) | (1 << (MySqlParser.RTRIM - 839)) | (1 << (MySqlParser.SEC_TO_TIME - 839)) | (1 << (MySqlParser.SESSION_USER - 839)) | (1 << (MySqlParser.SHA - 839)) | (1 << (MySqlParser.SHA1 - 839)) | (1 << (MySqlParser.SHA2 - 839)) | (1 << (MySqlParser.SIGN - 839)) | (1 << (MySqlParser.SIN - 839)) | (1 << (MySqlParser.SLEEP - 839)) | (1 << (MySqlParser.SOUNDEX - 839)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 839)) | (1 << (MySqlParser.SQRT - 839)) | (1 << (MySqlParser.SRID - 839)) | (1 << (MySqlParser.STARTPOINT - 839)) | (1 << (MySqlParser.STRCMP - 839)) | (1 << (MySqlParser.STR_TO_DATE - 839)) | (1 << (MySqlParser.ST_AREA - 839)) | (1 << (MySqlParser.ST_ASBINARY - 839)) | (1 << (MySqlParser.ST_ASTEXT - 839)) | (1 << (MySqlParser.ST_ASWKB - 839)) | (1 << (MySqlParser.ST_ASWKT - 839)) | (1 << (MySqlParser.ST_BUFFER - 839)) | (1 << (MySqlParser.ST_CENTROID - 839)) | (1 << (MySqlParser.ST_CONTAINS - 839)) | (1 << (MySqlParser.ST_CROSSES - 839)) | (1 << (MySqlParser.ST_DIFFERENCE - 839)) | (1 << (MySqlParser.ST_DIMENSION - 839)) | (1 << (MySqlParser.ST_DISJOINT - 839)) | (1 << (MySqlParser.ST_DISTANCE - 839)) | (1 << (MySqlParser.ST_ENDPOINT - 839)))) !== 0) || ((((_la - 871)) & ~0x1F) === 0 && ((1 << (_la - 871)) & ((1 << (MySqlParser.ST_ENVELOPE - 871)) | (1 << (MySqlParser.ST_EQUALS - 871)) | (1 << (MySqlParser.ST_EXTERIORRING - 871)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 871)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 871)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 871)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 871)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 871)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 871)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 871)) | (1 << (MySqlParser.ST_GEOMETRYN - 871)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 871)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 871)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 871)) | (1 << (MySqlParser.ST_INTERIORRINGN - 871)) | (1 << (MySqlParser.ST_INTERSECTION - 871)) | (1 << (MySqlParser.ST_INTERSECTS - 871)) | (1 << (MySqlParser.ST_ISCLOSED - 871)) | (1 << (MySqlParser.ST_ISEMPTY - 871)) | (1 << (MySqlParser.ST_ISSIMPLE - 871)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 871)) | (1 << (MySqlParser.ST_LINEFROMWKB - 871)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 871)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 871)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 871)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 871)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 871)) | (1 << (MySqlParser.ST_NUMPOINTS - 871)) | (1 << (MySqlParser.ST_OVERLAPS - 871)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 871)) | (1 << (MySqlParser.ST_POINTFROMWKB - 871)) | (1 << (MySqlParser.ST_POINTN - 871)))) !== 0) || ((((_la - 903)) & ~0x1F) === 0 && ((1 << (_la - 903)) & ((1 << (MySqlParser.ST_POLYFROMTEXT - 903)) | (1 << (MySqlParser.ST_POLYFROMWKB - 903)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 903)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 903)) | (1 << (MySqlParser.ST_SRID - 903)) | (1 << (MySqlParser.ST_STARTPOINT - 903)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 903)) | (1 << (MySqlParser.ST_TOUCHES - 903)) | (1 << (MySqlParser.ST_UNION - 903)) | (1 << (MySqlParser.ST_WITHIN - 903)) | (1 << (MySqlParser.ST_X - 903)) | (1 << (MySqlParser.ST_Y - 903)) | (1 << (MySqlParser.SUBDATE - 903)) | (1 << (MySqlParser.SUBSTRING_INDEX - 903)) | (1 << (MySqlParser.SUBTIME - 903)) | (1 << (MySqlParser.SYSTEM_USER - 903)) | (1 << (MySqlParser.TAN - 903)) | (1 << (MySqlParser.TIMEDIFF - 903)) | (1 << (MySqlParser.TIMESTAMPADD - 903)) | (1 << (MySqlParser.TIMESTAMPDIFF - 903)) | (1 << (MySqlParser.TIME_FORMAT - 903)) | (1 << (MySqlParser.TIME_TO_SEC - 903)) | (1 << (MySqlParser.TOUCHES - 903)) | (1 << (MySqlParser.TO_BASE64 - 903)) | (1 << (MySqlParser.TO_DAYS - 903)) | (1 << (MySqlParser.TO_SECONDS - 903)) | (1 << (MySqlParser.UCASE - 903)) | (1 << (MySqlParser.UNCOMPRESS - 903)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 903)) | (1 << (MySqlParser.UNHEX - 903)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 903)) | (1 << (MySqlParser.UPDATEXML - 903)))) !== 0) || ((((_la - 935)) & ~0x1F) === 0 && ((1 << (_la - 935)) & ((1 << (MySqlParser.UPPER - 935)) | (1 << (MySqlParser.UUID - 935)) | (1 << (MySqlParser.UUID_SHORT - 935)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 935)) | (1 << (MySqlParser.VERSION - 935)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 935)) | (1 << (MySqlParser.WEEKDAY - 935)) | (1 << (MySqlParser.WEEKOFYEAR - 935)) | (1 << (MySqlParser.WEIGHT_STRING - 935)) | (1 << (MySqlParser.WITHIN - 935)) | (1 << (MySqlParser.YEARWEEK - 935)) | (1 << (MySqlParser.Y_FUNCTION - 935)) | (1 << (MySqlParser.X_FUNCTION - 935)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 297:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);

		case 298:
			return this.predicate_sempred(_localctx as PredicateContext, predIndex);

		case 299:
			return this.expressionAtom_sempred(_localctx as ExpressionAtomContext, predIndex);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}
	private predicate_sempred(_localctx: PredicateContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 7);

		case 2:
			return this.precpred(this._ctx, 5);

		case 3:
			return this.precpred(this._ctx, 4);

		case 4:
			return this.precpred(this._ctx, 2);

		case 5:
			return this.precpred(this._ctx, 9);

		case 6:
			return this.precpred(this._ctx, 8);

		case 7:
			return this.precpred(this._ctx, 6);

		case 8:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}
	private expressionAtom_sempred(_localctx: ExpressionAtomContext, predIndex: number): boolean {
		switch (predIndex) {
		case 9:
			return this.precpred(this._ctx, 2);

		case 10:
			return this.precpred(this._ctx, 1);

		case 11:
			return this.precpred(this._ctx, 11);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 12;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u03EC\u1855\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x03\x02\x05\x02\u0274" +
		"\n\x02\x03\x02\x05\x02\u0277\n\x02\x03\x02\x03\x02\x03\x03\x03\x03\x05" +
		"\x03\u027D\n\x03\x03\x03\x05\x03\u0280\n\x03\x03\x03\x07\x03\u0283\n\x03" +
		"\f\x03\x0E\x03\u0286\v\x03\x03\x03\x03\x03\x05\x03\u028A\n\x03\x03\x03" +
		"\x05\x03\u028D\n\x03\x03\x03\x05\x03\u0290\n\x03\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u0299\n\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\u02C0" +
		"\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x05\x07\u02CC\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x05\b\u02D7\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u02E8\n" +
		"\t\x03\n\x03\n\x03\n\x05\n\u02ED\n\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x05\v\u02F9\n\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u0314\n\f\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x05\r\u031B\n\r\x03\x0E\x03\x0E\x03\x0E\x05" +
		"\x0E\u0320\n\x0E\x03\x0E\x03\x0E\x07\x0E\u0324\n\x0E\f\x0E\x0E\x0E\u0327" +
		"\v\x0E\x03\x0F\x03\x0F\x05\x0F\u032B\n\x0F\x03\x0F\x03\x0F\x05\x0F\u032F" +
		"\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"\u0338\n\x0F\x03\x0F\x05\x0F\u033B\n\x0F\x03\x0F\x05\x0F\u033E\n\x0F\x03" +
		"\x0F\x03\x0F\x05\x0F\u0342\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10" +
		"\x05\x10\u0349\n\x10\x03\x10\x05\x10\u034C\n\x10\x03\x10\x03\x10\x03\x10" +
		"\x05\x10\u0351\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\u0357\n\x10" +
		"\f\x10\x0E\x10\u035A\v\x10\x03\x10\x03\x10\x05\x10\u035E\n\x10\x03\x10" +
		"\x03\x10\x03\x10\x05\x10\u0363\n\x10\x03\x10\x07\x10\u0366\n\x10\f\x10" +
		"\x0E\x10\u0369\v\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x05\x11\u0374\n\x11\x03\x11\x05\x11\u0377\n\x11\x03" +
		"\x11\x03\x11\x05\x11\u037B\n\x11\x03\x11\x05\x11\u037E\n\x11\x03\x11\x03" +
		"\x11\x05\x11\u0382\n\x11\x03\x11\x05\x11\u0385\n\x11\x03\x11\x03\x11\x05" +
		"\x11\u0389\n\x11\x03\x11\x05\x11\u038C\n\x11\x03\x11\x05\x11\u038F\n\x11" +
		"\x03\x11\x03\x11\x05\x11\u0393\n\x11\x03\x11\x05\x11\u0396\n\x11\x03\x11" +
		"\x03\x11\x05\x11\u039A\n\x11\x03\x11\x03\x11\x03\x12\x03\x12\x05\x12\u03A0" +
		"\n\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u03A6\n\x12\x03\x12\x03" +
		"\x12\x07\x12\u03AA\n\x12\f\x12\x0E\x12\u03AD\v\x12\x03\x12\x03\x12\x07" +
		"\x12\u03B1\n\x12\f\x12\x0E\x12\u03B4\v\x12\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x05\x13\u03BA\n\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u03C0" +
		"\n\x13\x03\x13\x03\x13\x07\x13\u03C4\n\x13\f\x13\x0E\x13\u03C7\v\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x07\x13\u03CD\n\x13\f\x13\x0E\x13\u03D0\v" +
		"\x13\x03\x13\x03\x13\x05\x13\u03D4\n\x13\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14" +
		"\u03E2\n\x14\f\x14\x0E\x14\u03E5\v\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x05\x15\u03EB\n\x15\x03\x15\x03\x15\x05\x15\u03EF\n\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u03F9\n\x15\x03" +
		"\x15\x03\x15\x05\x15\u03FD\n\x15\x03\x15\x03\x15\x05\x15\u0401\n\x15\x03" +
		"\x15\x03\x15\x05\x15\u0405\n\x15\x03\x15\x03\x15\x05\x15\u0409\n\x15\x03" +
		"\x15\x07\x15\u040C\n\x15\f\x15\x0E\x15\u040F\v\x15\x05\x15\u0411\n\x15" +
		"\x03\x15\x05\x15\u0414\n\x15\x03\x15\x05\x15\u0417\n\x15\x03\x15\x05\x15" +
		"\u041A\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u0420\n\x15\x03\x15" +
		"\x03\x15\x05\x15\u0424\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u042A" +
		"\n\x15\x03\x15\x07\x15\u042D\n\x15\f\x15\x0E\x15\u0430\v\x15\x05\x15\u0432" +
		"\n\x15\x03\x15\x05\x15\u0435\n\x15\x05\x15\u0437\n\x15\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u0442" +
		"\n\x16\x03\x16\x03\x16\x05\x16\u0446\n\x16\x03\x16\x05\x16\u0449\n\x16" +
		"\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x17\x05\x17\u0457\n\x17\x03\x17\x05\x17\u045A\n\x17" +
		"\x03\x17\x03\x17\x05\x17\u045E\n\x17\x03\x17\x05\x17\u0461\n\x17\x03\x17" +
		"\x03\x17\x05\x17\u0465\n\x17\x03\x17\x05\x17\u0468\n\x17\x03\x17\x03\x17" +
		"\x05\x17\u046C\n\x17\x03\x17\x05\x17\u046F\n\x17\x03\x17\x03\x17\x05\x17" +
		"\u0473\n\x17\x03\x17\x05\x17\u0476\n\x17\x03\x17\x05\x17\u0479\n\x17\x03" +
		"\x17\x03\x17\x05\x17\u047D\n\x17\x03\x17\x05\x17\u0480\n\x17\x03\x17\x03" +
		"\x17\x05\x17\u0484\n\x17\x03\x17\x03\x17\x03\x18\x03\x18\x05\x18\u048A" +
		"\n\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18" +
		"\x03\x18\x03\x18\x03\x18\x05\x18\u0497\n\x18\x03\x18\x03\x18\x03\x19\x03" +
		"\x19\x03\x19\x05\x19\u049E\n\x19\x03\x19\x03\x19\x03\x19\x05\x19\u04A3" +
		"\n\x19\x03\x19\x05\x19\u04A6\n\x19\x03\x19\x03\x19\x03\x19\x05\x19\u04AB" +
		"\n\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\u04B3\n" +
		"\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\u04B9\n\x19\x03\x19\x03\x19" +
		"\x05\x19\u04BD\n\x19\x03\x1A\x05\x1A\u04C0\n\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x05\x1A\u04C5\n\x1A\x03\x1A\x05\x1A\u04C8\n\x1A\x03\x1A\x03\x1A\x05\x1A" +
		"\u04CC\n\x1A\x03\x1A\x05\x1A\u04CF\n\x1A\x03\x1A\x03\x1A\x05\x1A\u04D3" +
		"\n\x1A\x03\x1A\x05\x1A\u04D6\n\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x05\x1B\u04DE\n\x1B\x05\x1B\u04E0\n\x1B\x03\x1C\x03\x1C\x03" +
		"\x1C\x07\x1C\u04E5\n\x1C\f\x1C\x0E\x1C\u04E8\v\x1C\x03\x1C\x03\x1C\x03" +
		"\x1C\x05\x1C\u04ED\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u04F3" +
		"\n\x1C\f\x1C\x0E\x1C\u04F6\v\x1C\x05\x1C\u04F8\n\x1C\x03\x1C\x03\x1C\x03" +
		"\x1C\x07\x1C\u04FD\n\x1C\f\x1C\x0E\x1C\u0500\v\x1C\x05\x1C\u0502\n\x1C" +
		"\x05\x1C\u0504\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u050A\n\x1D" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u0510\n\x1E\x03\x1E\x03\x1E\x03" +
		"\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u0521\n\x1F\x03 \x03 \x03 \x03 \x03" +
		" \x05 \u0528\n \x03!\x03!\x03!\x03\"\x03\"\x05\"\u052F\n\"\x03\"\x03\"" +
		"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\u053A\n\"\x03#\x05#\u053D" +
		"\n#\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x05%\u054A" +
		"\n%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u0557" +
		"\n%\x03%\x03%\x03%\x05%\u055C\n%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x03&\x03&\x05&\u056C\n&\x03\'\x03\'\x03\'\x03\'" +
		"\x07\'\u0572\n\'\f\'\x0E\'\u0575\v\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03" +
		"(\x05(\u057E\n(\x03)\x03)\x07)\u0582\n)\f)\x0E)\u0585\v)\x03*\x03*\x03" +
		"*\x03*\x03*\x03*\x03*\x05*\u058E\n*\x03*\x05*\u0591\n*\x03*\x03*\x03*" +
		"\x05*\u0596\n*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*" +
		"\x05*\u05A3\n*\x03*\x03*\x03*\x03*\x03*\x05*\u05AA\n*\x03*\x03*\x03*\x05" +
		"*\u05AF\n*\x03+\x03+\x05+\u05B3\n+\x05+\u05B5\n+\x03+\x03+\x03+\x05+\u05BA" +
		"\n+\x03+\x05+\u05BD\n+\x03+\x03+\x07+\u05C1\n+\f+\x0E+\u05C4\v+\x03+\x03" +
		"+\x05+\u05C8\n+\x05+\u05CA\n+\x03+\x03+\x05+\u05CE\n+\x03+\x05+\u05D1" +
		"\n+\x03+\x05+\u05D4\n+\x03+\x03+\x07+\u05D8\n+\f+\x0E+\u05DB\v+\x03+\x03" +
		"+\x05+\u05DF\n+\x05+\u05E1\n+\x03+\x03+\x03+\x05+\u05E6\n+\x03+\x03+\x03" +
		"+\x03+\x03+\x05+\u05ED\n+\x05+\u05EF\n+\x03+\x03+\x03+\x03+\x03+\x05+" +
		"\u05F6\n+\x03,\x03,\x03,\x05,\u05FB\n,\x03,\x03,\x05,\u05FF\n,\x03,\x05" +
		",\u0602\n,\x03-\x03-\x03-\x03-\x03-\x03-\x05-\u060A\n-\x03-\x03-\x03-" +
		"\x03-\x03-\x03-\x05-\u0612\n-\x05-\u0614\n-\x03.\x03.\x03.\x03.\x03.\x03" +
		".\x05.\u061C\n.\x03/\x03/\x05/\u0620\n/\x03/\x05/\u0623\n/\x03/\x03/\x07" +
		"/\u0627\n/\f/\x0E/\u062A\v/\x03/\x03/\x05/\u062E\n/\x03/\x05/\u0631\n" +
		"/\x03/\x03/\x07/\u0635\n/\f/\x0E/\u0638\v/\x05/\u063A\n/\x030\x030\x05" +
		"0\u063E\n0\x030\x030\x030\x050\u0643\n0\x030\x030\x030\x050\u0648\n0\x03" +
		"0\x030\x050\u064C\n0\x030\x030\x030\x050\u0651\n0\x030\x050\u0654\n0\x03" +
		"0\x030\x050\u0658\n0\x030\x030\x050\u065C\n0\x030\x030\x050\u0660\n0\x03" +
		"0\x030\x050\u0664\n0\x030\x030\x030\x050\u0669\n0\x030\x030\x030\x050" +
		"\u066E\n0\x030\x030\x030\x050\u0673\n0\x030\x030\x030\x030\x050\u0679" +
		"\n0\x030\x030\x030\x050\u067E\n0\x030\x030\x030\x050\u0683\n0\x030\x03" +
		"0\x030\x030\x050\u0689\n0\x030\x030\x030\x050\u068E\n0\x030\x030\x030" +
		"\x050\u0693\n0\x030\x030\x030\x050\u0698\n0\x030\x030\x030\x050\u069D" +
		"\n0\x030\x030\x030\x050\u06A2\n0\x030\x030\x030\x050\u06A7\n0\x030\x03" +
		"0\x030\x050\u06AC\n0\x030\x030\x030\x050\u06B1\n0\x030\x030\x030\x050" +
		"\u06B6\n0\x030\x030\x030\x050\u06BB\n0\x030\x030\x030\x030\x050\u06C1" +
		"\n0\x030\x030\x030\x050\u06C6\n0\x030\x030\x030\x030\x050\u06CC\n0\x03" +
		"1\x031\x031\x032\x032\x032\x032\x032\x052\u06D6\n2\x032\x032\x032\x03" +
		"2\x032\x052\u06DD\n2\x052\u06DF\n2\x032\x032\x032\x032\x072\u06E5\n2\f" +
		"2\x0E2\u06E8\v2\x032\x032\x052\u06EC\n2\x033\x053\u06EF\n3\x033\x033\x03" +
		"3\x033\x033\x033\x053\u06F7\n3\x033\x033\x033\x033\x053\u06FD\n3\x033" +
		"\x033\x033\x033\x033\x033\x033\x033\x033\x033\x033\x033\x033\x033\x05" +
		"3\u070D\n3\x033\x033\x033\x033\x033\x033\x033\x033\x033\x033\x053\u0719" +
		"\n3\x053\u071B\n3\x034\x054\u071E\n4\x034\x034\x034\x034\x034\x034\x05" +
		"4\u0726\n4\x034\x034\x034\x034\x054\u072C\n4\x034\x034\x034\x034\x054" +
		"\u0732\n4\x035\x035\x035\x035\x035\x035\x035\x035\x035\x075\u073D\n5\f" +
		"5\x0E5\u0740\v5\x035\x035\x075\u0744\n5\f5\x0E5\u0747\v5\x035\x035\x03" +
		"5\x075\u074C\n5\f5\x0E5\u074F\v5\x055\u0751\n5\x035\x035\x035\x035\x03" +
		"5\x035\x035\x075\u075A\n5\f5\x0E5\u075D\v5\x035\x035\x035\x075\u0762\n" +
		"5\f5\x0E5\u0765\v5\x055\u0767\n5\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x075\u0771\n5\f5\x0E5\u0774\v5\x035\x035\x075\u0778\n5\f5\x0E5\u077B" +
		"\v5\x035\x035\x035\x075\u0780\n5\f5\x0E5\u0783\v5\x055\u0785\n5\x035\x03" +
		"5\x035\x035\x035\x035\x035\x035\x075\u078F\n5\f5\x0E5\u0792\v5\x035\x03" +
		"5\x075\u0796\n5\f5\x0E5\u0799\v5\x035\x035\x035\x075\u079E\n5\f5\x0E5" +
		"\u07A1\v5\x055\u07A3\n5\x035\x035\x035\x075\u07A8\n5\f5\x0E5\u07AB\v5" +
		"\x035\x035\x035\x075\u07B0\n5\f5\x0E5\u07B3\v5\x055\u07B5\n5\x055\u07B7" +
		"\n5\x036\x036\x036\x056\u07BC\n6\x037\x037\x037\x037\x067\u07C2\n7\r7" +
		"\x0E7\u07C3\x037\x037\x038\x038\x038\x078\u07CB\n8\f8\x0E8\u07CE\v8\x03" +
		"9\x059\u07D1\n9\x039\x039\x059\u07D5\n9\x039\x039\x039\x059\u07DA\n9\x03" +
		"9\x039\x039\x039\x059\u07E0\n9\x039\x039\x039\x039\x059\u07E6\n9\x039" +
		"\x039\x039\x059\u07EB\n9\x039\x039\x039\x059\u07F0\n9\x039\x039\x039\x05" +
		"9\u07F5\n9\x039\x039\x039\x059\u07FA\n9\x039\x059\u07FD\n9\x03:\x03:\x03" +
		":\x05:\u0802\n:\x03:\x06:\u0805\n:\r:\x0E:\u0806\x03:\x03:\x03:\x03:\x03" +
		":\x03:\x03:\x03:\x05:\u0811\n:\x03;\x03;\x05;\u0815\n;\x03;\x03;\x03;" +
		"\x03;\x03;\x05;\u081C\n;\x03;\x03;\x03;\x05;\u0821\n;\x03;\x05;\u0824" +
		"\n;\x03;\x03;\x03;\x05;\u0829\n;\x03;\x05;\u082C\n;\x03;\x03;\x05;\u0830" +
		"\n;\x03;\x03;\x05;\u0834\n;\x03<\x03<\x03<\x03<\x07<\u083A\n<\f<\x0E<" +
		"\u083D\v<\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03>\x03>\x03>\x03>\x03>" +
		"\x03>\x03>\x03>\x03>\x05>\u084F\n>\x03>\x05>\u0852\n>\x03>\x05>\u0855" +
		"\n>\x03>\x03>\x05>\u0859\n>\x03>\x03>\x03?\x03?\x03?\x03?\x07?\u0861\n" +
		"?\f?\x0E?\u0864\v?\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x07@\u086E" +
		"\n@\f@\x0E@\u0871\v@\x03@\x03@\x03A\x03A\x05A\u0877\nA\x03A\x05A\u087A" +
		"\nA\x03A\x03A\x03A\x03A\x03A\x07A\u0881\nA\fA\x0EA\u0884\vA\x05A\u0886" +
		"\nA\x03A\x05A\u0889\nA\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x05" +
		"B\u0894\nB\x03B\x05B\u0897\nB\x03B\x03B\x05B\u089B\nB\x03B\x03B\x03C\x03" +
		"C\x03C\x03C\x05C\u08A3\nC\x03C\x05C\u08A6\nC\x03C\x03C\x03C\x05C\u08AB" +
		"\nC\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u08B3\nC\x03C\x03C\x03C\x03C\x05" +
		"C\u08B9\nC\x03C\x03C\x05C\u08BD\nC\x03D\x03D\x05D\u08C1\nD\x03D\x07D\u08C4" +
		"\nD\fD\x0ED\u08C7\vD\x03D\x03D\x05D\u08CB\nD\x03D\x03D\x03D\x03D\x03D" +
		"\x05D\u08D2\nD\x03D\x03D\x05D\u08D6\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03" +
		"D\x07D\u08DF\nD\fD\x0ED\u08E2\vD\x03D\x03D\x03D\x03D\x03D\x05D\u08E9\n" +
		"D\x03D\x05D\u08EC\nD\x03D\x03D\x07D\u08F0\nD\fD\x0ED\u08F3\vD\x03D\x03" +
		"D\x03D\x05D\u08F8\nD\x05D\u08FA\nD\x03D\x03D\x03D\x05D\u08FF\nD\x03D\x03" +
		"D\x07D\u0903\nD\fD\x0ED\u0906\vD\x03D\x03D\x03D\x05D\u090B\nD\x05D\u090D" +
		"\nD\x03D\x03D\x05D\u0911\nD\x03D\x05D\u0914\nD\x03D\x05D\u0917";
	private static readonly _serializedATNSegment1: string =
		"\nD\x03D\x03D\x07D\u091B\nD\fD\x0ED\u091E\vD\x03D\x03D\x03D\x05D\u0923" +
		"\nD\x03D\x05D\u0926\nD\x03D\x03D\x07D\u092A\nD\fD\x0ED\u092D\vD\x03D\x03" +
		"D\x03D\x05D\u0932\nD\x05D\u0934\nD\x03D\x03D\x03D\x05D\u0939\nD\x03D\x03" +
		"D\x03D\x03D\x03D\x03D\x05D\u0941\nD\x05D\u0943\nD\x03D\x03D\x03D\x03D" +
		"\x03D\x03D\x03D\x05D\u094C\nD\x03D\x03D\x03D\x05D\u0951\nD\x03D\x03D\x03" +
		"D\x03D\x03D\x03D\x05D\u0959\nD\x03D\x03D\x05D\u095D\nD\x03D\x03D\x03D" +
		"\x03D\x03D\x03D\x05D\u0965\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D" +
		"\x05D\u096F\nD\x03D\x03D\x03D\x05D\u0974\nD\x03D\x03D\x03D\x03D\x03D\x05" +
		"D\u097B\nD\x03D\x03D\x05D\u097F\nD\x03D\x03D\x05D\u0983\nD\x03D\x03D\x03" +
		"D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03" +
		"D\x03D\x03D\x03D\x03D\x03D\x05D\u099B\nD\x03D\x03D\x05D\u099F\nD\x03D" +
		"\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x05D\u09AB\nD\x03D\x05D" +
		"\u09AE\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x05D\u09B7\nD\x03D\x03D\x03" +
		"D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x07D\u09C6\nD\fD\x0E" +
		"D\u09C9\vD\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x05D\u09D4\nD" +
		"\x03D\x03D\x03D\x03D\x03D\x05D\u09DB\nD\x03D\x03D\x03D\x03D\x03D\x05D" +
		"\u09E2\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x07D" +
		"\u09EF\nD\fD\x0ED\u09F2\vD\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03" +
		"D\x03D\x05D\u09FE\nD\x03D\x03D\x03D\x03D\x05D\u0A04\nD\x03D\x03D\x03D" +
		"\x03D\x05D\u0A0A\nD\x03D\x03D\x03D\x03D\x05D\u0A10\nD\x03D\x03D\x03D\x03" +
		"D\x05D\u0A16\nD\x03D\x03D\x03D\x03D\x05D\u0A1C\nD\x03D\x03D\x03D\x03D" +
		"\x05D\u0A22\nD\x03E\x03E\x03E\x05E\u0A27\nE\x03E\x03E\x03F\x03F\x03F\x05" +
		"F\u0A2E\nF\x03F\x03F\x03G\x03G\x03G\x05G\u0A35\nG\x03G\x03G\x03G\x03G" +
		"\x03G\x05G\u0A3C\nG\x03G\x03G\x03G\x05G\u0A41\nG\x03G\x07G\u0A44\nG\f" +
		"G\x0EG\u0A47\vG\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03I\x03I\x03" +
		"I\x05I\u0A54\nI\x03I\x03I\x03J\x03J\x03J\x05J\u0A5B\nJ\x03J\x03J\x03K" +
		"\x03K\x03K\x05K\u0A62\nK\x03K\x03K\x03L\x03L\x05L\u0A68\nL\x03L\x03L\x05" +
		"L\u0A6C\nL\x03L\x03L\x05L\u0A70\nL\x03M\x03M\x03M\x03M\x03M\x05M\u0A77" +
		"\nM\x03M\x05M\u0A7A\nM\x03N\x03N\x03N\x05N\u0A7F\nN\x03N\x03N\x03O\x03" +
		"O\x03O\x05O\u0A86\nO\x03O\x03O\x03O\x07O\u0A8B\nO\fO\x0EO\u0A8E\vO\x03" +
		"O\x05O\u0A91\nO\x03P\x03P\x03P\x03P\x03P\x07P\u0A98\nP\fP\x0EP\u0A9B\v" +
		"P\x03Q\x03Q\x03Q\x03Q\x03R\x03R\x05R\u0AA3\nR\x03R\x03R\x03S\x03S\x03" +
		"S\x03S\x03S\x05S\u0AAC\nS\x03S\x05S\u0AAF\nS\x03T\x03T\x05T\u0AB3\nT\x03" +
		"U\x03U\x03U\x03V\x03V\x03V\x03V\x05V\u0ABC\nV\x03W\x03W\x05W\u0AC0\nW" +
		"\x03W\x05W\u0AC3\nW\x03W\x05W\u0AC6\nW\x03W\x03W\x03W\x03W\x03W\x03W\x05" +
		"W\u0ACE\nW\x03W\x03W\x03W\x03W\x05W\u0AD4\nW\x03W\x03W\x03W\x03W\x03W" +
		"\x07W\u0ADB\nW\fW\x0EW\u0ADE\vW\x05W\u0AE0\nW\x03W\x03W\x03W\x03W\x03" +
		"W\x03W\x03W\x07W\u0AE9\nW\fW\x0EW\u0AEC\vW\x05W\u0AEE\nW\x03X\x03X\x03" +
		"X\x05X\u0AF3\nX\x03X\x05X\u0AF6\nX\x03X\x03X\x03X\x05X\u0AFB\nX\x03X\x03" +
		"X\x03X\x03X\x03X\x03X\x03X\x03X\x05X\u0B05\nX\x03X\x03X\x03X\x05X\u0B0A" +
		"\nX\x03X\x03X\x06X\u0B0E\nX\rX\x0EX\u0B0F\x05X\u0B12\nX\x03X\x03X\x06" +
		"X\u0B16\nX\rX\x0EX\u0B17\x05X\u0B1A\nX\x03X\x03X\x03X\x03X\x05X\u0B20" +
		"\nX\x03X\x03X\x03X\x03X\x07X\u0B26\nX\fX\x0EX\u0B29\vX\x03X\x03X\x05X" +
		"\u0B2D\nX\x03X\x03X\x03X\x03X\x07X\u0B33\nX\fX\x0EX\u0B36\vX\x05X\u0B38" +
		"\nX\x03Y\x03Y\x03Y\x05Y\u0B3D\nY\x03Y\x05Y\u0B40\nY\x03Y\x03Y\x03Y\x05" +
		"Y\u0B45\nY\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0B4D\nY\x03Y\x03Y\x03Y" +
		"\x03Y\x03Y\x03Y\x05Y\u0B55\nY\x03Y\x03Y\x03Y\x03Y\x05Y\u0B5B\nY\x03Y\x03" +
		"Y\x03Y\x03Y\x07Y\u0B61\nY\fY\x0EY\u0B64\vY\x03Y\x03Y\x05Y\u0B68\nY\x03" +
		"Y\x03Y\x03Y\x03Y\x07Y\u0B6E\nY\fY\x0EY\u0B71\vY\x05Y\u0B73\nY\x03Z\x03" +
		"Z\x05Z\u0B77\nZ\x03Z\x05Z\u0B7A\nZ\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z" +
		"\u0B82\nZ\x03Z\x03Z\x03Z\x03Z\x05Z\u0B88\nZ\x03Z\x03Z\x03Z\x03Z\x03Z\x07" +
		"Z\u0B8F\nZ\fZ\x0EZ\u0B92\vZ\x05Z\u0B94\nZ\x03[\x03[\x05[\u0B98\n[\x03" +
		"[\x03[\x05[\u0B9C\n[\x03[\x03[\x06[\u0BA0\n[\r[\x0E[\u0BA1\x03[\x03[\x05" +
		"[\u0BA6\n[\x03[\x03[\x05[\u0BAA\n[\x05[\u0BAC\n[\x03[\x05[\u0BAF\n[\x03" +
		"[\x05[\u0BB2\n[\x03[\x05[\u0BB5\n[\x03[\x03[\x06[\u0BB9\n[\r[\x0E[\u0BBA" +
		"\x03[\x03[\x05[\u0BBF\n[\x03[\x05[\u0BC2\n[\x03[\x05[\u0BC5\n[\x03[\x05" +
		"[\u0BC8\n[\x03[\x05[\u0BCB\n[\x05[\u0BCD\n[\x03\\\x03\\\x05\\\u0BD1\n" +
		"\\\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x07]\u0BDD\n]\f]" +
		"\x0E]\u0BE0\v]\x05]\u0BE2\n]\x03^\x03^\x03^\x03^\x05^\u0BE8\n^\x03_\x03" +
		"_\x05_\u0BEC\n_\x03`\x03`\x03`\x03`\x03`\x03`\x05`\u0BF4\n`\x03a\x03a" +
		"\x05a\u0BF8\na\x03a\x05a\u0BFB\na\x03a\x05a\u0BFE\na\x03a\x03a\x03a\x03" +
		"a\x03a\x03a\x03a\x05a\u0C07\na\x03a\x03a\x05a\u0C0B\na\x03a\x05a\u0C0E" +
		"\na\x03a\x03a\x05a\u0C12\na\x03b\x03b\x05b\u0C16\nb\x03b\x05b\u0C19\n" +
		"b\x03b\x05b\u0C1C\nb\x03b\x03b\x03b\x05b\u0C21\nb\x03b\x03b\x03b\x03b" +
		"\x05b\u0C27\nb\x07b\u0C29\nb\fb\x0Eb\u0C2C\vb\x03b\x03b\x03b\x03b\x03" +
		"b\x03b\x03b\x05b\u0C35\nb\x03b\x03b\x03b\x03b\x05b\u0C3B\nb\x07b\u0C3D" +
		"\nb\fb\x0Eb\u0C40\vb\x03b\x03b\x03b\x05b\u0C45\nb\x03b\x03b\x05b\u0C49" +
		"\nb\x03c\x03c\x03c\x03c\x05c\u0C4F\nc\x03c\x05c\u0C52\nc\x03d\x03d\x03" +
		"d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x05d\u0C5E\nd\x03d\x03d\x05d\u0C62" +
		"\nd\x03d\x03d\x05d\u0C66\nd\x03e\x03e\x03e\x03e\x03e\x03e\x05e\u0C6E\n" +
		"e\x03e\x03e\x05e\u0C72\ne\x03f\x03f\x03f\x03f\x03g\x03g\x05g\u0C7A\ng" +
		"\x03g\x05g\u0C7D\ng\x03g\x03g\x05g\u0C81\ng\x03g\x05g\u0C84\ng\x03g\x03" +
		"g\x03g\x03g\x07g\u0C8A\ng\fg\x0Eg\u0C8D\vg\x03g\x03g\x05g\u0C91\ng\x03" +
		"g\x05g\u0C94\ng\x03g\x05g\u0C97\ng\x03h\x03h\x05h\u0C9B\nh\x03h\x05h\u0C9E" +
		"\nh\x03h\x03h\x03h\x03h\x03h\x07h\u0CA5\nh\fh\x0Eh\u0CA8\vh\x03h\x03h" +
		"\x05h\u0CAC\nh\x03i\x03i\x03i\x03i\x03i\x07i\u0CB3\ni\fi\x0Ei\u0CB6\v" +
		"i\x03j\x03j\x05j\u0CBA\nj\x03k\x03k\x03k\x07k\u0CBF\nk\fk\x0Ek\u0CC2\v" +
		"k\x03l\x03l\x07l\u0CC6\nl\fl\x0El\u0CC9\vl\x03l\x03l\x03l\x07l\u0CCE\n" +
		"l\fl\x0El\u0CD1\vl\x03l\x03l\x05l\u0CD5\nl\x03m\x03m\x03m\x03m\x03m\x03" +
		"m\x05m\u0CDD\nm\x03m\x05m\u0CE0\nm\x03m\x05m\u0CE3\nm\x03m\x03m\x03m\x07" +
		"m\u0CE8\nm\fm\x0Em\u0CEB\vm\x05m\u0CED\nm\x03m\x03m\x03m\x03m\x03m\x05" +
		"m\u0CF4\nm\x03m\x05m\u0CF7\nm\x03m\x03m\x03m\x03m\x03m\x03m\x05m\u0CFF" +
		"\nm\x03n\x03n\x03n\x03n\x05n\u0D05\nn\x03n\x03n\x03n\x03n\x03o\x03o\x03" +
		"o\x03o\x03o\x05o\u0D10\no\x03p\x05p\u0D13\np\x03p\x03p\x03p\x03p\x03p" +
		"\x03p\x03p\x03p\x03p\x05p\u0D1E\np\x03p\x03p\x03p\x03p\x05p\u0D24\np\x03" +
		"p\x03p\x05p\u0D28\np\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x05" +
		"p\u0D33\np\x03p\x03p\x03p\x05p\u0D38\np\x05p\u0D3A\np\x03p\x03p\x05p\u0D3E" +
		"\np\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x05q\u0D48\nq\x03r\x03r\x03" +
		"r\x03r\x03r\x03r\x03r\x03r\x05r\u0D52\nr\x03s\x03s\x07s\u0D56\ns\fs\x0E" +
		"s\u0D59\vs\x03s\x03s\x05s\u0D5D\ns\x03s\x05s\u0D60\ns\x03s\x05s\u0D63" +
		"\ns\x03s\x05s\u0D66\ns\x03s\x03s\x07s\u0D6A\ns\fs\x0Es\u0D6D\vs\x03s\x03" +
		"s\x05s\u0D71\ns\x03s\x05s\u0D74\ns\x03s\x05s\u0D77\ns\x03s\x05s\u0D7A" +
		"\ns\x05s\u0D7C\ns\x03t\x03t\x07t\u0D80\nt\ft\x0Et\u0D83\vt\x03t\x03t\x05" +
		"t\u0D87\nt\x03t\x05t\u0D8A\nt\x03t\x05t\u0D8D\nt\x03u\x03u\x05u\u0D91" +
		"\nu\x03u\x03u\x03v\x03v\x05v\u0D97\nv\x03v\x03v\x05v\u0D9B\nv\x03w\x03" +
		"w\x03w\x03w\x03w\x03w\x03w\x03w\x05w\u0DA5\nw\x03x\x03x\x05x\u0DA9\nx" +
		"\x03x\x03x\x07x\u0DAD\nx\fx\x0Ex\u0DB0\vx\x03y\x03y\x03y\x03y\x03y\x03" +
		"y\x05y\u0DB8\ny\x03y\x05y\u0DBB\ny\x03y\x03y\x05y\u0DBF\ny\x03y\x05y\u0DC2" +
		"\ny\x03y\x03y\x05y\u0DC6\ny\x03y\x03y\x05y\u0DCA\ny\x03y\x05y\u0DCD\n" +
		"y\x05y\u0DCF\ny\x03z\x03z\x03z\x03z\x07z\u0DD5\nz\fz\x0Ez\u0DD8\vz\x03" +
		"z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x05z\u0DE3\nz\x03z\x03z\x06" +
		"z\u0DE7\nz\rz\x0Ez\u0DE8\x05z\u0DEB\nz\x03z\x03z\x06z\u0DEF\nz\rz\x0E" +
		"z\u0DF0\x05z\u0DF3\nz\x05z\u0DF5\nz\x03{\x03{\x03{\x03{\x05{\u0DFB\n{" +
		"\x03{\x03{\x03{\x03{\x03{\x03{\x05{\u0E03\n{\x03|\x03|\x03|\x03|\x03|" +
		"\x03|\x05|\u0E0B\n|\x03}\x03}\x03}\x03}\x05}\u0E11\n}\x03}\x03}\x03}\x03" +
		"}\x03}\x07}\u0E18\n}\f}\x0E}\u0E1B\v}\x03}\x03}\x05}\u0E1F\n}\x05}\u0E21" +
		"\n}\x03}\x03}\x05}\u0E25\n}\x03~\x03~\x05~\u0E29\n~\x03\x7F\x03\x7F\x03" +
		"\x7F\x03\x7F\x05\x7F\u0E2F\n\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F" +
		"\x05\x7F\u0E36\n\x7F\x03\x80\x03\x80\x05\x80\u0E3A\n\x80\x03\x81\x03\x81" +
		"\x03\x81\x03\x81\x03\x81\x07\x81\u0E41\n\x81\f\x81\x0E\x81\u0E44\v\x81" +
		"\x05\x81\u0E46\n\x81\x03\x82\x03\x82\x05\x82\u0E4A\n\x82\x03\x83\x03\x83" +
		"\x05\x83\u0E4E\n\x83\x03\x83\x03\x83\x05\x83\u0E52\n\x83\x03\x83\x05\x83" +
		"\u0E55\n\x83\x03\x83\x05\x83\u0E58\n\x83\x03\x83\x05\x83\u0E5B\n\x83\x03" +
		"\x84\x03\x84\x05\x84\u0E5F\n\x84\x03\x84\x03\x84\x05\x84\u0E63\n\x84\x03" +
		"\x84\x05\x84\u0E66\n\x84\x03\x84\x05\x84\u0E69\n\x84\x03\x84\x05\x84\u0E6C" +
		"\n\x84\x03\x85\x03\x85\x03\x85\x03\x86\x03\x86\x05\x86\u0E73\n\x86\x03" +
		"\x86\x03\x86\x05\x86\u0E77\n\x86\x03\x86\x03\x86\x03\x87\x03\x87\x03\x87" +
		"\x03\x87\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x07\x88\u0E84\n\x88\f" +
		"\x88\x0E\x88\u0E87\v\x88\x03\x89\x03\x89\x03\x89\x03\x8A\x03\x8A\x03\x8A" +
		"\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x05\x8B\u0E93\n\x8B\x03\x8B\x03\x8B\x03" +
		"\x8B\x03\x8B\x07\x8B\u0E99\n\x8B\f\x8B\x0E\x8B\u0E9C\v\x8B\x03\x8C\x03" +
		"\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C\u0EA5\n\x8C\x03\x8D" +
		"\x03\x8D\x05\x8D\u0EA9\n\x8D\x03\x8D\x05\x8D\u0EAC\n\x8D\x03\x8D\x03\x8D" +
		"\x03\x8E\x03\x8E\x05\x8E\u0EB2\n\x8E\x03\x8E\x05\x8E\u0EB5\n\x8E\x03\x8E" +
		"\x05\x8E\u0EB8\n\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03" +
		"\x8F\x05\x8F\u0EC1\n\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90" +
		"\x03\x90\x05\x90\u0ECA\n\x90\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
		"\x91\x07\x91\u0ED2\n\x91\f\x91\x0E\x91\u0ED5\v\x91\x03\x91\x05\x91\u0ED8" +
		"\n\x91\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x07\x92\u0EE0\n" +
		"\x92\f\x92\x0E\x92\u0EE3\v\x92\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93" +
		"\x03\x93\x03\x93\x05\x93\u0EEC\n\x93\x03\x94\x03\x94\x03\x94\x03\x95\x03" +
		"\x95\x03\x95\x05\x95\u0EF4\n\x95\x03\x95\x05\x95\u0EF7\n\x95\x03\x96\x03" +
		"\x96\x03\x96\x03\x96\x03\x96\x07\x96\u0EFE\n\x96\f\x96\x0E\x96\u0F01\v" +
		"\x96\x05\x96\u0F03\n\x96\x03\x96\x03\x96\x05\x96\u0F07\n\x96\x03\x96\x07" +
		"\x96\u0F0A\n\x96\f\x96\x0E\x96\u0F0D\v\x96\x03\x96\x05\x96\u0F10\n\x96" +
		"\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x07\x97\u0F17\n\x97\f\x97\x0E" +
		"\x97\u0F1A\v\x97\x05\x97\u0F1C\n\x97\x03\x98\x03\x98\x03\x98\x03\x99\x03" +
		"\x99\x03\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u0F39\n\x9A\f\x9A\x0E\x9A" +
		"\u0F3C\v\x9A\x05\x9A\u0F3E\n\x9A\x03\x9A\x05\x9A\u0F41\n\x9A\x03\x9B\x03" +
		"\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03" +
		"\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x07\x9F\u0F77\n\x9F\f\x9F" +
		"\x0E\x9F\u0F7A\v\x9F\x03\x9F\x03\x9F\x05\x9F\u0F7E\n\x9F\x03\xA0\x03\xA0" +
		"\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0F9A\n\xA2\x03" +
		"\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03" +
		"\xA3\x03\xA3\x03\xA3\x05\xA3\u0FA8\n\xA3\x03\xA4\x03\xA4\x03\xA4\x07\xA4" +
		"\u0FAD\n\xA4\f\xA4\x0E\xA4\u0FB0\v\xA4\x03\xA4\x05\xA4\u0FB3\n\xA4\x03" +
		"\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0FB9\n\xA5\x03\xA6\x03\xA6\x03\xA6" +
		"\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0FC1\n\xA6\x05\xA6\u0FC3\n\xA6\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8" +
		"\u0FCE\n\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAA\x03" +
		"\xAA\x05\xAA\u0FD8\n\xAA\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x05\xAB" +
		"\u0FDF\n\xAB\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0FE5\n\xAC\x03\xAD" +
		"\x03\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x05\xAE\u0FED\n\xAE\x03\xAF\x03" +
		"\xAF\x03\xAF\x05\xAF\u0FF2\n\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x07\xAF" +
		"\u0FF8\n\xAF\f\xAF\x0E\xAF\u0FFB\v\xAF\x03\xAF\x03\xAF\x03\xAF\x07\xAF" +
		"\u1000\n\xAF\f\xAF\x0E\xAF\u1003\v\xAF\x03\xAF\x03\xAF\x03\xAF\x07\xAF" +
		"\u1008\n\xAF\f\xAF\x0E\xAF\u100B\v\xAF\x03\xAF\x03\xAF\x03\xAF\x07\xAF" +
		"\u1010\n\xAF\f\xAF\x0E\xAF\u1013\v\xAF\x03\xAF\x07\xAF\u1016\n\xAF\f\xAF" +
		"\x0E\xAF\u1019\v\xAF\x05\xAF\u101B\n\xAF\x03\xAF\x03\xAF\x05\xAF\u101F" +
		"\n\xAF\x03\xB0\x03\xB0\x03\xB0\x05\xB0\u1024\n\xB0\x03\xB0\x06\xB0\u1027" +
		"\n\xB0\r\xB0\x0E\xB0\u1028\x03\xB0\x03\xB0\x06\xB0\u102D\n\xB0\r\xB0\x0E" +
		"\xB0\u102E\x05\xB0\u1031\n\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB1\x03\xB1" +
		"\x03\xB1\x03\xB1\x06\xB1\u103A\n\xB1\r\xB1\x0E\xB1\u103B\x03\xB1\x07\xB1" +
		"\u103F\n\xB1\f\xB1\x0E\xB1\u1042\v\xB1\x03\xB1\x03\xB1\x06\xB1\u1046\n" +
		"\xB1\r\xB1\x0E\xB1\u1047\x05\xB1\u104A\n\xB1\x03\xB1\x03\xB1\x03\xB1\x03" +
		"\xB2\x03\xB2\x03\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB4\x05" +
		"\xB4\u1058\n\xB4\x03\xB4\x03\xB4\x06\xB4\u105C\n\xB4\r\xB4\x0E\xB4\u105D" +
		"\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u1063\n\xB4\x03\xB5\x03\xB5\x03\xB5\x05" +
		"\xB5\u1068\n\xB5\x03\xB5\x03\xB5\x06\xB5\u106C\n\xB5\r\xB5\x0E\xB5\u106D" +
		"\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u1075\n\xB5\x03\xB6\x03" +
		"\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u107D\n\xB7\x03\xB7\x03\xB7" +
		"\x03\xB7\x03\xB7\x06\xB7\u1083\n\xB7\r\xB7\x0E\xB7\u1084\x03\xB7\x03\xB7" +
		"\x03\xB7\x05\xB7\u108A\n\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u1090" +
		"\n\xB8\x03\xB8\x05\xB8\u1093\n\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03" +
		"\xB8\x03\xB8\x05\xB8\u109B\n\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x05\xB9\u10A2\n\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03" +
		"\xBA\x05\xBA\u10AB\n\xBA\x03\xBA\x05\xBA\u10AE\n\xBA\x03\xBB\x03\xBB\x03" +
		"\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03" +
		"\xBC\x03\xBC\x07\xBC\u10BD\n\xBC\f\xBC\x0E\xBC\u10C0\v\xBC\x03\xBC\x03" +
		"\xBC\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u10C7\n\xBD\x03\xBD\x03\xBD\x03\xBD" +
		"\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u10CF\n\xBD\x03\xBE\x03\xBE\x05\xBE\u10D3" +
		"\n\xBE\x03\xBE\x03\xBE\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u10DA\n\xBF\x03" +
		"\xBF\x03\xBF\x06\xBF\u10DE\n\xBF\r\xBF\x0E\xBF\u10DF\x03\xC0\x03\xC0\x03" +
		"\xC0\x03\xC0\x06\xC0\u10E6\n\xC0\r\xC0\x0E\xC0\u10E7\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x07\xC1\u10EF\n\xC1\f\xC1\x0E\xC1\u10F2\v\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x05\xC1\u10F7\n\xC1\x03\xC1\x03\xC1\x03\xC1\x07\xC1" +
		"\u10FC\n\xC1\f\xC1\x0E\xC1\u10FF\v\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1" +
		"\x05\xC1\u1105\n\xC1\x03\xC1\x07\xC1\u1108\n\xC1\f\xC1\x0E\xC1\u110B\v" +
		"\xC1\x05\xC1\u110D\n\xC1\x05\xC1\u110F\n\xC1\x03\xC1\x03\xC1\x06\xC1\u1113" +
		"\n\xC1\r\xC1\x0E\xC1\u1114\x05\xC1\u1117\n\xC1\x03\xC1\x03\xC1\x07\xC1" +
		"\u111B\n\xC1\f\xC1\x0E\xC1\u111E\v\xC1\x05\xC1\u1120\n\xC1\x03\xC2\x03" +
		"\xC2\x03\xC2\x03\xC2\x03\xC2\x07\xC2\u1127\n\xC2\f\xC2\x0E\xC2\u112A\v" +
		"\xC2\x03\xC2\x03\xC2\x03\xC2\x05\xC2\u112F\n\xC2\x03\xC2\x03\xC2\x03\xC2" +
		"\x07\xC2\u1134\n\xC2\f\xC2\x0E\xC2\u1137\v\xC2\x03\xC2\x03\xC2\x03\xC2" +
		"\x03\xC2\x05\xC2\u113D\n\xC2\x03\xC2\x07\xC2\u1140\n\xC2\f\xC2\x0E\xC2" +
		"\u1143\v\xC2\x05\xC2\u1145\n\xC2\x05\xC2\u1147\n\xC2\x03\xC2\x03\xC2\x06" +
		"\xC2\u114B\n\xC2\r\xC2\x0E\xC2\u114C\x05\xC2\u114F\n\xC2\x03\xC2\x03\xC2" +
		"\x07\xC2\u1153\n\xC2\f\xC2\x0E\xC2\u1156\v\xC2\x05\xC2\u1158\n\xC2\x03" +
		"\xC3\x03\xC3\x03\xC3\x05\xC3\u115D\n\xC3\x03\xC3\x03\xC3\x03\xC3\x07\xC3" +
		"\u1162\n\xC3\f\xC3\x0E\xC3\u1165\v\xC3\x03\xC4\x03\xC4\x03\xC4\x03\xC4" +
		"\x07\xC4\u116B\n\xC4\f\xC4\x0E\xC4\u116E\v\xC4\x03\xC4\x03\xC4\x05\xC4" +
		"\u1172\n\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x07\xC4\u1179\n\xC4" +
		"\f\xC4\x0E\xC4\u117C\v\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x05\xC4\u1182" +
		"\n\xC4\x03\xC4\x07\xC4\u1185\n\xC4\f\xC4\x0E\xC4\u1188\v\xC4\x05\xC4\u118A" +
		"\n\xC4\x05\xC4\u118C\n\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x07\xC4\u1192" +
		"\n\xC4\f\xC4\x0E\xC4\u1195\v\xC4\x05\xC4\u1197\n\xC4\x03\xC5\x03\xC5\x03" +
		"\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x07\xC5\u11A1\n\xC5\f\xC5" +
		"\x0E\xC5\u11A4\v\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u11A9\n\xC5\x03\xC6" +
		"\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x07\xC6\u11B0\n\xC6\f\xC6\x0E\xC6\u11B3" +
		"\v\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x07\xC7\u11B9\n\xC7\f\xC7\x0E\xC7" +
		"\u11BC\v\xC7\x03\xC7\x03\xC7\x05\xC7\u11C0\n\xC7\x03\xC7\x03\xC7\x03\xC7" +
		"\x03\xC7\x03\xC7\x07\xC7\u11C7\n\xC7\f\xC7\x0E\xC7\u11CA\v\xC7\x03\xC7" +
		"\x03\xC7\x03\xC7\x05\xC7\u11CF\n\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03" +
		"\xC7\x03\xC7\x03\xC7\x07\xC7\u11D8\n\xC7\f\xC7\x0E\xC7\u11DB\v\xC7\x05" +
		"\xC7\u11DD\n\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8" +
		"\x03\xC8\x07\xC8\u11E7\n\xC8\f\xC8\x0E\xC8\u11EA\v\xC8\x03\xC9\x03\xC9" +
		"\x03\xC9\x03\xC9\x05\xC9\u11F0\n\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u11F5" +
		"\n\xC9\x03\xCA\x03";
	private static readonly _serializedATNSegment2: string =
		"\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03" +
		"\xCB\x03\xCB\x03\xCB\x05\xCB\u1204\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u120F\n\xCB\x03\xCB\x05" +
		"\xCB\u1212\n\xCB\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC" +
		"\x03\xCC\x05\xCC\u121C\n\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03" +
		"\xCD\x03\xCD\x03\xCD\x05\xCD\u1226\n\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCE" +
		"\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x05\xCE\u1230\n\xCE\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x05\xD0\u123A\n\xD0\x03\xD1" +
		"\x03\xD1\x05\xD1\u123E\n\xD1\x03\xD1\x03\xD1\x05\xD1\u1242\n\xD1\x03\xD1" +
		"\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x05\xD1\u124B\n\xD1\x03" +
		"\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03" +
		"\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03" +
		"\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x05\xD1\u1267" +
		"\n\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2" +
		"\u1279\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD4\x03\xD4\x05\xD4\u1281" +
		"\n\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x07\xD5" +
		"\u128A\n\xD5\f\xD5\x0E\xD5\u128D\v\xD5\x03\xD6\x03\xD6\x03\xD6\x03\xD6" +
		"\x05\xD6\u1293\n\xD6\x03\xD7\x03\xD7\x05\xD7\u1297\n\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x03\xD8\x03\xD8\x05\xD8\u129E\n\xD8\x03\xD8\x03\xD8\x03\xD8\x05" +
		"\xD8\u12A3\n\xD8\x03\xD8\x05\xD8\u12A6\n\xD8\x03\xD8\x05\xD8\u12A9\n\xD8" +
		"\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x05\xD9\u12B2" +
		"\n\xD9\x03\xDA\x03\xDA\x05\xDA\u12B6\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03" +
		"\xDB\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03" +
		"\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u12D2\n\xDD\f\xDD\x0E\xDD" +
		"\u12D5\v\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x05\xDD\u12DB\n\xDD\x03\xDD" +
		"\x03\xDD\x05\xDD\u12DF\n\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x05" +
		"\xDD\u12E6\n\xDD\x03\xDD\x05\xDD\u12E9\n\xDD\x03\xDD\x03\xDD\x03\xDD\x03" +
		"\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x05\xDD\u12F3\n\xDD\x03\xDE\x03\xDE" +
		"\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u12FD\n\xDE\x03" +
		"\xDE\x03\xDE\x05\xDE\u1301\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE" +
		"\u1307\n\xDE\x03\xDE\x05\xDE\u130A\n\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE" +
		"\u130F\n\xDE\x03\xDE\x03\xDE\x05\xDE\u1313\n\xDE\x03\xDE\x03\xDE\x03\xDE" +
		"\x03\xDE\x03\xDE\x05\xDE\u131A\n\xDE\x03\xDE\x05\xDE\u131D\n\xDE\x03\xDE" +
		"\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u1323\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x05\xDE\u133B\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE" +
		"\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u1348\n\xDE\x03\xDE\x05" +
		"\xDE\u134B\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE" +
		"\x03\xDE\x05\xDE\u1355\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x05\xDE\u135D\n\xDE\x03\xDE\x03\xDE\x05\xDE\u1361\n\xDE\x03\xDE\x03" +
		"\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u1368\n\xDE\x03\xDE\x05\xDE\u136B" +
		"\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x07\xDE\u1372\n\xDE\f\xDE" +
		"\x0E\xDE\u1375\v\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u137A\n\xDE\x03\xDE" +
		"\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u1380\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u138A\n\xDE\x05\xDE\u138C" +
		"\n\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u1392\n\xDF\x03\xDF\x05" +
		"\xDF\u1395\n\xDF\x03\xDF\x05\xDF\u1398\n\xDF\x03\xE0\x03\xE0\x03\xE0\x03" +
		"\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x05\xE0\u13A4\n\xE0" +
		"\x03\xE0\x05\xE0\u13A7\n\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x05\xE1\u13AD" +
		"\n\xE1\x03\xE2\x05\xE2\u13B0\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03" +
		"\xE2\x03\xE2\x05\xE2\u13B8\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2" +
		"\x03\xE2\x05\xE2\u13C0\n\xE2\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u13C6" +
		"\n\xE3\x03\xE3\x03\xE3\x05\xE3\u13CA\n\xE3\x03\xE4\x03\xE4\x03\xE4\x03" +
		"\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x05" +
		"\xE4\u13D8\n\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x03\xE6\x03\xE6" +
		"\x03\xE6\x07\xE6\u13E2\n\xE6\f\xE6\x0E\xE6\u13E5\v\xE6\x03\xE6\x03\xE6" +
		"\x03\xE6\x03\xE6\x05\xE6\u13EB\n\xE6\x03\xE6\x05\xE6\u13EE\n\xE6\x03\xE6" +
		"\x03\xE6\x03\xE6\x03\xE7\x03\xE7\x05\xE7\u13F5\n\xE7\x03\xE7\x03\xE7\x03" +
		"\xE7\x07\xE7\u13FA\n\xE7\f\xE7\x0E\xE7\u13FD\v\xE7\x03\xE8\x03\xE8\x05" +
		"\xE8\u1401\n\xE8\x03\xE8\x06\xE8\u1404\n\xE8\r\xE8\x0E\xE8\u1405\x03\xE9" +
		"\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x07\xE9\u140F\n\xE9\f" +
		"\xE9\x0E\xE9\u1412\v\xE9\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEB\x03\xEB" +
		"\x03\xEC\x03\xEC\x05\xEC\u141C\n\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x05" +
		"\xEC\u1422\n\xEC\x03\xED\x03\xED\x03\xED\x05\xED\u1427\n\xED\x03\xED\x03" +
		"\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x05\xED\u1434\n\xED\x05\xED\u1436\n\xED\x03\xED\x03\xED\x03\xED\x05" +
		"\xED\u143B\n\xED\x03\xED\x03\xED\x03\xED\x05\xED\u1440\n\xED\x05\xED\u1442" +
		"\n\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u1449\n\xEE\x03" +
		"\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u1450\n\xEF\x03\xEF\x05\xEF" +
		"\u1453\n\xEF\x03\xEF\x05\xEF\u1456\n\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF" +
		"\x05\xEF\u145C\n\xEF\x03\xEF\x03\xEF\x05\xEF\u1460\n\xEF\x03\xF0\x03\xF0" +
		"\x03\xF0\x03\xF0\x05\xF0\u1466\n\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x05" +
		"\xF1\u146C\n\xF1\x03\xF1\x03\xF1\x03\xF2\x03\xF2\x03\xF2\x03\xF3\x03\xF3" +
		"\x03\xF3\x03\xF4\x03\xF4\x03\xF4\x05\xF4\u1479\n\xF4\x03\xF4\x03\xF4\x03" +
		"\xF4\x05\xF4\u147E\n\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x07\xF4\u1484" +
		"\n\xF4\f\xF4\x0E\xF4\u1487\v\xF4\x05\xF4\u1489\n\xF4\x03\xF5\x03\xF5\x03" +
		"\xF5\x03\xF5\x05\xF5\u148F\n\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6" +
		"\x05\xF6\u1496\n\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u149B\n\xF6\x03\xF7" +
		"\x03\xF7\x03\xF7\x03\xF7\x05\xF7\u14A1\n\xF7\x03\xF8\x03\xF8\x03\xF9\x03" +
		"\xF9\x03\xF9\x05\xF9\u14A8\n\xF9\x05\xF9\u14AA\n\xF9\x03\xFA\x03\xFA\x05" +
		"\xFA\u14AE\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u14B4\n\xFA\x03" +
		"\xFA\x05\xFA\u14B7\n\xFA\x03\xFB\x03\xFB\x03\xFC\x03\xFC\x03\xFD\x03\xFD" +
		"\x03\xFD\x03\xFD\x05\xFD\u14C1\n\xFD\x03\xFE\x03\xFE\x05\xFE\u14C5\n\xFE" +
		"\x03\xFF\x03\xFF\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03" +
		"\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03" +
		"\u0100\x03\u0100\x06\u0100\u14D7\n\u0100\r\u0100\x0E\u0100\u14D8\x03\u0101" +
		"\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x05\u0101\u14E0\n\u0101\x05\u0101" +
		"\u14E2\n\u0101\x03\u0102\x03\u0102\x03\u0102\x06\u0102\u14E7\n\u0102\r" +
		"\u0102\x0E\u0102\u14E8\x05\u0102\u14EB\n\u0102\x03\u0103\x03\u0103\x05" +
		"\u0103\u14EF\n\u0103\x03\u0104\x03\u0104\x03\u0104\x05\u0104\u14F4\n\u0104" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x05\u0105\u14FF\n\u0105\x03\u0106\x03\u0106\x03\u0106" +
		"\x05\u0106\u1504\n\u0106\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x05\u0108" +
		"\u150A\n\u0108\x03\u0109\x05\u0109\u150D\n\u0109\x03\u0109\x03\u0109\x05" +
		"\u0109\u1511\n\u0109\x03\u0109\x06\u0109\u1514\n\u0109\r\u0109\x0E\u0109" +
		"\u1515\x03\u0109\x05\u0109\u1519\n\u0109\x03\u0109\x03\u0109\x05\u0109" +
		"\u151D\n\u0109\x03\u0109\x03\u0109\x05\u0109\u1521\n\u0109\x05\u0109\u1523" +
		"\n\u0109\x03\u010A\x03\u010A\x03\u010B\x05\u010B\u1528\n\u010B\x03\u010B" +
		"\x03\u010B\x03\u010C\x05\u010C\u152D\n\u010C\x03\u010C\x03\u010C\x03\u010D" +
		"\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D" +
		"\x03\u010D\x05\u010D\u153A\n\u010D\x03\u010D\x05\u010D\u153D\n\u010D\x03" +
		"\u010E\x03\u010E\x05\u010E\u1541\n\u010E\x03\u010E\x05\u010E\u1544\n\u010E" +
		"\x03\u010E\x03\u010E\x03\u010E\x05\u010E\u1549\n\u010E\x03\u010E\x05\u010E" +
		"\u154C\n\u010E\x03\u010E\x03\u010E\x05\u010E\u1550\n\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x05\u010E\u1555\n\u010E\x03\u010E\x05\u010E\u1558\n\u010E" +
		"\x03\u010E\x03\u010E\x03\u010E\x05\u010E\u155D\n\u010E\x03\u010E\x05\u010E" +
		"\u1560\n\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x05\u010E\u1566" +
		"\n\u010E\x03\u010E\x05\u010E\u1569\n\u010E\x03\u010E\x03\u010E\x05\u010E" +
		"\u156D\n\u010E\x03\u010E\x05\u010E\u1570\n\u010E\x03\u010E\x05\u010E\u1573" +
		"\n\u010E\x03\u010E\x03\u010E\x05\u010E\u1577\n\u010E\x03\u010E\x05\u010E" +
		"\u157A\n\u010E\x03\u010E\x05\u010E\u157D\n\u010E\x03\u010E\x03\u010E\x05" +
		"\u010E\u1581\n\u010E\x03\u010E\x05\u010E\u1584\n\u010E\x03\u010E\x05\u010E" +
		"\u1587\n\u010E\x03\u010E\x05\u010E\u158A\n\u010E\x03\u010E\x03\u010E\x05" +
		"\u010E\u158E\n\u010E\x03\u010E\x05\u010E\u1591\n\u010E\x03\u010E\x05\u010E" +
		"\u1594\n\u010E\x03\u010E\x03\u010E\x03\u010E\x05\u010E\u1599\n\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x05\u010E\u159E\n\u010E\x03\u010E\x03\u010E" +
		"\x03\u010E\x05\u010E\u15A3\n\u010E\x03\u010E\x05\u010E\u15A6\n\u010E\x03" +
		"\u010E\x05\u010E\u15A9\n\u010E\x03\u010F\x03\u010F\x03\u010F\x03\u010F" +
		"\x07\u010F\u15AF\n\u010F\f\u010F\x0E\u010F\u15B2\v\u010F\x03\u010F\x03" +
		"\u010F\x03\u0110\x03\u0110\x05\u0110\u15B8\n\u0110\x03\u0110\x03\u0110" +
		"\x05\u0110\u15BC\n\u0110\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u15C1" +
		"\n\u0110\x03\u0110\x05\u0110\u15C4\n\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x05\u0110\u15C9\n\u0110\x03\u0110\x03\u0110\x05\u0110\u15CD\n\u0110\x05" +
		"\u0110\u15CF\n\u0110\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0113\x03\u0113" +
		"\x03\u0113\x03\u0113\x05\u0113\u15DF\n\u0113\x03\u0113\x03\u0113\x03\u0114" +
		"\x03\u0114\x03\u0114\x07\u0114\u15E6\n\u0114\f\u0114\x0E\u0114\u15E9\v" +
		"\u0114\x03\u0115\x03\u0115\x03\u0115\x07\u0115\u15EE\n\u0115\f\u0115\x0E" +
		"\u0115\u15F1\v\u0115\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x07\u0116" +
		"\u15F7\n\u0116\f\u0116\x0E\u0116\u15FA\v\u0116\x03\u0116\x03\u0116\x03" +
		"\u0117\x03\u0117\x03\u0117\x07\u0117\u1601\n\u0117\f\u0117\x0E\u0117\u1604" +
		"\v\u0117\x03\u0118\x03\u0118\x03\u0118\x07\u0118\u1609\n\u0118\f\u0118" +
		"\x0E\u0118\u160C\v\u0118\x03\u0119\x03\u0119\x03\u0119\x07\u0119\u1611" +
		"\n\u0119\f\u0119\x0E\u0119\u1614\v\u0119\x03\u011A\x03\u011A\x03\u011A" +
		"\x07\u011A\u1619\n\u011A\f\u011A\x0E\u011A\u161C\v\u011A\x03\u011B\x03" +
		"\u011B\x03\u011B\x07\u011B\u1621\n\u011B\f\u011B\x0E\u011B\u1624\v\u011B" +
		"\x03\u011C\x03\u011C\x05\u011C\u1628\n\u011C\x03\u011C\x03\u011C\x03\u011C" +
		"\x03\u011C\x03\u011C\x05\u011C\u162F\n\u011C\x05\u011C\u1631\n\u011C\x03" +
		"\u011D\x03\u011D\x03\u011D\x05\u011D\u1636\n\u011D\x03\u011D\x05\u011D" +
		"\u1639\n\u011D\x03\u011D\x03\u011D\x03\u011D\x05\u011D\u163E\n\u011D\x03" +
		"\u011D\x05\u011D\u1641\n\u011D\x03\u011E\x03\u011E\x05\u011E\u1645\n\u011E" +
		"\x03\u011F\x03\u011F\x03\u011F\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x05\u0121\u1653\n\u0121" +
		"\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x05\u0121\u165A\n\u0121" +
		"\x03\u0121\x03\u0121\x03\u0121\x05\u0121\u165F\n\u0121\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x06\u0122\u167F\n\u0122\r\u0122\x0E\u0122\u1680\x03\u0122\x03\u0122\x05" +
		"\u0122\u1685\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x06\u0122" +
		"\u168B\n\u0122\r\u0122\x0E\u0122\u168C\x03\u0122\x03\u0122\x05\u0122\u1691" +
		"\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03" +
		"\u0122\x05\u0122\u169A\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x05\u0122\u16A2\n\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x05\u0122\u16A7\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x05\u0122\u16AF\n\u0122\x03\u0122\x03\u0122\x03\u0122\x05\u0122" +
		"\u16B4\n\u0122\x03\u0122\x03\u0122\x03\u0122\x05\u0122\u16B9\n\u0122\x05" +
		"\u0122\u16BB\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x05\u0122\u16C4\n\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x05\u0122\u16C9\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x05\u0122\u16D1\n\u0122\x03\u0122\x03\u0122\x03\u0122\x05\u0122" +
		"\u16D6\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x05\u0122\u16DE\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x05\u0122\u16E6\n\u0122\x03\u0122\x05\u0122\u16E9\n\u0122\x03" +
		"\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03" +
		"\u0122\x05\u0122\u16F3\n\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
		"\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x05\u0122\u16FE\n\u0122" +
		"\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x07\u0124\u1709\n\u0124\f\u0124\x0E\u0124\u170C\v" +
		"\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x05\u0124\u1713" +
		"\n\u0124\x03\u0125\x03\u0125\x05\u0125\u1717\n\u0125\x03\u0126\x03\u0126" +
		"\x03\u0126\x05\u0126\u171C\n\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x05\u0126\u1725\n\u0126\x03\u0126\x05\u0126" +
		"\u1728\n\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x05\u0126\u1734\n\u0126\x03\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x05\u0126\u173C\n\u0126" +
		"\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x03\u0126\x07\u0126" +
		"\u1744\n\u0126\f\u0126\x0E\u0126\u1747\v\u0126\x05\u0126\u1749\n\u0126" +
		"\x03\u0126\x03\u0126\x05\u0126\u174D\n\u0126\x03\u0126\x03\u0126\x05\u0126" +
		"\u1751\n\u0126\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127" +
		"\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127" +
		"\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0127" +
		"\x03\u0127\x03\u0127\x03\u0127\x05\u0127\u176A\n\u0127\x03\u0128\x03\u0128" +
		"\x03\u0128\x03\u0128\x03\u0128\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x05\u0129\u1775\n\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x05\u0129\u177C\n\u0129\x07\u0129\u177E\n\u0129\f\u0129\x0E\u0129\u1781" +
		"\v\u0129\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x05\u012A\u1787\n\u012A" +
		"\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x05\u012B" +
		"\u178F\n\u012B\x03\u012B\x03\u012B\x03\u012B\x05\u012B\u1794\n\u012B\x03" +
		"\u012B\x03\u012B\x03\u012B\x03\u012B\x07\u012B\u179A\n\u012B\f\u012B\x0E" +
		"\u012B\u179D\v\u012B\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17A2\n\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x05\u012C\u17AC\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x05\u012C\u17B9\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C" +
		"\u17BF\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u17C5" +
		"\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03" +
		"\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03" +
		"\u012C\x05\u012C\u17D5\n\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
		"\x05\u012C\u17DB\n\u012C\x07\u012C\u17DD\n\u012C\f\u012C\x0E\u012C\u17E0" +
		"\v\u012C\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03" +
		"\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03" +
		"\u012D\x07\u012D\u17F0\n\u012D\f\u012D\x0E\u012D\u17F3\v\u012D\x03\u012D" +
		"\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x06\u012D" +
		"\u17FC\n\u012D\r\u012D\x0E\u012D\u17FD\x03\u012D\x03\u012D\x03\u012D\x03" +
		"\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03" +
		"\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x05\u012D\u180F\n\u012D" +
		"\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D" +
		"\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x07\u012D\u181C\n\u012D\f\u012D" +
		"\x0E\u012D\u181F\v\u012D\x03\u012E\x03\u012E\x03\u012F\x03\u012F\x03\u012F" +
		"\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
		"\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x05\u012F\u1831\n\u012F\x03\u0130" +
		"\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x05\u0130" +
		"\u183A\n\u0130\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131" +
		"\x03\u0131\x05\u0131\u1843\n\u0131\x03\u0132\x03\u0132\x03\u0133\x03\u0133" +
		"\x03\u0134\x03\u0134\x03\u0135\x03\u0135\x03\u0136\x03\u0136\x03\u0137" +
		"\x03\u0137\x03\u0138\x03\u0138\x03\u0139\x03\u0139\x03\u0139\x02\x02\x05" +
		"\u0254\u0256\u0258\u013A\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E" +
		"\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 " +
		"\x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02" +
		"<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02" +
		"X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02" +
		"t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02" +
		"\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02" +
		"\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02" +
		"\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02" +
		"\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02" +
		"\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02" +
		"\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02" +
		"\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02" +
		"\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02" +
		"\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02" +
		"\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02" +
		"\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02" +
		"\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02" +
		"\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02" +
		"\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02" +
		"\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02" +
		"\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02" +
		"\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02" +
		"\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02" +
		"\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02" +
		"\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02" +
		"\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02" +
		"\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02" +
		"\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02" +
		"\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02" +
		"\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02" +
		"\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02" +
		"\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02" +
		"\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02" +
		"\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02" +
		"\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02" +
		"\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02" +
		"\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02" +
		"\u0264\x02\u0266\x02\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02" +
		"\x02|\x04\x02$$\x84\x84\x04\x02\u01B3\u01B3\u01B8\u01B8\x05\x02>>\x8B" +
		"\x8B\x9F\x9F\x05\x02\'\'\u0131\u0131\u016F\u016F\x06\x02\'\'\u0150\u0150" +
		"\u01B2\u01B2\u01F6\u01F6\x04\x02\u01A9\u01A9\u03DF\u03DF\x04\x02EE}}\x04" +
		"\x02\x0F\x0F\u0101\u0101\x05\x02))KK\xA2\xA2\x04\x02\u015D\u015D\u01CA" +
		"\u01CA\x05\x02\u01A1\u01A1\u021C\u021C\u0222\u0222\x04\x02\u0137\u0137" +
		"\u0174\u0174\x04\x02\u0113\u0113\u0182\u0182\x04\x02\u0111\u0111\u0166" +
		"\u0166\x05\x02FFJJnn\x05\x02\'\'\u0141\u0141\u015B\u015B\x05\x02\'\'\u013D" +
		"\u013D\u027E\u027E\x04\x02\u0210\u0210\u0230\u0230\x04\x02GGQQ\x05\x02" +
		"\u015F\u015F\u01C1\u01C1\u01F8\u01F8\x04\x02>>\x8B\x8B\x03\x02\u0117\u0118" +
		"\x03\x02\u03D5\u03D6\x04\x02\u03DF\u03DF\u03E7\u03E7\x05\x02\u015A\u015A" +
		"\u017D\u017D\u01B0\u01B0\x04\x02\'\'\u03D5\u03D6\b\x02\'\'\u0124\u0124" +
		"\u0126\u0126\u0141\u0141\u015B\u015B\u01D7\u01D7\x03\x02\u03D6\u03D7\x04" +
		"\x02\x07\x07//\x04\x02\r\r\x99\x99\x04\x02\xAA\xAA\u0234\u0234\x04\x02" +
		"\x14\x14\x7F\x7F\x05\x02((CC^^\x04\x02^^\u0128\u0128\x04\x02\u011F\u011F" +
		"\u0157\u0157\x04\x02ZZ\u01EE\u01EE\x04\x02((^^\x04\x02\b\b--\x04\x02\xA6" +
		"\xA6\u022D\u022D\x06\x02\u015A\u015A\u017D\u017D\u01AF\u01AF\u01CD\u01CD" +
		"\x04\x02\u015A\u015A\u01AF\u01AF\x04\x02\x0E\x0E**\x05\x02;;EE\xA4\xA4" +
		"\x04\x02!!II\x04\x02VV\x82\x82\x04\x02\b\b-.\x03\x02\u0205\u0206\x04\x02" +
		"\u0162\u0162\u01F4\u01F4\x04\x02\xC4\xC4\u0185\u0185\x07\x02__\u018A\u018B" +
		"\u018D\u018D\u0191\u0199\u01D9\u01D9\x06\x02\u0187\u0188\u018C\u018C\u018E" +
		"\u018F\u01DA\u01DA\x05\x02``\u0186\u0186\u0190\u0190\x04\x02\u0176\u0176" +
		"\u0207\u0207\x04\x02\u0201\u0201\u0203\u0203\x04\x02\u010B\u010B\u0208" +
		"\u0208\x04\x02PP\u01E8\u01E8\x04\x02//\u0135\u0135\x05\x02\x1E\x1E66\x9D" +
		"\x9D\x05\x02ss\x96\x96\u0160\u0160\x04\x02\\\\\xA0\xA0\x04\x02\u011B\u011B" +
		"\u01F9\u01F9\x04\x02%%\u022F\u022F\x04\x02ff\u0182\u0182\x04\x02\u0153" +
		"\u0153\u01D3\u01D3\x06\x02\xB2\xB2\xB4\xB4\xB8\xB8\u0211\u0211\x04\x02" +
		"\u03B6\u03B6\u03C7\u03C7\x04\x02\u010C\u010C\u01DB\u01DB\x04\x02==FF\b" +
		"\x02ss\x96\x96\x9B\x9B\u014C\u014C\u0160\u0160\u022F\u022F\x04\x02\u01A8" +
		"\u01A8\u020D\u020D\x04\x02\u0149\u0149\u0233\u0233\x04\x02ss\u0160\u0160" +
		"\x05\x02GGRR\u016D\u016D\x05\x02\u0162\u0162\u0182\u0182\u01F4\u01F4\x04" +
		"\x02\u020D\u020D\u022E\u022E\x04\x02\u0129\u0129\u01D2\u01D2\b\x02\xC4" +
		"\xC4\u0146\u0146\u0148\u0148\u0161\u0161\u01D8\u01D8\u01FA\u01FA\x04\x02" +
		"*+77\x05\x02\u0153\u0153\u01C3\u01C3\u02DA\u02DA\x04\x02\u017A\u017A\u021E" +
		"\u021E\v\x02\u011A\u011A\u0121\u0121\u012B\u012D\u01A2\u01A2\u01AA\u01AA" +
		"\u0212\u0212\u0219\u0219\u02AA\u02AA\u0350\u0350\x05\x02\u03DF\u03DF\u03E7" +
		"\u03E7\u03E9\u03E9\x03\x02\u03EA\u03EB\x05\x02\u0279\u0284\u03DF\u03DF" +
		"\u03E7\u03E8\x04\x02\u03D5\u03D7\u03E0\u03E0\x04\x0288\x9C\x9C\x04\x02" +
		"gg\u03E3\u03E3\x05\x02\xC0\xC2\xCA\xCD\u01AD\u01AD\x04\x02\x18\x18\xC1" +
		"\xC1\x04\x02\x18\x18\xC0\xC0\x03\x02\xAE\xB3\x04\x02\xA1\xA1\u01F7\u01F7" +
		"\x04\x02\xB7\xBA\u015B\u015B\x06\x02\xBB\xBB\xC6\xC9\xD0\xD0\u010F\u0110" +
		"\x05\x02\xBC\xBF\xC4\xC5\u010D\u010D\x04\x02\x87\x87\xCE\xCE\x04\x02\u017A" +
		"\u017A\u0289\u0291\x04\x02\xC4\xC4\u01AD\u01AD\x05\x02\xBB\xBC\xBE\xBE" +
		"\u017A\u017A\x04\x02\xEE\xEF\xF5\xF5\x04\x02\"\"\xEC\xEF\x03\x02\xF8\xF9" +
		"\x05\x02\x11\x11TT\x9A\x9A\x04\x02\xC0\xC0\xC4\xC4\x04\x02\xBB\xBC\xBE" +
		"\xBE\x05\x02\x0E\x0E**\u0346\u0346\x05\x02\xDC\xDC\xE2\xE3\xE8\xE8\x05" +
		"\x02\xDD\xDF\xE4\xE7\xE9\xEB\x04\x02\u01B6\u01B6\u01C4\u01C4\x04\x02e" +
		"e\u03CA\u03CA\x05\x0288\x9C\x9C\u0226\u0226\x04\x02yy\x83\x83\x05\x02" +
		"\b\b\u0104\u0104\u01FD\u01FD\x06\x02ee\u03C2\u03C2\u03C4\u03C4\u03CA\u03CB" +
		"\x03\x02\u03BF\u03C6\x03\x02\u0251\u0278\x03\x02\u0285\u0288\x03\x02\u0247" +
		"\u024F\x03\x02\u023F\u0246\x05\x02\xBB\xBF\xCB\xCB\xCE\xCE\v\x02\xD0\xD0" +
		"\xFF\u0172\u0174\u020F\u0211\u022F\u0232\u0239\u023E\u023E\u027E\u027E" +
		"\u02AA\u02AA\u0350\u0350\x11\x02";
	private static readonly _serializedATNSegment3: string =
		"$$VV\x82\x82\xBB\xBD\xBF\xBF\xE0\xE0\xF7\xF7\u0173\u0173\u0231\u0231\u023F" +
		"\u0246\u0250\u0250\u0289\u0289\u028C\u02A9\u02AB\u034F\u0351\u03B5\x02" +
		"\u1C83\x02\u0273\x03\x02\x02\x02\x04\u0284\x03\x02\x02\x02\x06\u0298\x03" +
		"\x02\x02\x02\b\u029A\x03\x02\x02\x02\n\u02BF\x03\x02\x02\x02\f\u02CB\x03" +
		"\x02\x02\x02\x0E\u02D6\x03\x02\x02\x02\x10\u02E7\x03\x02\x02\x02\x12\u02EC" +
		"\x03\x02\x02\x02\x14\u02F8\x03\x02\x02\x02\x16\u0313\x03\x02\x02\x02\x18" +
		"\u031A\x03\x02\x02\x02\x1A\u031C\x03\x02\x02\x02\x1C\u0328\x03\x02\x02" +
		"\x02\x1E\u0346\x03\x02\x02\x02 \u036A\x03\x02\x02\x02\"\u039D\x03\x02" +
		"\x02\x02$\u03B7\x03\x02\x02\x02&\u03D5\x03\x02\x02\x02(\u0436\x03\x02" +
		"\x02\x02*\u0438\x03\x02\x02\x02,\u044A\x03\x02\x02\x02.\u0487\x03\x02" +
		"\x02\x020\u049A\x03\x02\x02\x022\u04D5\x03\x02\x02\x024\u04D7\x03\x02" +
		"\x02\x026\u0503\x03\x02\x02\x028\u0509\x03\x02\x02\x02:\u050B\x03\x02" +
		"\x02\x02<\u0520\x03\x02\x02\x02>\u0527\x03\x02\x02\x02@\u0529\x03\x02" +
		"\x02\x02B\u0539\x03\x02\x02\x02D\u053C\x03\x02\x02\x02F\u0541\x03\x02" +
		"\x02\x02H\u055B\x03\x02\x02\x02J\u056B\x03\x02\x02\x02L\u056D\x03\x02" +
		"\x02\x02N\u057D\x03\x02\x02\x02P\u057F\x03\x02\x02\x02R\u05AE\x03\x02" +
		"\x02\x02T\u05F5\x03\x02\x02\x02V\u05F7\x03\x02\x02\x02X\u0613\x03\x02" +
		"\x02\x02Z\u061B\x03\x02\x02\x02\\\u0639\x03\x02\x02\x02^\u06CB\x03\x02" +
		"\x02\x02`\u06CD\x03\x02\x02\x02b\u06D0\x03\x02\x02\x02d\u071A\x03\x02" +
		"\x02\x02f\u0731\x03\x02\x02\x02h\u07B6\x03\x02\x02\x02j\u07BB\x03\x02" +
		"\x02\x02l\u07BD\x03\x02\x02\x02n\u07C7\x03\x02\x02\x02p\u07FC\x03\x02" +
		"\x02\x02r\u0810\x03\x02\x02\x02t\u0812\x03\x02\x02\x02v\u0835\x03\x02" +
		"\x02\x02x\u083E\x03\x02\x02\x02z\u0845\x03\x02\x02\x02|\u085C\x03\x02" +
		"\x02\x02~\u0865\x03\x02\x02\x02\x80\u0874\x03\x02\x02\x02\x82\u088A\x03" +
		"\x02\x02\x02\x84\u089E\x03\x02\x02\x02\x86\u0A21\x03\x02\x02\x02\x88\u0A23" +
		"\x03\x02\x02\x02\x8A\u0A2A\x03\x02\x02\x02\x8C\u0A31\x03\x02\x02\x02\x8E" +
		"\u0A48\x03\x02\x02\x02\x90\u0A50\x03\x02\x02\x02\x92\u0A57\x03\x02\x02" +
		"\x02\x94\u0A5E\x03\x02\x02\x02\x96\u0A65\x03\x02\x02\x02\x98\u0A71\x03" +
		"\x02\x02\x02\x9A\u0A7B\x03\x02\x02\x02\x9C\u0A82\x03\x02\x02\x02\x9E\u0A92" +
		"\x03\x02\x02\x02\xA0\u0A9C\x03\x02\x02\x02\xA2\u0AA0\x03\x02\x02\x02\xA4" +
		"\u0AA6\x03\x02\x02\x02\xA6\u0AB2\x03\x02\x02\x02\xA8\u0AB4\x03\x02\x02" +
		"\x02\xAA\u0ABB\x03\x02\x02\x02\xAC\u0ABD\x03\x02\x02\x02\xAE\u0AEF\x03" +
		"\x02\x02\x02\xB0\u0B39\x03\x02\x02\x02\xB2\u0B74\x03\x02\x02\x02\xB4\u0BCC" +
		"\x03\x02\x02\x02\xB6\u0BD0\x03\x02\x02\x02\xB8\u0BE1\x03\x02\x02\x02\xBA" +
		"\u0BE3\x03\x02\x02\x02\xBC\u0BEB\x03\x02\x02\x02\xBE\u0BF3\x03\x02\x02" +
		"\x02\xC0\u0BF5\x03\x02\x02\x02\xC2\u0C13\x03\x02\x02\x02\xC4\u0C4A\x03" +
		"\x02\x02\x02\xC6\u0C53\x03\x02\x02\x02\xC8\u0C67\x03\x02\x02\x02\xCA\u0C73" +
		"\x03\x02\x02\x02\xCC\u0C77\x03\x02\x02\x02\xCE\u0C98\x03\x02\x02\x02\xD0" +
		"\u0CAD\x03\x02\x02\x02\xD2\u0CB7\x03\x02\x02\x02\xD4\u0CBB\x03\x02\x02" +
		"\x02\xD6\u0CD4\x03\x02\x02\x02\xD8\u0CFE\x03\x02\x02\x02\xDA\u0D00\x03" +
		"\x02\x02\x02\xDC\u0D0F\x03\x02\x02\x02\xDE\u0D3D\x03\x02\x02\x02\xE0\u0D47" +
		"\x03\x02\x02\x02\xE2\u0D51\x03\x02\x02\x02\xE4\u0D7B\x03\x02\x02\x02\xE6" +
		"\u0D7D\x03\x02\x02\x02\xE8\u0D8E\x03\x02\x02\x02\xEA\u0D94\x03\x02\x02" +
		"\x02\xEC\u0DA4\x03\x02\x02\x02\xEE\u0DA8\x03\x02\x02\x02\xF0\u0DCE\x03" +
		"\x02\x02\x02\xF2\u0DF4\x03\x02\x02\x02\xF4\u0E02\x03\x02\x02\x02\xF6\u0E0A" +
		"\x03\x02\x02\x02\xF8\u0E0C\x03\x02\x02\x02\xFA\u0E26\x03\x02\x02\x02\xFC" +
		"\u0E2A\x03\x02\x02\x02\xFE\u0E39\x03\x02\x02\x02\u0100\u0E3B\x03\x02\x02" +
		"\x02\u0102\u0E47\x03\x02\x02\x02\u0104\u0E4B\x03\x02\x02\x02\u0106\u0E5C" +
		"\x03\x02\x02\x02\u0108\u0E6D\x03\x02\x02\x02\u010A\u0E70\x03\x02\x02\x02" +
		"\u010C\u0E7A\x03\x02\x02\x02\u010E\u0E7E\x03\x02\x02\x02\u0110\u0E88\x03" +
		"\x02\x02\x02\u0112\u0E8B\x03\x02\x02\x02\u0114\u0E90\x03\x02\x02\x02\u0116" +
		"\u0EA4\x03\x02\x02\x02\u0118\u0EA6\x03\x02\x02\x02\u011A\u0EB7\x03\x02" +
		"\x02\x02\u011C\u0EC0\x03\x02\x02\x02\u011E\u0EC9\x03\x02\x02\x02\u0120" +
		"\u0ECB\x03\x02\x02\x02\u0122\u0ED9\x03\x02\x02\x02\u0124\u0EE4\x03\x02" +
		"\x02\x02\u0126\u0EED\x03\x02\x02\x02\u0128\u0EF0\x03\x02\x02\x02\u012A" +
		"\u0EF8\x03\x02\x02\x02\u012C\u0F11\x03\x02\x02\x02\u012E\u0F1D\x03\x02" +
		"\x02\x02\u0130\u0F20\x03\x02\x02\x02\u0132\u0F40\x03\x02\x02\x02\u0134" +
		"\u0F42\x03\x02\x02\x02\u0136\u0F44\x03\x02\x02\x02\u0138\u0F46\x03\x02" +
		"\x02\x02\u013A\u0F48\x03\x02\x02\x02\u013C\u0F7D\x03\x02\x02\x02\u013E" +
		"\u0F7F\x03\x02\x02\x02\u0140\u0F85\x03\x02\x02\x02\u0142\u0F99\x03\x02" +
		"\x02\x02\u0144\u0FA7\x03\x02\x02\x02\u0146\u0FB2\x03\x02\x02\x02\u0148" +
		"\u0FB4\x03\x02\x02\x02\u014A\u0FBA\x03\x02\x02\x02\u014C\u0FC4\x03\x02" +
		"\x02\x02\u014E\u0FC8\x03\x02\x02\x02\u0150\u0FCF\x03\x02\x02\x02\u0152" +
		"\u0FD3\x03\x02\x02\x02\u0154\u0FD9\x03\x02\x02\x02\u0156\u0FE0\x03\x02" +
		"\x02\x02\u0158\u0FE6\x03\x02\x02\x02\u015A\u0FEC\x03\x02\x02\x02\u015C" +
		"\u0FF1\x03\x02\x02\x02\u015E\u1020\x03\x02\x02\x02\u0160\u1035\x03\x02" +
		"\x02\x02\u0162\u104E\x03\x02\x02\x02\u0164\u1051\x03\x02\x02\x02\u0166" +
		"\u1057\x03\x02\x02\x02\u0168\u1067\x03\x02\x02\x02\u016A\u1076\x03\x02" +
		"\x02\x02\u016C\u107C\x03\x02\x02\x02\u016E\u109A\x03\x02\x02\x02\u0170" +
		"\u109C\x03\x02\x02\x02\u0172\u10A3\x03\x02\x02\x02\u0174\u10AF\x03\x02" +
		"\x02\x02\u0176\u10B5\x03\x02\x02\x02\u0178\u10CE\x03\x02\x02\x02\u017A" +
		"\u10D2\x03\x02\x02\x02\u017C\u10D6\x03\x02\x02\x02\u017E\u10E1\x03\x02" +
		"\x02\x02\u0180\u111F\x03\x02\x02\x02\u0182\u1157\x03\x02\x02\x02\u0184" +
		"\u1159\x03\x02\x02\x02\u0186\u1166\x03\x02\x02\x02\u0188\u1198\x03\x02" +
		"\x02\x02\u018A\u11AA\x03\x02\x02\x02\u018C\u11DC\x03\x02\x02\x02\u018E" +
		"\u11DE\x03\x02\x02\x02\u0190\u11EB\x03\x02\x02\x02\u0192\u11F6\x03\x02" +
		"\x02\x02\u0194\u1211\x03\x02\x02\x02\u0196\u121B\x03\x02\x02\x02\u0198" +
		"\u1225\x03\x02\x02\x02\u019A\u1227\x03\x02\x02\x02\u019C\u1231\x03\x02" +
		"\x02\x02\u019E\u1234\x03\x02\x02\x02\u01A0\u1266\x03\x02\x02\x02\u01A2" +
		"\u1278\x03\x02\x02\x02\u01A4\u127A\x03\x02\x02\x02\u01A6\u127E\x03\x02" +
		"\x02\x02\u01A8\u1285\x03\x02\x02\x02\u01AA\u128E\x03\x02\x02\x02\u01AC" +
		"\u1294\x03\x02\x02\x02\u01AE\u129B\x03\x02\x02\x02\u01B0\u12B1\x03\x02" +
		"\x02\x02\u01B2\u12B3\x03\x02\x02\x02\u01B4\u12BE\x03\x02\x02\x02\u01B6" +
		"\u12C4\x03\x02\x02\x02\u01B8\u12F2\x03\x02\x02\x02\u01BA\u138B\x03\x02" +
		"\x02\x02\u01BC\u1397\x03\x02\x02\x02\u01BE\u13A6\x03\x02\x02\x02\u01C0" +
		"\u13AC\x03\x02\x02\x02\u01C2\u13BF\x03\x02\x02\x02\u01C4\u13C9\x03\x02" +
		"\x02\x02\u01C6\u13D7\x03\x02\x02\x02\u01C8\u13D9\x03\x02\x02\x02\u01CA" +
		"\u13DC\x03\x02\x02\x02\u01CC\u13F2\x03\x02\x02\x02\u01CE\u13FE\x03\x02" +
		"\x02\x02\u01D0\u1407\x03\x02\x02\x02\u01D2\u1413\x03\x02\x02\x02\u01D4" +
		"\u1417\x03\x02\x02\x02\u01D6\u1419\x03\x02\x02\x02\u01D8\u1441\x03\x02" +
		"\x02\x02\u01DA\u1448\x03\x02\x02\x02\u01DC\u144A\x03\x02\x02\x02\u01DE" +
		"\u1461\x03\x02\x02\x02\u01E0\u1467\x03\x02\x02\x02\u01E2\u146F\x03\x02" +
		"\x02\x02\u01E4\u1472\x03\x02\x02\x02\u01E6\u1475\x03\x02\x02\x02\u01E8" +
		"\u148A\x03\x02\x02\x02\u01EA\u149A\x03\x02\x02\x02\u01EC\u149C\x03\x02" +
		"\x02\x02\u01EE\u14A2\x03\x02\x02\x02\u01F0\u14A4\x03\x02\x02\x02\u01F2" +
		"\u14AD\x03\x02\x02\x02\u01F4\u14B8\x03\x02\x02\x02\u01F6\u14BA\x03\x02" +
		"\x02\x02\u01F8\u14C0\x03\x02\x02\x02\u01FA\u14C4\x03\x02\x02\x02\u01FC" +
		"\u14C6\x03\x02\x02\x02\u01FE\u14C8\x03\x02\x02\x02\u0200\u14DA\x03\x02" +
		"\x02\x02\u0202\u14EA\x03\x02\x02\x02\u0204\u14EE\x03\x02\x02\x02\u0206" +
		"\u14F3\x03\x02\x02\x02\u0208\u14FE\x03\x02\x02\x02\u020A\u1503\x03\x02" +
		"\x02\x02\u020C\u1505\x03\x02\x02\x02\u020E\u1509\x03\x02\x02\x02\u0210" +
		"\u1522\x03\x02\x02\x02\u0212\u1524\x03\x02\x02\x02\u0214\u1527\x03\x02" +
		"\x02\x02\u0216\u152C\x03\x02\x02\x02\u0218\u153C\x03\x02\x02\x02\u021A" +
		"\u15A8\x03\x02\x02\x02\u021C\u15AA\x03\x02\x02\x02\u021E\u15CE\x03\x02" +
		"\x02\x02\u0220\u15D0\x03\x02\x02\x02\u0222\u15D4\x03\x02\x02\x02\u0224" +
		"\u15DA\x03\x02\x02\x02\u0226\u15E2\x03\x02\x02\x02\u0228\u15EA\x03\x02" +
		"\x02\x02\u022A\u15F2\x03\x02\x02\x02\u022C\u15FD\x03\x02\x02\x02\u022E" +
		"\u1605\x03\x02\x02\x02\u0230\u160D\x03\x02\x02\x02\u0232\u1615\x03\x02" +
		"\x02\x02\u0234\u161D\x03\x02\x02\x02\u0236\u1630\x03\x02\x02\x02\u0238" +
		"\u1640\x03\x02\x02\x02\u023A\u1644\x03\x02\x02\x02\u023C\u1646\x03\x02" +
		"\x02\x02\u023E\u1649\x03\x02\x02\x02\u0240\u165E\x03\x02\x02\x02\u0242" +
		"\u16FD\x03\x02\x02\x02\u0244\u16FF\x03\x02\x02\x02\u0246\u1712\x03\x02" +
		"\x02\x02\u0248\u1714\x03\x02\x02\x02\u024A\u1750\x03\x02\x02\x02\u024C" +
		"\u1769\x03\x02\x02\x02\u024E\u176B\x03\x02\x02\x02\u0250\u1774\x03\x02" +
		"\x02\x02\u0252\u1786\x03\x02\x02\x02\u0254\u1793\x03\x02\x02\x02\u0256" +
		"\u179E\x03\x02\x02\x02\u0258\u180E\x03\x02\x02\x02\u025A\u1820\x03\x02" +
		"\x02\x02\u025C\u1830\x03\x02\x02\x02\u025E\u1839\x03\x02\x02\x02\u0260" +
		"\u1842\x03\x02\x02\x02\u0262\u1844\x03\x02\x02\x02\u0264\u1846\x03\x02" +
		"\x02\x02\u0266\u1848\x03\x02\x02\x02\u0268\u184A\x03\x02\x02\x02\u026A" +
		"\u184C\x03\x02\x02\x02\u026C\u184E\x03\x02\x02\x02\u026E\u1850\x03\x02" +
		"\x02\x02\u0270\u1852\x03\x02\x02\x02\u0272\u0274\x05\x04\x03\x02\u0273" +
		"\u0272\x03\x02\x02\x02\u0273\u0274\x03\x02\x02\x02\u0274\u0276\x03\x02" +
		"\x02\x02\u0275\u0277\x07\u03C3\x02\x02\u0276\u0275\x03\x02\x02\x02\u0276" +
		"\u0277\x03\x02\x02\x02\u0277\u0278\x03\x02\x02\x02\u0278\u0279\x07\x02" +
		"\x02\x03\u0279\x03\x03\x02\x02\x02\u027A\u027C\x05\x06\x04\x02\u027B\u027D" +
		"\x07\u03C3\x02\x02\u027C\u027B\x03\x02\x02\x02\u027C\u027D\x03\x02\x02" +
		"\x02\u027D\u027F\x03\x02\x02\x02\u027E\u0280\x07\u03D3\x02\x02\u027F\u027E" +
		"\x03\x02\x02\x02\u027F\u0280\x03\x02\x02\x02\u0280\u0283\x03\x02\x02\x02" +
		"\u0281\u0283\x05\b\x05\x02\u0282\u027A\x03\x02\x02\x02\u0282\u0281\x03" +
		"\x02\x02\x02\u0283\u0286\x03\x02\x02\x02\u0284\u0282\x03\x02\x02\x02\u0284" +
		"\u0285\x03\x02\x02\x02\u0285\u028F\x03\x02\x02\x02\u0286\u0284\x03\x02" +
		"\x02\x02\u0287\u028C\x05\x06\x04\x02\u0288\u028A\x07\u03C3\x02\x02\u0289" +
		"\u0288\x03\x02\x02\x02\u0289\u028A\x03\x02\x02\x02\u028A\u028B\x03\x02" +
		"\x02\x02\u028B\u028D\x07\u03D3\x02\x02\u028C\u0289\x03\x02\x02\x02\u028C" +
		"\u028D\x03\x02\x02\x02\u028D\u0290\x03\x02\x02\x02\u028E\u0290\x05\b\x05" +
		"\x02\u028F\u0287\x03\x02\x02\x02\u028F\u028E\x03\x02\x02\x02\u0290\x05" +
		"\x03\x02\x02\x02\u0291\u0299\x05\n\x06\x02\u0292\u0299\x05\f\x07\x02\u0293" +
		"\u0299\x05\x0E\b\x02\u0294\u0299\x05\x10\t\x02\u0295\u0299\x05\x12\n\x02" +
		"\u0296\u0299\x05\x16\f\x02\u0297\u0299\x05\x18\r\x02\u0298\u0291\x03\x02" +
		"\x02\x02\u0298\u0292\x03\x02\x02\x02\u0298\u0293\x03\x02\x02\x02\u0298" +
		"\u0294\x03\x02\x02\x02\u0298\u0295\x03\x02\x02\x02\u0298\u0296\x03\x02" +
		"\x02\x02\u0298\u0297\x03\x02\x02\x02\u0299\x07\x03\x02\x02\x02\u029A\u029B" +
		"\x07\u03D3\x02\x02\u029B\t\x03\x02\x02\x02\u029C\u02C0\x05\x1A\x0E\x02" +
		"\u029D\u02C0\x05\x1C\x0F\x02\u029E\u02C0\x05\x1E\x10\x02\u029F\u02C0\x05" +
		" \x11\x02\u02A0\u02C0\x05\"\x12\x02\u02A1\u02C0\x05$\x13\x02\u02A2\u02C0" +
		"\x05&\x14\x02\u02A3\u02C0\x05(\x15\x02\u02A4\u02C0\x05*\x16\x02\u02A5" +
		"\u02C0\x05,\x17\x02\u02A6\u02C0\x05.\x18\x02\u02A7\u02C0\x050\x19\x02" +
		"\u02A8\u02C0\x05r:\x02\u02A9\u02C0\x05t;\x02\u02AA\u02C0\x05v<\x02\u02AB" +
		"\u02C0\x05x=\x02\u02AC\u02C0\x05z>\x02\u02AD\u02C0\x05|?\x02\u02AE\u02C0" +
		"\x05~@\x02\u02AF\u02C0\x05\x80A\x02\u02B0\u02C0\x05\x82B\x02\u02B1\u02C0" +
		"\x05\x84C\x02\u02B2\u02C0\x05\x88E\x02\u02B3\u02C0\x05\x8AF\x02\u02B4" +
		"\u02C0\x05\x8CG\x02\u02B5\u02C0\x05\x8EH\x02\u02B6\u02C0\x05\x90I\x02" +
		"\u02B7\u02C0\x05\x92J\x02\u02B8\u02C0\x05\x94K\x02\u02B9\u02C0\x05\x96" +
		"L\x02\u02BA\u02C0\x05\x98M\x02\u02BB\u02C0\x05\x9AN\x02\u02BC\u02C0\x05" +
		"\x9CO\x02\u02BD\u02C0\x05\x9EP\x02\u02BE\u02C0\x05\xA2R\x02\u02BF\u029C" +
		"\x03\x02\x02\x02\u02BF\u029D\x03\x02\x02\x02\u02BF\u029E\x03\x02\x02\x02" +
		"\u02BF\u029F\x03\x02\x02\x02\u02BF\u02A0\x03\x02\x02\x02\u02BF\u02A1\x03" +
		"\x02\x02\x02\u02BF\u02A2\x03\x02\x02\x02\u02BF\u02A3\x03\x02\x02\x02\u02BF" +
		"\u02A4\x03\x02\x02\x02\u02BF\u02A5\x03\x02\x02\x02\u02BF\u02A6\x03\x02" +
		"\x02\x02\u02BF\u02A7\x03\x02\x02\x02\u02BF\u02A8\x03\x02\x02\x02\u02BF" +
		"\u02A9\x03\x02\x02\x02\u02BF\u02AA\x03\x02\x02\x02\u02BF\u02AB\x03\x02" +
		"\x02\x02\u02BF\u02AC\x03\x02\x02\x02\u02BF\u02AD\x03\x02\x02\x02\u02BF" +
		"\u02AE\x03\x02\x02\x02\u02BF\u02AF\x03\x02\x02\x02\u02BF\u02B0\x03\x02" +
		"\x02\x02\u02BF\u02B1\x03\x02\x02\x02\u02BF\u02B2\x03\x02\x02\x02\u02BF" +
		"\u02B3\x03\x02\x02\x02\u02BF\u02B4\x03\x02\x02\x02\u02BF\u02B5\x03\x02" +
		"\x02\x02\u02BF\u02B6\x03\x02\x02\x02\u02BF\u02B7\x03\x02\x02\x02\u02BF" +
		"\u02B8\x03\x02\x02\x02\u02BF\u02B9\x03\x02\x02\x02\u02BF\u02BA\x03\x02" +
		"\x02\x02\u02BF\u02BB\x03\x02\x02\x02\u02BF\u02BC\x03\x02\x02\x02\u02BF" +
		"\u02BD\x03\x02\x02\x02\u02BF\u02BE\x03\x02\x02\x02\u02C0\v\x03\x02\x02" +
		"\x02\u02C1\u02CC\x05\xB4[\x02\u02C2\u02CC\x05\xACW\x02\u02C3\u02CC\x05" +
		"\xB6\\\x02\u02C4\u02CC\x05\xA6T\x02\u02C5\u02CC\x05\xB2Z\x02\u02C6\u02CC" +
		"\x05\xA4S\x02\u02C7\u02CC\x05\xAEX\x02\u02C8\u02CC\x05\xB0Y\x02\u02C9" +
		"\u02CC\x05\xA8U\x02\u02CA\u02CC\x05\xAAV\x02\u02CB\u02C1\x03\x02\x02\x02" +
		"\u02CB\u02C2\x03\x02\x02\x02\u02CB\u02C3\x03\x02\x02\x02\u02CB\u02C4\x03" +
		"\x02\x02\x02\u02CB\u02C5\x03\x02\x02\x02\u02CB\u02C6\x03\x02\x02\x02\u02CB" +
		"\u02C7\x03\x02\x02\x02\u02CB\u02C8\x03\x02\x02\x02\u02CB\u02C9\x03\x02" +
		"\x02\x02\u02CB\u02CA\x03\x02\x02\x02\u02CC\r\x03\x02\x02\x02\u02CD\u02D7" +
		"\x05\u0100\x81\x02\u02CE\u02D7\x05\u0102\x82\x02\u02CF\u02D7\x05\u0104" +
		"\x83\x02\u02D0\u02D7\x05\u0106\x84\x02\u02D1\u02D7\x05\u0108\x85\x02\u02D2" +
		"\u02D7\x05\u010A\x86\x02\u02D3\u02D7\x05\u010C\x87\x02\u02D4\u02D7\x05" +
		"\u010E\x88\x02\u02D5\u02D7\x05\u0110\x89\x02\u02D6\u02CD\x03\x02\x02\x02" +
		"\u02D6\u02CE\x03\x02\x02\x02\u02D6\u02CF\x03\x02\x02\x02\u02D6\u02D0\x03" +
		"\x02\x02\x02\u02D6\u02D1\x03\x02\x02\x02\u02D6\u02D2\x03\x02\x02\x02\u02D6" +
		"\u02D3\x03\x02\x02\x02\u02D6\u02D4\x03\x02\x02\x02\u02D6\u02D5\x03\x02" +
		"\x02\x02\u02D7\x0F\x03\x02\x02\x02\u02D8\u02E8\x05\u0120\x91\x02\u02D9" +
		"\u02E8\x05\u0122\x92\x02\u02DA\u02E8\x05\u0124\x93\x02\u02DB\u02E8\x05" +
		"\u0126\x94\x02\u02DC\u02E8\x05\u0128\x95\x02\u02DD\u02E8\x05\u012A\x96" +
		"\x02\u02DE\u02E8\x05\u012C\x97\x02\u02DF\u02E8\x05\u012E\x98\x02\u02E0" +
		"\u02E8\x05\u0130\x99\x02\u02E1\u02E8\x05\u0148\xA5\x02\u02E2\u02E8\x05" +
		"\u014A\xA6\x02\u02E3\u02E8\x05\u014C\xA7\x02\u02E4\u02E8\x05\u014E\xA8" +
		"\x02\u02E5\u02E8\x05\u0150\xA9\x02\u02E6\u02E8\x05\u0152\xAA\x02\u02E7" +
		"\u02D8\x03\x02\x02\x02\u02E7\u02D9\x03\x02\x02\x02\u02E7\u02DA\x03\x02" +
		"\x02\x02\u02E7\u02DB\x03\x02\x02\x02\u02E7\u02DC\x03\x02\x02\x02\u02E7" +
		"\u02DD\x03\x02\x02\x02\u02E7\u02DE\x03\x02\x02\x02\u02E7\u02DF\x03\x02" +
		"\x02\x02\u02E7\u02E0\x03\x02\x02\x02\u02E7\u02E1\x03\x02\x02\x02\u02E7" +
		"\u02E2\x03\x02\x02\x02\u02E7\u02E3\x03\x02\x02\x02\u02E7\u02E4\x03\x02" +
		"\x02\x02\u02E7\u02E5\x03\x02\x02\x02\u02E7\u02E6\x03\x02\x02\x02\u02E8" +
		"\x11\x03\x02\x02\x02\u02E9\u02ED\x05\u0154\xAB\x02\u02EA\u02ED\x05\u0156" +
		"\xAC\x02\u02EB\u02ED\x05\u0158\xAD\x02\u02EC\u02E9\x03\x02\x02\x02\u02EC" +
		"\u02EA\x03\x02\x02\x02\u02EC\u02EB\x03\x02\x02\x02\u02ED\x13\x03\x02\x02" +
		"\x02\u02EE\u02F9\x05\u015C\xAF\x02\u02EF\u02F9\x05\u015E\xB0\x02\u02F0" +
		"\u02F9\x05\u0160\xB1\x02\u02F1\u02F9\x05\u0164\xB3\x02\u02F2\u02F9\x05" +
		"\u0166\xB4\x02\u02F3\u02F9\x05\u0168\xB5\x02\u02F4\u02F9\x05\u016C\xB7" +
		"\x02\u02F5\u02F9\x05\u0162\xB2\x02\u02F6\u02F9\x05\u016A\xB6\x02\u02F7" +
		"\u02F9\x05\u016E\xB8\x02\u02F8\u02EE\x03\x02\x02\x02\u02F8\u02EF\x03\x02" +
		"\x02\x02\u02F8\u02F0\x03\x02\x02\x02\u02F8\u02F1\x03\x02\x02\x02\u02F8" +
		"\u02F2\x03\x02\x02\x02\u02F8\u02F3\x03\x02\x02\x02\u02F8\u02F4\x03\x02" +
		"\x02\x02\u02F8\u02F5\x03\x02\x02\x02\u02F8\u02F6\x03\x02\x02\x02\u02F8" +
		"\u02F7\x03\x02\x02\x02\u02F9\x15\x03\x02\x02\x02\u02FA\u0314\x05\u0180" +
		"\xC1\x02\u02FB\u0314\x05\u0182\xC2\x02\u02FC\u0314\x05\u0184\xC3\x02\u02FD" +
		"\u0314\x05\u0186\xC4\x02\u02FE\u0314\x05\u0188\xC5\x02\u02FF\u0314\x05" +
		"\u018A\xC6\x02\u0300\u0314\x05\u018C\xC7\x02\u0301\u0314\x05\u018E\xC8" +
		"\x02\u0302\u0314\x05\u01A6\xD4\x02\u0303\u0314\x05\u01A8\xD5\x02\u0304" +
		"\u0314\x05\u01AA\xD6\x02\u0305\u0314\x05\u01AC\xD7\x02\u0306\u0314\x05" +
		"\u01AE\xD8\x02\u0307\u0314\x05\u01B2\xDA\x02\u0308\u0314\x05\u01B4\xDB" +
		"\x02\u0309\u0314\x05\u01B6\xDC\x02\u030A\u0314\x05\u01B8\xDD\x02\u030B" +
		"\u0314\x05\u01BA\xDE\x02\u030C\u0314\x05\u01C8\xE5\x02\u030D\u0314\x05" +
		"\u01CA\xE6\x02\u030E\u0314\x05\u01CC\xE7\x02\u030F\u0314\x05\u01CE\xE8" +
		"\x02\u0310\u0314\x05\u01D0\xE9\x02\u0311\u0314\x05\u01D2\xEA\x02\u0312" +
		"\u0314\x05\u01D4\xEB\x02\u0313\u02FA\x03\x02\x02\x02\u0313\u02FB\x03\x02" +
		"\x02\x02\u0313\u02FC\x03\x02\x02\x02\u0313\u02FD\x03\x02\x02\x02\u0313" +
		"\u02FE\x03\x02\x02\x02\u0313\u02FF\x03\x02\x02\x02\u0313\u0300\x03\x02" +
		"\x02\x02\u0313\u0301\x03\x02\x02\x02\u0313\u0302\x03\x02\x02\x02\u0313" +
		"\u0303\x03\x02\x02\x02\u0313\u0304\x03\x02\x02\x02\u0313\u0305\x03\x02" +
		"\x02\x02\u0313\u0306\x03\x02\x02\x02\u0313\u0307\x03\x02\x02\x02\u0313" +
		"\u0308\x03\x02\x02\x02\u0313\u0309\x03\x02\x02\x02\u0313\u030A\x03\x02" +
		"\x02\x02\u0313\u030B\x03\x02\x02\x02\u0313\u030C\x03\x02\x02\x02\u0313" +
		"\u030D\x03\x02\x02\x02\u0313\u030E\x03\x02\x02\x02\u0313\u030F\x03\x02" +
		"\x02\x02\u0313\u0310\x03\x02\x02\x02\u0313\u0311\x03\x02\x02\x02\u0313" +
		"\u0312\x03\x02\x02\x02\u0314\x17\x03\x02\x02\x02\u0315\u031B\x05\u01DE" +
		"\xF0\x02\u0316\u031B\x05\u01E0\xF1\x02\u0317\u031B\x05\u01E2\xF2\x02\u0318" +
		"\u031B\x05\u01E4\xF3\x02\u0319\u031B\x05\u01E6\xF4\x02\u031A\u0315\x03" +
		"\x02\x02\x02\u031A\u0316\x03\x02\x02\x02\u031A\u0317\x03\x02\x02\x02\u031A" +
		"\u0318\x03\x02\x02\x02\u031A\u0319\x03\x02\x02\x02\u031B\x19\x03\x02\x02" +
		"\x02\u031C\u031D\x07 \x02\x02\u031D\u031F\t\x02\x02\x02\u031E\u0320\x05" +
		"\u023E\u0120\x02\u031F\u031E\x03\x02\x02\x02\u031F\u0320\x03\x02\x02\x02" +
		"\u0320\u0321\x03\x02\x02\x02\u0321\u0325\x05\u0206\u0104\x02\u0322\u0324" +
		"\x052\x1A\x02\u0323\u0322\x03\x02\x02\x02\u0324\u0327\x03\x02\x02\x02" +
		"\u0325\u0323\x03\x02\x02\x02\u0325\u0326\x03\x02\x02\x02\u0326\x1B\x03" +
		"\x02\x02\x02\u0327\u0325\x03\x02\x02\x02\u0328\u032A\x07 \x02\x02\u0329" +
		"\u032B\x054\x1B\x02\u032A\u0329\x03\x02\x02\x02\u032A\u032B\x03\x02\x02" +
		"\x02\u032B\u032C\x03\x02\x02\x02\u032C\u032E\x07\u014C\x02\x02\u032D\u032F" +
		"\x05\u023E\u0120\x02\u032E\u032D\x03\x02\x02\x02\u032E\u032F\x03\x02\x02" +
		"\x02\u032F\u0330\x03\x02\x02\x02\u0330\u0331\x05\u01EC\xF7\x02\u0331\u0332" +
		"\x07h\x02\x02\u0332\u0333\x07\u01F1\x02\x02\u0333\u033A\x056\x1C\x02\u0334" +
		"\u0335\x07h\x02\x02\u0335\u0337\x07\u0125\x02\x02\u0336\u0338\x07e\x02" +
		"\x02\u0337\u0336\x03\x02\x02\x02\u0337\u0338\x03\x02\x02\x02\u0338\u0339" +
		"\x03\x02\x02\x02\u0339\u033B\x07\u01CC\x02\x02\u033A\u0334\x03\x02\x02" +
		"\x02\u033A\u033B\x03\x02\x02\x02\u033B\u033D\x03\x02\x02\x02\u033C\u033E" +
		"\x05> \x02\u033D\u033C\x03\x02\x02\x02\u033D\u033E\x03\x02\x02\x02\u033E" +
		"\u0341\x03\x02\x02\x02\u033F\u0340\x07\u0122\x02\x02\u0340\u0342\x07\u03DF" +
		"\x02\x02\u0341\u033F\x03\x02\x02\x02\u0341\u0342\x03\x02\x02\x02\u0342" +
		"\u0343\x03\x02\x02\x02\u0343\u0344\x07\u013E\x02\x02\u0344\u0345\x05\u015A" +
		"\xAE\x02\u0345\x1D\x03\x02\x02\x02\u0346\u0348\x07 \x02\x02\u0347\u0349" +
		"\t\x03\x02\x02\u0348\u0347\x03\x02\x02\x02\u0348\u0349\x03\x02\x02\x02" +
		"\u0349\u034B\x03\x02\x02\x02\u034A\u034C\t\x04\x02\x02\u034B\u034A\x03" +
		"\x02\x02\x02\u034B\u034C\x03\x02\x02\x02\u034C\u034D\x03\x02\x02\x02\u034D" +
		"\u034E\x07G\x02\x02\u034E\u0350\x05\u0206\u0104\x02\u034F\u0351\x05@!" +
		"\x02\u0350\u034F\x03\x02\x02\x02\u0350\u0351\x03\x02\x02\x02\u0351\u0352" +
		"\x03\x02\x02\x02\u0352\u0353\x07h\x02\x02\u0353\u0354\x05\u01EE\xF8\x02" +
		"\u0354\u0358\x05\u022A\u0116\x02\u0355\u0357\x05B\"\x02\u0356\u0355\x03" +
		"\x02\x02\x02\u0357\u035A\x03\x02\x02\x02\u0358\u0356\x03\x02\x02\x02\u0358" +
		"\u0359\x03\x02\x02\x02\u0359\u0367\x03\x02\x02\x02\u035A\u0358\x03\x02" +
		"\x02\x02\u035B\u035D\x07\u0103\x02\x02\u035C\u035E\x07\u03C7\x02\x02\u035D" +
		"\u035C\x03\x02\x02\x02\u035D\u035E\x03\x02\x02\x02\u035E\u035F\x03\x02" +
		"\x02\x02\u035F\u0366\t\x05\x02\x02\u0360\u0362\x07\\\x02\x02\u0361\u0363" +
		"\x07\u03C7\x02\x02\u0362\u0361\x03\x02\x02\x02\u0362\u0363\x03\x02\x02" +
		"\x02\u0363\u0364\x03\x02\x02\x02\u0364\u0366\t\x06\x02\x02\u0365\u035B" +
		"\x03\x02\x02\x02\u0365\u0360\x03\x02\x02\x02\u0366\u0369\x03\x02\x02\x02" +
		"\u0367\u0365\x03\x02\x02\x02\u0367\u0368\x03\x02\x02\x02\u0368\x1F\x03" +
		"\x02\x02\x02\u0369\u0367\x03\x02\x02\x02\u036A\u036B\x07 \x02\x02\u036B" +
		"\u036C\x07\u0183\x02\x02\u036C\u036D\x07A\x02\x02\u036D\u036E\x05\u0206" +
		"\u0104\x02\u036E\u036F\x07\x07\x02\x02\u036F\u0370\x07\u0223\x02\x02\u0370" +
		"\u0376\x07\u03DF\x02\x02\u0371\u0373\x07\u016E\x02\x02\u0372\u0374\x07" +
		"\u03C7\x02\x02\u0373\u0372\x03\x02\x02\x02\u0373\u0374\x03\x02\x02\x02" +
		"\u0374\u0375\x03\x02\x02\x02\u0375\u0377\x05\u020E\u0108\x02\u0376\u0371" +
		"\x03\x02\x02\x02\u0376\u0377\x03\x02\x02\x02\u0377\u037D\x03\x02\x02\x02" +
		"\u0378\u037A\x07\u0224\x02\x02\u0379\u037B\x07\u03C7\x02\x02\u037A\u0379" +
		"\x03\x02\x02\x02\u037A\u037B\x03\x02\x02\x02\u037B\u037C\x03\x02\x02\x02" +
		"\u037C\u037E\x05\u020E\u0108\x02\u037D\u0378\x03\x02\x02\x02\u037D\u037E" +
		"\x03\x02\x02\x02\u037E\u0384\x03\x02\x02\x02\u037F\u0381\x07\u01D6\x02" +
		"\x02\u0380\u0382\x07\u03C7\x02\x02\u0381\u0380\x03\x02\x02\x02\u0381\u0382" +
		"\x03\x02\x02\x02\u0382\u0383\x03\x02\x02\x02\u0383\u0385\x05\u020E\u0108" +
		"\x02\u0384\u037F\x03\x02\x02\x02\u0384\u0385\x03\x02\x02\x02\u0385\u038B" +
		"\x03\x02\x02\x02\u0386\u0388\x07\u01B1\x02\x02\u0387\u0389\x07\u03C7\x02" +
		"\x02\u0388\u0387\x03\x02\x02\x02\u0388\u0389\x03\x02\x02\x02\u0389\u038A" +
		"\x03\x02\x02\x02\u038A\u038C\x05\u0206\u0104\x02\u038B\u0386\x03\x02\x02" +
		"\x02\u038B\u038C\x03\x02\x02\x02\u038C\u038E\x03\x02\x02\x02\u038D\u038F" +
		"\x07\u0232\x02\x02\u038E\u038D\x03\x02\x02\x02\u038E\u038F\x03\x02\x02" +
		"\x02\u038F\u0395\x03\x02\x02\x02\u0390\u0392\x07\u0122\x02\x02\u0391\u0393" +
		"\x07\u03C7\x02\x02\u0392\u0391\x03\x02\x02\x02\u0392\u0393\x03\x02\x02" +
		"\x02\u0393\u0394\x03\x02\x02\x02\u0394\u0396\x07\u03DF\x02\x02\u0395\u0390" +
		"\x03\x02\x02\x02\u0395\u0396\x03\x02\x02\x02\u0396\u0397\x03\x02\x02\x02" +
		"\u0397\u0399\x07\u0146\x02\x02\u0398\u039A\x07\u03C7\x02\x02\u0399\u0398" +
		"\x03\x02\x02\x02\u0399\u039A\x03\x02\x02\x02\u039A\u039B\x03\x02\x02\x02" +
		"\u039B\u039C\x05\u01FC\xFF\x02\u039C!\x03\x02\x02\x02\u039D\u039F\x07" +
		" \x02\x02\u039E\u03A0\x054\x1B\x02\u039F\u039E\x03\x02\x02\x02\u039F\u03A0" +
		"\x03\x02\x02\x02\u03A0\u03A1\x03\x02\x02\x02\u03A1\u03A2\x07s\x02\x02" +
		"\u03A2\u03A3\x05\u01EC\xF7\x02\u03A3\u03A5\x07\u03D0\x02\x02\u03A4\u03A6" +
		"\x05D#\x02\u03A5\u03A4\x03\x02\x02\x02\u03A5\u03A6\x03\x02\x02\x02\u03A6" +
		"\u03AB\x03\x02\x02\x02\u03A7\u03A8\x07\u03D2\x02\x02\u03A8\u03AA\x05D" +
		"#\x02\u03A9\u03A7\x03\x02\x02\x02\u03AA\u03AD\x03\x02\x02\x02\u03AB\u03A9" +
		"\x03\x02\x02\x02\u03AB\u03AC\x03\x02\x02\x02\u03AC\u03AE\x03\x02\x02\x02" +
		"\u03AD\u03AB\x03\x02\x02\x02\u03AE\u03B2\x07\u03D1\x02\x02\u03AF\u03B1" +
		"\x05H%\x02\u03B0\u03AF\x03\x02\x02\x02\u03B1\u03B4\x03\x02\x02\x02\u03B2" +
		"\u03B0\x03\x02\x02\x02\u03B2\u03B3\x03\x02\x02\x02\u03B3\u03B5\x03\x02" +
		"\x02\x02\u03B4\u03B2\x03\x02\x02\x02\u03B5\u03B6\x05\u015A\xAE\x02\u03B6" +
		"#\x03\x02\x02\x02\u03B7\u03B9\x07 \x02\x02\u03B8\u03BA\x054\x1B\x02\u03B9" +
		"\u03B8\x03\x02\x02\x02\u03B9\u03BA\x03\x02\x02\x02\u03BA\u03BB\x03\x02" +
		"\x02\x02\u03BB\u03BC\x07\u0160\x02\x02\u03BC\u03BD\x05\u01EC\xF7\x02\u03BD" +
		"\u03BF\x07\u03D0\x02\x02\u03BE\u03C0\x05F$\x02\u03BF\u03BE\x03\x02\x02" +
		"\x02\u03BF\u03C0\x03\x02\x02\x02\u03C0\u03C5\x03\x02\x02\x02\u03C1\u03C2" +
		"\x07\u03D2\x02\x02\u03C2\u03C4\x05F$\x02\u03C3\u03C1\x03\x02\x02\x02\u03C4" +
		"\u03C7\x03\x02\x02\x02\u03C5\u03C3\x03\x02\x02\x02\u03C5\u03C6\x03\x02" +
		"\x02\x02\u03C6\u03C8\x03\x02\x02\x02\u03C7\u03C5\x03\x02\x02\x02\u03C8" +
		"\u03C9\x07\u03D1\x02\x02\u03C9\u03CA\x07\u01E9\x02\x02\u03CA\u03CE\x05" +
		"\u021A\u010E\x02\u03CB\u03CD\x05H%\x02\u03CC\u03CB\x03\x02\x02\x02\u03CD" +
		"\u03D0\x03\x02\x02\x02\u03CE\u03CC\x03\x02\x02\x02\u03CE\u03CF\x03\x02" +
		"\x02\x02\u03CF\u03D3\x03\x02\x02\x02\u03D0\u03CE\x03\x02\x02\x02\u03D1" +
		"\u03D4\x05\u015A\xAE\x02\u03D2\u03D4\x05\u016A\xB6\x02\u03D3\u03D1\x03" +
		"\x02\x02\x02\u03D3\u03D2\x03\x02\x02\x02\u03D4%\x03\x02\x02\x02\u03D5" +
		"\u03D6\x07 \x02\x02\u03D6\u03D7\x07\u01F3\x02\x02\u03D7\u03D8\x05\u0206" +
		"\u0104\x02\u03D8\u03D9\x07<\x02\x02\u03D9\u03DA\x07\u0133\x02\x02";
	private static readonly _serializedATNSegment4: string =
		"\u03DA\u03DB\x07\u0236\x02\x02\u03DB\u03DC\t\x07\x02\x02\u03DC\u03DD\x07" +
		"\u01BC\x02\x02\u03DD\u03DE\x07\u03D0\x02\x02\u03DE\u03E3\x05J&\x02\u03DF" +
		"\u03E0\x07\u03D2\x02\x02\u03E0\u03E2\x05J&\x02\u03E1\u03DF\x03\x02\x02" +
		"\x02\u03E2\u03E5\x03\x02\x02\x02\u03E3\u03E1\x03\x02\x02\x02\u03E3\u03E4" +
		"\x03\x02\x02\x02\u03E4\u03E6\x03\x02\x02\x02\u03E5\u03E3\x03\x02\x02\x02" +
		"\u03E6\u03E7\x07\u03D1\x02\x02\u03E7\'\x03\x02\x02\x02\u03E8\u03EA\x07" +
		" \x02\x02\u03E9\u03EB\x07\u021B\x02\x02\u03EA\u03E9\x03\x02\x02\x02\u03EA" +
		"\u03EB\x03\x02\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC\u03EE\x07\x96" +
		"\x02\x02\u03ED\u03EF\x05\u023E\u0120\x02\u03EE\u03ED\x03\x02\x02\x02\u03EE" +
		"\u03EF\x03\x02\x02\x02\u03EF\u03F0\x03\x02\x02\x02\u03F0\u03F8\x05\u01EE" +
		"\xF8\x02\u03F1\u03F2\x07W\x02\x02\u03F2\u03F9\x05\u01EE\xF8\x02\u03F3" +
		"\u03F4\x07\u03D0\x02\x02\u03F4\u03F5\x07W\x02\x02\u03F5\u03F6\x05\u01EE" +
		"\xF8\x02\u03F6\u03F7\x07\u03D1\x02\x02\u03F7\u03F9\x03\x02\x02\x02\u03F8" +
		"\u03F1\x03\x02\x02\x02\u03F8\u03F3\x03\x02\x02\x02\u03F9\u0437\x03\x02" +
		"\x02\x02\u03FA\u03FC\x07 \x02\x02\u03FB\u03FD\x07\u021B\x02\x02\u03FC" +
		"\u03FB\x03\x02\x02\x02\u03FC\u03FD\x03\x02\x02\x02\u03FD\u03FE\x03\x02" +
		"\x02\x02\u03FE\u0400\x07\x96\x02\x02\u03FF\u0401\x05\u023E\u0120\x02\u0400" +
		"\u03FF\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0401\u0402\x03\x02" +
		"\x02\x02\u0402\u0404\x05\u01EE\xF8\x02\u0403\u0405\x05L\'\x02\u0404\u0403" +
		"\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02\u0405\u0410\x03\x02\x02\x02" +
		"\u0406\u040D\x05^0\x02\u0407\u0409\x07\u03D2\x02\x02\u0408\u0407\x03\x02" +
		"\x02\x02\u0408\u0409\x03\x02\x02\x02\u0409\u040A\x03\x02\x02\x02\u040A" +
		"\u040C\x05^0\x02\u040B\u0408\x03\x02\x02\x02\u040C\u040F\x03\x02\x02\x02" +
		"\u040D\u040B\x03\x02\x02\x02\u040D\u040E\x03\x02\x02\x02\u040E\u0411\x03" +
		"\x02\x02\x02\u040F\u040D\x03\x02\x02\x02\u0410\u0406\x03\x02\x02\x02\u0410" +
		"\u0411\x03\x02\x02\x02\u0411\u0413\x03\x02\x02\x02\u0412\u0414\x05b2\x02" +
		"\u0413\u0412\x03\x02\x02\x02\u0413\u0414\x03\x02\x02\x02\u0414\u0416\x03" +
		"\x02\x02\x02\u0415\u0417\t\b\x02\x02\u0416\u0415\x03\x02\x02\x02\u0416" +
		"\u0417\x03\x02\x02\x02\u0417\u0419\x03\x02\x02\x02\u0418\u041A\x07\r\x02" +
		"\x02\u0419\u0418\x03\x02\x02\x02\u0419\u041A\x03\x02\x02\x02\u041A\u041B" +
		"\x03\x02\x02\x02\u041B\u041C\x05\xB4[\x02\u041C\u0437\x03\x02\x02\x02" +
		"\u041D\u041F\x07 \x02\x02\u041E\u0420\x07\u021B\x02\x02\u041F\u041E\x03" +
		"\x02\x02\x02\u041F\u0420\x03\x02\x02\x02\u0420\u0421\x03\x02\x02\x02\u0421" +
		"\u0423\x07\x96\x02\x02\u0422\u0424\x05\u023E\u0120\x02\u0423\u0422\x03" +
		"\x02\x02\x02\u0423\u0424\x03\x02\x02\x02\u0424\u0425\x03\x02\x02\x02\u0425" +
		"\u0426\x05\u01EE\xF8\x02\u0426\u0431\x05L\'\x02\u0427\u042E\x05^0\x02" +
		"\u0428\u042A\x07\u03D2\x02\x02\u0429\u0428\x03\x02\x02\x02\u0429\u042A" +
		"\x03\x02\x02\x02\u042A\u042B\x03\x02\x02\x02\u042B\u042D\x05^0\x02\u042C" +
		"\u0429\x03\x02\x02\x02\u042D\u0430\x03\x02\x02\x02\u042E\u042C\x03\x02" +
		"\x02\x02\u042E\u042F\x03\x02\x02\x02\u042F\u0432\x03\x02\x02\x02\u0430" +
		"\u042E\x03\x02\x02\x02\u0431\u0427\x03\x02\x02\x02\u0431\u0432\x03\x02" +
		"\x02\x02\u0432\u0434\x03\x02\x02\x02\u0433\u0435\x05b2\x02\u0434\u0433" +
		"\x03\x02\x02\x02\u0434\u0435\x03\x02\x02\x02\u0435\u0437\x03\x02\x02\x02" +
		"\u0436\u03E8\x03\x02\x02\x02\u0436\u03FA\x03\x02\x02\x02\u0436\u041D\x03" +
		"\x02\x02\x02\u0437)\x03\x02\x02\x02\u0438\u0439\x07 \x02\x02\u0439\u043A" +
		"\x07\u021A\x02\x02\u043A\u043B\x05\u0206\u0104\x02\u043B\u043C\x07\x07" +
		"\x02\x02\u043C\u043D\x07\u0134\x02\x02\u043D\u0441\x07\u03DF\x02\x02\u043E" +
		"\u043F\x07\u0158\x02\x02\u043F\u0440\x07\u03C7\x02\x02\u0440\u0442\x05" +
		"\u020E\u0108\x02\u0441\u043E\x03\x02\x02\x02\u0441\u0442\x03\x02\x02\x02" +
		"\u0442\u0448\x03\x02\x02\x02\u0443\u0445\x07\u0146\x02\x02\u0444\u0446" +
		"\x07\u03C7\x02\x02\u0445\u0444\x03\x02\x02\x02\u0445\u0446\x03\x02\x02" +
		"\x02\u0446\u0447\x03\x02\x02\x02\u0447\u0449\x05\u01FC\xFF\x02\u0448\u0443" +
		"\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449+\x03\x02\x02\x02\u044A" +
		"\u044B\x07 \x02\x02\u044B\u044C\x07\u021A\x02\x02\u044C\u044D\x05\u0206" +
		"\u0104\x02\u044D\u044E\x07\x07\x02\x02\u044E\u044F\x07\u0134\x02\x02\u044F" +
		"\u0450\x07\u03DF\x02\x02\u0450\u0451\x07\xA4\x02\x02\u0451\u0452\x07\u0183" +
		"\x02\x02\u0452\u0453\x07A\x02\x02\u0453\u0459\x05\u0206\u0104\x02\u0454" +
		"\u0456\x07\u0154\x02\x02\u0455\u0457\x07\u03C7\x02\x02\u0456\u0455\x03" +
		"\x02\x02\x02\u0456\u0457\x03\x02\x02\x02\u0457\u0458\x03\x02\x02\x02\u0458" +
		"\u045A\x05\u020E\u0108\x02\u0459\u0454\x03\x02\x02\x02\u0459\u045A\x03" +
		"\x02\x02\x02\u045A\u0460\x03\x02\x02\x02\u045B\u045D\x07\u016E\x02\x02" +
		"\u045C\u045E\x07\u03C7\x02\x02\u045D\u045C\x03\x02\x02\x02\u045D\u045E" +
		"\x03\x02\x02\x02\u045E\u045F\x03\x02\x02\x02\u045F\u0461\x05\u020E\u0108" +
		"\x02\u0460\u045B\x03\x02\x02\x02\u0460\u0461\x03\x02\x02\x02\u0461\u0467" +
		"\x03\x02\x02\x02\u0462\u0464\x07\u0108\x02\x02\u0463\u0465\x07\u03C7\x02" +
		"\x02\u0464\u0463\x03\x02\x02\x02\u0464\u0465\x03\x02\x02\x02\u0465\u0466" +
		"\x03\x02\x02\x02\u0466\u0468\x05\u020E\u0108\x02\u0467\u0462\x03\x02\x02" +
		"\x02\u0467\u0468\x03\x02\x02\x02\u0468\u046E\x03\x02\x02\x02\u0469\u046B" +
		"\x07\u019D\x02\x02\u046A\u046C\x07\u03C7\x02\x02\u046B\u046A\x03\x02\x02" +
		"\x02\u046B\u046C\x03\x02\x02\x02\u046C\u046D\x03\x02\x02\x02\u046D\u046F" +
		"\x05\u020E\u0108\x02\u046E\u0469\x03\x02\x02\x02\u046E\u046F\x03\x02\x02" +
		"\x02\u046F\u0475\x03\x02\x02\x02\u0470\u0472\x07\u01B1\x02\x02\u0471\u0473" +
		"\x07\u03C7\x02\x02\u0472\u0471\x03\x02\x02\x02\u0472\u0473\x03\x02\x02" +
		"\x02\u0473\u0474\x03\x02\x02\x02\u0474\u0476\x05\u0206\u0104\x02\u0475" +
		"\u0470\x03\x02\x02\x02\u0475\u0476\x03\x02\x02\x02\u0476\u0478\x03\x02" +
		"\x02\x02\u0477\u0479\x07\u0232\x02\x02\u0478\u0477\x03\x02\x02\x02\u0478" +
		"\u0479\x03\x02\x02\x02\u0479\u047F\x03\x02\x02\x02\u047A\u047C\x07\u0122" +
		"\x02\x02\u047B\u047D\x07\u03C7\x02\x02\u047C\u047B\x03\x02\x02\x02\u047C" +
		"\u047D\x03\x02\x02\x02\u047D\u047E\x03\x02\x02\x02\u047E\u0480\x07\u03DF" +
		"\x02\x02\u047F\u047A\x03\x02\x02\x02\u047F\u0480\x03\x02\x02\x02\u0480" +
		"\u0481\x03\x02\x02\x02\u0481\u0483\x07\u0146\x02\x02\u0482\u0484\x07\u03C7" +
		"\x02\x02\u0483\u0482\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484" +
		"\u0485\x03\x02\x02\x02\u0485\u0486\x05\u01FC\xFF\x02\u0486-\x03\x02\x02" +
		"\x02\u0487\u0489\x07 \x02\x02\u0488\u048A\x054\x1B\x02\u0489\u0488\x03" +
		"\x02\x02\x02\u0489\u048A\x03\x02\x02\x02\u048A\u048B\x03\x02\x02\x02\u048B" +
		"\u048C\x07\x9B\x02\x02\u048C\u048D\x05\u01EC\xF7\x02\u048D\u048E\t\t\x02" +
		"\x02\u048E\u048F\t\n\x02\x02\u048F\u0490\x07h\x02\x02\u0490\u0491\x05" +
		"\u01EE\xF8\x02\u0491\u0492\x07:\x02\x02\u0492\u0493\x070\x02\x02\u0493" +
		"\u0496\x07\u01ED\x02\x02\u0494\u0495\t\v\x02\x02\u0495\u0497\x05\u01EC" +
		"\xF7\x02\u0496\u0494\x03\x02\x02\x02\u0496\u0497\x03\x02\x02\x02\u0497" +
		"\u0498\x03\x02\x02\x02\u0498\u0499\x05\u015A\xAE\x02\u0499/\x03\x02\x02" +
		"\x02\u049A\u049D\x07 \x02\x02\u049B\u049C\x07l\x02\x02\u049C\u049E\x07" +
		"}\x02\x02\u049D\u049B\x03\x02\x02\x02\u049D\u049E\x03\x02\x02\x02\u049E" +
		"\u04A2\x03\x02\x02\x02\u049F\u04A0\x07\u0103\x02\x02\u04A0\u04A1\x07\u03C7" +
		"\x02\x02\u04A1\u04A3\t\f\x02\x02\u04A2\u049F\x03\x02\x02\x02\u04A2\u04A3" +
		"\x03\x02\x02\x02\u04A3\u04A5\x03\x02\x02\x02\u04A4\u04A6\x054\x1B\x02" +
		"\u04A5\u04A4\x03\x02\x02\x02\u04A5\u04A6\x03\x02\x02\x02\u04A6\u04AA\x03" +
		"\x02\x02\x02\u04A7\u04A8\x07\x8C\x02\x02\u04A8\u04A9\x07\u01F2\x02\x02" +
		"\u04A9\u04AB\t\r\x02\x02\u04AA\u04A7\x03\x02\x02\x02\u04AA\u04AB\x03\x02" +
		"\x02\x02\u04AB\u04AC\x03\x02\x02\x02\u04AC\u04AD\x07\u022F\x02\x02\u04AD" +
		"\u04B2\x05\u01EC\xF7\x02\u04AE\u04AF\x07\u03D0\x02\x02\u04AF\u04B0\x05" +
		"\u0226\u0114\x02\u04B0\u04B1\x07\u03D1\x02\x02\u04B1\u04B3\x03\x02\x02" +
		"\x02\u04B2\u04AE\x03\x02\x02\x02\u04B2\u04B3\x03\x02\x02\x02\u04B3\u04B4" +
		"\x03\x02\x02\x02\u04B4\u04B5\x07\r\x02\x02\u04B5\u04BC\x05\xB4[\x02\u04B6" +
		"\u04B8\x07\xAA\x02\x02\u04B7\u04B9\t\x0E\x02\x02\u04B8\u04B7\x03\x02\x02" +
		"\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BA\x03\x02\x02\x02\u04BA\u04BB" +
		"\x07\x19\x02\x02\u04BB\u04BD\x07j\x02\x02\u04BC\u04B6\x03\x02\x02\x02" +
		"\u04BC\u04BD\x03\x02\x02\x02\u04BD1\x03\x02\x02\x02\u04BE\u04C0\x07\'" +
		"\x02\x02\u04BF\u04BE\x03\x02\x02\x02\u04BF\u04C0\x03\x02\x02\x02\u04C0" +
		"\u04C4\x03\x02\x02\x02\u04C1\u04C2\x07\x18\x02\x02\u04C2\u04C5\x07\x87" +
		"\x02\x02\u04C3\u04C5\x07\u02AF\x02\x02\u04C4\u04C1\x03\x02\x02\x02\u04C4" +
		"\u04C3\x03\x02\x02\x02\u04C5\u04C7\x03\x02\x02\x02\u04C6\u04C8\x07\u03C7" +
		"\x02\x02\u04C7\u04C6\x03\x02\x02\x02\u04C7\u04C8\x03\x02\x02\x02\u04C8" +
		"\u04CB\x03\x02\x02\x02\u04C9\u04CC\x05\u01F8\xFD\x02\u04CA\u04CC\x07\'" +
		"\x02\x02\u04CB\u04C9\x03\x02\x02\x02\u04CB\u04CA\x03\x02\x02\x02\u04CC" +
		"\u04D6\x03\x02\x02\x02\u04CD\u04CF\x07\'\x02\x02\u04CE\u04CD\x03\x02\x02" +
		"\x02\u04CE\u04CF\x03\x02\x02\x02\u04CF\u04D0\x03\x02\x02\x02\u04D0\u04D2" +
		"\x07\x1A\x02\x02\u04D1\u04D3\x07\u03C7\x02\x02\u04D2\u04D1\x03\x02\x02" +
		"\x02\u04D2\u04D3\x03\x02\x02\x02\u04D3\u04D4\x03\x02\x02\x02\u04D4\u04D6" +
		"\x05\u01FA\xFE\x02\u04D5\u04BF\x03\x02\x02\x02\u04D5\u04CE\x03\x02\x02" +
		"\x02\u04D63\x03\x02\x02\x02\u04D7\u04D8\x07\u0137\x02\x02\u04D8\u04DF" +
		"\x07\u03C7\x02\x02\u04D9\u04E0\x05\u01F4\xFB\x02\u04DA\u04DD\x07\"\x02" +
		"\x02\u04DB\u04DC\x07\u03D0\x02\x02\u04DC\u04DE\x07\u03D1\x02\x02\u04DD" +
		"\u04DB\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE\u04E0\x03\x02" +
		"\x02\x02\u04DF\u04D9\x03\x02\x02\x02\u04DF\u04DA\x03\x02\x02\x02\u04E0" +
		"5\x03\x02\x02\x02\u04E1\u04E2\x07\u0105\x02\x02\u04E2\u04E6\x058\x1D\x02" +
		"\u04E3\u04E5\x05:\x1E\x02\u04E4\u04E3\x03\x02\x02\x02\u04E5\u04E8\x03" +
		"\x02\x02\x02\u04E6\u04E4\x03\x02\x02\x02\u04E6\u04E7\x03\x02\x02\x02\u04E7" +
		"\u0504\x03\x02\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E9\u04EC\x07\u014E" +
		"\x02\x02\u04EA\u04ED\x05\u020C\u0107\x02\u04EB\u04ED\x05\u0254\u012B\x02" +
		"\u04EC\u04EA\x03\x02\x02\x02\u04EC\u04EB\x03\x02\x02\x02\u04ED\u04EE\x03" +
		"\x02\x02\x02\u04EE\u04F7\x05<\x1F\x02\u04EF\u04F0\x07\u0209\x02\x02\u04F0" +
		"\u04F4\x058\x1D\x02\u04F1\u04F3\x05:\x1E\x02\u04F2\u04F1\x03\x02\x02\x02" +
		"\u04F3\u04F6\x03\x02\x02\x02\u04F4\u04F2\x03\x02\x02\x02\u04F4\u04F5\x03" +
		"\x02\x02\x02\u04F5\u04F8\x03\x02\x02\x02\u04F6\u04F4\x03\x02\x02\x02\u04F7" +
		"\u04EF\x03\x02\x02\x02\u04F7\u04F8\x03\x02\x02\x02\u04F8\u0501\x03\x02" +
		"\x02\x02\u04F9\u04FA\x07\u0145\x02\x02\u04FA\u04FE\x058\x1D\x02\u04FB" +
		"\u04FD\x05:\x1E\x02\u04FC\u04FB\x03\x02\x02\x02\u04FD\u0500\x03\x02\x02" +
		"\x02\u04FE\u04FC\x03\x02\x02\x02\u04FE\u04FF\x03\x02\x02\x02\u04FF\u0502" +
		"\x03\x02\x02\x02\u0500\u04FE\x03\x02\x02\x02\u0501\u04F9\x03\x02\x02\x02" +
		"\u0501\u0502\x03\x02\x02\x02\u0502\u0504\x03\x02\x02\x02\u0503\u04E1\x03" +
		"\x02\x02\x02\u0503\u04E9\x03\x02\x02\x02\u05047\x03\x02\x02\x02\u0505" +
		"\u050A\x07\xEE\x02\x02\u0506\u050A\x05\u0210\u0109\x02\u0507\u050A\x05" +
		"\u020C\u0107\x02\u0508\u050A\x05\u0254\u012B\x02\u0509\u0505\x03\x02\x02" +
		"\x02\u0509\u0506\x03\x02\x02\x02\u0509\u0507\x03\x02\x02\x02\u0509\u0508" +
		"\x03\x02\x02\x02\u050A9\x03\x02\x02\x02\u050B\u050C\x07\u03C2\x02\x02" +
		"\u050C\u050F\x07L\x02\x02\u050D\u0510\x05\u020C\u0107\x02\u050E\u0510" +
		"\x05\u0254\u012B\x02\u050F\u050D\x03\x02\x02\x02\u050F\u050E\x03\x02\x02" +
		"\x02\u0510\u0511\x03\x02\x02\x02\u0511\u0512\x05<\x1F\x02\u0512;\x03\x02" +
		"\x02\x02\u0513\u0521\x05\u026A\u0136\x02\u0514\u0521\x07\xBF\x02\x02\u0515" +
		"\u0521\x07\xD1\x02\x02\u0516\u0521\x07\xD2\x02\x02\u0517\u0521\x07\xD3" +
		"\x02\x02\u0518\u0521\x07\xD4\x02\x02\u0519\u0521\x07\xD5\x02\x02\u051A" +
		"\u0521\x07\xD6\x02\x02\u051B\u0521\x07\xD7\x02\x02\u051C\u0521\x07\xD8" +
		"\x02\x02\u051D\u0521\x07\xD9\x02\x02\u051E\u0521\x07\xDA\x02\x02\u051F" +
		"\u0521\x07\xDB\x02\x02\u0520\u0513\x03\x02\x02\x02\u0520\u0514\x03\x02" +
		"\x02\x02\u0520\u0515\x03\x02\x02\x02\u0520\u0516\x03\x02\x02\x02\u0520" +
		"\u0517\x03\x02\x02\x02\u0520\u0518\x03\x02\x02\x02\u0520\u0519\x03\x02" +
		"\x02\x02\u0520\u051A\x03\x02\x02\x02\u0520\u051B\x03\x02\x02\x02\u0520" +
		"\u051C\x03\x02\x02\x02\u0520\u051D\x03\x02\x02\x02\u0520\u051E\x03\x02" +
		"\x02\x02\u0520\u051F\x03\x02\x02\x02\u0521=\x03\x02\x02\x02\u0522\u0528" +
		"\x07\u0142\x02\x02\u0523\u0528\x07\u013B\x02\x02\u0524\u0525\x07\u013B" +
		"\x02\x02\u0525\u0526\x07h\x02\x02\u0526\u0528\x07\u01F9\x02\x02\u0527" +
		"\u0522\x03\x02\x02\x02\u0527\u0523\x03\x02\x02\x02\u0527\u0524\x03\x02" +
		"\x02\x02\u0528?\x03\x02\x02\x02\u0529\u052A\x07\xA5\x02\x02\u052A\u052B" +
		"\t\x0F\x02\x02\u052BA\x03\x02\x02\x02\u052C\u052E\x07\u017B\x02\x02\u052D" +
		"\u052F\x07\u03C7\x02\x02\u052E\u052D\x03\x02\x02\x02\u052E\u052F\x03\x02" +
		"\x02\x02\u052F\u0530\x03\x02\x02\x02\u0530\u053A\x05\u020E\u0108\x02\u0531" +
		"\u053A\x05@!\x02\u0532\u0533\x07\xAA\x02\x02\u0533\u0534\x07\u01C0\x02" +
		"\x02\u0534\u053A\x05\u0206\u0104\x02\u0535\u0536\x07\u0122\x02\x02\u0536" +
		"\u053A\x07\u03DF\x02\x02\u0537\u053A\x07\u0173\x02\x02\u0538\u053A\x07" +
		"\u0231\x02\x02\u0539\u052C\x03\x02\x02\x02\u0539\u0531\x03\x02\x02\x02" +
		"\u0539\u0532\x03\x02\x02\x02\u0539\u0535\x03\x02\x02\x02\u0539\u0537\x03" +
		"\x02\x02\x02\u0539\u0538\x03\x02\x02\x02\u053AC\x03\x02\x02\x02\u053B" +
		"\u053D\t\x10\x02\x02\u053C\u053B\x03\x02\x02\x02\u053C\u053D\x03\x02\x02" +
		"\x02\u053D\u053E\x03\x02\x02\x02\u053E\u053F\x05\u0206\u0104\x02\u053F" +
		"\u0540\x05\u021A\u010E\x02\u0540E\x03\x02\x02\x02\u0541\u0542\x05\u0206" +
		"\u0104\x02\u0542\u0543\x05\u021A\u010E\x02\u0543G\x03\x02\x02\x02\u0544" +
		"\u0545\x07\u0122\x02\x02\u0545\u055C\x07\u03DF\x02\x02\u0546\u0547\x07" +
		"\u017C\x02\x02\u0547\u055C\x07\x8C\x02\x02\u0548\u054A\x07e\x02\x02\u0549" +
		"\u0548\x03\x02\x02\x02\u0549\u054A\x03\x02\x02\x02\u054A\u054B\x03\x02" +
		"\x02\x02\u054B\u055C\x07,\x02\x02\u054C\u054D\x07\u012E\x02\x02\u054D" +
		"\u0557\x07\x8C\x02\x02\u054E\u054F\x07\u01B0\x02\x02\u054F\u0557\x07\x8C" +
		"\x02\x02\u0550\u0551\x07w\x02\x02\u0551\u0552\x07\x8C\x02\x02\u0552\u0557" +
		"\x07\u0133\x02\x02\u0553\u0554\x07c\x02\x02\u0554\u0555\x07\x8C\x02\x02" +
		"\u0555\u0557\x07\u0133\x02\x02\u0556\u054C\x03\x02\x02\x02\u0556\u054E" +
		"\x03\x02\x02\x02\u0556\u0550\x03\x02\x02\x02\u0556\u0553\x03\x02\x02\x02" +
		"\u0557\u055C\x03\x02\x02\x02\u0558\u0559\x07\x8C\x02\x02\u0559\u055A\x07" +
		"\u01F2\x02\x02\u055A\u055C\t\r\x02\x02\u055B\u0544\x03\x02\x02\x02\u055B" +
		"\u0546\x03\x02\x02\x02\u055B\u0549\x03\x02\x02\x02\u055B\u0556\x03\x02" +
		"\x02\x02\u055B\u0558\x03\x02\x02\x02\u055CI\x03\x02\x02\x02\u055D\u055E" +
		"\x07\u0168\x02\x02\u055E\u056C\x07\u03DF\x02\x02\u055F\u0560\x07$\x02" +
		"\x02\u0560\u056C\x07\u03DF\x02\x02\u0561\u0562\x07\u0229\x02\x02\u0562" +
		"\u056C\x07\u03DF\x02\x02\u0563\u0564\x07\u01C4\x02\x02\u0564\u056C\x07" +
		"\u03DF\x02\x02\u0565\u0566\x07\u01FC\x02\x02\u0566\u056C\x07\u03DF\x02" +
		"\x02\u0567\u0568\x07\u01BD\x02\x02\u0568\u056C\x07\u03DF\x02\x02\u0569" +
		"\u056A\x07\u01C9\x02\x02\u056A\u056C\x05\u020C\u0107\x02\u056B\u055D\x03" +
		"\x02\x02\x02\u056B\u055F\x03\x02\x02\x02\u056B\u0561\x03\x02\x02\x02\u056B" +
		"\u0563\x03\x02\x02\x02\u056B\u0565\x03\x02\x02\x02\u056B\u0567\x03\x02" +
		"\x02\x02\u056B\u0569\x03\x02\x02\x02\u056CK\x03\x02\x02\x02\u056D\u056E" +
		"\x07\u03D0\x02\x02\u056E\u0573\x05N(\x02\u056F\u0570\x07\u03D2\x02\x02" +
		"\u0570\u0572\x05N(\x02\u0571\u056F\x03\x02\x02\x02\u0572\u0575\x03\x02" +
		"\x02\x02\u0573\u0571\x03\x02\x02\x02\u0573\u0574\x03\x02\x02\x02\u0574" +
		"\u0576\x03\x02\x02\x02\u0575\u0573\x03\x02\x02\x02\u0576\u0577\x07\u03D1" +
		"\x02\x02\u0577M\x03\x02\x02\x02\u0578\u0579\x05\u0206\u0104\x02\u0579" +
		"\u057A\x05P)\x02\u057A\u057E\x03\x02\x02\x02\u057B\u057E\x05T+\x02\u057C" +
		"\u057E\x05\\/\x02\u057D\u0578\x03\x02\x02\x02\u057D\u057B\x03\x02\x02" +
		"\x02\u057D\u057C\x03\x02\x02\x02\u057EO\x03\x02\x02\x02\u057F\u0583\x05" +
		"\u021A\u010E\x02\u0580\u0582\x05R*\x02\u0581\u0580\x03\x02\x02\x02\u0582" +
		"\u0585\x03\x02\x02\x02\u0583\u0581\x03\x02\x02\x02\u0583\u0584\x03\x02" +
		"\x02\x02\u0584Q\x03\x02\x02\x02\u0585\u0583\x03\x02\x02\x02\u0586\u05AF" +
		"\x05\u0216\u010C\x02\u0587\u0588\x07\'\x02\x02\u0588\u05AF\x05\u0236\u011C" +
		"\x02\u0589\u058E\x07\u0109\x02\x02\u058A\u058B\x07h\x02\x02\u058B\u058C" +
		"\x07\xA2\x02\x02\u058C\u058E\x05\u0238\u011D\x02\u058D\u0589\x03\x02\x02" +
		"\x02\u058D\u058A\x03\x02\x02\x02\u058E\u05AF\x03\x02\x02\x02\u058F\u0591" +
		"\x07r\x02\x02\u0590\u058F\x03\x02\x02\x02\u0590\u0591\x03\x02\x02\x02" +
		"\u0591\u0592\x03\x02\x02\x02\u0592\u05AF\x07Q\x02\x02\u0593\u0595\x07" +
		"\x9F\x02\x02\u0594\u0596\x07Q\x02\x02\u0595\u0594\x03\x02\x02\x02\u0595" +
		"\u0596\x03\x02\x02\x02\u0596\u05AF\x03\x02\x02\x02\u0597\u0598\x07\u0122" +
		"\x02\x02\u0598\u05AF\x07\u03DF\x02\x02\u0599\u059A\x07\u0120\x02\x02\u059A" +
		"\u05AF\t\x11\x02\x02\u059B\u059C\x07\u020F\x02\x02\u059C\u05AF\t\x12\x02" +
		"\x02\u059D\u05AF\x05V,\x02\u059E\u059F\x07\x1A\x02\x02\u059F\u05AF\x05" +
		"\u01FA\xFE\x02\u05A0\u05A1\x07?\x02\x02\u05A1\u05A3\x07\n\x02\x02\u05A2" +
		"\u05A0\x03\x02\x02\x02\u05A2\u05A3\x03\x02\x02\x02\u05A3\u05A4\x03\x02" +
		"\x02\x02\u05A4\u05A5\x07\r\x02\x02\u05A5\u05A6\x07\u03D0\x02\x02\u05A6" +
		"\u05A7\x05\u0254\u012B\x02\u05A7\u05A9\x07\u03D1\x02\x02\u05A8\u05AA\t" +
		"\x13\x02\x02\u05A9\u05A8\x03\x02\x02\x02\u05A9\u05AA\x03\x02\x02\x02\u05AA" +
		"\u05AF\x03\x02\x02\x02\u05AB\u05AC\x07\xD0\x02\x02\u05AC\u05AD\x07\'\x02" +
		"\x02\u05AD\u05AF\x07\u022D\x02\x02\u05AE\u0586\x03\x02\x02\x02\u05AE\u0587" +
		"\x03\x02\x02\x02\u05AE\u058D\x03\x02\x02\x02\u05AE\u0590\x03\x02\x02\x02" +
		"\u05AE\u0593\x03\x02\x02\x02\u05AE\u0597\x03\x02\x02\x02\u05AE\u0599\x03" +
		"\x02\x02\x02\u05AE\u059B\x03\x02\x02\x02\u05AE\u059D\x03\x02\x02\x02\u05AE" +
		"\u059E\x03\x02\x02\x02\u05AE\u05A2\x03\x02\x02\x02\u05AE\u05AB\x03\x02" +
		"\x02\x02\u05AFS\x03\x02\x02\x02\u05B0\u05B2\x07\x1D\x02\x02\u05B1\u05B3" +
		"\x05\u0206\u0104\x02\u05B2\u05B1\x03\x02\x02\x02\u05B2\u05B3\x03\x02\x02" +
		"\x02\u05B3\u05B5\x03\x02\x02\x02\u05B4\u05B0\x03\x02\x02\x02\u05B4\u05B5" +
		"\x03\x02\x02\x02\u05B5\u05B6\x03\x02\x02\x02\u05B6\u05B7\x07r\x02\x02" +
		"\u05B7\u05B9\x07Q\x02\x02\u05B8\u05BA\x05\u0206\u0104\x02\u05B9\u05B8" +
		"\x03\x02\x02\x02\u05B9\u05BA\x03\x02\x02\x02\u05BA\u05BC\x03\x02\x02\x02" +
		"\u05BB\u05BD\x05@!\x02\u05BC\u05BB\x03\x02\x02\x02\u05BC\u05BD\x03\x02" +
		"\x02\x02\u05BD\u05BE\x03\x02\x02\x02\u05BE\u05C2\x05\u022A\u0116\x02\u05BF" +
		"\u05C1\x05B\"\x02\u05C0\u05BF\x03\x02\x02\x02\u05C1\u05C4\x03\x02\x02" +
		"\x02\u05C2\u05C0\x03\x02\x02\x02\u05C2\u05C3\x03\x02\x02\x02\u05C3\u05F6" +
		"\x03\x02\x02\x02\u05C4\u05C2\x03\x02\x02\x02\u05C5\u05C7\x07\x1D\x02\x02" +
		"\u05C6\u05C8\x05\u0206\u0104\x02\u05C7\u05C6\x03\x02\x02\x02\u05C7\u05C8" +
		"\x03\x02\x02\x02\u05C8\u05CA\x03\x02\x02\x02\u05C9\u05C5\x03\x02\x02\x02" +
		"\u05C9\u05CA\x03\x02\x02\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB\u05CD\x07" +
		"\x9F\x02\x02\u05CC\u05CE\t\x14\x02\x02\u05CD\u05CC\x03\x02\x02\x02\u05CD" +
		"\u05CE\x03\x02\x02\x02\u05CE\u05D0\x03\x02\x02\x02\u05CF\u05D1\x05\u0206" +
		"\u0104\x02\u05D0\u05CF\x03\x02\x02\x02\u05D0\u05D1\x03\x02\x02\x02\u05D1" +
		"\u05D3\x03\x02\x02\x02\u05D2\u05D4\x05@!\x02\u05D3\u05D2\x03\x02\x02\x02" +
		"\u05D3\u05D4\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02\x02\u05D5\u05D9\x05" +
		"\u022A\u0116\x02\u05D6\u05D8\x05B\"\x02\u05D7\u05D6\x03\x02\x02\x02\u05D8" +
		"\u05DB\x03\x02\x02\x02\u05D9\u05D7\x03\x02\x02\x02\u05D9\u05DA\x03\x02" +
		"\x02\x02\u05DA\u05F6\x03\x02\x02\x02\u05DB\u05D9\x03\x02\x02\x02\u05DC" +
		"\u05DE\x07\x1D\x02\x02\u05DD\u05DF\x05\u0206\u0104\x02\u05DE\u05DD\x03" +
		"\x02\x02\x02\u05DE\u05DF\x03\x02\x02\x02\u05DF\u05E1\x03\x02\x02\x02\u05E0" +
		"\u05DC\x03\x02\x02\x02\u05E0\u05E1\x03\x02\x02\x02\u05E1\u05E2\x03\x02" +
		"\x02\x02\u05E2\u05E3\x07<\x02\x02\u05E3\u05E5\x07Q\x02\x02\u05E4\u05E6" +
		"\x05\u0206\u0104\x02\u05E5\u05E4\x03\x02\x02\x02\u05E5\u05E6\x03\x02\x02" +
		"\x02\u05E6\u05E7\x03\x02\x02\x02\u05E7\u05E8\x05\u022A\u0116\x02\u05E8" +
		"\u05E9\x05V,\x02\u05E9\u05F6\x03\x02\x02\x02\u05EA\u05EC\x07\x1D\x02\x02" +
		"\u05EB\u05ED\x05\u0206\u0104\x02\u05EC\u05EB\x03\x02\x02\x02\u05EC\u05ED" +
		"\x03\x02\x02\x02\u05ED\u05EF\x03\x02\x02\x02\u05EE\u05EA\x03\x02\x02\x02" +
		"\u05EE\u05EF\x03\x02\x02\x02\u05EF\u05F0\x03\x02\x02\x02\u05F0\u05F1\x07" +
		"\x19\x02\x02\u05F1\u05F2\x07\u03D0\x02\x02\u05F2\u05F3\x05\u0254\u012B" +
		"\x02\u05F3\u05F4\x07\u03D1\x02\x02\u05F4\u05F6\x03\x02\x02\x02\u05F5\u05B4" +
		"\x03\x02\x02\x02\u05F5\u05C9\x03\x02\x02\x02\u05F5\u05E0\x03\x02\x02\x02" +
		"\u05F5\u05EE\x03\x02\x02\x02\u05F6U\x03\x02\x02\x02\u05F7\u05F8\x07x\x02" +
		"\x02\u05F8\u05FA\x05\u01EE\xF8\x02\u05F9\u05FB\x05\u022A\u0116\x02\u05FA" +
		"\u05F9\x03\x02\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FB\u05FE\x03\x02" +
		"\x02\x02\u05FC\u05FD\x07a\x02\x02\u05FD\u05FF\t\x15\x02\x02\u05FE\u05FC" +
		"\x03\x02\x02\x02\u05FE\u05FF\x03\x02\x02\x02\u05FF\u0601\x03\x02\x02\x02" +
		"\u0600\u0602\x05X-\x02\u0601\u0600\x03\x02\x02\x02\u0601\u0602\x03\x02" +
		"\x02\x02\u0602W\x03\x02\x02\x02\u0603\u0604\x07h\x02\x02\u0604\u0605\x07" +
		")\x02\x02\u0605\u0609\x05Z.\x02\u0606\u0607\x07h\x02\x02\u0607\u0608\x07" +
		"\xA2\x02\x02\u0608\u060A\x05Z.\x02\u0609\u0606\x03\x02\x02\x02\u0609\u060A" +
		"\x03\x02\x02\x02\u060A\u0614\x03\x02\x02\x02\u060B\u060C\x07h\x02\x02" +
		"\u060C\u060D\x07\xA2\x02\x02\u060D\u0611\x05Z.\x02\u060E\u060F\x07h\x02" +
		"\x02\u060F\u0610\x07)\x02\x02\u0610\u0612\x05Z.\x02\u0611\u060E\x03\x02" +
		"\x02\x02\u0611\u0612\x03\x02\x02\x02\u0612\u0614\x03\x02\x02\x02\u0613" +
		"\u0603\x03\x02\x02\x02\u0613\u060B\x03\x02\x02\x02\u0614Y\x03\x02\x02" +
		"\x02\u0615\u061C\x07\x7F\x02\x02\u0616\u061C\x07\x14\x02\x02\u0617\u0618" +
		"\x07\x87\x02\x02\u0618\u061C\x07g\x02\x02\u0619\u061A\x07\u01B0\x02\x02" +
		"\u061A\u061C\x07\u0100\x02\x02\u061B\u0615\x03\x02\x02\x02\u061B\u0616" +
		"\x03\x02\x02\x02\u061B\u0617\x03\x02\x02\x02\u061B\u0619\x03\x02\x02\x02" +
		"\u061C[\x03\x02\x02\x02\u061D\u061F\t\x14\x02\x02\u061E\u0620\x05\u0206" +
		"\u0104\x02\u061F\u061E\x03\x02\x02\x02\u061F\u0620\x03\x02\x02\x02\u0620" +
		"\u0622\x03\x02\x02\x02\u0621\u0623\x05@!\x02\u0622\u0621\x03\x02\x02\x02" +
		"\u0622\u0623\x03\x02\x02\x02\u0623\u0624\x03\x02\x02\x02\u0624\u0628\x05" +
		"\u022A\u0116\x02\u0625\u0627\x05B\"\x02\u0626\u0625\x03\x02\x02\x02\u0627" +
		"\u062A\x03\x02\x02\x02\u0628\u0626\x03\x02\x02\x02\u0628\u0629\x03\x02" +
		"\x02\x02\u0629\u063A\x03\x02\x02\x02\u062A\u0628\x03\x02\x02\x02\u062B" +
		"\u062D\t\x16\x02\x02\u062C\u062E\t\x14\x02\x02\u062D\u062C\x03\x02\x02" +
		"\x02\u062D\u062E\x03\x02\x02\x02\u062E\u0630\x03\x02\x02\x02\u062F\u0631" +
		"\x05\u0206\u0104\x02\u0630\u062F\x03\x02\x02\x02\u0630\u0631\x03\x02\x02" +
		"\x02\u0631\u0632\x03\x02\x02\x02\u0632\u0636\x05\u022A\u0116\x02\u0633" +
		"\u0635\x05B\"\x02\u0634\u0633\x03\x02\x02\x02\u0635\u0638\x03\x02\x02" +
		"\x02\u0636\u0634\x03\x02\x02\x02\u0636\u0637\x03\x02\x02\x02\u0637\u063A" +
		"\x03\x02\x02\x02\u0638\u0636\x03\x02\x02\x02\u0639\u061D\x03\x02\x02\x02" +
		"\u0639\u062B\x03\x02\x02\x02\u063A]\x03\x02\x02\x02\u063B\u063D\x07\u0146" +
		"\x02\x02\u063C\u063E\x07\u03C7\x02\x02\u063D\u063C\x03\x02\x02\x02\u063D" +
		"\u063E\x03\x02\x02\x02\u063E\u063F\x03\x02\x02\x02\u063F\u06CC\x05\u01FC" +
		"\xFF\x02\u0640\u0642\x07\u0109\x02\x02\u0641\u0643\x07\u03C7\x02\x02\u0642" +
		"\u0641\x03\x02\x02\x02\u0642\u0643\x03\x02\x02\x02\u0643\u0644\x03\x02" +
		"\x02\x02\u0644\u06CC\x05\u020C\u0107\x02\u0645\u0647\x07\u010A\x02\x02" +
		"\u0646\u0648\x07\u03C7\x02\x02\u0647\u0646\x03\x02\x02\x02\u0647\u0648" +
		"\x03\x02\x02\x02\u0648\u0649\x03\x02\x02\x02\u0649\u06CC\x05\u020C\u0107" +
		"\x02\u064A\u064C\x07\'\x02\x02\u064B\u064A\x03\x02\x02\x02\u064B\u064C" +
		"\x03\x02\x02\x02\u064C\u0650\x03\x02\x02\x02\u064D\u064E\x07\x18\x02\x02" +
		"\u064E\u0651\x07\x87\x02\x02\u064F\u0651\x07\u02AF\x02\x02\u0650\u064D" +
		"\x03\x02\x02\x02\u0650\u064F\x03\x02\x02\x02\u0651\u0653\x03\x02\x02\x02" +
		"\u0652\u0654\x07\u03C7\x02\x02\u0653\u0652\x03\x02\x02\x02\u0653\u0654" +
		"\x03\x02\x02\x02\u0654\u0657\x03\x02\x02\x02\u0655\u0658\x05\u01F8\xFD" +
		"\x02\u0656\u0658\x07\'\x02\x02\u0657\u0655\x03\x02\x02\x02\u0657\u0656" +
		"\x03\x02\x02\x02\u0658\u06CC\x03\x02\x02\x02\u0659\u065B\t\x17\x02\x02" +
		"\u065A\u065C\x07\u03C7\x02\x02\u065B\u065A\x03\x02\x02\x02\u065B\u065C" +
		"\x03\x02\x02\x02\u065C\u065D\x03\x02\x02\x02\u065D\u06CC\t\x18\x02\x02" +
		"\u065E\u0660\x07\'\x02\x02\u065F\u065E\x03\x02\x02\x02\u065F\u0660\x03" +
		"\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0663\x07\x1A\x02\x02\u0662" +
		"\u0664\x07\u03C7\x02\x02\u0663\u0662\x03\x02\x02\x02\u0663\u0664\x03\x02" +
		"\x02\x02\u0664\u0665\x03\x02\x02\x02\u0665\u06CC\x05\u01FA\xFE\x02\u0666" +
		"\u0668\x07\u0122\x02\x02\u0667\u0669\x07\u03C7\x02\x02\u0668\u0667\x03" +
		"\x02\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669\u066A\x03\x02\x02\x02\u066A" +
		"\u06CC\x07\u03DF\x02\x02\u066B\u066D\x07\u0127\x02\x02\u066C\u066E\x07" +
		"\u03C7\x02\x02\u066D\u066C\x03\x02\x02\x02\u066D\u066E\x03\x02\x02\x02" +
		"\u066E\u066F\x03\x02\x02\x02\u066F\u06CC\t\x19\x02\x02\u0670\u0672\x07" +
		"\u0129\x02\x02\u0671\u0673\x07\u03C7\x02\x02\u0672\u0671";
	private static readonly _serializedATNSegment5: string =
		"\x03\x02\x02\x02\u0672\u0673\x03\x02\x02\x02\u0673\u0674\x03\x02\x02\x02" +
		"\u0674\u06CC\x07\u03DF\x02\x02\u0675\u0676\x07\u0133\x02\x02\u0676\u0678" +
		"\x07\u013A\x02\x02\u0677\u0679\x07\u03C7\x02\x02\u0678\u0677\x03\x02\x02" +
		"\x02\u0678\u0679\x03\x02\x02\x02\u0679\u067A\x03\x02\x02\x02\u067A\u06CC" +
		"\x07\u03DF\x02\x02\u067B\u067D\x07\u0138\x02\x02\u067C\u067E\x07\u03C7" +
		"\x02\x02\u067D\u067C\x03\x02\x02\x02\u067D\u067E\x03\x02\x02\x02\u067E" +
		"\u067F\x03\x02\x02\x02\u067F\u06CC\t\x18\x02\x02\u0680\u0682\x07\u0143" +
		"\x02\x02\u0681\u0683\x07\u03C7\x02\x02\u0682\u0681\x03\x02\x02\x02\u0682" +
		"\u0683\x03\x02\x02\x02\u0683\u0684\x03\x02\x02\x02\u0684\u06CC\x07\u03DF" +
		"\x02\x02\u0685\u0686\x07G\x02\x02\u0686\u0688\x07\u013A\x02\x02\u0687" +
		"\u0689\x07\u03C7\x02\x02\u0688\u0687\x03\x02\x02\x02\u0688\u0689\x03\x02" +
		"\x02\x02\u0689\u068A\x03\x02\x02\x02\u068A\u06CC\x07\u03DF\x02\x02\u068B" +
		"\u068D\x07\u0170\x02\x02\u068C\u068E\x07\u03C7\x02\x02\u068D\u068C\x03" +
		"\x02\x02\x02\u068D\u068E\x03\x02\x02\x02\u068E\u068F\x03\x02\x02\x02\u068F" +
		"\u06CC\t\x1A\x02\x02\u0690\u0692\x07\u017B\x02\x02\u0691\u0693\x07\u03C7" +
		"\x02\x02\u0692\u0691\x03\x02\x02\x02\u0692\u0693\x03\x02\x02\x02\u0693" +
		"\u0694\x03\x02\x02\x02\u0694\u06CC\x05\u020E\u0108\x02\u0695\u0697\x07" +
		"\u019C\x02\x02\u0696\u0698\x07\u03C7\x02\x02\u0697\u0696\x03\x02\x02\x02" +
		"\u0697\u0698\x03\x02\x02\x02\u0698\u0699\x03\x02\x02\x02\u0699\u06CC\x05" +
		"\u020C\u0107\x02\u069A\u069C\x07\u01A5\x02\x02\u069B\u069D\x07\u03C7\x02" +
		"\x02\u069C\u069B\x03\x02\x02\x02\u069C\u069D\x03\x02\x02\x02\u069D\u069E" +
		"\x03\x02\x02\x02\u069E\u06CC\x05\u020C\u0107\x02\u069F\u06A1\x07\u01BE" +
		"\x02\x02\u06A0\u06A2\x07\u03C7\x02\x02\u06A1\u06A0\x03\x02\x02\x02\u06A1" +
		"\u06A2\x03\x02\x02\x02\u06A2\u06A3\x03\x02\x02\x02\u06A3\u06CC\t\x1B\x02" +
		"\x02\u06A4\u06A6\x07\u01C4\x02\x02\u06A5\u06A7\x07\u03C7\x02\x02\u06A6" +
		"\u06A5\x03\x02\x02\x02\u06A6\u06A7\x03\x02\x02\x02\u06A7\u06A8\x03\x02" +
		"\x02\x02\u06A8\u06CC\x07\u03DF\x02\x02\u06A9\u06AB\x07\u01EF\x02\x02\u06AA" +
		"\u06AC\x07\u03C7\x02\x02\u06AB\u06AA\x03\x02\x02\x02\u06AB\u06AC\x03\x02" +
		"\x02\x02\u06AC\u06AD\x03\x02\x02\x02\u06AD\u06CC\t\x1C\x02\x02\u06AE\u06B0" +
		"\x07\u020A\x02\x02\u06AF\u06B1\x07\u03C7\x02\x02\u06B0\u06AF\x03\x02\x02" +
		"\x02\u06B0\u06B1\x03\x02\x02\x02\u06B1\u06B2\x03\x02\x02\x02\u06B2\u06CC" +
		"\t\x1B\x02\x02\u06B3\u06B5\x07\u020B\x02\x02\u06B4\u06B6\x07\u03C7\x02" +
		"\x02\u06B5\u06B4\x03\x02\x02\x02\u06B5\u06B6\x03\x02\x02\x02\u06B6\u06B7" +
		"\x03\x02\x02\x02\u06B7\u06CC\t\x1B\x02\x02\u06B8\u06BA\x07\u020C\x02\x02" +
		"\u06B9\u06BB\x07\u03C7\x02\x02\u06BA\u06B9\x03\x02\x02\x02\u06BA\u06BB" +
		"\x03\x02\x02\x02\u06BB\u06BC\x03\x02\x02\x02\u06BC\u06CC\x05\u020C\u0107" +
		"\x02\u06BD\u06BE\x07\u021A\x02\x02\u06BE\u06C0\x05\u0206\u0104\x02\u06BF" +
		"\u06C1\x05`1\x02\u06C0\u06BF\x03\x02\x02\x02\u06C0\u06C1\x03\x02\x02\x02" +
		"\u06C1\u06CC\x03\x02\x02\x02\u06C2\u06CC\x05`1\x02\u06C3\u06C5\x07\x9E" +
		"\x02\x02\u06C4\u06C6\x07\u03C7\x02\x02\u06C5\u06C4\x03\x02\x02\x02\u06C5" +
		"\u06C6\x03\x02\x02\x02\u06C6\u06C7\x03\x02\x02\x02\u06C7\u06C8\x07\u03D0" +
		"\x02\x02\u06C8\u06C9\x05\u0228\u0115\x02\u06C9\u06CA\x07\u03D1\x02\x02" +
		"\u06CA\u06CC\x03\x02\x02\x02\u06CB\u063B\x03\x02\x02\x02\u06CB\u0640\x03" +
		"\x02\x02\x02\u06CB\u0645\x03\x02\x02\x02\u06CB\u064B\x03\x02\x02\x02\u06CB" +
		"\u0659\x03\x02\x02\x02\u06CB\u065F\x03\x02\x02\x02\u06CB\u0666\x03\x02" +
		"\x02\x02\u06CB\u066B\x03\x02\x02\x02\u06CB\u0670\x03\x02\x02\x02\u06CB" +
		"\u0675\x03\x02\x02\x02\u06CB\u067B\x03\x02\x02\x02\u06CB\u0680\x03\x02" +
		"\x02\x02\u06CB\u0685\x03\x02\x02\x02\u06CB\u068B\x03\x02\x02\x02\u06CB" +
		"\u0690\x03\x02\x02\x02\u06CB\u0695\x03\x02\x02\x02\u06CB\u069A\x03\x02" +
		"\x02\x02\u06CB\u069F\x03\x02\x02\x02\u06CB\u06A4\x03\x02\x02\x02\u06CB" +
		"\u06A9\x03\x02\x02\x02\u06CB\u06AE\x03\x02\x02\x02\u06CB\u06B3\x03\x02" +
		"\x02\x02\u06CB\u06B8\x03\x02\x02\x02\u06CB\u06BD\x03\x02\x02\x02\u06CB" +
		"\u06C2\x03\x02\x02\x02\u06CB\u06C3\x03\x02\x02\x02\u06CC_\x03\x02\x02" +
		"\x02\u06CD\u06CE\x07\u020F\x02\x02\u06CE\u06CF\t\x12\x02\x02\u06CFa\x03" +
		"\x02\x02\x02\u06D0\u06D1\x07q\x02\x02\u06D1\u06D2\x07\x12\x02\x02\u06D2" +
		"\u06D5\x05d3\x02\u06D3\u06D4\x07\u01C3\x02\x02\u06D4\u06D6\x05\u020C\u0107" +
		"\x02\u06D5\u06D3\x03\x02\x02\x02\u06D5\u06D6\x03\x02\x02\x02\u06D6\u06DE" +
		"\x03\x02\x02\x02\u06D7\u06D8\x07\u0214\x02\x02\u06D8\u06D9\x07\x12\x02" +
		"\x02\u06D9\u06DC\x05f4\x02\u06DA\u06DB\x07\u0215\x02\x02\u06DB\u06DD\x05" +
		"\u020C\u0107\x02\u06DC\u06DA\x03\x02\x02\x02\u06DC\u06DD\x03\x02\x02\x02" +
		"\u06DD\u06DF\x03\x02\x02\x02\u06DE\u06D7\x03\x02\x02\x02\u06DE\u06DF\x03" +
		"\x02\x02\x02\u06DF\u06EB\x03\x02\x02\x02\u06E0\u06E1\x07\u03D0\x02\x02" +
		"\u06E1\u06E6\x05h5\x02\u06E2\u06E3\x07\u03D2\x02\x02\u06E3\u06E5\x05h" +
		"5\x02\u06E4\u06E2\x03\x02\x02\x02\u06E5\u06E8\x03\x02\x02\x02\u06E6\u06E4" +
		"\x03\x02\x02\x02\u06E6\u06E7\x03\x02\x02\x02\u06E7\u06E9\x03\x02\x02\x02" +
		"\u06E8\u06E6\x03\x02\x02\x02\u06E9\u06EA\x07\u03D1\x02\x02\u06EA\u06EC" +
		"\x03\x02\x02\x02\u06EB\u06E0\x03\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02" +
		"\u06ECc\x03\x02\x02\x02\u06ED\u06EF\x07Y\x02\x02\u06EE\u06ED\x03\x02\x02" +
		"\x02\u06EE\u06EF\x03\x02\x02\x02\u06EF\u06F0\x03\x02\x02\x02\u06F0\u06F1" +
		"\x07\u0166\x02\x02\u06F1\u06F2\x07\u03D0\x02\x02\u06F2\u06F3\x05\u0254" +
		"\u012B\x02\u06F3\u06F4\x07\u03D1\x02\x02\u06F4\u071B\x03\x02\x02\x02\u06F5" +
		"\u06F7\x07Y\x02\x02\u06F6\u06F5\x03\x02\x02\x02\u06F6\u06F7\x03\x02\x02" +
		"\x02\u06F7\u06F8\x03\x02\x02\x02\u06F8\u06FC\x07Q\x02\x02\u06F9\u06FA" +
		"\x07\u0103\x02\x02\u06FA\u06FB\x07\u03C7\x02\x02\u06FB\u06FD\t\x1D\x02" +
		"\x02\u06FC\u06F9\x03\x02\x02\x02\u06FC\u06FD\x03\x02\x02\x02\u06FD\u06FE" +
		"\x03\x02\x02\x02\u06FE\u06FF\x07\u03D0\x02\x02\u06FF\u0700\x05\u0226\u0114" +
		"\x02\u0700\u0701\x07\u03D1\x02\x02\u0701\u071B\x03\x02\x02\x02\u0702\u070C" +
		"\x07u\x02\x02\u0703\u0704\x07\u03D0\x02\x02\u0704\u0705\x05\u0254\u012B" +
		"\x02\u0705\u0706\x07\u03D1\x02\x02\u0706\u070D\x03\x02\x02\x02\u0707\u0708" +
		"\x07\u011F\x02\x02\u0708\u0709\x07\u03D0\x02\x02\u0709\u070A\x05\u0226" +
		"\u0114\x02\u070A\u070B\x07\u03D1\x02\x02\u070B\u070D\x03\x02\x02\x02\u070C" +
		"\u0703\x03\x02\x02\x02\u070C\u0707\x03\x02\x02\x02\u070D\u071B\x03\x02" +
		"\x02\x02\u070E\u0718\x07\u0181\x02\x02\u070F\u0710\x07\u03D0\x02\x02\u0710" +
		"\u0711\x05\u0254\u012B\x02\u0711\u0712\x07\u03D1\x02\x02\u0712\u0719\x03" +
		"\x02\x02\x02\u0713\u0714\x07\u011F\x02\x02\u0714\u0715\x07\u03D0\x02\x02" +
		"\u0715\u0716\x05\u0226\u0114\x02\u0716\u0717\x07\u03D1\x02\x02\u0717\u0719" +
		"\x03\x02\x02\x02\u0718\u070F\x03\x02\x02\x02\u0718\u0713\x03\x02\x02\x02" +
		"\u0719\u071B\x03\x02\x02\x02\u071A\u06EE\x03\x02\x02\x02\u071A\u06F6\x03" +
		"\x02\x02\x02\u071A\u0702\x03\x02\x02\x02\u071A\u070E\x03\x02\x02\x02\u071B" +
		"e\x03\x02\x02\x02\u071C\u071E\x07Y\x02\x02\u071D\u071C\x03\x02\x02\x02" +
		"\u071D\u071E\x03\x02\x02\x02\u071E\u071F\x03\x02\x02\x02\u071F\u0720\x07" +
		"\u0166\x02\x02\u0720\u0721\x07\u03D0\x02\x02\u0721\u0722\x05\u0254\u012B" +
		"\x02\u0722\u0723\x07\u03D1\x02\x02\u0723\u0732\x03\x02\x02\x02\u0724\u0726" +
		"\x07Y\x02\x02\u0725\u0724\x03\x02\x02\x02\u0725\u0726\x03\x02\x02\x02" +
		"\u0726\u0727\x03\x02\x02\x02\u0727\u072B\x07Q\x02\x02\u0728\u0729\x07" +
		"\u0103\x02\x02\u0729\u072A\x07\u03C7\x02\x02\u072A\u072C\t\x1D\x02\x02" +
		"\u072B\u0728\x03\x02\x02\x02\u072B\u072C\x03\x02\x02\x02\u072C\u072D\x03" +
		"\x02\x02\x02\u072D\u072E\x07\u03D0\x02\x02\u072E\u072F\x05\u0226\u0114" +
		"\x02\u072F\u0730\x07\u03D1\x02\x02\u0730\u0732\x03\x02\x02\x02\u0731\u071D" +
		"\x03\x02\x02\x02\u0731\u0725\x03\x02\x02\x02\u0732g\x03\x02\x02\x02\u0733" +
		"\u0734\x07q\x02\x02\u0734\u0735\x05\u0206\u0104\x02\u0735\u0736\x07\xA6" +
		"\x02\x02\u0736\u0737\x07\u017F\x02\x02\u0737\u0738\x07\u021D\x02\x02\u0738" +
		"\u0739\x07\u03D0\x02\x02\u0739\u073E\x05j6\x02\u073A\u073B\x07\u03D2\x02" +
		"\x02\u073B\u073D\x05j6\x02\u073C\u073A\x03\x02\x02\x02\u073D\u0740\x03" +
		"\x02\x02\x02\u073E\u073C\x03\x02\x02\x02\u073E\u073F\x03\x02\x02\x02\u073F" +
		"\u0741\x03\x02\x02\x02\u0740\u073E\x03\x02\x02\x02\u0741\u0745\x07\u03D1" +
		"\x02\x02\u0742\u0744\x05p9\x02\u0743\u0742\x03\x02\x02\x02\u0744\u0747" +
		"\x03\x02\x02\x02\u0745\u0743\x03\x02\x02\x02\u0745\u0746\x03\x02\x02\x02" +
		"\u0746\u0750\x03\x02\x02\x02\u0747\u0745\x03\x02\x02\x02\u0748\u074D\x05" +
		"n8\x02\u0749\u074A\x07\u03D2\x02\x02\u074A\u074C\x05n8\x02\u074B\u0749" +
		"\x03\x02\x02\x02\u074C\u074F\x03\x02\x02\x02\u074D\u074B\x03\x02\x02\x02" +
		"\u074D\u074E\x03\x02\x02\x02\u074E\u0751\x03\x02\x02\x02\u074F\u074D\x03" +
		"\x02\x02\x02\u0750\u0748\x03\x02\x02\x02\u0750\u0751\x03\x02\x02\x02\u0751" +
		"\u07B7\x03\x02\x02\x02\u0752\u0753\x07q\x02\x02\u0753\u0754\x05\u0206" +
		"\u0104\x02\u0754\u0755\x07\xA6\x02\x02\u0755\u0756\x07\u017F\x02\x02\u0756" +
		"\u0757\x07\u021D\x02\x02\u0757\u075B\x05j6\x02\u0758\u075A\x05p9\x02\u0759" +
		"\u0758\x03\x02\x02\x02\u075A\u075D\x03\x02\x02\x02\u075B\u0759\x03\x02" +
		"\x02\x02\u075B\u075C\x03\x02\x02\x02\u075C\u0766\x03\x02\x02\x02\u075D" +
		"\u075B\x03\x02\x02\x02\u075E\u0763\x05n8\x02\u075F\u0760\x07\u03D2\x02" +
		"\x02\u0760\u0762\x05n8\x02\u0761\u075F\x03\x02\x02\x02\u0762\u0765\x03" +
		"\x02\x02\x02\u0763\u0761\x03\x02\x02\x02\u0763\u0764\x03\x02\x02\x02\u0764" +
		"\u0767\x03\x02\x02\x02\u0765\u0763\x03\x02\x02\x02\u0766\u075E\x03\x02" +
		"\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767\u07B7\x03\x02\x02\x02\u0768" +
		"\u0769\x07q\x02\x02\u0769\u076A\x05\u0206\u0104\x02\u076A\u076B\x07\xA6" +
		"\x02\x02\u076B\u076C\x07F\x02\x02\u076C\u076D\x07\u03D0\x02\x02\u076D" +
		"\u0772\x05j6\x02\u076E\u076F\x07\u03D2\x02\x02\u076F\u0771\x05j6\x02\u0770" +
		"\u076E\x03\x02\x02\x02\u0771\u0774\x03\x02\x02\x02\u0772\u0770\x03\x02" +
		"\x02\x02\u0772\u0773\x03\x02\x02\x02\u0773\u0775\x03\x02\x02\x02\u0774" +
		"\u0772\x03\x02\x02\x02\u0775\u0779\x07\u03D1\x02\x02\u0776\u0778\x05p" +
		"9\x02\u0777\u0776\x03\x02\x02\x02\u0778\u077B\x03\x02\x02\x02\u0779\u0777" +
		"\x03\x02\x02\x02\u0779\u077A\x03\x02\x02\x02\u077A\u0784\x03\x02\x02\x02" +
		"\u077B\u0779\x03\x02\x02\x02\u077C\u0781\x05n8\x02\u077D\u077E\x07\u03D2" +
		"\x02\x02\u077E\u0780\x05n8\x02\u077F\u077D\x03\x02\x02\x02\u0780\u0783" +
		"\x03\x02\x02\x02\u0781\u077F\x03\x02\x02\x02\u0781\u0782\x03\x02\x02\x02" +
		"\u0782\u0785\x03\x02\x02\x02\u0783\u0781\x03\x02\x02\x02\u0784\u077C\x03" +
		"\x02\x02\x02\u0784\u0785\x03\x02\x02\x02\u0785\u07B7\x03\x02\x02\x02\u0786" +
		"\u0787\x07q\x02\x02\u0787\u0788\x05\u0206\u0104\x02\u0788\u0789\x07\xA6" +
		"\x02\x02\u0789\u078A\x07F\x02\x02\u078A\u078B\x07\u03D0\x02\x02\u078B" +
		"\u0790\x05l7\x02\u078C\u078D\x07\u03D2\x02\x02\u078D\u078F\x05l7\x02\u078E" +
		"\u078C\x03\x02\x02\x02\u078F\u0792\x03\x02\x02\x02\u0790\u078E\x03\x02" +
		"\x02\x02\u0790\u0791\x03\x02\x02\x02\u0791\u0793\x03\x02\x02\x02\u0792" +
		"\u0790\x03\x02\x02\x02\u0793\u0797\x07\u03D1\x02\x02\u0794\u0796\x05p" +
		"9\x02\u0795\u0794\x03\x02\x02\x02\u0796\u0799\x03\x02\x02\x02\u0797\u0795" +
		"\x03\x02\x02\x02\u0797\u0798\x03\x02\x02\x02\u0798\u07A2\x03\x02\x02\x02" +
		"\u0799\u0797\x03\x02\x02\x02\u079A\u079F\x05n8\x02\u079B\u079C\x07\u03D2" +
		"\x02\x02\u079C\u079E\x05n8\x02\u079D\u079B\x03\x02\x02\x02\u079E\u07A1" +
		"\x03\x02\x02\x02\u079F\u079D\x03\x02\x02\x02\u079F\u07A0\x03\x02\x02\x02" +
		"\u07A0\u07A3\x03\x02\x02\x02\u07A1\u079F\x03\x02\x02\x02\u07A2\u079A\x03" +
		"\x02\x02\x02\u07A2\u07A3\x03\x02\x02\x02\u07A3\u07B7\x03\x02\x02\x02\u07A4" +
		"\u07A5\x07q\x02\x02\u07A5\u07A9\x05\u0206\u0104\x02\u07A6\u07A8\x05p9" +
		"\x02\u07A7\u07A6\x03\x02\x02\x02\u07A8\u07AB\x03\x02\x02\x02\u07A9\u07A7" +
		"\x03\x02\x02\x02\u07A9\u07AA\x03\x02\x02\x02\u07AA\u07B4\x03\x02\x02\x02" +
		"\u07AB\u07A9\x03\x02\x02\x02\u07AC\u07B1\x05n8\x02\u07AD\u07AE\x07\u03D2" +
		"\x02\x02\u07AE\u07B0\x05n8\x02\u07AF\u07AD\x03\x02\x02\x02\u07B0\u07B3" +
		"\x03\x02\x02\x02\u07B1\u07AF\x03\x02\x02\x02\u07B1\u07B2\x03\x02\x02\x02" +
		"\u07B2\u07B5\x03\x02\x02\x02\u07B3\u07B1\x03\x02\x02\x02\u07B4\u07AC\x03" +
		"\x02\x02\x02\u07B4\u07B5\x03\x02\x02\x02\u07B5\u07B7\x03\x02\x02\x02\u07B6" +
		"\u0733\x03\x02\x02\x02\u07B6\u0752\x03\x02\x02\x02\u07B6\u0768\x03\x02" +
		"\x02\x02\u07B6\u0786\x03\x02\x02\x02\u07B6\u07A4\x03\x02\x02\x02\u07B7" +
		"i\x03\x02\x02\x02\u07B8\u07BC\x05\u0218\u010D\x02\u07B9\u07BC\x05\u0254" +
		"\u012B\x02\u07BA\u07BC\x07b\x02\x02\u07BB\u07B8\x03\x02\x02\x02\u07BB" +
		"\u07B9\x03\x02\x02\x02\u07BB\u07BA\x03\x02\x02\x02\u07BCk\x03\x02\x02" +
		"\x02\u07BD\u07BE\x07\u03D0\x02\x02\u07BE\u07C1\x05j6\x02\u07BF\u07C0\x07" +
		"\u03D2\x02\x02\u07C0\u07C2\x05j6\x02\u07C1\u07BF\x03\x02\x02\x02\u07C2" +
		"\u07C3\x03\x02\x02\x02\u07C3\u07C1\x03\x02\x02\x02\u07C3\u07C4\x03\x02" +
		"\x02\x02\u07C4\u07C5\x03\x02\x02\x02\u07C5\u07C6\x07\u03D1\x02\x02\u07C6" +
		"m\x03\x02\x02\x02\u07C7\u07C8\x07\u0214\x02\x02\u07C8\u07CC\x05\u0206" +
		"\u0104\x02\u07C9\u07CB\x05p9\x02\u07CA\u07C9\x03\x02\x02\x02\u07CB\u07CE" +
		"\x03\x02\x02\x02\u07CC\u07CA\x03\x02\x02\x02\u07CC\u07CD\x03\x02\x02\x02" +
		"\u07CDo\x03\x02\x02\x02\u07CE\u07CC\x03\x02\x02\x02\u07CF\u07D1\x07\u020F" +
		"\x02\x02\u07D0\u07CF\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1" +
		"\u07D2\x03\x02\x02\x02\u07D2\u07D4\x07\u0146\x02\x02\u07D3\u07D5\x07\u03C7" +
		"\x02\x02\u07D4\u07D3\x03\x02\x02\x02\u07D4\u07D5\x03\x02\x02\x02\u07D5" +
		"\u07D6\x03\x02\x02\x02\u07D6\u07FD\x05\u01FC\xFF\x02\u07D7\u07D9\x07\u0122" +
		"\x02\x02\u07D8\u07DA\x07\u03C7\x02\x02\u07D9\u07D8\x03\x02\x02\x02\u07D9" +
		"\u07DA\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02\x02\u07DB\u07FD\x07\u03DF" +
		"\x02\x02\u07DC\u07DD\x07\u0133\x02\x02\u07DD\u07DF\x07\u013A\x02\x02\u07DE" +
		"\u07E0\x07\u03C7\x02\x02\u07DF\u07DE\x03\x02\x02\x02\u07DF\u07E0\x03\x02" +
		"\x02\x02\u07E0\u07E1\x03\x02\x02\x02\u07E1\u07FD\x07\u03DF\x02\x02\u07E2" +
		"\u07E3\x07G\x02\x02\u07E3\u07E5\x07\u013A\x02\x02\u07E4\u07E6\x07\u03C7" +
		"\x02\x02\u07E5\u07E4\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6" +
		"\u07E7\x03\x02\x02\x02\u07E7\u07FD\x07\u03DF\x02\x02\u07E8\u07EA\x07\u019C" +
		"\x02\x02\u07E9\u07EB\x07\u03C7\x02\x02\u07EA\u07E9\x03\x02\x02\x02\u07EA" +
		"\u07EB\x03\x02\x02\x02\u07EB\u07EC\x03\x02\x02\x02\u07EC\u07FD\x05\u020C" +
		"\u0107\x02\u07ED\u07EF\x07\u01A5\x02\x02\u07EE\u07F0\x07\u03C7\x02\x02" +
		"\u07EF\u07EE\x03\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07F1\x03" +
		"\x02\x02\x02\u07F1\u07FD\x05\u020C\u0107\x02\u07F2\u07F4\x07\u021A\x02" +
		"\x02\u07F3\u07F5\x07\u03C7\x02\x02\u07F4\u07F3\x03\x02\x02\x02\u07F4\u07F5" +
		"\x03\x02\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u07FD\x05\u0206\u0104" +
		"\x02\u07F7\u07F9\x07\u01B1\x02\x02\u07F8\u07FA\x07\u03C7\x02\x02\u07F9" +
		"\u07F8\x03\x02\x02\x02\u07F9\u07FA\x03\x02\x02\x02\u07FA\u07FB\x03\x02" +
		"\x02\x02\u07FB\u07FD\x05\u0206\u0104\x02\u07FC\u07D0\x03\x02\x02\x02\u07FC" +
		"\u07D7\x03\x02\x02\x02\u07FC\u07DC\x03\x02\x02\x02\u07FC\u07E2\x03\x02" +
		"\x02\x02\u07FC\u07E8\x03\x02\x02\x02\u07FC\u07ED\x03\x02\x02\x02\u07FC" +
		"\u07F2\x03\x02\x02\x02\u07FC\u07F7\x03\x02\x02\x02\u07FDq\x03\x02\x02" +
		"\x02\u07FE\u07FF\x07\t\x02\x02\u07FF\u0801\t\x02\x02\x02\u0800\u0802\x05" +
		"\u0206\u0104\x02\u0801\u0800\x03\x02\x02\x02\u0801\u0802\x03\x02\x02\x02" +
		"\u0802\u0804\x03\x02\x02\x02\u0803\u0805\x052\x1A\x02\u0804\u0803\x03" +
		"\x02\x02\x02\u0805\u0806\x03\x02\x02\x02\u0806\u0804\x03\x02\x02\x02\u0806" +
		"\u0807\x03\x02\x02\x02\u0807\u0811\x03\x02\x02\x02\u0808\u0809\x07\t\x02" +
		"\x02\u0809\u080A\t\x02\x02\x02\u080A\u080B\x05\u0206\u0104\x02\u080B\u080C" +
		"\x07\u0228\x02\x02\u080C\u080D\x07\u0133\x02\x02\u080D\u080E\x07\u013A" +
		"\x02\x02\u080E\u080F\x07\u01AB\x02\x02\u080F\u0811\x03\x02\x02\x02\u0810" +
		"\u07FE\x03\x02\x02\x02\u0810\u0808\x03\x02\x02\x02\u0811s\x03\x02\x02" +
		"\x02\u0812\u0814\x07\t\x02\x02\u0813\u0815\x054\x1B\x02\u0814\u0813\x03" +
		"\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815\u0816\x03\x02\x02\x02\u0816" +
		"\u0817\x07\u014C\x02\x02\u0817\u081B\x05\u01EC\xF7\x02\u0818\u0819\x07" +
		"h\x02\x02\u0819\u081A\x07\u01F1\x02\x02\u081A\u081C\x056\x1C\x02\u081B" +
		"\u0818\x03\x02\x02\x02\u081B\u081C\x03\x02\x02\x02\u081C\u0823\x03\x02" +
		"\x02\x02\u081D\u081E\x07h\x02\x02\u081E\u0820\x07\u0125\x02\x02\u081F" +
		"\u0821\x07e\x02\x02\u0820\u081F\x03\x02\x02\x02\u0820\u0821\x03\x02\x02" +
		"\x02\u0821\u0822\x03\x02\x02\x02\u0822\u0824\x07\u01CC\x02\x02\u0823\u081D" +
		"\x03\x02\x02\x02\u0823\u0824\x03\x02\x02\x02\u0824\u0828\x03\x02\x02\x02" +
		"\u0825\u0826\x07{\x02\x02\u0826\u0827\x07\x99\x02\x02\u0827\u0829\x05" +
		"\u01EC\xF7\x02\u0828\u0825\x03\x02\x02\x02\u0828\u0829\x03\x02\x02\x02" +
		"\u0829\u082B\x03\x02\x02\x02\u082A\u082C\x05> \x02\u082B\u082A\x03\x02" +
		"\x02\x02\u082B\u082C\x03\x02\x02\x02\u082C\u082F\x03\x02\x02\x02\u082D" +
		"\u082E\x07\u0122\x02\x02\u082E\u0830\x07\u03DF\x02\x02\u082F\u082D\x03" +
		"\x02\x02\x02\u082F\u0830\x03\x02\x02\x02\u0830\u0833\x03\x02\x02\x02\u0831" +
		"\u0832\x07\u013E\x02\x02\u0832\u0834\x05\u015A\xAE\x02\u0833\u0831\x03" +
		"\x02\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834u\x03\x02\x02\x02\u0835" +
		"\u0836\x07\t\x02\x02\u0836\u0837\x07\u0160\x02\x02\u0837\u083B\x05\u01EC" +
		"\xF7\x02\u0838\u083A\x05H%\x02\u0839\u0838\x03\x02\x02\x02\u083A\u083D" +
		"\x03\x02\x02\x02\u083B\u0839\x03\x02\x02\x02\u083B\u083C\x03\x02\x02\x02" +
		"\u083Cw\x03\x02\x02\x02\u083D\u083B\x03\x02\x02\x02\u083E\u083F\x07\t" +
		"\x02\x02\u083F\u0840\x07\u0172\x02\x02\u0840\u0841\x07\u01EC\x02\x02\u0841" +
		"\u0842\x07\u027D\x02\x02\u0842\u0843\x07\u0185\x02\x02\u0843\u0844\x07" +
		"Q\x02\x02\u0844y\x03\x02\x02\x02\u0845\u0846\x07\t\x02\x02\u0846\u0847" +
		"\x07\u0183\x02\x02\u0847\u0848\x07A\x02\x02\u0848\u0849\x05\u0206\u0104" +
		"\x02\u0849\u084A\x07\x07\x02\x02\u084A\u084B\x07\u0223\x02\x02\u084B\u0851" +
		"\x07\u03DF\x02\x02\u084C\u084E\x07\u016E\x02\x02\u084D\u084F\x07\u03C7" +
		"\x02\x02\u084E\u084D\x03\x02\x02\x02\u084E\u084F\x03\x02\x02\x02\u084F" +
		"\u0850\x03\x02\x02\x02\u0850\u0852\x05\u020E\u0108\x02\u0851\u084C\x03" +
		"\x02\x02\x02\u0851\u0852\x03\x02\x02\x02\u0852\u0854\x03\x02\x02\x02\u0853" +
		"\u0855\x07\u0232\x02\x02\u0854\u0853\x03\x02\x02\x02\u0854\u0855\x03\x02" +
		"\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0858\x07\u0146\x02\x02\u0857" +
		"\u0859\x07\u03C7\x02\x02\u0858\u0857\x03\x02\x02\x02\u0858\u0859\x03\x02" +
		"\x02\x02\u0859\u085A\x03\x02\x02\x02\u085A\u085B\x05\u01FC\xFF\x02\u085B" +
		"{\x03\x02\x02\x02\u085C\u085D\x07\t\x02\x02\u085D\u085E\x07s\x02\x02\u085E" +
		"\u0862\x05\u01EC\xF7\x02\u085F\u0861\x05H%\x02\u0860\u085F\x03\x02\x02" +
		"\x02\u0861\u0864\x03\x02\x02\x02\u0862\u0860\x03\x02\x02\x02\u0862\u0863" +
		"\x03\x02\x02\x02\u0863}\x03\x02\x02\x02\u0864\u0862\x03\x02\x02\x02\u0865" +
		"\u0866\x07\t\x02\x02\u0866\u0867\x07\u01F3\x02\x02\u0867\u0868\x05\u0206" +
		"\u0104\x02\u0868\u0869\x07\u01BC\x02\x02\u0869\u086A\x07\u03D0\x02\x02" +
		"\u086A\u086F\x05J&\x02\u086B\u086C\x07\u03D2\x02\x02\u086C\u086E\x05J" +
		"&\x02\u086D\u086B\x03\x02\x02\x02\u086E\u0871\x03\x02\x02\x02\u086F\u086D" +
		"\x03\x02\x02\x02\u086F\u0870\x03\x02\x02\x02\u0870\u0872\x03\x02\x02\x02" +
		"\u0871\u086F\x03\x02\x02\x02\u0872\u0873\x07\u03D1\x02\x02\u0873\x7F\x03" +
		"\x02\x02\x02\u0874\u0876\x07\t\x02\x02\u0875\u0877\t\x03\x02\x02\u0876" +
		"\u0875\x03\x02\x02\x02\u0876\u0877\x03\x02\x02\x02\u0877\u0879\x03\x02" +
		"\x02\x02\u0878\u087A\x07E\x02\x02\u0879\u0878\x03\x02\x02\x02\u0879\u087A" +
		"\x03\x02\x02\x02\u087A\u087B\x03\x02\x02\x02\u087B\u087C\x07\x96\x02\x02" +
		"\u087C\u0885\x05\u01EE\xF8\x02\u087D\u0882\x05\x86D\x02\u087E\u087F\x07" +
		"\u03D2\x02\x02\u087F\u0881\x05\x86D\x02\u0880\u087E\x03\x02\x02\x02\u0881" +
		"\u0884\x03\x02\x02\x02\u0882\u0880\x03\x02\x02\x02\u0882\u0883\x03\x02" +
		"\x02\x02\u0883\u0886\x03\x02\x02\x02\u0884\u0882\x03\x02\x02\x02\u0885" +
		"\u087D\x03\x02\x02\x02\u0885\u0886\x03\x02\x02\x02\u0886\u0888\x03\x02" +
		"\x02\x02\u0887\u0889\x05b2\x02\u0888\u0887\x03\x02\x02\x02\u0888\u0889" +
		"\x03\x02\x02\x02\u0889\x81\x03\x02\x02\x02\u088A\u088B\x07\t\x02\x02\u088B" +
		"\u088C\x07\u021A\x02\x02\u088C\u088D\x05\u0206\u0104\x02\u088D\u088E\t" +
		"\x1E\x02\x02\u088E\u088F\x07\u0134\x02\x02\u088F\u0893\x07\u03DF\x02\x02" +
		"\u0890\u0891\x07\u016E\x02\x02\u0891\u0892\x07\u03C7\x02\x02\u0892\u0894" +
		"\x05\u020E\u0108\x02\u0893\u0890\x03\x02\x02\x02\u0893\u0894\x03\x02\x02" +
		"\x02\u0894\u0896\x03\x02\x02\x02\u0895\u0897\x07\u0232\x02\x02\u0896\u0895" +
		"\x03\x02\x02\x02\u0896\u0897\x03\x02\x02\x02\u0897\u0898\x03\x02\x02\x02" +
		"\u0898\u089A\x07\u0146\x02\x02\u0899\u089B\x07\u03C7\x02\x02\u089A\u0899" +
		"\x03\x02\x02\x02\u089A\u089B\x03\x02\x02\x02\u089B\u089C\x03\x02\x02\x02" +
		"\u089C\u089D\x05\u01FC\xFF\x02\u089D\x83\x03\x02\x02\x02\u089E\u08A2\x07" +
		"\t\x02\x02\u089F\u08A0\x07\u0103\x02\x02\u08A0\u08A1\x07\u03C7\x02\x02" +
		"\u08A1\u08A3\t\f\x02\x02\u08A2\u089F\x03\x02\x02\x02\u08A2\u08A3\x03\x02" +
		"\x02\x02\u08A3\u08A5\x03\x02\x02\x02\u08A4\u08A6\x054\x1B\x02\u08A5\u08A4" +
		"\x03\x02\x02\x02\u08A5\u08A6\x03\x02\x02\x02\u08A6\u08AA\x03\x02\x02\x02" +
		"\u08A7\u08A8\x07\x8C\x02\x02\u08A8\u08A9\x07\u01F2\x02\x02\u08A9\u08AB" +
		"\t\r\x02\x02\u08AA\u08A7\x03\x02\x02\x02\u08AA\u08AB\x03\x02\x02\x02\u08AB" +
		"\u08AC\x03\x02\x02\x02\u08AC\u08AD\x07\u022F\x02\x02\u08AD\u08B2\x05\u01EC" +
		"\xF7\x02\u08AE\u08AF\x07\u03D0\x02\x02\u08AF\u08B0\x05\u0226\u0114\x02" +
		"\u08B0\u08B1\x07\u03D1\x02\x02\u08B1\u08B3\x03\x02\x02\x02\u08B2\u08AE" +
		"\x03\x02\x02\x02\u08B2\u08B3\x03\x02\x02\x02\u08B3\u08B4\x03\x02\x02\x02" +
		"\u08B4\u08B5\x07\r\x02\x02\u08B5\u08BC\x05\xB4[\x02\u08B6\u08B8\x07\xAA" +
		"\x02\x02\u08B7\u08B9\t\x0E\x02\x02\u08B8\u08B7\x03\x02\x02\x02\u08B8\u08B9" +
		"\x03\x02\x02\x02\u08B9\u08BA\x03\x02\x02\x02\u08BA\u08BB\x07\x19\x02\x02" +
		"\u08BB\u08BD\x07j\x02\x02\u08BC\u08B6\x03\x02\x02\x02\u08BC\u08BD\x03" +
		"\x02\x02\x02\u08BD\x85\x03\x02\x02\x02\u08BE\u08C5\x05^0\x02\u08BF\u08C1" +
		"\x07\u03D2\x02\x02\u08C0\u08BF\x03\x02\x02\x02\u08C0\u08C1\x03\x02\x02" +
		"\x02\u08C1\u08C2\x03\x02\x02\x02\u08C2\u08C4\x05^0\x02\u08C3\u08C0\x03" +
		"\x02\x02\x02\u08C4\u08C7\x03\x02\x02\x02\u08C5\u08C3\x03\x02\x02\x02\u08C5" +
		"\u08C6\x03\x02\x02\x02\u08C6\u0A22\x03\x02\x02\x02\u08C7\u08C5\x03\x02" +
		"\x02\x02\u08C8\u08CA\x07\x07\x02\x02\u08C9\u08CB\x07\x1B\x02\x02\u08CA" +
		"\u08C9\x03\x02\x02\x02\u08CA\u08CB\x03\x02\x02\x02\u08CB\u08CC\x03\x02" +
		"\x02\x02\u08CC\u08CD\x05\u0206\u0104\x02\u08CD\u08D1\x05P)\x02\u08CE\u08D2" +
		"\x07\u015A\x02\x02\u08CF\u08D0\x07\u0101\x02\x02\u08D0\u08D2\x05\u0206" +
		"\u0104\x02\u08D1\u08CE\x03\x02\x02\x02\u08D1\u08CF\x03\x02\x02\x02\u08D1" +
		"\u08D2\x03\x02\x02\x02\u08D2\u0A22\x03\x02\x02\x02\u08D3\u08D5\x07\x07" +
		"\x02\x02\u08D4\u08D6\x07\x1B\x02\x02\u08D5\u08D4\x03\x02\x02\x02\u08D5" +
		"\u08D6\x03\x02\x02\x02\u08D6\u08D7\x03\x02\x02\x02\u08D7\u08D8\x07\u03D0" +
		"\x02\x02\u08D8\u08D9\x05\u0206\u0104\x02\u08D9\u08E0\x05P)\x02\u08DA\u08DB" +
		"\x07\u03D2\x02\x02\u08DB\u08DC\x05\u0206\u0104\x02\u08DC\u08DD\x05P)\x02" +
		"\u08DD\u08DF\x03\x02\x02\x02\u08DE\u08DA\x03\x02\x02\x02\u08DF\u08E2\x03" +
		"\x02\x02\x02\u08E0\u08DE\x03\x02\x02\x02\u08E0\u08E1\x03\x02\x02\x02\u08E1" +
		"\u08E3\x03\x02\x02\x02\u08E2\u08E0\x03\x02\x02\x02\u08E3\u08E4\x07\u03D1" +
		"\x02\x02\u08E4\u0A22\x03\x02\x02\x02\u08E5\u08E6\x07\x07\x02\x02\u08E6" +
		"\u08E8\t\x14\x02\x02\u08E7\u08E9\x05\u0206\u0104\x02\u08E8\u08E7\x03\x02" +
		"\x02\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9\u08EB\x03\x02\x02\x02\u08EA" +
		"\u08EC\x05@!\x02\u08EB\u08EA\x03\x02\x02\x02\u08EB\u08EC\x03\x02\x02\x02" +
		"\u08EC\u08ED\x03\x02\x02\x02\u08ED\u08F1\x05\u022A\u0116\x02\u08EE\u08F0" +
		"\x05B\"\x02\u08EF\u08EE\x03\x02\x02\x02\u08F0\u08F3\x03\x02\x02\x02\u08F1" +
		"\u08EF\x03\x02\x02\x02\u08F1\u08F2\x03\x02\x02\x02\u08F2\u0A22\x03\x02" +
		"\x02\x02\u08F3\u08F1\x03\x02\x02\x02\u08F4\u08F9\x07\x07\x02\x02\u08F5" +
		"\u08F7\x07\x1D\x02\x02\u08F6\u08F8\x05\u0206\u0104\x02\u08F7\u08F6\x03" +
		"\x02\x02\x02\u08F7\u08F8\x03\x02\x02\x02\u08F8\u08FA\x03\x02\x02\x02\u08F9" +
		"\u08F5\x03\x02\x02\x02\u08F9\u08FA\x03\x02\x02\x02\u08FA\u08FB\x03\x02" +
		"\x02\x02\u08FB\u08FC\x07r\x02\x02\u08FC\u08FE\x07Q\x02\x02\u08FD\u08FF" +
		"\x05@!\x02\u08FE\u08FD\x03\x02\x02\x02\u08FE\u08FF\x03\x02\x02\x02\u08FF" +
		"\u0900\x03\x02\x02\x02\u0900\u0904\x05\u022A\u0116\x02\u0901\u0903\x05" +
		"B\"\x02\u0902\u0901\x03\x02\x02\x02\u0903\u0906\x03\x02\x02\x02\u0904" +
		"\u0902\x03\x02\x02\x02\u0904\u0905\x03\x02\x02\x02\u0905\u0A22\x03\x02" +
		"\x02\x02\u0906\u0904\x03\x02\x02\x02\u0907\u090C\x07\x07\x02\x02\u0908" +
		"\u090A\x07\x1D\x02\x02\u0909\u090B\x05\u0206\u0104\x02\u090A\u0909\x03" +
		"\x02\x02\x02\u090A\u090B\x03\x02\x02\x02\u090B\u090D\x03\x02\x02\x02\u090C" +
		"\u0908\x03\x02\x02\x02\u090C\u090D\x03\x02\x02\x02\u090D\u090E\x03\x02" +
		"\x02\x02\u090E\u0910\x07\x9F\x02\x02\u090F\u0911\t\x14\x02\x02\u0910\u090F" +
		"\x03\x02\x02\x02\u0910\u0911\x03\x02\x02\x02\u0911\u0913\x03\x02\x02\x02" +
		"\u0912\u0914\x05\u0206\u0104\x02\u0913\u0912\x03\x02\x02\x02\u0913\u0914" +
		"\x03\x02\x02\x02\u0914\u0916\x03\x02\x02\x02\u0915\u0917\x05@!\x02\u0916" +
		"\u0915\x03\x02\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917\u0918\x03\x02" +
		"\x02\x02\u0918\u091C\x05\u022A\u0116\x02\u0919\u091B\x05B\"\x02\u091A" +
		"\u0919\x03\x02\x02\x02\u091B\u091E\x03\x02";
	private static readonly _serializedATNSegment6: string =
		"\x02\x02\u091C\u091A\x03\x02\x02\x02\u091C\u091D\x03\x02\x02\x02\u091D" +
		"\u0A22\x03\x02\x02\x02\u091E\u091C\x03\x02\x02\x02\u091F\u0920\x07\x07" +
		"\x02\x02\u0920\u0922\t\x16\x02\x02\u0921\u0923\t\x14\x02\x02\u0922\u0921" +
		"\x03\x02\x02\x02\u0922\u0923\x03\x02\x02\x02\u0923\u0925\x03\x02\x02\x02" +
		"\u0924\u0926\x05\u0206\u0104\x02\u0925\u0924\x03\x02\x02\x02\u0925\u0926" +
		"\x03\x02\x02\x02\u0926\u0927\x03\x02\x02\x02\u0927\u092B\x05\u022A\u0116" +
		"\x02\u0928\u092A\x05B\"\x02\u0929\u0928\x03\x02\x02\x02\u092A\u092D\x03" +
		"\x02\x02\x02\u092B\u0929\x03\x02\x02\x02\u092B\u092C\x03\x02\x02\x02\u092C" +
		"\u0A22\x03\x02\x02\x02\u092D\u092B\x03\x02\x02\x02\u092E\u0933\x07\x07" +
		"\x02\x02\u092F\u0931\x07\x1D\x02\x02\u0930\u0932\x05\u0206\u0104\x02\u0931" +
		"\u0930\x03\x02\x02\x02\u0931\u0932\x03\x02\x02\x02\u0932\u0934\x03\x02" +
		"\x02\x02\u0933\u092F\x03\x02\x02\x02\u0933\u0934\x03\x02\x02\x02\u0934" +
		"\u0935\x03\x02\x02\x02\u0935\u0936\x07<\x02\x02\u0936\u0938\x07Q\x02\x02" +
		"\u0937\u0939\x05\u0206\u0104\x02\u0938\u0937\x03\x02\x02\x02\u0938\u0939" +
		"\x03\x02\x02\x02\u0939\u093A\x03\x02\x02\x02\u093A\u093B\x05\u022A\u0116" +
		"\x02\u093B\u093C\x05V,\x02\u093C\u0A22\x03\x02\x02\x02\u093D\u0942\x07" +
		"\x07\x02\x02\u093E\u0940\x07\x1D\x02\x02\u093F\u0941\x05\u0206\u0104\x02" +
		"\u0940\u093F\x03\x02\x02\x02\u0940\u0941\x03\x02\x02\x02\u0941\u0943\x03" +
		"\x02\x02\x02\u0942\u093E\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943" +
		"\u0944\x03\x02\x02\x02\u0944\u0945\x07\x19\x02\x02\u0945\u0946\x07\u03D0" +
		"\x02\x02\u0946\u0947\x05\u0254\u012B\x02\u0947\u0948\x07\u03D1\x02\x02" +
		"\u0948\u0A22\x03\x02\x02\x02\u0949\u094B\x07\u0103\x02\x02\u094A\u094C" +
		"\x07\u03C7\x02\x02\u094B\u094A\x03\x02\x02\x02\u094B\u094C\x03\x02\x02" +
		"\x02\u094C\u094D\x03\x02\x02\x02\u094D\u0A22\t\x05\x02\x02\u094E\u0950" +
		"\x07\t\x02\x02\u094F\u0951\x07\x1B\x02\x02\u0950\u094F\x03\x02\x02\x02" +
		"\u0950\u0951\x03\x02\x02\x02\u0951\u0952\x03\x02\x02\x02\u0952\u0958\x05" +
		"\u0206\u0104\x02\u0953\u0954\x07\x87\x02\x02\u0954\u0955\x07\'\x02\x02" +
		"\u0955\u0959\x05\u0236\u011C\x02\u0956\u0957\x07/\x02\x02\u0957\u0959" +
		"\x07\'\x02\x02\u0958\u0953\x03\x02\x02\x02\u0958\u0956\x03\x02\x02\x02" +
		"\u0959\u0A22\x03\x02\x02\x02\u095A\u095C\x07\x17\x02\x02\u095B\u095D\x07" +
		"\x1B\x02\x02\u095C\u095B\x03\x02\x02\x02\u095C\u095D\x03\x02\x02\x02\u095D" +
		"\u095E\x03\x02\x02\x02\u095E\u095F\x05\u0206\u0104\x02\u095F\u0960\x05" +
		"\u0206\u0104\x02\u0960\u0964\x05P)\x02\u0961\u0965\x07\u015A\x02\x02\u0962" +
		"\u0963\x07\u0101\x02\x02\u0963\u0965\x05\u0206\u0104\x02\u0964\u0961\x03" +
		"\x02\x02\x02\u0964\u0962\x03\x02\x02\x02\u0964\u0965\x03\x02\x02\x02\u0965" +
		"\u0A22\x03\x02\x02\x02\u0966\u0967\x07{\x02\x02\u0967\u0968\x07\x1B\x02" +
		"\x02\u0968\u0969\x05\u0206\u0104\x02\u0969\u096A\x07\x99\x02\x02\u096A" +
		"\u096B\x05\u0206\u0104\x02\u096B\u0A22\x03\x02\x02\x02\u096C\u096E\x07" +
		"\\\x02\x02\u096D\u096F\x07\u03C7\x02\x02\u096E\u096D\x03\x02\x02\x02\u096E" +
		"\u096F\x03\x02\x02\x02\u096F\u0970\x03\x02\x02\x02\u0970\u0A22\t\x06\x02" +
		"\x02\u0971\u0973\x07\u01A7\x02\x02\u0972\u0974\x07\x1B\x02\x02\u0973\u0972" +
		"\x03\x02\x02\x02\u0973\u0974\x03\x02\x02\x02\u0974\u0975\x03\x02\x02\x02" +
		"\u0975\u0976\x05\u0206\u0104\x02\u0976\u097A\x05P)\x02\u0977\u097B\x07" +
		"\u015A\x02\x02\u0978\u0979\x07\u0101\x02\x02\u0979\u097B\x05\u0206\u0104" +
		"\x02\u097A\u0977\x03\x02\x02\x02\u097A\u0978\x03\x02\x02\x02\u097A\u097B" +
		"\x03\x02\x02\x02\u097B\u0A22\x03\x02\x02\x02\u097C\u097E\x07/\x02\x02" +
		"\u097D\u097F\x07\x1B\x02\x02\u097E\u097D\x03\x02\x02\x02\u097E\u097F\x03" +
		"\x02\x02\x02\u097F\u0980\x03\x02\x02\x02\u0980\u0982\x05\u0206\u0104\x02" +
		"\u0981\u0983\x07\x7F\x02\x02\u0982\u0981\x03\x02\x02\x02\u0982\u0983\x03" +
		"\x02\x02\x02\u0983\u0A22\x03\x02\x02\x02\u0984\u0985\x07/\x02\x02\u0985" +
		"\u0986\x07r\x02\x02\u0986\u0A22\x07Q\x02\x02\u0987\u0988\x07{\x02\x02" +
		"\u0988\u0989\t\x14\x02\x02\u0989\u098A\x05\u0206\u0104\x02\u098A\u098B" +
		"\x07\x99\x02\x02\u098B\u098C\x05\u0206\u0104\x02\u098C\u0A22\x03\x02\x02" +
		"\x02\u098D\u098E\x07/\x02\x02\u098E\u098F\t\x14\x02\x02\u098F\u0A22\x05" +
		"\u0206\u0104\x02\u0990\u0991\x07/\x02\x02\u0991\u0992\x07<\x02\x02\u0992" +
		"\u0993\x07Q\x02\x02\u0993\u0A22\x05\u0206\u0104\x02\u0994\u0995\x07\u013B" +
		"\x02\x02\u0995\u0A22\x07R\x02\x02\u0996\u0997\x07\u0142\x02\x02\u0997" +
		"\u0A22\x07R\x02\x02\u0998\u099A\x07{\x02\x02\u0999\u099B\t\x1F\x02\x02" +
		"\u099A\u0999\x03\x02\x02\x02\u099A\u099B\x03\x02\x02\x02\u099B\u099E\x03" +
		"\x02\x02\x02\u099C\u099F\x05\u0206\u0104\x02\u099D\u099F\x05\u01EC\xF7" +
		"\x02\u099E\u099C\x03\x02\x02\x02\u099E\u099D\x03\x02\x02\x02\u099F\u0A22" +
		"\x03\x02\x02\x02\u09A0\u09A1\x07m\x02\x02\u09A1\u09A2\x07\x12\x02\x02" +
		"\u09A2\u0A22\x05\u0226\u0114\x02\u09A3\u09A4\x07\x1F\x02\x02\u09A4\u09A5" +
		"\x07\x99\x02\x02\u09A5\u09A6\x07\x18\x02\x02\u09A6\u09A7\x07\x87\x02\x02" +
		"\u09A7\u09AA\x05\u01F8\xFD\x02\u09A8\u09A9\x07\x1A\x02\x02\u09A9\u09AB" +
		"\x05\u01FA\xFE\x02\u09AA\u09A8\x03\x02\x02\x02\u09AA\u09AB\x03\x02\x02" +
		"\x02\u09AB\u0A22\x03\x02\x02\x02\u09AC\u09AE\x07\'\x02\x02\u09AD\u09AC" +
		"\x03\x02\x02\x02\u09AD\u09AE\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02" +
		"\u09AF\u09B0\x07\x18\x02\x02\u09B0\u09B1\x07\x87\x02\x02\u09B1\u09B2\x07" +
		"\u03C7\x02\x02\u09B2\u09B6\x05\u01F8\xFD\x02\u09B3\u09B4\x07\x1A\x02\x02" +
		"\u09B4\u09B5\x07\u03C7\x02\x02\u09B5\u09B7\x05\u01FA\xFE\x02\u09B6\u09B3" +
		"\x03\x02\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7\u0A22\x03\x02\x02\x02" +
		"\u09B8\u09B9\x07\u013C\x02\x02\u09B9\u0A22\x07\u021A\x02\x02\u09BA\u09BB" +
		"\x07\u016C\x02\x02\u09BB\u0A22\x07\u021A\x02\x02\u09BC\u0A22\x07;\x02" +
		"\x02\u09BD\u09BE\t \x02\x02\u09BE\u0A22\x07\u022C\x02\x02\u09BF\u09C0" +
		"\x07\x07\x02\x02\u09C0\u09C1\x07q\x02\x02\u09C1\u09C2\x07\u03D0\x02\x02" +
		"\u09C2\u09C7\x05h5\x02\u09C3\u09C4\x07\u03D2\x02\x02\u09C4\u09C6\x05h" +
		"5\x02\u09C5\u09C3\x03\x02\x02\x02\u09C6\u09C9\x03\x02\x02\x02\u09C7\u09C5" +
		"\x03\x02\x02\x02\u09C7\u09C8\x03\x02\x02\x02\u09C8\u09CA\x03\x02\x02\x02" +
		"\u09C9\u09C7\x03\x02\x02\x02\u09CA\u09CB\x07\u03D1\x02\x02\u09CB\u0A22" +
		"\x03\x02\x02\x02\u09CC\u09CD\x07/\x02\x02\u09CD\u09CE\x07q\x02\x02\u09CE" +
		"\u0A22\x05\u0226\u0114\x02\u09CF\u09D0\x07\u013C\x02\x02\u09D0\u09D3\x07" +
		"q\x02\x02\u09D1\u09D4\x05\u0226\u0114\x02\u09D2\u09D4\x07\b\x02\x02\u09D3" +
		"\u09D1\x03\x02\x02\x02\u09D3\u09D2\x03\x02\x02\x02\u09D4\u09D5\x03\x02" +
		"\x02\x02\u09D5\u0A22\x07\u021A\x02\x02\u09D6\u09D7\x07\u016C\x02\x02\u09D7" +
		"\u09DA\x07q\x02\x02\u09D8\u09DB\x05\u0226\u0114\x02\u09D9\u09DB\x07\b" +
		"\x02\x02\u09DA\u09D8\x03\x02\x02\x02\u09DA\u09D9\x03\x02\x02\x02\u09DB" +
		"\u09DC\x03\x02\x02\x02\u09DC\u0A22\x07\u021A\x02\x02\u09DD\u09DE\x07\u0221" +
		"\x02\x02\u09DE\u09E1\x07q\x02\x02\u09DF\u09E2\x05\u0226\u0114\x02\u09E0" +
		"\u09E2\x07\b\x02\x02\u09E1\u09DF\x03\x02\x02\x02\u09E1\u09E0\x03\x02\x02" +
		"\x02\u09E2\u0A22\x03\x02\x02\x02\u09E3\u09E4\x07\u011D\x02\x02\u09E4\u09E5" +
		"\x07q\x02\x02\u09E5\u0A22\x05\u020C\u0107\x02\u09E6\u09E7\x07\u01DD\x02" +
		"\x02\u09E7\u09E8\x07q\x02\x02\u09E8\u09E9\x05\u0226\u0114\x02\u09E9\u09EA" +
		"\x07M\x02\x02\u09EA\u09EB\x07\u03D0\x02\x02\u09EB\u09F0\x05h5\x02\u09EC" +
		"\u09ED\x07\u03D2\x02\x02\u09ED\u09EF\x05h5\x02\u09EE\u09EC\x03\x02\x02" +
		"\x02\u09EF\u09F2\x03\x02\x02\x02\u09F0\u09EE\x03\x02\x02\x02\u09F0\u09F1" +
		"\x03\x02\x02\x02\u09F1\u09F3\x03\x02\x02\x02\u09F2\u09F0\x03\x02\x02\x02" +
		"\u09F3\u09F4\x07\u03D1\x02\x02\u09F4\u0A22\x03\x02\x02\x02\u09F5\u09F6" +
		"\x07\u014F\x02\x02\u09F6\u09F7\x07q\x02\x02\u09F7\u09F8\x05\u0206\u0104" +
		"\x02\u09F8\u09F9\x07\xAA\x02\x02\u09F9\u09FA\x07\x96\x02\x02\u09FA\u09FD" +
		"\x05\u01EE\xF8\x02\u09FB\u09FC\t \x02\x02\u09FC\u09FE\x07\u022C\x02\x02" +
		"\u09FD\u09FB\x03\x02\x02\x02\u09FD\u09FE\x03\x02\x02\x02\u09FE\u0A22\x03" +
		"\x02\x02\x02\u09FF\u0A00\x07\v\x02\x02\u0A00\u0A03\x07q\x02\x02\u0A01" +
		"\u0A04\x05\u0226\u0114\x02\u0A02\u0A04\x07\b\x02\x02\u0A03\u0A01\x03\x02" +
		"\x02\x02\u0A03\u0A02\x03\x02\x02\x02\u0A04\u0A22\x03\x02\x02\x02\u0A05" +
		"\u0A06\x07\x19\x02\x02\u0A06\u0A09\x07q\x02\x02\u0A07\u0A0A\x05\u0226" +
		"\u0114\x02\u0A08\u0A0A\x07\b\x02\x02\u0A09\u0A07\x03\x02\x02\x02\u0A09" +
		"\u0A08\x03\x02\x02\x02\u0A0A\u0A22\x03\x02\x02\x02\u0A0B\u0A0C\x07i\x02" +
		"\x02\u0A0C\u0A0F\x07q\x02\x02\u0A0D\u0A10\x05\u0226\u0114\x02\u0A0E\u0A10" +
		"\x07\b\x02\x02\u0A0F\u0A0D\x03\x02\x02\x02\u0A0F\u0A0E\x03\x02\x02\x02" +
		"\u0A10\u0A22\x03\x02\x02\x02\u0A11\u0A12\x07\u01D4\x02\x02\u0A12\u0A15" +
		"\x07q\x02\x02\u0A13\u0A16\x05\u0226\u0114\x02\u0A14\u0A16\x07\b\x02\x02" +
		"\u0A15\u0A13\x03\x02\x02\x02\u0A15\u0A14\x03\x02\x02\x02\u0A16\u0A22\x03" +
		"\x02\x02\x02\u0A17\u0A18\x07\u01DE\x02\x02\u0A18\u0A1B\x07q\x02\x02\u0A19" +
		"\u0A1C\x05\u0226\u0114\x02\u0A1A\u0A1C\x07\b\x02\x02\u0A1B\u0A19\x03\x02" +
		"\x02\x02\u0A1B\u0A1A\x03\x02\x02\x02\u0A1C\u0A22\x03\x02\x02\x02\u0A1D" +
		"\u0A1E\x07\u01DC\x02\x02\u0A1E\u0A22\x07\u01C2\x02\x02\u0A1F\u0A20\x07" +
		"\u0228\x02\x02\u0A20\u0A22\x07\u01C2\x02\x02\u0A21\u08BE\x03\x02\x02\x02" +
		"\u0A21\u08C8\x03\x02\x02\x02\u0A21\u08D3\x03\x02\x02\x02\u0A21\u08E5\x03" +
		"\x02\x02\x02\u0A21\u08F4\x03\x02\x02\x02\u0A21\u0907\x03\x02\x02\x02\u0A21" +
		"\u091F\x03\x02\x02\x02\u0A21\u092E\x03\x02\x02\x02\u0A21\u093D\x03\x02" +
		"\x02\x02\u0A21\u0949\x03\x02\x02\x02\u0A21\u094E\x03\x02\x02\x02\u0A21" +
		"\u095A\x03\x02\x02\x02\u0A21\u0966\x03\x02\x02\x02\u0A21\u096C\x03\x02" +
		"\x02\x02\u0A21\u0971\x03\x02\x02\x02\u0A21\u097C\x03\x02\x02\x02\u0A21" +
		"\u0984\x03\x02\x02\x02\u0A21\u0987\x03\x02\x02\x02\u0A21\u098D\x03\x02" +
		"\x02\x02\u0A21\u0990\x03\x02\x02\x02\u0A21\u0994\x03\x02\x02\x02\u0A21" +
		"\u0996\x03\x02\x02\x02\u0A21\u0998\x03\x02\x02\x02\u0A21\u09A0\x03\x02" +
		"\x02\x02\u0A21\u09A3\x03\x02\x02\x02\u0A21\u09AD\x03\x02\x02\x02\u0A21" +
		"\u09B8\x03\x02\x02\x02\u0A21\u09BA\x03\x02\x02\x02\u0A21\u09BC\x03\x02" +
		"\x02\x02\u0A21\u09BD\x03\x02\x02\x02\u0A21\u09BF\x03\x02\x02\x02\u0A21" +
		"\u09CC\x03\x02\x02\x02\u0A21\u09CF\x03\x02\x02\x02\u0A21\u09D6\x03\x02" +
		"\x02\x02\u0A21\u09DD\x03\x02\x02\x02\u0A21\u09E3\x03\x02\x02\x02\u0A21" +
		"\u09E6\x03\x02\x02\x02\u0A21\u09F5\x03\x02\x02\x02\u0A21\u09FF\x03\x02" +
		"\x02\x02\u0A21\u0A05\x03\x02\x02\x02\u0A21\u0A0B\x03\x02\x02\x02\u0A21" +
		"\u0A11\x03\x02\x02\x02\u0A21\u0A17\x03\x02\x02\x02\u0A21\u0A1D\x03\x02" +
		"\x02\x02\u0A21\u0A1F\x03\x02\x02\x02\u0A22\x87\x03\x02\x02\x02\u0A23\u0A24" +
		"\x07/\x02\x02\u0A24\u0A26\t\x02\x02\x02\u0A25\u0A27\x05\u023C\u011F\x02" +
		"\u0A26\u0A25\x03\x02\x02\x02\u0A26\u0A27\x03\x02\x02\x02\u0A27\u0A28\x03" +
		"\x02\x02\x02\u0A28\u0A29\x05\u0206\u0104\x02\u0A29\x89\x03\x02\x02\x02" +
		"\u0A2A\u0A2B\x07/\x02\x02\u0A2B\u0A2D\x07\u014C\x02\x02\u0A2C\u0A2E\x05" +
		"\u023C\u011F\x02\u0A2D\u0A2C\x03\x02\x02\x02\u0A2D\u0A2E\x03\x02\x02\x02" +
		"\u0A2E\u0A2F\x03\x02\x02\x02\u0A2F\u0A30\x05\u01EC\xF7\x02\u0A30\x8B\x03" +
		"\x02\x02\x02\u0A31\u0A32\x07/\x02\x02\u0A32\u0A34\x07G\x02\x02\u0A33\u0A35" +
		"\t\x03\x02\x02\u0A34\u0A33\x03\x02\x02\x02\u0A34\u0A35\x03\x02\x02\x02" +
		"\u0A35\u0A36\x03\x02\x02\x02\u0A36\u0A37\x05\u0206\u0104\x02\u0A37\u0A38" +
		"\x07h\x02\x02\u0A38\u0A45\x05\u01EE\xF8\x02\u0A39\u0A3B\x07\u0103\x02" +
		"\x02\u0A3A\u0A3C\x07\u03C7\x02\x02\u0A3B\u0A3A\x03\x02\x02\x02\u0A3B\u0A3C" +
		"\x03\x02\x02\x02\u0A3C\u0A3D\x03\x02\x02\x02\u0A3D\u0A44\t\x05\x02\x02" +
		"\u0A3E\u0A40\x07\\\x02\x02\u0A3F\u0A41\x07\u03C7\x02\x02\u0A40\u0A3F\x03" +
		"\x02\x02\x02\u0A40\u0A41\x03\x02\x02\x02\u0A41\u0A42\x03\x02\x02\x02\u0A42" +
		"\u0A44\t\x06\x02\x02\u0A43\u0A39\x03\x02\x02\x02\u0A43\u0A3E\x03\x02\x02" +
		"\x02\u0A44\u0A47\x03\x02\x02\x02\u0A45\u0A43\x03\x02\x02\x02\u0A45\u0A46" +
		"\x03\x02\x02\x02\u0A46\x8D\x03\x02\x02\x02\u0A47\u0A45\x03\x02\x02\x02" +
		"\u0A48\u0A49\x07/\x02\x02\u0A49\u0A4A\x07\u0183\x02\x02\u0A4A\u0A4B\x07" +
		"A\x02\x02\u0A4B\u0A4C\x05\u0206\u0104\x02\u0A4C\u0A4D\x07\u0146\x02\x02" +
		"\u0A4D\u0A4E\x07\u03C7\x02\x02\u0A4E\u0A4F\x05\u01FC\xFF\x02\u0A4F\x8F" +
		"\x03\x02\x02\x02\u0A50\u0A51\x07/\x02\x02\u0A51\u0A53\x07s\x02\x02\u0A52" +
		"\u0A54\x05\u023C\u011F\x02\u0A53\u0A52\x03\x02\x02\x02\u0A53\u0A54\x03" +
		"\x02\x02\x02\u0A54\u0A55\x03\x02\x02\x02\u0A55\u0A56\x05\u01EC\xF7\x02" +
		"\u0A56\x91\x03\x02\x02\x02\u0A57\u0A58\x07/\x02\x02\u0A58\u0A5A\x07\u0160" +
		"\x02\x02\u0A59\u0A5B\x05\u023C\u011F\x02\u0A5A\u0A59\x03\x02\x02\x02\u0A5A" +
		"\u0A5B\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5D\x05\u01EC" +
		"\xF7\x02\u0A5D\x93\x03\x02\x02\x02\u0A5E\u0A5F\x07/\x02\x02\u0A5F\u0A61" +
		"\x07\u01F3\x02\x02\u0A60\u0A62\x05\u023C\u011F\x02\u0A61\u0A60\x03\x02" +
		"\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62\u0A63\x03\x02\x02\x02\u0A63" +
		"\u0A64\x05\u0206\u0104\x02\u0A64\x95\x03\x02\x02\x02\u0A65\u0A67\x07/" +
		"\x02\x02\u0A66\u0A68\x07\u021B\x02\x02\u0A67\u0A66\x03\x02\x02\x02\u0A67" +
		"\u0A68\x03\x02\x02\x02\u0A68\u0A69\x03\x02\x02\x02\u0A69\u0A6B\x07\x96" +
		"\x02\x02\u0A6A\u0A6C\x05\u023C\u011F\x02\u0A6B\u0A6A\x03\x02\x02\x02\u0A6B" +
		"\u0A6C\x03\x02\x02\x02\u0A6C\u0A6D\x03\x02\x02\x02\u0A6D\u0A6F\x05\u0228" +
		"\u0115\x02\u0A6E\u0A70\t!\x02\x02\u0A6F\u0A6E\x03\x02\x02\x02\u0A6F\u0A70" +
		"\x03\x02\x02\x02\u0A70\x97\x03\x02\x02\x02\u0A71\u0A72\x07/\x02\x02\u0A72" +
		"\u0A73\x07\u021A\x02\x02\u0A73\u0A79\x05\u0206\u0104\x02\u0A74\u0A76\x07" +
		"\u0146\x02\x02\u0A75\u0A77\x07\u03C7\x02\x02\u0A76\u0A75\x03\x02\x02\x02" +
		"\u0A76\u0A77\x03\x02\x02\x02\u0A77\u0A78\x03\x02\x02\x02\u0A78\u0A7A\x05" +
		"\u01FC\xFF\x02\u0A79\u0A74\x03\x02\x02\x02\u0A79\u0A7A\x03\x02\x02\x02" +
		"\u0A7A\x99\x03\x02\x02\x02\u0A7B\u0A7C\x07/\x02\x02\u0A7C\u0A7E\x07\x9B" +
		"\x02\x02\u0A7D\u0A7F\x05\u023C\u011F\x02\u0A7E\u0A7D\x03\x02\x02\x02\u0A7E" +
		"\u0A7F\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02\x02\u0A80\u0A81\x05\u01EC" +
		"\xF7\x02\u0A81\x9B\x03\x02\x02\x02\u0A82\u0A83\x07/\x02\x02\u0A83\u0A85" +
		"\x07\u022F\x02\x02\u0A84\u0A86\x05\u023C\u011F\x02\u0A85\u0A84\x03\x02" +
		"\x02\x02\u0A85\u0A86\x03\x02\x02\x02\u0A86\u0A87\x03\x02\x02\x02\u0A87" +
		"\u0A8C\x05\u01EC\xF7\x02\u0A88\u0A89\x07\u03D2\x02\x02\u0A89\u0A8B\x05" +
		"\u01EC\xF7\x02\u0A8A\u0A88\x03\x02\x02\x02\u0A8B\u0A8E\x03\x02\x02\x02" +
		"\u0A8C\u0A8A\x03\x02\x02\x02\u0A8C\u0A8D\x03\x02\x02\x02\u0A8D\u0A90\x03" +
		"\x02\x02\x02\u0A8E\u0A8C\x03\x02\x02\x02\u0A8F\u0A91\t!\x02\x02\u0A90" +
		"\u0A8F\x03\x02\x02\x02\u0A90\u0A91\x03\x02\x02\x02\u0A91\x9D\x03\x02\x02" +
		"\x02\u0A92\u0A93\x07{\x02\x02\u0A93\u0A94\x07\x96\x02\x02\u0A94\u0A99" +
		"\x05\xA0Q\x02\u0A95\u0A96\x07\u03D2\x02\x02\u0A96\u0A98\x05\xA0Q\x02\u0A97" +
		"\u0A95\x03\x02\x02\x02\u0A98\u0A9B\x03\x02\x02\x02\u0A99\u0A97\x03\x02" +
		"\x02\x02\u0A99\u0A9A\x03\x02\x02\x02\u0A9A\x9F\x03\x02\x02\x02\u0A9B\u0A99" +
		"\x03\x02\x02\x02\u0A9C\u0A9D\x05\u01EE\xF8\x02\u0A9D\u0A9E\x07\x99\x02" +
		"\x02\u0A9E\u0A9F\x05\u01EE\xF8\x02\u0A9F\xA1\x03\x02\x02\x02\u0AA0\u0AA2" +
		"\x07\u0221\x02\x02\u0AA1\u0AA3\x07\x96\x02\x02\u0AA2\u0AA1\x03\x02\x02" +
		"\x02\u0AA2\u0AA3\x03\x02\x02\x02\u0AA3\u0AA4\x03\x02\x02\x02\u0AA4\u0AA5" +
		"\x05\u01EE\xF8\x02\u0AA5\xA3\x03\x02\x02\x02\u0AA6\u0AA7\x07\x13\x02\x02" +
		"\u0AA7\u0AAE\x05\u01EC\xF7\x02\u0AA8\u0AAB\x07\u03D0\x02\x02\u0AA9\u0AAC" +
		"\x05\u0230\u0119\x02\u0AAA\u0AAC\x05\u022C\u0117\x02\u0AAB\u0AA9\x03\x02" +
		"\x02\x02\u0AAB\u0AAA\x03\x02\x02\x02\u0AAB\u0AAC\x03\x02\x02\x02\u0AAC" +
		"\u0AAD\x03\x02\x02\x02\u0AAD\u0AAF\x07\u03D1\x02\x02\u0AAE\u0AA8\x03\x02" +
		"\x02\x02\u0AAE\u0AAF\x03\x02\x02\x02\u0AAF\xA5\x03\x02\x02\x02\u0AB0\u0AB3" +
		"\x05\xC0a\x02\u0AB1\u0AB3\x05\xC2b\x02\u0AB2\u0AB0\x03\x02\x02\x02\u0AB2" +
		"\u0AB1\x03\x02\x02\x02\u0AB3\xA7\x03\x02\x02\x02\u0AB4\u0AB5\x07\u013E" +
		"\x02\x02\u0AB5\u0AB6\x05\u022C\u0117\x02\u0AB6\xA9\x03\x02\x02\x02\u0AB7" +
		"\u0ABC\x05\xC4c\x02\u0AB8\u0ABC\x05\xC6d\x02\u0AB9\u0ABC\x05\xC8e\x02" +
		"\u0ABA\u0ABC\x05\xCAf\x02\u0ABB\u0AB7\x03\x02\x02\x02\u0ABB\u0AB8\x03" +
		"\x02\x02\x02\u0ABB\u0AB9\x03\x02\x02\x02\u0ABB\u0ABA\x03\x02\x02\x02\u0ABC" +
		"\xAB\x03\x02\x02\x02\u0ABD\u0ABF\x07K\x02\x02\u0ABE\u0AC0\t\"\x02\x02" +
		"\u0ABF\u0ABE\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0\u0AC2\x03" +
		"\x02\x02\x02\u0AC1\u0AC3\x07E\x02\x02\u0AC2\u0AC1\x03\x02\x02\x02\u0AC2" +
		"\u0AC3\x03\x02\x02\x02\u0AC3\u0AC5\x03\x02\x02\x02\u0AC4\u0AC6\x07M\x02" +
		"\x02\u0AC5\u0AC4\x03\x02\x02\x02\u0AC5\u0AC6\x03\x02\x02\x02\u0AC6\u0AC7" +
		"\x03\x02\x02\x02\u0AC7\u0ACD\x05\u01EE\xF8\x02\u0AC8\u0AC9\x07q\x02\x02" +
		"\u0AC9\u0ACA\x07\u03D0\x02\x02\u0ACA\u0ACB\x05\u0226\u0114\x02\u0ACB\u0ACC" +
		"\x07\u03D1\x02\x02\u0ACC\u0ACE\x03\x02\x02\x02\u0ACD\u0AC8\x03\x02\x02" +
		"\x02\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE\u0ADF\x03\x02\x02\x02\u0ACF\u0AD0" +
		"\x07\u03D0\x02\x02\u0AD0\u0AD1\x05\u0226\u0114\x02\u0AD1\u0AD2\x07\u03D1" +
		"\x02\x02\u0AD2\u0AD4\x03\x02\x02\x02\u0AD3\u0ACF\x03\x02\x02\x02\u0AD3" +
		"\u0AD4\x03\x02\x02\x02\u0AD4\u0AD5\x03\x02\x02\x02\u0AD5\u0AE0\x05\xB8" +
		"]\x02\u0AD6\u0AD7\x07\x87\x02\x02\u0AD7\u0ADC\x05\xBA^\x02\u0AD8\u0AD9" +
		"\x07\u03D2\x02\x02\u0AD9\u0ADB\x05\xBA^\x02\u0ADA\u0AD8\x03\x02\x02\x02" +
		"\u0ADB\u0ADE\x03\x02\x02\x02\u0ADC\u0ADA\x03\x02\x02\x02\u0ADC\u0ADD\x03" +
		"\x02\x02\x02\u0ADD\u0AE0\x03\x02\x02\x02\u0ADE\u0ADC\x03\x02\x02\x02\u0ADF" +
		"\u0AD3\x03\x02\x02\x02\u0ADF\u0AD6\x03\x02\x02\x02\u0AE0\u0AED\x03\x02" +
		"\x02\x02\u0AE1\u0AE2\x07h\x02\x02\u0AE2\u0AE3\x07\u0140\x02\x02\u0AE3" +
		"\u0AE4\x07Q\x02\x02\u0AE4\u0AE5\x07\xA2\x02\x02\u0AE5\u0AEA\x05\xBA^\x02" +
		"\u0AE6\u0AE7\x07\u03D2\x02\x02\u0AE7\u0AE9\x05\xBA^\x02\u0AE8\u0AE6\x03" +
		"\x02\x02\x02\u0AE9\u0AEC\x03\x02\x02\x02\u0AEA\u0AE8\x03\x02\x02\x02\u0AEA" +
		"\u0AEB\x03\x02\x02\x02\u0AEB\u0AEE\x03\x02\x02\x02\u0AEC\u0AEA\x03\x02" +
		"\x02\x02\u0AED\u0AE1\x03\x02\x02\x02\u0AED\u0AEE\x03\x02\x02\x02\u0AEE" +
		"\xAD\x03\x02\x02\x02\u0AEF\u0AF0\x07[\x02\x02\u0AF0\u0AF2\x07\u0133\x02" +
		"\x02\u0AF1\u0AF3\t#\x02\x02\u0AF2\u0AF1\x03\x02\x02\x02\u0AF2\u0AF3\x03" +
		"\x02\x02\x02\u0AF3\u0AF5\x03\x02\x02\x02\u0AF4\u0AF6\x07\u0182\x02\x02" +
		"\u0AF5\u0AF4\x03\x02\x02\x02\u0AF5\u0AF6\x03\x02\x02\x02\u0AF6\u0AF7\x03" +
		"\x02\x02\x02\u0AF7\u0AF8\x07H\x02\x02\u0AF8\u0AFA\x07\u03DF\x02\x02\u0AF9" +
		"\u0AFB\t\b\x02\x02\u0AFA\u0AF9\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02" +
		"\x02\u0AFB\u0AFC\x03\x02\x02\x02\u0AFC\u0AFD\x07M\x02\x02\u0AFD\u0AFE" +
		"\x07\x96\x02\x02\u0AFE\u0B04\x05\u01EE\xF8\x02\u0AFF\u0B00\x07q\x02\x02" +
		"\u0B00\u0B01\x07\u03D0\x02\x02\u0B01\u0B02\x05\u0226\u0114\x02\u0B02\u0B03" +
		"\x07\u03D1\x02\x02\u0B03\u0B05\x03\x02\x02\x02\u0B04\u0AFF\x03\x02\x02" +
		"\x02\u0B04\u0B05\x03\x02\x02\x02\u0B05\u0B09\x03\x02\x02\x02\u0B06\u0B07" +
		"\x07\x18\x02\x02\u0B07\u0B08\x07\x87\x02\x02\u0B08\u0B0A\x05\u01F8\xFD" +
		"\x02\u0B09\u0B06\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A\u0B11" +
		"\x03\x02\x02\x02\u0B0B\u0B0D\t$\x02\x02\u0B0C\u0B0E\x05\xF4{\x02\u0B0D" +
		"\u0B0C\x03\x02\x02\x02\u0B0E\u0B0F\x03\x02\x02\x02\u0B0F\u0B0D\x03\x02" +
		"\x02\x02\u0B0F\u0B10\x03\x02\x02\x02\u0B10\u0B12\x03\x02\x02\x02\u0B11" +
		"\u0B0B\x03\x02\x02\x02\u0B11\u0B12\x03\x02\x02\x02\u0B12\u0B19\x03\x02" +
		"\x02\x02\u0B13\u0B15\x07Z\x02\x02\u0B14\u0B16\x05\xF6|\x02\u0B15\u0B14" +
		"\x03\x02\x02\x02\u0B16\u0B17\x03\x02\x02\x02\u0B17\u0B15\x03\x02\x02\x02" +
		"\u0B17\u0B18\x03\x02\x02\x02\u0B18\u0B1A\x03\x02\x02\x02\u0B19\u0B13\x03" +
		"\x02\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A\u0B1F\x03\x02\x02\x02\u0B1B" +
		"\u0B1C\x07E\x02\x02\u0B1C\u0B1D\x05\u020C\u0107\x02\u0B1D\u0B1E\t%\x02" +
		"\x02\u0B1E\u0B20\x03\x02\x02\x02\u0B1F\u0B1B\x03\x02\x02\x02\u0B1F\u0B20" +
		"\x03\x02\x02\x02\u0B20\u0B2C\x03\x02\x02\x02\u0B21\u0B22\x07\u03D0\x02" +
		"\x02\u0B22\u0B27\x05\xBC_\x02\u0B23\u0B24\x07\u03D2\x02\x02\u0B24\u0B26" +
		"\x05\xBC_\x02\u0B25\u0B23\x03\x02\x02\x02\u0B26\u0B29\x03\x02\x02\x02" +
		"\u0B27\u0B25\x03\x02\x02\x02\u0B27\u0B28\x03\x02\x02\x02\u0B28\u0B2A\x03" +
		"\x02\x02\x02\u0B29\u0B27\x03\x02\x02\x02\u0B2A\u0B2B\x07\u03D1\x02\x02" +
		"\u0B2B\u0B2D\x03\x02\x02\x02\u0B2C\u0B21\x03\x02\x02\x02\u0B2C\u0B2D\x03" +
		"\x02\x02\x02\u0B2D\u0B37\x03\x02\x02\x02\u0B2E\u0B2F\x07\x87\x02\x02\u0B2F" +
		"\u0B34\x05\xBA^\x02\u0B30\u0B31\x07\u03D2\x02\x02\u0B31\u0B33\x05\xBA" +
		"^\x02\u0B32\u0B30\x03\x02\x02\x02\u0B33\u0B36\x03\x02\x02\x02\u0B34\u0B32" +
		"\x03\x02\x02\x02\u0B34\u0B35\x03\x02\x02\x02\u0B35\u0B38\x03\x02\x02\x02" +
		"\u0B36\u0B34\x03\x02\x02\x02\u0B37\u0B2E\x03\x02\x02\x02\u0B37\u0B38\x03" +
		"\x02\x02\x02\u0B38\xAF\x03\x02\x02\x02\u0B39\u0B3A\x07[\x02\x02\u0B3A" +
		"\u0B3C\x07\u0239\x02\x02\u0B3B\u0B3D\t#\x02\x02\u0B3C\u0B3B\x03\x02\x02" +
		"\x02\u0B3C\u0B3D\x03\x02\x02\x02\u0B3D\u0B3F\x03\x02\x02\x02\u0B3E\u0B40" +
		"\x07\u0182\x02\x02\u0B3F\u0B3E\x03\x02\x02\x02\u0B3F\u0B40\x03\x02\x02" +
		"\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41\u0B42\x07H\x02\x02\u0B42\u0B44" +
		"\x07\u03DF\x02\x02\u0B43\u0B45\t\b\x02\x02\u0B44\u0B43\x03\x02\x02\x02" +
		"\u0B44\u0B45\x03\x02\x02\x02\u0B45\u0B46\x03\x02\x02\x02\u0B46\u0B47\x07" +
		"M\x02\x02\u0B47\u0B48\x07\x96\x02\x02\u0B48\u0B4C\x05\u01EE\xF8\x02\u0B49" +
		"\u0B4A\x07\x18\x02\x02\u0B4A\u0B4B\x07\x87\x02\x02\u0B4B\u0B4D\x05\u01F8" +
		"\xFD\x02\u0B4C\u0B49\x03\x02\x02\x02\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D" +
		"\u0B54\x03\x02\x02\x02\u0B4E\u0B4F\x07\u01EE\x02\x02\u0B4F\u0B50\x07\u016A" +
		"\x02\x02\u0B50\u0B51\x07\x12\x02\x02\u0B51\u0B52\x07\u03C9\x02\x02\u0B52" +
		"\u0B53\x07\u03DF\x02\x02\u0B53\u0B55\x07\u03C8\x02\x02\u0B54\u0B4E\x03" +
		"\x02\x02\x02\u0B54\u0B55\x03\x02\x02\x02\u0B55\u0B5A\x03\x02\x02\x02\u0B56" +
		"\u0B57\x07E\x02\x02\u0B57\u0B58\x05\u020C\u0107\x02\u0B58\u0B59\t%\x02" +
		"\x02\u0B59\u0B5B\x03\x02\x02\x02\u0B5A\u0B56\x03\x02\x02\x02\u0B5A\u0B5B" +
		"\x03\x02\x02\x02\u0B5B\u0B67\x03\x02\x02\x02\u0B5C\u0B5D\x07\u03D0\x02" +
		"\x02\u0B5D\u0B62\x05\xBC_\x02\u0B5E\u0B5F\x07\u03D2\x02\x02\u0B5F\u0B61" +
		"\x05\xBC_\x02\u0B60\u0B5E\x03\x02\x02\x02\u0B61\u0B64\x03\x02\x02\x02" +
		"\u0B62\u0B60\x03\x02\x02\x02\u0B62\u0B63\x03\x02\x02\x02\u0B63\u0B65\x03" +
		"\x02\x02\x02\u0B64\u0B62\x03\x02\x02\x02\u0B65\u0B66\x07\u03D1\x02\x02" +
		"\u0B66\u0B68\x03\x02\x02\x02\u0B67\u0B5C\x03\x02\x02\x02\u0B67\u0B68\x03" +
		"\x02\x02\x02\u0B68\u0B72\x03\x02\x02\x02\u0B69\u0B6A\x07\x87\x02\x02\u0B6A" +
		"\u0B6F\x05\xBA^\x02\u0B6B\u0B6C\x07\u03D2\x02\x02\u0B6C\u0B6E\x05\xBA" +
		"^\x02\u0B6D\u0B6B\x03\x02\x02\x02\u0B6E\u0B71\x03\x02\x02\x02\u0B6F\u0B6D" +
		"\x03\x02\x02\x02\u0B6F\u0B70\x03\x02\x02\x02\u0B70\u0B73\x03\x02\x02\x02" +
		"\u0B71\u0B6F\x03\x02\x02\x02\u0B72\u0B69\x03\x02\x02\x02\u0B72\u0B73\x03" +
		"\x02\x02\x02\u0B73\xB1\x03\x02\x02\x02\u0B74\u0B76\x07}\x02\x02\u0B75" +
		"\u0B77\t&\x02\x02\u0B76\u0B75\x03\x02\x02\x02\u0B76\u0B77\x03\x02\x02" +
		"\x02\u0B77\u0B79\x03\x02\x02\x02\u0B78\u0B7A\x07M\x02\x02\u0B79\u0B78" +
		"\x03\x02\x02\x02\u0B79\u0B7A\x03\x02\x02\x02\u0B7A\u0B7B\x03\x02\x02\x02" +
		"\u0B7B\u0B81\x05\u01EE\xF8\x02\u0B7C\u0B7D\x07q\x02\x02\u0B7D\u0B7E\x07" +
		"\u03D0\x02\x02\u0B7E\u0B7F\x05\u0226\u0114\x02\u0B7F\u0B80\x07\u03D1\x02" +
		"\x02\u0B80\u0B82\x03\x02\x02\x02\u0B81\u0B7C\x03\x02\x02\x02\u0B81\u0B82" +
		"\x03\x02\x02\x02\u0B82\u0B93\x03\x02\x02\x02\u0B83\u0B84\x07\u03D0\x02" +
		"\x02\u0B84\u0B85\x05\u0226\u0114\x02\u0B85\u0B86\x07\u03D1\x02\x02\u0B86" +
		"\u0B88\x03\x02\x02\x02\u0B87\u0B83\x03\x02\x02\x02\u0B87\u0B88\x03\x02" +
		"\x02\x02\u0B88\u0B89\x03\x02\x02\x02\u0B89\u0B94\x05\xB8]\x02\u0B8A\u0B8B" +
		"\x07\x87\x02\x02\u0B8B\u0B90\x05\xBA^\x02\u0B8C\u0B8D\x07\u03D2\x02\x02" +
		"\u0B8D\u0B8F\x05\xBA^\x02\u0B8E\u0B8C\x03\x02\x02\x02\u0B8F\u0B92\x03" +
		"\x02\x02\x02\u0B90\u0B8E\x03\x02\x02\x02\u0B90\u0B91\x03\x02\x02\x02\u0B91" +
		"\u0B94\x03\x02\x02\x02\u0B92\u0B90\x03\x02\x02\x02\u0B93\u0B87\x03\x02" +
		"\x02\x02\u0B93\u0B8A\x03\x02\x02\x02\u0B94\xB3\x03\x02\x02\x02\u0B95\u0B97" +
		"\x05\xE4s\x02\u0B96\u0B98\x05\xBE`\x02\u0B97\u0B96\x03\x02\x02\x02\u0B97" +
		"\u0B98\x03\x02\x02\x02\u0B98\u0BCD\x03\x02\x02\x02\u0B99\u0B9B\x05\xE0" +
		"q\x02\u0B9A\u0B9C\x05\xBE`\x02\u0B9B\u0B9A\x03\x02\x02\x02\u0B9B\u0B9C" +
		"\x03\x02\x02\x02\u0B9C\u0BCD\x03\x02\x02\x02\u0B9D\u0B9F\x05\xE6t\x02" +
		"\u0B9E\u0BA0\x05\xEAv\x02\u0B9F\u0B9E\x03\x02\x02\x02\u0BA0\u0BA1\x03" +
		"\x02\x02\x02\u0BA1\u0B9F\x03\x02\x02\x02\u0BA1\u0BA2\x03\x02\x02\x02\u0BA2" +
		"\u0BAB\x03\x02\x02\x02\u0BA3\u0BA5\x07\x9E\x02\x02\u0BA4\u0BA6\t\'\x02" +
		"\x02\u0BA5\u0BA4\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02\x02\x02\u0BA6\u0BA9" +
		"\x03\x02\x02\x02\u0BA7\u0BAA\x05\xE4s\x02\u0BA8\u0BAA\x05\xE0q\x02\u0BA9" +
		"\u0BA7\x03\x02\x02\x02\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAC\x03\x02" +
		"\x02\x02\u0BAB\u0BA3\x03\x02\x02\x02\u0BAB\u0BAC\x03\x02\x02\x02\u0BAC" +
		"\u0BAE\x03\x02\x02\x02\u0BAD\u0BAF\x05\xD0i\x02\u0BAE\u0BAD\x03\x02\x02" +
		"\x02\u0BAE\u0BAF\x03\x02\x02\x02\u0BAF\u0BB1\x03\x02\x02\x02\u0BB0\u0BB2" +
		"\x05\xFC\x7F\x02\u0BB1\u0BB0\x03\x02\x02\x02\u0BB1\u0BB2\x03\x02\x02\x02" +
		"\u0BB2\u0BB4\x03\x02\x02\x02\u0BB3\u0BB5\x05\xBE`\x02\u0BB4\u0BB3\x03" +
		"\x02\x02\x02\u0BB4\u0BB5\x03\x02\x02\x02\u0BB5\u0BCD\x03\x02\x02\x02\u0BB6" +
		"\u0BB8\x05\xE2r\x02\u0BB7\u0BB9\x05\xE8u\x02\u0BB8\u0BB7\x03\x02\x02\x02" +
		"\u0BB9\u0BBA\x03\x02\x02\x02\u0BBA\u0BB8\x03\x02\x02\x02\u0BBA\u0BBB\x03" +
		"\x02\x02\x02\u0BBB\u0BC1\x03\x02\x02\x02\u0BBC\u0BBE\x07\x9E\x02\x02\u0BBD" +
		"\u0BBF\t\'\x02\x02\u0BBE\u0BBD\x03\x02\x02\x02";
	private static readonly _serializedATNSegment7: string =
		"\u0BBE\u0BBF\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02\x02\x02\u0BC0\u0BC2\x05" +
		"\xE0q\x02\u0BC1\u0BBC\x03\x02\x02\x02\u0BC1\u0BC2\x03\x02\x02\x02\u0BC2" +
		"\u0BC4\x03\x02\x02\x02\u0BC3\u0BC5\x05\xD0i\x02\u0BC4\u0BC3\x03\x02\x02" +
		"\x02\u0BC4\u0BC5\x03\x02\x02\x02\u0BC5\u0BC7\x03\x02\x02\x02\u0BC6\u0BC8" +
		"\x05\xFC\x7F\x02\u0BC7\u0BC6\x03\x02\x02\x02\u0BC7\u0BC8\x03\x02\x02\x02" +
		"\u0BC8\u0BCA\x03\x02\x02\x02\u0BC9\u0BCB\x05\xBE`\x02\u0BCA\u0BC9\x03" +
		"\x02\x02\x02\u0BCA\u0BCB\x03\x02\x02\x02\u0BCB\u0BCD\x03\x02\x02\x02\u0BCC" +
		"\u0B95\x03\x02\x02\x02\u0BCC\u0B99\x03\x02\x02\x02\u0BCC\u0B9D\x03\x02" +
		"\x02\x02\u0BCC\u0BB6\x03\x02\x02\x02\u0BCD\xB5\x03\x02\x02\x02\u0BCE\u0BD1" +
		"\x05\xCCg\x02\u0BCF\u0BD1\x05\xCEh\x02\u0BD0\u0BCE\x03\x02\x02\x02\u0BD0" +
		"\u0BCF\x03\x02\x02\x02\u0BD1\xB7\x03\x02\x02\x02\u0BD2\u0BE2\x05\xB4[" +
		"\x02\u0BD3\u0BD4\t(\x02\x02\u0BD4\u0BD5\x07\u03D0\x02\x02\u0BD5\u0BD6" +
		"\x05\u022E\u0118\x02\u0BD6\u0BDE\x07\u03D1\x02\x02\u0BD7\u0BD8\x07\u03D2" +
		"\x02\x02\u0BD8\u0BD9\x07\u03D0\x02\x02\u0BD9\u0BDA\x05\u022E\u0118\x02" +
		"\u0BDA\u0BDB\x07\u03D1\x02\x02\u0BDB\u0BDD\x03\x02\x02\x02\u0BDC\u0BD7" +
		"\x03\x02\x02\x02\u0BDD\u0BE0\x03\x02\x02\x02\u0BDE\u0BDC\x03\x02\x02\x02" +
		"\u0BDE\u0BDF\x03\x02\x02\x02\u0BDF\u0BE2\x03\x02\x02\x02\u0BE0\u0BDE\x03" +
		"\x02\x02\x02\u0BE1\u0BD2\x03\x02\x02\x02\u0BE1\u0BD3\x03\x02\x02\x02\u0BE2" +
		"\xB9\x03\x02\x02\x02\u0BE3\u0BE4\x05\u01F0\xF9\x02\u0BE4\u0BE7\x07\u03C7" +
		"\x02\x02\u0BE5\u0BE8\x05\u0254\u012B\x02\u0BE6\u0BE8\x07\'\x02\x02\u0BE7" +
		"\u0BE5\x03\x02\x02\x02\u0BE7\u0BE6\x03\x02\x02\x02\u0BE8\xBB\x03\x02\x02" +
		"\x02\u0BE9\u0BEC\x05\u0206\u0104\x02\u0BEA\u0BEC\x07\u03EA\x02\x02\u0BEB" +
		"\u0BE9\x03\x02\x02\x02\u0BEB\u0BEA\x03\x02\x02\x02\u0BEC\xBD\x03\x02\x02" +
		"\x02\u0BED\u0BEE\x07:\x02\x02\u0BEE\u0BF4\x07\xA2\x02\x02\u0BEF\u0BF0" +
		"\x07\\\x02\x02\u0BF0\u0BF1\x07F\x02\x02\u0BF1\u0BF2\x07\u01F5\x02\x02" +
		"\u0BF2\u0BF4\x07\u01A6\x02\x02\u0BF3\u0BED\x03\x02\x02\x02\u0BF3\u0BEF" +
		"\x03\x02\x02\x02\u0BF4\xBF\x03\x02\x02\x02\u0BF5\u0BF7\x07)\x02\x02\u0BF6" +
		"\u0BF8\x07^\x02\x02\u0BF7\u0BF6\x03\x02\x02\x02\u0BF7\u0BF8\x03\x02\x02" +
		"\x02\u0BF8\u0BFA\x03\x02\x02\x02\u0BF9\u0BFB\x07\u01D3\x02\x02\u0BFA\u0BF9" +
		"\x03\x02\x02\x02\u0BFA\u0BFB\x03\x02\x02\x02\u0BFB\u0BFD\x03\x02\x02\x02" +
		"\u0BFC\u0BFE\x07E\x02\x02\u0BFD\u0BFC\x03\x02\x02\x02\u0BFD\u0BFE\x03" +
		"\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF\u0C00\x07=\x02\x02\u0C00" +
		"\u0C06\x05\u01EE\xF8\x02\u0C01\u0C02\x07q\x02\x02\u0C02\u0C03\x07\u03D0" +
		"\x02\x02\u0C03\u0C04\x05\u0226\u0114\x02\u0C04\u0C05\x07\u03D1\x02\x02" +
		"\u0C05\u0C07\x03\x02\x02\x02\u0C06\u0C01\x03\x02\x02\x02\u0C06\u0C07\x03" +
		"\x02\x02\x02\u0C07\u0C0A\x03\x02\x02\x02\u0C08\u0C09\x07\xA8\x02\x02\u0C09" +
		"\u0C0B\x05\u0254\u012B\x02\u0C0A\u0C08\x03\x02\x02\x02\u0C0A\u0C0B\x03" +
		"\x02\x02\x02\u0C0B\u0C0D\x03\x02\x02\x02\u0C0C\u0C0E\x05\xD0i\x02\u0C0D" +
		"\u0C0C\x03\x02\x02\x02\u0C0D\u0C0E\x03\x02\x02\x02\u0C0E\u0C11\x03\x02" +
		"\x02\x02\u0C0F\u0C10\x07X\x02\x02\u0C10\u0C12\x05\u020C\u0107\x02\u0C11" +
		"\u0C0F\x03\x02\x02\x02\u0C11\u0C12\x03\x02\x02\x02\u0C12\xC1\x03\x02\x02" +
		"\x02\u0C13\u0C15\x07)\x02\x02\u0C14\u0C16\x07^\x02\x02\u0C15\u0C14\x03" +
		"\x02\x02\x02\u0C15\u0C16\x03\x02\x02\x02\u0C16\u0C18\x03\x02\x02\x02\u0C17" +
		"\u0C19\x07\u01D3\x02\x02\u0C18\u0C17\x03\x02\x02\x02\u0C18\u0C19\x03\x02" +
		"\x02\x02\u0C19\u0C1B\x03\x02\x02\x02\u0C1A\u0C1C\x07E\x02\x02\u0C1B\u0C1A" +
		"\x03\x02\x02\x02\u0C1B\u0C1C\x03\x02\x02\x02\u0C1C\u0C44\x03\x02\x02\x02" +
		"\u0C1D\u0C20\x05\u01EE\xF8\x02\u0C1E\u0C1F\x07\u03CF\x02\x02\u0C1F\u0C21" +
		"\x07\u03BF\x02\x02\u0C20\u0C1E\x03\x02\x02\x02\u0C20\u0C21\x03\x02\x02" +
		"\x02\u0C21\u0C2A\x03\x02\x02\x02\u0C22\u0C23\x07\u03D2\x02\x02\u0C23\u0C26" +
		"\x05\u01EE\xF8\x02\u0C24\u0C25\x07\u03CF\x02\x02\u0C25\u0C27\x07\u03BF" +
		"\x02\x02\u0C26\u0C24\x03\x02\x02\x02\u0C26\u0C27\x03\x02\x02\x02\u0C27" +
		"\u0C29\x03\x02\x02\x02\u0C28\u0C22\x03\x02\x02\x02\u0C29\u0C2C\x03\x02" +
		"\x02\x02\u0C2A\u0C28\x03\x02\x02\x02\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B" +
		"\u0C2D\x03\x02\x02\x02\u0C2C\u0C2A\x03\x02\x02\x02\u0C2D\u0C2E\x07=\x02" +
		"\x02\u0C2E\u0C2F\x05\xD4k\x02\u0C2F\u0C45\x03\x02\x02\x02\u0C30\u0C31" +
		"\x07=\x02\x02\u0C31\u0C34\x05\u01EE\xF8\x02\u0C32\u0C33\x07\u03CF\x02" +
		"\x02\u0C33\u0C35\x07\u03BF\x02\x02\u0C34\u0C32\x03\x02\x02\x02\u0C34\u0C35" +
		"\x03\x02\x02\x02\u0C35\u0C3E\x03\x02\x02\x02\u0C36\u0C37\x07\u03D2\x02" +
		"\x02\u0C37\u0C3A\x05\u01EE\xF8\x02\u0C38\u0C39\x07\u03CF\x02\x02\u0C39" +
		"\u0C3B\x07\u03BF\x02\x02\u0C3A\u0C38\x03\x02\x02\x02\u0C3A\u0C3B\x03\x02" +
		"\x02\x02\u0C3B\u0C3D\x03\x02\x02\x02\u0C3C\u0C36\x03\x02\x02\x02\u0C3D" +
		"\u0C40\x03\x02\x02\x02\u0C3E\u0C3C\x03\x02\x02\x02\u0C3E\u0C3F\x03\x02" +
		"\x02\x02\u0C3F\u0C41\x03\x02\x02\x02\u0C40\u0C3E\x03\x02\x02\x02\u0C41" +
		"\u0C42\x07\xA5\x02\x02\u0C42\u0C43\x05\xD4k\x02\u0C43\u0C45\x03\x02\x02" +
		"\x02\u0C44\u0C1D\x03\x02\x02\x02\u0C44\u0C30\x03\x02\x02\x02\u0C45\u0C48" +
		"\x03\x02\x02\x02\u0C46\u0C47\x07\xA8\x02\x02\u0C47\u0C49\x05\u0254\u012B" +
		"\x02\u0C48\u0C46\x03\x02\x02\x02\u0C48\u0C49\x03\x02\x02\x02\u0C49\xC3" +
		"\x03\x02\x02\x02\u0C4A\u0C4B\x07\u0165\x02\x02\u0C4B\u0C4C\x05\u01EE\xF8" +
		"\x02\u0C4C\u0C51\x07\u01BA\x02\x02\u0C4D\u0C4F\x07\r\x02\x02\u0C4E\u0C4D" +
		"\x03\x02\x02\x02\u0C4E\u0C4F\x03\x02\x02\x02\u0C4F\u0C50\x03\x02\x02\x02" +
		"\u0C50\u0C52\x05\u0206\u0104\x02\u0C51\u0C4E\x03\x02\x02\x02\u0C51\u0C52" +
		"\x03\x02\x02\x02\u0C52\xC5\x03\x02\x02\x02\u0C53\u0C54\x07\u0165\x02\x02" +
		"\u0C54\u0C55\x05\u01EE\xF8\x02\u0C55\u0C56\x07v\x02\x02\u0C56\u0C5D\x05" +
		"\u0206\u0104\x02\u0C57\u0C58\x05\u025C\u012F\x02\u0C58\u0C59\x07\u03D0" +
		"\x02\x02\u0C59\u0C5A\x05\u0230\u0119\x02\u0C5A\u0C5B\x07\u03D1\x02\x02" +
		"\u0C5B\u0C5E\x03\x02\x02\x02\u0C5C\u0C5E\t)\x02\x02\u0C5D\u0C57\x03\x02" +
		"\x02\x02\u0C5D\u0C5C\x03\x02\x02\x02\u0C5E\u0C61\x03\x02\x02\x02\u0C5F" +
		"\u0C60\x07\xA8\x02\x02\u0C60\u0C62\x05\u0254\u012B\x02\u0C61\u0C5F\x03" +
		"\x02\x02\x02\u0C61\u0C62\x03\x02\x02\x02\u0C62\u0C65\x03\x02\x02\x02\u0C63" +
		"\u0C64\x07X\x02\x02\u0C64\u0C66\x05\u020C\u0107\x02\u0C65\u0C63\x03\x02" +
		"\x02\x02\u0C65\u0C66\x03\x02\x02\x02\u0C66\xC7\x03\x02\x02\x02\u0C67\u0C68" +
		"\x07\u0165\x02\x02\u0C68\u0C69\x05\u01EE\xF8\x02\u0C69\u0C6A\x07v\x02" +
		"\x02\u0C6A\u0C6D\t*\x02\x02\u0C6B\u0C6C\x07\xA8\x02\x02\u0C6C\u0C6E\x05" +
		"\u0254\u012B\x02\u0C6D\u0C6B\x03\x02\x02\x02\u0C6D\u0C6E\x03\x02\x02\x02" +
		"\u0C6E\u0C71\x03\x02\x02\x02\u0C6F\u0C70\x07X\x02\x02\u0C70\u0C72\x05" +
		"\u020C\u0107\x02\u0C71\u0C6F\x03\x02\x02\x02\u0C71\u0C72\x03\x02\x02\x02" +
		"\u0C72\xC9\x03\x02\x02\x02\u0C73\u0C74\x07\u0165\x02\x02\u0C74\u0C75\x05" +
		"\u01EE\xF8\x02\u0C75\u0C76\x07\u011C\x02\x02\u0C76\xCB\x03\x02\x02\x02" +
		"\u0C77\u0C79\x07\xA2\x02\x02\u0C78\u0C7A\x07^\x02\x02\u0C79\u0C78\x03" +
		"\x02\x02\x02\u0C79\u0C7A\x03\x02\x02\x02\u0C7A\u0C7C\x03\x02\x02\x02\u0C7B" +
		"\u0C7D\x07E\x02\x02\u0C7C\u0C7B\x03\x02\x02\x02\u0C7C\u0C7D\x03\x02\x02" +
		"\x02\u0C7D\u0C7E\x03\x02\x02\x02\u0C7E\u0C83\x05\u01EE\xF8\x02\u0C7F\u0C81" +
		"\x07\r\x02\x02\u0C80\u0C7F\x03\x02\x02\x02\u0C80\u0C81\x03\x02\x02\x02" +
		"\u0C81\u0C82\x03\x02\x02\x02\u0C82\u0C84\x05\u0206\u0104\x02\u0C83\u0C80" +
		"\x03\x02\x02\x02\u0C83\u0C84\x03\x02\x02\x02\u0C84\u0C85\x03\x02\x02\x02" +
		"\u0C85\u0C86\x07\x87\x02\x02\u0C86\u0C8B\x05\xBA^\x02\u0C87\u0C88\x07" +
		"\u03D2\x02\x02\u0C88\u0C8A\x05\xBA^\x02\u0C89\u0C87\x03\x02\x02\x02\u0C8A" +
		"\u0C8D\x03\x02\x02\x02\u0C8B\u0C89\x03\x02\x02\x02\u0C8B\u0C8C\x03\x02" +
		"\x02\x02\u0C8C\u0C90\x03\x02\x02\x02\u0C8D\u0C8B\x03\x02\x02\x02\u0C8E" +
		"\u0C8F\x07\xA8\x02\x02\u0C8F\u0C91\x05\u0254\u012B\x02\u0C90\u0C8E\x03" +
		"\x02\x02\x02\u0C90\u0C91\x03\x02\x02\x02\u0C91\u0C93\x03\x02\x02\x02\u0C92" +
		"\u0C94\x05\xD0i\x02\u0C93\u0C92\x03\x02\x02\x02\u0C93\u0C94\x03\x02\x02" +
		"\x02\u0C94\u0C96\x03\x02\x02\x02\u0C95\u0C97\x05\xFC\x7F\x02\u0C96\u0C95" +
		"\x03\x02\x02\x02\u0C96\u0C97\x03\x02\x02\x02\u0C97\xCD\x03\x02\x02\x02" +
		"\u0C98\u0C9A\x07\xA2\x02\x02\u0C99\u0C9B\x07^\x02\x02\u0C9A\u0C99\x03" +
		"\x02\x02\x02\u0C9A\u0C9B\x03\x02\x02\x02\u0C9B\u0C9D\x03\x02\x02\x02\u0C9C" +
		"\u0C9E\x07E\x02\x02\u0C9D\u0C9C\x03\x02\x02\x02\u0C9D\u0C9E\x03\x02\x02" +
		"\x02\u0C9E\u0C9F\x03\x02\x02\x02\u0C9F\u0CA0\x05\xD4k\x02\u0CA0\u0CA1" +
		"\x07\x87\x02\x02\u0CA1\u0CA6\x05\xBA^\x02\u0CA2\u0CA3\x07\u03D2\x02\x02" +
		"\u0CA3\u0CA5\x05\xBA^\x02\u0CA4\u0CA2\x03\x02\x02\x02\u0CA5\u0CA8\x03" +
		"\x02\x02\x02\u0CA6\u0CA4\x03\x02\x02\x02\u0CA6\u0CA7\x03\x02\x02\x02\u0CA7" +
		"\u0CAB\x03\x02\x02\x02\u0CA8\u0CA6\x03\x02\x02\x02\u0CA9\u0CAA\x07\xA8" +
		"\x02\x02\u0CAA\u0CAC\x05\u0254\u012B\x02\u0CAB\u0CA9\x03\x02\x02\x02\u0CAB" +
		"\u0CAC\x03\x02\x02\x02\u0CAC\xCF\x03\x02\x02\x02\u0CAD\u0CAE\x07m\x02" +
		"\x02\u0CAE\u0CAF\x07\x12\x02\x02\u0CAF\u0CB4\x05\xD2j\x02\u0CB0\u0CB1" +
		"\x07\u03D2\x02\x02\u0CB1\u0CB3\x05\xD2j\x02\u0CB2\u0CB0\x03\x02\x02\x02" +
		"\u0CB3\u0CB6\x03\x02\x02\x02\u0CB4\u0CB2\x03\x02\x02\x02\u0CB4\u0CB5\x03" +
		"\x02\x02\x02\u0CB5\xD1\x03\x02\x02\x02\u0CB6\u0CB4\x03\x02\x02\x02\u0CB7" +
		"\u0CB9\x05\u0254\u012B\x02\u0CB8\u0CBA\t+\x02\x02\u0CB9\u0CB8\x03\x02" +
		"\x02\x02\u0CB9\u0CBA\x03\x02\x02\x02\u0CBA\xD3\x03\x02\x02\x02\u0CBB\u0CC0" +
		"\x05\xD6l\x02\u0CBC\u0CBD\x07\u03D2\x02\x02\u0CBD\u0CBF\x05\xD6l\x02\u0CBE" +
		"\u0CBC\x03\x02\x02\x02\u0CBF\u0CC2\x03\x02\x02\x02\u0CC0\u0CBE\x03\x02" +
		"\x02\x02\u0CC0\u0CC1\x03\x02\x02\x02\u0CC1\xD5\x03\x02\x02\x02\u0CC2\u0CC0" +
		"\x03\x02\x02\x02\u0CC3\u0CC7\x05\xD8m\x02\u0CC4\u0CC6\x05\xDEp\x02\u0CC5" +
		"\u0CC4\x03\x02\x02\x02\u0CC6\u0CC9\x03\x02\x02\x02\u0CC7\u0CC5\x03\x02" +
		"\x02\x02\u0CC7\u0CC8\x03\x02\x02\x02\u0CC8\u0CD5\x03\x02\x02\x02\u0CC9" +
		"\u0CC7\x03\x02\x02\x02\u0CCA\u0CCB\x07\u03D0\x02\x02\u0CCB\u0CCF\x05\xD8" +
		"m\x02\u0CCC\u0CCE\x05\xDEp\x02\u0CCD\u0CCC\x03\x02\x02\x02\u0CCE\u0CD1" +
		"\x03\x02\x02\x02\u0CCF\u0CCD\x03\x02\x02\x02\u0CCF\u0CD0\x03\x02\x02\x02" +
		"\u0CD0\u0CD2\x03\x02\x02\x02\u0CD1\u0CCF\x03\x02\x02\x02\u0CD2\u0CD3\x07" +
		"\u03D1\x02\x02\u0CD3\u0CD5\x03\x02\x02\x02\u0CD4\u0CC3\x03\x02\x02\x02" +
		"\u0CD4\u0CCA\x03\x02\x02\x02\u0CD5\xD7\x03\x02\x02\x02\u0CD6\u0CDC\x05" +
		"\u01EE\xF8\x02\u0CD7\u0CD8\x07q\x02\x02\u0CD8\u0CD9\x07\u03D0\x02\x02" +
		"\u0CD9\u0CDA\x05\u0226\u0114\x02\u0CDA\u0CDB\x07\u03D1\x02\x02\u0CDB\u0CDD" +
		"\x03\x02\x02\x02\u0CDC\u0CD7\x03\x02\x02\x02\u0CDC\u0CDD\x03\x02\x02\x02" +
		"\u0CDD\u0CE2\x03\x02\x02\x02\u0CDE\u0CE0\x07\r\x02\x02\u0CDF\u0CDE\x03" +
		"\x02\x02\x02\u0CDF\u0CE0\x03\x02\x02\x02\u0CE0\u0CE1\x03\x02\x02\x02\u0CE1" +
		"\u0CE3\x05\u0206\u0104\x02\u0CE2\u0CDF\x03\x02\x02\x02\u0CE2\u0CE3\x03" +
		"\x02\x02\x02\u0CE3\u0CEC\x03\x02\x02\x02\u0CE4\u0CE9\x05\xDAn\x02\u0CE5" +
		"\u0CE6\x07\u03D2\x02\x02\u0CE6\u0CE8\x05\xDAn\x02\u0CE7\u0CE5\x03\x02" +
		"\x02\x02\u0CE8\u0CEB\x03\x02\x02\x02\u0CE9\u0CE7\x03\x02\x02\x02\u0CE9" +
		"\u0CEA\x03\x02\x02\x02\u0CEA\u0CED\x03\x02\x02\x02\u0CEB\u0CE9\x03\x02" +
		"\x02\x02\u0CEC\u0CE4\x03\x02\x02\x02\u0CEC\u0CED\x03\x02\x02\x02\u0CED" +
		"\u0CFF\x03\x02\x02\x02\u0CEE\u0CF4\x05\xB4[\x02\u0CEF\u0CF0\x07\u03D0" +
		"\x02\x02\u0CF0\u0CF1\x05\xB4[\x02\u0CF1\u0CF2\x07\u03D1\x02\x02\u0CF2" +
		"\u0CF4\x03\x02\x02\x02\u0CF3\u0CEE\x03\x02\x02\x02\u0CF3\u0CEF\x03\x02" +
		"\x02\x02\u0CF4\u0CF6\x03\x02\x02\x02\u0CF5\u0CF7\x07\r\x02\x02\u0CF6\u0CF5" +
		"\x03\x02\x02\x02\u0CF6\u0CF7\x03\x02\x02\x02\u0CF7\u0CF8\x03\x02\x02\x02" +
		"\u0CF8\u0CF9\x05\u0206\u0104\x02\u0CF9\u0CFF\x03\x02\x02\x02\u0CFA\u0CFB" +
		"\x07\u03D0\x02\x02\u0CFB\u0CFC\x05\xD4k\x02\u0CFC\u0CFD\x07\u03D1\x02" +
		"\x02\u0CFD\u0CFF\x03\x02\x02\x02\u0CFE\u0CD6\x03\x02\x02\x02\u0CFE\u0CF3" +
		"\x03\x02\x02\x02\u0CFE\u0CFA\x03\x02\x02\x02\u0CFF\xD9\x03\x02\x02\x02" +
		"\u0D00\u0D01\t,\x02\x02\u0D01\u0D04\t\x14\x02\x02\u0D02\u0D03\x07:\x02" +
		"\x02\u0D03\u0D05\x05\xDCo\x02\u0D04\u0D02\x03\x02\x02\x02\u0D04\u0D05" +
		"\x03\x02\x02\x02\u0D05\u0D06\x03\x02\x02\x02\u0D06\u0D07\x07\u03D0\x02" +
		"\x02\u0D07\u0D08\x05\u0226\u0114\x02\u0D08\u0D09\x07\u03D1\x02\x02\u0D09" +
		"\xDB\x03\x02\x02\x02\u0D0A\u0D10\x07P\x02\x02\u0D0B\u0D0C\x07m\x02\x02" +
		"\u0D0C\u0D10\x07\x12\x02\x02\u0D0D\u0D0E\x07A\x02\x02\u0D0E\u0D10\x07" +
		"\x12\x02\x02\u0D0F\u0D0A\x03\x02\x02\x02\u0D0F\u0D0B\x03\x02\x02\x02\u0D0F" +
		"\u0D0D\x03\x02\x02\x02\u0D10\xDD\x03\x02\x02\x02\u0D11\u0D13\t-\x02\x02" +
		"\u0D12\u0D11\x03\x02\x02\x02\u0D12\u0D13\x03\x02\x02\x02\u0D13\u0D14\x03" +
		"\x02\x02\x02\u0D14\u0D15\x07P\x02\x02\u0D15\u0D1D\x05\xD8m\x02\u0D16\u0D17" +
		"\x07h\x02\x02\u0D17\u0D1E\x05\u0254\u012B\x02\u0D18\u0D19\x07\xA5\x02" +
		"\x02\u0D19\u0D1A\x07\u03D0\x02\x02\u0D1A\u0D1B\x05\u0226\u0114\x02\u0D1B" +
		"\u0D1C\x07\u03D1\x02\x02\u0D1C\u0D1E\x03\x02\x02\x02\u0D1D\u0D16\x03\x02" +
		"\x02\x02\u0D1D\u0D18\x03\x02\x02\x02\u0D1D\u0D1E\x03\x02\x02\x02\u0D1E" +
		"\u0D3E\x03\x02\x02\x02\u0D1F\u0D20\x07\x95\x02\x02\u0D20\u0D23\x05\xD8" +
		"m\x02\u0D21\u0D22\x07h\x02\x02\u0D22\u0D24\x05\u0254\u012B\x02\u0D23\u0D21" +
		"\x03\x02\x02\x02\u0D23\u0D24\x03\x02\x02\x02\u0D24\u0D3E\x03\x02\x02\x02" +
		"\u0D25\u0D27\t.\x02\x02\u0D26\u0D28\x07o\x02\x02\u0D27\u0D26\x03\x02\x02" +
		"\x02\u0D27\u0D28\x03\x02\x02\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29\u0D2A" +
		"\x07P\x02\x02\u0D2A\u0D32\x05\xD8m\x02\u0D2B\u0D2C\x07h\x02\x02\u0D2C" +
		"\u0D33\x05\u0254\u012B\x02\u0D2D\u0D2E\x07\xA5\x02\x02\u0D2E\u0D2F\x07" +
		"\u03D0\x02\x02\u0D2F\u0D30\x05\u0226\u0114\x02\u0D30\u0D31\x07\u03D1\x02" +
		"\x02\u0D31\u0D33\x03\x02\x02\x02\u0D32\u0D2B\x03\x02\x02\x02\u0D32\u0D2D" +
		"\x03\x02\x02\x02\u0D33\u0D3E\x03\x02\x02\x02\u0D34\u0D39\x07d\x02\x02" +
		"\u0D35\u0D37\t.\x02\x02\u0D36\u0D38\x07o\x02\x02\u0D37\u0D36\x03\x02\x02" +
		"\x02\u0D37\u0D38\x03\x02\x02\x02\u0D38\u0D3A\x03\x02\x02\x02\u0D39\u0D35" +
		"\x03\x02\x02\x02\u0D39\u0D3A\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02\x02\x02" +
		"\u0D3B\u0D3C\x07P\x02\x02\u0D3C\u0D3E\x05\xD8m\x02\u0D3D\u0D12\x03\x02" +
		"\x02\x02\u0D3D\u0D1F\x03\x02\x02\x02\u0D3D\u0D25\x03\x02\x02\x02\u0D3D" +
		"\u0D34\x03\x02\x02\x02\u0D3E\xDF\x03\x02\x02\x02\u0D3F\u0D40\x07\u03D0" +
		"\x02\x02\u0D40\u0D41\x05\xE4s\x02\u0D41\u0D42\x07\u03D1\x02\x02\u0D42" +
		"\u0D48\x03\x02\x02\x02\u0D43\u0D44\x07\u03D0\x02\x02\u0D44\u0D45\x05\xE0" +
		"q\x02\u0D45\u0D46\x07\u03D1\x02\x02\u0D46\u0D48\x03\x02\x02\x02\u0D47" +
		"\u0D3F\x03\x02\x02\x02\u0D47\u0D43\x03\x02\x02\x02\u0D48\xE1\x03\x02\x02" +
		"\x02\u0D49\u0D4A\x07\u03D0\x02\x02\u0D4A\u0D4B\x05\xE6t\x02\u0D4B\u0D4C" +
		"\x07\u03D1\x02\x02\u0D4C\u0D52\x03\x02\x02\x02\u0D4D\u0D4E\x07\u03D0\x02" +
		"\x02\u0D4E\u0D4F\x05\xE2r\x02\u0D4F\u0D50\x07\u03D1\x02\x02\u0D50\u0D52" +
		"\x03\x02\x02\x02\u0D51\u0D49\x03\x02\x02\x02\u0D51\u0D4D\x03\x02\x02\x02" +
		"\u0D52\xE3\x03\x02\x02\x02\u0D53\u0D57\x07\x86\x02\x02\u0D54\u0D56\x05" +
		"\xECw\x02\u0D55\u0D54\x03\x02\x02\x02\u0D56\u0D59\x03\x02\x02\x02\u0D57" +
		"\u0D55\x03\x02\x02\x02\u0D57\u0D58\x03\x02\x02\x02\u0D58\u0D5A\x03\x02" +
		"\x02\x02\u0D59\u0D57\x03\x02\x02\x02\u0D5A\u0D5C\x05\xEEx\x02\u0D5B\u0D5D" +
		"\x05\xF2z\x02\u0D5C\u0D5B\x03\x02\x02\x02\u0D5C\u0D5D\x03\x02\x02\x02" +
		"\u0D5D\u0D5F\x03\x02\x02\x02\u0D5E\u0D60\x05\xF8}\x02\u0D5F\u0D5E\x03" +
		"\x02\x02\x02\u0D5F\u0D60\x03\x02\x02\x02\u0D60\u0D62\x03\x02\x02\x02\u0D61" +
		"\u0D63\x05\xD0i\x02\u0D62\u0D61\x03\x02\x02\x02\u0D62\u0D63\x03\x02\x02" +
		"\x02\u0D63\u0D65\x03\x02\x02\x02\u0D64\u0D66\x05\xFC\x7F\x02\u0D65\u0D64" +
		"\x03\x02\x02\x02\u0D65\u0D66\x03\x02\x02\x02\u0D66\u0D7C\x03\x02\x02\x02" +
		"\u0D67\u0D6B\x07\x86\x02\x02\u0D68\u0D6A\x05\xECw\x02\u0D69\u0D68\x03" +
		"\x02\x02\x02\u0D6A\u0D6D\x03\x02\x02\x02\u0D6B\u0D69\x03\x02\x02\x02\u0D6B" +
		"\u0D6C\x03\x02\x02\x02\u0D6C\u0D6E\x03\x02\x02\x02\u0D6D\u0D6B\x03\x02" +
		"\x02\x02\u0D6E\u0D70\x05\xEEx\x02\u0D6F\u0D71\x05\xF8}\x02\u0D70\u0D6F" +
		"\x03\x02\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D73\x03\x02\x02\x02" +
		"\u0D72\u0D74\x05\xD0i\x02\u0D73\u0D72\x03\x02\x02\x02\u0D73\u0D74\x03" +
		"\x02\x02\x02\u0D74\u0D76\x03\x02\x02\x02\u0D75\u0D77\x05\xFC\x7F\x02\u0D76" +
		"\u0D75\x03\x02\x02\x02\u0D76\u0D77\x03\x02\x02\x02\u0D77\u0D79\x03\x02" +
		"\x02\x02\u0D78\u0D7A\x05\xF2z\x02\u0D79\u0D78\x03\x02\x02\x02\u0D79\u0D7A" +
		"\x03\x02\x02\x02\u0D7A\u0D7C\x03\x02\x02\x02\u0D7B\u0D53\x03\x02\x02\x02" +
		"\u0D7B\u0D67\x03\x02\x02\x02\u0D7C\xE5\x03\x02\x02\x02\u0D7D\u0D81\x07" +
		"\x86\x02\x02\u0D7E\u0D80\x05\xECw\x02\u0D7F\u0D7E\x03\x02\x02\x02\u0D80" +
		"\u0D83\x03\x02\x02\x02\u0D81\u0D7F\x03\x02\x02\x02\u0D81\u0D82\x03\x02" +
		"\x02\x02\u0D82\u0D84\x03\x02\x02\x02\u0D83\u0D81\x03\x02\x02\x02\u0D84" +
		"\u0D86\x05\xEEx\x02\u0D85\u0D87\x05\xF8}\x02\u0D86\u0D85\x03\x02\x02\x02" +
		"\u0D86\u0D87\x03\x02\x02\x02\u0D87\u0D89\x03\x02\x02\x02\u0D88\u0D8A\x05" +
		"\xD0i\x02\u0D89\u0D88\x03\x02\x02\x02\u0D89\u0D8A\x03\x02\x02\x02\u0D8A" +
		"\u0D8C\x03\x02\x02\x02\u0D8B\u0D8D\x05\xFC\x7F\x02\u0D8C\u0D8B\x03\x02" +
		"\x02\x02\u0D8C\u0D8D\x03\x02\x02\x02\u0D8D\xE7\x03\x02\x02\x02\u0D8E\u0D90" +
		"\x07\x9E\x02\x02\u0D8F\u0D91\t\'\x02\x02\u0D90\u0D8F\x03\x02\x02\x02\u0D90" +
		"\u0D91\x03\x02\x02\x02\u0D91\u0D92\x03\x02\x02\x02\u0D92\u0D93\x05\xE2" +
		"r\x02\u0D93\xE9\x03\x02\x02\x02\u0D94\u0D96\x07\x9E\x02\x02\u0D95\u0D97" +
		"\t\'\x02\x02\u0D96\u0D95\x03\x02\x02\x02\u0D96\u0D97\x03\x02\x02\x02\u0D97" +
		"\u0D9A\x03\x02\x02\x02\u0D98\u0D9B\x05\xE6t\x02\u0D99\u0D9B\x05\xE2r\x02" +
		"\u0D9A\u0D98\x03\x02\x02\x02\u0D9A\u0D99\x03\x02\x02\x02\u0D9B\xEB\x03" +
		"\x02\x02\x02\u0D9C\u0DA5\t/\x02\x02\u0D9D\u0DA5\x07C\x02\x02\u0D9E\u0DA5" +
		"\x07\x95\x02\x02\u0D9F\u0DA5\x07\x92\x02\x02\u0DA0\u0DA5\x07\x90\x02\x02" +
		"\u0DA1\u0DA5\x07\u0204\x02\x02\u0DA2\u0DA5\t0\x02\x02\u0DA3\u0DA5\x07" +
		"\x91\x02\x02\u0DA4\u0D9C\x03\x02\x02\x02\u0DA4\u0D9D\x03\x02\x02\x02\u0DA4" +
		"\u0D9E\x03\x02\x02\x02\u0DA4\u0D9F\x03\x02\x02\x02\u0DA4\u0DA0\x03\x02" +
		"\x02\x02\u0DA4\u0DA1\x03\x02\x02\x02\u0DA4\u0DA2\x03\x02\x02\x02\u0DA4" +
		"\u0DA3\x03\x02\x02\x02\u0DA5\xED\x03\x02\x02\x02\u0DA6\u0DA9\x07\u03BF" +
		"\x02\x02\u0DA7\u0DA9\x05\xF0y\x02\u0DA8\u0DA6\x03\x02\x02\x02\u0DA8\u0DA7" +
		"\x03\x02\x02\x02\u0DA9\u0DAE\x03\x02\x02\x02\u0DAA\u0DAB\x07\u03D2\x02" +
		"\x02\u0DAB\u0DAD\x05\xF0y\x02\u0DAC\u0DAA\x03\x02\x02\x02\u0DAD\u0DB0" +
		"\x03\x02\x02\x02\u0DAE\u0DAC\x03\x02\x02\x02\u0DAE\u0DAF\x03\x02\x02\x02" +
		"\u0DAF\xEF\x03\x02\x02\x02\u0DB0\u0DAE\x03\x02\x02\x02\u0DB1\u0DB2\x05" +
		"\u01EC\xF7\x02\u0DB2\u0DB3\x07\u03CF\x02\x02\u0DB3\u0DB4\x07\u03BF\x02" +
		"\x02\u0DB4\u0DCF\x03\x02\x02\x02\u0DB5\u0DBA\x05\u01F0\xF9\x02\u0DB6\u0DB8" +
		"\x07\r\x02\x02\u0DB7\u0DB6\x03\x02\x02\x02\u0DB7\u0DB8\x03\x02\x02\x02" +
		"\u0DB8\u0DB9\x03\x02\x02\x02\u0DB9\u0DBB\x05\u0206\u0104\x02\u0DBA\u0DB7" +
		"\x03\x02\x02\x02\u0DBA\u0DBB\x03\x02\x02\x02\u0DBB\u0DCF\x03\x02\x02\x02" +
		"\u0DBC\u0DC1\x05\u0240\u0121\x02\u0DBD\u0DBF\x07\r\x02\x02\u0DBE\u0DBD" +
		"\x03\x02\x02\x02\u0DBE\u0DBF\x03\x02\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02" +
		"\u0DC0\u0DC2\x05\u0206\u0104\x02\u0DC1\u0DBE\x03\x02\x02\x02\u0DC1\u0DC2" +
		"\x03\x02\x02\x02\u0DC2\u0DCF\x03\x02\x02\x02\u0DC3\u0DC4\x07\u03EA\x02" +
		"\x02\u0DC4\u0DC6\x07\u03B6\x02\x02\u0DC5\u0DC3\x03\x02\x02\x02\u0DC5\u0DC6" +
		"\x03\x02\x02\x02\u0DC6\u0DC7\x03\x02\x02\x02\u0DC7\u0DCC\x05\u0254\u012B" +
		"\x02\u0DC8\u0DCA\x07\r\x02\x02\u0DC9\u0DC8\x03\x02\x02\x02\u0DC9\u0DCA" +
		"\x03\x02\x02\x02\u0DCA\u0DCB\x03\x02\x02\x02\u0DCB\u0DCD\x05\u0206\u0104" +
		"\x02\u0DCC\u0DC9\x03\x02\x02\x02\u0DCC\u0DCD\x03\x02\x02\x02\u0DCD\u0DCF" +
		"\x03\x02\x02\x02\u0DCE\u0DB1\x03\x02\x02\x02\u0DCE\u0DB5\x03\x02\x02\x02" +
		"\u0DCE\u0DBC\x03\x02\x02\x02\u0DCE\u0DC5\x03\x02\x02\x02\u0DCF\xF1\x03" +
		"\x02\x02\x02\u0DD0\u0DD1\x07M\x02\x02\u0DD1\u0DD6\x05\xBC_\x02\u0DD2\u0DD3" +
		"\x07\u03D2\x02\x02\u0DD3\u0DD5\x05\xBC_\x02\u0DD4\u0DD2\x03\x02\x02\x02" +
		"\u0DD5\u0DD8\x03\x02\x02\x02\u0DD6\u0DD4\x03\x02\x02\x02\u0DD6\u0DD7\x03" +
		"\x02\x02\x02\u0DD7\u0DF5\x03\x02\x02\x02\u0DD8\u0DD6\x03\x02\x02\x02\u0DD9" +
		"\u0DDA\x07M\x02\x02\u0DDA\u0DDB\x07\u013F\x02\x02\u0DDB\u0DF5\x07\u03DF" +
		"\x02\x02\u0DDC\u0DDD\x07M\x02\x02\u0DDD\u0DDE\x07p\x02\x02\u0DDE\u0DE2" +
		"\x07\u03DF\x02\x02\u0DDF\u0DE0\x07\x18\x02\x02\u0DE0\u0DE1\x07\x87\x02" +
		"\x02\u0DE1\u0DE3\x05\u01F8\xFD\x02\u0DE2\u0DDF\x03\x02\x02\x02\u0DE2\u0DE3" +
		"\x03\x02\x02\x02\u0DE3\u0DEA\x03\x02\x02\x02\u0DE4\u0DE6\t$\x02\x02\u0DE5" +
		"\u0DE7\x05\xF4{\x02\u0DE6\u0DE5\x03\x02\x02\x02\u0DE7\u0DE8\x03\x02\x02" +
		"\x02\u0DE8\u0DE6\x03\x02\x02\x02\u0DE8\u0DE9\x03\x02\x02\x02\u0DE9\u0DEB" +
		"\x03\x02\x02\x02\u0DEA\u0DE4\x03\x02\x02\x02\u0DEA\u0DEB\x03\x02\x02\x02" +
		"\u0DEB\u0DF2\x03\x02\x02\x02\u0DEC\u0DEE\x07Z\x02\x02\u0DED\u0DEF\x05" +
		"\xF6|\x02\u0DEE\u0DED\x03\x02\x02\x02\u0DEF\u0DF0\x03\x02\x02\x02\u0DF0" +
		"\u0DEE\x03\x02\x02\x02\u0DF0\u0DF1\x03\x02\x02\x02\u0DF1\u0DF3\x03\x02" +
		"\x02\x02\u0DF2\u0DEC\x03\x02\x02\x02\u0DF2\u0DF3\x03\x02\x02\x02\u0DF3" +
		"\u0DF5\x03\x02\x02\x02\u0DF4\u0DD0\x03\x02\x02\x02\u0DF4\u0DD9\x03\x02" +
		"\x02\x02\u0DF4\u0DDC\x03\x02\x02\x02\u0DF5\xF3\x03\x02\x02\x02\u0DF6\u0DF7" +
		"\x07\x97\x02\x02\u0DF7\u0DF8\x07\x12\x02\x02\u0DF8\u0E03\x07\u03DF\x02" +
		"\x02\u0DF9\u0DFB\x07k\x02\x02\u0DFA\u0DF9\x03\x02\x02\x02\u0DFA\u0DFB" +
		"\x03\x02\x02\x02\u0DFB\u0DFC\x03\x02\x02\x02\u0DFC\u0DFD\x073\x02\x02" +
		"\u0DFD\u0DFE\x07\x12\x02\x02\u0DFE\u0E03\x07\u03DF\x02\x02\u0DFF\u0E00" +
		"\x074\x02\x02\u0E00\u0E01\x07\x12\x02\x02\u0E01\u0E03\x07\u03DF\x02\x02" +
		"\u0E02\u0DF6\x03\x02\x02\x02\u0E02\u0DFA\x03\x02\x02\x02\u0E02\u0DFF\x03" +
		"\x02\x02\x02\u0E03\xF5\x03\x02\x02\x02\u0E04\u0E05\x07\x94\x02\x02\u0E05" +
		"\u0E06\x07\x12\x02\x02\u0E06\u0E0B\x07\u03DF\x02\x02\u0E07\u0E08\x07\x97" +
		"\x02\x02\u0E08\u0E09\x07\x12\x02\x02\u0E09\u0E0B\x07\u03DF\x02\x02\u0E0A" +
		"\u0E04\x03\x02\x02\x02\u0E0A\u0E07\x03\x02\x02\x02\u0E0B\xF7\x03\x02\x02" +
		"\x02\u0E0C\u0E0D\x07=\x02\x02\u0E0D\u0E10\x05\xD4k\x02\u0E0E\u0E0F\x07" +
		"\xA8\x02\x02\u0E0F\u0E11\x05\u0254\u012B\x02\u0E10\u0E0E\x03\x02\x02\x02" +
		"\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E20\x03\x02\x02\x02\u0E12\u0E13\x07" +
		"A\x02\x02\u0E13\u0E14\x07\x12\x02\x02\u0E14\u0E19\x05\xFA~\x02\u0E15\u0E16" +
		"\x07\u03D2\x02\x02\u0E16\u0E18\x05\xFA~\x02\u0E17\u0E15\x03\x02\x02\x02" +
		"\u0E18\u0E1B\x03\x02\x02\x02\u0E19\u0E17\x03\x02\x02\x02\u0E19\u0E1A\x03" +
		"\x02\x02\x02\u0E1A\u0E1E\x03\x02\x02\x02\u0E1B\u0E19\x03\x02\x02\x02\u0E1C" +
		"\u0E1D\x07\xAA\x02\x02\u0E1D\u0E1F\x07\u01EB\x02\x02\u0E1E\u0E1C\x03\x02" +
		"\x02\x02\u0E1E\u0E1F\x03\x02\x02\x02\u0E1F\u0E21\x03\x02\x02\x02\u0E20" +
		"\u0E12\x03\x02\x02\x02\u0E20\u0E21\x03\x02\x02\x02\u0E21\u0E24\x03\x02" +
		"\x02\x02\u0E22\u0E23\x07B\x02\x02\u0E23\u0E25\x05\u0254\u012B\x02\u0E24" +
		"\u0E22\x03\x02\x02\x02\u0E24\u0E25\x03\x02\x02\x02\u0E25\xF9\x03\x02\x02" +
		"\x02\u0E26\u0E28\x05\u0254\u012B\x02\u0E27\u0E29\t+\x02\x02\u0E28\u0E27" +
		"\x03\x02\x02\x02\u0E28\u0E29\x03\x02\x02\x02\u0E29\xFB\x03\x02\x02\x02" +
		"\u0E2A\u0E35\x07X\x02\x02\u0E2B\u0E2C\x05\xFE\x80\x02\u0E2C\u0E2D\x07" +
		"\u03D2\x02\x02\u0E2D\u0E2F\x03\x02\x02\x02\u0E2E\u0E2B\x03\x02\x02\x02" +
		"\u0E2E\u0E2F\x03\x02\x02\x02\u0E2F\u0E30\x03\x02\x02\x02\u0E30\u0E36\x05" +
		"\xFE\x80\x02\u0E31\u0E32\x05\xFE\x80\x02\u0E32\u0E33\x07\u01B4\x02\x02" +
		"\u0E33\u0E34\x05\xFE\x80\x02\u0E34\u0E36\x03\x02\x02\x02\u0E35\u0E2E\x03" +
		"\x02\x02\x02\u0E35\u0E31\x03\x02\x02\x02\u0E36\xFD\x03\x02\x02\x02\u0E37" +
		"\u0E3A\x05\u020C\u0107\x02\u0E38\u0E3A\x05\u01F6\xFC\x02\u0E39\u0E37\x03" +
		"\x02\x02\x02\u0E39\u0E38\x03\x02\x02\x02\u0E3A\xFF\x03\x02\x02\x02\u0E3B" +
		"\u0E3C\x07\u0208\x02\x02\u0E3C\u0E45\x07\u021F\x02\x02\u0E3D\u0E42\x05" +
		"\u0116\x8C\x02\u0E3E\u0E3F\x07\u03D2\x02\x02\u0E3F\u0E41\x05\u0116\x8C" +
		"\x02\u0E40\u0E3E\x03\x02\x02\x02\u0E41\u0E44\x03\x02\x02\x02\u0E42\u0E40" +
		"\x03\x02\x02\x02\u0E42\u0E43\x03\x02\x02\x02\u0E43\u0E46\x03\x02\x02\x02" +
		"\u0E44\u0E42\x03\x02\x02\x02\u0E45\u0E3D\x03\x02\x02\x02\u0E45\u0E46\x03" +
		"\x02\x02\x02\u0E46\u0101\x03\x02\x02\x02\u0E47\u0E49\x07\u010B\x02\x02" +
		"\u0E48\u0E4A\x07\u0235\x02\x02\u0E49\u0E48\x03\x02\x02\x02\u0E49\u0E4A" +
		"\x03\x02\x02\x02\u0E4A\u0103\x03\x02\x02\x02\u0E4B\u0E4D\x07\u0123\x02" +
		"\x02\u0E4C\u0E4E\x07\u0235\x02\x02\u0E4D\u0E4C\x03\x02\x02\x02\u0E4D\u0E4E" +
		"\x03\x02\x02\x02\u0E4E\u0E54\x03\x02\x02\x02\u0E4F\u0E51\x07\f\x02\x02" +
		"\u0E50\u0E52\x07\u01B0\x02\x02\u0E51\u0E50\x03\x02\x02\x02\u0E51\u0E52" +
		"\x03\x02\x02\x02\u0E52\u0E53\x03\x02\x02\x02\u0E53\u0E55\x07\u0114\x02" +
		"\x02\u0E54\u0E4F\x03\x02\x02\x02\u0E54\u0E55\x03\x02\x02\x02\u0E55\u0E5A" +
		"\x03\x02\x02\x02\u0E56\u0E58\x07\u01B0\x02\x02\u0E57\u0E56\x03\x02\x02" +
		"\x02\u0E57\u0E58\x03\x02\x02\x02\u0E58\u0E59\x03\x02\x02\x02\u0E59\u0E5B" +
		"\x07z\x02\x02\u0E5A\u0E57\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02\x02\x02" +
		"\u0E5B\u0105\x03\x02\x02\x02\u0E5C\u0E5E\x07\u01EA\x02\x02\u0E5D\u0E5F" +
		"\x07\u0235\x02\x02\u0E5E\u0E5D\x03\x02\x02\x02\u0E5E\u0E5F\x03\x02\x02" +
		"\x02\u0E5F\u0E65\x03\x02\x02\x02\u0E60\u0E62\x07\f\x02\x02\u0E61\u0E63" +
		"\x07\u01B0\x02\x02\u0E62\u0E61\x03\x02\x02\x02\u0E62\u0E63\x03\x02\x02" +
		"\x02\u0E63\u0E64\x03\x02\x02\x02\u0E64\u0E66\x07\u0114\x02\x02\u0E65\u0E60" +
		"\x03\x02\x02\x02\u0E65\u0E66\x03\x02\x02\x02\u0E66\u0E6B\x03\x02\x02\x02" +
		"\u0E67\u0E69\x07\u01B0\x02\x02\u0E68\u0E67\x03\x02\x02\x02\u0E68\u0E69";
	private static readonly _serializedATNSegment8: string =
		"\x03\x02\x02\x02\u0E69\u0E6A\x03\x02\x02\x02\u0E6A\u0E6C\x07z\x02\x02" +
		"\u0E6B\u0E68\x03\x02\x02\x02\u0E6B\u0E6C\x03\x02\x02\x02\u0E6C\u0107\x03" +
		"\x02\x02\x02\u0E6D\u0E6E\x07\u01F0\x02\x02\u0E6E\u0E6F\x05\u0206\u0104" +
		"\x02\u0E6F\u0109\x03\x02\x02\x02\u0E70\u0E72\x07\u01EA\x02\x02\u0E71\u0E73" +
		"\x07\u0235\x02\x02\u0E72\u0E71\x03\x02\x02\x02\u0E72\u0E73\x03\x02\x02" +
		"\x02\u0E73\u0E74\x03\x02\x02\x02\u0E74\u0E76\x07\x99\x02\x02\u0E75\u0E77" +
		"\x07\u01F0\x02\x02\u0E76\u0E75\x03\x02\x02\x02\u0E76\u0E77\x03\x02\x02" +
		"\x02\u0E77\u0E78\x03\x02\x02\x02\u0E78\u0E79\x05\u0206\u0104\x02\u0E79" +
		"\u010B\x03\x02\x02\x02\u0E7A\u0E7B\x07z\x02\x02\u0E7B\u0E7C\x07\u01F0" +
		"\x02\x02\u0E7C\u0E7D\x05\u0206\u0104\x02\u0E7D\u010D\x03\x02\x02\x02\u0E7E" +
		"\u0E7F\x07\\\x02\x02\u0E7F\u0E80\x07\u0247\x02\x02\u0E80\u0E85\x05\u0118" +
		"\x8D\x02\u0E81\u0E82\x07\u03D2\x02\x02\u0E82\u0E84\x05\u0118\x8D\x02\u0E83" +
		"\u0E81\x03\x02\x02\x02\u0E84\u0E87\x03\x02\x02\x02\u0E85\u0E83\x03\x02" +
		"\x02\x02\u0E85\u0E86\x03\x02\x02\x02\u0E86\u010F\x03\x02\x02\x02\u0E87" +
		"\u0E85\x03\x02\x02\x02\u0E88\u0E89\x07\xA0\x02\x02\u0E89\u0E8A\x07\u0247" +
		"\x02\x02\u0E8A\u0111\x03\x02\x02\x02\u0E8B\u0E8C\x07\x87\x02\x02\u0E8C" +
		"\u0E8D\x07\u0107\x02\x02\u0E8D\u0E8E\x07\u03C7\x02\x02\u0E8E\u0E8F\t\x18" +
		"\x02\x02\u0E8F\u0113\x03\x02\x02\x02\u0E90\u0E92\x07\x87\x02\x02\u0E91" +
		"\u0E93\t1\x02\x02\u0E92\u0E91\x03\x02\x02\x02\u0E92\u0E93\x03\x02\x02" +
		"\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u0E95\x07\u021F\x02\x02\u0E95\u0E9A" +
		"\x05\u011C\x8F\x02\u0E96\u0E97\x07\u03D2\x02\x02\u0E97\u0E99\x05\u011C" +
		"\x8F\x02\u0E98\u0E96\x03\x02\x02\x02\u0E99\u0E9C\x03\x02\x02\x02\u0E9A" +
		"\u0E98\x03\x02\x02\x02\u0E9A\u0E9B\x03\x02\x02\x02\u0E9B\u0115\x03\x02" +
		"\x02\x02\u0E9C\u0E9A\x03\x02\x02\x02\u0E9D\u0E9E\x07\xAA\x02\x02\u0E9E" +
		"\u0E9F\x07\u012A\x02\x02\u0E9F\u0EA5\x07\u01FB\x02\x02\u0EA0\u0EA1\x07" +
		"v\x02\x02\u0EA1\u0EA5\x07\xAB\x02\x02\u0EA2\u0EA3\x07v\x02\x02\u0EA3\u0EA5" +
		"\x07\u01B9\x02\x02\u0EA4\u0E9D\x03\x02\x02\x02\u0EA4\u0EA0\x03\x02\x02" +
		"\x02\u0EA4\u0EA2\x03\x02\x02\x02\u0EA5\u0117\x03\x02\x02\x02\u0EA6\u0EAB" +
		"\x05\u01EE\xF8\x02\u0EA7\u0EA9\x07\r\x02\x02\u0EA8\u0EA7\x03\x02\x02\x02" +
		"\u0EA8\u0EA9\x03\x02\x02\x02\u0EA9\u0EAA\x03\x02\x02\x02\u0EAA\u0EAC\x05" +
		"\u0206\u0104\x02\u0EAB\u0EA8\x03\x02\x02\x02\u0EAB\u0EAC\x03\x02\x02\x02" +
		"\u0EAC\u0EAD\x03\x02\x02\x02\u0EAD\u0EAE\x05\u011A\x8E\x02\u0EAE\u0119" +
		"\x03\x02\x02\x02\u0EAF\u0EB1\x07v\x02\x02\u0EB0\u0EB2\x07\u0182\x02\x02" +
		"\u0EB1\u0EB0\x03\x02\x02\x02\u0EB1\u0EB2\x03\x02\x02\x02\u0EB2\u0EB8\x03" +
		"\x02\x02\x02\u0EB3\u0EB5\x07^\x02\x02\u0EB4\u0EB3\x03\x02\x02\x02\u0EB4" +
		"\u0EB5\x03\x02\x02\x02\u0EB5\u0EB6\x03\x02\x02\x02\u0EB6\u0EB8\x07\xAB" +
		"\x02\x02\u0EB7\u0EAF\x03\x02\x02\x02\u0EB7\u0EB4\x03\x02\x02\x02\u0EB8" +
		"\u011B\x03\x02\x02\x02\u0EB9\u0EBA\x07\u0178\x02\x02\u0EBA\u0EBB\x07\u0180" +
		"\x02\x02\u0EBB\u0EC1\x05\u011E\x90\x02\u0EBC\u0EBD\x07v\x02\x02\u0EBD" +
		"\u0EC1\x07\xAB\x02\x02\u0EBE\u0EBF\x07v\x02\x02\u0EBF\u0EC1\x07\u01B9" +
		"\x02\x02\u0EC0\u0EB9\x03\x02\x02\x02\u0EC0\u0EBC\x03\x02\x02\x02\u0EC0" +
		"\u0EBE\x03\x02\x02\x02\u0EC1\u011D\x03\x02\x02\x02\u0EC2\u0EC3\x07\u0285" +
		"\x02\x02\u0EC3\u0ECA\x07v\x02\x02\u0EC4\u0EC5\x07v\x02\x02\u0EC5\u0ECA" +
		"\x07\u0286\x02\x02\u0EC6\u0EC7\x07v\x02\x02\u0EC7\u0ECA\x07\u0287\x02" +
		"\x02\u0EC8\u0ECA\x07\u0288\x02\x02\u0EC9\u0EC2\x03\x02\x02\x02\u0EC9\u0EC4" +
		"\x03\x02\x02\x02\u0EC9\u0EC6\x03\x02\x02\x02\u0EC9\u0EC8\x03\x02\x02\x02" +
		"\u0ECA\u011F\x03\x02\x02\x02\u0ECB\u0ECC\x07\x17\x02\x02\u0ECC\u0ECD\x07" +
		"\u0185\x02\x02\u0ECD\u0ECE\x07\x99\x02\x02\u0ECE\u0ED3\x05\u0132\x9A\x02" +
		"\u0ECF\u0ED0\x07\u03D2\x02\x02\u0ED0\u0ED2\x05\u0132\x9A\x02\u0ED1\u0ECF" +
		"\x03\x02\x02\x02\u0ED2\u0ED5\x03\x02\x02\x02\u0ED3\u0ED1\x03\x02\x02\x02" +
		"\u0ED3\u0ED4\x03\x02\x02\x02\u0ED4\u0ED7\x03\x02\x02\x02\u0ED5\u0ED3\x03" +
		"\x02\x02\x02\u0ED6\u0ED8\x05\u013A\x9E\x02\u0ED7\u0ED6\x03\x02\x02\x02" +
		"\u0ED7\u0ED8\x03\x02\x02\x02\u0ED8\u0121\x03\x02\x02\x02\u0ED9\u0EDA\x07" +
		"\x17\x02\x02\u0EDA\u0EDB\x07\u01E6\x02\x02\u0EDB\u0EDC\x07\u0159\x02\x02" +
		"\u0EDC\u0EE1\x05\u013C\x9F\x02\u0EDD\u0EDE\x07\u03D2\x02\x02\u0EDE\u0EE0" +
		"\x05\u013C\x9F\x02\u0EDF\u0EDD\x03\x02\x02\x02\u0EE0\u0EE3\x03\x02\x02" +
		"\x02\u0EE1\u0EDF\x03\x02\x02\x02\u0EE1\u0EE2\x03\x02\x02\x02\u0EE2\u0123" +
		"\x03\x02\x02\x02\u0EE3\u0EE1\x03\x02\x02\x02\u0EE4\u0EE5\x07t\x02\x02" +
		"\u0EE5\u0EE6\t2\x02\x02\u0EE6\u0EEB\x07\u0184\x02\x02\u0EE7\u0EE8\x07" +
		"\x99\x02\x02\u0EE8\u0EEC\x07\u03DF\x02\x02\u0EE9\u0EEA\x07\x0F\x02\x02" +
		"\u0EEA\u0EEC\x07\u03DF\x02\x02\u0EEB\u0EE7\x03\x02\x02\x02\u0EEB\u0EE9" +
		"\x03\x02\x02\x02\u0EEC\u0125\x03\x02\x02\x02\u0EED\u0EEE\x07\u01E7\x02" +
		"\x02\u0EEE\u0EEF\x07\u0185\x02\x02\u0EEF\u0127\x03\x02\x02\x02\u0EF0\u0EF1" +
		"\x07\u01E7\x02\x02\u0EF1\u0EF3\x07\u01F9\x02\x02\u0EF2\u0EF4\x07\b\x02" +
		"\x02\u0EF3\u0EF2\x03\x02\x02\x02\u0EF3\u0EF4\x03\x02\x02\x02\u0EF4\u0EF6" +
		"\x03\x02\x02\x02\u0EF5\u0EF7\x05\u013A\x9E\x02\u0EF6\u0EF5\x03\x02\x02" +
		"\x02\u0EF6\u0EF7\x03\x02\x02\x02\u0EF7\u0129\x03\x02\x02\x02\u0EF8\u0EF9" +
		"\x07\u0208\x02\x02\u0EF9\u0F02\x07\u01F9\x02\x02\u0EFA\u0EFF\x05\u0140" +
		"\xA1\x02\u0EFB\u0EFC\x07\u03D2\x02\x02\u0EFC\u0EFE\x05\u0140\xA1\x02\u0EFD" +
		"\u0EFB\x03\x02\x02\x02\u0EFE\u0F01\x03\x02\x02\x02\u0EFF\u0EFD\x03\x02" +
		"\x02\x02\u0EFF\u0F00\x03\x02\x02\x02\u0F00\u0F03\x03\x02\x02\x02\u0F01" +
		"\u0EFF\x03\x02\x02\x02\u0F02\u0EFA\x03\x02\x02\x02\u0F02\u0F03\x03\x02" +
		"\x02\x02\u0F03\u0F06\x03\x02\x02\x02\u0F04\u0F05\x07\u0227\x02\x02\u0F05" +
		"\u0F07\x05\u0142\xA2\x02\u0F06\u0F04\x03\x02\x02\x02\u0F06\u0F07\x03\x02" +
		"\x02\x02\u0F07\u0F0B\x03\x02\x02\x02\u0F08\u0F0A\x05\u0144\xA3\x02\u0F09" +
		"\u0F08\x03\x02\x02\x02\u0F0A\u0F0D\x03\x02\x02\x02\u0F0B\u0F09\x03\x02" +
		"\x02\x02\u0F0B\u0F0C\x03\x02\x02\x02\u0F0C\u0F0F\x03\x02\x02\x02\u0F0D" +
		"\u0F0B\x03\x02\x02\x02\u0F0E\u0F10\x05\u013A\x9E\x02\u0F0F\u0F0E\x03\x02" +
		"\x02\x02\u0F0F\u0F10\x03\x02\x02\x02\u0F10\u012B\x03\x02\x02\x02\u0F11" +
		"\u0F12\x07\u020E\x02\x02\u0F12\u0F1B\x07\u01F9\x02\x02\u0F13\u0F18\x05" +
		"\u0140\xA1\x02\u0F14\u0F15\x07\u03D2\x02\x02\u0F15\u0F17\x05\u0140\xA1" +
		"\x02\u0F16\u0F14\x03\x02\x02\x02\u0F17\u0F1A\x03\x02\x02\x02\u0F18\u0F16" +
		"\x03\x02\x02\x02\u0F18\u0F19\x03\x02\x02\x02\u0F19\u0F1C\x03\x02\x02\x02" +
		"\u0F1A\u0F18\x03\x02\x02\x02\u0F1B\u0F13\x03\x02\x02\x02\u0F1B\u0F1C\x03" +
		"\x02\x02\x02\u0F1C\u012D\x03\x02\x02\x02\u0F1D\u0F1E\x07\u0208\x02\x02" +
		"\u0F1E\u0F1F\x07\u0164\x02\x02\u0F1F\u012F\x03\x02\x02\x02\u0F20\u0F21" +
		"\x07\u020E\x02\x02\u0F21\u0F22\x07\u0164\x02\x02\u0F22\u0131\x03\x02\x02" +
		"\x02\u0F23\u0F24\x05\u0134\x9B\x02\u0F24\u0F25\x07\u03C7\x02\x02\u0F25" +
		"\u0F26\x07\u03DF\x02\x02\u0F26\u0F41\x03\x02\x02\x02\u0F27\u0F28\x05\u0136" +
		"\x9C\x02\u0F28\u0F29\x07\u03C7\x02\x02\u0F29\u0F2A\x05\u020C\u0107\x02" +
		"\u0F2A\u0F41\x03\x02\x02\x02\u0F2B\u0F2C\x05\u0138\x9D\x02\u0F2C\u0F2D" +
		"\x07\u03C7\x02\x02\u0F2D\u0F2E\t\x18\x02\x02\u0F2E\u0F41\x03\x02\x02\x02" +
		"\u0F2F\u0F30\x07\u0189\x02\x02\u0F30\u0F31\x07\u03C7\x02\x02\u0F31\u0F41" +
		"\x07\u03E2\x02\x02\u0F32\u0F33\x07\u016B\x02\x02\u0F33\u0F34\x07\u03C7" +
		"\x02\x02\u0F34\u0F3D\x07\u03D0\x02\x02\u0F35\u0F3A\x05\u0206\u0104\x02" +
		"\u0F36\u0F37\x07\u03D2\x02\x02\u0F37\u0F39\x05\u0206\u0104\x02\u0F38\u0F36" +
		"\x03\x02\x02\x02\u0F39\u0F3C\x03\x02\x02\x02\u0F3A\u0F38\x03\x02\x02\x02" +
		"\u0F3A\u0F3B\x03\x02\x02\x02\u0F3B\u0F3E\x03\x02\x02\x02\u0F3C\u0F3A\x03" +
		"\x02\x02\x02\u0F3D\u0F35\x03\x02\x02\x02\u0F3D\u0F3E\x03\x02\x02\x02\u0F3E" +
		"\u0F3F\x03\x02\x02\x02\u0F3F\u0F41\x07\u03D1\x02\x02\u0F40\u0F23\x03\x02" +
		"\x02\x02\u0F40\u0F27\x03\x02\x02\x02\u0F40\u0F2B\x03\x02\x02\x02\u0F40" +
		"\u0F2F\x03\x02\x02\x02\u0F40\u0F32\x03\x02\x02\x02\u0F41\u0133\x03\x02" +
		"\x02\x02\u0F42\u0F43\t3\x02\x02\u0F43\u0135\x03\x02\x02\x02\u0F44\u0F45" +
		"\t4\x02\x02\u0F45\u0137\x03\x02\x02\x02\u0F46\u0F47\t5\x02\x02\u0F47\u0139" +
		"\x03\x02\x02\x02\u0F48\u0F49\x07:\x02\x02\u0F49\u0F4A\x07\u0116\x02\x02" +
		"\u0F4A\u0F4B\x07\u03DF\x02\x02\u0F4B\u013B\x03\x02\x02\x02\u0F4C\u0F4D" +
		"\x07\u01DF\x02\x02\u0F4D\u0F4E\x07\u03C7\x02\x02\u0F4E\u0F4F\x07\u03D0" +
		"\x02\x02\u0F4F\u0F50\x05\u0226\u0114\x02\u0F50\u0F51\x07\u03D1\x02\x02" +
		"\u0F51\u0F7E\x03\x02\x02\x02\u0F52\u0F53\x07\u01E1\x02\x02\u0F53\u0F54" +
		"\x07\u03C7\x02\x02\u0F54\u0F55\x07\u03D0\x02\x02\u0F55\u0F56\x05\u0226" +
		"\u0114\x02\u0F56\u0F57\x07\u03D1\x02\x02\u0F57\u0F7E\x03\x02\x02\x02\u0F58" +
		"\u0F59\x07\u01E0\x02\x02\u0F59\u0F5A\x07\u03C7\x02\x02\u0F5A\u0F5B\x07" +
		"\u03D0\x02\x02\u0F5B\u0F5C\x05\u0228\u0115\x02\u0F5C\u0F5D\x07\u03D1\x02" +
		"\x02\u0F5D\u0F7E\x03\x02\x02\x02\u0F5E\u0F5F\x07\u01E2\x02\x02\u0F5F\u0F60" +
		"\x07\u03C7\x02\x02\u0F60\u0F61\x07\u03D0\x02\x02\u0F61\u0F62\x05\u0228" +
		"\u0115\x02\u0F62\u0F63\x07\u03D1\x02\x02\u0F63\u0F7E\x03\x02\x02\x02\u0F64" +
		"\u0F65\x07\u01E4\x02\x02\u0F65\u0F66\x07\u03C7\x02\x02\u0F66\u0F67\x07" +
		"\u03D0\x02\x02\u0F67\u0F68\x05\u0232\u011A\x02\u0F68\u0F69\x07\u03D1\x02" +
		"\x02\u0F69\u0F7E\x03\x02\x02\x02\u0F6A\u0F6B\x07\u01E5\x02\x02\u0F6B\u0F6C" +
		"\x07\u03C7\x02\x02\u0F6C\u0F6D\x07\u03D0\x02\x02\u0F6D\u0F6E\x05\u0232" +
		"\u011A\x02\u0F6E\u0F6F\x07\u03D1\x02\x02\u0F6F\u0F7E\x03\x02\x02\x02\u0F70" +
		"\u0F71\x07\u01E3\x02\x02\u0F71\u0F72\x07\u03C7\x02\x02\u0F72\u0F73\x07" +
		"\u03D0\x02\x02\u0F73\u0F78\x05\u013E\xA0\x02\u0F74\u0F75\x07\u03D2\x02" +
		"\x02\u0F75\u0F77\x05\u013E\xA0\x02\u0F76\u0F74\x03\x02\x02\x02\u0F77\u0F7A" +
		"\x03\x02\x02\x02\u0F78\u0F76\x03\x02\x02\x02\u0F78\u0F79\x03\x02\x02\x02" +
		"\u0F79\u0F7B\x03\x02\x02\x02\u0F7A\u0F78\x03\x02\x02\x02\u0F7B\u0F7C\x07" +
		"\u03D1\x02\x02\u0F7C\u0F7E\x03\x02\x02\x02\u0F7D\u0F4C\x03\x02\x02\x02" +
		"\u0F7D\u0F52\x03\x02\x02\x02\u0F7D\u0F58\x03\x02\x02\x02\u0F7D\u0F5E\x03" +
		"\x02\x02\x02\u0F7D\u0F64\x03\x02\x02\x02\u0F7D\u0F6A\x03\x02\x02\x02\u0F7D" +
		"\u0F70\x03\x02\x02\x02\u0F7E\u013D\x03\x02\x02\x02\u0F7F\u0F80\x07\u03D0" +
		"\x02\x02\u0F80\u0F81\x05\u01EE\xF8\x02\u0F81\u0F82\x07\u03D2\x02\x02\u0F82" +
		"\u0F83\x05\u01EE\xF8\x02\u0F83\u0F84\x07\u03D1\x02\x02\u0F84\u013F\x03" +
		"\x02\x02\x02\u0F85\u0F86\t6\x02\x02\u0F86\u0141\x03\x02\x02\x02\u0F87" +
		"\u0F88\t7\x02\x02\u0F88\u0F89\x07\u03C7\x02\x02\u0F89\u0F9A\x05\u0146" +
		"\xA4\x02\u0F8A\u0F8B\x07\u018B\x02\x02\u0F8B\u0F8C\x07\u03C7\x02\x02\u0F8C" +
		"\u0F8D\x07\u03DF\x02\x02\u0F8D\u0F8E\x07\u03D2\x02\x02\u0F8E\u0F8F\x07" +
		"\u018C\x02\x02\u0F8F\u0F90\x07\u03C7\x02\x02\u0F90\u0F9A\x05\u020C\u0107" +
		"\x02\u0F91\u0F92\x07\u01D9\x02\x02\u0F92\u0F93\x07\u03C7\x02\x02\u0F93" +
		"\u0F94\x07\u03DF\x02\x02\u0F94\u0F95\x07\u03D2\x02\x02\u0F95\u0F96\x07" +
		"\u01DA\x02\x02\u0F96\u0F97\x07\u03C7\x02\x02\u0F97\u0F9A\x05\u020C\u0107" +
		"\x02\u0F98\u0F9A\x07\u0202\x02\x02\u0F99\u0F87\x03\x02\x02\x02\u0F99\u0F8A" +
		"\x03\x02\x02\x02\u0F99\u0F91\x03\x02\x02\x02\u0F99\u0F98\x03\x02\x02\x02" +
		"\u0F9A\u0143\x03\x02\x02\x02\u0F9B\u0F9C\x07\u0229\x02\x02\u0F9C\u0F9D" +
		"\x07\u03C7\x02\x02\u0F9D\u0FA8\x07\u03DF\x02\x02\u0F9E\u0F9F\x07\u01C4" +
		"\x02\x02\u0F9F\u0FA0\x07\u03C7\x02\x02\u0FA0\u0FA8\x07\u03DF\x02\x02\u0FA1" +
		"\u0FA2\x07\u0136\x02\x02\u0FA2\u0FA3\x07\u03C7\x02\x02\u0FA3\u0FA8\x07" +
		"\u03DF\x02\x02\u0FA4\u0FA5\x07\u01C7\x02\x02\u0FA5\u0FA6\x07\u03C7\x02" +
		"\x02\u0FA6\u0FA8\x07\u03DF\x02\x02\u0FA7\u0F9B\x03\x02\x02\x02\u0FA7\u0F9E" +
		"\x03\x02\x02\x02\u0FA7\u0FA1\x03\x02\x02\x02\u0FA7\u0FA4\x03\x02\x02\x02" +
		"\u0FA8\u0145\x03\x02\x02\x02\u0FA9\u0FAE\x05\u01FE\u0100\x02\u0FAA\u0FAB" +
		"\x07\u03D2\x02\x02\u0FAB\u0FAD\x05\u01FE\u0100\x02\u0FAC\u0FAA\x03\x02" +
		"\x02\x02\u0FAD\u0FB0\x03\x02\x02\x02\u0FAE\u0FAC\x03\x02\x02\x02\u0FAE" +
		"\u0FAF\x03\x02\x02\x02\u0FAF\u0FB3\x03\x02\x02\x02\u0FB0\u0FAE\x03\x02" +
		"\x02\x02\u0FB1\u0FB3\x07\u03DF\x02\x02\u0FB2\u0FA9\x03\x02\x02\x02\u0FB2" +
		"\u0FB1\x03\x02\x02\x02\u0FB3\u0147\x03\x02\x02\x02\u0FB4\u0FB5\x07\u0238" +
		"\x02\x02\u0FB5\u0FB6\t8\x02\x02\u0FB6\u0FB8\x05\u0200\u0101\x02\u0FB7" +
		"\u0FB9\t9\x02\x02\u0FB8\u0FB7\x03\x02\x02\x02\u0FB8\u0FB9\x03\x02\x02" +
		"\x02\u0FB9\u0149\x03\x02\x02\x02\u0FBA\u0FBB\x07\u0238\x02\x02\u0FBB\u0FBC" +
		"\x07\u0144\x02\x02\u0FBC\u0FC2\x05\u0200\u0101\x02\u0FBD\u0FC0\x07\u0216" +
		"\x02\x02\u0FBE\u0FBF\x07:\x02\x02\u0FBF\u0FC1\x07\u01A4\x02\x02\u0FC0" +
		"\u0FBE\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02\u0FC1\u0FC3\x03\x02" +
		"\x02\x02\u0FC2\u0FBD\x03\x02\x02\x02\u0FC2\u0FC3\x03\x02\x02\x02\u0FC3" +
		"\u014B\x03\x02\x02\x02\u0FC4\u0FC5\x07\u0238\x02\x02\u0FC5\u0FC6\x07\u01CB" +
		"\x02\x02\u0FC6\u0FC7\x05\u0200\u0101\x02\u0FC7\u014D\x03\x02\x02\x02\u0FC8" +
		"\u0FC9\x07\u0238\x02\x02\u0FC9\u0FCA\x07\u0123\x02\x02\u0FCA\u0FCD\x05" +
		"\u0200\u0101\x02\u0FCB\u0FCC\x07\u01B7\x02\x02\u0FCC\u0FCE\x07\u01C5\x02" +
		"\x02\u0FCD\u0FCB\x03\x02\x02\x02\u0FCD\u0FCE\x03\x02\x02\x02\u0FCE\u014F" +
		"\x03\x02\x02\x02\u0FCF\u0FD0\x07\u0238\x02\x02\u0FD0\u0FD1\x07\u01EA\x02" +
		"\x02\u0FD1\u0FD2\x05\u0200\u0101\x02\u0FD2\u0151\x03\x02\x02\x02\u0FD3" +
		"\u0FD4\x07\u0238\x02\x02\u0FD4\u0FD7\x07\u01D5\x02\x02\u0FD5\u0FD6\x07" +
		"\x1F\x02\x02\u0FD6\u0FD8\x05\u0200\u0101\x02\u0FD7\u0FD5\x03\x02\x02\x02" +
		"\u0FD7\u0FD8\x03\x02\x02\x02\u0FD8\u0153\x03\x02\x02\x02\u0FD9\u0FDA\x07" +
		"\u01CB\x02\x02\u0FDA\u0FDB\x05\u0206\u0104\x02\u0FDB\u0FDE\x07=\x02\x02" +
		"\u0FDC\u0FDF\x07\u03DF\x02\x02\u0FDD\u0FDF\x07\u03EA\x02\x02\u0FDE\u0FDC" +
		"\x03\x02\x02\x02\u0FDE\u0FDD\x03\x02\x02\x02\u0FDF\u0155\x03\x02\x02\x02" +
		"\u0FE0\u0FE1\x07\u0249\x02\x02\u0FE1\u0FE4\x05\u0206\u0104\x02\u0FE2\u0FE3" +
		"\x07\xA5\x02\x02\u0FE3\u0FE5\x05\u0234\u011B\x02\u0FE4\u0FE2\x03\x02\x02" +
		"\x02\u0FE4\u0FE5\x03\x02\x02\x02\u0FE5\u0157\x03\x02\x02\x02\u0FE6\u0FE7" +
		"\t:\x02\x02\u0FE7\u0FE8\x07\u01CB\x02\x02\u0FE8\u0FE9\x05\u0206\u0104" +
		"\x02\u0FE9\u0159\x03\x02\x02\x02\u0FEA\u0FED\x05\u015C\xAF\x02\u0FEB\u0FED" +
		"\x05\x06\x04\x02\u0FEC\u0FEA\x03\x02\x02\x02\u0FEC\u0FEB\x03\x02\x02\x02" +
		"\u0FED\u015B\x03\x02\x02\x02\u0FEE\u0FEF\x05\u0206\u0104\x02\u0FEF\u0FF0" +
		"\x07\u03DB\x02\x02\u0FF0\u0FF2\x03\x02\x02\x02\u0FF1\u0FEE\x03\x02\x02" +
		"\x02\u0FF1\u0FF2\x03\x02\x02\x02\u0FF2\u0FF3\x03\x02\x02\x02\u0FF3\u101A" +
		"\x07\u010B\x02\x02\u0FF4\u0FF5\x05\u0170\xB9\x02\u0FF5\u0FF6\x07\u03D3" +
		"\x02\x02\u0FF6\u0FF8\x03\x02\x02\x02\u0FF7\u0FF4\x03\x02\x02\x02\u0FF8" +
		"\u0FFB\x03\x02\x02\x02\u0FF9\u0FF7\x03\x02\x02\x02\u0FF9\u0FFA\x03\x02" +
		"\x02\x02\u0FFA\u1001\x03\x02\x02\x02\u0FFB\u0FF9\x03\x02\x02\x02\u0FFC" +
		"\u0FFD\x05\u0172\xBA\x02\u0FFD\u0FFE\x07\u03D3\x02\x02\u0FFE\u1000\x03" +
		"\x02\x02\x02\u0FFF\u0FFC\x03\x02\x02\x02\u1000\u1003\x03\x02\x02\x02\u1001" +
		"\u0FFF\x03\x02\x02\x02\u1001\u1002\x03\x02\x02\x02\u1002\u1009\x03\x02" +
		"\x02\x02\u1003\u1001\x03\x02\x02\x02\u1004\u1005\x05\u0174\xBB\x02\u1005" +
		"\u1006\x07\u03D3\x02\x02\u1006\u1008\x03\x02\x02\x02\u1007\u1004\x03\x02" +
		"\x02\x02\u1008\u100B\x03\x02\x02\x02\u1009\u1007\x03\x02\x02\x02\u1009" +
		"\u100A\x03\x02\x02\x02\u100A\u1011\x03\x02\x02\x02\u100B\u1009\x03\x02" +
		"\x02\x02\u100C\u100D\x05\u0176\xBC\x02\u100D\u100E\x07\u03D3\x02\x02\u100E" +
		"\u1010\x03\x02\x02\x02\u100F\u100C\x03\x02\x02\x02\u1010\u1013\x03\x02" +
		"\x02\x02\u1011\u100F\x03\x02\x02\x02\u1011\u1012\x03\x02\x02\x02\u1012" +
		"\u1017\x03\x02\x02\x02\u1013\u1011\x03\x02\x02\x02\u1014\u1016\x05\u017A" +
		"\xBE\x02\u1015\u1014\x03\x02\x02\x02\u1016\u1019\x03\x02\x02\x02\u1017" +
		"\u1015\x03\x02\x02\x02\u1017\u1018\x03\x02\x02\x02\u1018\u101B\x03\x02" +
		"\x02\x02\u1019\u1017\x03\x02\x02\x02\u101A\u0FF9\x03\x02\x02\x02\u101A" +
		"\u101B\x03\x02\x02\x02\u101B\u101C\x03\x02\x02\x02\u101C\u101E\x07\u0144" +
		"\x02\x02\u101D\u101F\x05\u0206\u0104\x02\u101E\u101D\x03\x02\x02\x02\u101E" +
		"\u101F\x03\x02\x02\x02\u101F\u015D\x03\x02\x02\x02\u1020\u1023\x07\x15" +
		"\x02\x02\u1021\u1024\x05\u0206\u0104\x02\u1022\u1024\x05\u0254\u012B\x02" +
		"\u1023\u1021\x03\x02\x02\x02\u1023\u1022\x03\x02\x02\x02\u1023\u1024\x03" +
		"\x02\x02\x02\u1024\u1026\x03\x02\x02\x02\u1025\u1027\x05\u017C\xBF\x02" +
		"\u1026\u1025\x03\x02\x02\x02\u1027\u1028\x03\x02\x02\x02\u1028\u1026\x03" +
		"\x02\x02\x02\u1028\u1029\x03\x02\x02\x02\u1029\u1030\x03\x02\x02\x02\u102A" +
		"\u102C\x071\x02\x02\u102B\u102D\x05\u017A\xBE\x02\u102C\u102B\x03\x02" +
		"\x02\x02\u102D\u102E\x03\x02\x02\x02\u102E\u102C\x03\x02\x02\x02\u102E" +
		"\u102F\x03\x02\x02\x02\u102F\u1031\x03\x02\x02\x02\u1030\u102A\x03\x02" +
		"\x02\x02\u1030\u1031\x03\x02\x02\x02\u1031\u1032\x03\x02\x02\x02\u1032" +
		"\u1033\x07\u0144\x02\x02\u1033\u1034\x07\x15\x02\x02\u1034\u015F\x03\x02" +
		"\x02\x02\u1035\u1036\x07D\x02\x02\u1036\u1037\x05\u0254\u012B\x02\u1037" +
		"\u1039\x07\x98\x02\x02\u1038\u103A\x05\u017A\xBE\x02\u1039\u1038\x03\x02" +
		"\x02\x02\u103A\u103B\x03\x02\x02\x02\u103B\u1039\x03\x02\x02\x02\u103B" +
		"\u103C\x03\x02\x02\x02\u103C\u1040\x03\x02\x02\x02\u103D\u103F\x05\u017E" +
		"\xC0\x02\u103E\u103D\x03\x02\x02\x02\u103F\u1042\x03\x02\x02\x02\u1040" +
		"\u103E\x03\x02\x02\x02\u1040\u1041\x03\x02\x02\x02\u1041\u1049\x03\x02" +
		"\x02\x02\u1042\u1040\x03\x02\x02\x02\u1043\u1045\x071\x02\x02\u1044\u1046" +
		"\x05\u017A\xBE\x02\u1045\u1044\x03\x02\x02\x02\u1046\u1047\x03\x02\x02" +
		"\x02\u1047\u1045\x03\x02\x02\x02\u1047\u1048\x03\x02\x02\x02\u1048\u104A" +
		"\x03\x02\x02\x02\u1049\u1043\x03\x02\x02\x02\u1049\u104A\x03\x02\x02\x02" +
		"\u104A\u104B\x03\x02\x02\x02\u104B\u104C\x07\u0144\x02\x02\u104C\u104D" +
		"\x07D\x02\x02\u104D\u0161\x03\x02\x02\x02\u104E\u104F\x07O\x02\x02\u104F" +
		"\u1050\x05\u0206\u0104\x02\u1050\u0163\x03\x02\x02\x02\u1051\u1052\x07" +
		"U\x02\x02\u1052\u1053\x05\u0206\u0104\x02\u1053\u0165\x03\x02\x02\x02" +
		"\u1054\u1055\x05\u0206\u0104\x02\u1055\u1056\x07\u03DB\x02\x02\u1056\u1058" +
		"\x03\x02\x02\x02\u1057\u1054\x03\x02\x02\x02\u1057\u1058\x03\x02\x02\x02" +
		"\u1058\u1059\x03\x02\x02\x02\u1059\u105B\x07]\x02\x02\u105A\u105C\x05" +
		"\u017A\xBE\x02\u105B\u105A\x03\x02\x02\x02\u105C\u105D\x03\x02\x02\x02" +
		"\u105D\u105B\x03\x02\x02\x02\u105D\u105E\x03\x02\x02\x02\u105E\u105F\x03" +
		"\x02\x02\x02\u105F\u1060\x07\u0144\x02\x02\u1060\u1062\x07]\x02\x02\u1061" +
		"\u1063\x05\u0206\u0104\x02\u1062\u1061\x03\x02\x02\x02\u1062\u1063\x03" +
		"\x02\x02\x02\u1063\u0167\x03\x02\x02\x02\u1064\u1065\x05\u0206\u0104\x02" +
		"\u1065\u1066\x07\u03DB\x02\x02\u1066\u1068\x03\x02\x02\x02\u1067\u1064" +
		"\x03\x02\x02\x02\u1067\u1068\x03\x02\x02\x02\u1068\u1069\x03\x02\x02\x02" +
		"\u1069\u106B\x07|\x02\x02\u106A\u106C\x05\u017A\xBE\x02\u106B\u106A\x03" +
		"\x02\x02\x02\u106C\u106D\x03\x02\x02\x02\u106D\u106B\x03\x02\x02\x02\u106D" +
		"\u106E\x03\x02\x02\x02\u106E\u106F\x03\x02\x02\x02\u106F\u1070\x07\u0227" +
		"\x02\x02\u1070\u1071\x05\u0254\u012B\x02\u1071\u1072\x07\u0144\x02\x02" +
		"\u1072\u1074\x07|\x02\x02\u1073\u1075\x05\u0206\u0104\x02\u1074\u1073" +
		"\x03\x02\x02\x02\u1074\u1075\x03\x02\x02\x02\u1075\u0169\x03\x02\x02\x02" +
		"\u1076\u1077\x07\x80\x02\x02\u1077\u1078\x05\u0254\u012B\x02\u1078\u016B" +
		"\x03\x02\x02\x02\u1079\u107A\x05\u0206\u0104\x02\u107A\u107B\x07\u03DB" +
		"\x02\x02\u107B\u107D\x03\x02\x02\x02\u107C\u1079\x03\x02\x02\x02\u107C" +
		"\u107D\x03\x02\x02\x02\u107D\u107E\x03\x02\x02\x02\u107E\u107F\x07\xA9" +
		"\x02\x02\u107F\u1080\x05\u0254\u012B\x02\u1080\u1082\x07\u013E\x02\x02" +
		"\u1081\u1083\x05\u017A\xBE\x02\u1082\u1081\x03\x02\x02\x02\u1083\u1084" +
		"\x03\x02\x02\x02\u1084\u1082\x03\x02\x02\x02\u1084\u1085\x03\x02\x02\x02" +
		"\u1085\u1086\x03\x02\x02\x02\u1086\u1087\x07\u0144\x02\x02\u1087\u1089" +
		"\x07\xA9\x02\x02\u1088\u108A\x05\u0206\u0104\x02\u1089\u1088\x03\x02\x02" +
		"\x02\u1089\u108A\x03\x02\x02\x02\u108A\u016D\x03\x02\x02\x02\u108B\u108C" +
		"\x07\u011C\x02\x02\u108C\u109B\x05\u0206\u0104\x02\u108D\u1092\x079\x02" +
		"\x02\u108E\u1090\x07\u01AF\x02\x02\u108F\u108E\x03\x02\x02\x02\u108F\u1090" +
		"\x03\x02\x02\x02\u1090\u1091\x03\x02\x02\x02\u1091\u1093\x07=\x02\x02" +
		"\u1092\u108F\x03\x02\x02\x02\u1092\u1093\x03\x02\x02\x02\u1093\u1094\x03" +
		"\x02\x02\x02\u1094\u1095\x05\u0206\u0104\x02\u1095\u1096\x07M\x02\x02" +
		"\u1096\u1097\x05\u0226\u0114\x02\u1097\u109B\x03\x02\x02\x02\u1098\u1099" +
		"\x07\u01BA\x02\x02\u1099\u109B\x05\u0206\u0104\x02\u109A\u108B\x03\x02" +
		"\x02\x02\u109A\u108D\x03\x02\x02\x02\u109A\u1098\x03\x02\x02\x02\u109B" +
		"\u016F\x03\x02\x02\x02\u109C\u109D\x07&\x02\x02\u109D\u109E\x05\u0226" +
		"\u0114\x02\u109E\u10A1\x05\u021A\u010E\x02\u109F\u10A0\x07\'\x02\x02\u10A0" +
		"\u10A2\x05\u0236\u011C\x02\u10A1\u109F\x03\x02\x02\x02\u10A1\u10A2\x03" +
		"\x02\x02\x02\u10A2\u0171\x03\x02\x02\x02\u10A3\u10A4\x07&\x02\x02\u10A4" +
		"\u10A5\x05\u0206\u0104\x02\u10A5\u10A6\x07\x1C\x02\x02\u10A6\u10AD\x07" +
		":\x02\x02\u10A7\u10AE\x05\u020C\u0107\x02\u10A8\u10AA\x07\x8E\x02\x02" +
		"\u10A9\u10AB\x07\u022D\x02\x02\u10AA\u10A9\x03\x02\x02\x02\u10AA\u10AB" +
		"\x03\x02\x02\x02\u10AB\u10AC\x03\x02\x02\x02\u10AC\u10AE\x07\u03DF\x02" +
		"\x02\u10AD\u10A7\x03\x02\x02\x02\u10AD\u10A8\x03\x02\x02\x02\u10AE\u0173" +
		"\x03\x02\x02\x02\u10AF\u10B0\x07&\x02\x02\u10B0\u10B1\x05\u0206\u0104" +
		"\x02\u10B1\u10B2\x07#\x02\x02\u10B2\u10B3\x07:\x02\x02\u10B3\u10B4\x05" +
		"\xB4[\x02\u10B4\u0175\x03\x02\x02\x02\u10B5\u10B6\x07&\x02\x02\u10B6\u10B7" +
		"\t;\x02\x02\u10B7\u10B8\x07\u0165\x02\x02\u10B8\u10B9\x07:\x02\x02\u10B9" +
		"\u10BE\x05\u0178\xBD\x02\u10BA\u10BB\x07\u03D2\x02\x02\u10BB\u10BD\x05" +
		"\u0178\xBD\x02\u10BC\u10BA\x03\x02\x02\x02\u10BD\u10C0\x03\x02\x02\x02" +
		"\u10BE\u10BC\x03\x02\x02\x02\u10BE\u10BF\x03\x02\x02\x02\u10BF\u10C1\x03" +
		"\x02\x02\x02\u10C0\u10BE\x03\x02\x02\x02\u10C1\u10C2\x05\u015A\xAE\x02" +
		"\u10C2\u0177\x03\x02\x02\x02\u10C3\u10CF\x05\u020C\u0107\x02\u10C4\u10C6" +
		"\x07\x8E\x02\x02\u10C5\u10C7\x07\u022D\x02\x02\u10C6\u10C5\x03\x02\x02" +
		"\x02\u10C6\u10C7\x03\x02\x02\x02\u10C7\u10C8\x03\x02\x02\x02\u10C8\u10CF" +
		"\x07\u03DF\x02\x02\u10C9\u10CF\x05\u0206\u0104\x02\u10CA\u10CF\x07\x8F" +
		"\x02\x02\u10CB\u10CC\x07e\x02\x02\u10CC\u10CF\x07\u015E\x02\x02\u10CD" +
		"\u10CF\x07\x8D\x02\x02\u10CE\u10C3\x03\x02\x02\x02\u10CE\u10C4\x03\x02" +
		"\x02\x02\u10CE\u10C9\x03\x02\x02\x02\u10CE\u10CA\x03\x02\x02\x02\u10CE" +
		"\u10CB\x03\x02\x02\x02\u10CE\u10CD\x03\x02\x02\x02\u10CF\u0179\x03\x02" +
		"\x02\x02\u10D0\u10D3\x05\x14\v\x02\u10D1\u10D3\x05\x06\x04\x02\u10D2\u10D0" +
		"\x03\x02\x02\x02\u10D2\u10D1\x03\x02\x02\x02\u10D3\u10D4\x03\x02\x02\x02" +
		"\u10D4\u10D5\x07\u03D3\x02\x02\u10D5\u017B\x03\x02\x02\x02\u10D6\u10D9" +
		"\x07\xA7\x02\x02\u10D7\u10DA\x05\u0218\u010D\x02\u10D8\u10DA\x05\u0254" +
		"\u012B\x02\u10D9\u10D7\x03\x02\x02\x02\u10D9\u10D8\x03\x02\x02\x02\u10DA" +
		"\u10DB\x03\x02\x02\x02\u10DB\u10DD\x07\x98\x02\x02\u10DC\u10DE\x05\u017A" +
		"\xBE\x02\u10DD\u10DC\x03\x02\x02\x02\u10DE\u10DF\x03\x02\x02\x02\u10DF" +
		"\u10DD\x03\x02\x02\x02\u10DF\u10E0\x03\x02\x02\x02\u10E0\u017D\x03\x02" +
		"\x02\x02\u10E1\u10E2\x072\x02\x02\u10E2\u10E3\x05\u0254\u012B\x02\u10E3" +
		"\u10E5\x07\x98\x02\x02\u10E4\u10E6\x05\u017A\xBE\x02\u10E5\u10E4\x03\x02" +
		"\x02\x02\u10E6\u10E7\x03\x02\x02\x02\u10E7\u10E5\x03\x02\x02\x02\u10E7" +
		"\u10E8\x03\x02\x02\x02\u10E8\u017F\x03\x02\x02\x02\u10E9\u10EA\x07\t\x02" +
		"\x02\u10EA\u10EB\x07\u0229\x02\x02\u10EB\u10F0\x05\u0192\xCA\x02\u10EC" +
		"\u10ED\x07\u03D2\x02\x02\u10ED\u10EF\x05\u0192\xCA\x02\u10EE\u10EC\x03" +
		"\x02\x02\x02\u10EF\u10F2\x03\x02\x02\x02\u10F0\u10EE\x03\x02\x02\x02\u10F0" +
		"\u10F1\x03\x02\x02\x02\u10F1\u1120\x03\x02\x02\x02\u10F2\u10F0\x03\x02" +
		"\x02\x02\u10F3\u10F4\x07\t\x02\x02\u10F4\u10F6\x07\u0229\x02\x02\u10F5" +
		"\u10F7\x05\u023C\u011F\x02\u10F6\u10F5\x03\x02\x02\x02\u10F6\u10F7\x03" +
		"\x02\x02\x02\u10F7\u10F8\x03\x02\x02\x02\u10F8\u10FD\x05\u0194\xCB\x02" +
		"\u10F9\u10FA\x07\u03D2\x02\x02\u10FA\u10FC\x05\u0194\xCB\x02\u10FB\u10F9" +
		"\x03\x02\x02\x02\u10FC\u10FF\x03\x02\x02\x02\u10FD\u10FB\x03\x02\x02\x02" +
		"\u10FD\u10FE\x03\x02\x02\x02\u10FE\u110E\x03\x02\x02\x02\u10FF\u10FD\x03" +
		"\x02\x02\x02\u1100\u110C\x07~\x02\x02\u1101\u110D\x07\u01B2\x02\x02\u1102" +
		"\u1109\x05\u0196\xCC\x02\u1103\u1105\x07\f\x02\x02\u1104\u1103\x03\x02" +
		"\x02\x02\u1104\u1105\x03\x02\x02\x02\u1105\u1106\x03\x02\x02\x02\u1106" +
		"\u1108\x05\u0196\xCC\x02\u1107\u1104\x03\x02\x02\x02\u1108\u110B\x03\x02" +
		"\x02\x02\u1109\u1107\x03\x02\x02\x02\u1109\u110A\x03\x02\x02\x02\u110A" +
		"\u110D\x03\x02\x02\x02\u110B\u1109\x03\x02\x02\x02\u110C\u1101\x03\x02" +
		"\x02\x02\u110C\u1102\x03\x02\x02\x02\u110D\u110F\x03\x02\x02\x02\u110E" +
		"\u1100\x03\x02\x02\x02\u110E\u110F\x03\x02\x02\x02\u110F\u1116\x03\x02" +
		"\x02\x02\u1110\u1112\x07\xAA\x02\x02\u1111\u1113\x05\u0198\xCD\x02\u1112" +
		"\u1111\x03\x02\x02\x02\u1113\u1114\x03\x02\x02\x02\u1114\u1112\x03\x02" +
		"\x02\x02\u1114\u1115\x03\x02\x02\x02\u1115\u1117\x03\x02\x02\x02\u1116" +
		"\u1110\x03\x02\x02\x02\u1116\u1117\x03\x02\x02\x02\u1117\u111C\x03\x02" +
		"\x02\x02\u1118\u111B\x05\u019A\xCE\x02\u1119\u111B\x05\u019C\xCF\x02\u111A" +
		"\u1118\x03\x02\x02\x02\u111A\u1119\x03\x02\x02\x02\u111B\u111E\x03\x02" +
		"\x02\x02\u111C\u111A\x03\x02\x02\x02\u111C\u111D\x03\x02\x02\x02\u111D" +
		"\u1120\x03\x02\x02\x02\u111E\u111C\x03\x02\x02\x02\u111F\u10E9\x03\x02" +
		"\x02\x02\u111F\u10F3\x03\x02\x02\x02\u1120\u0181\x03\x02\x02\x02\u1121" +
		"\u1122\x07 \x02\x02\u1122\u1123\x07\u0229\x02\x02\u1123\u1128\x05\u0194" +
		"\xCB\x02\u1124\u1125\x07\u03D2\x02\x02\u1125\u1127\x05\u0194\xCB\x02\u1126" +
		"\u1124\x03\x02\x02\x02\u1127\u112A\x03\x02\x02\x02\u1128\u1126\x03\x02" +
		"\x02\x02\u1128\u1129\x03\x02\x02\x02\u1129\u1158\x03\x02\x02\x02\u112A" +
		"\u1128\x03\x02\x02\x02\u112B\u112C\x07 \x02\x02\u112C\u112E\x07\u0229" +
		"\x02\x02\u112D\u112F\x05\u023E\u0120\x02\u112E\u112D\x03\x02\x02\x02\u112E" +
		"\u112F\x03\x02\x02\x02\u112F\u1130\x03\x02\x02\x02\u1130\u1135\x05\u0194" +
		"\xCB\x02\u1131\u1132\x07\u03D2\x02\x02\u1132\u1134\x05\u0194\xCB\x02\u1133" +
		"\u1131\x03\x02";
	private static readonly _serializedATNSegment9: string =
		"\x02\x02\u1134\u1137\x03\x02\x02\x02\u1135\u1133\x03\x02\x02\x02\u1135" +
		"\u1136\x03\x02\x02\x02\u1136\u1146\x03\x02\x02\x02\u1137\u1135\x03\x02" +
		"\x02\x02\u1138\u1144\x07~\x02\x02\u1139\u1145\x07\u01B2\x02\x02\u113A" +
		"\u1141\x05\u0196\xCC\x02\u113B\u113D\x07\f\x02\x02\u113C\u113B\x03\x02" +
		"\x02\x02\u113C\u113D\x03\x02\x02\x02\u113D\u113E\x03\x02\x02\x02\u113E" +
		"\u1140\x05\u0196\xCC\x02\u113F\u113C\x03\x02\x02\x02\u1140\u1143\x03\x02" +
		"\x02\x02\u1141\u113F\x03\x02\x02\x02\u1141\u1142\x03\x02\x02\x02\u1142" +
		"\u1145\x03\x02\x02\x02\u1143\u1141\x03\x02\x02\x02\u1144\u1139\x03\x02" +
		"\x02\x02\u1144\u113A\x03\x02\x02\x02\u1145\u1147\x03\x02\x02\x02\u1146" +
		"\u1138\x03\x02\x02\x02\u1146\u1147\x03\x02\x02\x02\u1147\u114E\x03\x02" +
		"\x02\x02\u1148\u114A\x07\xAA\x02\x02\u1149\u114B\x05\u0198\xCD\x02\u114A" +
		"\u1149\x03\x02\x02\x02\u114B\u114C\x03\x02\x02\x02\u114C\u114A\x03\x02" +
		"\x02\x02\u114C\u114D\x03\x02\x02\x02\u114D\u114F\x03\x02\x02\x02\u114E" +
		"\u1148\x03\x02\x02\x02\u114E\u114F\x03\x02\x02\x02\u114F\u1154\x03\x02" +
		"\x02\x02\u1150\u1153\x05\u019A\xCE\x02\u1151\u1153\x05\u019C\xCF\x02\u1152" +
		"\u1150\x03\x02\x02\x02\u1152\u1151\x03\x02\x02\x02\u1153\u1156\x03\x02" +
		"\x02\x02\u1154\u1152\x03\x02\x02\x02\u1154\u1155\x03\x02\x02\x02\u1155" +
		"\u1158\x03\x02\x02\x02\u1156\u1154\x03\x02\x02\x02\u1157\u1121\x03\x02" +
		"\x02\x02\u1157\u112B\x03\x02\x02\x02\u1158\u0183\x03\x02\x02\x02\u1159" +
		"\u115A\x07/\x02\x02\u115A\u115C\x07\u0229\x02\x02\u115B\u115D\x05\u023C" +
		"\u011F\x02\u115C\u115B\x03\x02\x02\x02\u115C\u115D\x03\x02\x02\x02\u115D" +
		"\u115E\x03\x02\x02\x02\u115E\u1163\x05\u01F4\xFB\x02\u115F\u1160\x07\u03D2" +
		"\x02\x02\u1160\u1162\x05\u01F4\xFB\x02\u1161\u115F\x03\x02\x02\x02\u1162" +
		"\u1165\x03\x02\x02\x02\u1163\u1161\x03\x02\x02\x02\u1163\u1164\x03\x02" +
		"\x02\x02\u1164\u0185\x03\x02\x02\x02\u1165\u1163\x03\x02\x02\x02\u1166" +
		"\u1167\x07@\x02\x02\u1167\u116C\x05\u019E\xD0\x02\u1168\u1169\x07\u03D2" +
		"\x02\x02\u1169\u116B\x05\u019E\xD0\x02\u116A\u1168\x03\x02\x02\x02\u116B" +
		"\u116E\x03\x02\x02\x02\u116C\u116A\x03\x02\x02\x02\u116C\u116D\x03\x02" +
		"\x02\x02\u116D\u116F\x03\x02\x02\x02\u116E\u116C\x03\x02\x02\x02\u116F" +
		"\u1171\x07h\x02\x02\u1170\u1172\t<\x02\x02\u1171\u1170\x03\x02\x02\x02" +
		"\u1171\u1172\x03\x02\x02\x02\u1172\u1173\x03\x02\x02\x02\u1173\u1174\x05" +
		"\u01A2\xD2\x02\u1174\u1175\x07\x99\x02\x02\u1175\u117A\x05\u0194\xCB\x02" +
		"\u1176\u1177\x07\u03D2\x02\x02\u1177\u1179\x05\u0194\xCB\x02\u1178\u1176" +
		"\x03\x02\x02\x02\u1179\u117C\x03\x02\x02\x02\u117A\u1178\x03\x02\x02\x02" +
		"\u117A\u117B\x03\x02\x02\x02\u117B\u118B\x03\x02\x02\x02\u117C\u117A\x03" +
		"\x02\x02\x02\u117D\u1189\x07~\x02\x02\u117E\u118A\x07\u01B2\x02\x02\u117F" +
		"\u1186\x05\u0196\xCC\x02\u1180\u1182\x07\f\x02\x02\u1181\u1180\x03\x02" +
		"\x02\x02\u1181\u1182\x03\x02\x02\x02\u1182\u1183\x03\x02\x02\x02\u1183" +
		"\u1185\x05\u0196\xCC\x02\u1184\u1181\x03\x02\x02\x02\u1185\u1188\x03\x02" +
		"\x02\x02\u1186\u1184\x03\x02\x02\x02\u1186\u1187\x03\x02\x02\x02\u1187" +
		"\u118A\x03\x02\x02\x02\u1188\u1186\x03\x02\x02\x02\u1189\u117E\x03\x02" +
		"\x02\x02\u1189\u117F\x03\x02\x02\x02\u118A\u118C\x03\x02\x02\x02\u118B" +
		"\u117D\x03\x02\x02\x02\u118B\u118C\x03\x02\x02\x02\u118C\u1196\x03\x02" +
		"\x02\x02\u118D\u1193\x07\xAA\x02\x02\u118E\u118F\x07@\x02\x02\u118F\u1192" +
		"\x07j\x02\x02\u1190\u1192\x05\u0198\xCD\x02\u1191\u118E\x03\x02\x02\x02" +
		"\u1191\u1190\x03\x02\x02\x02\u1192\u1195\x03\x02\x02\x02\u1193\u1191\x03" +
		"\x02\x02\x02\u1193\u1194\x03\x02\x02\x02\u1194\u1197\x03\x02\x02\x02\u1195" +
		"\u1193\x03\x02\x02\x02\u1196\u118D\x03\x02\x02\x02\u1196\u1197\x03\x02" +
		"\x02\x02\u1197\u0187\x03\x02\x02\x02\u1198\u1199\x07@\x02\x02\u1199\u119A" +
		"\x07\u01D1\x02\x02\u119A\u119B\x07h\x02\x02\u119B\u119C\x05\u01F4\xFB" +
		"\x02\u119C\u119D\x07\x99\x02\x02\u119D\u11A2\x05\u01F4\xFB\x02\u119E\u119F" +
		"\x07\u03D2\x02\x02\u119F\u11A1\x05\u01F4\xFB\x02\u11A0\u119E\x03\x02\x02" +
		"\x02\u11A1\u11A4\x03\x02\x02\x02\u11A2\u11A0\x03\x02\x02\x02\u11A2\u11A3" +
		"\x03\x02\x02\x02\u11A3\u11A8\x03\x02\x02\x02\u11A4\u11A2\x03\x02\x02\x02" +
		"\u11A5\u11A6\x07\xAA\x02\x02\u11A6\u11A7\x07@\x02\x02\u11A7\u11A9\x07" +
		"j\x02\x02\u11A8\u11A5\x03\x02\x02\x02\u11A8\u11A9\x03\x02\x02\x02\u11A9" +
		"\u0189\x03\x02\x02\x02\u11AA\u11AB\x07{\x02\x02\u11AB\u11AC\x07\u0229" +
		"\x02\x02\u11AC\u11B1\x05\u01A4\xD3\x02\u11AD\u11AE\x07\u03D2\x02\x02\u11AE" +
		"\u11B0\x05\u01A4\xD3\x02\u11AF\u11AD\x03\x02\x02\x02\u11B0\u11B3\x03\x02" +
		"\x02\x02\u11B1\u11AF\x03\x02\x02\x02\u11B1\u11B2\x03\x02\x02\x02\u11B2" +
		"\u018B\x03\x02\x02\x02\u11B3\u11B1\x03\x02\x02\x02\u11B4\u11B5\x07\x81" +
		"\x02\x02\u11B5\u11BA\x05\u019E\xD0\x02\u11B6\u11B7\x07\u03D2\x02\x02\u11B7" +
		"\u11B9\x05\u019E\xD0\x02\u11B8\u11B6\x03\x02\x02\x02\u11B9\u11BC\x03\x02" +
		"\x02\x02\u11BA\u11B8\x03\x02\x02\x02\u11BA\u11BB\x03\x02\x02\x02\u11BB" +
		"\u11BD\x03\x02\x02\x02\u11BC\u11BA\x03\x02\x02\x02\u11BD\u11BF\x07h\x02" +
		"\x02\u11BE\u11C0\t<\x02\x02\u11BF\u11BE\x03\x02\x02\x02\u11BF\u11C0\x03" +
		"\x02\x02\x02\u11C0\u11C1\x03\x02\x02\x02\u11C1\u11C2\x05\u01A2\xD2\x02" +
		"\u11C2\u11C3\x07=\x02\x02\u11C3\u11C8\x05\u01F4\xFB\x02\u11C4\u11C5\x07" +
		"\u03D2\x02\x02\u11C5\u11C7\x05\u01F4\xFB\x02\u11C6\u11C4\x03\x02\x02\x02" +
		"\u11C7\u11CA\x03\x02\x02\x02\u11C8\u11C6\x03\x02\x02\x02\u11C8\u11C9\x03" +
		"\x02\x02\x02\u11C9\u11DD\x03\x02\x02\x02\u11CA\u11C8\x03\x02\x02\x02\u11CB" +
		"\u11CC\x07\x81\x02\x02\u11CC\u11CE\x07\b\x02\x02\u11CD\u11CF\x07\u024F" +
		"\x02\x02\u11CE\u11CD\x03\x02\x02\x02\u11CE\u11CF\x03\x02\x02\x02\u11CF" +
		"\u11D0\x03\x02\x02\x02\u11D0\u11D1\x07\u03D2\x02\x02\u11D1\u11D2\x07@" +
		"\x02\x02\u11D2\u11D3\x07j\x02\x02\u11D3\u11D4\x07=\x02\x02\u11D4\u11D9" +
		"\x05\u01F4\xFB\x02\u11D5\u11D6\x07\u03D2\x02\x02\u11D6\u11D8\x05\u01F4" +
		"\xFB\x02\u11D7\u11D5\x03\x02\x02\x02\u11D8\u11DB\x03\x02\x02\x02\u11D9" +
		"\u11D7\x03\x02\x02\x02\u11D9\u11DA\x03\x02\x02\x02\u11DA\u11DD\x03\x02" +
		"\x02\x02\u11DB\u11D9\x03\x02\x02\x02\u11DC\u11B4\x03\x02\x02\x02\u11DC" +
		"\u11CB\x03\x02\x02\x02\u11DD\u018D\x03\x02\x02\x02\u11DE\u11DF\x07\x81" +
		"\x02\x02\u11DF\u11E0\x07\u01D1\x02\x02\u11E0\u11E1\x07h\x02\x02\u11E1" +
		"\u11E2\x05\u01F4\xFB\x02\u11E2\u11E3\x07=\x02\x02\u11E3\u11E8\x05\u01F4" +
		"\xFB\x02\u11E4\u11E5\x07\u03D2\x02\x02\u11E5\u11E7\x05\u01F4\xFB\x02\u11E6" +
		"\u11E4\x03\x02\x02\x02\u11E7\u11EA\x03\x02\x02\x02\u11E8\u11E6\x03\x02" +
		"\x02\x02\u11E8\u11E9\x03\x02\x02\x02\u11E9\u018F\x03\x02\x02\x02\u11EA" +
		"\u11E8\x03\x02\x02\x02\u11EB\u11EC\x07\x87\x02\x02\u11EC\u11EF\x07\u01C4" +
		"\x02\x02\u11ED\u11EE\x07:\x02\x02\u11EE\u11F0\x05\u01F4\xFB\x02\u11EF" +
		"\u11ED\x03\x02\x02\x02\u11EF\u11F0\x03\x02\x02\x02\u11F0\u11F1\x03\x02" +
		"\x02\x02\u11F1\u11F4\x07\u03C7\x02\x02\u11F2\u11F5\x05\u024E\u0128\x02" +
		"\u11F3\u11F5\x07\u03DF\x02\x02\u11F4\u11F2\x03\x02\x02\x02\u11F4\u11F3" +
		"\x03\x02\x02\x02\u11F5\u0191\x03\x02\x02\x02\u11F6\u11F7\x05\u01F4\xFB" +
		"\x02\u11F7\u11F8\x05\u019A\xCE\x02\u11F8\u0193\x03\x02\x02\x02\u11F9\u11FA" +
		"\x05\u01F4\xFB\x02\u11FA\u11FB\x07\u016A\x02\x02\u11FB\u11FC\x07\x12\x02" +
		"\x02\u11FC\u11FD\x07\u01C4\x02\x02\u11FD\u11FE\x07\u03DF\x02\x02\u11FE" +
		"\u1212\x03\x02\x02\x02\u11FF\u1200\x05\u01F4\xFB\x02\u1200\u1203\x07\u016A" +
		"\x02\x02\u1201\u1202\x07\xAA\x02\x02\u1202\u1204\x05\u0204\u0103\x02\u1203" +
		"\u1201\x03\x02\x02\x02\u1203\u1204\x03\x02\x02\x02\u1204\u1205\x03\x02" +
		"\x02\x02\u1205\u1206\x07\x12\x02\x02\u1206\u1207\x07\u03DF\x02\x02\u1207" +
		"\u1212\x03\x02\x02\x02\u1208\u1209\x05\u01F4\xFB\x02\u1209\u120A\x07\u016A" +
		"\x02\x02\u120A\u120B\x07\xAA\x02\x02\u120B\u120E\x05\u0204\u0103\x02\u120C" +
		"\u120D\x07\r\x02\x02\u120D\u120F\x07\u03DF\x02\x02\u120E\u120C\x03\x02" +
		"\x02\x02\u120E\u120F\x03\x02\x02\x02\u120F\u1212\x03\x02\x02\x02\u1210" +
		"\u1212\x05\u01F4\xFB\x02\u1211\u11F9\x03\x02\x02\x02\u1211\u11FF\x03\x02" +
		"\x02\x02\u1211\u1208\x03\x02\x02\x02\u1211\u1210\x03\x02\x02\x02\u1212" +
		"\u0195\x03\x02\x02\x02\u1213\u121C\x07\x93\x02\x02\u1214\u121C\x07\u0237" +
		"\x02\x02\u1215\u1216\x07\u0119\x02\x02\u1216\u121C\x07\u03DF\x02\x02\u1217" +
		"\u1218\x07\u0179\x02\x02\u1218\u121C\x07\u03DF\x02\x02\u1219\u121A\x07" +
		"\u0213\x02\x02\u121A\u121C\x07\u03DF\x02\x02\u121B\u1213\x03\x02\x02\x02" +
		"\u121B\u1214\x03\x02\x02\x02\u121B\u1215\x03\x02\x02\x02\u121B\u1217\x03" +
		"\x02\x02\x02\u121B\u1219\x03\x02\x02\x02\u121C\u0197\x03\x02\x02\x02\u121D" +
		"\u121E\x07\u019B\x02\x02\u121E\u1226\x05\u020C\u0107\x02\u121F\u1220\x07" +
		"\u019E\x02\x02\u1220\u1226\x05\u020C\u0107\x02\u1221\u1222\x07\u019A\x02" +
		"\x02\u1222\u1226\x05\u020C\u0107\x02\u1223\u1224\x07\u019F\x02\x02\u1224" +
		"\u1226\x05\u020C\u0107\x02\u1225\u121D\x03\x02\x02\x02\u1225\u121F\x03" +
		"\x02\x02\x02\u1225\u1221\x03\x02\x02\x02\u1225\u1223\x03\x02\x02\x02\u1226" +
		"\u0199\x03\x02\x02\x02\u1227\u1228\x07\u01C4\x02\x02\u1228\u122F\x07\u0151" +
		"\x02\x02\u1229\u1230\x07\'\x02\x02\u122A\u1230\x07\u01AE\x02\x02\u122B" +
		"\u122C\x07L\x02\x02\u122C\u122D\x05\u020C\u0107\x02\u122D\u122E\x07\u0241" +
		"\x02\x02\u122E\u1230\x03\x02\x02\x02\u122F\u1229\x03\x02\x02\x02\u122F" +
		"\u122A\x03\x02\x02\x02\u122F\u122B\x03\x02\x02\x02\u122F\u1230\x03\x02" +
		"\x02\x02\u1230\u019B\x03\x02\x02\x02\u1231\u1232\x07\xFF\x02\x02\u1232" +
		"\u1233\t=\x02\x02\u1233\u019D\x03\x02\x02\x02\u1234\u1239\x05\u01A0\xD1" +
		"\x02\u1235\u1236\x07\u03D0\x02\x02\u1236\u1237\x05\u0226\u0114\x02\u1237" +
		"\u1238\x07\u03D1\x02\x02\u1238\u123A\x03\x02\x02\x02\u1239\u1235\x03\x02" +
		"\x02\x02\u1239\u123A\x03\x02\x02\x02\u123A\u019F\x03\x02\x02\x02\u123B" +
		"\u123D\x07\b\x02\x02\u123C\u123E\x07\u024F\x02\x02\u123D\u123C\x03\x02" +
		"\x02\x02\u123D\u123E\x03\x02\x02\x02\u123E\u1267\x03\x02\x02\x02\u123F" +
		"\u1241\x07\t\x02\x02\u1240\u1242\x07\u0248\x02\x02\u1241\u1240\x03\x02" +
		"\x02\x02\u1241\u1242\x03\x02\x02\x02\u1242\u1267\x03\x02\x02\x02\u1243" +
		"\u124A\x07 \x02\x02\u1244\u1245\x07\u021B\x02\x02\u1245\u124B\x07\u0247" +
		"\x02\x02\u1246\u124B\x07\u0248\x02\x02\u1247\u124B\x07\u022F\x02\x02\u1248" +
		"\u124B\x07\u0229\x02\x02\u1249\u124B\x07\u021A\x02\x02\u124A\u1244\x03" +
		"\x02\x02\x02\u124A\u1246\x03\x02\x02\x02\u124A\u1247\x03\x02\x02\x02\u124A" +
		"\u1248\x03\x02\x02\x02\u124A\u1249\x03\x02\x02\x02\u124A\u124B\x03\x02" +
		"\x02\x02\u124B\u1267\x03\x02\x02\x02\u124C\u1267\x07)\x02\x02\u124D\u1267" +
		"\x07/\x02\x02\u124E\u1267\x07\u014C\x02\x02\u124F\u1267\x07\u0249\x02" +
		"\x02\u1250\u1267\x07\u024A\x02\x02\u1251\u1252\x07@\x02\x02\u1252\u1267" +
		"\x07j\x02\x02\u1253\u1267\x07G\x02\x02\u1254\u1267\x07K\x02\x02\u1255" +
		"\u1256\x07\\\x02\x02\u1256\u1267\x07\u0247\x02\x02\u1257\u1267\x07\u024B" +
		"\x02\x02\u1258\u1267\x07\u01D1\x02\x02\u1259\u1267\x07x\x02\x02\u125A" +
		"\u1267\x07\u024C\x02\x02\u125B\u125C\x07\u01E6\x02\x02\u125C\u1267\t>" +
		"\x02\x02\u125D\u1267\x07\x86\x02\x02\u125E\u125F\x07\x89\x02\x02\u125F" +
		"\u1267\t?\x02\x02\u1260\u1267\x07\u024D\x02\x02\u1261\u1267\x07\u024E" +
		"\x02\x02\u1262\u1267\x07\x9B\x02\x02\u1263\u1267\x07\xA2\x02\x02\u1264" +
		"\u1267\x07\xA3\x02\x02\u1265\u1267\x07\u0250\x02\x02\u1266\u123B\x03\x02" +
		"\x02\x02\u1266\u123F\x03\x02\x02\x02\u1266\u1243\x03\x02\x02\x02\u1266" +
		"\u124C\x03\x02\x02\x02\u1266\u124D\x03\x02\x02\x02\u1266\u124E\x03\x02" +
		"\x02\x02\u1266\u124F\x03\x02\x02\x02\u1266\u1250\x03\x02\x02\x02\u1266" +
		"\u1251\x03\x02\x02\x02\u1266\u1253\x03\x02\x02\x02\u1266\u1254\x03\x02" +
		"\x02\x02\u1266\u1255\x03\x02\x02\x02\u1266\u1257\x03\x02\x02\x02\u1266" +
		"\u1258\x03\x02\x02\x02\u1266\u1259\x03\x02\x02\x02\u1266\u125A\x03\x02" +
		"\x02\x02\u1266\u125B\x03\x02\x02\x02\u1266\u125D\x03\x02\x02\x02\u1266" +
		"\u125E\x03\x02\x02\x02\u1266\u1260\x03\x02\x02\x02\u1266\u1261\x03\x02" +
		"\x02\x02\u1266\u1262\x03\x02\x02\x02\u1266\u1263\x03\x02\x02\x02\u1266" +
		"\u1264\x03\x02\x02\x02\u1266\u1265\x03\x02\x02\x02\u1267\u01A1\x03\x02" +
		"\x02\x02\u1268\u1279\x07\u03BF\x02\x02\u1269\u126A\x07\u03BF\x02\x02\u126A" +
		"\u126B\x07\u03CF\x02\x02\u126B\u1279\x07\u03BF\x02\x02\u126C\u126D\x05" +
		"\u0206\u0104\x02\u126D\u126E\x07\u03CF\x02\x02\u126E\u126F\x07\u03BF\x02" +
		"\x02\u126F\u1279\x03\x02\x02\x02\u1270\u1271\x05\u0206\u0104\x02\u1271" +
		"\u1272\x07\u03CF\x02\x02\u1272\u1273\x05\u0206\u0104\x02\u1273\u1279\x03" +
		"\x02\x02\x02\u1274\u1275\x05\u0206\u0104\x02\u1275\u1276\x05\u020A\u0106" +
		"\x02\u1276\u1279\x03\x02\x02\x02\u1277\u1279\x05\u0206\u0104\x02\u1278" +
		"\u1268\x03\x02\x02\x02\u1278\u1269\x03\x02\x02\x02\u1278\u126C\x03\x02" +
		"\x02\x02\u1278\u1270\x03\x02\x02\x02\u1278\u1274\x03\x02\x02\x02\u1278" +
		"\u1277\x03\x02\x02\x02\u1279\u01A3\x03\x02\x02\x02\u127A\u127B\x05\u01F4" +
		"\xFB\x02\u127B\u127C\x07\x99\x02\x02\u127C\u127D\x05\u01F4\xFB\x02\u127D" +
		"\u01A5\x03\x02\x02\x02\u127E\u1280\x07\v\x02\x02\u127F\u1281\t@\x02\x02" +
		"\u1280\u127F\x03\x02\x02\x02\u1280\u1281\x03\x02\x02\x02\u1281\u1282\x03" +
		"\x02\x02\x02\u1282\u1283\x07\x96\x02\x02\u1283\u1284\x05\u0228\u0115\x02" +
		"\u1284\u01A7\x03\x02\x02\x02\u1285\u1286\x07\x19\x02\x02\u1286\u1287\x07" +
		"\x96\x02\x02\u1287\u128B\x05\u0228\u0115\x02\u1288\u128A\x05\u01B0\xD9" +
		"\x02\u1289\u1288\x03\x02\x02\x02\u128A\u128D\x03\x02\x02\x02\u128B\u1289" +
		"\x03\x02\x02\x02\u128B\u128C\x03\x02\x02\x02\u128C\u01A9\x03\x02\x02\x02" +
		"\u128D\u128B\x03\x02\x02\x02\u128E\u128F\x07\u0117\x02\x02\u128F\u1290" +
		"\x07\x96\x02\x02\u1290\u1292\x05\u0228\u0115\x02\u1291\u1293\tA\x02\x02" +
		"\u1292\u1291\x03\x02\x02\x02\u1292\u1293\x03\x02\x02\x02\u1293\u01AB\x03" +
		"\x02\x02\x02\u1294\u1296\x07i\x02\x02\u1295\u1297\t@\x02\x02\u1296\u1295" +
		"\x03\x02\x02\x02\u1296\u1297\x03\x02\x02\x02\u1297\u1298\x03\x02\x02\x02" +
		"\u1298\u1299\x07\x96\x02\x02\u1299\u129A\x05\u0228\u0115\x02\u129A\u01AD" +
		"\x03\x02\x02\x02\u129B\u129D\x07\u01DE\x02\x02\u129C\u129E\t@\x02\x02" +
		"\u129D\u129C\x03\x02\x02\x02\u129D\u129E\x03\x02\x02\x02\u129E\u129F\x03" +
		"\x02\x02\x02\u129F\u12A0\x07\x96\x02\x02\u12A0\u12A2\x05\u0228\u0115\x02" +
		"\u12A1\u12A3\x07\u01D3\x02\x02\u12A2\u12A1\x03\x02\x02\x02\u12A2\u12A3" +
		"\x03\x02\x02\x02\u12A3\u12A5\x03\x02\x02\x02\u12A4\u12A6\x07\u0153\x02" +
		"\x02\u12A5\u12A4\x03\x02\x02\x02\u12A5\u12A6\x03\x02\x02\x02\u12A6\u12A8" +
		"\x03\x02\x02\x02\u12A7\u12A9\x07\u022A\x02\x02\u12A8\u12A7\x03\x02\x02" +
		"\x02\u12A8\u12A9\x03\x02\x02\x02\u12A9\u01AF\x03\x02\x02\x02\u12AA\u12AB" +
		"\x07:\x02\x02\u12AB\u12B2\x07\u0228\x02\x02\u12AC\u12B2\x07\u01D3\x02" +
		"\x02\u12AD\u12B2\x07\u0155\x02\x02\u12AE\u12B2\x07\u01A0\x02\x02\u12AF" +
		"\u12B2\x07\u0153\x02\x02\u12B0\u12B2\x07\u0115\x02\x02\u12B1\u12AA\x03" +
		"\x02\x02\x02\u12B1\u12AC\x03\x02\x02\x02\u12B1\u12AD\x03\x02\x02\x02\u12B1" +
		"\u12AE\x03\x02\x02\x02\u12B1\u12AF\x03\x02\x02\x02\u12B1\u12B0\x03\x02" +
		"\x02\x02\u12B2\u01B1\x03\x02\x02\x02\u12B3\u12B5\x07 \x02\x02\u12B4\u12B6" +
		"\x07\u0102\x02\x02\u12B5\u12B4\x03\x02\x02\x02\u12B5\u12B6\x03\x02\x02" +
		"\x02\u12B6\u12B7\x03\x02\x02\x02\u12B7\u12B8\x07\u0160\x02\x02\u12B8\u12B9" +
		"\x05\u0206\u0104\x02\u12B9\u12BA\x07\u01E9\x02\x02\u12BA\u12BB\tB\x02" +
		"\x02\u12BB\u12BC\x07\u01FE\x02\x02\u12BC\u12BD\x07\u03DF\x02\x02\u12BD" +
		"\u01B3\x03\x02\x02\x02\u12BE\u12BF\x07\u0171\x02\x02\u12BF\u12C0\x07\u01C6" +
		"\x02\x02\u12C0\u12C1\x05\u0206\u0104\x02\u12C1\u12C2\x07\u01FE\x02\x02" +
		"\u12C2\u12C3\x07\u03DF\x02\x02\u12C3\u01B5\x03\x02\x02\x02\u12C4\u12C5" +
		"\x07\u0225\x02\x02\u12C5\u12C6\x07\u01C6\x02\x02\u12C6\u12C7\x05\u0206" +
		"\u0104\x02\u12C7\u01B7\x03\x02\x02\x02\u12C8\u12C9\x07\x87\x02\x02\u12C9" +
		"\u12CA\x05\u01BC\xDF\x02\u12CA\u12CB\tC\x02\x02\u12CB\u12D3\x05\u0254" +
		"\u012B\x02\u12CC\u12CD\x07\u03D2\x02\x02\u12CD\u12CE\x05\u01BC\xDF\x02" +
		"\u12CE\u12CF\tC\x02\x02\u12CF\u12D0\x05\u0254\u012B\x02\u12D0\u12D2\x03" +
		"\x02\x02\x02\u12D1\u12CC\x03\x02\x02\x02\u12D2\u12D5\x03\x02\x02\x02\u12D3" +
		"\u12D1\x03\x02\x02\x02\u12D3\u12D4\x03\x02\x02\x02\u12D4\u12F3\x03\x02" +
		"\x02\x02\u12D5\u12D3\x03\x02\x02\x02\u12D6\u12DA\x07\x87\x02\x02\u12D7" +
		"\u12D8\x07\x18\x02\x02\u12D8\u12DB\x07\x87\x02\x02\u12D9\u12DB\x07\u02AF" +
		"\x02\x02\u12DA\u12D7\x03\x02\x02\x02\u12DA\u12D9\x03\x02\x02\x02\u12DB" +
		"\u12DE\x03\x02\x02\x02\u12DC\u12DF\x05\u01F8\xFD\x02\u12DD\u12DF\x07\'" +
		"\x02\x02\u12DE\u12DC\x03\x02\x02\x02\u12DE\u12DD\x03\x02\x02\x02\u12DF" +
		"\u12F3\x03\x02\x02\x02\u12E0\u12E1\x07\x87\x02\x02\u12E1\u12E8\x07\u01AC" +
		"\x02\x02\u12E2\u12E5\x05\u01F8\xFD\x02\u12E3\u12E4\x07\x1A\x02\x02\u12E4" +
		"\u12E6\x05\u01FA\xFE\x02\u12E5\u12E3\x03\x02\x02\x02\u12E5\u12E6\x03\x02" +
		"\x02\x02\u12E6\u12E9\x03\x02\x02\x02\u12E7\u12E9\x07\'\x02\x02\u12E8\u12E2" +
		"\x03\x02\x02\x02\u12E8\u12E7\x03\x02\x02\x02\u12E9\u12F3\x03\x02\x02\x02" +
		"\u12EA\u12F3\x05\u0190\xC9\x02\u12EB\u12F3\x05\u0114\x8B\x02\u12EC\u12F3" +
		"\x05\u0112\x8A\x02\u12ED\u12EE\x07\x87\x02\x02\u12EE\u12EF\x05\u01EC\xF7" +
		"\x02\u12EF\u12F0\tC\x02\x02\u12F0\u12F1\x05\u0254\u012B\x02\u12F1\u12F3" +
		"\x03\x02\x02\x02\u12F2\u12C8\x03\x02\x02\x02\u12F2\u12D6\x03\x02\x02\x02" +
		"\u12F2\u12E0\x03\x02\x02\x02\u12F2\u12EA\x03\x02\x02\x02\u12F2\u12EB\x03" +
		"\x02\x02\x02\u12F2\u12EC\x03\x02\x02\x02\u12F2\u12ED\x03\x02\x02\x02\u12F3" +
		"\u01B9\x03\x02\x02\x02\u12F4\u12F5\x07\x89\x02\x02\u12F5\u12F6\t2\x02" +
		"\x02\u12F6\u138C\x07\u0184\x02\x02\u12F7\u12F8\x07\x89\x02\x02\u12F8\u12F9" +
		"\tD\x02\x02\u12F9\u12FC\x07\u014D\x02\x02\u12FA\u12FB\x07F\x02\x02\u12FB" +
		"\u12FD\x07\u03DF\x02\x02\u12FC\u12FA\x03\x02\x02\x02\u12FC\u12FD\x03\x02" +
		"\x02\x02\u12FD\u1300\x03\x02\x02\x02\u12FE\u12FF\x07=\x02\x02\u12FF\u1301" +
		"\x05\u020C\u0107\x02\u1300\u12FE\x03\x02\x02\x02\u1300\u1301\x03\x02\x02" +
		"\x02\u1301\u1309\x03\x02\x02\x02\u1302\u1306\x07X\x02\x02\u1303\u1304" +
		"\x05\u020C\u0107\x02\u1304\u1305\x07\u03D2\x02\x02\u1305\u1307\x03\x02" +
		"\x02\x02\u1306\u1303\x03\x02\x02\x02\u1306\u1307\x03\x02\x02\x02\u1307" +
		"\u1308\x03\x02\x02\x02\u1308\u130A\x05\u020C\u0107\x02\u1309\u1302\x03" +
		"\x02\x02\x02\u1309\u130A\x03\x02\x02\x02\u130A\u138C\x03\x02\x02\x02\u130B" +
		"\u130C\x07\x89\x02\x02\u130C\u130E\x05\u01BE\xE0\x02\u130D\u130F\x05\u01C0" +
		"\xE1\x02\u130E\u130D\x03\x02\x02\x02\u130E\u130F\x03\x02\x02\x02\u130F" +
		"\u138C\x03\x02\x02\x02\u1310\u1312\x07\x89\x02\x02\u1311\u1313\x07\u015F" +
		"\x02\x02\u1312\u1311\x03\x02\x02\x02\u1312\u1313\x03\x02\x02\x02\u1313" +
		"\u1314\x03\x02\x02\x02\u1314\u1315\t$\x02\x02\u1315\u1316\tE\x02\x02\u1316" +
		"\u1319\x05\u01EE\xF8\x02\u1317\u1318\tE\x02\x02\u1318\u131A\x05\u0206" +
		"\u0104\x02\u1319\u1317\x03\x02\x02\x02\u1319\u131A\x03\x02\x02\x02\u131A" +
		"\u131C\x03\x02\x02\x02\u131B\u131D\x05\u01C0\xE1\x02\u131C\u131B\x03\x02" +
		"\x02\x02\u131C\u131D\x03\x02\x02\x02\u131D\u138C\x03\x02\x02\x02\u131E" +
		"\u131F\x07\x89\x02\x02\u131F\u1320\x07 \x02\x02\u1320\u1322\t\x02\x02" +
		"\x02\u1321\u1323\x05\u023E\u0120\x02\u1322\u1321\x03\x02\x02\x02\u1322" +
		"\u1323\x03\x02\x02\x02\u1323\u1324\x03\x02\x02\x02\u1324\u138C\x05\u0206" +
		"\u0104\x02\u1325\u1326\x07\x89\x02\x02\u1326\u1327\x07 \x02\x02\u1327" +
		"\u1328\tF\x02\x02\u1328\u138C\x05\u01EC\xF7\x02\u1329\u132A\x07\x89\x02" +
		"\x02\u132A\u132B\x07 \x02\x02\u132B\u132C\x07\u0229\x02\x02\u132C\u138C" +
		"\x05\u01F4\xFB\x02\u132D\u132E\x07\x89\x02\x02\u132E\u132F\x07\u0146\x02" +
		"\x02\u132F\u1330\x05\u01FC\xFF\x02\u1330\u1331\tG\x02\x02\u1331\u138C" +
		"\x03\x02\x02\x02\u1332\u1333\x07\x89\x02\x02\u1333\u138C\x05\u01C2\xE2" +
		"\x02\u1334\u1335\x07\x89\x02\x02\u1335\u1336\tH\x02\x02\u1336\u133A\x07" +
		"X\x02\x02\u1337\u1338\x05\u020C\u0107\x02\u1338\u1339\x07\u03D2\x02\x02" +
		"\u1339\u133B\x03\x02\x02\x02\u133A\u1337\x03\x02\x02\x02\u133A\u133B\x03" +
		"\x02\x02\x02\u133B\u133C\x03\x02\x02\x02\u133C\u138C\x05\u020C\u0107\x02" +
		"\u133D\u133E\x07\x89\x02\x02\u133E\u133F\x07\xE0\x02\x02\u133F\u1340\x07" +
		"\u03D0\x02\x02\u1340\u1341\x07\u03BF\x02\x02\u1341\u1342\x07\u03D1\x02" +
		"\x02\u1342\u138C\tH\x02\x02\u1343\u1344\x07\x89\x02\x02\u1344\u1347\x05" +
		"\u01C4\xE3\x02\u1345\u1346\tE\x02\x02\u1346\u1348\x05\u0206\u0104\x02" +
		"\u1347\u1345\x03\x02\x02\x02\u1347\u1348\x03\x02\x02\x02\u1348\u134A\x03" +
		"\x02\x02\x02\u1349\u134B\x05\u01C0\xE1\x02\u134A\u1349\x03\x02\x02\x02" +
		"\u134A\u134B\x03\x02\x02\x02\u134B\u138C\x03\x02\x02\x02\u134C\u134D\x07" +
		"\x89\x02\x02\u134D\u134E\tI\x02\x02\u134E\u134F\x07\u011E\x02\x02\u134F" +
		"\u138C\x05\u01EC\xF7\x02\u1350\u1351\x07\x89\x02\x02\u1351\u1354\x07\u0163" +
		"\x02\x02\u1352\u1353\x07:\x02\x02\u1353\u1355\x05\u01F4\xFB\x02\u1354" +
		"\u1352\x03\x02\x02\x02\u1354\u1355\x03\x02\x02\x02\u1355\u138C\x03\x02" +
		"\x02\x02\u1356\u1357\x07\x89\x02\x02\u1357\u1358\tJ\x02\x02\u1358\u1359" +
		"\tE\x02\x02\u1359\u135C\x05\u01EE\xF8\x02\u135A\u135B\tE\x02\x02\u135B" +
		"\u135D\x05\u0206\u0104\x02\u135C\u135A\x03\x02\x02\x02\u135C\u135D\x03" +
		"\x02\x02\x02\u135D\u1360\x03\x02\x02\x02\u135E\u135F\x07\xA8\x02\x02\u135F" +
		"\u1361\x05\u0254\u012B\x02\u1360\u135E\x03\x02\x02\x02\u1360\u1361\x03" +
		"\x02\x02\x02\u1361\u138C\x03\x02\x02\x02\u1362\u1363\x07\x89\x02\x02\u1363" +
		"\u1364\x07\u01BA\x02\x02\u1364\u1367\x07\u0247\x02\x02\u1365\u1366\tE" +
		"\x02\x02\u1366\u1368\x05\u0206\u0104\x02\u1367\u1365\x03\x02\x02\x02\u1367" +
		"\u1368\x03\x02\x02\x02\u1368\u136A\x03\x02\x02\x02\u1369\u136B\x05\u01C0" +
		"\xE1\x02\u136A\u1369\x03\x02\x02\x02\u136A\u136B\x03\x02\x02\x02\u136B" +
		"\u138C\x03\x02\x02\x02\u136C\u136D\x07\x89\x02\x02\u136D\u136E\x07\u01CF" +
		"\x02\x02\u136E\u1373\x05\u01C6\xE4\x02\u136F\u1370\x07\u03D2\x02\x02\u1370" +
		"\u1372\x05\u01C6\xE4\x02\u1371\u136F\x03\x02\x02\x02\u1372\u1375\x03\x02" +
		"\x02\x02\u1373\u1371\x03\x02\x02\x02\u1373\u1374\x03\x02\x02\x02\u1374" +
		"\u1379\x03\x02\x02\x02\u1375\u1373\x03\x02\x02\x02\u1376\u1377\x07:\x02" +
		"\x02\u1377\u1378\x07\u01D2\x02\x02\u1378\u137A\x05\u020C\u0107\x02\u1379" +
		"\u1376\x03\x02\x02\x02\u1379\u137A\x03\x02\x02\x02\u137A\u137B\x03\x02" +
		"\x02\x02\u137B\u137F\x07X\x02\x02\u137C\u137D\x05\u020C\u0107\x02\u137D" +
		"\u137E\x07\u03D2\x02\x02\u137E\u1380\x03\x02\x02\x02\u137F\u137C\x03\x02" +
		"\x02\x02\u137F\u1380\x03\x02\x02\x02\u1380\u1381\x03\x02\x02\x02\u1381" +
		"\u1382\x05\u020C\u0107\x02\u1382\u138C\x03\x02\x02\x02\u1383\u1384\x07" +
		"\x89\x02\x02\u1384\u1385\x07\u01F9\x02\x02\u1385\u1389\x07\u020D\x02\x02" +
		"\u1386\u1387\x07:\x02\x02\u1387\u1388\x07\u0116\x02\x02\u1388\u138A\x07" +
		"\u03DF\x02\x02\u1389\u1386\x03\x02\x02\x02\u1389\u138A\x03\x02\x02\x02" +
		"\u138A\u138C\x03\x02\x02\x02\u138B\u12F4\x03\x02\x02\x02\u138B\u12F7\x03" +
		"\x02\x02\x02\u138B\u130B\x03\x02\x02\x02\u138B\u1310\x03\x02\x02\x02\u138B" +
		"\u131E\x03\x02\x02\x02\u138B\u1325\x03\x02\x02\x02\u138B\u1329\x03\x02" +
		"\x02\x02\u138B\u132D\x03\x02\x02\x02\u138B\u1332\x03\x02\x02\x02\u138B" +
		"\u1334\x03\x02\x02\x02\u138B\u133D\x03\x02\x02\x02\u138B\u1343\x03\x02" +
		"\x02\x02\u138B\u134C\x03\x02\x02\x02\u138B\u1350\x03\x02\x02\x02\u138B" +
		"\u1356\x03\x02\x02\x02\u138B\u1362\x03\x02\x02\x02\u138B\u136C\x03\x02" +
		"\x02\x02\u138B\u1383\x03\x02\x02\x02\u138C\u01BB\x03\x02\x02\x02\u138D" +
		"\u1398\x07\u03EA\x02\x02\u138E\u1398\x07\u03EB\x02\x02\u138F\u1390\x07" +
		"\u03D4\x02\x02\u1390\u1392\x07\u03D4\x02\x02\u1391\u138F\x03\x02\x02\x02" +
		"\u1391\u1392\x03\x02\x02\x02\u1392\u1393\x03\x02\x02\x02\u1393\u1395\t" +
		"K\x02\x02\u1394\u1391\x03\x02\x02\x02\u1394\u1395\x03\x02\x02\x02\u1395" +
		"\u1396\x03\x02\x02\x02\u1396\u1398\x05\u0206\u0104\x02\u1397\u138D\x03" +
		"\x02\x02\x02\u1397\u138E\x03\x02\x02\x02\u1397\u1394\x03\x02\x02\x02\u1398" +
		"\u01BD\x03\x02\x02\x02\u1399\u139A\x07\x18\x02\x02\u139A\u13A7\x07\x87" +
		"\x02\x02\u139B\u13A7\x07\u02B2\x02\x02\u139C\u13A7\x07%\x02\x02\u139D" +
		"\u13A7\x07\x85\x02\x02\u139E\u139F\x07\u0160\x02\x02\u139F\u13A7\x07\u020D" +
		"\x02\x02\u13A0\u13A1\x07s\x02\x02\u13A1\u13A7\x07\u020D\x02\x02\u13A2" +
		"\u13A4\t1\x02\x02\u13A3\u13A2\x03\x02\x02\x02\u13A3\u13A4\x03\x02\x02" +
		"\x02\u13A4\u13A5\x03\x02\x02\x02\u13A5\u13A7\tL\x02\x02\u13A6\u1399\x03" +
		"\x02\x02\x02\u13A6\u139B\x03\x02\x02\x02\u13A6\u139C\x03\x02\x02\x02\u13A6" +
		"\u139D\x03\x02\x02\x02\u13A6\u139E\x03\x02\x02\x02\u13A6\u13A0\x03\x02" +
		"\x02\x02\u13A6\u13A3\x03\x02\x02\x02\u13A7\u01BF\x03\x02\x02\x02\u13A8" +
		"\u13A9\x07W\x02\x02\u13A9\u13AD\x07\u03DF\x02\x02\u13AA\u13AB\x07\xA8" +
		"\x02\x02\u13AB\u13AD\x05\u0254\u012B\x02\u13AC\u13A8\x03\x02\x02\x02\u13AC" +
		"\u13AA\x03\x02\x02\x02\u13AD\u01C1\x03\x02\x02\x02\u13AE\u13B0\x07\u020F" +
		"\x02\x02\u13AF\u13AE\x03\x02\x02\x02\u13AF\u13B0\x03\x02\x02\x02\u13B0" +
		"\u13B1\x03\x02\x02\x02\u13B1\u13C0\x07\u0147\x02\x02\u13B2\u13B3\x07\u0185" +
		"\x02\x02\u13B3\u13C0\x07\u020D\x02\x02\u13B4\u13C0\x07\u01C8\x02\x02\u13B5" +
		"\u13C0\x07\u024F\x02\x02\u13B6\u13B8\x07\u015F\x02\x02\u13B7\u13B6\x03" +
		"\x02\x02\x02\u13B7\u13B8\x03\x02\x02\x02\u13B8\u13B9\x03\x02\x02\x02\u13B9" +
		"\u13C0\x07\u01CE\x02\x02\u13BA\u13C0\x07\u01D0\x02\x02\u13BB\u13BC\x07" +
		"\u01F9\x02\x02\u13BC\u13C0\x07\u0169\x02\x02\u13BD\u13C0\x07\u0106\x02" +
		"\x02\u13BE\u13C0\x07\u0130\x02\x02\u13BF\u13AF\x03\x02\x02\x02\u13BF\u13B2" +
		"\x03\x02\x02\x02\u13BF\u13B4\x03\x02\x02\x02\u13BF\u13B5\x03\x02\x02\x02" +
		"\u13BF\u13B7\x03\x02\x02\x02\u13BF\u13BA\x03\x02\x02\x02\u13BF\u13BB\x03" +
		"\x02\x02\x02\u13BF\u13BD\x03\x02\x02\x02\u13BF\u13BE\x03\x02\x02\x02\u13C0" +
		"\u01C3\x03\x02\x02\x02\u13C1\u13CA\x07\u014D\x02\x02\u13C2\u13C3\x07\x96" +
		"\x02\x02\u13C3\u13CA\x07\u020D\x02\x02\u13C4\u13C6\x07\u015F\x02\x02\u13C5" +
		"\u13C4\x03\x02\x02\x02\u13C5\u13C6\x03\x02\x02\x02\u13C6\u13C7\x03\x02" +
		"\x02\x02\u13C7\u13CA\x07\u0247\x02\x02\u13C8\u13CA\x07\u0220\x02\x02";
	private static readonly _serializedATNSegment10: string =
		"\u13C9\u13C1\x03\x02\x02\x02\u13C9\u13C2\x03\x02\x02\x02\u13C9\u13C5\x03" +
		"\x02\x02\x02\u13C9\u13C8\x03\x02\x02\x02\u13CA\u01C5\x03\x02\x02\x02\u13CB" +
		"\u13D8\x07\b\x02\x02\u13CC\u13CD\x07\u010E\x02\x02\u13CD\u13D8\x07\u0175" +
		"\x02\x02\u13CE\u13CF\x07\u012F\x02\x02\u13CF\u13D8\x07\u0218\x02\x02\u13D0" +
		"\u13D8\x07\u0132\x02\x02\u13D1\u13D8\x07\u0177\x02\x02\u13D2\u13D8\x07" +
		"\u027E\x02\x02\u13D3\u13D4\x07\u01BF\x02\x02\u13D4\u13D8\x07\u0156\x02" +
		"\x02\u13D5\u13D8\x07\u0200\x02\x02\u13D6\u13D8\x07\u0217\x02\x02\u13D7" +
		"\u13CB\x03\x02\x02\x02\u13D7\u13CC\x03\x02\x02\x02\u13D7\u13CE\x03\x02" +
		"\x02\x02\u13D7\u13D0\x03\x02\x02\x02\u13D7\u13D1\x03\x02\x02\x02\u13D7" +
		"\u13D2\x03\x02\x02\x02\u13D7\u13D3\x03\x02\x02\x02\u13D7\u13D5\x03\x02" +
		"\x02\x02\u13D7\u13D6\x03\x02\x02\x02\u13D8\u01C7\x03\x02\x02\x02\u13D9" +
		"\u13DA\x07\u010C\x02\x02\u13DA\u13DB\x07\u03DF\x02\x02\u13DB\u01C9\x03" +
		"\x02\x02\x02\u13DC\u13DD\x07\u0112\x02\x02\u13DD\u13DE\x07G\x02\x02\u13DE" +
		"\u13E3\x05\u01D6\xEC\x02\u13DF\u13E0\x07\u03D2\x02\x02\u13E0\u13E2\x05" +
		"\u01D6\xEC\x02\u13E1\u13DF\x03\x02\x02\x02\u13E2\u13E5\x03\x02\x02\x02" +
		"\u13E3\u13E1\x03\x02\x02\x02\u13E3\u13E4\x03\x02\x02\x02\u13E4\u13ED\x03" +
		"\x02\x02\x02\u13E5\u13E3\x03\x02\x02\x02\u13E6\u13E7\x07q\x02\x02\u13E7" +
		"\u13EA\x07\u03D0\x02\x02\u13E8\u13EB\x05\u0226\u0114\x02\u13E9\u13EB\x07" +
		"\b\x02\x02\u13EA\u13E8\x03\x02\x02\x02\u13EA\u13E9\x03\x02\x02\x02\u13EB" +
		"\u13EC\x03\x02\x02\x02\u13EC\u13EE\x07\u03D1\x02\x02\u13ED\u13E6\x03\x02" +
		"\x02\x02\u13ED\u13EE\x03\x02\x02\x02\u13EE\u13EF\x03\x02\x02\x02\u13EF" +
		"\u13F0\x07F\x02\x02\u13F0\u13F1\x05\u0206\u0104\x02\u13F1\u01CB\x03\x02" +
		"\x02\x02\u13F2\u13F4\x07\u015C\x02\x02\u13F3\u13F5\t@\x02\x02\u13F4\u13F3" +
		"\x03\x02\x02\x02\u13F4\u13F5\x03\x02\x02\x02\u13F5\u13F6\x03\x02\x02\x02" +
		"\u13F6\u13FB\x05\u01D8\xED\x02\u13F7\u13F8\x07\u03D2\x02\x02\u13F8\u13FA" +
		"\x05\u01D8\xED\x02\u13F9\u13F7\x03\x02\x02\x02\u13FA\u13FD\x03\x02\x02" +
		"\x02\u13FB\u13F9\x03\x02\x02\x02\u13FB\u13FC\x03\x02\x02\x02\u13FC\u01CD" +
		"\x03\x02\x02\x02\u13FD\u13FB\x03\x02\x02\x02\u13FE\u1400\x07S\x02\x02" +
		"\u13FF\u1401\tM\x02\x02\u1400\u13FF\x03\x02\x02\x02\u1400\u1401\x03\x02" +
		"\x02\x02\u1401\u1403\x03\x02\x02\x02\u1402\u1404\x05\u020C\u0107\x02\u1403" +
		"\u1402\x03\x02\x02\x02\u1404\u1405\x03\x02\x02\x02\u1405\u1403\x03\x02" +
		"\x02\x02\u1405\u1406\x03\x02\x02\x02\u1406\u01CF\x03\x02\x02\x02\u1407" +
		"\u1408\x07[\x02\x02\u1408\u1409\x07G\x02\x02\u1409\u140A\x07M\x02\x02" +
		"\u140A\u140B\x07\u0112\x02\x02\u140B\u1410\x05\u01DC\xEF\x02\u140C\u140D" +
		"\x07\u03D2\x02\x02\u140D\u140F\x05\u01DC\xEF\x02\u140E\u140C\x03\x02\x02" +
		"\x02\u140F\u1412\x03\x02\x02\x02\u1410\u140E\x03\x02\x02\x02\u1410\u1411" +
		"\x03\x02\x02\x02\u1411\u01D1\x03\x02\x02\x02\u1412\u1410\x03\x02\x02\x02" +
		"\u1413\u1414\x07\u01E7\x02\x02\u1414\u1415\x07\u01D2\x02\x02\u1415\u1416" +
		"\x07\u0112\x02\x02\u1416\u01D3\x03\x02\x02\x02\u1417\u1418\x07\u024D\x02" +
		"\x02\u1418\u01D5\x03\x02\x02\x02\u1419\u1421\x05\u01EE\xF8\x02\u141A\u141C" +
		"\t\x14\x02\x02\u141B\u141A\x03\x02\x02\x02\u141B\u141C\x03\x02\x02\x02" +
		"\u141C\u141D\x03\x02\x02\x02\u141D\u141E\x07\u03D0\x02\x02\u141E\u141F" +
		"\x05\u0226\u0114\x02\u141F\u1420\x07\u03D1\x02\x02\u1420\u1422\x03\x02" +
		"\x02\x02\u1421\u141B\x03\x02\x02\x02\u1421\u1422\x03\x02\x02\x02\u1422" +
		"\u01D7\x03\x02\x02\x02\u1423\u1436\x07\u0139\x02\x02\u1424\u1436\x07\u0169" +
		"\x02\x02\u1425\u1427\tN\x02\x02\u1426\u1425\x03\x02\x02\x02\u1426\u1427" +
		"\x03\x02\x02\x02\u1427\u1428\x03\x02\x02\x02\u1428\u1436\x07\u0184\x02" +
		"\x02\u1429\u1436\x07\u01BB\x02\x02\u142A\u1436\x07\u024F\x02\x02\u142B" +
		"\u142C\x07\u01D2\x02\x02\u142C\u1436\x07\u0112\x02\x02\u142D\u1436\x07" +
		"\u020D\x02\x02\u142E\u1436\x07\u022B\x02\x02\u142F\u1433\x07\u0247\x02" +
		"\x02\u1430\u1431\x07\xAA\x02\x02\u1431\u1432\x07v\x02\x02\u1432\u1434" +
		"\x07\\\x02\x02\u1433\u1430\x03\x02\x02\x02\u1433\u1434\x03\x02\x02\x02" +
		"\u1434\u1436\x03\x02\x02\x02\u1435\u1423\x03\x02\x02\x02\u1435\u1424\x03" +
		"\x02\x02\x02\u1435\u1426\x03\x02\x02\x02\u1435\u1429\x03\x02\x02\x02\u1435" +
		"\u142A\x03\x02\x02\x02\u1435\u142B\x03\x02\x02\x02\u1435\u142D\x03\x02" +
		"\x02\x02\u1435\u142E\x03\x02\x02\x02\u1435\u142F\x03\x02\x02\x02\u1436" +
		"\u1442\x03\x02\x02\x02\u1437\u1438\x07\u01D8\x02\x02\u1438\u143A\x07\u0184" +
		"\x02\x02\u1439\u143B\x05\u013A\x9E\x02\u143A\u1439\x03\x02\x02\x02\u143A" +
		"\u143B\x03\x02\x02\x02\u143B\u1442\x03\x02\x02\x02\u143C\u143D\x07\u0247" +
		"\x02\x02\u143D\u143F\x05\u0228\u0115\x02\u143E\u1440\x05\u01DA\xEE\x02" +
		"\u143F\u143E\x03\x02\x02\x02\u143F\u1440\x03\x02\x02\x02\u1440\u1442\x03" +
		"\x02\x02\x02\u1441\u1435\x03\x02\x02\x02\u1441\u1437\x03\x02\x02\x02\u1441" +
		"\u143C\x03\x02\x02\x02\u1442\u01D9\x03\x02\x02\x02\u1443\u1444\x07\xAA" +
		"\x02\x02\u1444\u1445\x07v\x02\x02\u1445\u1449\x07\\\x02\x02\u1446\u1447" +
		"\x07:\x02\x02\u1447\u1449\x07\u0152\x02\x02\u1448\u1443\x03\x02\x02\x02" +
		"\u1448\u1446\x03\x02\x02\x02\u1449\u01DB\x03\x02\x02\x02\u144A\u1452\x05" +
		"\u01EE\xF8\x02\u144B\u144C\x07q\x02\x02\u144C\u144F\x07\u03D0\x02\x02" +
		"\u144D\u1450\x05\u0226\u0114\x02\u144E\u1450\x07\b\x02\x02\u144F\u144D" +
		"\x03\x02\x02\x02\u144F\u144E\x03\x02\x02\x02\u1450\u1451\x03\x02\x02\x02" +
		"\u1451\u1453\x07\u03D1\x02\x02\u1452\u144B\x03\x02\x02\x02\u1452\u1453" +
		"\x03\x02\x02\x02\u1453\u145B\x03\x02\x02\x02\u1454\u1456\t\x14\x02\x02" +
		"\u1455\u1454\x03\x02\x02\x02\u1455\u1456\x03\x02\x02\x02\u1456\u1457\x03" +
		"\x02\x02\x02\u1457\u1458\x07\u03D0\x02\x02\u1458\u1459\x05\u0226\u0114" +
		"\x02\u1459\u145A\x07\u03D1\x02\x02\u145A\u145C\x03\x02\x02\x02\u145B\u1455" +
		"\x03\x02\x02\x02\u145B\u145C\x03\x02\x02\x02\u145C\u145F\x03\x02\x02\x02" +
		"\u145D\u145E\x07E\x02\x02\u145E\u1460\x07\u017E\x02\x02\u145F\u145D\x03" +
		"\x02\x02\x02\u145F\u1460\x03\x02\x02\x02\u1460\u01DD\x03\x02\x02\x02\u1461" +
		"\u1462\tO\x02\x02\u1462\u1465\x05\u01EE\xF8\x02\u1463\u1466\x05\u0206" +
		"\u0104\x02\u1464\u1466\x07\u03DF\x02\x02\u1465\u1463\x03\x02\x02\x02\u1465" +
		"\u1464\x03\x02\x02\x02\u1465\u1466\x03\x02\x02\x02\u1466\u01DF\x03\x02" +
		"\x02\x02\u1467\u146B\tO\x02\x02\u1468\u1469\tP\x02\x02\u1469\u146A\x07" +
		"\u03C7\x02\x02\u146A\u146C\tQ\x02\x02\u146B\u1468\x03\x02\x02\x02\u146B" +
		"\u146C\x03\x02\x02\x02\u146C\u146D\x03\x02\x02\x02\u146D\u146E\x05\u01EA" +
		"\xF6\x02\u146E\u01E1\x03\x02\x02\x02\u146F\u1470\x07\u0167\x02\x02\u1470" +
		"\u1471\x07\u03DF\x02\x02\u1471\u01E3\x03\x02\x02\x02\u1472\u1473\x07\xA4" +
		"\x02\x02\u1473\u1474\x05\u0206\u0104\x02\u1474\u01E5\x03\x02\x02\x02\u1475" +
		"\u147D\x07\x8A\x02\x02\u1476\u1478\x07\x8E\x02\x02\u1477\u1479\x07\u022D" +
		"\x02\x02\u1478\u1477\x03\x02\x02\x02\u1478\u1479\x03\x02\x02\x02\u1479" +
		"\u147A\x03\x02\x02\x02\u147A\u147E\x05\u0210\u0109\x02\u147B\u147E\x07" +
		"\u03E7\x02\x02\u147C\u147E\x07\u03E8\x02\x02\u147D\u1476\x03\x02\x02\x02" +
		"\u147D\u147B\x03\x02\x02\x02\u147D\u147C\x03\x02\x02\x02\u147E\u1488\x03" +
		"\x02\x02\x02\u147F\u1480\x07\x87\x02\x02\u1480\u1485\x05\u01E8\xF5\x02" +
		"\u1481\u1482\x07\u03D2\x02\x02\u1482\u1484\x05\u01E8\xF5\x02\u1483\u1481" +
		"\x03\x02\x02\x02\u1484\u1487\x03\x02\x02\x02\u1485\u1483\x03\x02\x02\x02" +
		"\u1485\u1486\x03\x02\x02\x02\u1486\u1489\x03\x02\x02\x02\u1487\u1485\x03" +
		"\x02\x02\x02\u1488\u147F\x03\x02\x02\x02\u1488\u1489\x03\x02\x02\x02\u1489" +
		"\u01E7\x03\x02\x02\x02\u148A\u148B\tR\x02\x02\u148B\u148E\x07\u03C7\x02" +
		"\x02\u148C\u148F\x05\u0210\u0109\x02\u148D\u148F\x07\u03E0\x02\x02\u148E" +
		"\u148C\x03\x02\x02\x02\u148E\u148D\x03\x02\x02\x02\u148F\u01E9\x03\x02" +
		"\x02\x02\u1490\u1496\x05\xB4[\x02\u1491\u1496\x05\xA6T\x02\u1492\u1496" +
		"\x05\xACW\x02\u1493\u1496\x05\xB2Z\x02\u1494\u1496\x05\xB6\\\x02\u1495" +
		"\u1490\x03\x02\x02\x02\u1495\u1491\x03\x02\x02\x02\u1495\u1492\x03\x02" +
		"\x02\x02\u1495\u1493\x03\x02\x02\x02\u1495\u1494\x03\x02\x02\x02\u1496" +
		"\u149B\x03\x02\x02\x02\u1497\u1498\x07:\x02\x02\u1498\u1499\x07\u0129" +
		"\x02\x02\u1499\u149B\x05\u0206\u0104\x02\u149A\u1495\x03\x02\x02\x02\u149A" +
		"\u1497\x03\x02\x02\x02\u149B\u01EB\x03\x02\x02\x02\u149C\u14A0\x05\u0206" +
		"\u0104\x02\u149D\u14A1\x07\u03E6\x02\x02\u149E\u149F\x07\u03CF\x02\x02" +
		"\u149F\u14A1\x05\u0206\u0104\x02\u14A0\u149D\x03\x02\x02\x02\u14A0\u149E" +
		"\x03\x02\x02\x02\u14A0\u14A1\x03\x02\x02\x02\u14A1\u01ED\x03\x02\x02\x02" +
		"\u14A2\u14A3\x05\u01EC\xF7\x02\u14A3\u01EF\x03\x02\x02\x02\u14A4\u14A9" +
		"\x05\u0206\u0104\x02\u14A5\u14A7\x05\u020A\u0106\x02\u14A6\u14A8\x05\u020A" +
		"\u0106\x02\u14A7\u14A6\x03\x02\x02\x02\u14A7\u14A8\x03\x02\x02\x02\u14A8" +
		"\u14AA\x03\x02\x02\x02\u14A9\u14A5\x03\x02\x02\x02\u14A9\u14AA\x03\x02" +
		"\x02\x02\u14AA\u01F1\x03\x02\x02\x02\u14AB\u14AE\x05\u0206\u0104\x02\u14AC" +
		"\u14AE\x07\u03DF\x02\x02\u14AD\u14AB\x03\x02\x02\x02\u14AD\u14AC\x03\x02" +
		"\x02\x02\u14AE\u14B3\x03\x02\x02\x02\u14AF\u14B0\x07\u03D0\x02\x02\u14B0" +
		"\u14B1\x05\u020C\u0107\x02\u14B1\u14B2\x07\u03D1\x02\x02\u14B2\u14B4\x03" +
		"\x02\x02\x02\u14B3\u14AF\x03\x02\x02\x02\u14B3\u14B4\x03\x02\x02\x02\u14B4" +
		"\u14B6\x03\x02\x02\x02\u14B5\u14B7\t+\x02\x02\u14B6\u14B5\x03\x02\x02" +
		"\x02\u14B6\u14B7\x03\x02\x02\x02\u14B7\u01F3\x03\x02\x02\x02\u14B8\u14B9" +
		"\tS\x02\x02\u14B9\u01F5\x03\x02\x02\x02\u14BA\u14BB\tT\x02\x02\u14BB\u01F7" +
		"\x03\x02\x02\x02\u14BC\u14C1\x07\xC4\x02\x02\u14BD\u14C1\x05\u0264\u0133" +
		"\x02\u14BE\u14C1\x07\u03DF\x02\x02\u14BF\u14C1\x07\u03DC\x02\x02\u14C0" +
		"\u14BC\x03\x02\x02\x02\u14C0\u14BD\x03\x02\x02\x02\u14C0\u14BE\x03\x02" +
		"\x02\x02\u14C0\u14BF\x03\x02\x02\x02\u14C1\u01F9\x03\x02\x02\x02\u14C2" +
		"\u14C5\x05\u0206\u0104\x02\u14C3\u14C5\x07\u03DF\x02\x02\u14C4\u14C2\x03" +
		"\x02\x02\x02\u14C4\u14C3\x03\x02\x02\x02\u14C5\u01FB\x03\x02\x02\x02\u14C6" +
		"\u14C7\tU\x02\x02\u14C7\u01FD\x03\x02\x02\x02\u14C8\u14C9\x05\u020C\u0107" +
		"\x02\u14C9\u14CA\x07\u03C4\x02\x02\u14CA\u14CB\x05\u020C\u0107\x02\u14CB" +
		"\u14CC\x07\u03C4\x02\x02\u14CC\u14CD\x05\u020C\u0107\x02\u14CD\u14CE\x07" +
		"\u03C4\x02\x02\u14CE\u14CF\x05\u020C\u0107\x02\u14CF\u14D0\x07\u03C4\x02" +
		"\x02\u14D0\u14D6\x05\u020C\u0107\x02\u14D1\u14D2\x07\u03DB\x02\x02\u14D2" +
		"\u14D3\x05\u020C\u0107\x02\u14D3\u14D4\x07\u03C4\x02\x02\u14D4\u14D5\x05" +
		"\u020C\u0107\x02\u14D5\u14D7\x03\x02\x02\x02\u14D6\u14D1\x03\x02\x02\x02" +
		"\u14D7\u14D8\x03\x02\x02\x02\u14D8\u14D6\x03\x02\x02\x02\u14D8\u14D9\x03" +
		"\x02\x02\x02\u14D9\u01FF\x03\x02\x02\x02\u14DA\u14E1\x05\u0202\u0102\x02" +
		"\u14DB\u14DC\x07\u03D2\x02\x02\u14DC\u14DF\x05\u0202\u0102\x02\u14DD\u14DE" +
		"\x07\u03D2\x02\x02\u14DE\u14E0\x05\u020C\u0107\x02\u14DF\u14DD\x03\x02" +
		"\x02\x02\u14DF\u14E0\x03\x02\x02\x02\u14E0\u14E2\x03\x02\x02\x02\u14E1" +
		"\u14DB\x03\x02\x02\x02\u14E1\u14E2\x03\x02\x02\x02\u14E2\u0201\x03\x02" +
		"\x02\x02\u14E3\u14EB\x07\u03DF\x02\x02\u14E4\u14EB\x07\u03E4\x02\x02\u14E5" +
		"\u14E7\x07\u03E1\x02\x02\u14E6\u14E5\x03\x02\x02\x02\u14E7\u14E8\x03\x02" +
		"\x02\x02\u14E8\u14E6\x03\x02\x02\x02\u14E8\u14E9\x03\x02\x02\x02\u14E9" +
		"\u14EB\x03\x02\x02\x02\u14EA\u14E3\x03\x02\x02\x02\u14EA\u14E4\x03\x02" +
		"\x02\x02\u14EA\u14E6\x03\x02\x02\x02\u14EB\u0203\x03\x02\x02\x02\u14EC" +
		"\u14EF\x05\u0206\u0104\x02\u14ED\u14EF\x07\u03DF\x02\x02\u14EE\u14EC\x03" +
		"\x02\x02\x02\u14EE\u14ED\x03\x02\x02\x02\u14EF\u0205\x03\x02\x02\x02\u14F0" +
		"\u14F4\x05\u0208\u0105\x02\u14F1\u14F4\x07\u03E8\x02\x02\u14F2\u14F4\x07" +
		"\u03DC\x02\x02\u14F3\u14F0\x03\x02\x02\x02\u14F3\u14F1\x03\x02\x02\x02" +
		"\u14F3\u14F2\x03\x02\x02\x02\u14F4\u0207\x03\x02\x02\x02\u14F5\u14FF\x07" +
		"\u03E7\x02\x02\u14F6\u14FF\x05\u0264\u0133\x02\u14F7\u14FF\x05\u0266\u0134" +
		"\x02\u14F8\u14FF\x05\u01FC\xFF\x02\u14F9\u14FF\x05\u0268\u0135\x02\u14FA" +
		"\u14FF\x05\u026A\u0136\x02\u14FB\u14FF\x05\u026C\u0137\x02\u14FC\u14FF" +
		"\x05\u026E\u0138\x02\u14FD\u14FF\x05\u0270\u0139\x02\u14FE\u14F5\x03\x02" +
		"\x02\x02\u14FE\u14F6\x03\x02\x02\x02\u14FE\u14F7\x03\x02\x02\x02\u14FE" +
		"\u14F8\x03\x02\x02\x02\u14FE\u14F9\x03\x02\x02\x02\u14FE\u14FA\x03\x02" +
		"\x02\x02\u14FE\u14FB\x03\x02\x02\x02\u14FE\u14FC\x03\x02\x02\x02\u14FE" +
		"\u14FD\x03\x02\x02\x02\u14FF\u0209\x03\x02\x02\x02\u1500\u1504\x07\u03E6" +
		"\x02\x02\u1501\u1502\x07\u03CF\x02\x02\u1502\u1504\x05\u0206\u0104\x02" +
		"\u1503\u1500\x03\x02\x02\x02\u1503\u1501\x03\x02\x02\x02\u1504\u020B\x03" +
		"\x02\x02\x02\u1505\u1506\tV\x02\x02\u1506\u020D\x03\x02\x02\x02\u1507" +
		"\u150A\x07\u03DD\x02\x02\u1508\u150A\x05\u020C\u0107\x02\u1509\u1507\x03" +
		"\x02\x02\x02\u1509\u1508\x03\x02\x02\x02\u150A\u020F\x03\x02\x02\x02\u150B" +
		"\u150D\x07\u03E5\x02\x02\u150C\u150B\x03\x02\x02\x02\u150C\u150D\x03\x02" +
		"\x02\x02\u150D\u150E\x03\x02\x02\x02\u150E\u1511\x07\u03DF\x02\x02\u150F" +
		"\u1511\x07\u03DE\x02\x02\u1510\u150C\x03\x02\x02\x02\u1510\u150F\x03\x02" +
		"\x02\x02\u1511\u1513\x03\x02\x02\x02\u1512\u1514\x07\u03DF\x02\x02\u1513" +
		"\u1512\x03\x02\x02\x02\u1514\u1515\x03\x02\x02\x02\u1515\u1513\x03\x02" +
		"\x02\x02\u1515\u1516\x03\x02\x02\x02\u1516\u1523\x03\x02\x02\x02\u1517" +
		"\u1519\x07\u03E5\x02\x02\u1518\u1517\x03\x02\x02\x02\u1518\u1519\x03\x02" +
		"\x02\x02\u1519\u151A\x03\x02\x02\x02\u151A\u151D\x07\u03DF\x02\x02\u151B" +
		"\u151D\x07\u03DE\x02\x02\u151C\u1518\x03\x02\x02\x02\u151C\u151B\x03\x02" +
		"\x02\x02\u151D\u1520\x03\x02\x02\x02\u151E\u151F\x07\x1A\x02\x02\u151F" +
		"\u1521\x05\u01FA\xFE\x02\u1520\u151E\x03\x02\x02\x02\u1520\u1521\x03\x02" +
		"\x02\x02\u1521\u1523\x03\x02\x02\x02\u1522\u1510\x03\x02\x02\x02\u1522" +
		"\u151C\x03\x02\x02\x02\u1523\u0211\x03\x02\x02\x02\u1524\u1525\tW\x02" +
		"\x02\u1525\u0213\x03\x02\x02\x02\u1526\u1528\x07\u03E5\x02\x02\u1527\u1526" +
		"\x03\x02\x02\x02\u1527\u1528\x03\x02\x02\x02\u1528\u1529\x03\x02\x02\x02" +
		"\u1529\u152A\x07\u03E1\x02\x02\u152A\u0215\x03\x02\x02\x02\u152B\u152D" +
		"\x07e\x02\x02\u152C\u152B\x03\x02\x02\x02\u152C\u152D\x03\x02\x02\x02" +
		"\u152D\u152E\x03\x02\x02\x02\u152E\u152F\tX\x02\x02\u152F\u0217\x03\x02" +
		"\x02\x02\u1530\u153D\x05\u0210\u0109\x02\u1531\u153D\x05\u020C\u0107\x02" +
		"\u1532\u1533\x07\u03C4\x02\x02\u1533\u153D\x05\u020C\u0107\x02\u1534\u153D" +
		"\x05\u0214\u010B\x02\u1535\u153D\x05\u0212\u010A\x02\u1536\u153D\x07\u03E2" +
		"\x02\x02\u1537\u153D\x07\u03E4\x02\x02\u1538\u153A\x07e\x02\x02\u1539" +
		"\u1538\x03\x02\x02\x02\u1539\u153A\x03\x02\x02\x02\u153A\u153B\x03\x02" +
		"\x02\x02\u153B\u153D\tX\x02\x02\u153C\u1530\x03\x02\x02\x02\u153C\u1531" +
		"\x03\x02\x02\x02\u153C\u1532\x03\x02\x02\x02\u153C\u1534\x03\x02\x02\x02" +
		"\u153C\u1535\x03\x02\x02\x02\u153C\u1536\x03\x02\x02\x02\u153C\u1537\x03" +
		"\x02\x02\x02\u153C\u1539\x03\x02\x02\x02\u153D\u0219\x03\x02\x02\x02\u153E" +
		"\u1540\tY\x02\x02\u153F\u1541\x05\u0220\u0111\x02\u1540\u153F\x03\x02" +
		"\x02\x02\u1540\u1541\x03\x02\x02\x02\u1541\u1543\x03\x02\x02\x02\u1542" +
		"\u1544\x07\xC4\x02\x02\u1543\u1542\x03\x02\x02\x02\u1543\u1544\x03\x02" +
		"\x02\x02\u1544\u154B\x03\x02\x02\x02\u1545\u1546\x07\x18\x02\x02\u1546" +
		"\u1549\x07\x87\x02\x02\u1547\u1549\x07\u02AF\x02\x02\u1548\u1545\x03\x02" +
		"\x02\x02\u1548\u1547\x03\x02\x02\x02\u1549\u154A\x03\x02\x02\x02\u154A" +
		"\u154C\x05\u01F8\xFD\x02\u154B\u1548\x03\x02\x02\x02\u154B\u154C\x03\x02" +
		"\x02\x02\u154C\u154F\x03\x02\x02\x02\u154D\u154E\x07\x1A\x02\x02\u154E" +
		"\u1550\x05\u01FA\xFE\x02\u154F\u154D\x03\x02\x02\x02\u154F\u1550\x03\x02" +
		"\x02\x02\u1550\u15A9\x03\x02\x02\x02\u1551\u1552\x07\xC3\x02\x02\u1552" +
		"\u1554\tZ\x02\x02\u1553\u1555\x05\u0220\u0111\x02\u1554\u1553\x03\x02" +
		"\x02\x02\u1554\u1555\x03\x02\x02\x02\u1555\u1557\x03\x02\x02\x02\u1556" +
		"\u1558\x07\xC4\x02\x02\u1557\u1556\x03\x02\x02\x02\u1557\u1558\x03\x02" +
		"\x02\x02\u1558\u15A9\x03\x02\x02\x02\u1559\u155A\x07\u01AD\x02\x02\u155A" +
		"\u155C\x07\xC1\x02\x02\u155B\u155D\x05\u0220\u0111\x02\u155C\u155B\x03" +
		"\x02\x02\x02\u155C\u155D\x03\x02\x02\x02\u155D\u155F\x03\x02\x02\x02\u155E" +
		"\u1560\x07\xC4\x02\x02\u155F\u155E\x03\x02\x02\x02\u155F\u1560\x03\x02" +
		"\x02\x02\u1560\u15A9\x03\x02\x02\x02\u1561\u1562\x07\xC3\x02\x02\u1562" +
		"\u1563\t[\x02\x02\u1563\u1565\x07\xCF\x02\x02\u1564\u1566\x05\u0220\u0111" +
		"\x02\u1565\u1564\x03\x02\x02\x02\u1565\u1566\x03\x02\x02\x02\u1566\u1568" +
		"\x03\x02\x02\x02\u1567\u1569\x07\xC4\x02\x02\u1568\u1567\x03\x02\x02\x02" +
		"\u1568\u1569\x03\x02\x02\x02\u1569\u15A9\x03\x02\x02\x02\u156A\u156C\t" +
		"\\\x02\x02\u156B\u156D\x05\u0220\u0111\x02\u156C\u156B\x03\x02\x02\x02" +
		"\u156C\u156D\x03\x02\x02\x02\u156D\u156F\x03\x02\x02\x02\u156E\u1570\t" +
		"]\x02\x02\u156F\u156E\x03\x02\x02\x02\u156F\u1570\x03\x02\x02\x02\u1570" +
		"\u1572\x03\x02\x02\x02\u1571\u1573\x07\xAD\x02\x02\u1572\u1571\x03\x02" +
		"\x02\x02\u1572\u1573\x03\x02\x02\x02\u1573\u15A9\x03\x02\x02\x02\u1574" +
		"\u1576\x07\xB4\x02\x02\u1575\u1577\x05\u0222\u0112\x02\u1576\u1575\x03" +
		"\x02\x02\x02\u1576\u1577\x03\x02\x02\x02\u1577\u1579\x03\x02\x02\x02\u1578" +
		"\u157A\t]\x02\x02\u1579\u1578\x03\x02\x02\x02\u1579\u157A\x03\x02\x02" +
		"\x02\u157A\u157C\x03\x02\x02\x02\u157B\u157D\x07\xAD\x02\x02\u157C\u157B" +
		"\x03\x02\x02\x02\u157C\u157D\x03\x02\x02\x02\u157D\u15A9\x03\x02\x02\x02" +
		"\u157E\u1580\x07\xB5\x02\x02\u157F\u1581\x07\xB6\x02\x02\u1580\u157F\x03" +
		"\x02\x02\x02\u1580\u1581\x03\x02\x02\x02\u1581\u1583\x03\x02\x02\x02\u1582" +
		"\u1584\x05\u0222\u0112\x02\u1583\u1582\x03\x02\x02\x02\u1583\u1584\x03" +
		"\x02\x02\x02\u1584\u1586\x03\x02\x02\x02\u1585\u1587\t]\x02\x02\u1586" +
		"\u1585\x03\x02\x02\x02\u1586\u1587\x03\x02\x02\x02\u1587\u1589\x03\x02" +
		"\x02\x02\u1588\u158A\x07\xAD\x02\x02\u1589\u1588\x03\x02\x02\x02\u1589" +
		"\u158A\x03\x02\x02\x02\u158A\u15A9\x03\x02\x02\x02\u158B\u158D\t^\x02" +
		"\x02\u158C\u158E\x05\u0224\u0113\x02\u158D\u158C\x03\x02\x02\x02\u158D" +
		"\u158E\x03\x02\x02\x02\u158E\u1590\x03\x02\x02\x02\u158F\u1591\t]\x02" +
		"\x02\u1590\u158F\x03\x02\x02\x02\u1590\u1591\x03\x02\x02\x02\u1591\u1593" +
		"\x03\x02\x02\x02\u1592\u1594\x07\xAD\x02\x02\u1593\u1592\x03\x02\x02\x02" +
		"\u1593\u1594\x03\x02\x02\x02\u1594\u15A9\x03\x02\x02\x02\u1595\u15A9\t" +
		"_\x02\x02\u1596\u1598\t`\x02\x02\u1597\u1599\x05\u0220\u0111\x02\u1598" +
		"\u1597\x03\x02\x02\x02\u1598\u1599\x03\x02\x02\x02\u1599\u15A9\x03\x02" +
		"\x02\x02\u159A\u159B\ta\x02\x02\u159B\u159D\x05\u021C\u010F\x02\u159C" +
		"\u159E\x07\xC4\x02\x02\u159D\u159C\x03\x02\x02\x02\u159D\u159E\x03\x02" +
		"\x02\x02\u159E\u15A5\x03\x02\x02\x02\u159F\u15A0\x07\x18\x02\x02\u15A0" +
		"\u15A3\x07\x87\x02\x02\u15A1\u15A3\x07\u02AF\x02\x02\u15A2\u159F\x03\x02" +
		"\x02\x02\u15A2\u15A1\x03\x02\x02\x02\u15A3\u15A4\x03\x02\x02\x02\u15A4" +
		"\u15A6\x05\u01F8\xFD\x02\u15A5\u15A2\x03\x02\x02\x02\u15A5\u15A6\x03\x02" +
		"\x02\x02\u15A6\u15A9\x03\x02\x02\x02\u15A7\u15A9\tb\x02\x02\u15A8\u153E" +
		"\x03\x02\x02\x02\u15A8\u1551\x03\x02\x02\x02\u15A8\u1559\x03\x02\x02\x02" +
		"\u15A8\u1561\x03\x02\x02\x02\u15A8\u156A\x03\x02\x02\x02\u15A8\u1574\x03" +
		"\x02\x02\x02\u15A8\u157E\x03\x02\x02\x02\u15A8\u158B\x03\x02\x02\x02\u15A8" +
		"\u1595\x03\x02\x02\x02\u15A8\u1596\x03\x02\x02\x02\u15A8\u159A\x03\x02" +
		"\x02\x02\u15A8\u15A7\x03\x02\x02\x02\u15A9\u021B\x03\x02\x02\x02\u15AA" +
		"\u15AB\x07\u03D0\x02\x02\u15AB\u15B0\x07\u03DF\x02\x02\u15AC\u15AD\x07" +
		"\u03D2\x02\x02\u15AD\u15AF\x07\u03DF\x02\x02\u15AE\u15AC\x03\x02\x02\x02" +
		"\u15AF\u15B2\x03\x02\x02\x02\u15B0\u15AE\x03\x02\x02\x02\u15B0\u15B1\x03" +
		"\x02\x02\x02\u15B1\u15B3\x03\x02\x02\x02\u15B2\u15B0\x03\x02\x02\x02\u15B3" +
		"\u15B4\x07\u03D1\x02\x02\u15B4\u021D\x03\x02\x02\x02\u15B5\u15B7\tc\x02" +
		"\x02\u15B6\u15B8\x05\u0220\u0111\x02\u15B7\u15B6\x03\x02\x02\x02\u15B7" +
		"\u15B8\x03\x02\x02\x02\u15B8\u15CF\x03\x02\x02\x02\u15B9\u15BB\x07\xC0" +
		"\x02\x02\u15BA\u15BC\x05\u0220\u0111\x02\u15BB\u15BA\x03\x02\x02\x02\u15BB" +
		"\u15BC\x03\x02\x02\x02\u15BC\u15C3\x03\x02\x02\x02\u15BD\u15BE\x07\x18" +
		"\x02\x02\u15BE\u15C1\x07\x87\x02\x02\u15BF\u15C1\x07\u02AF\x02\x02\u15C0" +
		"\u15BD\x03\x02\x02\x02\u15C0\u15BF\x03\x02\x02\x02\u15C1\u15C2\x03\x02" +
		"\x02\x02\u15C2\u15C4\x05\u01F8\xFD\x02\u15C3\u15C0\x03\x02\x02\x02\u15C3" +
		"\u15C4\x03\x02\x02\x02\u15C4\u15CF\x03\x02\x02\x02\u15C5\u15CF\td\x02" +
		"\x02\u15C6\u15C8\x07\xB8\x02\x02\u15C7\u15C9\x05\u0222\u0112\x02\u15C8" +
		"\u15C7\x03\x02\x02\x02\u15C8\u15C9\x03\x02\x02\x02\u15C9\u15CF\x03\x02" +
		"\x02\x02\u15CA\u15CC\t]\x02\x02\u15CB\u15CD\x07\xB2\x02\x02\u15CC\u15CB" +
		"\x03\x02\x02\x02\u15CC\u15CD\x03\x02\x02\x02\u15CD\u15CF\x03\x02\x02\x02" +
		"\u15CE\u15B5\x03\x02\x02\x02\u15CE\u15B9\x03\x02\x02\x02\u15CE\u15C5\x03" +
		"\x02\x02\x02\u15CE\u15C6\x03\x02\x02\x02\u15CE\u15CA\x03\x02\x02\x02\u15CF" +
		"\u021F\x03\x02\x02\x02\u15D0\u15D1\x07\u03D0\x02\x02\u15D1\u15D2\x05\u020C" +
		"\u0107\x02\u15D2\u15D3\x07\u03D1\x02\x02\u15D3\u0221\x03\x02\x02\x02\u15D4" +
		"\u15D5\x07\u03D0\x02\x02\u15D5\u15D6\x05\u020C\u0107\x02\u15D6\u15D7\x07" +
		"\u03D2\x02\x02\u15D7\u15D8\x05\u020C\u0107\x02\u15D8\u15D9\x07\u03D1\x02" +
		"\x02\u15D9\u0223\x03\x02\x02\x02\u15DA\u15DB\x07\u03D0\x02\x02\u15DB\u15DE" +
		"\x05\u020C\u0107\x02\u15DC\u15DD\x07\u03D2\x02\x02\u15DD\u15DF\x05\u020C" +
		"\u0107\x02\u15DE\u15DC\x03\x02\x02\x02\u15DE\u15DF\x03\x02\x02\x02\u15DF" +
		"\u15E0\x03\x02\x02\x02\u15E0\u15E1\x07\u03D1\x02\x02\u15E1\u0225\x03\x02" +
		"\x02\x02\u15E2\u15E7\x05\u0206\u0104\x02\u15E3\u15E4\x07\u03D2\x02\x02" +
		"\u15E4\u15E6\x05\u0206\u0104\x02\u15E5\u15E3\x03\x02\x02\x02\u15E6\u15E9" +
		"\x03\x02\x02\x02\u15E7\u15E5\x03\x02\x02\x02\u15E7\u15E8\x03\x02\x02\x02" +
		"\u15E8\u0227\x03\x02\x02\x02\u15E9\u15E7\x03\x02\x02\x02\u15EA\u15EF\x05" +
		"\u01EE\xF8\x02\u15EB\u15EC\x07\u03D2\x02\x02\u15EC\u15EE\x05\u01EE\xF8" +
		"\x02\u15ED\u15EB\x03\x02\x02\x02\u15EE\u15F1\x03\x02\x02\x02\u15EF\u15ED" +
		"\x03\x02\x02\x02\u15EF\u15F0\x03\x02\x02\x02\u15F0\u0229\x03\x02\x02\x02" +
		"\u15F1\u15EF\x03\x02\x02\x02\u15F2\u15F3\x07\u03D0\x02\x02\u15F3\u15F8" +
		"\x05\u01F2\xFA\x02\u15F4\u15F5\x07\u03D2\x02\x02\u15F5\u15F7\x05\u01F2" +
		"\xFA\x02\u15F6\u15F4\x03\x02\x02\x02\u15F7\u15FA\x03\x02\x02\x02\u15F8" +
		"\u15F6\x03\x02\x02\x02\u15F8\u15F9\x03\x02\x02\x02\u15F9\u15FB\x03\x02" +
		"\x02\x02\u15FA\u15F8\x03\x02\x02\x02\u15FB\u15FC\x07\u03D1\x02\x02\u15FC" +
		"\u022B\x03\x02\x02\x02\u15FD\u1602\x05\u0254\u012B\x02\u15FE\u15FF\x07" +
		"\u03D2\x02\x02\u15FF\u1601\x05\u0254\u012B\x02\u1600\u15FE\x03\x02\x02" +
		"\x02\u1601\u1604\x03\x02\x02\x02\u1602\u1600\x03\x02\x02\x02\u1602\u1603" +
		"\x03\x02\x02\x02\u1603\u022D\x03\x02\x02\x02\u1604\u1602\x03\x02\x02\x02" +
		"\u1605\u160A\x05\u023A\u011E\x02\u1606\u1607\x07\u03D2\x02\x02\u1607\u1609" +
		"\x05\u023A\u011E\x02\u1608\u1606\x03\x02\x02\x02\u1609\u160C\x03\x02\x02" +
		"\x02\u160A\u1608\x03\x02\x02\x02\u160A\u160B\x03\x02\x02\x02\u160B\u022F" +
		"\x03\x02\x02\x02\u160C\u160A\x03\x02\x02\x02\u160D\u1612\x05\u0218\u010D" +
		"\x02\u160E\u160F\x07\u03D2\x02\x02\u160F\u1611\x05\u0218\u010D\x02\u1610" +
		"\u160E\x03\x02\x02\x02\u1611\u1614\x03\x02\x02\x02\u1612\u1610\x03\x02" +
		"\x02\x02\u1612\u1613\x03\x02\x02\x02\u1613\u0231\x03\x02\x02\x02\u1614" +
		"\u1612\x03\x02\x02\x02\u1615\u161A\x07\u03DF\x02\x02\u1616\u1617\x07\u03D2" +
		"\x02\x02\u1617\u1619\x07\u03DF\x02\x02\u1618\u1616\x03\x02\x02\x02\u1619" +
		"\u161C\x03\x02\x02\x02\u161A\u1618\x03\x02\x02\x02\u161A\u161B\x03\x02" +
		"\x02\x02\u161B\u0233\x03\x02\x02\x02\u161C\u161A\x03\x02\x02\x02\u161D" +
		"\u1622\x07\u03EA\x02\x02\u161E\u161F\x07\u03D2\x02\x02\u161F\u1621\x07" +
		"\u03EA\x02\x02\u1620\u161E\x03\x02\x02\x02\u1621\u1624\x03\x02\x02\x02" +
		"\u1622\u1620\x03\x02\x02\x02\u1622\u1623\x03\x02\x02\x02\u1623\u0235\x03" +
		"\x02\x02\x02\u1624\u1622\x03\x02\x02\x02\u1625\u1631\x07g\x02\x02\u1626" +
		"\u1628\x05\u025A\u012E\x02\u1627\u1626\x03\x02\x02\x02\u1627\u1628\x03" +
		"\x02\x02\x02\u1628\u1629\x03\x02\x02\x02\u1629\u1631\x05\u0218\u010D\x02" +
		"\u162A\u162E\x05\u0238\u011D\x02\u162B\u162C\x07h\x02\x02\u162C\u162D" +
		"\x07\xA2\x02\x02\u162D\u162F\x05\u0238\u011D\x02\u162E\u162B\x03\x02\x02" +
		"\x02\u162E\u162F\x03\x02\x02\x02\u162F\u1631\x03\x02\x02\x02\u1630\u1625" +
		"\x03\x02\x02\x02\u1630\u1627\x03\x02\x02\x02\u1630\u162A\x03\x02\x02\x02" +
		"\u1631\u0237\x03\x02\x02\x02\u1632\u1638\te\x02\x02\u1633\u1635\x07\u03D0" +
		"\x02\x02\u1634\u1636\x05\u020C\u0107\x02\u1635\u1634\x03\x02\x02\x02\u1635" +
		"\u1636\x03\x02\x02\x02\u1636\u1637\x03\x02\x02\x02\u1637\u1639\x07\u03D1" +
		"\x02\x02\u1638\u1633\x03\x02\x02\x02\u1638\u1639\x03\x02\x02\x02\u1639" +
		"\u1641\x03\x02\x02\x02\u163A\u163B\x07\xF6\x02\x02\u163B\u163D\x07\u03D0" +
		"\x02\x02\u163C\u163E\x05\u020C\u0107\x02\u163D\u163C\x03\x02\x02\x02\u163D" +
		"\u163E\x03\x02\x02\x02\u163E\u163F\x03\x02\x02\x02\u163F\u1641\x07\u03D1" +
		"\x02\x02\u1640\u1632\x03\x02\x02\x02\u1640\u163A\x03\x02\x02\x02\u1641" +
		"\u0239\x03\x02\x02\x02\u1642\u1645\x05\u0254\u012B\x02\u1643\u1645\x07" +
		"\'\x02\x02\u1644\u1642\x03\x02\x02\x02\u1644\u1643\x03\x02\x02\x02\u1645" +
		"\u023B\x03\x02\x02\x02\u1646\u1647\x07D\x02\x02\u1647\u1648\x075\x02\x02" +
		"\u1648\u023D\x03\x02\x02\x02\u1649\u164A\x07D\x02\x02\u164A\u164B\x07" +
		"e\x02\x02\u164B\u164C\x075\x02\x02\u164C\u023F\x03\x02\x02\x02\u164D\u165F" +
		"\x05\u0242\u0122\x02\u164E\u165F\x05\u024A\u0126\x02\u164F\u1650\x05\u024C" +
		"\u0127\x02\u1650\u1652\x07\u03D0\x02\x02\u1651\u1653\x05\u0250\u0129\x02" +
		"\u1652\u1651\x03\x02\x02\x02\u1652\u1653\x03\x02\x02\x02\u1653\u1654\x03" +
		"\x02\x02\x02\u1654\u1655\x07\u03D1\x02\x02\u1655\u165F\x03\x02\x02\x02" +
		"\u1656\u1657\x05\u01EC\xF7\x02\u1657\u1659\x07\u03D0\x02\x02\u1658\u165A" +
		"\x05\u0250\u0129\x02\u1659\u1658\x03\x02\x02\x02\u1659\u165A\x03\x02\x02" +
		"\x02\u165A\u165B\x03\x02\x02\x02\u165B\u165C\x07\u03D1\x02\x02\u165C\u165F" +
		"\x03\x02\x02\x02\u165D\u165F\x05\u024E\u0128\x02\u165E\u164D";
	private static readonly _serializedATNSegment11: string =
		"\x03\x02\x02\x02\u165E\u164E\x03\x02\x02\x02\u165E\u164F\x03\x02\x02\x02" +
		"\u165E\u1656\x03\x02\x02\x02\u165E\u165D\x03\x02\x02\x02\u165F\u0241\x03" +
		"\x02\x02\x02\u1660\u16FE\tf\x02\x02\u1661\u1662\x07\x1F\x02\x02\u1662" +
		"\u1663\x07\u03D0\x02\x02\u1663\u1664\x05\u0254\u012B\x02\u1664\u1665\x07" +
		"\u03D2\x02\x02\u1665\u1666\x05\u021E\u0110\x02\u1666\u1667\x07\u03D1\x02" +
		"\x02\u1667\u16FE\x03\x02\x02\x02\u1668\u1669\x07\x1F\x02\x02\u1669\u166A" +
		"\x07\u03D0\x02\x02\u166A\u166B\x05\u0254\u012B\x02\u166B\u166C\x07\xA5" +
		"\x02\x02\u166C\u166D\x05\u01F8\xFD\x02\u166D\u166E\x07\u03D1\x02\x02\u166E" +
		"\u16FE\x03\x02\x02\x02\u166F\u1670\x07\x16\x02\x02\u1670\u1671\x07\u03D0" +
		"\x02\x02\u1671\u1672\x05\u0254\u012B\x02\u1672\u1673\x07\r\x02\x02\u1673" +
		"\u1674\x05\u021E\u0110\x02\u1674\u1675\x07\u03D1\x02\x02\u1675\u16FE\x03" +
		"\x02\x02\x02\u1676\u1677\x07\xA6\x02\x02\u1677\u1678\x07\u03D0\x02\x02" +
		"\u1678\u1679\x05\u01F0\xF9\x02\u1679\u167A\x07\u03D1\x02\x02\u167A\u16FE" +
		"\x03\x02\x02\x02\u167B\u167C\x07\x15\x02\x02\u167C\u167E\x05\u0254\u012B" +
		"\x02\u167D\u167F\x05\u0244\u0123\x02\u167E\u167D\x03\x02\x02\x02\u167F" +
		"\u1680\x03\x02\x02\x02\u1680\u167E\x03\x02\x02\x02\u1680\u1681\x03\x02" +
		"\x02\x02\u1681\u1684\x03\x02\x02\x02\u1682\u1683\x071\x02\x02\u1683\u1685" +
		"\x05\u0252\u012A\x02\u1684\u1682\x03\x02\x02\x02\u1684\u1685\x03\x02\x02" +
		"\x02\u1685\u1686\x03\x02\x02\x02\u1686\u1687\x07\u0144\x02\x02\u1687\u16FE" +
		"\x03\x02\x02\x02\u1688\u168A\x07\x15\x02\x02\u1689\u168B\x05\u0244\u0123" +
		"\x02\u168A\u1689\x03\x02\x02\x02\u168B\u168C\x03\x02\x02\x02\u168C\u168A" +
		"\x03\x02\x02\x02\u168C\u168D\x03\x02\x02\x02\u168D\u1690\x03\x02\x02\x02" +
		"\u168E\u168F\x071\x02\x02\u168F\u1691\x05\u0252\u012A\x02\u1690\u168E" +
		"\x03\x02\x02\x02\u1690\u1691\x03\x02\x02\x02\u1691\u1692\x03\x02\x02\x02" +
		"\u1692\u1693\x07\u0144\x02\x02\u1693\u16FE\x03\x02\x02\x02\u1694\u1695" +
		"\x07\xC0\x02\x02\u1695\u1696\x07\u03D0\x02\x02\u1696\u1699\x05\u0250\u0129" +
		"\x02\u1697\u1698\x07\xA5\x02\x02\u1698\u169A\x05\u01F8\xFD\x02\u1699\u1697" +
		"\x03\x02\x02\x02\u1699\u169A\x03\x02\x02\x02\u169A\u169B\x03\x02\x02\x02" +
		"\u169B\u169C\x07\u03D1\x02\x02\u169C\u16FE\x03\x02\x02\x02\u169D\u169E" +
		"\x07\xF7\x02\x02\u169E\u16A1\x07\u03D0\x02\x02\u169F\u16A2\x05\u0210\u0109" +
		"\x02\u16A0\u16A2\x05\u0254\u012B\x02\u16A1\u169F\x03\x02\x02\x02\u16A1" +
		"\u16A0\x03\x02\x02\x02\u16A2\u16A3\x03\x02\x02\x02\u16A3\u16A6\x07F\x02" +
		"\x02\u16A4\u16A7\x05\u0210\u0109\x02\u16A5\u16A7\x05\u0254\u012B\x02\u16A6" +
		"\u16A4\x03\x02\x02\x02\u16A6\u16A5\x03\x02\x02\x02\u16A7\u16A8\x03\x02" +
		"\x02\x02\u16A8\u16A9\x07\u03D1\x02\x02\u16A9\u16FE\x03\x02\x02\x02\u16AA" +
		"\u16AB\tg\x02\x02\u16AB\u16AE\x07\u03D0\x02\x02\u16AC\u16AF\x05\u0210" +
		"\u0109\x02\u16AD\u16AF\x05\u0254\u012B\x02\u16AE\u16AC\x03\x02\x02\x02" +
		"\u16AE\u16AD\x03\x02\x02\x02\u16AF\u16B0\x03\x02\x02\x02\u16B0\u16B3\x07" +
		"=\x02\x02\u16B1\u16B4\x05\u020C\u0107\x02\u16B2\u16B4\x05\u0254\u012B" +
		"\x02\u16B3\u16B1\x03\x02\x02\x02\u16B3\u16B2\x03\x02\x02\x02\u16B4\u16BA" +
		"\x03\x02\x02\x02\u16B5\u16B8\x07:\x02\x02\u16B6\u16B9\x05\u020C\u0107" +
		"\x02\u16B7\u16B9\x05\u0254\u012B\x02\u16B8\u16B6\x03\x02\x02\x02\u16B8" +
		"\u16B7\x03\x02\x02\x02\u16B9\u16BB\x03\x02\x02\x02\u16BA\u16B5\x03\x02" +
		"\x02\x02\u16BA\u16BB\x03\x02\x02\x02\u16BB\u16BC\x03\x02\x02\x02\u16BC" +
		"\u16BD\x07\u03D1\x02\x02\u16BD\u16FE\x03\x02\x02\x02\u16BE\u16BF\x07\xFB" +
		"\x02\x02\u16BF\u16C0\x07\u03D0\x02\x02\u16C0\u16C3\th\x02\x02\u16C1\u16C4" +
		"\x05\u0210\u0109\x02\u16C2\u16C4\x05\u0254\u012B\x02\u16C3\u16C1\x03\x02" +
		"\x02\x02\u16C3\u16C2\x03\x02\x02\x02\u16C3\u16C4\x03\x02\x02\x02\u16C4" +
		"\u16C5\x03\x02\x02\x02\u16C5\u16C8\x07=\x02\x02\u16C6\u16C9\x05\u0210" +
		"\u0109\x02\u16C7\u16C9\x05\u0254\u012B\x02\u16C8\u16C6\x03\x02\x02\x02" +
		"\u16C8\u16C7\x03\x02\x02\x02\u16C9\u16CA\x03\x02\x02\x02\u16CA\u16CB\x07" +
		"\u03D1\x02\x02\u16CB\u16FE\x03\x02\x02\x02\u16CC\u16CD\x07\xFB\x02\x02" +
		"\u16CD\u16D0\x07\u03D0\x02\x02\u16CE\u16D1\x05\u0210\u0109\x02\u16CF\u16D1" +
		"\x05\u0254\u012B\x02\u16D0\u16CE\x03\x02\x02\x02\u16D0\u16CF\x03\x02\x02" +
		"\x02\u16D1\u16D2\x03\x02\x02\x02\u16D2\u16D5\x07=\x02\x02\u16D3\u16D6" +
		"\x05\u0210\u0109\x02\u16D4\u16D6\x05\u0254\u012B\x02\u16D5\u16D3\x03\x02" +
		"\x02\x02\u16D5\u16D4\x03\x02\x02\x02\u16D6\u16D7\x03\x02\x02\x02\u16D7" +
		"\u16D8\x07\u03D1\x02\x02\u16D8\u16FE\x03\x02\x02\x02\u16D9\u16DA\x07\u03B1" +
		"\x02\x02\u16DA\u16DD\x07\u03D0\x02\x02\u16DB\u16DE\x05\u0210\u0109\x02" +
		"\u16DC\u16DE\x05\u0254\u012B\x02\u16DD\u16DB\x03\x02\x02\x02\u16DD\u16DC" +
		"\x03\x02\x02\x02\u16DE\u16E5\x03\x02\x02\x02\u16DF\u16E0\x07\r\x02\x02" +
		"\u16E0\u16E1\ti\x02\x02\u16E1\u16E2\x07\u03D0\x02\x02\u16E2\u16E3\x05" +
		"\u020C\u0107\x02\u16E3\u16E4\x07\u03D1\x02\x02\u16E4\u16E6\x03\x02\x02" +
		"\x02\u16E5\u16DF\x03\x02\x02\x02\u16E5\u16E6\x03\x02\x02\x02\u16E6\u16E8" +
		"\x03\x02\x02\x02\u16E7\u16E9\x05\u0246\u0124\x02\u16E8\u16E7\x03\x02\x02" +
		"\x02\u16E8\u16E9\x03\x02\x02\x02\u16E9\u16EA\x03\x02\x02\x02\u16EA\u16EB" +
		"\x07\u03D1\x02\x02\u16EB\u16FE\x03\x02\x02\x02\u16EC\u16ED\x07\xF4\x02" +
		"\x02\u16ED\u16EE\x07\u03D0\x02\x02\u16EE\u16EF\x05<\x1F\x02\u16EF\u16F2" +
		"\x07=\x02\x02\u16F0\u16F3\x05\u0210\u0109\x02\u16F1\u16F3\x05\u0254\u012B" +
		"\x02\u16F2\u16F0\x03\x02\x02\x02\u16F2\u16F1\x03\x02\x02\x02\u16F3\u16F4" +
		"\x03\x02\x02\x02\u16F4\u16F5\x07\u03D1\x02\x02\u16F5\u16FE\x03\x02\x02" +
		"\x02\u16F6\u16F7\x07\u02E9\x02\x02\u16F7\u16F8\x07\u03D0\x02\x02\u16F8" +
		"\u16F9\tj\x02\x02\u16F9\u16FA\x07\u03D2\x02\x02\u16FA\u16FB\x05\u0210" +
		"\u0109\x02\u16FB\u16FC\x07\u03D1\x02\x02\u16FC\u16FE\x03\x02\x02\x02\u16FD" +
		"\u1660\x03\x02\x02\x02\u16FD\u1661\x03\x02\x02\x02\u16FD\u1668\x03\x02" +
		"\x02\x02\u16FD\u166F\x03\x02\x02\x02\u16FD\u1676\x03\x02\x02\x02\u16FD" +
		"\u167B\x03\x02\x02\x02\u16FD\u1688\x03\x02\x02\x02\u16FD\u1694\x03\x02" +
		"\x02\x02\u16FD\u169D\x03\x02\x02\x02\u16FD\u16AA\x03\x02\x02\x02\u16FD" +
		"\u16BE\x03\x02\x02\x02\u16FD\u16CC\x03\x02\x02\x02\u16FD\u16D9\x03\x02" +
		"\x02\x02\u16FD\u16EC\x03\x02\x02\x02\u16FD\u16F6\x03\x02\x02\x02\u16FE" +
		"\u0243\x03\x02\x02\x02\u16FF\u1700\x07\xA7\x02\x02\u1700\u1701\x05\u0252" +
		"\u012A\x02\u1701\u1702\x07\x98\x02\x02\u1702\u1703\x05\u0252\u012A\x02" +
		"\u1703\u0245\x03\x02\x02\x02\u1704\u1705\x07\u0180\x02\x02\u1705\u170A" +
		"\x05\u0248\u0125\x02\u1706\u1707\x07\u03D2\x02\x02\u1707\u1709\x05\u0248" +
		"\u0125\x02\u1708\u1706\x03\x02\x02\x02\u1709\u170C\x03\x02\x02\x02\u170A" +
		"\u1708\x03\x02\x02\x02\u170A\u170B\x03\x02\x02\x02\u170B\u1713\x03\x02" +
		"\x02\x02\u170C\u170A\x03\x02\x02\x02\u170D\u170E\x07\u0180\x02\x02\u170E" +
		"\u170F\x05\u020C\u0107\x02\u170F\u1710\x07\u03C4\x02\x02\u1710\u1711\x05" +
		"\u020C\u0107\x02\u1711\u1713\x03\x02\x02\x02\u1712\u1704\x03\x02\x02\x02" +
		"\u1712\u170D\x03\x02\x02\x02\u1713\u0247\x03\x02\x02\x02\u1714\u1716\x05" +
		"\u020C\u0107\x02\u1715\u1717\tk\x02\x02\u1716\u1715\x03\x02\x02\x02\u1716" +
		"\u1717\x03\x02\x02\x02\u1717\u0249\x03\x02\x02\x02\u1718\u1719\tl\x02" +
		"\x02\u1719\u171B\x07\u03D0\x02\x02\u171A\u171C\t\'\x02\x02\u171B\u171A" +
		"\x03\x02\x02\x02\u171B\u171C\x03\x02\x02\x02\u171C\u171D\x03\x02\x02\x02" +
		"\u171D\u171E\x05\u0252\u012A\x02\u171E\u171F\x07\u03D1\x02\x02\u171F\u1751" +
		"\x03\x02\x02\x02\u1720\u1721\x07\xE0\x02\x02\u1721\u1727\x07\u03D0\x02" +
		"\x02\u1722\u1728\x07\u03BF\x02\x02\u1723\u1725\x07\b\x02\x02\u1724\u1723" +
		"\x03\x02\x02\x02\u1724\u1725\x03\x02\x02\x02\u1725\u1726\x03\x02\x02\x02" +
		"\u1726\u1728\x05\u0252\u012A\x02\u1727\u1722\x03\x02\x02\x02\u1727\u1724" +
		"\x03\x02\x02\x02\u1728\u1729\x03\x02\x02\x02\u1729\u1751\x07\u03D1\x02" +
		"\x02\u172A\u172B\x07\xE0\x02\x02\u172B\u172C\x07\u03D0\x02\x02\u172C\u172D" +
		"\x07-\x02\x02\u172D\u172E\x05\u0250\u0129\x02\u172E\u172F\x07\u03D1\x02" +
		"\x02\u172F\u1751\x03\x02\x02\x02\u1730\u1731\tm\x02\x02\u1731\u1733\x07" +
		"\u03D0\x02\x02\u1732\u1734\x07\b\x02\x02\u1733\u1732\x03\x02\x02\x02\u1733" +
		"\u1734\x03\x02\x02\x02\u1734\u1735\x03\x02\x02\x02\u1735\u1736\x05\u0252" +
		"\u012A\x02\u1736\u1737\x07\u03D1\x02\x02\u1737\u1751\x03\x02\x02\x02\u1738" +
		"\u1739\x07\xE1\x02\x02\u1739\u173B\x07\u03D0\x02\x02\u173A\u173C\x07-" +
		"\x02\x02\u173B\u173A\x03\x02\x02\x02\u173B\u173C\x03\x02\x02\x02\u173C" +
		"\u173D\x03\x02\x02\x02\u173D\u1748\x05\u0250\u0129\x02\u173E\u173F\x07" +
		"m\x02\x02\u173F\u1740\x07\x12\x02\x02\u1740\u1745\x05\xD2j\x02\u1741\u1742" +
		"\x07\u03D2\x02\x02\u1742\u1744\x05\xD2j\x02\u1743\u1741\x03\x02\x02\x02" +
		"\u1744\u1747\x03\x02\x02\x02\u1745\u1743\x03\x02\x02\x02\u1745\u1746\x03" +
		"\x02\x02\x02\u1746\u1749\x03\x02\x02\x02\u1747\u1745\x03\x02\x02\x02\u1748" +
		"\u173E\x03\x02\x02\x02\u1748\u1749\x03\x02\x02\x02\u1749\u174C\x03\x02" +
		"\x02\x02\u174A\u174B\x07\x88\x02\x02\u174B\u174D\x07\u03DF\x02\x02\u174C" +
		"\u174A\x03\x02\x02\x02\u174C\u174D\x03\x02\x02\x02\u174D\u174E\x03\x02" +
		"\x02\x02\u174E\u174F\x07\u03D1\x02\x02\u174F\u1751\x03\x02\x02\x02\u1750" +
		"\u1718\x03\x02\x02\x02\u1750\u1720\x03\x02\x02\x02\u1750\u172A\x03\x02" +
		"\x02\x02\u1750\u1730\x03\x02\x02\x02\u1750\u1738\x03\x02\x02\x02\u1751" +
		"\u024B\x03\x02\x02\x02\u1752\u176A\x05\u0270\u0139\x02\u1753\u176A\x07" +
		"\u0252\x02\x02\u1754\u176A\x07\xF0\x02\x02\u1755\u176A\x07\xEC\x02\x02" +
		"\u1756\u176A\x07\xED\x02\x02\u1757\u176A\x07\xEE\x02\x02\u1758\u176A\x07" +
		"\xF1\x02\x02\u1759\u176A\x07\xF2\x02\x02\u175A\u176A\x07\xF3\x02\x02\u175B" +
		"\u176A\x07D\x02\x02\u175C\u176A\x07K\x02\x02\u175D\u176A\x07\xEF\x02\x02" +
		"\u175E\u176A\x07\xF5\x02\x02\u175F\u176A\x07\u01A3\x02\x02\u1760\u176A" +
		"\x07\xF6\x02\x02\u1761\u176A\x07}\x02\x02\u1762\u176A\x07\xF8\x02\x02" +
		"\u1763\u176A\x07\xF9\x02\x02\u1764\u176A\x07\xFA\x02\x02\u1765\u176A\x07" +
		"\xFB\x02\x02\u1766\u176A\x07\xFC\x02\x02\u1767\u176A\x07\xFD\x02\x02\u1768" +
		"\u176A\x07\xFE\x02\x02\u1769\u1752\x03\x02\x02\x02\u1769\u1753\x03\x02" +
		"\x02\x02\u1769\u1754\x03\x02\x02\x02\u1769\u1755\x03\x02\x02\x02\u1769" +
		"\u1756\x03\x02\x02\x02\u1769\u1757\x03\x02\x02\x02\u1769\u1758\x03\x02" +
		"\x02\x02\u1769\u1759\x03\x02\x02\x02\u1769\u175A\x03\x02\x02\x02\u1769" +
		"\u175B\x03\x02\x02\x02\u1769\u175C\x03\x02\x02\x02\u1769\u175D\x03\x02" +
		"\x02\x02\u1769\u175E\x03\x02\x02\x02\u1769\u175F\x03\x02\x02\x02\u1769" +
		"\u1760\x03\x02\x02\x02\u1769\u1761\x03\x02\x02\x02\u1769\u1762\x03\x02" +
		"\x02\x02\u1769\u1763\x03\x02\x02\x02\u1769\u1764\x03\x02\x02\x02\u1769" +
		"\u1765\x03\x02\x02\x02\u1769\u1766\x03\x02\x02\x02\u1769\u1767\x03\x02" +
		"\x02\x02\u1769\u1768\x03\x02\x02\x02\u176A\u024D\x03\x02\x02\x02\u176B" +
		"\u176C\tn\x02\x02\u176C\u176D\x07\u03D0\x02\x02\u176D\u176E\x05\u0252" +
		"\u012A\x02\u176E\u176F\x07\u03D1\x02\x02\u176F\u024F\x03\x02\x02\x02\u1770" +
		"\u1775\x05\u0218\u010D\x02\u1771\u1775\x05\u01F0\xF9\x02\u1772\u1775\x05" +
		"\u0240\u0121\x02\u1773\u1775\x05\u0254\u012B\x02\u1774\u1770\x03\x02\x02" +
		"\x02\u1774\u1771\x03\x02\x02\x02\u1774\u1772\x03\x02\x02\x02\u1774\u1773" +
		"\x03\x02\x02\x02\u1775\u177F\x03\x02\x02\x02\u1776\u177B\x07\u03D2\x02" +
		"\x02\u1777\u177C\x05\u0218\u010D\x02\u1778\u177C\x05\u01F0\xF9\x02\u1779" +
		"\u177C\x05\u0240\u0121\x02\u177A\u177C\x05\u0254\u012B\x02\u177B\u1777" +
		"\x03\x02\x02\x02\u177B\u1778\x03\x02\x02\x02\u177B\u1779\x03\x02\x02\x02" +
		"\u177B\u177A\x03\x02\x02\x02\u177C\u177E\x03\x02\x02\x02\u177D\u1776\x03" +
		"\x02\x02\x02\u177E\u1781\x03\x02\x02\x02\u177F\u177D\x03\x02\x02\x02\u177F" +
		"\u1780\x03\x02\x02\x02\u1780\u0251\x03\x02\x02\x02\u1781\u177F\x03\x02" +
		"\x02\x02\u1782\u1787\x05\u0218\u010D\x02\u1783\u1787\x05\u01F0\xF9\x02" +
		"\u1784\u1787\x05\u0240\u0121\x02\u1785\u1787\x05\u0254\u012B\x02\u1786" +
		"\u1782\x03\x02\x02\x02\u1786\u1783\x03\x02\x02\x02\u1786\u1784\x03\x02" +
		"\x02\x02\u1786\u1785\x03\x02\x02\x02\u1787\u0253\x03\x02\x02\x02\u1788" +
		"\u1789\b\u012B\x01\x02\u1789\u178A\to\x02\x02\u178A\u1794\x05\u0254\u012B" +
		"\x06\u178B\u178C\x05\u0256\u012C\x02\u178C\u178E\x07N\x02\x02\u178D\u178F" +
		"\x07e\x02\x02\u178E\u178D\x03\x02\x02\x02\u178E\u178F\x03\x02\x02\x02" +
		"\u178F\u1790\x03\x02\x02\x02\u1790\u1791\tp\x02\x02\u1791\u1794\x03\x02" +
		"\x02\x02\u1792\u1794\x05\u0256\u012C\x02\u1793\u1788\x03\x02\x02\x02\u1793" +
		"\u178B\x03\x02\x02\x02\u1793\u1792\x03\x02\x02\x02\u1794\u179B\x03\x02" +
		"\x02\x02\u1795\u1796\f\x05\x02\x02\u1796\u1797\x05\u025E\u0130\x02\u1797" +
		"\u1798\x05\u0254\u012B\x06\u1798\u179A\x03\x02\x02\x02\u1799\u1795\x03" +
		"\x02\x02\x02\u179A\u179D\x03\x02\x02\x02\u179B\u1799\x03\x02\x02\x02\u179B" +
		"\u179C\x03\x02\x02\x02\u179C\u0255\x03\x02\x02\x02\u179D\u179B\x03\x02" +
		"\x02\x02\u179E\u17A1\b\u012C\x01\x02\u179F\u17A0\x07\u03EA\x02\x02\u17A0" +
		"\u17A2\x07\u03B6\x02\x02\u17A1\u179F\x03\x02\x02\x02\u17A1\u17A2\x03\x02" +
		"\x02\x02\u17A2\u17A3\x03\x02\x02\x02\u17A3\u17A4\x05\u0258\u012D\x02\u17A4" +
		"\u17DE\x03\x02\x02\x02\u17A5\u17A6\f\t\x02\x02\u17A6\u17A7\x05\u025C\u012F" +
		"\x02\u17A7\u17A8\x05\u0256\u012C\n\u17A8\u17DD\x03\x02\x02\x02\u17A9\u17AB" +
		"\f\x07\x02\x02\u17AA\u17AC\x07e\x02\x02\u17AB\u17AA\x03\x02\x02\x02\u17AB" +
		"\u17AC\x03\x02\x02\x02\u17AC\u17AD\x03\x02\x02\x02\u17AD\u17AE\x07\x10" +
		"\x02\x02\u17AE\u17AF\x05\u0256\u012C\x02\u17AF\u17B0\x07\f\x02\x02\u17B0" +
		"\u17B1\x05\u0256\u012C\b\u17B1\u17DD\x03\x02\x02\x02\u17B2\u17B3\f\x06" +
		"\x02\x02\u17B3\u17B4\x07\u01FF\x02\x02\u17B4\u17B5\x07W\x02\x02\u17B5" +
		"\u17DD\x05\u0256\u012C\x07\u17B6\u17B8\f\x04\x02\x02\u17B7\u17B9\x07e" +
		"\x02\x02\u17B8\u17B7\x03\x02\x02\x02\u17B8\u17B9\x03\x02\x02\x02\u17B9" +
		"\u17BA\x03\x02\x02\x02\u17BA\u17BB\tq\x02\x02\u17BB\u17DD\x05\u0256\u012C" +
		"\x05\u17BC\u17BE\f\v\x02\x02\u17BD\u17BF\x07e\x02\x02\u17BE\u17BD\x03" +
		"\x02\x02\x02\u17BE\u17BF\x03\x02\x02\x02\u17BF\u17C0\x03\x02\x02\x02\u17C0" +
		"\u17C1\x07F\x02\x02\u17C1\u17C4\x07\u03D0\x02\x02\u17C2\u17C5\x05\xB4" +
		"[\x02\u17C3\u17C5\x05\u022C\u0117\x02\u17C4\u17C2\x03\x02\x02\x02\u17C4" +
		"\u17C3\x03\x02\x02\x02\u17C5\u17C6\x03\x02\x02\x02\u17C6\u17C7\x07\u03D1" +
		"\x02\x02\u17C7\u17DD\x03\x02\x02\x02\u17C8\u17C9\f\n\x02\x02\u17C9\u17CA" +
		"\x07N\x02\x02\u17CA\u17DD\x05\u0216\u010C\x02\u17CB\u17CC\f\b\x02\x02" +
		"\u17CC\u17CD\x05\u025C\u012F\x02\u17CD\u17CE\tr\x02\x02\u17CE\u17CF\x07" +
		"\u03D0\x02\x02\u17CF\u17D0\x05\xB4[\x02\u17D0\u17D1\x07\u03D1\x02\x02" +
		"\u17D1\u17DD\x03\x02\x02\x02\u17D2\u17D4\f\x05\x02\x02\u17D3\u17D5\x07" +
		"e\x02\x02\u17D4\u17D3\x03\x02\x02\x02\u17D4\u17D5\x03\x02\x02\x02\u17D5" +
		"\u17D6\x03\x02\x02\x02\u17D6\u17D7\x07W\x02\x02\u17D7\u17DA\x05\u0256" +
		"\u012C\x02\u17D8\u17D9\x07\u014A\x02\x02\u17D9\u17DB\x07\u03DF\x02\x02" +
		"\u17DA\u17D8\x03\x02\x02\x02\u17DA\u17DB\x03\x02\x02\x02\u17DB\u17DD\x03" +
		"\x02\x02\x02\u17DC\u17A5\x03\x02\x02\x02\u17DC\u17A9\x03\x02\x02\x02\u17DC" +
		"\u17B2\x03\x02\x02\x02\u17DC\u17B6\x03\x02\x02\x02\u17DC\u17BC\x03\x02" +
		"\x02\x02\u17DC\u17C8\x03\x02\x02\x02\u17DC\u17CB\x03\x02\x02\x02\u17DC" +
		"\u17D2\x03\x02\x02\x02\u17DD\u17E0\x03\x02\x02\x02\u17DE\u17DC\x03\x02" +
		"\x02\x02\u17DE\u17DF\x03\x02\x02\x02\u17DF\u0257\x03\x02\x02\x02\u17E0" +
		"\u17DE\x03\x02\x02\x02\u17E1\u17E2\b\u012D\x01\x02\u17E2\u180F\x05\u0218" +
		"\u010D\x02\u17E3\u180F\x05\u01F0\xF9\x02\u17E4\u180F\x05\u0240\u0121\x02" +
		"\u17E5\u180F\x05\u01F6\xFC\x02\u17E6\u17E7\x05\u025A\u012E\x02\u17E7\u17E8" +
		"\x05\u0258\u012D\v\u17E8\u180F\x03\x02\x02\x02\u17E9\u17EA\x07\xC4\x02" +
		"\x02\u17EA\u180F\x05\u0258\u012D\n\u17EB\u17EC\x07\u03D0\x02\x02\u17EC" +
		"\u17F1\x05\u0254\u012B\x02\u17ED\u17EE\x07\u03D2\x02\x02\u17EE\u17F0\x05" +
		"\u0254\u012B\x02\u17EF\u17ED\x03\x02\x02\x02\u17F0\u17F3\x03\x02\x02\x02" +
		"\u17F1\u17EF\x03\x02\x02\x02\u17F1\u17F2\x03\x02\x02\x02\u17F2\u17F4\x03" +
		"\x02\x02\x02\u17F3\u17F1\x03\x02\x02\x02\u17F4\u17F5\x07\u03D1\x02\x02" +
		"\u17F5\u180F\x03\x02\x02\x02\u17F6\u17F7\x07\u01ED\x02\x02\u17F7\u17F8" +
		"\x07\u03D0\x02\x02\u17F8\u17FB\x05\u0254\u012B\x02\u17F9\u17FA\x07\u03D2" +
		"\x02\x02\u17FA\u17FC\x05\u0254\u012B\x02\u17FB\u17F9\x03\x02\x02\x02\u17FC" +
		"\u17FD\x03\x02\x02\x02\u17FD\u17FB\x03\x02\x02\x02\u17FD\u17FE\x03\x02" +
		"\x02\x02\u17FE\u17FF\x03\x02\x02\x02\u17FF\u1800\x07\u03D1\x02\x02\u1800" +
		"\u180F\x03\x02\x02\x02\u1801\u1802\x075\x02\x02\u1802\u1803\x07\u03D0" +
		"\x02\x02\u1803\u1804\x05\xB4[\x02\u1804\u1805\x07\u03D1\x02\x02\u1805" +
		"\u180F\x03\x02\x02\x02\u1806\u1807\x07\u03D0\x02\x02\u1807\u1808\x05\xB4" +
		"[\x02\u1808\u1809\x07\u03D1\x02\x02\u1809\u180F\x03\x02\x02\x02\u180A" +
		"\u180B\x07L\x02\x02\u180B\u180C\x05\u0254\u012B\x02\u180C\u180D\x05<\x1F" +
		"\x02\u180D\u180F\x03\x02\x02\x02\u180E\u17E1\x03\x02\x02\x02\u180E\u17E3" +
		"\x03\x02\x02\x02\u180E\u17E4\x03\x02\x02\x02\u180E\u17E5\x03\x02\x02\x02" +
		"\u180E\u17E6\x03\x02\x02\x02\u180E\u17E9\x03\x02\x02\x02\u180E\u17EB\x03" +
		"\x02\x02\x02\u180E\u17F6\x03\x02\x02\x02\u180E\u1801\x03\x02\x02\x02\u180E" +
		"\u1806\x03\x02\x02\x02\u180E\u180A\x03\x02\x02\x02\u180F\u181D\x03\x02" +
		"\x02\x02\u1810\u1811\f\x04\x02\x02\u1811\u1812\x05\u0260\u0131\x02\u1812" +
		"\u1813\x05\u0258\u012D\x05\u1813\u181C\x03\x02\x02\x02\u1814\u1815\f\x03" +
		"\x02\x02\u1815\u1816\x05\u0262\u0132\x02\u1816\u1817\x05\u0258\u012D\x04" +
		"\u1817\u181C\x03\x02\x02\x02\u1818\u1819\f\r\x02\x02\u1819\u181A\x07\x1A" +
		"\x02\x02\u181A\u181C\x05\u01FA\xFE\x02\u181B\u1810\x03\x02\x02\x02\u181B" +
		"\u1814\x03\x02\x02\x02\u181B\u1818\x03\x02\x02\x02\u181C\u181F\x03\x02" +
		"\x02\x02\u181D\u181B\x03\x02\x02\x02\u181D\u181E\x03\x02\x02\x02\u181E" +
		"\u0259\x03\x02\x02\x02\u181F\u181D\x03\x02\x02\x02\u1820\u1821\ts\x02" +
		"\x02\u1821\u025B\x03\x02\x02\x02\u1822\u1831\x07\u03C7\x02\x02\u1823\u1831" +
		"\x07\u03C8\x02\x02\u1824\u1831\x07\u03C9\x02\x02\u1825\u1826\x07\u03C9" +
		"\x02\x02\u1826\u1831\x07\u03C7\x02\x02\u1827\u1828\x07\u03C8\x02\x02\u1828" +
		"\u1831\x07\u03C7\x02\x02\u1829\u182A\x07\u03C9\x02\x02\u182A\u1831\x07" +
		"\u03C8\x02\x02\u182B\u182C\x07\u03CA\x02\x02\u182C\u1831\x07\u03C7\x02" +
		"\x02\u182D\u182E\x07\u03C9\x02\x02\u182E\u182F\x07\u03C7\x02\x02\u182F" +
		"\u1831\x07\u03C8\x02\x02\u1830\u1822\x03\x02\x02\x02\u1830\u1823\x03\x02" +
		"\x02\x02\u1830\u1824\x03\x02\x02\x02\u1830\u1825\x03\x02\x02\x02\u1830" +
		"\u1827\x03\x02\x02\x02\u1830\u1829\x03\x02\x02\x02\u1830\u182B\x03\x02" +
		"\x02\x02\u1830\u182D\x03\x02\x02\x02\u1831\u025D\x03\x02\x02\x02\u1832" +
		"\u183A\x07\f\x02\x02\u1833\u1834\x07\u03CD\x02\x02\u1834\u183A\x07\u03CD" +
		"\x02\x02\u1835\u183A\x07\xAC\x02\x02\u1836\u183A\x07l\x02\x02\u1837\u1838" +
		"\x07\u03CC\x02\x02\u1838\u183A\x07\u03CC\x02\x02\u1839\u1832\x03\x02\x02" +
		"\x02\u1839\u1833\x03\x02\x02\x02\u1839\u1835\x03\x02\x02\x02\u1839\u1836" +
		"\x03\x02\x02\x02\u1839\u1837\x03\x02\x02\x02\u183A\u025F\x03\x02\x02\x02" +
		"\u183B\u183C\x07\u03C9\x02\x02\u183C\u1843\x07\u03C9\x02\x02\u183D\u183E" +
		"\x07\u03C8\x02\x02\u183E\u1843\x07\u03C8\x02\x02\u183F\u1843\x07\u03CD" +
		"\x02\x02\u1840\u1843\x07\u03CE\x02\x02\u1841\u1843\x07\u03CC\x02\x02\u1842" +
		"\u183B\x03\x02\x02\x02\u1842\u183D\x03\x02\x02\x02\u1842\u183F\x03\x02" +
		"\x02\x02\u1842\u1840\x03\x02\x02\x02\u1842\u1841\x03\x02\x02\x02\u1843" +
		"\u0261\x03\x02\x02\x02\u1844\u1845\tt\x02\x02\u1845\u0263\x03\x02\x02" +
		"\x02\u1846\u1847\tu\x02\x02\u1847\u0265\x03\x02\x02\x02\u1848\u1849\t" +
		"v\x02\x02\u1849\u0267\x03\x02\x02\x02\u184A\u184B\tw\x02\x02\u184B\u0269" +
		"\x03\x02\x02\x02\u184C\u184D\tx\x02\x02\u184D\u026B\x03\x02\x02\x02\u184E" +
		"\u184F\ty\x02\x02\u184F\u026D\x03\x02\x02\x02\u1850\u1851\tz\x02\x02\u1851" +
		"\u026F\x03\x02\x02\x02\u1852\u1853\t{\x02\x02\u1853\u0271\x03\x02\x02" +
		"\x02\u038C\u0273\u0276\u027C\u027F\u0282\u0284\u0289\u028C\u028F\u0298" +
		"\u02BF\u02CB\u02D6\u02E7\u02EC\u02F8\u0313\u031A\u031F\u0325\u032A\u032E" +
		"\u0337\u033A\u033D\u0341\u0348\u034B\u0350\u0358\u035D\u0362\u0365\u0367" +
		"\u0373\u0376\u037A\u037D\u0381\u0384\u0388\u038B\u038E\u0392\u0395\u0399" +
		"\u039F\u03A5\u03AB\u03B2\u03B9\u03BF\u03C5\u03CE\u03D3\u03E3\u03EA\u03EE" +
		"\u03F8\u03FC\u0400\u0404\u0408\u040D\u0410\u0413\u0416\u0419\u041F\u0423" +
		"\u0429\u042E\u0431\u0434\u0436\u0441\u0445\u0448\u0456\u0459\u045D\u0460" +
		"\u0464\u0467\u046B\u046E\u0472\u0475\u0478\u047C\u047F\u0483\u0489\u0496" +
		"\u049D\u04A2\u04A5\u04AA\u04B2\u04B8\u04BC\u04BF\u04C4\u04C7\u04CB\u04CE" +
		"\u04D2\u04D5\u04DD\u04DF\u04E6\u04EC\u04F4\u04F7\u04FE\u0501\u0503\u0509" +
		"\u050F\u0520\u0527\u052E\u0539\u053C\u0549\u0556\u055B\u056B\u0573\u057D" +
		"\u0583\u058D\u0590\u0595\u05A2\u05A9\u05AE\u05B2\u05B4\u05B9\u05BC\u05C2" +
		"\u05C7\u05C9\u05CD\u05D0\u05D3\u05D9\u05DE\u05E0\u05E5\u05EC\u05EE\u05F5" +
		"\u05FA\u05FE\u0601\u0609\u0611\u0613\u061B\u061F\u0622\u0628\u062D\u0630" +
		"\u0636\u0639\u063D\u0642\u0647\u064B\u0650\u0653\u0657\u065B\u065F\u0663" +
		"\u0668\u066D\u0672\u0678\u067D\u0682\u0688\u068D\u0692\u0697\u069C\u06A1" +
		"\u06A6\u06AB\u06B0\u06B5\u06BA\u06C0\u06C5\u06CB\u06D5\u06DC\u06DE\u06E6" +
		"\u06EB\u06EE\u06F6\u06FC\u070C\u0718\u071A\u071D\u0725\u072B\u0731\u073E" +
		"\u0745\u074D\u0750\u075B\u0763\u0766\u0772\u0779\u0781\u0784\u0790\u0797" +
		"\u079F\u07A2\u07A9\u07B1\u07B4\u07B6\u07BB\u07C3\u07CC\u07D0\u07D4\u07D9" +
		"\u07DF\u07E5\u07EA\u07EF\u07F4\u07F9\u07FC\u0801\u0806\u0810\u0814\u081B" +
		"\u0820\u0823\u0828\u082B\u082F\u0833\u083B\u084E\u0851\u0854\u0858\u0862" +
		"\u086F\u0876\u0879\u0882\u0885\u0888\u0893\u0896\u089A\u08A2\u08A5\u08AA" +
		"\u08B2\u08B8\u08BC\u08C0\u08C5\u08CA\u08D1\u08D5\u08E0\u08E8\u08EB\u08F1" +
		"\u08F7\u08F9\u08FE\u0904\u090A\u090C\u0910\u0913\u0916\u091C\u0922\u0925" +
		"\u092B\u0931\u0933\u0938\u0940\u0942\u094B\u0950\u0958\u095C\u0964\u096E" +
		"\u0973\u097A\u097E\u0982\u099A\u099E\u09AA\u09AD\u09B6\u09C7\u09D3\u09DA" +
		"\u09E1\u09F0\u09FD\u0A03\u0A09\u0A0F\u0A15\u0A1B\u0A21\u0A26\u0A2D\u0A34" +
		"\u0A3B\u0A40\u0A43\u0A45\u0A53\u0A5A\u0A61\u0A67\u0A6B\u0A6F\u0A76\u0A79" +
		"\u0A7E\u0A85\u0A8C\u0A90\u0A99\u0AA2\u0AAB\u0AAE\u0AB2\u0ABB\u0ABF\u0AC2" +
		"\u0AC5\u0ACD\u0AD3\u0ADC\u0ADF\u0AEA\u0AED\u0AF2\u0AF5\u0AFA\u0B04\u0B09" +
		"\u0B0F\u0B11\u0B17\u0B19\u0B1F\u0B27\u0B2C\u0B34\u0B37\u0B3C\u0B3F\u0B44" +
		"\u0B4C\u0B54\u0B5A\u0B62\u0B67\u0B6F\u0B72\u0B76\u0B79\u0B81\u0B87\u0B90" +
		"\u0B93\u0B97\u0B9B\u0BA1\u0BA5\u0BA9\u0BAB\u0BAE\u0BB1\u0BB4\u0BBA\u0BBE" +
		"\u0BC1\u0BC4\u0BC7\u0BCA\u0BCC\u0BD0\u0BDE\u0BE1\u0BE7\u0BEB\u0BF3\u0BF7" +
		"\u0BFA\u0BFD\u0C06\u0C0A\u0C0D\u0C11\u0C15\u0C18\u0C1B\u0C20\u0C26\u0C2A" +
		"\u0C34\u0C3A\u0C3E\u0C44\u0C48\u0C4E\u0C51\u0C5D\u0C61\u0C65\u0C6D\u0C71" +
		"\u0C79\u0C7C\u0C80\u0C83\u0C8B\u0C90\u0C93\u0C96\u0C9A\u0C9D\u0CA6\u0CAB" +
		"\u0CB4\u0CB9\u0CC0\u0CC7\u0CCF\u0CD4\u0CDC\u0CDF\u0CE2\u0CE9\u0CEC\u0CF3" +
		"\u0CF6\u0CFE\u0D04\u0D0F\u0D12\u0D1D\u0D23\u0D27\u0D32\u0D37\u0D39\u0D3D" +
		"\u0D47\u0D51\u0D57\u0D5C\u0D5F\u0D62\u0D65\u0D6B\u0D70\u0D73\u0D76\u0D79" +
		"\u0D7B\u0D81\u0D86\u0D89\u0D8C\u0D90\u0D96\u0D9A\u0DA4\u0DA8\u0DAE\u0DB7" +
		"\u0DBA\u0DBE\u0DC1\u0DC5\u0DC9\u0DCC\u0DCE\u0DD6\u0DE2\u0DE8\u0DEA\u0DF0" +
		"\u0DF2\u0DF4\u0DFA\u0E02\u0E0A\u0E10\u0E19\u0E1E\u0E20\u0E24\u0E28\u0E2E" +
		"\u0E35\u0E39\u0E42\u0E45\u0E49\u0E4D\u0E51\u0E54\u0E57\u0E5A\u0E5E\u0E62" +
		"\u0E65\u0E68\u0E6B\u0E72\u0E76\u0E85\u0E92\u0E9A\u0EA4\u0EA8\u0EAB\u0EB1" +
		"\u0EB4\u0EB7\u0EC0\u0EC9\u0ED3\u0ED7\u0EE1\u0EEB\u0EF3\u0EF6\u0EFF\u0F02" +
		"\u0F06\u0F0B\u0F0F\u0F18\u0F1B\u0F3A\u0F3D\u0F40\u0F78\u0F7D\u0F99\u0FA7" +
		"\u0FAE\u0FB2\u0FB8\u0FC0\u0FC2\u0FCD\u0FD7\u0FDE\u0FE4\u0FEC\u0FF1\u0FF9" +
		"\u1001\u1009\u1011\u1017\u101A\u101E\u1023\u1028\u102E\u1030\u103B\u1040" +
		"\u1047\u1049\u1057\u105D\u1062\u1067\u106D\u1074\u107C\u1084\u1089\u108F" +
		"\u1092\u109A\u10A1\u10AA\u10AD\u10BE\u10C6\u10CE\u10D2\u10D9\u10DF\u10E7" +
		"\u10F0\u10F6\u10FD\u1104\u1109\u110C\u110E\u1114\u1116\u111A\u111C\u111F" +
		"\u1128\u112E\u1135\u113C\u1141\u1144\u1146\u114C\u114E\u1152\u1154\u1157" +
		"\u115C\u1163\u116C\u1171\u117A\u1181\u1186\u1189\u118B\u1191\u1193\u1196" +
		"\u11A2\u11A8\u11B1\u11BA\u11BF\u11C8\u11CE\u11D9\u11DC\u11E8\u11EF\u11F4" +
		"\u1203\u120E\u1211\u121B\u1225\u122F\u1239\u123D\u1241\u124A\u1266\u1278" +
		"\u1280\u128B\u1292\u1296\u129D\u12A2\u12A5\u12A8\u12B1\u12B5\u12D3\u12DA" +
		"\u12DE\u12E5\u12E8\u12F2\u12FC\u1300\u1306\u1309\u130E\u1312\u1319\u131C" +
		"\u1322\u133A\u1347\u134A\u1354\u135C\u1360\u1367\u136A\u1373\u1379\u137F" +
		"\u1389\u138B\u1391\u1394\u1397\u13A3\u13A6\u13AC\u13AF\u13B7\u13BF\u13C5" +
		"\u13C9\u13D7\u13E3\u13EA\u13ED\u13F4\u13FB\u1400\u1405\u1410\u141B\u1421" +
		"\u1426\u1433\u1435\u143A\u143F\u1441\u1448\u144F\u1452\u1455\u145B\u145F" +
		"\u1465\u146B\u1478\u147D\u1485\u1488\u148E\u1495\u149A\u14A0\u14A7\u14A9" +
		"\u14AD\u14B3\u14B6\u14C0\u14C4\u14D8\u14DF\u14E1\u14E8\u14EA\u14EE\u14F3" +
		"\u14FE\u1503\u1509\u150C\u1510\u1515\u1518\u151C\u1520\u1522\u1527\u152C" +
		"\u1539\u153C\u1540\u1543\u1548\u154B\u154F\u1554\u1557\u155C\u155F\u1565" +
		"\u1568\u156C\u156F\u1572\u1576\u1579\u157C\u1580\u1583\u1586\u1589\u158D" +
		"\u1590\u1593\u1598\u159D\u15A2\u15A5\u15A8\u15B0\u15B7\u15BB\u15C0\u15C3" +
		"\u15C8\u15CC\u15CE\u15DE\u15E7\u15EF\u15F8\u1602\u160A\u1612\u161A\u1622" +
		"\u1627\u162E\u1630\u1635\u1638\u163D\u1640\u1644\u1652\u1659\u165E\u1680" +
		"\u1684\u168C\u1690\u1699\u16A1\u16A6\u16AE\u16B3\u16B8\u16BA\u16C3\u16C8" +
		"\u16D0\u16D5\u16DD\u16E5\u16E8\u16F2\u16FD\u170A\u1712\u1716\u171B\u1724" +
		"\u1727\u1733\u173B\u1745\u1748\u174C\u1750\u1769\u1774\u177B\u177F\u1786" +
		"\u178E\u1793\u179B\u17A1\u17AB\u17B8\u17BE\u17C4\u17D4\u17DA\u17DC\u17DE" +
		"\u17F1\u17FD\u180E\u181B\u181D\u1830\u1839\u1842";
	public static readonly _serializedATN: string = Utils.join(
		[
			MySqlParser._serializedATNSegment0,
			MySqlParser._serializedATNSegment1,
			MySqlParser._serializedATNSegment2,
			MySqlParser._serializedATNSegment3,
			MySqlParser._serializedATNSegment4,
			MySqlParser._serializedATNSegment5,
			MySqlParser._serializedATNSegment6,
			MySqlParser._serializedATNSegment7,
			MySqlParser._serializedATNSegment8,
			MySqlParser._serializedATNSegment9,
			MySqlParser._serializedATNSegment10,
			MySqlParser._serializedATNSegment11,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MySqlParser.__ATN) {
			MySqlParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MySqlParser._serializedATN));
		}

		return MySqlParser.__ATN;
	}

}

export class RootContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(MySqlParser.EOF, 0); }
	public sqlStatements(): SqlStatementsContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementsContext);
	}
	public MINUSMINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUSMINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_root; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoot) {
			listener.enterRoot(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoot) {
			listener.exitRoot(this);
		}
	}
}


export class SqlStatementsContext extends ParserRuleContext {
	public sqlStatement(): SqlStatementContext[];
	public sqlStatement(i: number): SqlStatementContext;
	public sqlStatement(i?: number): SqlStatementContext | SqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SqlStatementContext);
		} else {
			return this.getRuleContext(i, SqlStatementContext);
		}
	}
	public emptyStatement(): EmptyStatementContext[];
	public emptyStatement(i: number): EmptyStatementContext;
	public emptyStatement(i?: number): EmptyStatementContext | EmptyStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EmptyStatementContext);
		} else {
			return this.getRuleContext(i, EmptyStatementContext);
		}
	}
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SEMI);
		} else {
			return this.getToken(MySqlParser.SEMI, i);
		}
	}
	public MINUSMINUS(): TerminalNode[];
	public MINUSMINUS(i: number): TerminalNode;
	public MINUSMINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.MINUSMINUS);
		} else {
			return this.getToken(MySqlParser.MINUSMINUS, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_sqlStatements; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSqlStatements) {
			listener.enterSqlStatements(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSqlStatements) {
			listener.exitSqlStatements(this);
		}
	}
}


export class SqlStatementContext extends ParserRuleContext {
	public ddlStatement(): DdlStatementContext | undefined {
		return this.tryGetRuleContext(0, DdlStatementContext);
	}
	public dmlStatement(): DmlStatementContext | undefined {
		return this.tryGetRuleContext(0, DmlStatementContext);
	}
	public transactionStatement(): TransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, TransactionStatementContext);
	}
	public replicationStatement(): ReplicationStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplicationStatementContext);
	}
	public preparedStatement(): PreparedStatementContext | undefined {
		return this.tryGetRuleContext(0, PreparedStatementContext);
	}
	public administrationStatement(): AdministrationStatementContext | undefined {
		return this.tryGetRuleContext(0, AdministrationStatementContext);
	}
	public utilityStatement(): UtilityStatementContext | undefined {
		return this.tryGetRuleContext(0, UtilityStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_sqlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSqlStatement) {
			listener.enterSqlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSqlStatement) {
			listener.exitSqlStatement(this);
		}
	}
}


export class EmptyStatementContext extends ParserRuleContext {
	public SEMI(): TerminalNode { return this.getToken(MySqlParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_emptyStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterEmptyStatement) {
			listener.enterEmptyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitEmptyStatement) {
			listener.exitEmptyStatement(this);
		}
	}
}


export class DdlStatementContext extends ParserRuleContext {
	public createDatabase(): CreateDatabaseContext | undefined {
		return this.tryGetRuleContext(0, CreateDatabaseContext);
	}
	public createEvent(): CreateEventContext | undefined {
		return this.tryGetRuleContext(0, CreateEventContext);
	}
	public createIndex(): CreateIndexContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexContext);
	}
	public createLogfileGroup(): CreateLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, CreateLogfileGroupContext);
	}
	public createProcedure(): CreateProcedureContext | undefined {
		return this.tryGetRuleContext(0, CreateProcedureContext);
	}
	public createFunction(): CreateFunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateFunctionContext);
	}
	public createServer(): CreateServerContext | undefined {
		return this.tryGetRuleContext(0, CreateServerContext);
	}
	public createTable(): CreateTableContext | undefined {
		return this.tryGetRuleContext(0, CreateTableContext);
	}
	public createTablespaceInnodb(): CreateTablespaceInnodbContext | undefined {
		return this.tryGetRuleContext(0, CreateTablespaceInnodbContext);
	}
	public createTablespaceNdb(): CreateTablespaceNdbContext | undefined {
		return this.tryGetRuleContext(0, CreateTablespaceNdbContext);
	}
	public createTrigger(): CreateTriggerContext | undefined {
		return this.tryGetRuleContext(0, CreateTriggerContext);
	}
	public createView(): CreateViewContext | undefined {
		return this.tryGetRuleContext(0, CreateViewContext);
	}
	public alterDatabase(): AlterDatabaseContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseContext);
	}
	public alterEvent(): AlterEventContext | undefined {
		return this.tryGetRuleContext(0, AlterEventContext);
	}
	public alterFunction(): AlterFunctionContext | undefined {
		return this.tryGetRuleContext(0, AlterFunctionContext);
	}
	public alterInstance(): AlterInstanceContext | undefined {
		return this.tryGetRuleContext(0, AlterInstanceContext);
	}
	public alterLogfileGroup(): AlterLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, AlterLogfileGroupContext);
	}
	public alterProcedure(): AlterProcedureContext | undefined {
		return this.tryGetRuleContext(0, AlterProcedureContext);
	}
	public alterServer(): AlterServerContext | undefined {
		return this.tryGetRuleContext(0, AlterServerContext);
	}
	public alterTable(): AlterTableContext | undefined {
		return this.tryGetRuleContext(0, AlterTableContext);
	}
	public alterTablespace(): AlterTablespaceContext | undefined {
		return this.tryGetRuleContext(0, AlterTablespaceContext);
	}
	public alterView(): AlterViewContext | undefined {
		return this.tryGetRuleContext(0, AlterViewContext);
	}
	public dropDatabase(): DropDatabaseContext | undefined {
		return this.tryGetRuleContext(0, DropDatabaseContext);
	}
	public dropEvent(): DropEventContext | undefined {
		return this.tryGetRuleContext(0, DropEventContext);
	}
	public dropIndex(): DropIndexContext | undefined {
		return this.tryGetRuleContext(0, DropIndexContext);
	}
	public dropLogfileGroup(): DropLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, DropLogfileGroupContext);
	}
	public dropProcedure(): DropProcedureContext | undefined {
		return this.tryGetRuleContext(0, DropProcedureContext);
	}
	public dropFunction(): DropFunctionContext | undefined {
		return this.tryGetRuleContext(0, DropFunctionContext);
	}
	public dropServer(): DropServerContext | undefined {
		return this.tryGetRuleContext(0, DropServerContext);
	}
	public dropTable(): DropTableContext | undefined {
		return this.tryGetRuleContext(0, DropTableContext);
	}
	public dropTablespace(): DropTablespaceContext | undefined {
		return this.tryGetRuleContext(0, DropTablespaceContext);
	}
	public dropTrigger(): DropTriggerContext | undefined {
		return this.tryGetRuleContext(0, DropTriggerContext);
	}
	public dropView(): DropViewContext | undefined {
		return this.tryGetRuleContext(0, DropViewContext);
	}
	public renameTable(): RenameTableContext | undefined {
		return this.tryGetRuleContext(0, RenameTableContext);
	}
	public truncateTable(): TruncateTableContext | undefined {
		return this.tryGetRuleContext(0, TruncateTableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ddlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDdlStatement) {
			listener.enterDdlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDdlStatement) {
			listener.exitDdlStatement(this);
		}
	}
}


export class DmlStatementContext extends ParserRuleContext {
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public callStatement(): CallStatementContext | undefined {
		return this.tryGetRuleContext(0, CallStatementContext);
	}
	public loadDataStatement(): LoadDataStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadDataStatementContext);
	}
	public loadXmlStatement(): LoadXmlStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadXmlStatementContext);
	}
	public doStatement(): DoStatementContext | undefined {
		return this.tryGetRuleContext(0, DoStatementContext);
	}
	public handlerStatement(): HandlerStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dmlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDmlStatement) {
			listener.enterDmlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDmlStatement) {
			listener.exitDmlStatement(this);
		}
	}
}


export class TransactionStatementContext extends ParserRuleContext {
	public startTransaction(): StartTransactionContext | undefined {
		return this.tryGetRuleContext(0, StartTransactionContext);
	}
	public beginWork(): BeginWorkContext | undefined {
		return this.tryGetRuleContext(0, BeginWorkContext);
	}
	public commitWork(): CommitWorkContext | undefined {
		return this.tryGetRuleContext(0, CommitWorkContext);
	}
	public rollbackWork(): RollbackWorkContext | undefined {
		return this.tryGetRuleContext(0, RollbackWorkContext);
	}
	public savepointStatement(): SavepointStatementContext | undefined {
		return this.tryGetRuleContext(0, SavepointStatementContext);
	}
	public rollbackStatement(): RollbackStatementContext | undefined {
		return this.tryGetRuleContext(0, RollbackStatementContext);
	}
	public releaseStatement(): ReleaseStatementContext | undefined {
		return this.tryGetRuleContext(0, ReleaseStatementContext);
	}
	public lockTables(): LockTablesContext | undefined {
		return this.tryGetRuleContext(0, LockTablesContext);
	}
	public unlockTables(): UnlockTablesContext | undefined {
		return this.tryGetRuleContext(0, UnlockTablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionStatement) {
			listener.enterTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionStatement) {
			listener.exitTransactionStatement(this);
		}
	}
}


export class ReplicationStatementContext extends ParserRuleContext {
	public changeMaster(): ChangeMasterContext | undefined {
		return this.tryGetRuleContext(0, ChangeMasterContext);
	}
	public changeReplicationFilter(): ChangeReplicationFilterContext | undefined {
		return this.tryGetRuleContext(0, ChangeReplicationFilterContext);
	}
	public purgeBinaryLogs(): PurgeBinaryLogsContext | undefined {
		return this.tryGetRuleContext(0, PurgeBinaryLogsContext);
	}
	public resetMaster(): ResetMasterContext | undefined {
		return this.tryGetRuleContext(0, ResetMasterContext);
	}
	public resetSlave(): ResetSlaveContext | undefined {
		return this.tryGetRuleContext(0, ResetSlaveContext);
	}
	public startSlave(): StartSlaveContext | undefined {
		return this.tryGetRuleContext(0, StartSlaveContext);
	}
	public stopSlave(): StopSlaveContext | undefined {
		return this.tryGetRuleContext(0, StopSlaveContext);
	}
	public startGroupReplication(): StartGroupReplicationContext | undefined {
		return this.tryGetRuleContext(0, StartGroupReplicationContext);
	}
	public stopGroupReplication(): StopGroupReplicationContext | undefined {
		return this.tryGetRuleContext(0, StopGroupReplicationContext);
	}
	public xaStartTransaction(): XaStartTransactionContext | undefined {
		return this.tryGetRuleContext(0, XaStartTransactionContext);
	}
	public xaEndTransaction(): XaEndTransactionContext | undefined {
		return this.tryGetRuleContext(0, XaEndTransactionContext);
	}
	public xaPrepareStatement(): XaPrepareStatementContext | undefined {
		return this.tryGetRuleContext(0, XaPrepareStatementContext);
	}
	public xaCommitWork(): XaCommitWorkContext | undefined {
		return this.tryGetRuleContext(0, XaCommitWorkContext);
	}
	public xaRollbackWork(): XaRollbackWorkContext | undefined {
		return this.tryGetRuleContext(0, XaRollbackWorkContext);
	}
	public xaRecoverWork(): XaRecoverWorkContext | undefined {
		return this.tryGetRuleContext(0, XaRecoverWorkContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_replicationStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReplicationStatement) {
			listener.enterReplicationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReplicationStatement) {
			listener.exitReplicationStatement(this);
		}
	}
}


export class PreparedStatementContext extends ParserRuleContext {
	public prepareStatement(): PrepareStatementContext | undefined {
		return this.tryGetRuleContext(0, PrepareStatementContext);
	}
	public executeStatement(): ExecuteStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecuteStatementContext);
	}
	public deallocatePrepare(): DeallocatePrepareContext | undefined {
		return this.tryGetRuleContext(0, DeallocatePrepareContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_preparedStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPreparedStatement) {
			listener.enterPreparedStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPreparedStatement) {
			listener.exitPreparedStatement(this);
		}
	}
}


export class CompoundStatementContext extends ParserRuleContext {
	public blockStatement(): BlockStatementContext | undefined {
		return this.tryGetRuleContext(0, BlockStatementContext);
	}
	public caseStatement(): CaseStatementContext | undefined {
		return this.tryGetRuleContext(0, CaseStatementContext);
	}
	public ifStatement(): IfStatementContext | undefined {
		return this.tryGetRuleContext(0, IfStatementContext);
	}
	public leaveStatement(): LeaveStatementContext | undefined {
		return this.tryGetRuleContext(0, LeaveStatementContext);
	}
	public loopStatement(): LoopStatementContext | undefined {
		return this.tryGetRuleContext(0, LoopStatementContext);
	}
	public repeatStatement(): RepeatStatementContext | undefined {
		return this.tryGetRuleContext(0, RepeatStatementContext);
	}
	public whileStatement(): WhileStatementContext | undefined {
		return this.tryGetRuleContext(0, WhileStatementContext);
	}
	public iterateStatement(): IterateStatementContext | undefined {
		return this.tryGetRuleContext(0, IterateStatementContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public cursorStatement(): CursorStatementContext | undefined {
		return this.tryGetRuleContext(0, CursorStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_compoundStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCompoundStatement) {
			listener.enterCompoundStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCompoundStatement) {
			listener.exitCompoundStatement(this);
		}
	}
}


export class AdministrationStatementContext extends ParserRuleContext {
	public alterUser(): AlterUserContext | undefined {
		return this.tryGetRuleContext(0, AlterUserContext);
	}
	public createUser(): CreateUserContext | undefined {
		return this.tryGetRuleContext(0, CreateUserContext);
	}
	public dropUser(): DropUserContext | undefined {
		return this.tryGetRuleContext(0, DropUserContext);
	}
	public grantStatement(): GrantStatementContext | undefined {
		return this.tryGetRuleContext(0, GrantStatementContext);
	}
	public grantProxy(): GrantProxyContext | undefined {
		return this.tryGetRuleContext(0, GrantProxyContext);
	}
	public renameUser(): RenameUserContext | undefined {
		return this.tryGetRuleContext(0, RenameUserContext);
	}
	public revokeStatement(): RevokeStatementContext | undefined {
		return this.tryGetRuleContext(0, RevokeStatementContext);
	}
	public revokeProxy(): RevokeProxyContext | undefined {
		return this.tryGetRuleContext(0, RevokeProxyContext);
	}
	public analyzeTable(): AnalyzeTableContext | undefined {
		return this.tryGetRuleContext(0, AnalyzeTableContext);
	}
	public checkTable(): CheckTableContext | undefined {
		return this.tryGetRuleContext(0, CheckTableContext);
	}
	public checksumTable(): ChecksumTableContext | undefined {
		return this.tryGetRuleContext(0, ChecksumTableContext);
	}
	public optimizeTable(): OptimizeTableContext | undefined {
		return this.tryGetRuleContext(0, OptimizeTableContext);
	}
	public repairTable(): RepairTableContext | undefined {
		return this.tryGetRuleContext(0, RepairTableContext);
	}
	public createUdfunction(): CreateUdfunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateUdfunctionContext);
	}
	public installPlugin(): InstallPluginContext | undefined {
		return this.tryGetRuleContext(0, InstallPluginContext);
	}
	public uninstallPlugin(): UninstallPluginContext | undefined {
		return this.tryGetRuleContext(0, UninstallPluginContext);
	}
	public setStatement(): SetStatementContext | undefined {
		return this.tryGetRuleContext(0, SetStatementContext);
	}
	public showStatement(): ShowStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStatementContext);
	}
	public binlogStatement(): BinlogStatementContext | undefined {
		return this.tryGetRuleContext(0, BinlogStatementContext);
	}
	public cacheIndexStatement(): CacheIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, CacheIndexStatementContext);
	}
	public flushStatement(): FlushStatementContext | undefined {
		return this.tryGetRuleContext(0, FlushStatementContext);
	}
	public killStatement(): KillStatementContext | undefined {
		return this.tryGetRuleContext(0, KillStatementContext);
	}
	public loadIndexIntoCache(): LoadIndexIntoCacheContext | undefined {
		return this.tryGetRuleContext(0, LoadIndexIntoCacheContext);
	}
	public resetStatement(): ResetStatementContext | undefined {
		return this.tryGetRuleContext(0, ResetStatementContext);
	}
	public shutdownStatement(): ShutdownStatementContext | undefined {
		return this.tryGetRuleContext(0, ShutdownStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_administrationStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAdministrationStatement) {
			listener.enterAdministrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAdministrationStatement) {
			listener.exitAdministrationStatement(this);
		}
	}
}


export class UtilityStatementContext extends ParserRuleContext {
	public simpleDescribeStatement(): SimpleDescribeStatementContext | undefined {
		return this.tryGetRuleContext(0, SimpleDescribeStatementContext);
	}
	public fullDescribeStatement(): FullDescribeStatementContext | undefined {
		return this.tryGetRuleContext(0, FullDescribeStatementContext);
	}
	public helpStatement(): HelpStatementContext | undefined {
		return this.tryGetRuleContext(0, HelpStatementContext);
	}
	public useStatement(): UseStatementContext | undefined {
		return this.tryGetRuleContext(0, UseStatementContext);
	}
	public signalStatement(): SignalStatementContext | undefined {
		return this.tryGetRuleContext(0, SignalStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_utilityStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUtilityStatement) {
			listener.enterUtilityStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUtilityStatement) {
			listener.exitUtilityStatement(this);
		}
	}
}


export class CreateDatabaseContext extends ParserRuleContext {
	public _dbFormat: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDatabase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateDatabase) {
			listener.enterCreateDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateDatabase) {
			listener.exitCreateDatabase(this);
		}
	}
}


export class CreateEventContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public EVENT(): TerminalNode { return this.getToken(MySqlParser.EVENT, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ON);
		} else {
			return this.getToken(MySqlParser.ON, i);
		}
	}
	public SCHEDULE(): TerminalNode { return this.getToken(MySqlParser.SCHEDULE, 0); }
	public scheduleExpression(): ScheduleExpressionContext {
		return this.getRuleContext(0, ScheduleExpressionContext);
	}
	public DO(): TerminalNode { return this.getToken(MySqlParser.DO, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPLETION, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRESERVE, 0); }
	public enableType(): EnableTypeContext | undefined {
		return this.tryGetRuleContext(0, EnableTypeContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createEvent; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateEvent) {
			listener.enterCreateEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateEvent) {
			listener.exitCreateEvent(this);
		}
	}
}


export class CreateIndexContext extends ParserRuleContext {
	public _intimeAction: Token;
	public _indexCategory: Token;
	public _algType: Token;
	public _lockType: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public ALGORITHM(): TerminalNode[];
	public ALGORITHM(i: number): TerminalNode;
	public ALGORITHM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ALGORITHM);
		} else {
			return this.getToken(MySqlParser.ALGORITHM, i);
		}
	}
	public LOCK(): TerminalNode[];
	public LOCK(i: number): TerminalNode;
	public LOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LOCK);
		} else {
			return this.getToken(MySqlParser.LOCK, i);
		}
	}
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNIQUE, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SPATIAL, 0); }
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.DEFAULT);
		} else {
			return this.getToken(MySqlParser.DEFAULT, i);
		}
	}
	public INPLACE(): TerminalNode[];
	public INPLACE(i: number): TerminalNode;
	public INPLACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.INPLACE);
		} else {
			return this.getToken(MySqlParser.INPLACE, i);
		}
	}
	public COPY(): TerminalNode[];
	public COPY(i: number): TerminalNode;
	public COPY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COPY);
		} else {
			return this.getToken(MySqlParser.COPY, i);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.NONE);
		} else {
			return this.getToken(MySqlParser.NONE, i);
		}
	}
	public SHARED(): TerminalNode[];
	public SHARED(i: number): TerminalNode;
	public SHARED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SHARED);
		} else {
			return this.getToken(MySqlParser.SHARED, i);
		}
	}
	public EXCLUSIVE(): TerminalNode[];
	public EXCLUSIVE(i: number): TerminalNode;
	public EXCLUSIVE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EXCLUSIVE);
		} else {
			return this.getToken(MySqlParser.EXCLUSIVE, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createIndex; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateIndex) {
			listener.enterCreateIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateIndex) {
			listener.exitCreateIndex(this);
		}
	}
}


export class CreateLogfileGroupContext extends ParserRuleContext {
	public _undoFile: Token;
	public _initSize: FileSizeLiteralContext;
	public _undoSize: FileSizeLiteralContext;
	public _redoSize: FileSizeLiteralContext;
	public _comment: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public UNDOFILE(): TerminalNode { return this.getToken(MySqlParser.UNDOFILE, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public UNDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
	public REDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NODEGROUP, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext[];
	public fileSizeLiteral(i: number): FileSizeLiteralContext;
	public fileSizeLiteral(i?: number): FileSizeLiteralContext | FileSizeLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileSizeLiteralContext);
		} else {
			return this.getRuleContext(i, FileSizeLiteralContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createLogfileGroup; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateLogfileGroup) {
			listener.enterCreateLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateLogfileGroup) {
			listener.exitCreateLogfileGroup(this);
		}
	}
}


export class CreateProcedureContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MySqlParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public procedureParameter(): ProcedureParameterContext[];
	public procedureParameter(i: number): ProcedureParameterContext;
	public procedureParameter(i?: number): ProcedureParameterContext | ProcedureParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureParameterContext);
		} else {
			return this.getRuleContext(i, ProcedureParameterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createProcedure; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateProcedure) {
			listener.enterCreateProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateProcedure) {
			listener.exitCreateProcedure(this);
		}
	}
}


export class CreateFunctionContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public RETURNS(): TerminalNode { return this.getToken(MySqlParser.RETURNS, 0); }
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public routineBody(): RoutineBodyContext | undefined {
		return this.tryGetRuleContext(0, RoutineBodyContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public functionParameter(): FunctionParameterContext[];
	public functionParameter(i: number): FunctionParameterContext;
	public functionParameter(i?: number): FunctionParameterContext | FunctionParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionParameterContext);
		} else {
			return this.getRuleContext(i, FunctionParameterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateFunction) {
			listener.enterCreateFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateFunction) {
			listener.exitCreateFunction(this);
		}
	}
}


export class CreateServerContext extends ParserRuleContext {
	public _wrapperName: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public SERVER(): TerminalNode { return this.getToken(MySqlParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(MySqlParser.WRAPPER, 0); }
	public OPTIONS(): TerminalNode { return this.getToken(MySqlParser.OPTIONS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public serverOption(): ServerOptionContext[];
	public serverOption(i: number): ServerOptionContext;
	public serverOption(i?: number): ServerOptionContext | ServerOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ServerOptionContext);
		} else {
			return this.getRuleContext(i, ServerOptionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public MYSQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYSQL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createServer; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateServer) {
			listener.enterCreateServer(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateServer) {
			listener.exitCreateServer(this);
		}
	}
}


export class CreateTableContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTable; }
	public copyFrom(ctx: CreateTableContext): void {
		super.copyFrom(ctx);
	}
}
export class CopyCreateTableContext extends CreateTableContext {
	public _parenthesisTable: TableNameContext;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIKE, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCopyCreateTable) {
			listener.enterCopyCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCopyCreateTable) {
			listener.exitCopyCreateTable(this);
		}
	}
}
export class QueryCreateTableContext extends CreateTableContext {
	public _keyViolate: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public createDefinitions(): CreateDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, CreateDefinitionsContext);
	}
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQueryCreateTable) {
			listener.enterQueryCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQueryCreateTable) {
			listener.exitQueryCreateTable(this);
		}
	}
}
export class ColumnCreateTableContext extends CreateTableContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public createDefinitions(): CreateDefinitionsContext {
		return this.getRuleContext(0, CreateDefinitionsContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterColumnCreateTable) {
			listener.enterColumnCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitColumnCreateTable) {
			listener.exitColumnCreateTable(this);
		}
	}
}


export class CreateTablespaceInnodbContext extends ParserRuleContext {
	public _datafile: Token;
	public _fileBlockSize: FileSizeLiteralContext;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public DATAFILE(): TerminalNode { return this.getToken(MySqlParser.DATAFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public FILE_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTablespaceInnodb; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateTablespaceInnodb) {
			listener.enterCreateTablespaceInnodb(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateTablespaceInnodb) {
			listener.exitCreateTablespaceInnodb(this);
		}
	}
}


export class CreateTablespaceNdbContext extends ParserRuleContext {
	public _datafile: Token;
	public _extentSize: FileSizeLiteralContext;
	public _initialSize: FileSizeLiteralContext;
	public _autoextendSize: FileSizeLiteralContext;
	public _maxSize: FileSizeLiteralContext;
	public _comment: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public DATAFILE(): TerminalNode { return this.getToken(MySqlParser.DATAFILE, 0); }
	public USE(): TerminalNode { return this.getToken(MySqlParser.USE, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public EXTENT_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENT_SIZE, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public AUTOEXTEND_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
	public MAX_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_SIZE, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NODEGROUP, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext[];
	public fileSizeLiteral(i: number): FileSizeLiteralContext;
	public fileSizeLiteral(i?: number): FileSizeLiteralContext | FileSizeLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileSizeLiteralContext);
		} else {
			return this.getRuleContext(i, FileSizeLiteralContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTablespaceNdb; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateTablespaceNdb) {
			listener.enterCreateTablespaceNdb(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateTablespaceNdb) {
			listener.exitCreateTablespaceNdb(this);
		}
	}
}


export class CreateTriggerContext extends ParserRuleContext {
	public _thisTrigger: FullIdContext;
	public _triggerTime: Token;
	public _triggerEvent: Token;
	public _triggerPlace: Token;
	public _otherTrigger: FullIdContext;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(MySqlParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public EACH(): TerminalNode { return this.getToken(MySqlParser.EACH, 0); }
	public ROW(): TerminalNode { return this.getToken(MySqlParser.ROW, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELETE, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public FOLLOWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOLLOWS, 0); }
	public PRECEDES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRECEDES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createTrigger; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateTrigger) {
			listener.enterCreateTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateTrigger) {
			listener.exitCreateTrigger(this);
		}
	}
}


export class CreateViewContext extends ParserRuleContext {
	public _algType: Token;
	public _secContext: Token;
	public _checkOption: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(MySqlParser.VIEW, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public AS(): TerminalNode { return this.getToken(MySqlParser.AS, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECURITY, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDEFINED, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MERGE, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPTABLE, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createView; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateView) {
			listener.enterCreateView(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateView) {
			listener.exitCreateView(this);
		}
	}
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.DEFAULT);
		} else {
			return this.getToken(MySqlParser.DEFAULT, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDatabaseOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateDatabaseOption) {
			listener.enterCreateDatabaseOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateDatabaseOption) {
			listener.exitCreateDatabaseOption(this);
		}
	}
}


export class OwnerStatementContext extends ParserRuleContext {
	public DEFINER(): TerminalNode { return this.getToken(MySqlParser.DEFINER, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_USER, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ownerStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOwnerStatement) {
			listener.enterOwnerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOwnerStatement) {
			listener.exitOwnerStatement(this);
		}
	}
}


export class ScheduleExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_scheduleExpression; }
	public copyFrom(ctx: ScheduleExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PreciseScheduleContext extends ScheduleExpressionContext {
	public AT(): TerminalNode { return this.getToken(MySqlParser.AT, 0); }
	public timestampValue(): TimestampValueContext {
		return this.getRuleContext(0, TimestampValueContext);
	}
	public intervalExpr(): IntervalExprContext[];
	public intervalExpr(i: number): IntervalExprContext;
	public intervalExpr(i?: number): IntervalExprContext | IntervalExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalExprContext);
		} else {
			return this.getRuleContext(i, IntervalExprContext);
		}
	}
	constructor(ctx: ScheduleExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPreciseSchedule) {
			listener.enterPreciseSchedule(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPreciseSchedule) {
			listener.exitPreciseSchedule(this);
		}
	}
}
export class IntervalScheduleContext extends ScheduleExpressionContext {
	public _startTimestamp: TimestampValueContext;
	public _intervalExpr: IntervalExprContext;
	public _startIntervals: IntervalExprContext[] = [];
	public _endTimestamp: TimestampValueContext;
	public _endIntervals: IntervalExprContext[] = [];
	public EVERY(): TerminalNode { return this.getToken(MySqlParser.EVERY, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTS, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENDS, 0); }
	public timestampValue(): TimestampValueContext[];
	public timestampValue(i: number): TimestampValueContext;
	public timestampValue(i?: number): TimestampValueContext | TimestampValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TimestampValueContext);
		} else {
			return this.getRuleContext(i, TimestampValueContext);
		}
	}
	public intervalExpr(): IntervalExprContext[];
	public intervalExpr(i: number): IntervalExprContext;
	public intervalExpr(i?: number): IntervalExprContext | IntervalExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalExprContext);
		} else {
			return this.getRuleContext(i, IntervalExprContext);
		}
	}
	constructor(ctx: ScheduleExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalSchedule) {
			listener.enterIntervalSchedule(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalSchedule) {
			listener.exitIntervalSchedule(this);
		}
	}
}


export class TimestampValueContext extends ParserRuleContext {
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_timestampValue; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTimestampValue) {
			listener.enterTimestampValue(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTimestampValue) {
			listener.exitTimestampValue(this);
		}
	}
}


export class IntervalExprContext extends ParserRuleContext {
	public PLUS(): TerminalNode { return this.getToken(MySqlParser.PLUS, 0); }
	public INTERVAL(): TerminalNode { return this.getToken(MySqlParser.INTERVAL, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_intervalExpr; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalExpr) {
			listener.enterIntervalExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalExpr) {
			listener.exitIntervalExpr(this);
		}
	}
}


export class IntervalTypeContext extends ParserRuleContext {
	public intervalTypeBase(): IntervalTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, IntervalTypeBaseContext);
	}
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	public YEAR_MONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR_MONTH, 0); }
	public DAY_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_HOUR, 0); }
	public DAY_MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_MINUTE, 0); }
	public DAY_SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_SECOND, 0); }
	public HOUR_MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR_MINUTE, 0); }
	public HOUR_SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR_SECOND, 0); }
	public MINUTE_SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE_SECOND, 0); }
	public SECOND_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECOND_MICROSECOND, 0); }
	public MINUTE_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
	public HOUR_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR_MICROSECOND, 0); }
	public DAY_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY_MICROSECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_intervalType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalType) {
			listener.enterIntervalType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalType) {
			listener.exitIntervalType(this);
		}
	}
}


export class EnableTypeContext extends ParserRuleContext {
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISABLE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_enableType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterEnableType) {
			listener.enterEnableType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitEnableType) {
			listener.exitEnableType(this);
		}
	}
}


export class IndexTypeContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(MySqlParser.USING, 0); }
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BTREE, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HASH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexType) {
			listener.enterIndexType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexType) {
			listener.exitIndexType(this);
		}
	}
}


export class IndexOptionContext extends ParserRuleContext {
	public KEY_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARSER, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public INVISIBLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVISIBLE, 0); }
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VISIBLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexOption) {
			listener.enterIndexOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexOption) {
			listener.exitIndexOption(this);
		}
	}
}


export class ProcedureParameterContext extends ParserRuleContext {
	public _direction: Token;
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_procedureParameter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterProcedureParameter) {
			listener.enterProcedureParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitProcedureParameter) {
			listener.exitProcedureParameter(this);
		}
	}
}


export class FunctionParameterContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionParameter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionParameter) {
			listener.enterFunctionParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionParameter) {
			listener.exitFunctionParameter(this);
		}
	}
}


export class RoutineOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_routineOption; }
	public copyFrom(ctx: RoutineOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class RoutineCommentContext extends RoutineOptionContext {
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineComment) {
			listener.enterRoutineComment(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineComment) {
			listener.exitRoutineComment(this);
		}
	}
}
export class RoutineLanguageContext extends RoutineOptionContext {
	public LANGUAGE(): TerminalNode { return this.getToken(MySqlParser.LANGUAGE, 0); }
	public SQL(): TerminalNode { return this.getToken(MySqlParser.SQL, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineLanguage) {
			listener.enterRoutineLanguage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineLanguage) {
			listener.exitRoutineLanguage(this);
		}
	}
}
export class RoutineBehaviorContext extends RoutineOptionContext {
	public DETERMINISTIC(): TerminalNode { return this.getToken(MySqlParser.DETERMINISTIC, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineBehavior) {
			listener.enterRoutineBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineBehavior) {
			listener.exitRoutineBehavior(this);
		}
	}
}
export class RoutineDataContext extends RoutineOptionContext {
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTAINS, 0); }
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public READS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READS, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATA, 0); }
	public MODIFIES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODIFIES, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineData) {
			listener.enterRoutineData(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineData) {
			listener.exitRoutineData(this);
		}
	}
}
export class RoutineSecurityContext extends RoutineOptionContext {
	public _context: Token;
	public SQL(): TerminalNode { return this.getToken(MySqlParser.SQL, 0); }
	public SECURITY(): TerminalNode { return this.getToken(MySqlParser.SECURITY, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineSecurity) {
			listener.enterRoutineSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineSecurity) {
			listener.exitRoutineSecurity(this);
		}
	}
}


export class ServerOptionContext extends ParserRuleContext {
	public HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOST, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PASSWORD, 0); }
	public SOCKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOCKET, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OWNER, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PORT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_serverOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterServerOption) {
			listener.enterServerOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitServerOption) {
			listener.exitServerOption(this);
		}
	}
}


export class CreateDefinitionsContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public createDefinition(): CreateDefinitionContext[];
	public createDefinition(i: number): CreateDefinitionContext;
	public createDefinition(i?: number): CreateDefinitionContext | CreateDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDefinitionContext);
		} else {
			return this.getRuleContext(i, CreateDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDefinitions; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateDefinitions) {
			listener.enterCreateDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateDefinitions) {
			listener.exitCreateDefinitions(this);
		}
	}
}


export class CreateDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createDefinition; }
	public copyFrom(ctx: CreateDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class ColumnDeclarationContext extends CreateDefinitionContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterColumnDeclaration) {
			listener.enterColumnDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitColumnDeclaration) {
			listener.exitColumnDeclaration(this);
		}
	}
}
export class ConstraintDeclarationContext extends CreateDefinitionContext {
	public tableConstraint(): TableConstraintContext {
		return this.getRuleContext(0, TableConstraintContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstraintDeclaration) {
			listener.enterConstraintDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstraintDeclaration) {
			listener.exitConstraintDeclaration(this);
		}
	}
}
export class IndexDeclarationContext extends CreateDefinitionContext {
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		return this.getRuleContext(0, IndexColumnDefinitionContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexDeclaration) {
			listener.enterIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexDeclaration) {
			listener.exitIndexDeclaration(this);
		}
	}
}


export class ColumnDefinitionContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public columnConstraint(): ColumnConstraintContext[];
	public columnConstraint(i: number): ColumnConstraintContext;
	public columnConstraint(i?: number): ColumnConstraintContext | ColumnConstraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnConstraintContext);
		} else {
			return this.getRuleContext(i, ColumnConstraintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_columnDefinition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterColumnDefinition) {
			listener.enterColumnDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitColumnDefinition) {
			listener.exitColumnDefinition(this);
		}
	}
}


export class ColumnConstraintContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_columnConstraint; }
	public copyFrom(ctx: ColumnConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class NullColumnConstraintContext extends ColumnConstraintContext {
	public nullNotnull(): NullNotnullContext {
		return this.getRuleContext(0, NullNotnullContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNullColumnConstraint) {
			listener.enterNullColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNullColumnConstraint) {
			listener.exitNullColumnConstraint(this);
		}
	}
}
export class DefaultColumnConstraintContext extends ColumnConstraintContext {
	public DEFAULT(): TerminalNode { return this.getToken(MySqlParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext {
		return this.getRuleContext(0, DefaultValueContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefaultColumnConstraint) {
			listener.enterDefaultColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefaultColumnConstraint) {
			listener.exitDefaultColumnConstraint(this);
		}
	}
}
export class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
	public AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTO_INCREMENT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public currentTimestamp(): CurrentTimestampContext | undefined {
		return this.tryGetRuleContext(0, CurrentTimestampContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAutoIncrementColumnConstraint) {
			listener.enterAutoIncrementColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAutoIncrementColumnConstraint) {
			listener.exitAutoIncrementColumnConstraint(this);
		}
	}
}
export class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIMARY, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrimaryKeyColumnConstraint) {
			listener.enterPrimaryKeyColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrimaryKeyColumnConstraint) {
			listener.exitPrimaryKeyColumnConstraint(this);
		}
	}
}
export class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
	public UNIQUE(): TerminalNode { return this.getToken(MySqlParser.UNIQUE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUniqueKeyColumnConstraint) {
			listener.enterUniqueKeyColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUniqueKeyColumnConstraint) {
			listener.exitUniqueKeyColumnConstraint(this);
		}
	}
}
export class CommentColumnConstraintContext extends ColumnConstraintContext {
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCommentColumnConstraint) {
			listener.enterCommentColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCommentColumnConstraint) {
			listener.exitCommentColumnConstraint(this);
		}
	}
}
export class FormatColumnConstraintContext extends ColumnConstraintContext {
	public _colformat: Token;
	public COLUMN_FORMAT(): TerminalNode { return this.getToken(MySqlParser.COLUMN_FORMAT, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIXED, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DYNAMIC, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFormatColumnConstraint) {
			listener.enterFormatColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFormatColumnConstraint) {
			listener.exitFormatColumnConstraint(this);
		}
	}
}
export class StorageColumnConstraintContext extends ColumnConstraintContext {
	public _storageval: Token;
	public STORAGE(): TerminalNode { return this.getToken(MySqlParser.STORAGE, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISK, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStorageColumnConstraint) {
			listener.enterStorageColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStorageColumnConstraint) {
			listener.exitStorageColumnConstraint(this);
		}
	}
}
export class ReferenceColumnConstraintContext extends ColumnConstraintContext {
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceColumnConstraint) {
			listener.enterReferenceColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceColumnConstraint) {
			listener.exitReferenceColumnConstraint(this);
		}
	}
}
export class CollateColumnConstraintContext extends ColumnConstraintContext {
	public COLLATE(): TerminalNode { return this.getToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollateColumnConstraint) {
			listener.enterCollateColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollateColumnConstraint) {
			listener.exitCollateColumnConstraint(this);
		}
	}
}
export class GeneratedColumnConstraintContext extends ColumnConstraintContext {
	public AS(): TerminalNode { return this.getToken(MySqlParser.AS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GENERATED, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALWAYS, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIRTUAL, 0); }
	public STORED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORED, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGeneratedColumnConstraint) {
			listener.enterGeneratedColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGeneratedColumnConstraint) {
			listener.exitGeneratedColumnConstraint(this);
		}
	}
}
export class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
	public SERIAL(): TerminalNode { return this.getToken(MySqlParser.SERIAL, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(MySqlParser.DEFAULT, 0); }
	public VALUE(): TerminalNode { return this.getToken(MySqlParser.VALUE, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSerialDefaultColumnConstraint) {
			listener.enterSerialDefaultColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSerialDefaultColumnConstraint) {
			listener.exitSerialDefaultColumnConstraint(this);
		}
	}
}


export class TableConstraintContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableConstraint; }
	public copyFrom(ctx: TableConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class PrimaryKeyTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public _index: UidContext;
	public PRIMARY(): TerminalNode { return this.getToken(MySqlParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrimaryKeyTableConstraint) {
			listener.enterPrimaryKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrimaryKeyTableConstraint) {
			listener.exitPrimaryKeyTableConstraint(this);
		}
	}
}
export class UniqueKeyTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public _indexFormat: Token;
	public _index: UidContext;
	public UNIQUE(): TerminalNode { return this.getToken(MySqlParser.UNIQUE, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUniqueKeyTableConstraint) {
			listener.enterUniqueKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUniqueKeyTableConstraint) {
			listener.exitUniqueKeyTableConstraint(this);
		}
	}
}
export class ForeignKeyTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public _index: UidContext;
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterForeignKeyTableConstraint) {
			listener.enterForeignKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitForeignKeyTableConstraint) {
			listener.exitForeignKeyTableConstraint(this);
		}
	}
}
export class CheckTableConstraintContext extends TableConstraintContext {
	public _name: UidContext;
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCheckTableConstraint) {
			listener.enterCheckTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCheckTableConstraint) {
			listener.exitCheckTableConstraint(this);
		}
	}
}


export class ReferenceDefinitionContext extends ParserRuleContext {
	public _matchType: Token;
	public REFERENCES(): TerminalNode { return this.getToken(MySqlParser.REFERENCES, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public indexColumnNames(): IndexColumnNamesContext | undefined {
		return this.tryGetRuleContext(0, IndexColumnNamesContext);
	}
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MATCH, 0); }
	public referenceAction(): ReferenceActionContext | undefined {
		return this.tryGetRuleContext(0, ReferenceActionContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTIAL, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIMPLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_referenceDefinition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceDefinition) {
			listener.enterReferenceDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceDefinition) {
			listener.exitReferenceDefinition(this);
		}
	}
}


export class ReferenceActionContext extends ParserRuleContext {
	public _onDelete: ReferenceControlTypeContext;
	public _onUpdate: ReferenceControlTypeContext;
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ON);
		} else {
			return this.getToken(MySqlParser.ON, i);
		}
	}
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELETE, 0); }
	public referenceControlType(): ReferenceControlTypeContext[];
	public referenceControlType(i: number): ReferenceControlTypeContext;
	public referenceControlType(i?: number): ReferenceControlTypeContext | ReferenceControlTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReferenceControlTypeContext);
		} else {
			return this.getRuleContext(i, ReferenceControlTypeContext);
		}
	}
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_referenceAction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceAction) {
			listener.enterReferenceAction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceAction) {
			listener.exitReferenceAction(this);
		}
	}
}


export class ReferenceControlTypeContext extends ParserRuleContext {
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_referenceControlType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReferenceControlType) {
			listener.enterReferenceControlType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReferenceControlType) {
			listener.exitReferenceControlType(this);
		}
	}
}


export class IndexColumnDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexColumnDefinition; }
	public copyFrom(ctx: IndexColumnDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat: Token;
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	constructor(ctx: IndexColumnDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleIndexDeclaration) {
			listener.enterSimpleIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleIndexDeclaration) {
			listener.exitSimpleIndexDeclaration(this);
		}
	}
}
export class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat: Token;
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SPATIAL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: IndexColumnDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSpecialIndexDeclaration) {
			listener.enterSpecialIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSpecialIndexDeclaration) {
			listener.exitSpecialIndexDeclaration(this);
		}
	}
}


export class TableOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableOption; }
	public copyFrom(ctx: TableOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class TableOptionEngineContext extends TableOptionContext {
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionEngine) {
			listener.enterTableOptionEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionEngine) {
			listener.exitTableOptionEngine(this);
		}
	}
}
export class TableOptionAutoIncrementContext extends TableOptionContext {
	public AUTO_INCREMENT(): TerminalNode { return this.getToken(MySqlParser.AUTO_INCREMENT, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionAutoIncrement) {
			listener.enterTableOptionAutoIncrement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionAutoIncrement) {
			listener.exitTableOptionAutoIncrement(this);
		}
	}
}
export class TableOptionAverageContext extends TableOptionContext {
	public AVG_ROW_LENGTH(): TerminalNode { return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionAverage) {
			listener.enterTableOptionAverage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionAverage) {
			listener.exitTableOptionAverage(this);
		}
	}
}
export class TableOptionCharsetContext extends TableOptionContext {
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.DEFAULT);
		} else {
			return this.getToken(MySqlParser.DEFAULT, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionCharset) {
			listener.enterTableOptionCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionCharset) {
			listener.exitTableOptionCharset(this);
		}
	}
}
export class TableOptionChecksumContext extends TableOptionContext {
	public _boolValue: Token;
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHECKSUM, 0); }
	public PAGE_CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PAGE_CHECKSUM, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionChecksum) {
			listener.enterTableOptionChecksum(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionChecksum) {
			listener.exitTableOptionChecksum(this);
		}
	}
}
export class TableOptionCollateContext extends TableOptionContext {
	public COLLATE(): TerminalNode { return this.getToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionCollate) {
			listener.enterTableOptionCollate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionCollate) {
			listener.exitTableOptionCollate(this);
		}
	}
}
export class TableOptionCommentContext extends TableOptionContext {
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionComment) {
			listener.enterTableOptionComment(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionComment) {
			listener.exitTableOptionComment(this);
		}
	}
}
export class TableOptionCompressionContext extends TableOptionContext {
	public COMPRESSION(): TerminalNode { return this.getToken(MySqlParser.COMPRESSION, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ID, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionCompression) {
			listener.enterTableOptionCompression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionCompression) {
			listener.exitTableOptionCompression(this);
		}
	}
}
export class TableOptionConnectionContext extends TableOptionContext {
	public CONNECTION(): TerminalNode { return this.getToken(MySqlParser.CONNECTION, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionConnection) {
			listener.enterTableOptionConnection(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionConnection) {
			listener.exitTableOptionConnection(this);
		}
	}
}
export class TableOptionDataDirectoryContext extends TableOptionContext {
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionDataDirectory) {
			listener.enterTableOptionDataDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionDataDirectory) {
			listener.exitTableOptionDataDirectory(this);
		}
	}
}
export class TableOptionDelayContext extends TableOptionContext {
	public _boolValue: Token;
	public DELAY_KEY_WRITE(): TerminalNode { return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionDelay) {
			listener.enterTableOptionDelay(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionDelay) {
			listener.exitTableOptionDelay(this);
		}
	}
}
export class TableOptionEncryptionContext extends TableOptionContext {
	public ENCRYPTION(): TerminalNode { return this.getToken(MySqlParser.ENCRYPTION, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionEncryption) {
			listener.enterTableOptionEncryption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionEncryption) {
			listener.exitTableOptionEncryption(this);
		}
	}
}
export class TableOptionIndexDirectoryContext extends TableOptionContext {
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionIndexDirectory) {
			listener.enterTableOptionIndexDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionIndexDirectory) {
			listener.exitTableOptionIndexDirectory(this);
		}
	}
}
export class TableOptionInsertMethodContext extends TableOptionContext {
	public _insertMethod: Token;
	public INSERT_METHOD(): TerminalNode { return this.getToken(MySqlParser.INSERT_METHOD, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionInsertMethod) {
			listener.enterTableOptionInsertMethod(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionInsertMethod) {
			listener.exitTableOptionInsertMethod(this);
		}
	}
}
export class TableOptionKeyBlockSizeContext extends TableOptionContext {
	public KEY_BLOCK_SIZE(): TerminalNode { return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getRuleContext(0, FileSizeLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionKeyBlockSize) {
			listener.enterTableOptionKeyBlockSize(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionKeyBlockSize) {
			listener.exitTableOptionKeyBlockSize(this);
		}
	}
}
export class TableOptionMaxRowsContext extends TableOptionContext {
	public MAX_ROWS(): TerminalNode { return this.getToken(MySqlParser.MAX_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionMaxRows) {
			listener.enterTableOptionMaxRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionMaxRows) {
			listener.exitTableOptionMaxRows(this);
		}
	}
}
export class TableOptionMinRowsContext extends TableOptionContext {
	public MIN_ROWS(): TerminalNode { return this.getToken(MySqlParser.MIN_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionMinRows) {
			listener.enterTableOptionMinRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionMinRows) {
			listener.exitTableOptionMinRows(this);
		}
	}
}
export class TableOptionPackKeysContext extends TableOptionContext {
	public _extBoolValue: Token;
	public PACK_KEYS(): TerminalNode { return this.getToken(MySqlParser.PACK_KEYS, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionPackKeys) {
			listener.enterTableOptionPackKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionPackKeys) {
			listener.exitTableOptionPackKeys(this);
		}
	}
}
export class TableOptionPasswordContext extends TableOptionContext {
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionPassword) {
			listener.enterTableOptionPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionPassword) {
			listener.exitTableOptionPassword(this);
		}
	}
}
export class TableOptionRowFormatContext extends TableOptionContext {
	public _rowFormat: Token;
	public ROW_FORMAT(): TerminalNode { return this.getToken(MySqlParser.ROW_FORMAT, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DYNAMIC, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIXED, 0); }
	public COMPRESSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESSED, 0); }
	public REDUNDANT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDUNDANT, 0); }
	public COMPACT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPACT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionRowFormat) {
			listener.enterTableOptionRowFormat(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionRowFormat) {
			listener.exitTableOptionRowFormat(this);
		}
	}
}
export class TableOptionRecalculationContext extends TableOptionContext {
	public _extBoolValue: Token;
	public STATS_AUTO_RECALC(): TerminalNode { return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionRecalculation) {
			listener.enterTableOptionRecalculation(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionRecalculation) {
			listener.exitTableOptionRecalculation(this);
		}
	}
}
export class TableOptionPersistentContext extends TableOptionContext {
	public _extBoolValue: Token;
	public STATS_PERSISTENT(): TerminalNode { return this.getToken(MySqlParser.STATS_PERSISTENT, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionPersistent) {
			listener.enterTableOptionPersistent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionPersistent) {
			listener.exitTableOptionPersistent(this);
		}
	}
}
export class TableOptionSamplePageContext extends TableOptionContext {
	public STATS_SAMPLE_PAGES(): TerminalNode { return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionSamplePage) {
			listener.enterTableOptionSamplePage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionSamplePage) {
			listener.exitTableOptionSamplePage(this);
		}
	}
}
export class TableOptionTablespaceContext extends TableOptionContext {
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public tablespaceStorage(): TablespaceStorageContext | undefined {
		return this.tryGetRuleContext(0, TablespaceStorageContext);
	}
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionTablespace) {
			listener.enterTableOptionTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionTablespace) {
			listener.exitTableOptionTablespace(this);
		}
	}
}
export class TableOptionUnionContext extends TableOptionContext {
	public UNION(): TerminalNode { return this.getToken(MySqlParser.UNION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableOptionUnion) {
			listener.enterTableOptionUnion(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableOptionUnion) {
			listener.exitTableOptionUnion(this);
		}
	}
}


export class TablespaceStorageContext extends ParserRuleContext {
	public STORAGE(): TerminalNode { return this.getToken(MySqlParser.STORAGE, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISK, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tablespaceStorage; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTablespaceStorage) {
			listener.enterTablespaceStorage(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTablespaceStorage) {
			listener.exitTablespaceStorage(this);
		}
	}
}


export class PartitionDefinitionsContext extends ParserRuleContext {
	public _count: DecimalLiteralContext;
	public _subCount: DecimalLiteralContext;
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.BY);
		} else {
			return this.getToken(MySqlParser.BY, i);
		}
	}
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		return this.getRuleContext(0, PartitionFunctionDefinitionContext);
	}
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONS, 0); }
	public SUBPARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITION, 0); }
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext | undefined {
		return this.tryGetRuleContext(0, SubpartitionFunctionDefinitionContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public SUBPARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITIONS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinitions; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionDefinitions) {
			listener.enterPartitionDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionDefinitions) {
			listener.exitPartitionDefinitions(this);
		}
	}
}


export class PartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionFunctionDefinition; }
	public copyFrom(ctx: PartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
	public HASH(): TerminalNode { return this.getToken(MySqlParser.HASH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionHash) {
			listener.enterPartitionFunctionHash(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionHash) {
			listener.exitPartitionFunctionHash(this);
		}
	}
}
export class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
	public _algType: Token;
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TWO_DECIMAL, 0); }
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionKey) {
			listener.enterPartitionFunctionKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionKey) {
			listener.exitPartitionFunctionKey(this);
		}
	}
}
export class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
	public RANGE(): TerminalNode { return this.getToken(MySqlParser.RANGE, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionRange) {
			listener.enterPartitionFunctionRange(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionRange) {
			listener.exitPartitionFunctionRange(this);
		}
	}
}
export class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
	public LIST(): TerminalNode { return this.getToken(MySqlParser.LIST, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionFunctionList) {
			listener.enterPartitionFunctionList(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionFunctionList) {
			listener.exitPartitionFunctionList(this);
		}
	}
}


export class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_subpartitionFunctionDefinition; }
	public copyFrom(ctx: SubpartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
	public HASH(): TerminalNode { return this.getToken(MySqlParser.HASH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	constructor(ctx: SubpartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubPartitionFunctionHash) {
			listener.enterSubPartitionFunctionHash(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubPartitionFunctionHash) {
			listener.exitSubPartitionFunctionHash(this);
		}
	}
}
export class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
	public _algType: Token;
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEAR, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TWO_DECIMAL, 0); }
	constructor(ctx: SubpartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubPartitionFunctionKey) {
			listener.enterSubPartitionFunctionKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubPartitionFunctionKey) {
			listener.exitSubPartitionFunctionKey(this);
		}
	}
}


export class PartitionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinition; }
	public copyFrom(ctx: PartitionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionComparisionContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public LESS(): TerminalNode { return this.getToken(MySqlParser.LESS, 0); }
	public THAN(): TerminalNode { return this.getToken(MySqlParser.THAN, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionComparision) {
			listener.enterPartitionComparision(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionComparision) {
			listener.exitPartitionComparision(this);
		}
	}
}
export class PartitionListAtomContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionListAtom) {
			listener.enterPartitionListAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionListAtom) {
			listener.exitPartitionListAtom(this);
		}
	}
}
export class PartitionListVectorContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerVector(): PartitionDefinerVectorContext[];
	public partitionDefinerVector(i: number): PartitionDefinerVectorContext;
	public partitionDefinerVector(i?: number): PartitionDefinerVectorContext | PartitionDefinerVectorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerVectorContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerVectorContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionListVector) {
			listener.enterPartitionListVector(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionListVector) {
			listener.exitPartitionListVector(this);
		}
	}
}
export class PartitionSimpleContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionSimple) {
			listener.enterPartitionSimple(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionSimple) {
			listener.exitPartitionSimple(this);
		}
	}
}


export class PartitionDefinerAtomContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAXVALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinerAtom; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionDefinerAtom) {
			listener.enterPartitionDefinerAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionDefinerAtom) {
			listener.exitPartitionDefinerAtom(this);
		}
	}
}


export class PartitionDefinerVectorContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionDefinerVector; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionDefinerVector) {
			listener.enterPartitionDefinerVector(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionDefinerVector) {
			listener.exitPartitionDefinerVector(this);
		}
	}
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
	public SUBPARTITION(): TerminalNode { return this.getToken(MySqlParser.SUBPARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_subpartitionDefinition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubpartitionDefinition) {
			listener.enterSubpartitionDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubpartitionDefinition) {
			listener.exitSubpartitionDefinition(this);
		}
	}
}


export class PartitionOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_partitionOption; }
	public copyFrom(ctx: PartitionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionOptionEngineContext extends PartitionOptionContext {
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORAGE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionEngine) {
			listener.enterPartitionOptionEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionEngine) {
			listener.exitPartitionOptionEngine(this);
		}
	}
}
export class PartitionOptionCommentContext extends PartitionOptionContext {
	public _comment: Token;
	public COMMENT(): TerminalNode { return this.getToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionComment) {
			listener.enterPartitionOptionComment(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionComment) {
			listener.exitPartitionOptionComment(this);
		}
	}
}
export class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
	public _dataDirectory: Token;
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionDataDirectory) {
			listener.enterPartitionOptionDataDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionDataDirectory) {
			listener.exitPartitionOptionDataDirectory(this);
		}
	}
}
export class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
	public _indexDirectory: Token;
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionIndexDirectory) {
			listener.enterPartitionOptionIndexDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionIndexDirectory) {
			listener.exitPartitionOptionIndexDirectory(this);
		}
	}
}
export class PartitionOptionMaxRowsContext extends PartitionOptionContext {
	public _maxRows: DecimalLiteralContext;
	public MAX_ROWS(): TerminalNode { return this.getToken(MySqlParser.MAX_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionMaxRows) {
			listener.enterPartitionOptionMaxRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionMaxRows) {
			listener.exitPartitionOptionMaxRows(this);
		}
	}
}
export class PartitionOptionMinRowsContext extends PartitionOptionContext {
	public _minRows: DecimalLiteralContext;
	public MIN_ROWS(): TerminalNode { return this.getToken(MySqlParser.MIN_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionMinRows) {
			listener.enterPartitionOptionMinRows(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionMinRows) {
			listener.exitPartitionOptionMinRows(this);
		}
	}
}
export class PartitionOptionTablespaceContext extends PartitionOptionContext {
	public _tablespace: UidContext;
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionTablespace) {
			listener.enterPartitionOptionTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionTablespace) {
			listener.exitPartitionOptionTablespace(this);
		}
	}
}
export class PartitionOptionNodeGroupContext extends PartitionOptionContext {
	public _nodegroup: UidContext;
	public NODEGROUP(): TerminalNode { return this.getToken(MySqlParser.NODEGROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPartitionOptionNodeGroup) {
			listener.enterPartitionOptionNodeGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPartitionOptionNodeGroup) {
			listener.exitPartitionOptionNodeGroup(this);
		}
	}
}


export class AlterDatabaseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterDatabase; }
	public copyFrom(ctx: AlterDatabaseContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterSimpleDatabaseContext extends AlterDatabaseContext {
	public _dbFormat: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(ctx: AlterDatabaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterSimpleDatabase) {
			listener.enterAlterSimpleDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterSimpleDatabase) {
			listener.exitAlterSimpleDatabase(this);
		}
	}
}
export class AlterUpgradeNameContext extends AlterDatabaseContext {
	public _dbFormat: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public UPGRADE(): TerminalNode { return this.getToken(MySqlParser.UPGRADE, 0); }
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MySqlParser.DIRECTORY, 0); }
	public NAME(): TerminalNode { return this.getToken(MySqlParser.NAME, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	constructor(ctx: AlterDatabaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterUpgradeName) {
			listener.enterAlterUpgradeName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterUpgradeName) {
			listener.exitAlterUpgradeName(this);
		}
	}
}


export class AlterEventContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public EVENT(): TerminalNode { return this.getToken(MySqlParser.EVENT, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ON);
		} else {
			return this.getToken(MySqlParser.ON, i);
		}
	}
	public SCHEDULE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEDULE, 0); }
	public scheduleExpression(): ScheduleExpressionContext | undefined {
		return this.tryGetRuleContext(0, ScheduleExpressionContext);
	}
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPLETION, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRESERVE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO, 0); }
	public enableType(): EnableTypeContext | undefined {
		return this.tryGetRuleContext(0, EnableTypeContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DO, 0); }
	public routineBody(): RoutineBodyContext | undefined {
		return this.tryGetRuleContext(0, RoutineBodyContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterEvent; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterEvent) {
			listener.enterAlterEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterEvent) {
			listener.exitAlterEvent(this);
		}
	}
}


export class AlterFunctionContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterFunction) {
			listener.enterAlterFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterFunction) {
			listener.exitAlterFunction(this);
		}
	}
}


export class AlterInstanceContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public INSTANCE(): TerminalNode { return this.getToken(MySqlParser.INSTANCE, 0); }
	public ROTATE(): TerminalNode { return this.getToken(MySqlParser.ROTATE, 0); }
	public INNODB(): TerminalNode { return this.getToken(MySqlParser.INNODB, 0); }
	public MASTER(): TerminalNode { return this.getToken(MySqlParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterInstance; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterInstance) {
			listener.enterAlterInstance(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterInstance) {
			listener.exitAlterInstance(this);
		}
	}
}


export class AlterLogfileGroupContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public UNDOFILE(): TerminalNode { return this.getToken(MySqlParser.UNDOFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterLogfileGroup; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterLogfileGroup) {
			listener.enterAlterLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterLogfileGroup) {
			listener.exitAlterLogfileGroup(this);
		}
	}
}


export class AlterProcedureContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MySqlParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterProcedure; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterProcedure) {
			listener.enterAlterProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterProcedure) {
			listener.exitAlterProcedure(this);
		}
	}
}


export class AlterServerContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(MySqlParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public OPTIONS(): TerminalNode { return this.getToken(MySqlParser.OPTIONS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public serverOption(): ServerOptionContext[];
	public serverOption(i: number): ServerOptionContext;
	public serverOption(i?: number): ServerOptionContext | ServerOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ServerOptionContext);
		} else {
			return this.getRuleContext(i, ServerOptionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterServer; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterServer) {
			listener.enterAlterServer(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterServer) {
			listener.exitAlterServer(this);
		}
	}
}


export class AlterTableContext extends ParserRuleContext {
	public _intimeAction: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public alterSpecification(): AlterSpecificationContext[];
	public alterSpecification(i: number): AlterSpecificationContext;
	public alterSpecification(i?: number): AlterSpecificationContext | AlterSpecificationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterSpecificationContext);
		} else {
			return this.getRuleContext(i, AlterSpecificationContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterTable) {
			listener.enterAlterTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterTable) {
			listener.exitAlterTable(this);
		}
	}
}


export class AlterTablespaceContext extends ParserRuleContext {
	public _objectAction: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATAFILE(): TerminalNode { return this.getToken(MySqlParser.DATAFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterTablespace; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterTablespace) {
			listener.enterAlterTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterTablespace) {
			listener.exitAlterTablespace(this);
		}
	}
}


export class AlterViewContext extends ParserRuleContext {
	public _algType: Token;
	public _secContext: Token;
	public _checkOpt: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public VIEW(): TerminalNode { return this.getToken(MySqlParser.VIEW, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public AS(): TerminalNode { return this.getToken(MySqlParser.AS, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECURITY, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDEFINED, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MERGE, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPTABLE, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterView; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterView) {
			listener.enterAlterView(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterView) {
			listener.exitAlterView(this);
		}
	}
}


export class AlterSpecificationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterSpecification; }
	public copyFrom(ctx: AlterSpecificationContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterByTableOptionContext extends AlterSpecificationContext {
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByTableOption) {
			listener.enterAlterByTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByTableOption) {
			listener.exitAlterByTableOption(this);
		}
	}
}
export class AlterByAddColumnContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddColumn) {
			listener.enterAlterByAddColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddColumn) {
			listener.exitAlterByAddColumn(this);
		}
	}
}
export class AlterByAddColumnsContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext[];
	public columnDefinition(i: number): ColumnDefinitionContext;
	public columnDefinition(i?: number): ColumnDefinitionContext | ColumnDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnDefinitionContext);
		} else {
			return this.getRuleContext(i, ColumnDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddColumns) {
			listener.enterAlterByAddColumns(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddColumns) {
			listener.exitAlterByAddColumns(this);
		}
	}
}
export class AlterByAddIndexContext extends AlterSpecificationContext {
	public _indexFormat: Token;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddIndex) {
			listener.enterAlterByAddIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddIndex) {
			listener.exitAlterByAddIndex(this);
		}
	}
}
export class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
	public _name: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public PRIMARY(): TerminalNode { return this.getToken(MySqlParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddPrimaryKey) {
			listener.enterAlterByAddPrimaryKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddPrimaryKey) {
			listener.exitAlterByAddPrimaryKey(this);
		}
	}
}
export class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
	public _name: UidContext;
	public _indexFormat: Token;
	public _indexName: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public UNIQUE(): TerminalNode { return this.getToken(MySqlParser.UNIQUE, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddUniqueKey) {
			listener.enterAlterByAddUniqueKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddUniqueKey) {
			listener.exitAlterByAddUniqueKey(this);
		}
	}
}
export class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
	public _keyType: Token;
	public _indexFormat: Token;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SPATIAL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddSpecialIndex) {
			listener.enterAlterByAddSpecialIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddSpecialIndex) {
			listener.exitAlterByAddSpecialIndex(this);
		}
	}
}
export class AlterByAddForeignKeyContext extends AlterSpecificationContext {
	public _name: UidContext;
	public _indexName: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddForeignKey) {
			listener.enterAlterByAddForeignKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddForeignKey) {
			listener.exitAlterByAddForeignKey(this);
		}
	}
}
export class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
	public _name: UidContext;
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddCheckTableConstraint) {
			listener.enterAlterByAddCheckTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddCheckTableConstraint) {
			listener.exitAlterByAddCheckTableConstraint(this);
		}
	}
}
export class AlterBySetAlgorithmContext extends AlterSpecificationContext {
	public _algType: Token;
	public ALGORITHM(): TerminalNode { return this.getToken(MySqlParser.ALGORITHM, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INPLACE, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COPY, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterBySetAlgorithm) {
			listener.enterAlterBySetAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterBySetAlgorithm) {
			listener.exitAlterBySetAlgorithm(this);
		}
	}
}
export class AlterByChangeDefaultContext extends AlterSpecificationContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext | undefined {
		return this.tryGetRuleContext(0, DefaultValueContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByChangeDefault) {
			listener.enterAlterByChangeDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByChangeDefault) {
			listener.exitAlterByChangeDefault(this);
		}
	}
}
export class AlterByChangeColumnContext extends AlterSpecificationContext {
	public _oldColumn: UidContext;
	public _newColumn: UidContext;
	public _afterColumn: UidContext;
	public CHANGE(): TerminalNode { return this.getToken(MySqlParser.CHANGE, 0); }
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByChangeColumn) {
			listener.enterAlterByChangeColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByChangeColumn) {
			listener.exitAlterByChangeColumn(this);
		}
	}
}
export class AlterByRenameColumnContext extends AlterSpecificationContext {
	public _oldColumn: UidContext;
	public _newColumn: UidContext;
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public COLUMN(): TerminalNode { return this.getToken(MySqlParser.COLUMN, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRenameColumn) {
			listener.enterAlterByRenameColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRenameColumn) {
			listener.exitAlterByRenameColumn(this);
		}
	}
}
export class AlterByLockContext extends AlterSpecificationContext {
	public _lockType: Token;
	public LOCK(): TerminalNode { return this.getToken(MySqlParser.LOCK, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARED, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLUSIVE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByLock) {
			listener.enterAlterByLock(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByLock) {
			listener.exitAlterByLock(this);
		}
	}
}
export class AlterByModifyColumnContext extends AlterSpecificationContext {
	public MODIFY(): TerminalNode { return this.getToken(MySqlParser.MODIFY, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByModifyColumn) {
			listener.enterAlterByModifyColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByModifyColumn) {
			listener.exitAlterByModifyColumn(this);
		}
	}
}
export class AlterByDropColumnContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESTRICT, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropColumn) {
			listener.enterAlterByDropColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropColumn) {
			listener.exitAlterByDropColumn(this);
		}
	}
}
export class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public PRIMARY(): TerminalNode { return this.getToken(MySqlParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropPrimaryKey) {
			listener.enterAlterByDropPrimaryKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropPrimaryKey) {
			listener.exitAlterByDropPrimaryKey(this);
		}
	}
}
export class AlterByRenameIndexContext extends AlterSpecificationContext {
	public _indexFormat: Token;
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRenameIndex) {
			listener.enterAlterByRenameIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRenameIndex) {
			listener.exitAlterByRenameIndex(this);
		}
	}
}
export class AlterByDropIndexContext extends AlterSpecificationContext {
	public _indexFormat: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropIndex) {
			listener.enterAlterByDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropIndex) {
			listener.exitAlterByDropIndex(this);
		}
	}
}
export class AlterByDropForeignKeyContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(MySqlParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MySqlParser.KEY, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropForeignKey) {
			listener.enterAlterByDropForeignKey(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropForeignKey) {
			listener.exitAlterByDropForeignKey(this);
		}
	}
}
export class AlterByDisableKeysContext extends AlterSpecificationContext {
	public DISABLE(): TerminalNode { return this.getToken(MySqlParser.DISABLE, 0); }
	public KEYS(): TerminalNode { return this.getToken(MySqlParser.KEYS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDisableKeys) {
			listener.enterAlterByDisableKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDisableKeys) {
			listener.exitAlterByDisableKeys(this);
		}
	}
}
export class AlterByEnableKeysContext extends AlterSpecificationContext {
	public ENABLE(): TerminalNode { return this.getToken(MySqlParser.ENABLE, 0); }
	public KEYS(): TerminalNode { return this.getToken(MySqlParser.KEYS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByEnableKeys) {
			listener.enterAlterByEnableKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByEnableKeys) {
			listener.exitAlterByEnableKeys(this);
		}
	}
}
export class AlterByRenameContext extends AlterSpecificationContext {
	public _renameFormat: Token;
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public fullId(): FullIdContext | undefined {
		return this.tryGetRuleContext(0, FullIdContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRename) {
			listener.enterAlterByRename(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRename) {
			listener.exitAlterByRename(this);
		}
	}
}
export class AlterByOrderContext extends AlterSpecificationContext {
	public ORDER(): TerminalNode { return this.getToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByOrder) {
			listener.enterAlterByOrder(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByOrder) {
			listener.exitAlterByOrder(this);
		}
	}
}
export class AlterByConvertCharsetContext extends AlterSpecificationContext {
	public CONVERT(): TerminalNode { return this.getToken(MySqlParser.CONVERT, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public CHARACTER(): TerminalNode { return this.getToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByConvertCharset) {
			listener.enterAlterByConvertCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByConvertCharset) {
			listener.exitAlterByConvertCharset(this);
		}
	}
}
export class AlterByDefaultCharsetContext extends AlterSpecificationContext {
	public CHARACTER(): TerminalNode { return this.getToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDefaultCharset) {
			listener.enterAlterByDefaultCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDefaultCharset) {
			listener.exitAlterByDefaultCharset(this);
		}
	}
}
export class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
	public DISCARD(): TerminalNode { return this.getToken(MySqlParser.DISCARD, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDiscardTablespace) {
			listener.enterAlterByDiscardTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDiscardTablespace) {
			listener.exitAlterByDiscardTablespace(this);
		}
	}
}
export class AlterByImportTablespaceContext extends AlterSpecificationContext {
	public IMPORT(): TerminalNode { return this.getToken(MySqlParser.IMPORT, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByImportTablespace) {
			listener.enterAlterByImportTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByImportTablespace) {
			listener.exitAlterByImportTablespace(this);
		}
	}
}
export class AlterByForceContext extends AlterSpecificationContext {
	public FORCE(): TerminalNode { return this.getToken(MySqlParser.FORCE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByForce) {
			listener.enterAlterByForce(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByForce) {
			listener.exitAlterByForce(this);
		}
	}
}
export class AlterByValidateContext extends AlterSpecificationContext {
	public _validationFormat: Token;
	public VALIDATION(): TerminalNode { return this.getToken(MySqlParser.VALIDATION, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHOUT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByValidate) {
			listener.enterAlterByValidate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByValidate) {
			listener.exitAlterByValidate(this);
		}
	}
}
export class AlterByAddPartitionContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MySqlParser.ADD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAddPartition) {
			listener.enterAlterByAddPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAddPartition) {
			listener.exitAlterByAddPartition(this);
		}
	}
}
export class AlterByDropPartitionContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDropPartition) {
			listener.enterAlterByDropPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDropPartition) {
			listener.exitAlterByDropPartition(this);
		}
	}
}
export class AlterByDiscardPartitionContext extends AlterSpecificationContext {
	public DISCARD(): TerminalNode { return this.getToken(MySqlParser.DISCARD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByDiscardPartition) {
			listener.enterAlterByDiscardPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByDiscardPartition) {
			listener.exitAlterByDiscardPartition(this);
		}
	}
}
export class AlterByImportPartitionContext extends AlterSpecificationContext {
	public IMPORT(): TerminalNode { return this.getToken(MySqlParser.IMPORT, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByImportPartition) {
			listener.enterAlterByImportPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByImportPartition) {
			listener.exitAlterByImportPartition(this);
		}
	}
}
export class AlterByTruncatePartitionContext extends AlterSpecificationContext {
	public TRUNCATE(): TerminalNode { return this.getToken(MySqlParser.TRUNCATE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByTruncatePartition) {
			listener.enterAlterByTruncatePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByTruncatePartition) {
			listener.exitAlterByTruncatePartition(this);
		}
	}
}
export class AlterByCoalescePartitionContext extends AlterSpecificationContext {
	public COALESCE(): TerminalNode { return this.getToken(MySqlParser.COALESCE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByCoalescePartition) {
			listener.enterAlterByCoalescePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByCoalescePartition) {
			listener.exitAlterByCoalescePartition(this);
		}
	}
}
export class AlterByReorganizePartitionContext extends AlterSpecificationContext {
	public REORGANIZE(): TerminalNode { return this.getToken(MySqlParser.REORGANIZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByReorganizePartition) {
			listener.enterAlterByReorganizePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByReorganizePartition) {
			listener.exitAlterByReorganizePartition(this);
		}
	}
}
export class AlterByExchangePartitionContext extends AlterSpecificationContext {
	public _validationFormat: Token;
	public EXCHANGE(): TerminalNode { return this.getToken(MySqlParser.EXCHANGE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.WITH);
		} else {
			return this.getToken(MySqlParser.WITH, i);
		}
	}
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALIDATION, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHOUT, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByExchangePartition) {
			listener.enterAlterByExchangePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByExchangePartition) {
			listener.exitAlterByExchangePartition(this);
		}
	}
}
export class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
	public ANALYZE(): TerminalNode { return this.getToken(MySqlParser.ANALYZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByAnalyzePartition) {
			listener.enterAlterByAnalyzePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByAnalyzePartition) {
			listener.exitAlterByAnalyzePartition(this);
		}
	}
}
export class AlterByCheckPartitionContext extends AlterSpecificationContext {
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByCheckPartition) {
			listener.enterAlterByCheckPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByCheckPartition) {
			listener.exitAlterByCheckPartition(this);
		}
	}
}
export class AlterByOptimizePartitionContext extends AlterSpecificationContext {
	public OPTIMIZE(): TerminalNode { return this.getToken(MySqlParser.OPTIMIZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByOptimizePartition) {
			listener.enterAlterByOptimizePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByOptimizePartition) {
			listener.exitAlterByOptimizePartition(this);
		}
	}
}
export class AlterByRebuildPartitionContext extends AlterSpecificationContext {
	public REBUILD(): TerminalNode { return this.getToken(MySqlParser.REBUILD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRebuildPartition) {
			listener.enterAlterByRebuildPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRebuildPartition) {
			listener.exitAlterByRebuildPartition(this);
		}
	}
}
export class AlterByRepairPartitionContext extends AlterSpecificationContext {
	public REPAIR(): TerminalNode { return this.getToken(MySqlParser.REPAIR, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MySqlParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRepairPartition) {
			listener.enterAlterByRepairPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRepairPartition) {
			listener.exitAlterByRepairPartition(this);
		}
	}
}
export class AlterByRemovePartitioningContext extends AlterSpecificationContext {
	public REMOVE(): TerminalNode { return this.getToken(MySqlParser.REMOVE, 0); }
	public PARTITIONING(): TerminalNode { return this.getToken(MySqlParser.PARTITIONING, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByRemovePartitioning) {
			listener.enterAlterByRemovePartitioning(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByRemovePartitioning) {
			listener.exitAlterByRemovePartitioning(this);
		}
	}
}
export class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
	public UPGRADE(): TerminalNode { return this.getToken(MySqlParser.UPGRADE, 0); }
	public PARTITIONING(): TerminalNode { return this.getToken(MySqlParser.PARTITIONING, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterByUpgradePartitioning) {
			listener.enterAlterByUpgradePartitioning(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterByUpgradePartitioning) {
			listener.exitAlterByUpgradePartitioning(this);
		}
	}
}


export class DropDatabaseContext extends ParserRuleContext {
	public _dbFormat: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropDatabase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropDatabase) {
			listener.enterDropDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropDatabase) {
			listener.exitDropDatabase(this);
		}
	}
}


export class DropEventContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public EVENT(): TerminalNode { return this.getToken(MySqlParser.EVENT, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropEvent; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropEvent) {
			listener.enterDropEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropEvent) {
			listener.exitDropEvent(this);
		}
	}
}


export class DropIndexContext extends ParserRuleContext {
	public _intimeAction: Token;
	public _algType: Token;
	public _lockType: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public ALGORITHM(): TerminalNode[];
	public ALGORITHM(i: number): TerminalNode;
	public ALGORITHM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ALGORITHM);
		} else {
			return this.getToken(MySqlParser.ALGORITHM, i);
		}
	}
	public LOCK(): TerminalNode[];
	public LOCK(i: number): TerminalNode;
	public LOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LOCK);
		} else {
			return this.getToken(MySqlParser.LOCK, i);
		}
	}
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.DEFAULT);
		} else {
			return this.getToken(MySqlParser.DEFAULT, i);
		}
	}
	public INPLACE(): TerminalNode[];
	public INPLACE(i: number): TerminalNode;
	public INPLACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.INPLACE);
		} else {
			return this.getToken(MySqlParser.INPLACE, i);
		}
	}
	public COPY(): TerminalNode[];
	public COPY(i: number): TerminalNode;
	public COPY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COPY);
		} else {
			return this.getToken(MySqlParser.COPY, i);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.NONE);
		} else {
			return this.getToken(MySqlParser.NONE, i);
		}
	}
	public SHARED(): TerminalNode[];
	public SHARED(i: number): TerminalNode;
	public SHARED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SHARED);
		} else {
			return this.getToken(MySqlParser.SHARED, i);
		}
	}
	public EXCLUSIVE(): TerminalNode[];
	public EXCLUSIVE(i: number): TerminalNode;
	public EXCLUSIVE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EXCLUSIVE);
		} else {
			return this.getToken(MySqlParser.EXCLUSIVE, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropIndex; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropIndex) {
			listener.enterDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropIndex) {
			listener.exitDropIndex(this);
		}
	}
}


export class DropLogfileGroupContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MySqlParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MySqlParser.GROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropLogfileGroup; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropLogfileGroup) {
			listener.enterDropLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropLogfileGroup) {
			listener.exitDropLogfileGroup(this);
		}
	}
}


export class DropProcedureContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MySqlParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropProcedure; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropProcedure) {
			listener.enterDropProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropProcedure) {
			listener.exitDropProcedure(this);
		}
	}
}


export class DropFunctionContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropFunction) {
			listener.enterDropFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropFunction) {
			listener.exitDropFunction(this);
		}
	}
}


export class DropServerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public SERVER(): TerminalNode { return this.getToken(MySqlParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropServer; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropServer) {
			listener.enterDropServer(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropServer) {
			listener.exitDropServer(this);
		}
	}
}


export class DropTableContext extends ParserRuleContext {
	public _dropType: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropTable) {
			listener.enterDropTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropTable) {
			listener.exitDropTable(this);
		}
	}
}


export class DropTablespaceContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MySqlParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropTablespace; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropTablespace) {
			listener.enterDropTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropTablespace) {
			listener.exitDropTablespace(this);
		}
	}
}


export class DropTriggerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(MySqlParser.TRIGGER, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropTrigger; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropTrigger) {
			listener.enterDropTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropTrigger) {
			listener.exitDropTrigger(this);
		}
	}
}


export class DropViewContext extends ParserRuleContext {
	public _dropType: Token;
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public VIEW(): TerminalNode { return this.getToken(MySqlParser.VIEW, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropView; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropView) {
			listener.enterDropView(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropView) {
			listener.exitDropView(this);
		}
	}
}


export class RenameTableContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public renameTableClause(): RenameTableClauseContext[];
	public renameTableClause(i: number): RenameTableClauseContext;
	public renameTableClause(i?: number): RenameTableClauseContext | RenameTableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RenameTableClauseContext);
		} else {
			return this.getRuleContext(i, RenameTableClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameTable) {
			listener.enterRenameTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameTable) {
			listener.exitRenameTable(this);
		}
	}
}


export class RenameTableClauseContext extends ParserRuleContext {
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameTableClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameTableClause) {
			listener.enterRenameTableClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameTableClause) {
			listener.exitRenameTableClause(this);
		}
	}
}


export class TruncateTableContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(MySqlParser.TRUNCATE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_truncateTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTruncateTable) {
			listener.enterTruncateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTruncateTable) {
			listener.exitTruncateTable(this);
		}
	}
}


export class CallStatementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(MySqlParser.CALL, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public constants(): ConstantsContext | undefined {
		return this.tryGetRuleContext(0, ConstantsContext);
	}
	public expressions(): ExpressionsContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_callStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCallStatement) {
			listener.enterCallStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCallStatement) {
			listener.exitCallStatement(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	public singleDeleteStatement(): SingleDeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, SingleDeleteStatementContext);
	}
	public multipleDeleteStatement(): MultipleDeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, MultipleDeleteStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_deleteStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeleteStatement) {
			listener.enterDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeleteStatement) {
			listener.exitDeleteStatement(this);
		}
	}
}


export class DoStatementContext extends ParserRuleContext {
	public DO(): TerminalNode { return this.getToken(MySqlParser.DO, 0); }
	public expressions(): ExpressionsContext {
		return this.getRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_doStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDoStatement) {
			listener.enterDoStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDoStatement) {
			listener.exitDoStatement(this);
		}
	}
}


export class HandlerStatementContext extends ParserRuleContext {
	public handlerOpenStatement(): HandlerOpenStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerOpenStatementContext);
	}
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerReadIndexStatementContext);
	}
	public handlerReadStatement(): HandlerReadStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerReadStatementContext);
	}
	public handlerCloseStatement(): HandlerCloseStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerCloseStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerStatement) {
			listener.enterHandlerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerStatement) {
			listener.exitHandlerStatement(this);
		}
	}
}


export class InsertStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _partitions: UidListContext;
	public _columns: UidListContext;
	public _setFirst: UpdatedElementContext;
	public _updatedElement: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	public _duplicatedFirst: UpdatedElementContext;
	public _duplicatedElements: UpdatedElementContext[] = [];
	public INSERT(): TerminalNode { return this.getToken(MySqlParser.INSERT, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public insertStatementValue(): InsertStatementValueContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementValueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTO, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DUPLICATE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public DELAYED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELAYED, 0); }
	public HIGH_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HIGH_PRIORITY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_insertStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInsertStatement) {
			listener.enterInsertStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInsertStatement) {
			listener.exitInsertStatement(this);
		}
	}
}


export class LoadDataStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _filename: Token;
	public _violation: Token;
	public _charset: CharsetNameContext;
	public _fieldsFormat: Token;
	public _linesFormat: Token;
	public LOAD(): TerminalNode { return this.getToken(MySqlParser.LOAD, 0); }
	public DATA(): TerminalNode { return this.getToken(MySqlParser.DATA, 0); }
	public INFILE(): TerminalNode { return this.getToken(MySqlParser.INFILE, 0); }
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LINES);
		} else {
			return this.getToken(MySqlParser.LINES, i);
		}
	}
	public IGNORE(): TerminalNode[];
	public IGNORE(i: number): TerminalNode;
	public IGNORE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IGNORE);
		} else {
			return this.getToken(MySqlParser.IGNORE, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCURRENT, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROWS, 0); }
	public selectFieldsInto(): SelectFieldsIntoContext[];
	public selectFieldsInto(i: number): SelectFieldsIntoContext;
	public selectFieldsInto(i?: number): SelectFieldsIntoContext | SelectFieldsIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectFieldsIntoContext);
		} else {
			return this.getRuleContext(i, SelectFieldsIntoContext);
		}
	}
	public selectLinesInto(): SelectLinesIntoContext[];
	public selectLinesInto(i: number): SelectLinesIntoContext;
	public selectLinesInto(i?: number): SelectLinesIntoContext | SelectLinesIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectLinesIntoContext);
		} else {
			return this.getRuleContext(i, SelectLinesIntoContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadDataStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadDataStatement) {
			listener.enterLoadDataStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadDataStatement) {
			listener.exitLoadDataStatement(this);
		}
	}
}


export class LoadXmlStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _filename: Token;
	public _violation: Token;
	public _charset: CharsetNameContext;
	public _tag: Token;
	public _linesFormat: Token;
	public LOAD(): TerminalNode { return this.getToken(MySqlParser.LOAD, 0); }
	public XML(): TerminalNode { return this.getToken(MySqlParser.XML, 0); }
	public INFILE(): TerminalNode { return this.getToken(MySqlParser.INFILE, 0); }
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public ROWS(): TerminalNode[];
	public ROWS(i: number): TerminalNode;
	public ROWS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.ROWS);
		} else {
			return this.getToken(MySqlParser.ROWS, i);
		}
	}
	public IDENTIFIED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IDENTIFIED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LESS_SYMBOL, 0); }
	public GREATER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREATER_SYMBOL, 0); }
	public IGNORE(): TerminalNode[];
	public IGNORE(i: number): TerminalNode;
	public IGNORE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IGNORE);
		} else {
			return this.getToken(MySqlParser.IGNORE, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCURRENT, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINES, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadXmlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadXmlStatement) {
			listener.enterLoadXmlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadXmlStatement) {
			listener.exitLoadXmlStatement(this);
		}
	}
}


export class ReplaceStatementContext extends ParserRuleContext {
	public _priority: Token;
	public _partitions: UidListContext;
	public _columns: UidListContext;
	public _setFirst: UpdatedElementContext;
	public _updatedElement: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	public REPLACE(): TerminalNode { return this.getToken(MySqlParser.REPLACE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public insertStatementValue(): InsertStatementValueContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementValueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTO, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public DELAYED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELAYED, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_replaceStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReplaceStatement) {
			listener.enterReplaceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReplaceStatement) {
			listener.exitReplaceStatement(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectStatement; }
	public copyFrom(ctx: SelectStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleSelectContext extends SelectStatementContext {
	public querySpecification(): QuerySpecificationContext {
		return this.getRuleContext(0, QuerySpecificationContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleSelect) {
			listener.enterSimpleSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleSelect) {
			listener.exitSimpleSelect(this);
		}
	}
}
export class ParenthesisSelectContext extends SelectStatementContext {
	public queryExpression(): QueryExpressionContext {
		return this.getRuleContext(0, QueryExpressionContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterParenthesisSelect) {
			listener.enterParenthesisSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitParenthesisSelect) {
			listener.exitParenthesisSelect(this);
		}
	}
}
export class UnionSelectContext extends SelectStatementContext {
	public _unionType: Token;
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getRuleContext(0, QuerySpecificationNointoContext);
	}
	public unionStatement(): UnionStatementContext[];
	public unionStatement(i: number): UnionStatementContext;
	public unionStatement(i?: number): UnionStatementContext | UnionStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionStatementContext);
		} else {
			return this.getRuleContext(i, UnionStatementContext);
		}
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNION, 0); }
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	public querySpecification(): QuerySpecificationContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationContext);
	}
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionSelect) {
			listener.enterUnionSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionSelect) {
			listener.exitUnionSelect(this);
		}
	}
}
export class UnionParenthesisSelectContext extends SelectStatementContext {
	public _unionType: Token;
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getRuleContext(0, QueryExpressionNointoContext);
	}
	public unionParenthesis(): UnionParenthesisContext[];
	public unionParenthesis(i: number): UnionParenthesisContext;
	public unionParenthesis(i?: number): UnionParenthesisContext | UnionParenthesisContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionParenthesisContext);
		} else {
			return this.getRuleContext(i, UnionParenthesisContext);
		}
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNION, 0); }
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionParenthesisSelect) {
			listener.enterUnionParenthesisSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionParenthesisSelect) {
			listener.exitUnionParenthesisSelect(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	public singleUpdateStatement(): SingleUpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, SingleUpdateStatementContext);
	}
	public multipleUpdateStatement(): MultipleUpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, MultipleUpdateStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_updateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUpdateStatement) {
			listener.enterUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUpdateStatement) {
			listener.exitUpdateStatement(this);
		}
	}
}


export class InsertStatementValueContext extends ParserRuleContext {
	public _insertFormat: Token;
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext[];
	public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext;
	public expressionsWithDefaults(i?: number): ExpressionsWithDefaultsContext | ExpressionsWithDefaultsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionsWithDefaultsContext);
		} else {
			return this.getRuleContext(i, ExpressionsWithDefaultsContext);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUES, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_insertStatementValue; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInsertStatementValue) {
			listener.enterInsertStatementValue(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInsertStatementValue) {
			listener.exitInsertStatementValue(this);
		}
	}
}


export class UpdatedElementContext extends ParserRuleContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_updatedElement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUpdatedElement) {
			listener.enterUpdatedElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUpdatedElement) {
			listener.exitUpdatedElement(this);
		}
	}
}


export class AssignmentFieldContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_assignmentField; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAssignmentField) {
			listener.enterAssignmentField(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAssignmentField) {
			listener.exitAssignmentField(this);
		}
	}
}


export class LockClauseContext extends ParserRuleContext {
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARE, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockClause) {
			listener.enterLockClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockClause) {
			listener.exitLockClause(this);
		}
	}
}


export class SingleDeleteStatementContext extends ParserRuleContext {
	public _priority: Token;
	public DELETE(): TerminalNode { return this.getToken(MySqlParser.DELETE, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_singleDeleteStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSingleDeleteStatement) {
			listener.enterSingleDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSingleDeleteStatement) {
			listener.exitSingleDeleteStatement(this);
		}
	}
}


export class MultipleDeleteStatementContext extends ParserRuleContext {
	public _priority: Token;
	public DELETE(): TerminalNode { return this.getToken(MySqlParser.DELETE, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public tableSources(): TableSourcesContext | undefined {
		return this.tryGetRuleContext(0, TableSourcesContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.DOT);
		} else {
			return this.getToken(MySqlParser.DOT, i);
		}
	}
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STAR);
		} else {
			return this.getToken(MySqlParser.STAR, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_multipleDeleteStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMultipleDeleteStatement) {
			listener.enterMultipleDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMultipleDeleteStatement) {
			listener.exitMultipleDeleteStatement(this);
		}
	}
}


export class HandlerOpenStatementContext extends ParserRuleContext {
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public OPEN(): TerminalNode { return this.getToken(MySqlParser.OPEN, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerOpenStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerOpenStatement) {
			listener.enterHandlerOpenStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerOpenStatement) {
			listener.exitHandlerOpenStatement(this);
		}
	}
}


export class HandlerReadIndexStatementContext extends ParserRuleContext {
	public _index: UidContext;
	public _moveOrder: Token;
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public READ(): TerminalNode { return this.getToken(MySqlParser.READ, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public comparisonOperator(): ComparisonOperatorContext | undefined {
		return this.tryGetRuleContext(0, ComparisonOperatorContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public constants(): ConstantsContext | undefined {
		return this.tryGetRuleContext(0, ConstantsContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEXT, 0); }
	public PREV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PREV, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerReadIndexStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerReadIndexStatement) {
			listener.enterHandlerReadIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerReadIndexStatement) {
			listener.exitHandlerReadIndexStatement(this);
		}
	}
}


export class HandlerReadStatementContext extends ParserRuleContext {
	public _moveOrder: Token;
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public READ(): TerminalNode { return this.getToken(MySqlParser.READ, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEXT, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerReadStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerReadStatement) {
			listener.enterHandlerReadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerReadStatement) {
			listener.exitHandlerReadStatement(this);
		}
	}
}


export class HandlerCloseStatementContext extends ParserRuleContext {
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public CLOSE(): TerminalNode { return this.getToken(MySqlParser.CLOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerCloseStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerCloseStatement) {
			listener.enterHandlerCloseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerCloseStatement) {
			listener.exitHandlerCloseStatement(this);
		}
	}
}


export class SingleUpdateStatementContext extends ParserRuleContext {
	public _priority: Token;
	public UPDATE(): TerminalNode { return this.getToken(MySqlParser.UPDATE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_singleUpdateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSingleUpdateStatement) {
			listener.enterSingleUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSingleUpdateStatement) {
			listener.exitSingleUpdateStatement(this);
		}
	}
}


export class MultipleUpdateStatementContext extends ParserRuleContext {
	public _priority: Token;
	public UPDATE(): TerminalNode { return this.getToken(MySqlParser.UPDATE, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_multipleUpdateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMultipleUpdateStatement) {
			listener.enterMultipleUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMultipleUpdateStatement) {
			listener.exitMultipleUpdateStatement(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public orderByExpression(): OrderByExpressionContext[];
	public orderByExpression(i: number): OrderByExpressionContext;
	public orderByExpression(i?: number): OrderByExpressionContext | OrderByExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderByExpressionContext);
		} else {
			return this.getRuleContext(i, OrderByExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_orderByClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOrderByClause) {
			listener.enterOrderByClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOrderByClause) {
			listener.exitOrderByClause(this);
		}
	}
}


export class OrderByExpressionContext extends ParserRuleContext {
	public _order: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_orderByExpression; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOrderByExpression) {
			listener.enterOrderByExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOrderByExpression) {
			listener.exitOrderByExpression(this);
		}
	}
}


export class TableSourcesContext extends ParserRuleContext {
	public tableSource(): TableSourceContext[];
	public tableSource(i: number): TableSourceContext;
	public tableSource(i?: number): TableSourceContext | TableSourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableSourceContext);
		} else {
			return this.getRuleContext(i, TableSourceContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableSources; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSources) {
			listener.enterTableSources(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSources) {
			listener.exitTableSources(this);
		}
	}
}


export class TableSourceContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableSource; }
	public copyFrom(ctx: TableSourceContext): void {
		super.copyFrom(ctx);
	}
}
export class TableSourceBaseContext extends TableSourceContext {
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public joinPart(): JoinPartContext[];
	public joinPart(i: number): JoinPartContext;
	public joinPart(i?: number): JoinPartContext | JoinPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinPartContext);
		} else {
			return this.getRuleContext(i, JoinPartContext);
		}
	}
	constructor(ctx: TableSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSourceBase) {
			listener.enterTableSourceBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSourceBase) {
			listener.exitTableSourceBase(this);
		}
	}
}
export class TableSourceNestedContext extends TableSourceContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public joinPart(): JoinPartContext[];
	public joinPart(i: number): JoinPartContext;
	public joinPart(i?: number): JoinPartContext | JoinPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinPartContext);
		} else {
			return this.getRuleContext(i, JoinPartContext);
		}
	}
	constructor(ctx: TableSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSourceNested) {
			listener.enterTableSourceNested(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSourceNested) {
			listener.exitTableSourceNested(this);
		}
	}
}


export class TableSourceItemContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableSourceItem; }
	public copyFrom(ctx: TableSourceItemContext): void {
		super.copyFrom(ctx);
	}
}
export class AtomTableItemContext extends TableSourceItemContext {
	public _alias: UidContext;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public indexHint(): IndexHintContext[];
	public indexHint(i: number): IndexHintContext;
	public indexHint(i?: number): IndexHintContext | IndexHintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexHintContext);
		} else {
			return this.getRuleContext(i, IndexHintContext);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAtomTableItem) {
			listener.enterAtomTableItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAtomTableItem) {
			listener.exitAtomTableItem(this);
		}
	}
}
export class SubqueryTableItemContext extends TableSourceItemContext {
	public _parenthesisSubquery: SelectStatementContext;
	public _alias: UidContext;
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubqueryTableItem) {
			listener.enterSubqueryTableItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubqueryTableItem) {
			listener.exitSubqueryTableItem(this);
		}
	}
}
export class TableSourcesItemContext extends TableSourceItemContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableSourcesItem) {
			listener.enterTableSourcesItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableSourcesItem) {
			listener.exitTableSourcesItem(this);
		}
	}
}


export class IndexHintContext extends ParserRuleContext {
	public _indexHintAction: Token;
	public _keyFormat: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public USE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USE, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FORCE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public indexHintType(): IndexHintTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexHintTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexHint; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexHint) {
			listener.enterIndexHint(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexHint) {
			listener.exitIndexHint(this);
		}
	}
}


export class IndexHintTypeContext extends ParserRuleContext {
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JOIN, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexHintType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexHintType) {
			listener.enterIndexHintType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexHintType) {
			listener.exitIndexHintType(this);
		}
	}
}


export class JoinPartContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_joinPart; }
	public copyFrom(ctx: JoinPartContext): void {
		super.copyFrom(ctx);
	}
}
export class InnerJoinContext extends JoinPartContext {
	public JOIN(): TerminalNode { return this.getToken(MySqlParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INNER, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CROSS, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInnerJoin) {
			listener.enterInnerJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInnerJoin) {
			listener.exitInnerJoin(this);
		}
	}
}
export class StraightJoinContext extends JoinPartContext {
	public STRAIGHT_JOIN(): TerminalNode { return this.getToken(MySqlParser.STRAIGHT_JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStraightJoin) {
			listener.enterStraightJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStraightJoin) {
			listener.exitStraightJoin(this);
		}
	}
}
export class OuterJoinContext extends JoinPartContext {
	public JOIN(): TerminalNode { return this.getToken(MySqlParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RIGHT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUTER, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOuterJoin) {
			listener.enterOuterJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOuterJoin) {
			listener.exitOuterJoin(this);
		}
	}
}
export class NaturalJoinContext extends JoinPartContext {
	public NATURAL(): TerminalNode { return this.getToken(MySqlParser.NATURAL, 0); }
	public JOIN(): TerminalNode { return this.getToken(MySqlParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RIGHT, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUTER, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNaturalJoin) {
			listener.enterNaturalJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNaturalJoin) {
			listener.exitNaturalJoin(this);
		}
	}
}


export class QueryExpressionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public querySpecification(): QuerySpecificationContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_queryExpression; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQueryExpression) {
			listener.enterQueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQueryExpression) {
			listener.exitQueryExpression(this);
		}
	}
}


export class QueryExpressionNointoContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public querySpecificationNointo(): QuerySpecificationNointoContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationNointoContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public queryExpressionNointo(): QueryExpressionNointoContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionNointoContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_queryExpressionNointo; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQueryExpressionNointo) {
			listener.enterQueryExpressionNointo(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQueryExpressionNointo) {
			listener.exitQueryExpressionNointo(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(MySqlParser.SELECT, 0); }
	public selectElements(): SelectElementsContext {
		return this.getRuleContext(0, SelectElementsContext);
	}
	public selectSpec(): SelectSpecContext[];
	public selectSpec(i: number): SelectSpecContext;
	public selectSpec(i?: number): SelectSpecContext | SelectSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectSpecContext);
		} else {
			return this.getRuleContext(i, SelectSpecContext);
		}
	}
	public selectIntoExpression(): SelectIntoExpressionContext | undefined {
		return this.tryGetRuleContext(0, SelectIntoExpressionContext);
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_querySpecification; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQuerySpecification) {
			listener.enterQuerySpecification(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQuerySpecification) {
			listener.exitQuerySpecification(this);
		}
	}
}


export class QuerySpecificationNointoContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(MySqlParser.SELECT, 0); }
	public selectElements(): SelectElementsContext {
		return this.getRuleContext(0, SelectElementsContext);
	}
	public selectSpec(): SelectSpecContext[];
	public selectSpec(i: number): SelectSpecContext;
	public selectSpec(i?: number): SelectSpecContext | SelectSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectSpecContext);
		} else {
			return this.getRuleContext(i, SelectSpecContext);
		}
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_querySpecificationNointo; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterQuerySpecificationNointo) {
			listener.enterQuerySpecificationNointo(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitQuerySpecificationNointo) {
			listener.exitQuerySpecificationNointo(this);
		}
	}
}


export class UnionParenthesisContext extends ParserRuleContext {
	public _unionType: Token;
	public UNION(): TerminalNode { return this.getToken(MySqlParser.UNION, 0); }
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getRuleContext(0, QueryExpressionNointoContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unionParenthesis; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionParenthesis) {
			listener.enterUnionParenthesis(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionParenthesis) {
			listener.exitUnionParenthesis(this);
		}
	}
}


export class UnionStatementContext extends ParserRuleContext {
	public _unionType: Token;
	public UNION(): TerminalNode { return this.getToken(MySqlParser.UNION, 0); }
	public querySpecificationNointo(): QuerySpecificationNointoContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationNointoContext);
	}
	public queryExpressionNointo(): QueryExpressionNointoContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionNointoContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unionStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnionStatement) {
			listener.enterUnionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnionStatement) {
			listener.exitUnionStatement(this);
		}
	}
}


export class SelectSpecContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	public DISTINCTROW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCTROW, 0); }
	public HIGH_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HIGH_PRIORITY, 0); }
	public STRAIGHT_JOIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRAIGHT_JOIN, 0); }
	public SQL_SMALL_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
	public SQL_BIG_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BIG_RESULT, 0); }
	public SQL_BUFFER_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
	public SQL_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_CACHE, 0); }
	public SQL_NO_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_NO_CACHE, 0); }
	public SQL_CALC_FOUND_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectSpec; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectSpec) {
			listener.enterSelectSpec(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectSpec) {
			listener.exitSelectSpec(this);
		}
	}
}


export class SelectElementsContext extends ParserRuleContext {
	public _star: Token;
	public selectElement(): SelectElementContext[];
	public selectElement(i: number): SelectElementContext;
	public selectElement(i?: number): SelectElementContext | SelectElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectElementContext);
		} else {
			return this.getRuleContext(i, SelectElementContext);
		}
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STAR, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectElements; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectElements) {
			listener.enterSelectElements(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectElements) {
			listener.exitSelectElements(this);
		}
	}
}


export class SelectElementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectElement; }
	public copyFrom(ctx: SelectElementContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectStarElementContext extends SelectElementContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectStarElement) {
			listener.enterSelectStarElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectStarElement) {
			listener.exitSelectStarElement(this);
		}
	}
}
export class SelectColumnElementContext extends SelectElementContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectColumnElement) {
			listener.enterSelectColumnElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectColumnElement) {
			listener.exitSelectColumnElement(this);
		}
	}
}
export class SelectFunctionElementContext extends SelectElementContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectFunctionElement) {
			listener.enterSelectFunctionElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectFunctionElement) {
			listener.exitSelectFunctionElement(this);
		}
	}
}
export class SelectExpressionElementContext extends SelectElementContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public VAR_ASSIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_ASSIGN, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectExpressionElement) {
			listener.enterSelectExpressionElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectExpressionElement) {
			listener.exitSelectExpressionElement(this);
		}
	}
}


export class SelectIntoExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectIntoExpression; }
	public copyFrom(ctx: SelectIntoExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectIntoVariablesContext extends SelectIntoExpressionContext {
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectIntoVariables) {
			listener.enterSelectIntoVariables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectIntoVariables) {
			listener.exitSelectIntoVariables(this);
		}
	}
}
export class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public DUMPFILE(): TerminalNode { return this.getToken(MySqlParser.DUMPFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectIntoDumpFile) {
			listener.enterSelectIntoDumpFile(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectIntoDumpFile) {
			listener.exitSelectIntoDumpFile(this);
		}
	}
}
export class SelectIntoTextFileContext extends SelectIntoExpressionContext {
	public _filename: Token;
	public _charset: CharsetNameContext;
	public _fieldsFormat: Token;
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTO, 0); }
	public OUTFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OUTFILE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINES, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public selectFieldsInto(): SelectFieldsIntoContext[];
	public selectFieldsInto(i: number): SelectFieldsIntoContext;
	public selectFieldsInto(i?: number): SelectFieldsIntoContext | SelectFieldsIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectFieldsIntoContext);
		} else {
			return this.getRuleContext(i, SelectFieldsIntoContext);
		}
	}
	public selectLinesInto(): SelectLinesIntoContext[];
	public selectLinesInto(i: number): SelectLinesIntoContext;
	public selectLinesInto(i?: number): SelectLinesIntoContext | SelectLinesIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectLinesIntoContext);
		} else {
			return this.getRuleContext(i, SelectLinesIntoContext);
		}
	}
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectIntoTextFile) {
			listener.enterSelectIntoTextFile(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectIntoTextFile) {
			listener.exitSelectIntoTextFile(this);
		}
	}
}


export class SelectFieldsIntoContext extends ParserRuleContext {
	public _terminationField: Token;
	public _enclosion: Token;
	public _escaping: Token;
	public TERMINATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TERMINATED, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public ENCLOSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCLOSED, 0); }
	public OPTIONALLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIONALLY, 0); }
	public ESCAPED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ESCAPED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectFieldsInto; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectFieldsInto) {
			listener.enterSelectFieldsInto(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectFieldsInto) {
			listener.exitSelectFieldsInto(this);
		}
	}
}


export class SelectLinesIntoContext extends ParserRuleContext {
	public _starting: Token;
	public _terminationLine: Token;
	public STARTING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTING, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public TERMINATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TERMINATED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_selectLinesInto; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSelectLinesInto) {
			listener.enterSelectLinesInto(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSelectLinesInto) {
			listener.exitSelectLinesInto(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	public _whereExpr: ExpressionContext;
	public _havingExpr: ExpressionContext;
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public groupByItem(): GroupByItemContext[];
	public groupByItem(i: number): GroupByItemContext;
	public groupByItem(i?: number): GroupByItemContext | GroupByItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupByItemContext);
		} else {
			return this.getRuleContext(i, GroupByItemContext);
		}
	}
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HAVING, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROLLUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fromClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFromClause) {
			listener.enterFromClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFromClause) {
			listener.exitFromClause(this);
		}
	}
}


export class GroupByItemContext extends ParserRuleContext {
	public _order: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_groupByItem; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGroupByItem) {
			listener.enterGroupByItem(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGroupByItem) {
			listener.exitGroupByItem(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	public _offset: LimitClauseAtomContext;
	public _limit: LimitClauseAtomContext;
	public LIMIT(): TerminalNode { return this.getToken(MySqlParser.LIMIT, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFSET, 0); }
	public limitClauseAtom(): LimitClauseAtomContext[];
	public limitClauseAtom(i: number): LimitClauseAtomContext;
	public limitClauseAtom(i?: number): LimitClauseAtomContext | LimitClauseAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LimitClauseAtomContext);
		} else {
			return this.getRuleContext(i, LimitClauseAtomContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_limitClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLimitClause) {
			listener.enterLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLimitClause) {
			listener.exitLimitClause(this);
		}
	}
}


export class LimitClauseAtomContext extends ParserRuleContext {
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public mysqlVariable(): MysqlVariableContext | undefined {
		return this.tryGetRuleContext(0, MysqlVariableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_limitClauseAtom; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLimitClauseAtom) {
			listener.enterLimitClauseAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLimitClauseAtom) {
			listener.exitLimitClauseAtom(this);
		}
	}
}


export class StartTransactionContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MySqlParser.START, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(MySqlParser.TRANSACTION, 0); }
	public transactionMode(): TransactionModeContext[];
	public transactionMode(i: number): TransactionModeContext;
	public transactionMode(i?: number): TransactionModeContext | TransactionModeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionModeContext);
		} else {
			return this.getRuleContext(i, TransactionModeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_startTransaction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStartTransaction) {
			listener.enterStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStartTransaction) {
			listener.exitStartTransaction(this);
		}
	}
}


export class BeginWorkContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(MySqlParser.BEGIN, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_beginWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBeginWork) {
			listener.enterBeginWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBeginWork) {
			listener.exitBeginWork(this);
		}
	}
}


export class CommitWorkContext extends ParserRuleContext {
	public _nochain: Token;
	public _norelease: Token;
	public COMMIT(): TerminalNode { return this.getToken(MySqlParser.COMMIT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAIN, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELEASE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.NO);
		} else {
			return this.getToken(MySqlParser.NO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_commitWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCommitWork) {
			listener.enterCommitWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCommitWork) {
			listener.exitCommitWork(this);
		}
	}
}


export class RollbackWorkContext extends ParserRuleContext {
	public _nochain: Token;
	public _norelease: Token;
	public ROLLBACK(): TerminalNode { return this.getToken(MySqlParser.ROLLBACK, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAIN, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELEASE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.NO);
		} else {
			return this.getToken(MySqlParser.NO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_rollbackWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRollbackWork) {
			listener.enterRollbackWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRollbackWork) {
			listener.exitRollbackWork(this);
		}
	}
}


export class SavepointStatementContext extends ParserRuleContext {
	public SAVEPOINT(): TerminalNode { return this.getToken(MySqlParser.SAVEPOINT, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_savepointStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSavepointStatement) {
			listener.enterSavepointStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSavepointStatement) {
			listener.exitSavepointStatement(this);
		}
	}
}


export class RollbackStatementContext extends ParserRuleContext {
	public ROLLBACK(): TerminalNode { return this.getToken(MySqlParser.ROLLBACK, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SAVEPOINT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_rollbackStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRollbackStatement) {
			listener.enterRollbackStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRollbackStatement) {
			listener.exitRollbackStatement(this);
		}
	}
}


export class ReleaseStatementContext extends ParserRuleContext {
	public RELEASE(): TerminalNode { return this.getToken(MySqlParser.RELEASE, 0); }
	public SAVEPOINT(): TerminalNode { return this.getToken(MySqlParser.SAVEPOINT, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_releaseStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReleaseStatement) {
			listener.enterReleaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReleaseStatement) {
			listener.exitReleaseStatement(this);
		}
	}
}


export class LockTablesContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(MySqlParser.LOCK, 0); }
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	public lockTableElement(): LockTableElementContext[];
	public lockTableElement(i: number): LockTableElementContext;
	public lockTableElement(i?: number): LockTableElementContext | LockTableElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LockTableElementContext);
		} else {
			return this.getRuleContext(i, LockTableElementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockTables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockTables) {
			listener.enterLockTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockTables) {
			listener.exitLockTables(this);
		}
	}
}


export class UnlockTablesContext extends ParserRuleContext {
	public UNLOCK(): TerminalNode { return this.getToken(MySqlParser.UNLOCK, 0); }
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unlockTables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnlockTables) {
			listener.enterUnlockTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnlockTables) {
			listener.exitUnlockTables(this);
		}
	}
}


export class SetAutocommitStatementContext extends ParserRuleContext {
	public _autocommitValue: Token;
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public AUTOCOMMIT(): TerminalNode { return this.getToken(MySqlParser.AUTOCOMMIT, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setAutocommitStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetAutocommitStatement) {
			listener.enterSetAutocommitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetAutocommitStatement) {
			listener.exitSetAutocommitStatement(this);
		}
	}
}


export class SetTransactionStatementContext extends ParserRuleContext {
	public _transactionContext: Token;
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(MySqlParser.TRANSACTION, 0); }
	public transactionOption(): TransactionOptionContext[];
	public transactionOption(i: number): TransactionOptionContext;
	public transactionOption(i?: number): TransactionOptionContext | TransactionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionOptionContext);
		} else {
			return this.getRuleContext(i, TransactionOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setTransactionStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetTransactionStatement) {
			listener.enterSetTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetTransactionStatement) {
			listener.exitSetTransactionStatement(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSISTENT, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SNAPSHOT, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionMode; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionMode) {
			listener.enterTransactionMode(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionMode) {
			listener.exitTransactionMode(this);
		}
	}
}


export class LockTableElementContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public lockAction(): LockActionContext {
		return this.getRuleContext(0, LockActionContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockTableElement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockTableElement) {
			listener.enterLockTableElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockTableElement) {
			listener.exitLockTableElement(this);
		}
	}
}


export class LockActionContext extends ParserRuleContext {
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRITE, 0); }
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lockAction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLockAction) {
			listener.enterLockAction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLockAction) {
			listener.exitLockAction(this);
		}
	}
}


export class TransactionOptionContext extends ParserRuleContext {
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEVEL, 0); }
	public transactionLevel(): TransactionLevelContext | undefined {
		return this.tryGetRuleContext(0, TransactionLevelContext);
	}
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionOption) {
			listener.enterTransactionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionOption) {
			listener.exitTransactionOption(this);
		}
	}
}


export class TransactionLevelContext extends ParserRuleContext {
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPEATABLE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMMITTED, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionLevel; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionLevel) {
			listener.enterTransactionLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionLevel) {
			listener.exitTransactionLevel(this);
		}
	}
}


export class ChangeMasterContext extends ParserRuleContext {
	public CHANGE(): TerminalNode { return this.getToken(MySqlParser.CHANGE, 0); }
	public MASTER(): TerminalNode { return this.getToken(MySqlParser.MASTER, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public masterOption(): MasterOptionContext[];
	public masterOption(i: number): MasterOptionContext;
	public masterOption(i?: number): MasterOptionContext | MasterOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MasterOptionContext);
		} else {
			return this.getRuleContext(i, MasterOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_changeMaster; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChangeMaster) {
			listener.enterChangeMaster(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChangeMaster) {
			listener.exitChangeMaster(this);
		}
	}
}


export class ChangeReplicationFilterContext extends ParserRuleContext {
	public CHANGE(): TerminalNode { return this.getToken(MySqlParser.CHANGE, 0); }
	public REPLICATION(): TerminalNode { return this.getToken(MySqlParser.REPLICATION, 0); }
	public FILTER(): TerminalNode { return this.getToken(MySqlParser.FILTER, 0); }
	public replicationFilter(): ReplicationFilterContext[];
	public replicationFilter(i: number): ReplicationFilterContext;
	public replicationFilter(i?: number): ReplicationFilterContext | ReplicationFilterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReplicationFilterContext);
		} else {
			return this.getRuleContext(i, ReplicationFilterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_changeReplicationFilter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChangeReplicationFilter) {
			listener.enterChangeReplicationFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChangeReplicationFilter) {
			listener.exitChangeReplicationFilter(this);
		}
	}
}


export class PurgeBinaryLogsContext extends ParserRuleContext {
	public _purgeFormat: Token;
	public _fileName: Token;
	public _timeValue: Token;
	public PURGE(): TerminalNode { return this.getToken(MySqlParser.PURGE, 0); }
	public LOGS(): TerminalNode { return this.getToken(MySqlParser.LOGS, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEFORE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_purgeBinaryLogs; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPurgeBinaryLogs) {
			listener.enterPurgeBinaryLogs(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPurgeBinaryLogs) {
			listener.exitPurgeBinaryLogs(this);
		}
	}
}


export class ResetMasterContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MySqlParser.RESET, 0); }
	public MASTER(): TerminalNode { return this.getToken(MySqlParser.MASTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_resetMaster; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterResetMaster) {
			listener.enterResetMaster(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitResetMaster) {
			listener.exitResetMaster(this);
		}
	}
}


export class ResetSlaveContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MySqlParser.RESET, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_resetSlave; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterResetSlave) {
			listener.enterResetSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitResetSlave) {
			listener.exitResetSlave(this);
		}
	}
}


export class StartSlaveContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MySqlParser.START, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public threadType(): ThreadTypeContext[];
	public threadType(i: number): ThreadTypeContext;
	public threadType(i?: number): ThreadTypeContext | ThreadTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThreadTypeContext);
		} else {
			return this.getRuleContext(i, ThreadTypeContext);
		}
	}
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNTIL, 0); }
	public untilOption(): UntilOptionContext | undefined {
		return this.tryGetRuleContext(0, UntilOptionContext);
	}
	public connectionOption(): ConnectionOptionContext[];
	public connectionOption(i: number): ConnectionOptionContext;
	public connectionOption(i?: number): ConnectionOptionContext | ConnectionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConnectionOptionContext);
		} else {
			return this.getRuleContext(i, ConnectionOptionContext);
		}
	}
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_startSlave; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStartSlave) {
			listener.enterStartSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStartSlave) {
			listener.exitStartSlave(this);
		}
	}
}


export class StopSlaveContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(MySqlParser.STOP, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public threadType(): ThreadTypeContext[];
	public threadType(i: number): ThreadTypeContext;
	public threadType(i?: number): ThreadTypeContext | ThreadTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThreadTypeContext);
		} else {
			return this.getRuleContext(i, ThreadTypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stopSlave; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStopSlave) {
			listener.enterStopSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStopSlave) {
			listener.exitStopSlave(this);
		}
	}
}


export class StartGroupReplicationContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MySqlParser.START, 0); }
	public GROUP_REPLICATION(): TerminalNode { return this.getToken(MySqlParser.GROUP_REPLICATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_startGroupReplication; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStartGroupReplication) {
			listener.enterStartGroupReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStartGroupReplication) {
			listener.exitStartGroupReplication(this);
		}
	}
}


export class StopGroupReplicationContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(MySqlParser.STOP, 0); }
	public GROUP_REPLICATION(): TerminalNode { return this.getToken(MySqlParser.GROUP_REPLICATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stopGroupReplication; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStopGroupReplication) {
			listener.enterStopGroupReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStopGroupReplication) {
			listener.exitStopGroupReplication(this);
		}
	}
}


export class MasterOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_masterOption; }
	public copyFrom(ctx: MasterOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class MasterStringOptionContext extends MasterOptionContext {
	public stringMasterOption(): StringMasterOptionContext {
		return this.getRuleContext(0, StringMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterStringOption) {
			listener.enterMasterStringOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterStringOption) {
			listener.exitMasterStringOption(this);
		}
	}
}
export class MasterDecimalOptionContext extends MasterOptionContext {
	public decimalMasterOption(): DecimalMasterOptionContext {
		return this.getRuleContext(0, DecimalMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterDecimalOption) {
			listener.enterMasterDecimalOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterDecimalOption) {
			listener.exitMasterDecimalOption(this);
		}
	}
}
export class MasterBoolOptionContext extends MasterOptionContext {
	public _boolVal: Token;
	public boolMasterOption(): BoolMasterOptionContext {
		return this.getRuleContext(0, BoolMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterBoolOption) {
			listener.enterMasterBoolOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterBoolOption) {
			listener.exitMasterBoolOption(this);
		}
	}
}
export class MasterRealOptionContext extends MasterOptionContext {
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode { return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public REAL_LITERAL(): TerminalNode { return this.getToken(MySqlParser.REAL_LITERAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterRealOption) {
			listener.enterMasterRealOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterRealOption) {
			listener.exitMasterRealOption(this);
		}
	}
}
export class MasterUidListOptionContext extends MasterOptionContext {
	public IGNORE_SERVER_IDS(): TerminalNode { return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterUidListOption) {
			listener.enterMasterUidListOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterUidListOption) {
			listener.exitMasterUidListOption(this);
		}
	}
}


export class StringMasterOptionContext extends ParserRuleContext {
	public MASTER_BIND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_BIND, 0); }
	public MASTER_HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_HOST, 0); }
	public MASTER_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_USER, 0); }
	public MASTER_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PASSWORD, 0); }
	public MASTER_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_FILE, 0); }
	public RELAY_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_FILE, 0); }
	public MASTER_SSL_CA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CA, 0); }
	public MASTER_SSL_CAPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
	public MASTER_SSL_CERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CERT, 0); }
	public MASTER_SSL_CRL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRL, 0); }
	public MASTER_SSL_CRLPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
	public MASTER_SSL_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_KEY, 0); }
	public MASTER_SSL_CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
	public MASTER_TLS_VERSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stringMasterOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringMasterOption) {
			listener.enterStringMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringMasterOption) {
			listener.exitStringMasterOption(this);
		}
	}
}


export class DecimalMasterOptionContext extends ParserRuleContext {
	public MASTER_PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PORT, 0); }
	public MASTER_CONNECT_RETRY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
	public MASTER_RETRY_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
	public MASTER_DELAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_DELAY, 0); }
	public MASTER_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_POS, 0); }
	public RELAY_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_POS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_decimalMasterOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDecimalMasterOption) {
			listener.enterDecimalMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDecimalMasterOption) {
			listener.exitDecimalMasterOption(this);
		}
	}
}


export class BoolMasterOptionContext extends ParserRuleContext {
	public MASTER_AUTO_POSITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
	public MASTER_SSL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL, 0); }
	public MASTER_SSL_VERIFY_SERVER_CERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_boolMasterOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBoolMasterOption) {
			listener.enterBoolMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBoolMasterOption) {
			listener.exitBoolMasterOption(this);
		}
	}
}


export class ChannelOptionContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public CHANNEL(): TerminalNode { return this.getToken(MySqlParser.CHANNEL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_channelOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChannelOption) {
			listener.enterChannelOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChannelOption) {
			listener.exitChannelOption(this);
		}
	}
}


export class ReplicationFilterContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_replicationFilter; }
	public copyFrom(ctx: ReplicationFilterContext): void {
		super.copyFrom(ctx);
	}
}
export class DoDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_DO_DB(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_DO_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDoDbReplication) {
			listener.enterDoDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDoDbReplication) {
			listener.exitDoDbReplication(this);
		}
	}
}
export class IgnoreDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_IGNORE_DB(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIgnoreDbReplication) {
			listener.enterIgnoreDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIgnoreDbReplication) {
			listener.exitIgnoreDbReplication(this);
		}
	}
}
export class DoTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_DO_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDoTableReplication) {
			listener.enterDoTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDoTableReplication) {
			listener.exitDoTableReplication(this);
		}
	}
}
export class IgnoreTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_IGNORE_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIgnoreTableReplication) {
			listener.enterIgnoreTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIgnoreTableReplication) {
			listener.exitIgnoreTableReplication(this);
		}
	}
}
export class WildDoTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_WILD_DO_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public simpleStrings(): SimpleStringsContext {
		return this.getRuleContext(0, SimpleStringsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWildDoTableReplication) {
			listener.enterWildDoTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWildDoTableReplication) {
			listener.exitWildDoTableReplication(this);
		}
	}
}
export class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public simpleStrings(): SimpleStringsContext {
		return this.getRuleContext(0, SimpleStringsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWildIgnoreTableReplication) {
			listener.enterWildIgnoreTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWildIgnoreTableReplication) {
			listener.exitWildIgnoreTableReplication(this);
		}
	}
}
export class RewriteDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_REWRITE_DB(): TerminalNode { return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public tablePair(): TablePairContext[];
	public tablePair(i: number): TablePairContext;
	public tablePair(i?: number): TablePairContext | TablePairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TablePairContext);
		} else {
			return this.getRuleContext(i, TablePairContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRewriteDbReplication) {
			listener.enterRewriteDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRewriteDbReplication) {
			listener.exitRewriteDbReplication(this);
		}
	}
}


export class TablePairContext extends ParserRuleContext {
	public _firstTable: TableNameContext;
	public _secondTable: TableNameContext;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tablePair; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTablePair) {
			listener.enterTablePair(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTablePair) {
			listener.exitTablePair(this);
		}
	}
}


export class ThreadTypeContext extends ParserRuleContext {
	public IO_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO_THREAD, 0); }
	public SQL_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_THREAD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_threadType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterThreadType) {
			listener.enterThreadType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitThreadType) {
			listener.exitThreadType(this);
		}
	}
}


export class UntilOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_untilOption; }
	public copyFrom(ctx: UntilOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class GtidsUntilOptionContext extends UntilOptionContext {
	public _gtids: Token;
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public gtuidSet(): GtuidSetContext {
		return this.getRuleContext(0, GtuidSetContext);
	}
	public SQL_BEFORE_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
	public SQL_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGtidsUntilOption) {
			listener.enterGtidsUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGtidsUntilOption) {
			listener.exitGtidsUntilOption(this);
		}
	}
}
export class MasterLogUntilOptionContext extends UntilOptionContext {
	public MASTER_LOG_FILE(): TerminalNode { return this.getToken(MySqlParser.MASTER_LOG_FILE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public MASTER_LOG_POS(): TerminalNode { return this.getToken(MySqlParser.MASTER_LOG_POS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMasterLogUntilOption) {
			listener.enterMasterLogUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMasterLogUntilOption) {
			listener.exitMasterLogUntilOption(this);
		}
	}
}
export class RelayLogUntilOptionContext extends UntilOptionContext {
	public RELAY_LOG_FILE(): TerminalNode { return this.getToken(MySqlParser.RELAY_LOG_FILE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public RELAY_LOG_POS(): TerminalNode { return this.getToken(MySqlParser.RELAY_LOG_POS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRelayLogUntilOption) {
			listener.enterRelayLogUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRelayLogUntilOption) {
			listener.exitRelayLogUntilOption(this);
		}
	}
}
export class SqlGapsUntilOptionContext extends UntilOptionContext {
	public SQL_AFTER_MTS_GAPS(): TerminalNode { return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSqlGapsUntilOption) {
			listener.enterSqlGapsUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSqlGapsUntilOption) {
			listener.exitSqlGapsUntilOption(this);
		}
	}
}


export class ConnectionOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_connectionOption; }
	public copyFrom(ctx: ConnectionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class UserConnectionOptionContext extends ConnectionOptionContext {
	public _conOptUser: Token;
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserConnectionOption) {
			listener.enterUserConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserConnectionOption) {
			listener.exitUserConnectionOption(this);
		}
	}
}
export class PasswordConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPassword: Token;
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordConnectionOption) {
			listener.enterPasswordConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordConnectionOption) {
			listener.exitPasswordConnectionOption(this);
		}
	}
}
export class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
	public _conOptDefAuth: Token;
	public DEFAULT_AUTH(): TerminalNode { return this.getToken(MySqlParser.DEFAULT_AUTH, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefaultAuthConnectionOption) {
			listener.enterDefaultAuthConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefaultAuthConnectionOption) {
			listener.exitDefaultAuthConnectionOption(this);
		}
	}
}
export class PluginDirConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPluginDir: Token;
	public PLUGIN_DIR(): TerminalNode { return this.getToken(MySqlParser.PLUGIN_DIR, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPluginDirConnectionOption) {
			listener.enterPluginDirConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPluginDirConnectionOption) {
			listener.exitPluginDirConnectionOption(this);
		}
	}
}


export class GtuidSetContext extends ParserRuleContext {
	public uuidSet(): UuidSetContext[];
	public uuidSet(i: number): UuidSetContext;
	public uuidSet(i?: number): UuidSetContext | UuidSetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UuidSetContext);
		} else {
			return this.getRuleContext(i, UuidSetContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_gtuidSet; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGtuidSet) {
			listener.enterGtuidSet(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGtuidSet) {
			listener.exitGtuidSet(this);
		}
	}
}


export class XaStartTransactionContext extends ParserRuleContext {
	public _xaStart: Token;
	public _xaAction: Token;
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public START(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.START, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEGIN, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JOIN, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESUME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaStartTransaction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaStartTransaction) {
			listener.enterXaStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaStartTransaction) {
			listener.exitXaStartTransaction(this);
		}
	}
}


export class XaEndTransactionContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUSPEND, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public MIGRATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIGRATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaEndTransaction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaEndTransaction) {
			listener.enterXaEndTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaEndTransaction) {
			listener.exitXaEndTransaction(this);
		}
	}
}


export class XaPrepareStatementContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public PREPARE(): TerminalNode { return this.getToken(MySqlParser.PREPARE, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaPrepareStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaPrepareStatement) {
			listener.enterXaPrepareStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaPrepareStatement) {
			listener.exitXaPrepareStatement(this);
		}
	}
}


export class XaCommitWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public COMMIT(): TerminalNode { return this.getToken(MySqlParser.COMMIT, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public ONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE, 0); }
	public PHASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PHASE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaCommitWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaCommitWork) {
			listener.enterXaCommitWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaCommitWork) {
			listener.exitXaCommitWork(this);
		}
	}
}


export class XaRollbackWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public ROLLBACK(): TerminalNode { return this.getToken(MySqlParser.ROLLBACK, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaRollbackWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaRollbackWork) {
			listener.enterXaRollbackWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaRollbackWork) {
			listener.exitXaRollbackWork(this);
		}
	}
}


export class XaRecoverWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MySqlParser.XA, 0); }
	public RECOVER(): TerminalNode { return this.getToken(MySqlParser.RECOVER, 0); }
	public CONVERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONVERT, 0); }
	public xid(): XidContext | undefined {
		return this.tryGetRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xaRecoverWork; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXaRecoverWork) {
			listener.enterXaRecoverWork(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXaRecoverWork) {
			listener.exitXaRecoverWork(this);
		}
	}
}


export class PrepareStatementContext extends ParserRuleContext {
	public _query: Token;
	public _variable: Token;
	public PREPARE(): TerminalNode { return this.getToken(MySqlParser.PREPARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_prepareStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrepareStatement) {
			listener.enterPrepareStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrepareStatement) {
			listener.exitPrepareStatement(this);
		}
	}
}


export class ExecuteStatementContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode { return this.getToken(MySqlParser.EXECUTE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public userVariables(): UserVariablesContext | undefined {
		return this.tryGetRuleContext(0, UserVariablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_executeStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExecuteStatement) {
			listener.enterExecuteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExecuteStatement) {
			listener.exitExecuteStatement(this);
		}
	}
}


export class DeallocatePrepareContext extends ParserRuleContext {
	public _dropFormat: Token;
	public PREPARE(): TerminalNode { return this.getToken(MySqlParser.PREPARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEALLOCATE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_deallocatePrepare; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeallocatePrepare) {
			listener.enterDeallocatePrepare(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeallocatePrepare) {
			listener.exitDeallocatePrepare(this);
		}
	}
}


export class RoutineBodyContext extends ParserRuleContext {
	public blockStatement(): BlockStatementContext | undefined {
		return this.tryGetRuleContext(0, BlockStatementContext);
	}
	public sqlStatement(): SqlStatementContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_routineBody; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRoutineBody) {
			listener.enterRoutineBody(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRoutineBody) {
			listener.exitRoutineBody(this);
		}
	}
}


export class BlockStatementContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(MySqlParser.BEGIN, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public declareVariable(): DeclareVariableContext[];
	public declareVariable(i: number): DeclareVariableContext;
	public declareVariable(i?: number): DeclareVariableContext | DeclareVariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareVariableContext);
		} else {
			return this.getRuleContext(i, DeclareVariableContext);
		}
	}
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SEMI);
		} else {
			return this.getToken(MySqlParser.SEMI, i);
		}
	}
	public declareCondition(): DeclareConditionContext[];
	public declareCondition(i: number): DeclareConditionContext;
	public declareCondition(i?: number): DeclareConditionContext | DeclareConditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareConditionContext);
		} else {
			return this.getRuleContext(i, DeclareConditionContext);
		}
	}
	public declareCursor(): DeclareCursorContext[];
	public declareCursor(i: number): DeclareCursorContext;
	public declareCursor(i?: number): DeclareCursorContext | DeclareCursorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareCursorContext);
		} else {
			return this.getRuleContext(i, DeclareCursorContext);
		}
	}
	public declareHandler(): DeclareHandlerContext[];
	public declareHandler(i: number): DeclareHandlerContext;
	public declareHandler(i?: number): DeclareHandlerContext | DeclareHandlerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareHandlerContext);
		} else {
			return this.getRuleContext(i, DeclareHandlerContext);
		}
	}
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_blockStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBlockStatement) {
			listener.enterBlockStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBlockStatement) {
			listener.exitBlockStatement(this);
		}
	}
}


export class CaseStatementContext extends ParserRuleContext {
	public CASE(): TerminalNode[];
	public CASE(i: number): TerminalNode;
	public CASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.CASE);
		} else {
			return this.getToken(MySqlParser.CASE, i);
		}
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public caseAlternative(): CaseAlternativeContext[];
	public caseAlternative(i: number): CaseAlternativeContext;
	public caseAlternative(i?: number): CaseAlternativeContext | CaseAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseAlternativeContext);
		} else {
			return this.getRuleContext(i, CaseAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELSE, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_caseStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseStatement) {
			listener.enterCaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseStatement) {
			listener.exitCaseStatement(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	public _procedureSqlStatement: ProcedureSqlStatementContext;
	public _thenStatements: ProcedureSqlStatementContext[] = [];
	public _elseStatements: ProcedureSqlStatementContext[] = [];
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IF);
		} else {
			return this.getToken(MySqlParser.IF, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public elifAlternative(): ElifAlternativeContext[];
	public elifAlternative(i: number): ElifAlternativeContext;
	public elifAlternative(i?: number): ElifAlternativeContext | ElifAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ElifAlternativeContext);
		} else {
			return this.getRuleContext(i, ElifAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELSE, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ifStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIfStatement) {
			listener.enterIfStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIfStatement) {
			listener.exitIfStatement(this);
		}
	}
}


export class IterateStatementContext extends ParserRuleContext {
	public ITERATE(): TerminalNode { return this.getToken(MySqlParser.ITERATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_iterateStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIterateStatement) {
			listener.enterIterateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIterateStatement) {
			listener.exitIterateStatement(this);
		}
	}
}


export class LeaveStatementContext extends ParserRuleContext {
	public LEAVE(): TerminalNode { return this.getToken(MySqlParser.LEAVE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_leaveStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLeaveStatement) {
			listener.enterLeaveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLeaveStatement) {
			listener.exitLeaveStatement(this);
		}
	}
}


export class LoopStatementContext extends ParserRuleContext {
	public LOOP(): TerminalNode[];
	public LOOP(i: number): TerminalNode;
	public LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LOOP);
		} else {
			return this.getToken(MySqlParser.LOOP, i);
		}
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loopStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoopStatement) {
			listener.enterLoopStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoopStatement) {
			listener.exitLoopStatement(this);
		}
	}
}


export class RepeatStatementContext extends ParserRuleContext {
	public REPEAT(): TerminalNode[];
	public REPEAT(i: number): TerminalNode;
	public REPEAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.REPEAT);
		} else {
			return this.getToken(MySqlParser.REPEAT, i);
		}
	}
	public UNTIL(): TerminalNode { return this.getToken(MySqlParser.UNTIL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_repeatStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRepeatStatement) {
			listener.enterRepeatStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRepeatStatement) {
			listener.exitRepeatStatement(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(MySqlParser.RETURN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_returnStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterReturnStatement) {
			listener.enterReturnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitReturnStatement) {
			listener.exitReturnStatement(this);
		}
	}
}


export class WhileStatementContext extends ParserRuleContext {
	public WHILE(): TerminalNode[];
	public WHILE(i: number): TerminalNode;
	public WHILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.WHILE);
		} else {
			return this.getToken(MySqlParser.WHILE, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DO(): TerminalNode { return this.getToken(MySqlParser.DO, 0); }
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_whileStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWhileStatement) {
			listener.enterWhileStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWhileStatement) {
			listener.exitWhileStatement(this);
		}
	}
}


export class CursorStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_cursorStatement; }
	public copyFrom(ctx: CursorStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class CloseCursorContext extends CursorStatementContext {
	public CLOSE(): TerminalNode { return this.getToken(MySqlParser.CLOSE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCloseCursor) {
			listener.enterCloseCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCloseCursor) {
			listener.exitCloseCursor(this);
		}
	}
}
export class FetchCursorContext extends CursorStatementContext {
	public FETCH(): TerminalNode { return this.getToken(MySqlParser.FETCH, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEXT, 0); }
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFetchCursor) {
			listener.enterFetchCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFetchCursor) {
			listener.exitFetchCursor(this);
		}
	}
}
export class OpenCursorContext extends CursorStatementContext {
	public OPEN(): TerminalNode { return this.getToken(MySqlParser.OPEN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOpenCursor) {
			listener.enterOpenCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOpenCursor) {
			listener.exitOpenCursor(this);
		}
	}
}


export class DeclareVariableContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext | undefined {
		return this.tryGetRuleContext(0, DefaultValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareVariable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareVariable) {
			listener.enterDeclareVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareVariable) {
			listener.exitDeclareVariable(this);
		}
	}
}


export class DeclareConditionContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public CONDITION(): TerminalNode { return this.getToken(MySqlParser.CONDITION, 0); }
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQLSTATE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareCondition; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareCondition) {
			listener.enterDeclareCondition(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareCondition) {
			listener.exitDeclareCondition(this);
		}
	}
}


export class DeclareCursorContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public CURSOR(): TerminalNode { return this.getToken(MySqlParser.CURSOR, 0); }
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareCursor; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareCursor) {
			listener.enterDeclareCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareCursor) {
			listener.exitDeclareCursor(this);
		}
	}
}


export class DeclareHandlerContext extends ParserRuleContext {
	public _handlerAction: Token;
	public DECLARE(): TerminalNode { return this.getToken(MySqlParser.DECLARE, 0); }
	public HANDLER(): TerminalNode { return this.getToken(MySqlParser.HANDLER, 0); }
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public handlerConditionValue(): HandlerConditionValueContext[];
	public handlerConditionValue(i: number): HandlerConditionValueContext;
	public handlerConditionValue(i?: number): HandlerConditionValueContext | HandlerConditionValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HandlerConditionValueContext);
		} else {
			return this.getRuleContext(i, HandlerConditionValueContext);
		}
	}
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTINUE, 0); }
	public EXIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXIT, 0); }
	public UNDO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDO, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_declareHandler; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDeclareHandler) {
			listener.enterDeclareHandler(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDeclareHandler) {
			listener.exitDeclareHandler(this);
		}
	}
}


export class HandlerConditionValueContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_handlerConditionValue; }
	public copyFrom(ctx: HandlerConditionValueContext): void {
		super.copyFrom(ctx);
	}
}
export class HandlerConditionCodeContext extends HandlerConditionValueContext {
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionCode) {
			listener.enterHandlerConditionCode(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionCode) {
			listener.exitHandlerConditionCode(this);
		}
	}
}
export class HandlerConditionStateContext extends HandlerConditionValueContext {
	public SQLSTATE(): TerminalNode { return this.getToken(MySqlParser.SQLSTATE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionState) {
			listener.enterHandlerConditionState(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionState) {
			listener.exitHandlerConditionState(this);
		}
	}
}
export class HandlerConditionNameContext extends HandlerConditionValueContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionName) {
			listener.enterHandlerConditionName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionName) {
			listener.exitHandlerConditionName(this);
		}
	}
}
export class HandlerConditionWarningContext extends HandlerConditionValueContext {
	public SQLWARNING(): TerminalNode { return this.getToken(MySqlParser.SQLWARNING, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionWarning) {
			listener.enterHandlerConditionWarning(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionWarning) {
			listener.exitHandlerConditionWarning(this);
		}
	}
}
export class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
	public NOT(): TerminalNode { return this.getToken(MySqlParser.NOT, 0); }
	public FOUND(): TerminalNode { return this.getToken(MySqlParser.FOUND, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionNotfound) {
			listener.enterHandlerConditionNotfound(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionNotfound) {
			listener.exitHandlerConditionNotfound(this);
		}
	}
}
export class HandlerConditionExceptionContext extends HandlerConditionValueContext {
	public SQLEXCEPTION(): TerminalNode { return this.getToken(MySqlParser.SQLEXCEPTION, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHandlerConditionException) {
			listener.enterHandlerConditionException(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHandlerConditionException) {
			listener.exitHandlerConditionException(this);
		}
	}
}


export class ProcedureSqlStatementContext extends ParserRuleContext {
	public SEMI(): TerminalNode { return this.getToken(MySqlParser.SEMI, 0); }
	public compoundStatement(): CompoundStatementContext | undefined {
		return this.tryGetRuleContext(0, CompoundStatementContext);
	}
	public sqlStatement(): SqlStatementContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_procedureSqlStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterProcedureSqlStatement) {
			listener.enterProcedureSqlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitProcedureSqlStatement) {
			listener.exitProcedureSqlStatement(this);
		}
	}
}


export class CaseAlternativeContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(MySqlParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_caseAlternative; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseAlternative) {
			listener.enterCaseAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseAlternative) {
			listener.exitCaseAlternative(this);
		}
	}
}


export class ElifAlternativeContext extends ParserRuleContext {
	public ELSEIF(): TerminalNode { return this.getToken(MySqlParser.ELSEIF, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_elifAlternative; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterElifAlternative) {
			listener.enterElifAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitElifAlternative) {
			listener.exitElifAlternative(this);
		}
	}
}


export class AlterUserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_alterUser; }
	public copyFrom(ctx: AlterUserContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterUserMysqlV56Context extends AlterUserContext {
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userSpecification(): UserSpecificationContext[];
	public userSpecification(i: number): UserSpecificationContext;
	public userSpecification(i?: number): UserSpecificationContext | UserSpecificationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserSpecificationContext);
		} else {
			return this.getRuleContext(i, UserSpecificationContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: AlterUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterUserMysqlV56) {
			listener.enterAlterUserMysqlV56(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterUserMysqlV56) {
			listener.exitAlterUserMysqlV56(this);
		}
	}
}
export class AlterUserMysqlV57Context extends AlterUserContext {
	public _tlsNone: Token;
	public ALTER(): TerminalNode { return this.getToken(MySqlParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public userPasswordOption(): UserPasswordOptionContext[];
	public userPasswordOption(i: number): UserPasswordOptionContext;
	public userPasswordOption(i?: number): UserPasswordOptionContext | UserPasswordOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserPasswordOptionContext);
		} else {
			return this.getRuleContext(i, UserPasswordOptionContext);
		}
	}
	public userLockOption(): UserLockOptionContext[];
	public userLockOption(i: number): UserLockOptionContext;
	public userLockOption(i?: number): UserLockOptionContext | UserLockOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserLockOptionContext);
		} else {
			return this.getRuleContext(i, UserLockOptionContext);
		}
	}
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AND);
		} else {
			return this.getToken(MySqlParser.AND, i);
		}
	}
	constructor(ctx: AlterUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAlterUserMysqlV57) {
			listener.enterAlterUserMysqlV57(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAlterUserMysqlV57) {
			listener.exitAlterUserMysqlV57(this);
		}
	}
}


export class CreateUserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createUser; }
	public copyFrom(ctx: CreateUserContext): void {
		super.copyFrom(ctx);
	}
}
export class CreateUserMysqlV56Context extends CreateUserContext {
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: CreateUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateUserMysqlV56) {
			listener.enterCreateUserMysqlV56(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateUserMysqlV56) {
			listener.exitCreateUserMysqlV56(this);
		}
	}
}
export class CreateUserMysqlV57Context extends CreateUserContext {
	public _tlsNone: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public userPasswordOption(): UserPasswordOptionContext[];
	public userPasswordOption(i: number): UserPasswordOptionContext;
	public userPasswordOption(i?: number): UserPasswordOptionContext | UserPasswordOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserPasswordOptionContext);
		} else {
			return this.getRuleContext(i, UserPasswordOptionContext);
		}
	}
	public userLockOption(): UserLockOptionContext[];
	public userLockOption(i: number): UserLockOptionContext;
	public userLockOption(i?: number): UserLockOptionContext | UserLockOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserLockOptionContext);
		} else {
			return this.getRuleContext(i, UserLockOptionContext);
		}
	}
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AND);
		} else {
			return this.getToken(MySqlParser.AND, i);
		}
	}
	constructor(ctx: CreateUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateUserMysqlV57) {
			listener.enterCreateUserMysqlV57(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateUserMysqlV57) {
			listener.exitCreateUserMysqlV57(this);
		}
	}
}


export class DropUserContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MySqlParser.DROP, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dropUser; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDropUser) {
			listener.enterDropUser(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDropUser) {
			listener.exitDropUser(this);
		}
	}
}


export class GrantStatementContext extends ParserRuleContext {
	public _privilegeObject: Token;
	public _tlsNone: Token;
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.GRANT);
		} else {
			return this.getToken(MySqlParser.GRANT, i);
		}
	}
	public privelegeClause(): PrivelegeClauseContext[];
	public privelegeClause(i: number): PrivelegeClauseContext;
	public privelegeClause(i?: number): PrivelegeClauseContext | PrivelegeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivelegeClauseContext);
		} else {
			return this.getRuleContext(i, PrivelegeClauseContext);
		}
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public privilegeLevel(): PrivilegeLevelContext {
		return this.getRuleContext(0, PrivilegeLevelContext);
	}
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public OPTION(): TerminalNode[];
	public OPTION(i: number): TerminalNode;
	public OPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.OPTION);
		} else {
			return this.getToken(MySqlParser.OPTION, i);
		}
	}
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AND);
		} else {
			return this.getToken(MySqlParser.AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_grantStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGrantStatement) {
			listener.enterGrantStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGrantStatement) {
			listener.exitGrantStatement(this);
		}
	}
}


export class GrantProxyContext extends ParserRuleContext {
	public _fromFirst: UserNameContext;
	public _toFirst: UserNameContext;
	public _userName: UserNameContext;
	public _toOther: UserNameContext[] = [];
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.GRANT);
		} else {
			return this.getToken(MySqlParser.GRANT, i);
		}
	}
	public PROXY(): TerminalNode { return this.getToken(MySqlParser.PROXY, 0); }
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_grantProxy; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGrantProxy) {
			listener.enterGrantProxy(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGrantProxy) {
			listener.exitGrantProxy(this);
		}
	}
}


export class RenameUserContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(MySqlParser.RENAME, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public renameUserClause(): RenameUserClauseContext[];
	public renameUserClause(i: number): RenameUserClauseContext;
	public renameUserClause(i?: number): RenameUserClauseContext | RenameUserClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RenameUserClauseContext);
		} else {
			return this.getRuleContext(i, RenameUserClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameUser; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameUser) {
			listener.enterRenameUser(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameUser) {
			listener.exitRenameUser(this);
		}
	}
}


export class RevokeStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_revokeStatement; }
	public copyFrom(ctx: RevokeStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class DetailRevokeContext extends RevokeStatementContext {
	public _privilegeObject: Token;
	public REVOKE(): TerminalNode { return this.getToken(MySqlParser.REVOKE, 0); }
	public privelegeClause(): PrivelegeClauseContext[];
	public privelegeClause(i: number): PrivelegeClauseContext;
	public privelegeClause(i?: number): PrivelegeClauseContext | PrivelegeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivelegeClauseContext);
		} else {
			return this.getRuleContext(i, PrivelegeClauseContext);
		}
	}
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public privilegeLevel(): PrivilegeLevelContext {
		return this.getRuleContext(0, PrivilegeLevelContext);
	}
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	constructor(ctx: RevokeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDetailRevoke) {
			listener.enterDetailRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDetailRevoke) {
			listener.exitDetailRevoke(this);
		}
	}
}
export class ShortRevokeContext extends RevokeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(MySqlParser.REVOKE, 0); }
	public ALL(): TerminalNode { return this.getToken(MySqlParser.ALL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public GRANT(): TerminalNode { return this.getToken(MySqlParser.GRANT, 0); }
	public OPTION(): TerminalNode { return this.getToken(MySqlParser.OPTION, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	constructor(ctx: RevokeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShortRevoke) {
			listener.enterShortRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShortRevoke) {
			listener.exitShortRevoke(this);
		}
	}
}


export class RevokeProxyContext extends ParserRuleContext {
	public _onUser: UserNameContext;
	public _fromFirst: UserNameContext;
	public _userName: UserNameContext;
	public _fromOther: UserNameContext[] = [];
	public REVOKE(): TerminalNode { return this.getToken(MySqlParser.REVOKE, 0); }
	public PROXY(): TerminalNode { return this.getToken(MySqlParser.PROXY, 0); }
	public ON(): TerminalNode { return this.getToken(MySqlParser.ON, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_revokeProxy; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRevokeProxy) {
			listener.enterRevokeProxy(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRevokeProxy) {
			listener.exitRevokeProxy(this);
		}
	}
}


export class SetPasswordStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public passwordFunctionClause(): PasswordFunctionClauseContext | undefined {
		return this.tryGetRuleContext(0, PasswordFunctionClauseContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setPasswordStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetPasswordStatement) {
			listener.enterSetPasswordStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetPasswordStatement) {
			listener.exitSetPasswordStatement(this);
		}
	}
}


export class UserSpecificationContext extends ParserRuleContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public userPasswordOption(): UserPasswordOptionContext {
		return this.getRuleContext(0, UserPasswordOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userSpecification; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserSpecification) {
			listener.enterUserSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserSpecification) {
			listener.exitUserSpecification(this);
		}
	}
}


export class UserAuthOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userAuthOption; }
	public copyFrom(ctx: UserAuthOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class PasswordAuthOptionContext extends UserAuthOptionContext {
	public _hashed: Token;
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MySqlParser.IDENTIFIED, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordAuthOption) {
			listener.enterPasswordAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordAuthOption) {
			listener.exitPasswordAuthOption(this);
		}
	}
}
export class StringAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MySqlParser.IDENTIFIED, 0); }
	public BY(): TerminalNode { return this.getToken(MySqlParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public authPlugin(): AuthPluginContext | undefined {
		return this.tryGetRuleContext(0, AuthPluginContext);
	}
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringAuthOption) {
			listener.enterStringAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringAuthOption) {
			listener.exitStringAuthOption(this);
		}
	}
}
export class HashAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MySqlParser.IDENTIFIED, 0); }
	public WITH(): TerminalNode { return this.getToken(MySqlParser.WITH, 0); }
	public authPlugin(): AuthPluginContext {
		return this.getRuleContext(0, AuthPluginContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHashAuthOption) {
			listener.enterHashAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHashAuthOption) {
			listener.exitHashAuthOption(this);
		}
	}
}
export class SimpleAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleAuthOption) {
			listener.enterSimpleAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleAuthOption) {
			listener.exitSimpleAuthOption(this);
		}
	}
}


export class TlsOptionContext extends ParserRuleContext {
	public SSL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SSL, 0); }
	public X509(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.X509, 0); }
	public CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CIPHER, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public ISSUER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISSUER, 0); }
	public SUBJECT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBJECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tlsOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTlsOption) {
			listener.enterTlsOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTlsOption) {
			listener.exitTlsOption(this);
		}
	}
}


export class UserResourceOptionContext extends ParserRuleContext {
	public MAX_QUERIES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public MAX_UPDATES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
	public MAX_USER_CONNECTIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userResourceOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserResourceOption) {
			listener.enterUserResourceOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserResourceOption) {
			listener.exitUserResourceOption(this);
		}
	}
}


export class UserPasswordOptionContext extends ParserRuleContext {
	public _expireType: Token;
	public PASSWORD(): TerminalNode { return this.getToken(MySqlParser.PASSWORD, 0); }
	public EXPIRE(): TerminalNode { return this.getToken(MySqlParser.EXPIRE, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public NEVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEVER, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTERVAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userPasswordOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserPasswordOption) {
			listener.enterUserPasswordOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserPasswordOption) {
			listener.exitUserPasswordOption(this);
		}
	}
}


export class UserLockOptionContext extends ParserRuleContext {
	public _lockType: Token;
	public ACCOUNT(): TerminalNode { return this.getToken(MySqlParser.ACCOUNT, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public UNLOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNLOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userLockOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserLockOption) {
			listener.enterUserLockOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserLockOption) {
			listener.exitUserLockOption(this);
		}
	}
}


export class PrivelegeClauseContext extends ParserRuleContext {
	public privilege(): PrivilegeContext {
		return this.getRuleContext(0, PrivilegeContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privelegeClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrivelegeClause) {
			listener.enterPrivelegeClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrivelegeClause) {
			listener.exitPrivelegeClause(this);
		}
	}
}


export class PrivilegeContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALTER, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROUTINE, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIEW, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLESPACE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELETE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DROP, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENT, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXECUTE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GRANT, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTION, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESS, 0); }
	public PROXY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROXY, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REFERENCES, 0); }
	public RELOAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELOAD, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATION, 0); }
	public CLIENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CLIENT, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SELECT, 0); }
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHOW, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASES, 0); }
	public SHUTDOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHUTDOWN, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUPER, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIGGER, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USAGE, 0); }
	public SESSION_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privilege; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrivilege) {
			listener.enterPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrivilege) {
			listener.exitPrivilege(this);
		}
	}
}


export class PrivilegeLevelContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privilegeLevel; }
	public copyFrom(ctx: PrivilegeLevelContext): void {
		super.copyFrom(ctx);
	}
}
export class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCurrentSchemaPriviLevel) {
			listener.enterCurrentSchemaPriviLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCurrentSchemaPriviLevel) {
			listener.exitCurrentSchemaPriviLevel(this);
		}
	}
}
export class GlobalPrivLevelContext extends PrivilegeLevelContext {
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STAR);
		} else {
			return this.getToken(MySqlParser.STAR, i);
		}
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGlobalPrivLevel) {
			listener.enterGlobalPrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGlobalPrivLevel) {
			listener.exitGlobalPrivLevel(this);
		}
	}
}
export class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefiniteSchemaPrivLevel) {
			listener.enterDefiniteSchemaPrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefiniteSchemaPrivLevel) {
			listener.exitDefiniteSchemaPrivLevel(this);
		}
	}
}
export class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public DOT(): TerminalNode { return this.getToken(MySqlParser.DOT, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefiniteFullTablePrivLevel) {
			listener.enterDefiniteFullTablePrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefiniteFullTablePrivLevel) {
			listener.exitDefiniteFullTablePrivLevel(this);
		}
	}
}
export class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dottedId(): DottedIdContext {
		return this.getRuleContext(0, DottedIdContext);
	}
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefiniteFullTablePrivLevel2) {
			listener.enterDefiniteFullTablePrivLevel2(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefiniteFullTablePrivLevel2) {
			listener.exitDefiniteFullTablePrivLevel2(this);
		}
	}
}
export class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefiniteTablePrivLevel) {
			listener.enterDefiniteTablePrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefiniteTablePrivLevel) {
			listener.exitDefiniteTablePrivLevel(this);
		}
	}
}


export class RenameUserClauseContext extends ParserRuleContext {
	public _fromFirst: UserNameContext;
	public _toFirst: UserNameContext;
	public TO(): TerminalNode { return this.getToken(MySqlParser.TO, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_renameUserClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRenameUserClause) {
			listener.enterRenameUserClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRenameUserClause) {
			listener.exitRenameUserClause(this);
		}
	}
}


export class AnalyzeTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public ANALYZE(): TerminalNode { return this.getToken(MySqlParser.ANALYZE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_analyzeTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAnalyzeTable) {
			listener.enterAnalyzeTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAnalyzeTable) {
			listener.exitAnalyzeTable(this);
		}
	}
}


export class CheckTableContext extends ParserRuleContext {
	public CHECK(): TerminalNode { return this.getToken(MySqlParser.CHECK, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public checkTableOption(): CheckTableOptionContext[];
	public checkTableOption(i: number): CheckTableOptionContext;
	public checkTableOption(i?: number): CheckTableOptionContext | CheckTableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CheckTableOptionContext);
		} else {
			return this.getRuleContext(i, CheckTableOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_checkTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCheckTable) {
			listener.enterCheckTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCheckTable) {
			listener.exitCheckTable(this);
		}
	}
}


export class ChecksumTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public CHECKSUM(): TerminalNode { return this.getToken(MySqlParser.CHECKSUM, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_checksumTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChecksumTable) {
			listener.enterChecksumTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChecksumTable) {
			listener.exitChecksumTable(this);
		}
	}
}


export class OptimizeTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public OPTIMIZE(): TerminalNode { return this.getToken(MySqlParser.OPTIMIZE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_optimizeTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterOptimizeTable) {
			listener.enterOptimizeTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitOptimizeTable) {
			listener.exitOptimizeTable(this);
		}
	}
}


export class RepairTableContext extends ParserRuleContext {
	public _actionOption: Token;
	public REPAIR(): TerminalNode { return this.getToken(MySqlParser.REPAIR, 0); }
	public TABLE(): TerminalNode { return this.getToken(MySqlParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public USE_FRM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USE_FRM, 0); }
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_repairTable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRepairTable) {
			listener.enterRepairTable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRepairTable) {
			listener.exitRepairTable(this);
		}
	}
}


export class CheckTableOptionContext extends ParserRuleContext {
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public UPGRADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPGRADE, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public FAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAST, 0); }
	public MEDIUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUM, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_checkTableOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCheckTableOption) {
			listener.enterCheckTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCheckTableOption) {
			listener.exitCheckTableOption(this);
		}
	}
}


export class CreateUdfunctionContext extends ParserRuleContext {
	public _returnType: Token;
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MySqlParser.FUNCTION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public RETURNS(): TerminalNode { return this.getToken(MySqlParser.RETURNS, 0); }
	public SONAME(): TerminalNode { return this.getToken(MySqlParser.SONAME, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTEGER, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REAL, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AGGREGATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_createUdfunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCreateUdfunction) {
			listener.enterCreateUdfunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCreateUdfunction) {
			listener.exitCreateUdfunction(this);
		}
	}
}


export class InstallPluginContext extends ParserRuleContext {
	public INSTALL(): TerminalNode { return this.getToken(MySqlParser.INSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(MySqlParser.PLUGIN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public SONAME(): TerminalNode { return this.getToken(MySqlParser.SONAME, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_installPlugin; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInstallPlugin) {
			listener.enterInstallPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInstallPlugin) {
			listener.exitInstallPlugin(this);
		}
	}
}


export class UninstallPluginContext extends ParserRuleContext {
	public UNINSTALL(): TerminalNode { return this.getToken(MySqlParser.UNINSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(MySqlParser.PLUGIN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uninstallPlugin; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUninstallPlugin) {
			listener.enterUninstallPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUninstallPlugin) {
			listener.exitUninstallPlugin(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_setStatement; }
	public copyFrom(ctx: SetStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class SetVariableContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public variableClause(): VariableClauseContext[];
	public variableClause(i: number): VariableClauseContext;
	public variableClause(i?: number): VariableClauseContext | VariableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableClauseContext);
		} else {
			return this.getRuleContext(i, VariableClauseContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
	}
	public VAR_ASSIGN(): TerminalNode[];
	public VAR_ASSIGN(i: number): TerminalNode;
	public VAR_ASSIGN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.VAR_ASSIGN);
		} else {
			return this.getToken(MySqlParser.VAR_ASSIGN, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetVariable) {
			listener.enterSetVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetVariable) {
			listener.exitSetVariable(this);
		}
	}
}
export class SetCharsetContext extends SetStatementContext {
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetCharset) {
			listener.enterSetCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetCharset) {
			listener.exitSetCharset(this);
		}
	}
}
export class SetNamesContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public NAMES(): TerminalNode { return this.getToken(MySqlParser.NAMES, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetNames) {
			listener.enterSetNames(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetNames) {
			listener.exitSetNames(this);
		}
	}
}
export class SetPasswordContext extends SetStatementContext {
	public setPasswordStatement(): SetPasswordStatementContext {
		return this.getRuleContext(0, SetPasswordStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetPassword) {
			listener.enterSetPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetPassword) {
			listener.exitSetPassword(this);
		}
	}
}
export class SetTransactionContext extends SetStatementContext {
	public setTransactionStatement(): SetTransactionStatementContext {
		return this.getRuleContext(0, SetTransactionStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetTransaction) {
			listener.enterSetTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetTransaction) {
			listener.exitSetTransaction(this);
		}
	}
}
export class SetAutocommitContext extends SetStatementContext {
	public setAutocommitStatement(): SetAutocommitStatementContext {
		return this.getRuleContext(0, SetAutocommitStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetAutocommit) {
			listener.enterSetAutocommit(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetAutocommit) {
			listener.exitSetAutocommit(this);
		}
	}
}
export class SetNewValueInsideTriggerContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MySqlParser.SET, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public VAR_ASSIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_ASSIGN, 0); }
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSetNewValueInsideTrigger) {
			listener.enterSetNewValueInsideTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSetNewValueInsideTrigger) {
			listener.exitSetNewValueInsideTrigger(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showStatement; }
	public copyFrom(ctx: ShowStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ShowMasterLogsContext extends ShowStatementContext {
	public _logFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public LOGS(): TerminalNode { return this.getToken(MySqlParser.LOGS, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowMasterLogs) {
			listener.enterShowMasterLogs(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowMasterLogs) {
			listener.exitShowMasterLogs(this);
		}
	}
}
export class ShowLogEventsContext extends ShowStatementContext {
	public _logFormat: Token;
	public _filename: Token;
	public _fromPosition: DecimalLiteralContext;
	public _offset: DecimalLiteralContext;
	public _rowCount: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public EVENTS(): TerminalNode { return this.getToken(MySqlParser.EVENTS, 0); }
	public BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINLOG, 0); }
	public RELAYLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAYLOG, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowLogEvents) {
			listener.enterShowLogEvents(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowLogEvents) {
			listener.exitShowLogEvents(this);
		}
	}
}
export class ShowObjectFilterContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public showCommonEntity(): ShowCommonEntityContext {
		return this.getRuleContext(0, ShowCommonEntityContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowObjectFilter) {
			listener.enterShowObjectFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowObjectFilter) {
			listener.exitShowObjectFilter(this);
		}
	}
}
export class ShowColumnsContext extends ShowStatementContext {
	public _columnsFormat: Token;
	public _tableFormat: Token;
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.FROM);
		} else {
			return this.getToken(MySqlParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IN);
		} else {
			return this.getToken(MySqlParser.IN, i);
		}
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowColumns) {
			listener.enterShowColumns(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowColumns) {
			listener.exitShowColumns(this);
		}
	}
}
export class ShowCreateDbContext extends ShowStatementContext {
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCreateDb) {
			listener.enterShowCreateDb(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCreateDb) {
			listener.exitShowCreateDb(this);
		}
	}
}
export class ShowCreateFullIdObjectContext extends ShowStatementContext {
	public _namedEntity: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENT, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIGGER, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIEW, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCreateFullIdObject) {
			listener.enterShowCreateFullIdObject(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCreateFullIdObject) {
			listener.exitShowCreateFullIdObject(this);
		}
	}
}
export class ShowCreateUserContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MySqlParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MySqlParser.USER, 0); }
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCreateUser) {
			listener.enterShowCreateUser(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCreateUser) {
			listener.exitShowCreateUser(this);
		}
	}
}
export class ShowEngineContext extends ShowStatementContext {
	public _engineOption: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MySqlParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public MUTEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MUTEX, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowEngine) {
			listener.enterShowEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowEngine) {
			listener.exitShowEngine(this);
		}
	}
}
export class ShowGlobalInfoContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		return this.getRuleContext(0, ShowGlobalInfoClauseContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowGlobalInfo) {
			listener.enterShowGlobalInfo(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowGlobalInfo) {
			listener.exitShowGlobalInfo(this);
		}
	}
}
export class ShowErrorsContext extends ShowStatementContext {
	public _errorFormat: Token;
	public _offset: DecimalLiteralContext;
	public _rowCount: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERRORS, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WARNINGS, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowErrors) {
			listener.enterShowErrors(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowErrors) {
			listener.exitShowErrors(this);
		}
	}
}
export class ShowCountErrorsContext extends ShowStatementContext {
	public _errorFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public COUNT(): TerminalNode { return this.getToken(MySqlParser.COUNT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public STAR(): TerminalNode { return this.getToken(MySqlParser.STAR, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERRORS, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WARNINGS, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCountErrors) {
			listener.enterShowCountErrors(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCountErrors) {
			listener.exitShowCountErrors(this);
		}
	}
}
export class ShowSchemaFilterContext extends ShowStatementContext {
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public showSchemaEntity(): ShowSchemaEntityContext {
		return this.getRuleContext(0, ShowSchemaEntityContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowSchemaFilter) {
			listener.enterShowSchemaFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowSchemaFilter) {
			listener.exitShowSchemaFilter(this);
		}
	}
}
export class ShowRoutineContext extends ShowStatementContext {
	public _routine: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public CODE(): TerminalNode { return this.getToken(MySqlParser.CODE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowRoutine) {
			listener.enterShowRoutine(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowRoutine) {
			listener.exitShowRoutine(this);
		}
	}
}
export class ShowGrantsContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public GRANTS(): TerminalNode { return this.getToken(MySqlParser.GRANTS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowGrants) {
			listener.enterShowGrants(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowGrants) {
			listener.exitShowGrants(this);
		}
	}
}
export class ShowIndexesContext extends ShowStatementContext {
	public _indexFormat: Token;
	public _tableFormat: Token;
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEXES, 0); }
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEYS, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.FROM);
		} else {
			return this.getToken(MySqlParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.IN);
		} else {
			return this.getToken(MySqlParser.IN, i);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowIndexes) {
			listener.enterShowIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowIndexes) {
			listener.exitShowIndexes(this);
		}
	}
}
export class ShowOpenTablesContext extends ShowStatementContext {
	public _schemaFormat: Token;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public OPEN(): TerminalNode { return this.getToken(MySqlParser.OPEN, 0); }
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IN, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowOpenTables) {
			listener.enterShowOpenTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowOpenTables) {
			listener.exitShowOpenTables(this);
		}
	}
}
export class ShowProfileContext extends ShowStatementContext {
	public _queryCount: DecimalLiteralContext;
	public _offset: DecimalLiteralContext;
	public _rowCount: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public PROFILE(): TerminalNode { return this.getToken(MySqlParser.PROFILE, 0); }
	public showProfileType(): ShowProfileTypeContext[];
	public showProfileType(i: number): ShowProfileTypeContext;
	public showProfileType(i?: number): ShowProfileTypeContext | ShowProfileTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ShowProfileTypeContext);
		} else {
			return this.getRuleContext(i, ShowProfileTypeContext);
		}
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIMIT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowProfile) {
			listener.enterShowProfile(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowProfile) {
			listener.exitShowProfile(this);
		}
	}
}
export class ShowSlaveStatusContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MySqlParser.SHOW, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MySqlParser.SLAVE, 0); }
	public STATUS(): TerminalNode { return this.getToken(MySqlParser.STATUS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANNEL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowSlaveStatus) {
			listener.enterShowSlaveStatus(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowSlaveStatus) {
			listener.exitShowSlaveStatus(this);
		}
	}
}


export class VariableClauseContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public GLOBAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL_ID, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public AT_SIGN(): TerminalNode[];
	public AT_SIGN(i: number): TerminalNode;
	public AT_SIGN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.AT_SIGN);
		} else {
			return this.getToken(MySqlParser.AT_SIGN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_variableClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterVariableClause) {
			listener.enterVariableClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitVariableClause) {
			listener.exitVariableClause(this);
		}
	}
}


export class ShowCommonEntityContext extends ParserRuleContext {
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATION, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASES, 0); }
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMAS, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCEDURE, 0); }
	public VARIABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARIABLES, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showCommonEntity; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowCommonEntity) {
			listener.enterShowCommonEntity(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowCommonEntity) {
			listener.exitShowCommonEntity(this);
		}
	}
}


export class ShowFilterContext extends ParserRuleContext {
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIKE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showFilter; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowFilter) {
			listener.enterShowFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowFilter) {
			listener.exitShowFilter(this);
		}
	}
}


export class ShowGlobalInfoClauseContext extends ParserRuleContext {
	public ENGINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINES, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORAGE, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public PLUGINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUGINS, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	public PROCESSLIST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESSLIST, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public PROFILES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROFILES, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOSTS, 0); }
	public AUTHORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTHORS, 0); }
	public CONTRIBUTORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTRIBUTORS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showGlobalInfoClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowGlobalInfoClause) {
			listener.enterShowGlobalInfoClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowGlobalInfoClause) {
			listener.exitShowGlobalInfoClause(this);
		}
	}
}


export class ShowSchemaEntityContext extends ParserRuleContext {
	public EVENTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENTS, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIGGERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showSchemaEntity; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowSchemaEntity) {
			listener.enterShowSchemaEntity(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowSchemaEntity) {
			listener.exitShowSchemaEntity(this);
		}
	}
}


export class ShowProfileTypeContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLOCK, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO, 0); }
	public CONTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTEXT, 0); }
	public SWITCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWITCHES, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CPU, 0); }
	public IPC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IPC, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PAGE, 0); }
	public FAULTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAULTS, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOURCE, 0); }
	public SWAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWAPS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_showProfileType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShowProfileType) {
			listener.enterShowProfileType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShowProfileType) {
			listener.exitShowProfileType(this);
		}
	}
}


export class BinlogStatementContext extends ParserRuleContext {
	public BINLOG(): TerminalNode { return this.getToken(MySqlParser.BINLOG, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_binlogStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBinlogStatement) {
			listener.enterBinlogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBinlogStatement) {
			listener.exitBinlogStatement(this);
		}
	}
}


export class CacheIndexStatementContext extends ParserRuleContext {
	public _schema: UidContext;
	public CACHE(): TerminalNode { return this.getToken(MySqlParser.CACHE, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public tableIndexes(): TableIndexesContext[];
	public tableIndexes(i: number): TableIndexesContext;
	public tableIndexes(i?: number): TableIndexesContext | TableIndexesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableIndexesContext);
		} else {
			return this.getRuleContext(i, TableIndexesContext);
		}
	}
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_cacheIndexStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCacheIndexStatement) {
			listener.enterCacheIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCacheIndexStatement) {
			listener.exitCacheIndexStatement(this);
		}
	}
}


export class FlushStatementContext extends ParserRuleContext {
	public _flushFormat: Token;
	public FLUSH(): TerminalNode { return this.getToken(MySqlParser.FLUSH, 0); }
	public flushOption(): FlushOptionContext[];
	public flushOption(i: number): FlushOptionContext;
	public flushOption(i?: number): FlushOptionContext | FlushOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FlushOptionContext);
		} else {
			return this.getRuleContext(i, FlushOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_flushStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFlushStatement) {
			listener.enterFlushStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFlushStatement) {
			listener.exitFlushStatement(this);
		}
	}
}


export class KillStatementContext extends ParserRuleContext {
	public _connectionFormat: Token;
	public KILL(): TerminalNode { return this.getToken(MySqlParser.KILL, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONNECTION, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_killStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterKillStatement) {
			listener.enterKillStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitKillStatement) {
			listener.exitKillStatement(this);
		}
	}
}


export class LoadIndexIntoCacheContext extends ParserRuleContext {
	public LOAD(): TerminalNode { return this.getToken(MySqlParser.LOAD, 0); }
	public INDEX(): TerminalNode { return this.getToken(MySqlParser.INDEX, 0); }
	public INTO(): TerminalNode { return this.getToken(MySqlParser.INTO, 0); }
	public CACHE(): TerminalNode { return this.getToken(MySqlParser.CACHE, 0); }
	public loadedTableIndexes(): LoadedTableIndexesContext[];
	public loadedTableIndexes(i: number): LoadedTableIndexesContext;
	public loadedTableIndexes(i?: number): LoadedTableIndexesContext | LoadedTableIndexesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LoadedTableIndexesContext);
		} else {
			return this.getRuleContext(i, LoadedTableIndexesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadIndexIntoCache; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadIndexIntoCache) {
			listener.enterLoadIndexIntoCache(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadIndexIntoCache) {
			listener.exitLoadIndexIntoCache(this);
		}
	}
}


export class ResetStatementContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MySqlParser.RESET, 0); }
	public QUERY(): TerminalNode { return this.getToken(MySqlParser.QUERY, 0); }
	public CACHE(): TerminalNode { return this.getToken(MySqlParser.CACHE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_resetStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterResetStatement) {
			listener.enterResetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitResetStatement) {
			listener.exitResetStatement(this);
		}
	}
}


export class ShutdownStatementContext extends ParserRuleContext {
	public SHUTDOWN(): TerminalNode { return this.getToken(MySqlParser.SHUTDOWN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_shutdownStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterShutdownStatement) {
			listener.enterShutdownStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitShutdownStatement) {
			listener.exitShutdownStatement(this);
		}
	}
}


export class TableIndexesContext extends ParserRuleContext {
	public _indexFormat: Token;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableIndexes; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableIndexes) {
			listener.enterTableIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableIndexes) {
			listener.exitTableIndexes(this);
		}
	}
}


export class FlushOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_flushOption; }
	public copyFrom(ctx: FlushOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleFlushOptionContext extends FlushOptionContext {
	public DES_KEY_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DES_KEY_FILE, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOSTS, 0); }
	public LOGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOGS, 0); }
	public OPTIMIZER_COSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CACHE, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public USER_RESOURCES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER_RESOURCES, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERROR, 0); }
	public GENERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GENERAL, 0); }
	public RELAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY, 0); }
	public SLOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLOW, 0); }
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleFlushOption) {
			listener.enterSimpleFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleFlushOption) {
			listener.exitSimpleFlushOption(this);
		}
	}
}
export class ChannelFlushOptionContext extends FlushOptionContext {
	public RELAY(): TerminalNode { return this.getToken(MySqlParser.RELAY, 0); }
	public LOGS(): TerminalNode { return this.getToken(MySqlParser.LOGS, 0); }
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterChannelFlushOption) {
			listener.enterChannelFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitChannelFlushOption) {
			listener.exitChannelFlushOption(this);
		}
	}
}
export class TableFlushOptionContext extends FlushOptionContext {
	public TABLES(): TerminalNode { return this.getToken(MySqlParser.TABLES, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public flushTableOption(): FlushTableOptionContext | undefined {
		return this.tryGetRuleContext(0, FlushTableOptionContext);
	}
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableFlushOption) {
			listener.enterTableFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableFlushOption) {
			listener.exitTableFlushOption(this);
		}
	}
}


export class FlushTableOptionContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITH, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.READ, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCK, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPORT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_flushTableOption; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFlushTableOption) {
			listener.enterFlushTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFlushTableOption) {
			listener.exitFlushTableOption(this);
		}
	}
}


export class LoadedTableIndexesContext extends ParserRuleContext {
	public _partitionList: UidListContext;
	public _indexFormat: Token;
	public _indexList: UidListContext;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE, 0); }
	public LEAVES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEAVES, 0); }
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_loadedTableIndexes; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLoadedTableIndexes) {
			listener.enterLoadedTableIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLoadedTableIndexes) {
			listener.exitLoadedTableIndexes(this);
		}
	}
}


export class SimpleDescribeStatementContext extends ParserRuleContext {
	public _command: Token;
	public _column: UidContext;
	public _pattern: Token;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPLAIN, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESCRIBE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_simpleDescribeStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleDescribeStatement) {
			listener.enterSimpleDescribeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleDescribeStatement) {
			listener.exitSimpleDescribeStatement(this);
		}
	}
}


export class FullDescribeStatementContext extends ParserRuleContext {
	public _command: Token;
	public _formatType: Token;
	public _formatValue: Token;
	public describeObjectClause(): DescribeObjectClauseContext {
		return this.getRuleContext(0, DescribeObjectClauseContext);
	}
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPLAIN, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESCRIBE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONS, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FORMAT, 0); }
	public TRADITIONAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRADITIONAL, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JSON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fullDescribeStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullDescribeStatement) {
			listener.enterFullDescribeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullDescribeStatement) {
			listener.exitFullDescribeStatement(this);
		}
	}
}


export class HelpStatementContext extends ParserRuleContext {
	public HELP(): TerminalNode { return this.getToken(MySqlParser.HELP, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_helpStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHelpStatement) {
			listener.enterHelpStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHelpStatement) {
			listener.exitHelpStatement(this);
		}
	}
}


export class UseStatementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(MySqlParser.USE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_useStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUseStatement) {
			listener.enterUseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUseStatement) {
			listener.exitUseStatement(this);
		}
	}
}


export class SignalStatementContext extends ParserRuleContext {
	public SIGNAL(): TerminalNode { return this.getToken(MySqlParser.SIGNAL, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ID, 0); }
	public REVERSE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public signalConditionInformation(): SignalConditionInformationContext[];
	public signalConditionInformation(i: number): SignalConditionInformationContext;
	public signalConditionInformation(i?: number): SignalConditionInformationContext | SignalConditionInformationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SignalConditionInformationContext);
		} else {
			return this.getRuleContext(i, SignalConditionInformationContext);
		}
	}
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQLSTATE, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_signalStatement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSignalStatement) {
			listener.enterSignalStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSignalStatement) {
			listener.exitSignalStatement(this);
		}
	}
}


export class SignalConditionInformationContext extends ParserRuleContext {
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public CLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CLASS_ORIGIN, 0); }
	public SUBCLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
	public MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MESSAGE_TEXT, 0); }
	public MYSQL_ERRNO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYSQL_ERRNO, 0); }
	public CONSTRAINT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
	public CONSTRAINT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
	public CONSTRAINT_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT_NAME, 0); }
	public CATALOG_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CATALOG_NAME, 0); }
	public SCHEMA_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA_NAME, 0); }
	public TABLE_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE_NAME, 0); }
	public COLUMN_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN_NAME, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public DECIMAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_signalConditionInformation; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSignalConditionInformation) {
			listener.enterSignalConditionInformation(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSignalConditionInformation) {
			listener.exitSignalConditionInformation(this);
		}
	}
}


export class DescribeObjectClauseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_describeObjectClause; }
	public copyFrom(ctx: DescribeObjectClauseContext): void {
		super.copyFrom(ctx);
	}
}
export class DescribeStatementsContext extends DescribeObjectClauseContext {
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	constructor(ctx: DescribeObjectClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDescribeStatements) {
			listener.enterDescribeStatements(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDescribeStatements) {
			listener.exitDescribeStatements(this);
		}
	}
}
export class DescribeConnectionContext extends DescribeObjectClauseContext {
	public FOR(): TerminalNode { return this.getToken(MySqlParser.FOR, 0); }
	public CONNECTION(): TerminalNode { return this.getToken(MySqlParser.CONNECTION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: DescribeObjectClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDescribeConnection) {
			listener.enterDescribeConnection(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDescribeConnection) {
			listener.exitDescribeConnection(this);
		}
	}
}


export class FullIdContext extends ParserRuleContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public DOT_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT_ID, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fullId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullId) {
			listener.enterFullId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullId) {
			listener.exitFullId(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tableName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTableName) {
			listener.enterTableName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTableName) {
			listener.exitTableName(this);
		}
	}
}


export class FullColumnNameContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dottedId(): DottedIdContext[];
	public dottedId(i: number): DottedIdContext;
	public dottedId(i?: number): DottedIdContext | DottedIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DottedIdContext);
		} else {
			return this.getRuleContext(i, DottedIdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fullColumnName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullColumnName) {
			listener.enterFullColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullColumnName) {
			listener.exitFullColumnName(this);
		}
	}
}


export class IndexColumnNameContext extends ParserRuleContext {
	public _sortType: Token;
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexColumnName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexColumnName) {
			listener.enterIndexColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexColumnName) {
			listener.exitIndexColumnName(this);
		}
	}
}


export class UserNameContext extends ParserRuleContext {
	public STRING_USER_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_USER_NAME, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ID, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserName) {
			listener.enterUserName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserName) {
			listener.exitUserName(this);
		}
	}
}


export class MysqlVariableContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public GLOBAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_mysqlVariable; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMysqlVariable) {
			listener.enterMysqlVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMysqlVariable) {
			listener.exitMysqlVariable(this);
		}
	}
}


export class CharsetNameContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public charsetNameBase(): CharsetNameBaseContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameBaseContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_charsetName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCharsetName) {
			listener.enterCharsetName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCharsetName) {
			listener.exitCharsetName(this);
		}
	}
}


export class CollationNameContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_collationName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollationName) {
			listener.enterCollationName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollationName) {
			listener.exitCollationName(this);
		}
	}
}


export class EngineNameContext extends ParserRuleContext {
	public ARCHIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ARCHIVE, 0); }
	public BLACKHOLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLACKHOLE, 0); }
	public CSV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CSV, 0); }
	public FEDERATED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FEDERATED, 0); }
	public INNODB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INNODB, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public MRG_MYISAM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MRG_MYISAM, 0); }
	public MYISAM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYISAM, 0); }
	public NDB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NDB, 0); }
	public NDBCLUSTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NDBCLUSTER, 0); }
	public PERFORMANCE_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
	public TOKUDB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TOKUDB, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ID, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public REVERSE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_engineName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterEngineName) {
			listener.enterEngineName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitEngineName) {
			listener.exitEngineName(this);
		}
	}
}


export class UuidSetContext extends ParserRuleContext {
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public MINUS(): TerminalNode[];
	public MINUS(i: number): TerminalNode;
	public MINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.MINUS);
		} else {
			return this.getToken(MySqlParser.MINUS, i);
		}
	}
	public COLON_SYMB(): TerminalNode[];
	public COLON_SYMB(i: number): TerminalNode;
	public COLON_SYMB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COLON_SYMB);
		} else {
			return this.getToken(MySqlParser.COLON_SYMB, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uuidSet; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUuidSet) {
			listener.enterUuidSet(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUuidSet) {
			listener.exitUuidSet(this);
		}
	}
}


export class XidContext extends ParserRuleContext {
	public _globalTableUid: XuidStringIdContext;
	public _qualifier: XuidStringIdContext;
	public _idFormat: DecimalLiteralContext;
	public xuidStringId(): XuidStringIdContext[];
	public xuidStringId(i: number): XuidStringIdContext;
	public xuidStringId(i?: number): XuidStringIdContext | XuidStringIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(XuidStringIdContext);
		} else {
			return this.getRuleContext(i, XuidStringIdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xid; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXid) {
			listener.enterXid(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXid) {
			listener.exitXid(this);
		}
	}
}


export class XuidStringIdContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public BIT_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_STRING, 0); }
	public HEXADECIMAL_LITERAL(): TerminalNode[];
	public HEXADECIMAL_LITERAL(i: number): TerminalNode;
	public HEXADECIMAL_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.HEXADECIMAL_LITERAL);
		} else {
			return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_xuidStringId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterXuidStringId) {
			listener.enterXuidStringId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitXuidStringId) {
			listener.exitXuidStringId(this);
		}
	}
}


export class AuthPluginContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_authPlugin; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAuthPlugin) {
			listener.enterAuthPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAuthPlugin) {
			listener.exitAuthPlugin(this);
		}
	}
}


export class UidContext extends ParserRuleContext {
	public simpleId(): SimpleIdContext | undefined {
		return this.tryGetRuleContext(0, SimpleIdContext);
	}
	public REVERSE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uid; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUid) {
			listener.enterUid(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUid) {
			listener.exitUid(this);
		}
	}
}


export class SimpleIdContext extends ParserRuleContext {
	public ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ID, 0); }
	public charsetNameBase(): CharsetNameBaseContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameBaseContext);
	}
	public transactionLevelBase(): TransactionLevelBaseContext | undefined {
		return this.tryGetRuleContext(0, TransactionLevelBaseContext);
	}
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public privilegesBase(): PrivilegesBaseContext | undefined {
		return this.tryGetRuleContext(0, PrivilegesBaseContext);
	}
	public intervalTypeBase(): IntervalTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, IntervalTypeBaseContext);
	}
	public dataTypeBase(): DataTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, DataTypeBaseContext);
	}
	public keywordsCanBeId(): KeywordsCanBeIdContext | undefined {
		return this.tryGetRuleContext(0, KeywordsCanBeIdContext);
	}
	public functionNameBase(): FunctionNameBaseContext | undefined {
		return this.tryGetRuleContext(0, FunctionNameBaseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_simpleId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleId) {
			listener.enterSimpleId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleId) {
			listener.exitSimpleId(this);
		}
	}
}


export class DottedIdContext extends ParserRuleContext {
	public DOT_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT_ID, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dottedId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDottedId) {
			listener.enterDottedId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDottedId) {
			listener.exitDottedId(this);
		}
	}
}


export class DecimalLiteralContext extends ParserRuleContext {
	public DECIMAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL_LITERAL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TWO_DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_decimalLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDecimalLiteral) {
			listener.enterDecimalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDecimalLiteral) {
			listener.exitDecimalLiteral(this);
		}
	}
}


export class FileSizeLiteralContext extends ParserRuleContext {
	public FILESIZE_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILESIZE_LITERAL, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_fileSizeLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFileSizeLiteral) {
			listener.enterFileSizeLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFileSizeLiteral) {
			listener.exitFileSizeLiteral(this);
		}
	}
}


export class StringLiteralContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public START_NATIONAL_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
	public STRING_CHARSET_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_stringLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringLiteral) {
			listener.enterStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringLiteral) {
			listener.exitStringLiteral(this);
		}
	}
}


export class BooleanLiteralContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_booleanLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBooleanLiteral) {
			listener.enterBooleanLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBooleanLiteral) {
			listener.exitBooleanLiteral(this);
		}
	}
}


export class HexadecimalLiteralContext extends ParserRuleContext {
	public HEXADECIMAL_LITERAL(): TerminalNode { return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
	public STRING_CHARSET_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_hexadecimalLiteral; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterHexadecimalLiteral) {
			listener.enterHexadecimalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitHexadecimalLiteral) {
			listener.exitHexadecimalLiteral(this);
		}
	}
}


export class NullNotnullContext extends ParserRuleContext {
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public NULL_SPEC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_nullNotnull; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNullNotnull) {
			listener.enterNullNotnull(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNullNotnull) {
			listener.exitNullNotnull(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public _nullLiteral: Token;
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUS, 0); }
	public hexadecimalLiteral(): HexadecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, HexadecimalLiteralContext);
	}
	public booleanLiteral(): BooleanLiteralContext | undefined {
		return this.tryGetRuleContext(0, BooleanLiteralContext);
	}
	public REAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REAL_LITERAL, 0); }
	public BIT_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_STRING, 0); }
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public NULL_SPEC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_constant; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
}


export class DataTypeContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dataType; }
	public copyFrom(ctx: DataTypeContext): void {
		super.copyFrom(ctx);
	}
}
export class StringDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARCHAR, 0); }
	public TINYTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TINYTEXT, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEXT, 0); }
	public MEDIUMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUMTEXT, 0); }
	public LONGTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LONGTEXT, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NCHAR, 0); }
	public NVARCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NVARCHAR, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterStringDataType) {
			listener.enterStringDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitStringDataType) {
			listener.exitStringDataType(this);
		}
	}
}
export class NationalStringDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NATIONAL, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARCHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NCHAR, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNationalStringDataType) {
			listener.enterNationalStringDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNationalStringDataType) {
			listener.exitNationalStringDataType(this);
		}
	}
}
export class NationalVaryingStringDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public NATIONAL(): TerminalNode { return this.getToken(MySqlParser.NATIONAL, 0); }
	public VARYING(): TerminalNode { return this.getToken(MySqlParser.VARYING, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNationalVaryingStringDataType) {
			listener.enterNationalVaryingStringDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNationalVaryingStringDataType) {
			listener.exitNationalVaryingStringDataType(this);
		}
	}
}
export class DimensionDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public TINYINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TINYINT, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SMALLINT, 0); }
	public MEDIUMINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUMINT, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTEGER, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIGINT, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public ZEROFILL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ZEROFILL, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNSIGNED, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REAL, 0); }
	public lengthTwoDimension(): LengthTwoDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoDimensionContext);
	}
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DOUBLE, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRECISION, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL, 0); }
	public DEC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEC, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIXED, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMERIC, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FLOAT, 0); }
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoOptionalDimensionContext);
	}
	public BIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMP, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public VARBINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARBINARY, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDimensionDataType) {
			listener.enterDimensionDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDimensionDataType) {
			listener.exitDimensionDataType(this);
		}
	}
}
export class SimpleDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public TINYBLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TINYBLOB, 0); }
	public BLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLOB, 0); }
	public MEDIUMBLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUMBLOB, 0); }
	public LONGBLOB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LONGBLOB, 0); }
	public BOOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOL, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOLEAN, 0); }
	public SERIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIAL, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleDataType) {
			listener.enterSimpleDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleDataType) {
			listener.exitSimpleDataType(this);
		}
	}
}
export class CollectionDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public collectionOptions(): CollectionOptionsContext {
		return this.getRuleContext(0, CollectionOptionsContext);
	}
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENUM, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.SET);
		} else {
			return this.getToken(MySqlParser.SET, i);
		}
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollectionDataType) {
			listener.enterCollectionDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollectionDataType) {
			listener.exitCollectionDataType(this);
		}
	}
}
export class SpatialDataTypeContext extends DataTypeContext {
	public _typeName: Token;
	public GEOMETRYCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
	public GEOMCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMCOLLECTION, 0); }
	public LINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRING, 0); }
	public MULTILINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRING, 0); }
	public MULTIPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINT, 0); }
	public MULTIPOLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGON, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINT, 0); }
	public POLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGON, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JSON, 0); }
	public GEOMETRY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRY, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSpatialDataType) {
			listener.enterSpatialDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSpatialDataType) {
			listener.exitSpatialDataType(this);
		}
	}
}


export class CollectionOptionsContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_collectionOptions; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollectionOptions) {
			listener.enterCollectionOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollectionOptions) {
			listener.exitCollectionOptions(this);
		}
	}
}


export class ConvertedDataTypeContext extends ParserRuleContext {
	public _typeName: Token;
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NCHAR, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JSON, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECIMAL, 0); }
	public lengthTwoDimension(): LengthTwoDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoDimensionContext);
	}
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNSIGNED, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTEGER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_convertedDataType; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConvertedDataType) {
			listener.enterConvertedDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConvertedDataType) {
			listener.exitConvertedDataType(this);
		}
	}
}


export class LengthOneDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lengthOneDimension; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLengthOneDimension) {
			listener.enterLengthOneDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLengthOneDimension) {
			listener.exitLengthOneDimension(this);
		}
	}
}


export class LengthTwoDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lengthTwoDimension; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLengthTwoDimension) {
			listener.enterLengthTwoDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLengthTwoDimension) {
			listener.exitLengthTwoDimension(this);
		}
	}
}


export class LengthTwoOptionalDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_lengthTwoOptionalDimension; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLengthTwoOptionalDimension) {
			listener.enterLengthTwoOptionalDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLengthTwoOptionalDimension) {
			listener.exitLengthTwoOptionalDimension(this);
		}
	}
}


export class UidListContext extends ParserRuleContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_uidList; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUidList) {
			listener.enterUidList(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUidList) {
			listener.exitUidList(this);
		}
	}
}


export class TablesContext extends ParserRuleContext {
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_tables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTables) {
			listener.enterTables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTables) {
			listener.exitTables(this);
		}
	}
}


export class IndexColumnNamesContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public indexColumnName(): IndexColumnNameContext[];
	public indexColumnName(i: number): IndexColumnNameContext;
	public indexColumnName(i?: number): IndexColumnNameContext | IndexColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexColumnNameContext);
		} else {
			return this.getRuleContext(i, IndexColumnNameContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_indexColumnNames; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIndexColumnNames) {
			listener.enterIndexColumnNames(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIndexColumnNames) {
			listener.exitIndexColumnNames(this);
		}
	}
}


export class ExpressionsContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressions; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressions) {
			listener.enterExpressions(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressions) {
			listener.exitExpressions(this);
		}
	}
}


export class ExpressionsWithDefaultsContext extends ParserRuleContext {
	public expressionOrDefault(): ExpressionOrDefaultContext[];
	public expressionOrDefault(i: number): ExpressionOrDefaultContext;
	public expressionOrDefault(i?: number): ExpressionOrDefaultContext | ExpressionOrDefaultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionOrDefaultContext);
		} else {
			return this.getRuleContext(i, ExpressionOrDefaultContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressionsWithDefaults; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressionsWithDefaults) {
			listener.enterExpressionsWithDefaults(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressionsWithDefaults) {
			listener.exitExpressionsWithDefaults(this);
		}
	}
}


export class ConstantsContext extends ParserRuleContext {
	public constant(): ConstantContext[];
	public constant(i: number): ConstantContext;
	public constant(i?: number): ConstantContext | ConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstantContext);
		} else {
			return this.getRuleContext(i, ConstantContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_constants; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstants) {
			listener.enterConstants(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstants) {
			listener.exitConstants(this);
		}
	}
}


export class SimpleStringsContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.STRING_LITERAL);
		} else {
			return this.getToken(MySqlParser.STRING_LITERAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_simpleStrings; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleStrings) {
			listener.enterSimpleStrings(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleStrings) {
			listener.exitSimpleStrings(this);
		}
	}
}


export class UserVariablesContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LOCAL_ID);
		} else {
			return this.getToken(MySqlParser.LOCAL_ID, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_userVariables; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUserVariables) {
			listener.enterUserVariables(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUserVariables) {
			listener.exitUserVariables(this);
		}
	}
}


export class DefaultValueContext extends ParserRuleContext {
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULL_LITERAL, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public unaryOperator(): UnaryOperatorContext | undefined {
		return this.tryGetRuleContext(0, UnaryOperatorContext);
	}
	public currentTimestamp(): CurrentTimestampContext[];
	public currentTimestamp(i: number): CurrentTimestampContext;
	public currentTimestamp(i?: number): CurrentTimestampContext | CurrentTimestampContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CurrentTimestampContext);
		} else {
			return this.getRuleContext(i, CurrentTimestampContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ON, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_defaultValue; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDefaultValue) {
			listener.enterDefaultValue(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDefaultValue) {
			listener.exitDefaultValue(this);
		}
	}
}


export class CurrentTimestampContext extends ParserRuleContext {
	public NOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOW, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RR_BRACKET, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIMESTAMP, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_currentTimestamp; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCurrentTimestamp) {
			listener.enterCurrentTimestamp(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCurrentTimestamp) {
			listener.exitCurrentTimestamp(this);
		}
	}
}


export class ExpressionOrDefaultContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressionOrDefault; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressionOrDefault) {
			listener.enterExpressionOrDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressionOrDefault) {
			listener.exitExpressionOrDefault(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(MySqlParser.IF, 0); }
	public EXISTS(): TerminalNode { return this.getToken(MySqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ifExists; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIfExists) {
			listener.enterIfExists(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIfExists) {
			listener.exitIfExists(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(MySqlParser.IF, 0); }
	public NOT(): TerminalNode { return this.getToken(MySqlParser.NOT, 0); }
	public EXISTS(): TerminalNode { return this.getToken(MySqlParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_ifNotExists; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIfNotExists) {
			listener.enterIfNotExists(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIfNotExists) {
			listener.exitIfNotExists(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionCall; }
	public copyFrom(ctx: FunctionCallContext): void {
		super.copyFrom(ctx);
	}
}
export class SpecificFunctionCallContext extends FunctionCallContext {
	public specificFunction(): SpecificFunctionContext {
		return this.getRuleContext(0, SpecificFunctionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSpecificFunctionCall) {
			listener.enterSpecificFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSpecificFunctionCall) {
			listener.exitSpecificFunctionCall(this);
		}
	}
}
export class AggregateFunctionCallContext extends FunctionCallContext {
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		return this.getRuleContext(0, AggregateWindowedFunctionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAggregateFunctionCall) {
			listener.enterAggregateFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAggregateFunctionCall) {
			listener.exitAggregateFunctionCall(this);
		}
	}
}
export class ScalarFunctionCallContext extends FunctionCallContext {
	public scalarFunctionName(): ScalarFunctionNameContext {
		return this.getRuleContext(0, ScalarFunctionNameContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterScalarFunctionCall) {
			listener.enterScalarFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitScalarFunctionCall) {
			listener.exitScalarFunctionCall(this);
		}
	}
}
export class UdfFunctionCallContext extends FunctionCallContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUdfFunctionCall) {
			listener.enterUdfFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUdfFunctionCall) {
			listener.exitUdfFunctionCall(this);
		}
	}
}
export class PasswordFunctionCallContext extends FunctionCallContext {
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		return this.getRuleContext(0, PasswordFunctionClauseContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordFunctionCall) {
			listener.enterPasswordFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordFunctionCall) {
			listener.exitPasswordFunctionCall(this);
		}
	}
}


export class SpecificFunctionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_specificFunction; }
	public copyFrom(ctx: SpecificFunctionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleFunctionCallContext extends SpecificFunctionContext {
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_DATE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_USER, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIME, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSimpleFunctionCall) {
			listener.enterSimpleFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSimpleFunctionCall) {
			listener.exitSimpleFunctionCall(this);
		}
	}
}
export class DataTypeFunctionCallContext extends SpecificFunctionContext {
	public _separator: Token;
	public CONVERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONVERT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public convertedDataType(): ConvertedDataTypeContext | undefined {
		return this.tryGetRuleContext(0, ConvertedDataTypeContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMA, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public CAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CAST, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDataTypeFunctionCall) {
			listener.enterDataTypeFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDataTypeFunctionCall) {
			listener.exitDataTypeFunctionCall(this);
		}
	}
}
export class ValuesFunctionCallContext extends SpecificFunctionContext {
	public VALUES(): TerminalNode { return this.getToken(MySqlParser.VALUES, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterValuesFunctionCall) {
			listener.enterValuesFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitValuesFunctionCall) {
			listener.exitValuesFunctionCall(this);
		}
	}
}
export class CaseFunctionCallContext extends SpecificFunctionContext {
	public _elseArg: FunctionArgContext;
	public CASE(): TerminalNode { return this.getToken(MySqlParser.CASE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(MySqlParser.END, 0); }
	public caseFuncAlternative(): CaseFuncAlternativeContext[];
	public caseFuncAlternative(i: number): CaseFuncAlternativeContext;
	public caseFuncAlternative(i?: number): CaseFuncAlternativeContext | CaseFuncAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseFuncAlternativeContext);
		} else {
			return this.getRuleContext(i, CaseFuncAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELSE, 0); }
	public functionArg(): FunctionArgContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseFunctionCall) {
			listener.enterCaseFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseFunctionCall) {
			listener.exitCaseFunctionCall(this);
		}
	}
}
export class CharFunctionCallContext extends SpecificFunctionContext {
	public CHAR(): TerminalNode { return this.getToken(MySqlParser.CHAR, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext {
		return this.getRuleContext(0, FunctionArgsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USING, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCharFunctionCall) {
			listener.enterCharFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCharFunctionCall) {
			listener.exitCharFunctionCall(this);
		}
	}
}
export class PositionFunctionCallContext extends SpecificFunctionContext {
	public _positionString: StringLiteralContext;
	public _positionExpression: ExpressionContext;
	public _inString: StringLiteralContext;
	public _inExpression: ExpressionContext;
	public POSITION(): TerminalNode { return this.getToken(MySqlParser.POSITION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public stringLiteral(): StringLiteralContext[];
	public stringLiteral(i: number): StringLiteralContext;
	public stringLiteral(i?: number): StringLiteralContext | StringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringLiteralContext);
		} else {
			return this.getRuleContext(i, StringLiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPositionFunctionCall) {
			listener.enterPositionFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPositionFunctionCall) {
			listener.exitPositionFunctionCall(this);
		}
	}
}
export class SubstrFunctionCallContext extends SpecificFunctionContext {
	public _sourceString: StringLiteralContext;
	public _sourceExpression: ExpressionContext;
	public _fromDecimal: DecimalLiteralContext;
	public _fromExpression: ExpressionContext;
	public _forDecimal: DecimalLiteralContext;
	public _forExpression: ExpressionContext;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public SUBSTR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTR, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTRING, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOR, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubstrFunctionCall) {
			listener.enterSubstrFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubstrFunctionCall) {
			listener.exitSubstrFunctionCall(this);
		}
	}
}
export class TrimFunctionCallContext extends SpecificFunctionContext {
	public _positioinForm: Token;
	public _sourceString: StringLiteralContext;
	public _sourceExpression: ExpressionContext;
	public _fromString: StringLiteralContext;
	public _fromExpression: ExpressionContext;
	public TRIM(): TerminalNode { return this.getToken(MySqlParser.TRIM, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public BOTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOTH, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRAILING, 0); }
	public stringLiteral(): StringLiteralContext[];
	public stringLiteral(i: number): StringLiteralContext;
	public stringLiteral(i?: number): StringLiteralContext | StringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringLiteralContext);
		} else {
			return this.getRuleContext(i, StringLiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTrimFunctionCall) {
			listener.enterTrimFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTrimFunctionCall) {
			listener.exitTrimFunctionCall(this);
		}
	}
}
export class WeightFunctionCallContext extends SpecificFunctionContext {
	public _stringFormat: Token;
	public WEIGHT_STRING(): TerminalNode { return this.getToken(MySqlParser.WEIGHT_STRING, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LR_BRACKET);
		} else {
			return this.getToken(MySqlParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.RR_BRACKET);
		} else {
			return this.getToken(MySqlParser.RR_BRACKET, i);
		}
	}
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AS, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public levelsInWeightString(): LevelsInWeightStringContext | undefined {
		return this.tryGetRuleContext(0, LevelsInWeightStringContext);
	}
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINARY, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterWeightFunctionCall) {
			listener.enterWeightFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitWeightFunctionCall) {
			listener.exitWeightFunctionCall(this);
		}
	}
}
export class ExtractFunctionCallContext extends SpecificFunctionContext {
	public _sourceString: StringLiteralContext;
	public _sourceExpression: ExpressionContext;
	public EXTRACT(): TerminalNode { return this.getToken(MySqlParser.EXTRACT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public FROM(): TerminalNode { return this.getToken(MySqlParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExtractFunctionCall) {
			listener.enterExtractFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExtractFunctionCall) {
			listener.exitExtractFunctionCall(this);
		}
	}
}
export class GetFormatFunctionCallContext extends SpecificFunctionContext {
	public _datetimeFormat: Token;
	public GET_FORMAT(): TerminalNode { return this.getToken(MySqlParser.GET_FORMAT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public COMMA(): TerminalNode { return this.getToken(MySqlParser.COMMA, 0); }
	public stringLiteral(): StringLiteralContext {
		return this.getRuleContext(0, StringLiteralContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterGetFormatFunctionCall) {
			listener.enterGetFormatFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitGetFormatFunctionCall) {
			listener.exitGetFormatFunctionCall(this);
		}
	}
}


export class CaseFuncAlternativeContext extends ParserRuleContext {
	public _condition: FunctionArgContext;
	public _consequent: FunctionArgContext;
	public WHEN(): TerminalNode { return this.getToken(MySqlParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(MySqlParser.THEN, 0); }
	public functionArg(): FunctionArgContext[];
	public functionArg(i: number): FunctionArgContext;
	public functionArg(i?: number): FunctionArgContext | FunctionArgContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionArgContext);
		} else {
			return this.getRuleContext(i, FunctionArgContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_caseFuncAlternative; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCaseFuncAlternative) {
			listener.enterCaseFuncAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCaseFuncAlternative) {
			listener.exitCaseFuncAlternative(this);
		}
	}
}


export class LevelsInWeightStringContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_levelsInWeightString; }
	public copyFrom(ctx: LevelsInWeightStringContext): void {
		super.copyFrom(ctx);
	}
}
export class LevelWeightListContext extends LevelsInWeightStringContext {
	public LEVEL(): TerminalNode { return this.getToken(MySqlParser.LEVEL, 0); }
	public levelInWeightListElement(): LevelInWeightListElementContext[];
	public levelInWeightListElement(i: number): LevelInWeightListElementContext;
	public levelInWeightListElement(i?: number): LevelInWeightListElementContext | LevelInWeightListElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LevelInWeightListElementContext);
		} else {
			return this.getRuleContext(i, LevelInWeightListElementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: LevelsInWeightStringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLevelWeightList) {
			listener.enterLevelWeightList(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLevelWeightList) {
			listener.exitLevelWeightList(this);
		}
	}
}
export class LevelWeightRangeContext extends LevelsInWeightStringContext {
	public _firstLevel: DecimalLiteralContext;
	public _lastLevel: DecimalLiteralContext;
	public LEVEL(): TerminalNode { return this.getToken(MySqlParser.LEVEL, 0); }
	public MINUS(): TerminalNode { return this.getToken(MySqlParser.MINUS, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	constructor(ctx: LevelsInWeightStringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLevelWeightRange) {
			listener.enterLevelWeightRange(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLevelWeightRange) {
			listener.exitLevelWeightRange(this);
		}
	}
}


export class LevelInWeightListElementContext extends ParserRuleContext {
	public _orderType: Token;
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DESC, 0); }
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_levelInWeightListElement; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLevelInWeightListElement) {
			listener.enterLevelInWeightListElement(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLevelInWeightListElement) {
			listener.exitLevelInWeightListElement(this);
		}
	}
}


export class AggregateWindowedFunctionContext extends ParserRuleContext {
	public _aggregator: Token;
	public _starArg: Token;
	public _separator: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public functionArg(): FunctionArgContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public AVG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AVG, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIN, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUM, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISTINCT, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COUNT, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STAR, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	public BIT_AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_AND, 0); }
	public BIT_OR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_OR, 0); }
	public BIT_XOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_XOR, 0); }
	public STD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STD, 0); }
	public STDDEV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STDDEV, 0); }
	public STDDEV_POP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STDDEV_POP, 0); }
	public STDDEV_SAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STDDEV_SAMP, 0); }
	public VAR_POP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_POP, 0); }
	public VAR_SAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_SAMP, 0); }
	public VARIANCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARIANCE, 0); }
	public GROUP_CONCAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP_CONCAT, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BY, 0); }
	public orderByExpression(): OrderByExpressionContext[];
	public orderByExpression(i: number): OrderByExpressionContext;
	public orderByExpression(i?: number): OrderByExpressionContext | OrderByExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderByExpressionContext);
		} else {
			return this.getRuleContext(i, OrderByExpressionContext);
		}
	}
	public SEPARATOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SEPARATOR, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_aggregateWindowedFunction; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterAggregateWindowedFunction) {
			listener.enterAggregateWindowedFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitAggregateWindowedFunction) {
			listener.exitAggregateWindowedFunction(this);
		}
	}
}


export class ScalarFunctionNameContext extends ParserRuleContext {
	public functionNameBase(): FunctionNameBaseContext | undefined {
		return this.tryGetRuleContext(0, FunctionNameBaseContext);
	}
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASCII, 0); }
	public CURDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURDATE, 0); }
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_DATE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
	public CURTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CURTIME, 0); }
	public DATE_ADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE_ADD, 0); }
	public DATE_SUB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE_SUB, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IF, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCALTIMESTAMP, 0); }
	public MID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MID, 0); }
	public NOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOW, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLACE, 0); }
	public SUBSTR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTR, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTRING, 0); }
	public SYSDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SYSDATE, 0); }
	public TRIM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIM, 0); }
	public UTC_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTC_DATE, 0); }
	public UTC_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTC_TIME, 0); }
	public UTC_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTC_TIMESTAMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_scalarFunctionName; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterScalarFunctionName) {
			listener.enterScalarFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitScalarFunctionName) {
			listener.exitScalarFunctionName(this);
		}
	}
}


export class PasswordFunctionClauseContext extends ParserRuleContext {
	public _functionName: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public functionArg(): FunctionArgContext {
		return this.getRuleContext(0, FunctionArgContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PASSWORD, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OLD_PASSWORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_passwordFunctionClause; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPasswordFunctionClause) {
			listener.enterPasswordFunctionClause(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPasswordFunctionClause) {
			listener.exitPasswordFunctionClause(this);
		}
	}
}


export class FunctionArgsContext extends ParserRuleContext {
	public constant(): ConstantContext[];
	public constant(i: number): ConstantContext;
	public constant(i?: number): ConstantContext | ConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstantContext);
		} else {
			return this.getRuleContext(i, ConstantContext);
		}
	}
	public fullColumnName(): FullColumnNameContext[];
	public fullColumnName(i: number): FullColumnNameContext;
	public fullColumnName(i?: number): FullColumnNameContext | FullColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullColumnNameContext);
		} else {
			return this.getRuleContext(i, FullColumnNameContext);
		}
	}
	public functionCall(): FunctionCallContext[];
	public functionCall(i: number): FunctionCallContext;
	public functionCall(i?: number): FunctionCallContext | FunctionCallContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionCallContext);
		} else {
			return this.getRuleContext(i, FunctionCallContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionArgs; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionArgs) {
			listener.enterFunctionArgs(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionArgs) {
			listener.exitFunctionArgs(this);
		}
	}
}


export class FunctionArgContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public fullColumnName(): FullColumnNameContext | undefined {
		return this.tryGetRuleContext(0, FullColumnNameContext);
	}
	public functionCall(): FunctionCallContext | undefined {
		return this.tryGetRuleContext(0, FunctionCallContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionArg; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionArg) {
			listener.enterFunctionArg(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionArg) {
			listener.exitFunctionArg(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expression; }
	public copyFrom(ctx: ExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class NotExpressionContext extends ExpressionContext {
	public _notOperator: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNotExpression) {
			listener.enterNotExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNotExpression) {
			listener.exitNotExpression(this);
		}
	}
}
export class LogicalExpressionContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public logicalOperator(): LogicalOperatorContext {
		return this.getRuleContext(0, LogicalOperatorContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLogicalExpression) {
			listener.enterLogicalExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLogicalExpression) {
			listener.exitLogicalExpression(this);
		}
	}
}
export class IsExpressionContext extends ExpressionContext {
	public _testValue: Token;
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IS(): TerminalNode { return this.getToken(MySqlParser.IS, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FALSE, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNKNOWN, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIsExpression) {
			listener.enterIsExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIsExpression) {
			listener.exitIsExpression(this);
		}
	}
}
export class PredicateExpressionContext extends ExpressionContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPredicateExpression) {
			listener.enterPredicateExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPredicateExpression) {
			listener.exitPredicateExpression(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_predicate; }
	public copyFrom(ctx: PredicateContext): void {
		super.copyFrom(ctx);
	}
}
export class InPredicateContext extends PredicateContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IN(): TerminalNode { return this.getToken(MySqlParser.IN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public expressions(): ExpressionsContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterInPredicate) {
			listener.enterInPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitInPredicate) {
			listener.exitInPredicate(this);
		}
	}
}
export class IsNullPredicateContext extends PredicateContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IS(): TerminalNode { return this.getToken(MySqlParser.IS, 0); }
	public nullNotnull(): NullNotnullContext {
		return this.getRuleContext(0, NullNotnullContext);
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIsNullPredicate) {
			listener.enterIsNullPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIsNullPredicate) {
			listener.exitIsNullPredicate(this);
		}
	}
}
export class BinaryComparasionPredicateContext extends PredicateContext {
	public _left: PredicateContext;
	public _right: PredicateContext;
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBinaryComparasionPredicate) {
			listener.enterBinaryComparasionPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBinaryComparasionPredicate) {
			listener.exitBinaryComparasionPredicate(this);
		}
	}
}
export class SubqueryComparasionPredicateContext extends PredicateContext {
	public _quantifier: Token;
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALL, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ANY, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOME, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubqueryComparasionPredicate) {
			listener.enterSubqueryComparasionPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubqueryComparasionPredicate) {
			listener.exitSubqueryComparasionPredicate(this);
		}
	}
}
export class BetweenPredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public BETWEEN(): TerminalNode { return this.getToken(MySqlParser.BETWEEN, 0); }
	public AND(): TerminalNode { return this.getToken(MySqlParser.AND, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBetweenPredicate) {
			listener.enterBetweenPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBetweenPredicate) {
			listener.exitBetweenPredicate(this);
		}
	}
}
export class SoundsLikePredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public SOUNDS(): TerminalNode { return this.getToken(MySqlParser.SOUNDS, 0); }
	public LIKE(): TerminalNode { return this.getToken(MySqlParser.LIKE, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSoundsLikePredicate) {
			listener.enterSoundsLikePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSoundsLikePredicate) {
			listener.exitSoundsLikePredicate(this);
		}
	}
}
export class LikePredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public LIKE(): TerminalNode { return this.getToken(MySqlParser.LIKE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ESCAPE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING_LITERAL, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLikePredicate) {
			listener.enterLikePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLikePredicate) {
			listener.exitLikePredicate(this);
		}
	}
}
export class RegexpPredicateContext extends PredicateContext {
	public _regex: Token;
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public REGEXP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REGEXP, 0); }
	public RLIKE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RLIKE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterRegexpPredicate) {
			listener.enterRegexpPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitRegexpPredicate) {
			listener.exitRegexpPredicate(this);
		}
	}
}
export class ExpressionAtomPredicateContext extends PredicateContext {
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL_ID, 0); }
	public VAR_ASSIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VAR_ASSIGN, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExpressionAtomPredicate) {
			listener.enterExpressionAtomPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExpressionAtomPredicate) {
			listener.exitExpressionAtomPredicate(this);
		}
	}
}


export class ExpressionAtomContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_expressionAtom; }
	public copyFrom(ctx: ExpressionAtomContext): void {
		super.copyFrom(ctx);
	}
}
export class ConstantExpressionAtomContext extends ExpressionAtomContext {
	public constant(): ConstantContext {
		return this.getRuleContext(0, ConstantContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterConstantExpressionAtom) {
			listener.enterConstantExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitConstantExpressionAtom) {
			listener.exitConstantExpressionAtom(this);
		}
	}
}
export class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFullColumnNameExpressionAtom) {
			listener.enterFullColumnNameExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFullColumnNameExpressionAtom) {
			listener.exitFullColumnNameExpressionAtom(this);
		}
	}
}
export class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionCallExpressionAtom) {
			listener.enterFunctionCallExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionCallExpressionAtom) {
			listener.exitFunctionCallExpressionAtom(this);
		}
	}
}
export class CollateExpressionAtomContext extends ExpressionAtomContext {
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	public COLLATE(): TerminalNode { return this.getToken(MySqlParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCollateExpressionAtom) {
			listener.enterCollateExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCollateExpressionAtom) {
			listener.exitCollateExpressionAtom(this);
		}
	}
}
export class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
	public mysqlVariable(): MysqlVariableContext {
		return this.getRuleContext(0, MysqlVariableContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMysqlVariableExpressionAtom) {
			listener.enterMysqlVariableExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMysqlVariableExpressionAtom) {
			listener.exitMysqlVariableExpressionAtom(this);
		}
	}
}
export class UnaryExpressionAtomContext extends ExpressionAtomContext {
	public unaryOperator(): UnaryOperatorContext {
		return this.getRuleContext(0, UnaryOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnaryExpressionAtom) {
			listener.enterUnaryExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnaryExpressionAtom) {
			listener.exitUnaryExpressionAtom(this);
		}
	}
}
export class BinaryExpressionAtomContext extends ExpressionAtomContext {
	public BINARY(): TerminalNode { return this.getToken(MySqlParser.BINARY, 0); }
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBinaryExpressionAtom) {
			listener.enterBinaryExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBinaryExpressionAtom) {
			listener.exitBinaryExpressionAtom(this);
		}
	}
}
export class NestedExpressionAtomContext extends ExpressionAtomContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNestedExpressionAtom) {
			listener.enterNestedExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNestedExpressionAtom) {
			listener.exitNestedExpressionAtom(this);
		}
	}
}
export class NestedRowExpressionAtomContext extends ExpressionAtomContext {
	public ROW(): TerminalNode { return this.getToken(MySqlParser.ROW, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.COMMA);
		} else {
			return this.getToken(MySqlParser.COMMA, i);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterNestedRowExpressionAtom) {
			listener.enterNestedRowExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitNestedRowExpressionAtom) {
			listener.exitNestedRowExpressionAtom(this);
		}
	}
}
export class ExistsExpessionAtomContext extends ExpressionAtomContext {
	public EXISTS(): TerminalNode { return this.getToken(MySqlParser.EXISTS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterExistsExpessionAtom) {
			listener.enterExistsExpessionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitExistsExpessionAtom) {
			listener.exitExistsExpessionAtom(this);
		}
	}
}
export class SubqueryExpessionAtomContext extends ExpressionAtomContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MySqlParser.RR_BRACKET, 0); }
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterSubqueryExpessionAtom) {
			listener.enterSubqueryExpessionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitSubqueryExpessionAtom) {
			listener.exitSubqueryExpessionAtom(this);
		}
	}
}
export class IntervalExpressionAtomContext extends ExpressionAtomContext {
	public INTERVAL(): TerminalNode { return this.getToken(MySqlParser.INTERVAL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalExpressionAtom) {
			listener.enterIntervalExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalExpressionAtom) {
			listener.exitIntervalExpressionAtom(this);
		}
	}
}
export class BitExpressionAtomContext extends ExpressionAtomContext {
	public _left: ExpressionAtomContext;
	public _right: ExpressionAtomContext;
	public bitOperator(): BitOperatorContext {
		return this.getRuleContext(0, BitOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext[];
	public expressionAtom(i: number): ExpressionAtomContext;
	public expressionAtom(i?: number): ExpressionAtomContext | ExpressionAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionAtomContext);
		} else {
			return this.getRuleContext(i, ExpressionAtomContext);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBitExpressionAtom) {
			listener.enterBitExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBitExpressionAtom) {
			listener.exitBitExpressionAtom(this);
		}
	}
}
export class MathExpressionAtomContext extends ExpressionAtomContext {
	public _left: ExpressionAtomContext;
	public _right: ExpressionAtomContext;
	public mathOperator(): MathOperatorContext {
		return this.getRuleContext(0, MathOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext[];
	public expressionAtom(i: number): ExpressionAtomContext;
	public expressionAtom(i?: number): ExpressionAtomContext | ExpressionAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionAtomContext);
		} else {
			return this.getRuleContext(i, ExpressionAtomContext);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMathExpressionAtom) {
			listener.enterMathExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMathExpressionAtom) {
			listener.exitMathExpressionAtom(this);
		}
	}
}


export class UnaryOperatorContext extends ParserRuleContext {
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
	public BIT_NOT_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_NOT_OP, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_unaryOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterUnaryOperator) {
			listener.enterUnaryOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitUnaryOperator) {
			listener.exitUnaryOperator(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUAL_SYMBOL, 0); }
	public GREATER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREATER_SYMBOL, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LESS_SYMBOL, 0); }
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_comparisonOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterComparisonOperator) {
			listener.enterComparisonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitComparisonOperator) {
			listener.exitComparisonOperator(this);
		}
	}
}


export class LogicalOperatorContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AND, 0); }
	public BIT_AND_OP(): TerminalNode[];
	public BIT_AND_OP(i: number): TerminalNode;
	public BIT_AND_OP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.BIT_AND_OP);
		} else {
			return this.getToken(MySqlParser.BIT_AND_OP, i);
		}
	}
	public XOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.XOR, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OR, 0); }
	public BIT_OR_OP(): TerminalNode[];
	public BIT_OR_OP(i: number): TerminalNode;
	public BIT_OR_OP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.BIT_OR_OP);
		} else {
			return this.getToken(MySqlParser.BIT_OR_OP, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_logicalOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterLogicalOperator) {
			listener.enterLogicalOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitLogicalOperator) {
			listener.exitLogicalOperator(this);
		}
	}
}


export class BitOperatorContext extends ParserRuleContext {
	public LESS_SYMBOL(): TerminalNode[];
	public LESS_SYMBOL(i: number): TerminalNode;
	public LESS_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.LESS_SYMBOL);
		} else {
			return this.getToken(MySqlParser.LESS_SYMBOL, i);
		}
	}
	public GREATER_SYMBOL(): TerminalNode[];
	public GREATER_SYMBOL(i: number): TerminalNode;
	public GREATER_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MySqlParser.GREATER_SYMBOL);
		} else {
			return this.getToken(MySqlParser.GREATER_SYMBOL, i);
		}
	}
	public BIT_AND_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_AND_OP, 0); }
	public BIT_XOR_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_XOR_OP, 0); }
	public BIT_OR_OP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_OR_OP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_bitOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterBitOperator) {
			listener.enterBitOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitBitOperator) {
			listener.exitBitOperator(this);
		}
	}
}


export class MathOperatorContext extends ParserRuleContext {
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STAR, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIVIDE, 0); }
	public MODULE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODULE, 0); }
	public DIV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIV, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MOD, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUS, 0); }
	public MINUSMINUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUSMINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_mathOperator; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterMathOperator) {
			listener.enterMathOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitMathOperator) {
			listener.exitMathOperator(this);
		}
	}
}


export class CharsetNameBaseContext extends ParserRuleContext {
	public ARMSCII8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ARMSCII8, 0); }
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASCII, 0); }
	public BIG5(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIG5, 0); }
	public CP1250(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1250, 0); }
	public CP1251(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1251, 0); }
	public CP1256(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1256, 0); }
	public CP1257(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP1257, 0); }
	public CP850(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP850, 0); }
	public CP852(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP852, 0); }
	public CP866(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP866, 0); }
	public CP932(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CP932, 0); }
	public DEC8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEC8, 0); }
	public EUCJPMS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EUCJPMS, 0); }
	public EUCKR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EUCKR, 0); }
	public GB2312(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GB2312, 0); }
	public GBK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GBK, 0); }
	public GEOSTD8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOSTD8, 0); }
	public GREEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREEK, 0); }
	public HEBREW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HEBREW, 0); }
	public HP8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HP8, 0); }
	public KEYBCS2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEYBCS2, 0); }
	public KOI8R(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KOI8R, 0); }
	public KOI8U(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KOI8U, 0); }
	public LATIN1(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN1, 0); }
	public LATIN2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN2, 0); }
	public LATIN5(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN5, 0); }
	public LATIN7(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LATIN7, 0); }
	public MACCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MACCE, 0); }
	public MACROMAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MACROMAN, 0); }
	public SJIS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SJIS, 0); }
	public SWE7(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWE7, 0); }
	public TIS620(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIS620, 0); }
	public UCS2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UCS2, 0); }
	public UJIS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UJIS, 0); }
	public UTF16(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF16, 0); }
	public UTF16LE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF16LE, 0); }
	public UTF32(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF32, 0); }
	public UTF8(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF8, 0); }
	public UTF8MB3(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF8MB3, 0); }
	public UTF8MB4(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UTF8MB4, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_charsetNameBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterCharsetNameBase) {
			listener.enterCharsetNameBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitCharsetNameBase) {
			listener.exitCharsetNameBase(this);
		}
	}
}


export class TransactionLevelBaseContext extends ParserRuleContext {
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPEATABLE, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMMITTED, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_transactionLevelBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterTransactionLevelBase) {
			listener.enterTransactionLevelBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitTransactionLevelBase) {
			listener.exitTransactionLevelBase(this);
		}
	}
}


export class PrivilegesBaseContext extends ParserRuleContext {
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLES, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROUTINE, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXECUTE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE, 0); }
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESS, 0); }
	public RELOAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELOAD, 0); }
	public SHUTDOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHUTDOWN, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUPER, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRIVILEGES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_privilegesBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterPrivilegesBase) {
			listener.enterPrivilegesBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitPrivilegesBase) {
			listener.exitPrivilegesBase(this);
		}
	}
}


export class IntervalTypeBaseContext extends ParserRuleContext {
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUARTER, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MONTH, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEK, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECOND, 0); }
	public MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MICROSECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_intervalTypeBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterIntervalTypeBase) {
			listener.enterIntervalTypeBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitIntervalTypeBase) {
			listener.exitIntervalTypeBase(this);
		}
	}
}


export class DataTypeBaseContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMP, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATETIME, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENUM, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_dataTypeBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterDataTypeBase) {
			listener.enterDataTypeBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitDataTypeBase) {
			listener.exitDataTypeBase(this);
		}
	}
}


export class KeywordsCanBeIdContext extends ParserRuleContext {
	public ACCOUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACCOUNT, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACTION, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AFTER, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AGGREGATE, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ALGORITHM, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ANY, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AT, 0); }
	public AUTHORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTHORS, 0); }
	public AUTOCOMMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTOCOMMIT, 0); }
	public AUTOEXTEND_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
	public AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AUTO_INCREMENT, 0); }
	public AVG_ROW_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BEGIN, 0); }
	public BINLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BINLOG, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT, 0); }
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BLOCK, 0); }
	public BOOL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOL, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BOOLEAN, 0); }
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BTREE, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CACHE, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CASCADED, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAIN, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANGED, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHANNEL, 0); }
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHECKSUM, 0); }
	public PAGE_CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PAGE_CHECKSUM, 0); }
	public CATALOG_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CATALOG_NAME, 0); }
	public CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CIPHER, 0); }
	public CLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CLASS_ORIGIN, 0); }
	public CLIENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CLIENT, 0); }
	public CLOSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CLOSE, 0); }
	public COALESCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COALESCE, 0); }
	public CODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CODE, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMNS, 0); }
	public COLUMN_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN_FORMAT, 0); }
	public COLUMN_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLUMN_NAME, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMENT, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMMIT, 0); }
	public COMPACT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPACT, 0); }
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPLETION, 0); }
	public COMPRESSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESSED, 0); }
	public COMPRESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESSION, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCURRENT, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONNECTION, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSISTENT, 0); }
	public CONSTRAINT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
	public CONSTRAINT_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT_NAME, 0); }
	public CONSTRAINT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTAINS, 0); }
	public CONTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTEXT, 0); }
	public CONTRIBUTORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONTRIBUTORS, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COPY, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CPU, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATA, 0); }
	public DATAFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATAFILE, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEALLOCATE, 0); }
	public DEFAULT_AUTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFAULT_AUTH, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEFINER, 0); }
	public DELAY_KEY_WRITE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
	public DES_KEY_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DES_KEY_FILE, 0); }
	public DIRECTORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIRECTORY, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISABLE, 0); }
	public DISCARD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISCARD, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISK, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DO, 0); }
	public DUMPFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DUMPFILE, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DUPLICATE, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DYNAMIC, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENABLE, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCRYPTION, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.END, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENDS, 0); }
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINE, 0); }
	public ENGINES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENGINES, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERROR, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ERRORS, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ESCAPE, 0); }
	public EVEN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVEN, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENT, 0); }
	public EVENTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVENTS, 0); }
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EVERY, 0); }
	public EXCHANGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCHANGE, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXCLUSIVE, 0); }
	public EXPIRE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPIRE, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPORT, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENDED, 0); }
	public EXTENT_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTENT_SIZE, 0); }
	public FAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAST, 0); }
	public FAULTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FAULTS, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELDS, 0); }
	public FILE_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FILTER, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIRST, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIXED, 0); }
	public FLUSH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FLUSH, 0); }
	public FOLLOWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOLLOWS, 0); }
	public FOUND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOUND, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FULL, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FUNCTION, 0); }
	public GENERAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GENERAL, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLOBAL, 0); }
	public GRANTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GRANTS, 0); }
	public GROUP_REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GROUP_REPLICATION, 0); }
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HANDLER, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HASH, 0); }
	public HELP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HELP, 0); }
	public HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOST, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOSTS, 0); }
	public IDENTIFIED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IDENTIFIED, 0); }
	public IGNORE_SERVER_IDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
	public IMPORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IMPORT, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INDEXES, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INITIAL_SIZE, 0); }
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INPLACE, 0); }
	public INSERT_METHOD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSERT_METHOD, 0); }
	public INSTALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSTALL, 0); }
	public INSTANCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSTANCE, 0); }
	public INTERNAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTERNAL, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVOKER, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO, 0); }
	public IO_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IO_THREAD, 0); }
	public IPC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IPC, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISOLATION, 0); }
	public ISSUER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISSUER, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.JSON, 0); }
	public KEY_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LANGUAGE, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST, 0); }
	public LEAVES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEAVES, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LESS, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEVEL, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LIST, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCAL, 0); }
	public LOGFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOGFILE, 0); }
	public LOGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOGS, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER, 0); }
	public MASTER_AUTO_POSITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
	public MASTER_CONNECT_RETRY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
	public MASTER_DELAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_DELAY, 0); }
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
	public MASTER_HOST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_HOST, 0); }
	public MASTER_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_FILE, 0); }
	public MASTER_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_LOG_POS, 0); }
	public MASTER_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PASSWORD, 0); }
	public MASTER_PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_PORT, 0); }
	public MASTER_RETRY_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
	public MASTER_SSL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL, 0); }
	public MASTER_SSL_CA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CA, 0); }
	public MASTER_SSL_CAPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
	public MASTER_SSL_CERT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CERT, 0); }
	public MASTER_SSL_CIPHER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
	public MASTER_SSL_CRL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRL, 0); }
	public MASTER_SSL_CRLPATH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
	public MASTER_SSL_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_SSL_KEY, 0); }
	public MASTER_TLS_VERSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
	public MASTER_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_USER, 0); }
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
	public MAX_QUERIES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
	public MAX_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_ROWS, 0); }
	public MAX_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_SIZE, 0); }
	public MAX_UPDATES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
	public MAX_USER_CONNECTIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
	public MEDIUM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEDIUM, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MEMORY, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MERGE, 0); }
	public MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MESSAGE_TEXT, 0); }
	public MID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MID, 0); }
	public MIGRATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIGRATE, 0); }
	public MIN_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MIN_ROWS, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODE, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MODIFY, 0); }
	public MUTEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MUTEX, 0); }
	public MYSQL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYSQL, 0); }
	public MYSQL_ERRNO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MYSQL_ERRNO, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NAMES, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NCHAR, 0); }
	public NEVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEVER, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NEXT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NO, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NODEGROUP, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NONE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFLINE, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OFFSET, 0); }
	public OJ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OJ, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OLD_PASSWORD, 0); }
	public ONE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONE, 0); }
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLINE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ONLY, 0); }
	public OPEN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPEN, 0); }
	public OPTIMIZER_COSTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OPTIONS, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OWNER, 0); }
	public PACK_KEYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PACK_KEYS, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PAGE, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARSER, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTIAL, 0); }
	public PARTITIONING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONING, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PARTITIONS, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PASSWORD, 0); }
	public PHASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PHASE, 0); }
	public PLUGINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUGINS, 0); }
	public PLUGIN_DIR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUGIN_DIR, 0); }
	public PLUGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PLUGIN, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PORT, 0); }
	public PRECEDES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRECEDES, 0); }
	public PREPARE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PREPARE, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PRESERVE, 0); }
	public PREV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PREV, 0); }
	public PROCESSLIST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROCESSLIST, 0); }
	public PROFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROFILE, 0); }
	public PROFILES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROFILES, 0); }
	public PROXY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PROXY, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUERY, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUICK, 0); }
	public REBUILD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REBUILD, 0); }
	public RECOVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RECOVER, 0); }
	public REDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
	public REDUNDANT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REDUNDANT, 0); }
	public RELAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY, 0); }
	public RELAYLOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAYLOG, 0); }
	public RELAY_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_FILE, 0); }
	public RELAY_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELAY_LOG_POS, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REMOVE, 0); }
	public REORGANIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REORGANIZE, 0); }
	public REPAIR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPAIR, 0); }
	public REPLICATE_DO_DB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_DO_DB, 0); }
	public REPLICATE_DO_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
	public REPLICATE_IGNORE_DB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
	public REPLICATE_IGNORE_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
	public REPLICATE_REWRITE_DB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
	public REPLICATE_WILD_DO_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REPLICATION, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESET, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RESUME, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RETURNS, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROLLBACK, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROLLUP, 0); }
	public ROTATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROTATE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROWS, 0); }
	public ROW_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROW_FORMAT, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SAVEPOINT, 0); }
	public SCHEDULE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEDULE, 0); }
	public SCHEMA_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SCHEMA_NAME, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECURITY, 0); }
	public SERIAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERIAL, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SERVER, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHARED, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIGNED, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIMPLE, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLAVE, 0); }
	public SLOW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLOW, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SNAPSHOT, 0); }
	public SOCKET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOCKET, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOME, 0); }
	public SONAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SONAME, 0); }
	public SOUNDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOUNDS, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOURCE, 0); }
	public SQL_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
	public SQL_AFTER_MTS_GAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
	public SQL_BEFORE_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
	public SQL_BUFFER_RESULT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
	public SQL_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_CACHE, 0); }
	public SQL_NO_CACHE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_NO_CACHE, 0); }
	public SQL_THREAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_THREAD, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.START, 0); }
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTS, 0); }
	public STATS_AUTO_RECALC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
	public STATS_PERSISTENT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATS_PERSISTENT, 0); }
	public STATS_SAMPLE_PAGES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STATUS, 0); }
	public STOP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STOP, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STORAGE, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRING, 0); }
	public SUBCLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
	public SUBJECT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBJECT, 0); }
	public SUBPARTITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITION, 0); }
	public SUBPARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBPARTITIONS, 0); }
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUSPEND, 0); }
	public SWAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWAPS, 0); }
	public SWITCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SWITCHES, 0); }
	public TABLE_NAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLE_NAME, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TABLESPACE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPORARY, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TEMPTABLE, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.THAN, 0); }
	public TRADITIONAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRADITIONAL, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRANSACTION, 0); }
	public TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRIGGERS, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TRUNCATE, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDEFINED, 0); }
	public UNDOFILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDOFILE, 0); }
	public UNDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
	public UNINSTALL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNINSTALL, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNKNOWN, 0); }
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNTIL, 0); }
	public UPGRADE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPGRADE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER, 0); }
	public USE_FRM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USE_FRM, 0); }
	public USER_RESOURCES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.USER_RESOURCES, 0); }
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALIDATION, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALUE, 0); }
	public VARIABLES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VARIABLES, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VIEW, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WARNINGS, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHOUT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WORK, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WRAPPER, 0); }
	public X509(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.X509, 0); }
	public XA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.XA, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.XML, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_keywordsCanBeId; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterKeywordsCanBeId) {
			listener.enterKeywordsCanBeId(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitKeywordsCanBeId) {
			listener.exitKeywordsCanBeId(this);
		}
	}
}


export class FunctionNameBaseContext extends ParserRuleContext {
	public ABS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ABS, 0); }
	public ACOS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ACOS, 0); }
	public ADDDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ADDDATE, 0); }
	public ADDTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ADDTIME, 0); }
	public AES_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AES_DECRYPT, 0); }
	public AES_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AES_ENCRYPT, 0); }
	public AREA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.AREA, 0); }
	public ASBINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASBINARY, 0); }
	public ASIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASIN, 0); }
	public ASTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASTEXT, 0); }
	public ASWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASWKB, 0); }
	public ASWKT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASWKT, 0); }
	public ASYMMETRIC_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
	public ASYMMETRIC_DERIVE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
	public ASYMMETRIC_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
	public ASYMMETRIC_SIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
	public ASYMMETRIC_VERIFY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
	public ATAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ATAN, 0); }
	public ATAN2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ATAN2, 0); }
	public BENCHMARK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BENCHMARK, 0); }
	public BIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIN, 0); }
	public BIT_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_COUNT, 0); }
	public BIT_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BIT_LENGTH, 0); }
	public BUFFER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.BUFFER, 0); }
	public CEIL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CEIL, 0); }
	public CEILING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CEILING, 0); }
	public CENTROID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CENTROID, 0); }
	public CHARACTER_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARACTER_LENGTH, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHARSET, 0); }
	public CHAR_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CHAR_LENGTH, 0); }
	public COERCIBILITY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COERCIBILITY, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COLLATION, 0); }
	public COMPRESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COMPRESS, 0); }
	public CONCAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCAT, 0); }
	public CONCAT_WS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONCAT_WS, 0); }
	public CONNECTION_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONNECTION_ID, 0); }
	public CONV(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONV, 0); }
	public CONVERT_TZ(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CONVERT_TZ, 0); }
	public COS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COS, 0); }
	public COT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COT, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.COUNT, 0); }
	public CRC32(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CRC32, 0); }
	public CREATE_ASYMMETRIC_PRIV_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
	public CREATE_ASYMMETRIC_PUB_KEY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
	public CREATE_DH_PARAMETERS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
	public CREATE_DIGEST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CREATE_DIGEST, 0); }
	public CROSSES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.CROSSES, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATABASE, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE, 0); }
	public DATEDIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATEDIFF, 0); }
	public DATE_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DATE_FORMAT, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAY, 0); }
	public DAYNAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYNAME, 0); }
	public DAYOFMONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYOFMONTH, 0); }
	public DAYOFWEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYOFWEEK, 0); }
	public DAYOFYEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DAYOFYEAR, 0); }
	public DECODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DECODE, 0); }
	public DEGREES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DEGREES, 0); }
	public DES_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DES_DECRYPT, 0); }
	public DES_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DES_ENCRYPT, 0); }
	public DIMENSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DIMENSION, 0); }
	public DISJOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.DISJOINT, 0); }
	public ELT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ELT, 0); }
	public ENCODE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCODE, 0); }
	public ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENCRYPT, 0); }
	public ENDPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENDPOINT, 0); }
	public ENVELOPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ENVELOPE, 0); }
	public EQUALS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EQUALS, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXP, 0); }
	public EXPORT_SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXPORT_SET, 0); }
	public EXTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTERIORRING, 0); }
	public EXTRACTVALUE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.EXTRACTVALUE, 0); }
	public FIELD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIELD, 0); }
	public FIND_IN_SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FIND_IN_SET, 0); }
	public FLOOR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FLOOR, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FORMAT, 0); }
	public FOUND_ROWS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FOUND_ROWS, 0); }
	public FROM_BASE64(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM_BASE64, 0); }
	public FROM_DAYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM_DAYS, 0); }
	public FROM_UNIXTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.FROM_UNIXTIME, 0); }
	public GEOMCOLLFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
	public GEOMCOLLFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
	public GEOMETRYCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
	public GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
	public GEOMETRYCOLLECTIONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
	public GEOMETRYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
	public GEOMETRYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
	public GEOMETRYN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYN, 0); }
	public GEOMETRYTYPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMETRYTYPE, 0); }
	public GEOMFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMFROMTEXT, 0); }
	public GEOMFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GEOMFROMWKB, 0); }
	public GET_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GET_FORMAT, 0); }
	public GET_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GET_LOCK, 0); }
	public GLENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GLENGTH, 0); }
	public GREATEST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GREATEST, 0); }
	public GTID_SUBSET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GTID_SUBSET, 0); }
	public GTID_SUBTRACT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.GTID_SUBTRACT, 0); }
	public HEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HEX, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.HOUR, 0); }
	public IFNULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IFNULL, 0); }
	public INET6_ATON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET6_ATON, 0); }
	public INET6_NTOA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET6_NTOA, 0); }
	public INET_ATON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET_ATON, 0); }
	public INET_NTOA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INET_NTOA, 0); }
	public INSTR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INSTR, 0); }
	public INTERIORRINGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTERIORRINGN, 0); }
	public INTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INTERSECTS, 0); }
	public INVISIBLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.INVISIBLE, 0); }
	public ISCLOSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISCLOSED, 0); }
	public ISEMPTY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISEMPTY, 0); }
	public ISNULL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISNULL, 0); }
	public ISSIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ISSIMPLE, 0); }
	public IS_FREE_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_FREE_LOCK, 0); }
	public IS_IPV4(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV4, 0); }
	public IS_IPV4_COMPAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
	public IS_IPV4_MAPPED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
	public IS_IPV6(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_IPV6, 0); }
	public IS_USED_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.IS_USED_LOCK, 0); }
	public LAST_INSERT_ID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LAST_INSERT_ID, 0); }
	public LCASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LCASE, 0); }
	public LEAST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEAST, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LEFT, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LENGTH, 0); }
	public LINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEFROMTEXT, 0); }
	public LINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINEFROMWKB, 0); }
	public LINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRING, 0); }
	public LINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
	public LINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
	public LN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LN, 0); }
	public LOAD_FILE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOAD_FILE, 0); }
	public LOCATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOCATE, 0); }
	public LOG(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOG, 0); }
	public LOG10(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOG10, 0); }
	public LOG2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOG2, 0); }
	public LOWER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LOWER, 0); }
	public LPAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LPAD, 0); }
	public LTRIM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.LTRIM, 0); }
	public MAKEDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAKEDATE, 0); }
	public MAKETIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAKETIME, 0); }
	public MAKE_SET(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MAKE_SET, 0); }
	public MASTER_POS_WAIT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MASTER_POS_WAIT, 0); }
	public MBRCONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRCONTAINS, 0); }
	public MBRDISJOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRDISJOINT, 0); }
	public MBREQUAL(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBREQUAL, 0); }
	public MBRINTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRINTERSECTS, 0); }
	public MBROVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBROVERLAPS, 0); }
	public MBRTOUCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRTOUCHES, 0); }
	public MBRWITHIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MBRWITHIN, 0); }
	public MD5(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MD5, 0); }
	public MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MICROSECOND, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MINUTE, 0); }
	public MLINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MLINEFROMTEXT, 0); }
	public MLINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MLINEFROMWKB, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MONTH, 0); }
	public MONTHNAME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MONTHNAME, 0); }
	public MPOINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOINTFROMTEXT, 0); }
	public MPOINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOINTFROMWKB, 0); }
	public MPOLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOLYFROMTEXT, 0); }
	public MPOLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MPOLYFROMWKB, 0); }
	public MULTILINESTRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRING, 0); }
	public MULTILINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
	public MULTILINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
	public MULTIPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINT, 0); }
	public MULTIPOINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
	public MULTIPOINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
	public MULTIPOLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGON, 0); }
	public MULTIPOLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
	public MULTIPOLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
	public NAME_CONST(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NAME_CONST, 0); }
	public NULLIF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NULLIF, 0); }
	public NUMGEOMETRIES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMGEOMETRIES, 0); }
	public NUMINTERIORRINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMINTERIORRINGS, 0); }
	public NUMPOINTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.NUMPOINTS, 0); }
	public OCT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OCT, 0); }
	public OCTET_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OCTET_LENGTH, 0); }
	public ORD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ORD, 0); }
	public OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.OVERLAPS, 0); }
	public PERIOD_ADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PERIOD_ADD, 0); }
	public PERIOD_DIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PERIOD_DIFF, 0); }
	public PI(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.PI, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINT, 0); }
	public POINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINTFROMTEXT, 0); }
	public POINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINTFROMWKB, 0); }
	public POINTN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POINTN, 0); }
	public POLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYFROMTEXT, 0); }
	public POLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYFROMWKB, 0); }
	public POLYGON(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGON, 0); }
	public POLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGONFROMTEXT, 0); }
	public POLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POLYGONFROMWKB, 0); }
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POSITION, 0); }
	public POW(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POW, 0); }
	public POWER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.POWER, 0); }
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUARTER, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.QUOTE, 0); }
	public RADIANS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RADIANS, 0); }
	public RAND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RAND, 0); }
	public RANDOM_BYTES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RANDOM_BYTES, 0); }
	public RELEASE_LOCK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RELEASE_LOCK, 0); }
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.REVERSE, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RIGHT, 0); }
	public ROUND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROUND, 0); }
	public ROW_COUNT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ROW_COUNT, 0); }
	public RPAD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RPAD, 0); }
	public RTRIM(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.RTRIM, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SECOND, 0); }
	public SEC_TO_TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SEC_TO_TIME, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION_USER, 0); }
	public SESSION_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
	public SHA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHA, 0); }
	public SHA1(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHA1, 0); }
	public SHA2(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SHA2, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIGN, 0); }
	public SIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SIN, 0); }
	public SLEEP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SLEEP, 0); }
	public SOUNDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SOUNDEX, 0); }
	public SQL_THREAD_WAIT_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
	public SQRT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SQRT, 0); }
	public SRID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SRID, 0); }
	public STARTPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STARTPOINT, 0); }
	public STRCMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STRCMP, 0); }
	public STR_TO_DATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.STR_TO_DATE, 0); }
	public ST_AREA(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_AREA, 0); }
	public ST_ASBINARY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASBINARY, 0); }
	public ST_ASTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASTEXT, 0); }
	public ST_ASWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASWKB, 0); }
	public ST_ASWKT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ASWKT, 0); }
	public ST_BUFFER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_BUFFER, 0); }
	public ST_CENTROID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_CENTROID, 0); }
	public ST_CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_CONTAINS, 0); }
	public ST_CROSSES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_CROSSES, 0); }
	public ST_DIFFERENCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DIFFERENCE, 0); }
	public ST_DIMENSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DIMENSION, 0); }
	public ST_DISJOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DISJOINT, 0); }
	public ST_DISTANCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_DISTANCE, 0); }
	public ST_ENDPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ENDPOINT, 0); }
	public ST_ENVELOPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ENVELOPE, 0); }
	public ST_EQUALS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_EQUALS, 0); }
	public ST_EXTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_EXTERIORRING, 0); }
	public ST_GEOMCOLLFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
	public ST_GEOMCOLLFROMTXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
	public ST_GEOMCOLLFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
	public ST_GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
	public ST_GEOMETRYCOLLECTIONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
	public ST_GEOMETRYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
	public ST_GEOMETRYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
	public ST_GEOMETRYN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYN, 0); }
	public ST_GEOMETRYTYPE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
	public ST_GEOMFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
	public ST_GEOMFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
	public ST_INTERIORRINGN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_INTERIORRINGN, 0); }
	public ST_INTERSECTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_INTERSECTION, 0); }
	public ST_INTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_INTERSECTS, 0); }
	public ST_ISCLOSED(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ISCLOSED, 0); }
	public ST_ISEMPTY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ISEMPTY, 0); }
	public ST_ISSIMPLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_ISSIMPLE, 0); }
	public ST_LINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
	public ST_LINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINEFROMWKB, 0); }
	public ST_LINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
	public ST_LINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
	public ST_NUMGEOMETRIES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
	public ST_NUMINTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
	public ST_NUMINTERIORRINGS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
	public ST_NUMPOINTS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_NUMPOINTS, 0); }
	public ST_OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_OVERLAPS, 0); }
	public ST_POINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
	public ST_POINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POINTFROMWKB, 0); }
	public ST_POINTN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POINTN, 0); }
	public ST_POLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
	public ST_POLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYFROMWKB, 0); }
	public ST_POLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
	public ST_POLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
	public ST_SRID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_SRID, 0); }
	public ST_STARTPOINT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_STARTPOINT, 0); }
	public ST_SYMDIFFERENCE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
	public ST_TOUCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_TOUCHES, 0); }
	public ST_UNION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_UNION, 0); }
	public ST_WITHIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_WITHIN, 0); }
	public ST_X(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_X, 0); }
	public ST_Y(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.ST_Y, 0); }
	public SUBDATE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBDATE, 0); }
	public SUBSTRING_INDEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBSTRING_INDEX, 0); }
	public SUBTIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SUBTIME, 0); }
	public SYSTEM_USER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.SYSTEM_USER, 0); }
	public TAN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TAN, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME, 0); }
	public TIMEDIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMEDIFF, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMP, 0); }
	public TIMESTAMPADD(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMPADD, 0); }
	public TIMESTAMPDIFF(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIMESTAMPDIFF, 0); }
	public TIME_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME_FORMAT, 0); }
	public TIME_TO_SEC(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TIME_TO_SEC, 0); }
	public TOUCHES(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TOUCHES, 0); }
	public TO_BASE64(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO_BASE64, 0); }
	public TO_DAYS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO_DAYS, 0); }
	public TO_SECONDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.TO_SECONDS, 0); }
	public UCASE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UCASE, 0); }
	public UNCOMPRESS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMPRESS, 0); }
	public UNCOMPRESSED_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
	public UNHEX(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNHEX, 0); }
	public UNIX_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
	public UPDATEXML(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPDATEXML, 0); }
	public UPPER(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UPPER, 0); }
	public UUID(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UUID, 0); }
	public UUID_SHORT(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.UUID_SHORT, 0); }
	public VALIDATE_PASSWORD_STRENGTH(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VERSION, 0); }
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.VISIBLE, 0); }
	public WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEK, 0); }
	public WEEKDAY(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEKDAY, 0); }
	public WEEKOFYEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEEKOFYEAR, 0); }
	public WEIGHT_STRING(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WEIGHT_STRING, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.WITHIN, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEAR, 0); }
	public YEARWEEK(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.YEARWEEK, 0); }
	public Y_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.Y_FUNCTION, 0); }
	public X_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MySqlParser.X_FUNCTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MySqlParser.RULE_functionNameBase; }
	// @Override
	public enterRule(listener: MySqlParserListener): void {
		if (listener.enterFunctionNameBase) {
			listener.enterFunctionNameBase(this);
		}
	}
	// @Override
	public exitRule(listener: MySqlParserListener): void {
		if (listener.exitFunctionNameBase) {
			listener.exitFunctionNameBase(this);
		}
	}
}


