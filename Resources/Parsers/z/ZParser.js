// Generated from Resources/Parsers/z/ZParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ZParserListener = require('./ZParserListener').ZParserListener;
var grammarFileName = "ZParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u009c\u044d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0007\u0002`\n\u0002\f\u0002\u000e\u0002c\u000b\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003l\n\u0003\u0003\u0003\u0003\u0003\u0007\u0003p\n\u0003\f\u0003",
    "\u000e\u0003s\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0007\u0003z\n\u0003\f\u0003\u000e\u0003}\u000b\u0003",
    "\u0005\u0003\u007f\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0005\u0004\u0086\n\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u0091\n\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u009c\n\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u00a8\n\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00af\n\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u00c7\n\u0004\f\u0004",
    "\u000e\u0004\u00ca\u000b\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00df\n\u0004",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "\u00e6\n\u0005\f\u0005\u000e\u0005\u00e9\u000b\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00f0\n\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00f5\n\u0007\f\u0007",
    "\u000e\u0007\u00f8\u000b\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u0114\n\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u0128\n\b",
    "\f\b\u000e\b\u012b\u000b\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u014b\n\t",
    "\f\t\u000e\t\u014e\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0164\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u016a\n\t\u0003\t\u0005\t\u016d\n\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u0172\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u0178\n\t\u0003\t\u0005\t\u017b\n\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u0180\n\t\f\t\u000e\t\u0183\u000b\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u0189\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u0190\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0007\t\u01a5\n\t\f\t\u000e\t\u01a8\u000b",
    "\t\u0005\t\u01aa\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0006\t",
    "\u01b1\n\t\r\t\u000e\t\u01b2\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01c0\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u01e1\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u01e7\n\t\u0003\t\u0005\t\u01ea\n\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u01f5",
    "\n\t\f\t\u000e\t\u01f8\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0006\t\u01ff\n\t\r\t\u000e\t\u0200\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u0208\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u020e\n\t\u0003\t\u0005\t\u0211\n\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u021f\n\t\f\t\u000e\t\u0222\u000b\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u022c\n\t\f\t\u000e\t\u022f",
    "\u000b\t\u0003\n\u0005\n\u0232\n\n\u0003\n\u0005\n\u0235\n\n\u0003\n",
    "\u0005\n\u0238\n\n\u0003\n\u0003\n\u0005\n\u023c\n\n\u0003\n\u0003\n",
    "\u0005\n\u0240\n\n\u0005\n\u0242\n\n\u0003\n\u0005\n\u0245\n\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u024a\n\u000b\f\u000b\u000e",
    "\u000b\u024d\u000b\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0253",
    "\n\f\u0003\r\u0003\r\u0003\r\u0007\r\u0258\n\r\f\r\u000e\r\u025b\u000b",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0262\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u026a\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0273\n\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u027d\n\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u0283\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u0295\n\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u029c\n\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02a2\n",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u02ad\n\u001a",
    "\f\u001a\u000e\u001a\u02b0\u000b\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u02b6\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u02be\n",
    "\u001a\f\u001a\u000e\u001a\u02c1\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u02c7\n\u001a\u0003\u001a\u0005",
    "\u001a\u02ca\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u02d6\n\u001b\f\u001b\u000e\u001b\u02d9\u000b\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u02df\n\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u02e7\n\u001b\f\u001b\u000e\u001b\u02ea\u000b\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u02f0\n\u001b",
    "\u0005\u001b\u02f2\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0300\n\u001c\f\u001c\u000e",
    "\u001c\u0303\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0005\u001c\u0309\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0312\n\u001c",
    "\f\u001c\u000e\u001c\u0315\u000b\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u031b\n\u001c\u0003\u001c\u0005\u001c",
    "\u031e\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0007\u001d\u0325\n\u001d\f\u001d\u000e\u001d\u0328\u000b\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u032e\n",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007",
    "\u001d\u0335\n\u001d\f\u001d\u000e\u001d\u0338\u000b\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u033e\n\u001d\u0005",
    "\u001d\u0340\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u0346\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0007\u001f\u034d\n\u001f\f\u001f\u000e\u001f\u0350",
    "\u000b\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0355\n",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u035d\n \f ",
    "\u000e \u0360\u000b \u0003 \u0003 \u0005 \u0364\n \u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0007!\u036d\n!\f!\u000e!\u0370\u000b",
    "!\u0003!\u0003!\u0003!\u0005!\u0375\n!\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u037a\n\"\f\"\u000e\"\u037d\u000b\"\u0003\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0003#\u0003#\u0005#\u0386\n#\u0003$\u0003$\u0003$\u0003$\u0005",
    "$\u038c\n$\u0003$\u0003$\u0003$\u0003$\u0005$\u0392\n$\u0003$\u0005",
    "$\u0395\n$\u0003$\u0005$\u0398\n$\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0005%\u03a0\n%\u0003%\u0003%\u0003%\u0003%\u0005%\u03a6\n",
    "%\u0003%\u0005%\u03a9\n%\u0005%\u03ab\n%\u0003&\u0003&\u0003&\u0003",
    "&\u0006&\u03b1\n&\r&\u000e&\u03b2\u0003&\u0003&\u0003&\u0006&\u03b8",
    "\n&\r&\u000e&\u03b9\u0003&\u0003&\u0003&\u0003&\u0005&\u03c0\n&\u0003",
    "&\u0003&\u0003&\u0003&\u0005&\u03c6\n&\u0003&\u0005&\u03c9\n&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u03d0\n&\u0003&\u0003&\u0003&\u0003",
    "&\u0005&\u03d6\n&\u0003&\u0005&\u03d9\n&\u0003&\u0003&\u0005&\u03dd",
    "\n&\u0003\'\u0003\'\u0005\'\u03e1\n\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0005\'\u03e7\n\'\u0003\'\u0005\'\u03ea\n\'\u0003(\u0003(\u0003(",
    "\u0003(\u0005(\u03f0\n(\u0003)\u0003)\u0003)\u0003)\u0005)\u03f6\n)",
    "\u0003)\u0003)\u0003)\u0003)\u0005)\u03fc\n)\u0003)\u0005)\u03ff\n)",
    "\u0003)\u0005)\u0402\n)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u040a\n*\u0003*\u0003*\u0003*\u0003*\u0005*\u0410\n*\u0003*\u0005",
    "*\u0413\n*\u0005*\u0415\n*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u041e\n+\u0003+\u0003+\u0003+\u0003+\u0005+\u0424\n",
    "+\u0003+\u0005+\u0427\n+\u0003+\u0003+\u0005+\u042b\n+\u0003,\u0003",
    ",\u0005,\u042f\n,\u0003,\u0003,\u0003,\u0003,\u0005,\u0435\n,\u0003",
    ",\u0005,\u0438\n,\u0003-\u0003-\u0003-\u0003-\u0005-\u043e\n-\u0003",
    "-\u0006-\u0441\n-\r-\u000e-\u0442\u0003.\u0003.\u0003.\u0007.\u0448",
    "\n.\f.\u000e.\u044b\u000b.\u0003.\u0002\u0004\u000e\u0010/\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\u0002\b\u0004\u0002\u0016\u001600\u0004",
    "\u0002\u001d\u001d##\u0003\u0002\u0099\u009a\u0004\u0002\u0096\u0096",
    "\u0098\u0098\u0004\u0002\u0092\u0092\u0094\u0094\u0005\u000233>>\u008b",
    "\u008b\u0002\u04fe\u0002a\u0003\u0002\u0002\u0002\u0004~\u0003\u0002",
    "\u0002\u0002\u0006\u00de\u0003\u0002\u0002\u0002\b\u00e0\u0003\u0002",
    "\u0002\u0002\n\u00ea\u0003\u0002\u0002\u0002\f\u00f1\u0003\u0002\u0002",
    "\u0002\u000e\u0113\u0003\u0002\u0002\u0002\u0010\u01bf\u0003\u0002\u0002",
    "\u0002\u0012\u0231\u0003\u0002\u0002\u0002\u0014\u0246\u0003\u0002\u0002",
    "\u0002\u0016\u024e\u0003\u0002\u0002\u0002\u0018\u0261\u0003\u0002\u0002",
    "\u0002\u001a\u0269\u0003\u0002\u0002\u0002\u001c\u0272\u0003\u0002\u0002",
    "\u0002\u001e\u0274\u0003\u0002\u0002\u0002 \u0276\u0003\u0002\u0002",
    "\u0002\"\u027c\u0003\u0002\u0002\u0002$\u027e\u0003\u0002\u0002\u0002",
    "&\u0286\u0003\u0002\u0002\u0002(\u028a\u0003\u0002\u0002\u0002*\u028e",
    "\u0003\u0002\u0002\u0002,\u0294\u0003\u0002\u0002\u0002.\u029b\u0003",
    "\u0002\u0002\u00020\u02a1\u0003\u0002\u0002\u00022\u02c9\u0003\u0002",
    "\u0002\u00024\u02f1\u0003\u0002\u0002\u00026\u031d\u0003\u0002\u0002",
    "\u00028\u033f\u0003\u0002\u0002\u0002:\u0345\u0003\u0002\u0002\u0002",
    "<\u0354\u0003\u0002\u0002\u0002>\u0363\u0003\u0002\u0002\u0002@\u0374",
    "\u0003\u0002\u0002\u0002B\u0376\u0003\u0002\u0002\u0002D\u0385\u0003",
    "\u0002\u0002\u0002F\u0397\u0003\u0002\u0002\u0002H\u03aa\u0003\u0002",
    "\u0002\u0002J\u03dc\u0003\u0002\u0002\u0002L\u03de\u0003\u0002\u0002",
    "\u0002N\u03ef\u0003\u0002\u0002\u0002P\u0401\u0003\u0002\u0002\u0002",
    "R\u0414\u0003\u0002\u0002\u0002T\u042a\u0003\u0002\u0002\u0002V\u042c",
    "\u0003\u0002\u0002\u0002X\u0440\u0003\u0002\u0002\u0002Z\u0444\u0003",
    "\u0002\u0002\u0002\\`\u0007\u0006\u0002\u0002]`\u0005\u0004\u0003\u0002",
    "^`\u0005\u0006\u0004\u0002_\\\u0003\u0002\u0002\u0002_]\u0003\u0002",
    "\u0002\u0002_^\u0003\u0002\u0002\u0002`c\u0003\u0002\u0002\u0002a_\u0003",
    "\u0002\u0002\u0002ab\u0003\u0002\u0002\u0002bd\u0003\u0002\u0002\u0002",
    "ca\u0003\u0002\u0002\u0002de\u0007\u0002\u0002\u0003e\u0003\u0003\u0002",
    "\u0002\u0002fg\u0007\u0003\u0002\u0002gh\u0007$\u0002\u0002hi\u0007",
    "F\u0002\u0002ik\u0007 \u0002\u0002jl\u0005\f\u0007\u0002kj\u0003\u0002",
    "\u0002\u0002kl\u0003\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002mq\u0007",
    "\u0014\u0002\u0002np\u0005\u0006\u0004\u0002on\u0003\u0002\u0002\u0002",
    "ps\u0003\u0002\u0002\u0002qo\u0003\u0002\u0002\u0002qr\u0003\u0002\u0002",
    "\u0002r\u007f\u0003\u0002\u0002\u0002sq\u0003\u0002\u0002\u0002tu\u0007",
    "\u0003\u0002\u0002uv\u0007$\u0002\u0002vw\u0007F\u0002\u0002w{\u0007",
    "\u0014\u0002\u0002xz\u0005\u0006\u0004\u0002yx\u0003\u0002\u0002\u0002",
    "z}\u0003\u0002\u0002\u0002{y\u0003\u0002\u0002\u0002{|\u0003\u0002\u0002",
    "\u0002|\u007f\u0003\u0002\u0002\u0002}{\u0003\u0002\u0002\u0002~f\u0003",
    "\u0002\u0002\u0002~t\u0003\u0002\u0002\u0002\u007f\u0005\u0003\u0002",
    "\u0002\u0002\u0080\u0081\u0007\u0003\u0002\u0002\u0081\u0082\u0007\u000b",
    "\u0002\u0002\u0082\u0083\u0005\f\u0007\u0002\u0083\u0085\u0007\f\u0002",
    "\u0002\u0084\u0086\u0007\u0016\u0002\u0002\u0085\u0084\u0003\u0002\u0002",
    "\u0002\u0085\u0086\u0003\u0002\u0002\u0002\u0086\u0087\u0003\u0002\u0002",
    "\u0002\u0087\u0088\u0007\u0014\u0002\u0002\u0088\u00df\u0003\u0002\u0002",
    "\u0002\u0089\u008a\u0007\u0005\u0002\u0002\u008a\u008b\u0005\u0012\n",
    "\u0002\u008b\u008c\u0007\u0014\u0002\u0002\u008c\u00df\u0003\u0002\u0002",
    "\u0002\u008d\u008e\u0007\u0004\u0002\u0002\u008e\u0090\u0007F\u0002",
    "\u0002\u008f\u0091\u0007\u0016\u0002\u0002\u0090\u008f\u0003\u0002\u0002",
    "\u0002\u0090\u0091\u0003\u0002\u0002\u0002\u0091\u0092\u0003\u0002\u0002",
    "\u0002\u0092\u0093\u0005\u0012\n\u0002\u0093\u0094\u0007\u0014\u0002",
    "\u0002\u0094\u00df\u0003\u0002\u0002\u0002\u0095\u0096\u0007\u0005\u0002",
    "\u0002\u0096\u0097\u0007\u0013\u0002\u0002\u0097\u0098\u0007\u000b\u0002",
    "\u0002\u0098\u0099\u0005\f\u0007\u0002\u0099\u009b\u0007\f\u0002\u0002",
    "\u009a\u009c\u0007\u0016\u0002\u0002\u009b\u009a\u0003\u0002\u0002\u0002",
    "\u009b\u009c\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002\u0002\u0002",
    "\u009d\u009e\u0005\u0012\n\u0002\u009e\u009f\u0007\u0014\u0002\u0002",
    "\u009f\u00df\u0003\u0002\u0002\u0002\u00a0\u00a1\u0007\u0004\u0002\u0002",
    "\u00a1\u00a2\u0007\u0013\u0002\u0002\u00a2\u00a3\u0007F\u0002\u0002",
    "\u00a3\u00a4\u0007\u000b\u0002\u0002\u00a4\u00a5\u0005\f\u0007\u0002",
    "\u00a5\u00a7\u0007\f\u0002\u0002\u00a6\u00a8\u0007\u0016\u0002\u0002",
    "\u00a7\u00a6\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002",
    "\u00a8\u00a9\u0003\u0002\u0002\u0002\u00a9\u00aa\u0005\u0012\n\u0002",
    "\u00aa\u00ab\u0007\u0014\u0002\u0002\u00ab\u00df\u0003\u0002\u0002\u0002",
    "\u00ac\u00ae\u0007\u0003\u0002\u0002\u00ad\u00af\u0007\u0016\u0002\u0002",
    "\u00ae\u00ad\u0003\u0002\u0002\u0002\u00ae\u00af\u0003\u0002\u0002\u0002",
    "\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0\u00b1\u0005\u0016\f\u0002",
    "\u00b1\u00b2\u0007\u0014\u0002\u0002\u00b2\u00df\u0003\u0002\u0002\u0002",
    "\u00b3\u00b4\u0007\u0003\u0002\u0002\u00b4\u00b5\u0005,\u0017\u0002",
    "\u00b5\u00b6\u0007\u000b\u0002\u0002\u00b6\u00b7\u0005\f\u0007\u0002",
    "\u00b7\u00b8\u0007\f\u0002\u0002\u00b8\u00b9\u0007(\u0002\u0002\u00b9",
    "\u00ba\u0005\u0010\t\u0002\u00ba\u00bb\u0007\u0014\u0002\u0002\u00bb",
    "\u00df\u0003\u0002\u0002\u0002\u00bc\u00bd\u0007\u0003\u0002\u0002\u00bd",
    "\u00be\u0005:\u001e\u0002\u00be\u00bf\u0007(\u0002\u0002\u00bf\u00c0",
    "\u0005\u0010\t\u0002\u00c0\u00c1\u0007\u0014\u0002\u0002\u00c1\u00df",
    "\u0003\u0002\u0002\u0002\u00c2\u00c3\u0007\u0003\u0002\u0002\u00c3\u00c8",
    "\u0005\b\u0005\u0002\u00c4\u00c5\u0007,\u0002\u0002\u00c5\u00c7\u0005",
    "\b\u0005\u0002\u00c6\u00c4\u0003\u0002\u0002\u0002\u00c7\u00ca\u0003",
    "\u0002\u0002\u0002\u00c8\u00c6\u0003\u0002\u0002\u0002\u00c8\u00c9\u0003",
    "\u0002\u0002\u0002\u00c9\u00cb\u0003\u0002\u0002\u0002\u00ca\u00c8\u0003",
    "\u0002\u0002\u0002\u00cb\u00cc\u0007\u0014\u0002\u0002\u00cc\u00df\u0003",
    "\u0002\u0002\u0002\u00cd\u00ce\u0007\u0003\u0002\u0002\u00ce\u00cf\u0007",
    "4\u0002\u0002\u00cf\u00d0\u0005\u000e\b\u0002\u00d0\u00d1\u0007\u0014",
    "\u0002\u0002\u00d1\u00df\u0003\u0002\u0002\u0002\u00d2\u00d3\u0007\u0003",
    "\u0002\u0002\u00d3\u00d4\u0007\u000b\u0002\u0002\u00d4\u00d5\u0005\f",
    "\u0007\u0002\u00d5\u00d6\u0007\f\u0002\u0002\u00d6\u00d7\u00074\u0002",
    "\u0002\u00d7\u00d8\u0005\u000e\b\u0002\u00d8\u00d9\u0007\u0014\u0002",
    "\u0002\u00d9\u00df\u0003\u0002\u0002\u0002\u00da\u00db\u0007\u0003\u0002",
    "\u0002\u00db\u00dc\u0005\u001a\u000e\u0002\u00dc\u00dd\u0007\u0014\u0002",
    "\u0002\u00dd\u00df\u0003\u0002\u0002\u0002\u00de\u0080\u0003\u0002\u0002",
    "\u0002\u00de\u0089\u0003\u0002\u0002\u0002\u00de\u008d\u0003\u0002\u0002",
    "\u0002\u00de\u0095\u0003\u0002\u0002\u0002\u00de\u00a0\u0003\u0002\u0002",
    "\u0002\u00de\u00ac\u0003\u0002\u0002\u0002\u00de\u00b3\u0003\u0002\u0002",
    "\u0002\u00de\u00bc\u0003\u0002\u0002\u0002\u00de\u00c2\u0003\u0002\u0002",
    "\u0002\u00de\u00cd\u0003\u0002\u0002\u0002\u00de\u00d2\u0003\u0002\u0002",
    "\u0002\u00de\u00da\u0003\u0002\u0002\u0002\u00df\u0007\u0003\u0002\u0002",
    "\u0002\u00e0\u00e1\u0007F\u0002\u0002\u00e1\u00e2\u0007*\u0002\u0002",
    "\u00e2\u00e7\u0005\n\u0006\u0002\u00e3\u00e4\u0007+\u0002\u0002\u00e4",
    "\u00e6\u0005\n\u0006\u0002\u00e5\u00e3\u0003\u0002\u0002\u0002\u00e6",
    "\u00e9\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002\u00e7",
    "\u00e8\u0003\u0002\u0002\u0002\u00e8\t\u0003\u0002\u0002\u0002\u00e9",
    "\u00e7\u0003\u0002\u0002\u0002\u00ea\u00ef\u0005,\u0017\u0002\u00eb",
    "\u00ec\u0007\u0011\u0002\u0002\u00ec\u00ed\u0005\u0010\t\u0002\u00ed",
    "\u00ee\u0007\u0012\u0002\u0002\u00ee\u00f0\u0003\u0002\u0002\u0002\u00ef",
    "\u00eb\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002\u0002\u00f0",
    "\u000b\u0003\u0002\u0002\u0002\u00f1\u00f6\u0007F\u0002\u0002\u00f2",
    "\u00f3\u0007)\u0002\u0002\u00f3\u00f5\u0007F\u0002\u0002\u00f4\u00f2",
    "\u0003\u0002\u0002\u0002\u00f5\u00f8\u0003\u0002\u0002\u0002\u00f6\u00f4",
    "\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\r",
    "\u0003\u0002\u0002\u0002\u00f8\u00f6\u0003\u0002\u0002\u0002\u00f9\u00fa",
    "\b\b\u0001\u0002\u00fa\u00fb\u00075\u0002\u0002\u00fb\u00fc\u0005\u0012",
    "\n\u0002\u00fc\u00fd\u00076\u0002\u0002\u00fd\u00fe\u0005\u000e\b\u000f",
    "\u00fe\u0114\u0003\u0002\u0002\u0002\u00ff\u0100\u00077\u0002\u0002",
    "\u0100\u0101\u0005\u0012\n\u0002\u0101\u0102\u00076\u0002\u0002\u0102",
    "\u0103\u0005\u000e\b\u000e\u0103\u0114\u0003\u0002\u0002\u0002\u0104",
    "\u0105\u00078\u0002\u0002\u0105\u0106\u0005\u0012\n\u0002\u0106\u0107",
    "\u00076\u0002\u0002\u0107\u0108\u0005\u000e\b\r\u0108\u0114\u0003\u0002",
    "\u0002\u0002\u0109\u010a\u0007=\u0002\u0002\u010a\u0114\u0005\u000e",
    "\b\b\u010b\u0114\u0005D#\u0002\u010c\u0114\u0005\u0010\t\u0002\u010d",
    "\u0114\u0007&\u0002\u0002\u010e\u0114\u0007\u0019\u0002\u0002\u010f",
    "\u0110\u0007\t\u0002\u0002\u0110\u0111\u0005\u000e\b\u0002\u0111\u0112",
    "\u0007\n\u0002\u0002\u0112\u0114\u0003\u0002\u0002\u0002\u0113\u00f9",
    "\u0003\u0002\u0002\u0002\u0113\u00ff\u0003\u0002\u0002\u0002\u0113\u0104",
    "\u0003\u0002\u0002\u0002\u0113\u0109\u0003\u0002\u0002\u0002\u0113\u010b",
    "\u0003\u0002\u0002\u0002\u0113\u010c\u0003\u0002\u0002\u0002\u0113\u010d",
    "\u0003\u0002\u0002\u0002\u0113\u010e\u0003\u0002\u0002\u0002\u0113\u010f",
    "\u0003\u0002\u0002\u0002\u0114\u0129\u0003\u0002\u0002\u0002\u0115\u0116",
    "\f\u0011\u0002\u0002\u0116\u0117\u0007\u0016\u0002\u0002\u0117\u0128",
    "\u0005\u000e\b\u0012\u0118\u0119\f\u0010\u0002\u0002\u0119\u011a\u0007",
    "0\u0002\u0002\u011a\u0128\u0005\u000e\b\u0011\u011b\u011c\f\f\u0002",
    "\u0002\u011c\u011d\u00079\u0002\u0002\u011d\u0128\u0005\u000e\b\r\u011e",
    "\u011f\f\u000b\u0002\u0002\u011f\u0120\u0007:\u0002\u0002\u0120\u0128",
    "\u0005\u000e\b\f\u0121\u0122\f\n\u0002\u0002\u0122\u0123\u0007;\u0002",
    "\u0002\u0123\u0128\u0005\u000e\b\u000b\u0124\u0125\f\t\u0002\u0002\u0125",
    "\u0126\u0007<\u0002\u0002\u0126\u0128\u0005\u000e\b\n\u0127\u0115\u0003",
    "\u0002\u0002\u0002\u0127\u0118\u0003\u0002\u0002\u0002\u0127\u011b\u0003",
    "\u0002\u0002\u0002\u0127\u011e\u0003\u0002\u0002\u0002\u0127\u0121\u0003",
    "\u0002\u0002\u0002\u0127\u0124\u0003\u0002\u0002\u0002\u0128\u012b\u0003",
    "\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u0129\u012a\u0003",
    "\u0002\u0002\u0002\u012a\u000f\u0003\u0002\u0002\u0002\u012b\u0129\u0003",
    "\u0002\u0002\u0002\u012c\u012d\b\t\u0001\u0002\u012d\u012e\u00075\u0002",
    "\u0002\u012e\u012f\u0005\u0012\n\u0002\u012f\u0130\u00076\u0002\u0002",
    "\u0130\u0131\u0005\u0010\t.\u0131\u01c0\u0003\u0002\u0002\u0002\u0132",
    "\u0133\u00077\u0002\u0002\u0133\u0134\u0005\u0012\n\u0002\u0134\u0135",
    "\u00076\u0002\u0002\u0135\u0136\u0005\u0010\t-\u0136\u01c0\u0003\u0002",
    "\u0002\u0002\u0137\u0138\u00078\u0002\u0002\u0138\u0139\u0005\u0012",
    "\n\u0002\u0139\u013a\u00076\u0002\u0002\u013a\u013b\u0005\u0010\t,\u013b",
    "\u01c0\u0003\u0002\u0002\u0002\u013c\u013d\u0007B\u0002\u0002\u013d",
    "\u013e\u0005\u0012\n\u0002\u013e\u013f\u00076\u0002\u0002\u013f\u0140",
    "\u0005\u0010\t+\u0140\u01c0\u0003\u0002\u0002\u0002\u0141\u0142\u0007",
    "C\u0002\u0002\u0142\u0143\u0005\u0012\n\u0002\u0143\u0144\u00076\u0002",
    "\u0002\u0144\u0145\u0005\u0010\t*\u0145\u01c0\u0003\u0002\u0002\u0002",
    "\u0146\u0147\u0007\u001e\u0002\u0002\u0147\u014c\u0005\u0016\f\u0002",
    "\u0148\u0149\u00070\u0002\u0002\u0149\u014b\u0005\u0016\f\u0002\u014a",
    "\u0148\u0003\u0002\u0002\u0002\u014b\u014e\u0003\u0002\u0002\u0002\u014c",
    "\u014a\u0003\u0002\u0002\u0002\u014c\u014d\u0003\u0002\u0002\u0002\u014d",
    "\u014f\u0003\u0002\u0002\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014f",
    "\u0150\u00076\u0002\u0002\u0150\u0151\u0005\u0010\t)\u0151\u01c0\u0003",
    "\u0002\u0002\u0002\u0152\u0153\u0007=\u0002\u0002\u0153\u01c0\u0005",
    "\u0010\t$\u0154\u0155\u0007\u001c\u0002\u0002\u0155\u0156\u0005\u000e",
    "\b\u0002\u0156\u0157\u0007%\u0002\u0002\u0157\u0158\u0005\u0010\t\u0002",
    "\u0158\u0159\u0007\u0018\u0002\u0002\u0159\u015a\u0005\u0010\t#\u015a",
    "\u01c0\u0003\u0002\u0002\u0002\u015b\u015c\u0007!\u0002\u0002\u015c",
    "\u01c0\u0005\u0010\t\u001e\u015d\u015e\u0007\u001f\u0002\u0002\u015e",
    "\u01c0\u0005\u0010\t\u001c\u015f\u0160\u0007\u0088\u0002\u0002\u0160",
    "\u01c0\u0005\u0010\t\u001b\u0161\u0163\u0007\u008e\u0002\u0002\u0162",
    "\u0164\u0005X-\u0002\u0163\u0162\u0003\u0002\u0002\u0002\u0163\u0164",
    "\u0003\u0002\u0002\u0002\u0164\u016c\u0003\u0002\u0002\u0002\u0165\u0166",
    "\u0005\u0010\t\u0002\u0166\u0167\u0007\u0096\u0002\u0002\u0167\u016d",
    "\u0003\u0002\u0002\u0002\u0168\u016a\u0005Z.\u0002\u0169\u0168\u0003",
    "\u0002\u0002\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016b\u0003",
    "\u0002\u0002\u0002\u016b\u016d\u0007\u0098\u0002\u0002\u016c\u0165\u0003",
    "\u0002\u0002\u0002\u016c\u0169\u0003\u0002\u0002\u0002\u016d\u016e\u0003",
    "\u0002\u0002\u0002\u016e\u01c0\u0005\u0010\t\u001a\u016f\u0171\u0007",
    "\u008e\u0002\u0002\u0170\u0172\u0005X-\u0002\u0171\u0170\u0003\u0002",
    "\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172\u017a\u0003\u0002",
    "\u0002\u0002\u0173\u0174\u0005\u0010\t\u0002\u0174\u0175\u0007\u0092",
    "\u0002\u0002\u0175\u017b\u0003\u0002\u0002\u0002\u0176\u0178\u0005Z",
    ".\u0002\u0177\u0176\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002",
    "\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017b\u0007\u0094",
    "\u0002\u0002\u017a\u0173\u0003\u0002\u0002\u0002\u017a\u0177\u0003\u0002",
    "\u0002\u0002\u017b\u01c0\u0003\u0002\u0002\u0002\u017c\u017d\u0007A",
    "\u0002\u0002\u017d\u0181\u0005\u0010\t\u0002\u017e\u0180\u0007\b\u0002",
    "\u0002\u017f\u017e\u0003\u0002\u0002\u0002\u0180\u0183\u0003\u0002\u0002",
    "\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002",
    "\u0002\u0182\u01c0\u0003\u0002\u0002\u0002\u0183\u0181\u0003\u0002\u0002",
    "\u0002\u0184\u01c0\u0005.\u0018\u0002\u0185\u0186\u0005.\u0018\u0002",
    "\u0186\u0188\u0007\u000b\u0002\u0002\u0187\u0189\u0005Z.\u0002\u0188",
    "\u0187\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189",
    "\u018a\u0003\u0002\u0002\u0002\u018a\u018b\u0007\f\u0002\u0002\u018b",
    "\u01c0\u0003\u0002\u0002\u0002\u018c\u01c0\u0007\u0007\u0002\u0002\u018d",
    "\u018f\u0007\r\u0002\u0002\u018e\u0190\u0005Z.\u0002\u018f\u018e\u0003",
    "\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002\u0190\u0191\u0003",
    "\u0002\u0002\u0002\u0191\u01c0\u0007\u000e\u0002\u0002\u0192\u0193\u0007",
    "\r\u0002\u0002\u0193\u0194\u0005\u0012\n\u0002\u0194\u0195\u00076\u0002",
    "\u0002\u0195\u0196\u0005\u0010\t\u0002\u0196\u0197\u0007\u000e\u0002",
    "\u0002\u0197\u01c0\u0003\u0002\u0002\u0002\u0198\u0199\u0007\r\u0002",
    "\u0002\u0199\u019a\u0005\u0012\n\u0002\u019a\u019b\u0007\u000e\u0002",
    "\u0002\u019b\u01c0\u0003\u0002\u0002\u0002\u019c\u019d\u0007\u000b\u0002",
    "\u0002\u019d\u019e\u0005\u0012\n\u0002\u019e\u019f\u0007\f\u0002\u0002",
    "\u019f\u01c0\u0003\u0002\u0002\u0002\u01a0\u01a9\u0007\u000f\u0002\u0002",
    "\u01a1\u01a6\u0005\u0016\f\u0002\u01a2\u01a3\u0007)\u0002\u0002\u01a3",
    "\u01a5\u0005\u0016\f\u0002\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a5",
    "\u01a8\u0003\u0002\u0002\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a6",
    "\u01a7\u0003\u0002\u0002\u0002\u01a7\u01aa\u0003\u0002\u0002\u0002\u01a8",
    "\u01a6\u0003\u0002\u0002\u0002\u01a9\u01a1\u0003\u0002\u0002\u0002\u01a9",
    "\u01aa\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab",
    "\u01c0\u0007\u0010\u0002\u0002\u01ac\u01ad\u0007\t\u0002\u0002\u01ad",
    "\u01b0\u0005\u0010\t\u0002\u01ae\u01af\u0007)\u0002\u0002\u01af\u01b1",
    "\u0005\u0010\t\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b1\u01b2",
    "\u0003\u0002\u0002\u0002\u01b2\u01b0\u0003\u0002\u0002\u0002\u01b2\u01b3",
    "\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b5",
    "\u0007\n\u0002\u0002\u01b5\u01c0\u0003\u0002\u0002\u0002\u01b6\u01b7",
    "\u0007\t\u0002\u0002\u01b7\u01b8\u0007C\u0002\u0002\u01b8\u01b9\u0005",
    "\u0012\n\u0002\u01b9\u01ba\u0007\n\u0002\u0002\u01ba\u01c0\u0003\u0002",
    "\u0002\u0002\u01bb\u01bc\u0007\t\u0002\u0002\u01bc\u01bd\u0005\u0010",
    "\t\u0002\u01bd\u01be\u0007\n\u0002\u0002\u01be\u01c0\u0003\u0002\u0002",
    "\u0002\u01bf\u012c\u0003\u0002\u0002\u0002\u01bf\u0132\u0003\u0002\u0002",
    "\u0002\u01bf\u0137\u0003\u0002\u0002\u0002\u01bf\u013c\u0003\u0002\u0002",
    "\u0002\u01bf\u0141\u0003\u0002\u0002\u0002\u01bf\u0146\u0003\u0002\u0002",
    "\u0002\u01bf\u0152\u0003\u0002\u0002\u0002\u01bf\u0154\u0003\u0002\u0002",
    "\u0002\u01bf\u015b\u0003\u0002\u0002\u0002\u01bf\u015d\u0003\u0002\u0002",
    "\u0002\u01bf\u015f\u0003\u0002\u0002\u0002\u01bf\u0161\u0003\u0002\u0002",
    "\u0002\u01bf\u016f\u0003\u0002\u0002\u0002\u01bf\u017c\u0003\u0002\u0002",
    "\u0002\u01bf\u0184\u0003\u0002\u0002\u0002\u01bf\u0185\u0003\u0002\u0002",
    "\u0002\u01bf\u018c\u0003\u0002\u0002\u0002\u01bf\u018d\u0003\u0002\u0002",
    "\u0002\u01bf\u0192\u0003\u0002\u0002\u0002\u01bf\u0198\u0003\u0002\u0002",
    "\u0002\u01bf\u019c\u0003\u0002\u0002\u0002\u01bf\u01a0\u0003\u0002\u0002",
    "\u0002\u01bf\u01ac\u0003\u0002\u0002\u0002\u01bf\u01b6\u0003\u0002\u0002",
    "\u0002\u01bf\u01bb\u0003\u0002\u0002\u0002\u01c0\u022d\u0003\u0002\u0002",
    "\u0002\u01c1\u01c2\f(\u0002\u0002\u01c2\u01c3\u00079\u0002\u0002\u01c3",
    "\u022c\u0005\u0010\t)\u01c4\u01c5\f\'\u0002\u0002\u01c5\u01c6\u0007",
    ":\u0002\u0002\u01c6\u022c\u0005\u0010\t(\u01c7\u01c8\f&\u0002\u0002",
    "\u01c8\u01c9\u0007;\u0002\u0002\u01c9\u022c\u0005\u0010\t\'\u01ca\u01cb",
    "\f%\u0002\u0002\u01cb\u01cc\u0007<\u0002\u0002\u01cc\u022c\u0005\u0010",
    "\t&\u01cd\u01ce\f\"\u0002\u0002\u01ce\u01cf\u0007D\u0002\u0002\u01cf",
    "\u022c\u0005\u0010\t#\u01d0\u01d1\f!\u0002\u0002\u01d1\u01d2\u0007E",
    "\u0002\u0002\u01d2\u022c\u0005\u0010\t\"\u01d3\u01d4\f\u001f\u0002\u0002",
    "\u01d4\u01d5\u0007?\u0002\u0002\u01d5\u022c\u0005\u0010\t \u01d6\u01d7",
    "\f\u0017\u0002\u0002\u01d7\u01d8\u0006\t\u0010\u0002\u01d8\u01d9\u0007",
    "\u008c\u0002\u0002\u01d9\u022c\u0005\u0010\t\u0018\u01da\u01db\f\u0016",
    "\u0002\u0002\u01db\u01dc\u0007\u008c\u0002\u0002\u01dc\u022c\u0005\u0010",
    "\t\u0016\u01dd\u01de\f\u0015\u0002\u0002\u01de\u01e0\u0007\u0090\u0002",
    "\u0002\u01df\u01e1\u0005X-\u0002\u01e0\u01df\u0003\u0002\u0002\u0002",
    "\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e9\u0003\u0002\u0002\u0002",
    "\u01e2\u01e3\u0005\u0010\t\u0002\u01e3\u01e4\u0007\u0096\u0002\u0002",
    "\u01e4\u01ea\u0003\u0002\u0002\u0002\u01e5\u01e7\u0005Z.\u0002\u01e6",
    "\u01e5\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7",
    "\u01e8\u0003\u0002\u0002\u0002\u01e8\u01ea\u0007\u0098\u0002\u0002\u01e9",
    "\u01e2\u0003\u0002\u0002\u0002\u01e9\u01e6\u0003\u0002\u0002\u0002\u01ea",
    "\u01eb\u0003\u0002\u0002\u0002\u01eb\u022c\u0005\u0010\t\u0016\u01ec",
    "\u01ed\f\u0013\u0002\u0002\u01ed\u022c\u0005\u0010\t\u0014\u01ee\u01ef",
    "\f \u0002\u0002\u01ef\u01f0\u0007-\u0002\u0002\u01f0\u01f1\u0007\t\u0002",
    "\u0002\u01f1\u01f6\u0005,\u0017\u0002\u01f2\u01f3\u0007)\u0002\u0002",
    "\u01f3\u01f5\u0005,\u0017\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002",
    "\u01f5\u01f8\u0003\u0002\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002",
    "\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f9\u0003\u0002\u0002\u0002",
    "\u01f8\u01f6\u0003\u0002\u0002\u0002\u01f9\u01fa\u0007\n\u0002\u0002",
    "\u01fa\u022c\u0003\u0002\u0002\u0002\u01fb\u01fe\f\u001d\u0002\u0002",
    "\u01fc\u01fd\u0007@\u0002\u0002\u01fd\u01ff\u0005\u0010\t\u0002\u01fe",
    "\u01fc\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200",
    "\u01fe\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201",
    "\u022c\u0003\u0002\u0002\u0002\u0202\u0203\f\u0019\u0002\u0002\u0203",
    "\u022c\u0007\u008a\u0002\u0002\u0204\u0205\f\u0018\u0002\u0002\u0205",
    "\u0207\u0007\u0090\u0002\u0002\u0206\u0208\u0005X-\u0002\u0207\u0206",
    "\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u0210",
    "\u0003\u0002\u0002\u0002\u0209\u020a\u0005\u0010\t\u0002\u020a\u020b",
    "\u0007\u0092\u0002\u0002\u020b\u0211\u0003\u0002\u0002\u0002\u020c\u020e",
    "\u0005Z.\u0002\u020d\u020c\u0003\u0002\u0002\u0002\u020d\u020e\u0003",
    "\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0211\u0007",
    "\u0094\u0002\u0002\u0210\u0209\u0003\u0002\u0002\u0002\u0210\u020d\u0003",
    "\u0002\u0002\u0002\u0211\u022c\u0003\u0002\u0002\u0002\u0212\u0213\f",
    "\u0012\u0002\u0002\u0213\u022c\u0007\b\u0002\u0002\u0214\u0215\f\u0011",
    "\u0002\u0002\u0215\u0216\u0007\u000b\u0002\u0002\u0216\u0217\u0005,",
    "\u0017\u0002\u0217\u0218\u0007.\u0002\u0002\u0218\u0220\u0005,\u0017",
    "\u0002\u0219\u021a\u0007)\u0002\u0002\u021a\u021b\u0005,\u0017\u0002",
    "\u021b\u021c\u0007.\u0002\u0002\u021c\u021d\u0005,\u0017\u0002\u021d",
    "\u021f\u0003\u0002\u0002\u0002\u021e\u0219\u0003\u0002\u0002\u0002\u021f",
    "\u0222\u0003\u0002\u0002\u0002\u0220\u021e\u0003\u0002\u0002\u0002\u0220",
    "\u0221\u0003\u0002\u0002\u0002\u0221\u0223\u0003\u0002\u0002\u0002\u0222",
    "\u0220\u0003\u0002\u0002\u0002\u0223\u0224\u0007\f\u0002\u0002\u0224",
    "\u022c\u0003\u0002\u0002\u0002\u0225\u0226\f\u0010\u0002\u0002\u0226",
    "\u0227\u0007/\u0002\u0002\u0227\u022c\u0005.\u0018\u0002\u0228\u0229",
    "\f\u000f\u0002\u0002\u0229\u022a\u0007/\u0002\u0002\u022a\u022c\u0007",
    "\u0007\u0002\u0002\u022b\u01c1\u0003\u0002\u0002\u0002\u022b\u01c4\u0003",
    "\u0002\u0002\u0002\u022b\u01c7\u0003\u0002\u0002\u0002\u022b\u01ca\u0003",
    "\u0002\u0002\u0002\u022b\u01cd\u0003\u0002\u0002\u0002\u022b\u01d0\u0003",
    "\u0002\u0002\u0002\u022b\u01d3\u0003\u0002\u0002\u0002\u022b\u01d6\u0003",
    "\u0002\u0002\u0002\u022b\u01da\u0003\u0002\u0002\u0002\u022b\u01dd\u0003",
    "\u0002\u0002\u0002\u022b\u01ec\u0003\u0002\u0002\u0002\u022b\u01ee\u0003",
    "\u0002\u0002\u0002\u022b\u01fb\u0003\u0002\u0002\u0002\u022b\u0202\u0003",
    "\u0002\u0002\u0002\u022b\u0204\u0003\u0002\u0002\u0002\u022b\u0212\u0003",
    "\u0002\u0002\u0002\u022b\u0214\u0003\u0002\u0002\u0002\u022b\u0225\u0003",
    "\u0002\u0002\u0002\u022b\u0228\u0003\u0002\u0002\u0002\u022c\u022f\u0003",
    "\u0002\u0002\u0002\u022d\u022b\u0003\u0002\u0002\u0002\u022d\u022e\u0003",
    "\u0002\u0002\u0002\u022e\u0011\u0003\u0002\u0002\u0002\u022f\u022d\u0003",
    "\u0002\u0002\u0002\u0230\u0232\u0007\u0016\u0002\u0002\u0231\u0230\u0003",
    "\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0234\u0003",
    "\u0002\u0002\u0002\u0233\u0235\u0005\u0014\u000b\u0002\u0234\u0233\u0003",
    "\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0237\u0003",
    "\u0002\u0002\u0002\u0236\u0238\u0007\u0016\u0002\u0002\u0237\u0236\u0003",
    "\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u0241\u0003",
    "\u0002\u0002\u0002\u0239\u023b\u0007+\u0002\u0002\u023a\u023c\u0007",
    "\u0016\u0002\u0002\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003",
    "\u0002\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023f\u0005",
    "\u000e\b\u0002\u023e\u0240\u0007\u0016\u0002\u0002\u023f\u023e\u0003",
    "\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240\u0242\u0003",
    "\u0002\u0002\u0002\u0241\u0239\u0003\u0002\u0002\u0002\u0241\u0242\u0003",
    "\u0002\u0002\u0002\u0242\u0244\u0003\u0002\u0002\u0002\u0243\u0245\u0007",
    "\u0016\u0002\u0002\u0244\u0243\u0003\u0002\u0002\u0002\u0244\u0245\u0003",
    "\u0002\u0002\u0002\u0245\u0013\u0003\u0002\u0002\u0002\u0246\u024b\u0005",
    "\u0018\r\u0002\u0247\u0248\t\u0002\u0002\u0002\u0248\u024a\u0005\u0018",
    "\r\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u024a\u024d\u0003\u0002",
    "\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002",
    "\u0002\u0002\u024c\u0015\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002",
    "\u0002\u0002\u024e\u024f\u0005,\u0017\u0002\u024f\u0250\u0007(\u0002",
    "\u0002\u0250\u0252\u0005\u0010\t\u0002\u0251\u0253\u0007\u0016\u0002",
    "\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002",
    "\u0002\u0253\u0017\u0003\u0002\u0002\u0002\u0254\u0259\u0005,\u0017",
    "\u0002\u0255\u0256\u0007)\u0002\u0002\u0256\u0258\u0005,\u0017\u0002",
    "\u0257\u0255\u0003\u0002\u0002\u0002\u0258\u025b\u0003\u0002\u0002\u0002",
    "\u0259\u0257\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002",
    "\u025a\u025c\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002",
    "\u025c\u025d\u0007\'\u0002\u0002\u025d\u025e\u0005\u0010\t\u0002\u025e",
    "\u0262\u0003\u0002\u0002\u0002\u025f\u0262\u0005\u0016\f\u0002\u0260",
    "\u0262\u0005\u0010\t\u0002\u0261\u0254\u0003\u0002\u0002\u0002\u0261",
    "\u025f\u0003\u0002\u0002\u0002\u0261\u0260\u0003\u0002\u0002\u0002\u0262",
    "\u0019\u0003\u0002\u0002\u0002\u0263\u0264\u0007\"\u0002\u0002\u0264",
    "\u026a\u0005\"\u0012\u0002\u0265\u0266\u0007\u001a\u0002\u0002\u0266",
    "\u026a\u0005\u001c\u000f\u0002\u0267\u0268\u0007\u001b\u0002\u0002\u0268",
    "\u026a\u0005\u001c\u000f\u0002\u0269\u0263\u0003\u0002\u0002\u0002\u0269",
    "\u0265\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u026a",
    "\u001b\u0003\u0002\u0002\u0002\u026b\u0273\u0005$\u0013\u0002\u026c",
    "\u0273\u0005&\u0014\u0002\u026d\u026e\u0005\u001e\u0010\u0002\u026e",
    "\u026f\u0005 \u0011\u0002\u026f\u0270\u0005(\u0015\u0002\u0270\u0273",
    "\u0003\u0002\u0002\u0002\u0271\u0273\u0005*\u0016\u0002\u0272\u026b",
    "\u0003\u0002\u0002\u0002\u0272\u026c\u0003\u0002\u0002\u0002\u0272\u026d",
    "\u0003\u0002\u0002\u0002\u0272\u0271\u0003\u0002\u0002\u0002\u0273\u001d",
    "\u0003\u0002\u0002\u0002\u0274\u0275\u0007\u0007\u0002\u0002\u0275\u001f",
    "\u0003\u0002\u0002\u0002\u0276\u0277\t\u0003\u0002\u0002\u0277!\u0003",
    "\u0002\u0002\u0002\u0278\u027d\u0005$\u0013\u0002\u0279\u027d\u0005",
    "&\u0014\u0002\u027a\u027d\u0005(\u0015\u0002\u027b\u027d\u0005*\u0016",
    "\u0002\u027c\u0278\u0003\u0002\u0002\u0002\u027c\u0279\u0003\u0002\u0002",
    "\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c\u027b\u0003\u0002\u0002",
    "\u0002\u027d#\u0003\u0002\u0002\u0002\u027e\u0282\u0007\t\u0002\u0002",
    "\u027f\u0283\u00052\u001a\u0002\u0280\u0281\u0007\u001f\u0002\u0002",
    "\u0281\u0283\u00071\u0002\u0002\u0282\u027f\u0003\u0002\u0002\u0002",
    "\u0282\u0280\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002",
    "\u0284\u0285\u0007\n\u0002\u0002\u0285%\u0003\u0002\u0002\u0002\u0286",
    "\u0287\u0007\t\u0002\u0002\u0287\u0288\u00054\u001b\u0002\u0288\u0289",
    "\u0007\n\u0002\u0002\u0289\'\u0003\u0002\u0002\u0002\u028a\u028b\u0007",
    "\t\u0002\u0002\u028b\u028c\u00056\u001c\u0002\u028c\u028d\u0007\n\u0002",
    "\u0002\u028d)\u0003\u0002\u0002\u0002\u028e\u028f\u0007\t\u0002\u0002",
    "\u028f\u0290\u00058\u001d\u0002\u0290\u0291\u0007\n\u0002\u0002\u0291",
    "+\u0003\u0002\u0002\u0002\u0292\u0295\u0007F\u0002\u0002\u0293\u0295",
    "\u00050\u0019\u0002\u0294\u0292\u0003\u0002\u0002\u0002\u0294\u0293",
    "\u0003\u0002\u0002\u0002\u0295-\u0003\u0002\u0002\u0002\u0296\u029c",
    "\u0007F\u0002\u0002\u0297\u0298\u0007\t\u0002\u0002\u0298\u0299\u0005",
    "0\u0019\u0002\u0299\u029a\u0007\n\u0002\u0002\u029a\u029c\u0003\u0002",
    "\u0002\u0002\u029b\u0296\u0003\u0002\u0002\u0002\u029b\u0297\u0003\u0002",
    "\u0002\u0002\u029c/\u0003\u0002\u0002\u0002\u029d\u02a2\u00052\u001a",
    "\u0002\u029e\u02a2\u00054\u001b\u0002\u029f\u02a2\u00056\u001c\u0002",
    "\u02a0\u02a2\u00058\u001d\u0002\u02a1\u029d\u0003\u0002\u0002\u0002",
    "\u02a1\u029e\u0003\u0002\u0002\u0002\u02a1\u029f\u0003\u0002\u0002\u0002",
    "\u02a1\u02a0\u0003\u0002\u0002\u0002\u02a21\u0003\u0002\u0002\u0002",
    "\u02a3\u02a4\u0007\u0088\u0002\u0002\u02a4\u02ca\u00071\u0002\u0002",
    "\u02a5\u02a6\u0007\u0087\u0002\u0002\u02a6\u02ca\u00071\u0002\u0002",
    "\u02a7\u02ae\u0007\u008e\u0002\u0002\u02a8\u02a9\u00071\u0002\u0002",
    "\u02a9\u02ad\u0007\u0099\u0002\u0002\u02aa\u02ab\u00072\u0002\u0002",
    "\u02ab\u02ad\u0007\u009a\u0002\u0002\u02ac\u02a8\u0003\u0002\u0002\u0002",
    "\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad\u02b0\u0003\u0002\u0002\u0002",
    "\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002",
    "\u02af\u02b5\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002",
    "\u02b1\u02b2\u00071\u0002\u0002\u02b2\u02b6\u0007\u0096\u0002\u0002",
    "\u02b3\u02b4\u00072\u0002\u0002\u02b4\u02b6\u0007\u0098\u0002\u0002",
    "\u02b5\u02b1\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002",
    "\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7\u02ca\u00071\u0002\u0002",
    "\u02b8\u02bf\u0007\u008d\u0002\u0002\u02b9\u02ba\u00071\u0002\u0002",
    "\u02ba\u02be\u0007\u0099\u0002\u0002\u02bb\u02bc\u00072\u0002\u0002",
    "\u02bc\u02be\u0007\u009a\u0002\u0002\u02bd\u02b9\u0003\u0002\u0002\u0002",
    "\u02bd\u02bb\u0003\u0002\u0002\u0002\u02be\u02c1\u0003\u0002\u0002\u0002",
    "\u02bf\u02bd\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003\u0002\u0002\u0002",
    "\u02c0\u02c6\u0003\u0002\u0002\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002",
    "\u02c2\u02c3\u00071\u0002\u0002\u02c3\u02c7\u0007\u0095\u0002\u0002",
    "\u02c4\u02c5\u00072\u0002\u0002\u02c5\u02c7\u0007\u0097\u0002\u0002",
    "\u02c6\u02c2\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002",
    "\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02ca\u00071\u0002\u0002",
    "\u02c9\u02a3\u0003\u0002\u0002\u0002\u02c9\u02a5\u0003\u0002\u0002\u0002",
    "\u02c9\u02a7\u0003\u0002\u0002\u0002\u02c9\u02b8\u0003\u0002\u0002\u0002",
    "\u02ca3\u0003\u0002\u0002\u0002\u02cb\u02cc\u00071\u0002\u0002\u02cc",
    "\u02f2\u0007\u008a\u0002\u0002\u02cd\u02ce\u00071\u0002\u0002\u02ce",
    "\u02f2\u0007\u0089\u0002\u0002\u02cf\u02d0\u00071\u0002\u0002\u02d0",
    "\u02d7\u0007\u0090\u0002\u0002\u02d1\u02d2\u00071\u0002\u0002\u02d2",
    "\u02d6\u0007\u0099\u0002\u0002\u02d3\u02d4\u00072\u0002\u0002\u02d4",
    "\u02d6\u0007\u009a\u0002\u0002\u02d5\u02d1\u0003\u0002\u0002\u0002\u02d5",
    "\u02d3\u0003\u0002\u0002\u0002\u02d6\u02d9\u0003\u0002\u0002\u0002\u02d7",
    "\u02d5\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002\u0002\u0002\u02d8",
    "\u02de\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02da",
    "\u02db\u00071\u0002\u0002\u02db\u02df\u0007\u0092\u0002\u0002\u02dc",
    "\u02dd\u00072\u0002\u0002\u02dd\u02df\u0007\u0094\u0002\u0002\u02de",
    "\u02da\u0003\u0002\u0002\u0002\u02de\u02dc\u0003\u0002\u0002\u0002\u02df",
    "\u02f2\u0003\u0002\u0002\u0002\u02e0\u02e1\u00071\u0002\u0002\u02e1",
    "\u02e8\u0007\u008f\u0002\u0002\u02e2\u02e3\u00071\u0002\u0002\u02e3",
    "\u02e7\u0007\u0099\u0002\u0002\u02e4\u02e5\u00072\u0002\u0002\u02e5",
    "\u02e7\u0007\u009a\u0002\u0002\u02e6\u02e2\u0003\u0002\u0002\u0002\u02e6",
    "\u02e4\u0003\u0002\u0002\u0002\u02e7\u02ea\u0003\u0002\u0002\u0002\u02e8",
    "\u02e6\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9",
    "\u02ef\u0003\u0002\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb",
    "\u02ec\u00071\u0002\u0002\u02ec\u02f0\u0007\u0091\u0002\u0002\u02ed",
    "\u02ee\u00072\u0002\u0002\u02ee\u02f0\u0007\u0093\u0002\u0002\u02ef",
    "\u02eb\u0003\u0002\u0002\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02f0",
    "\u02f2\u0003\u0002\u0002\u0002\u02f1\u02cb\u0003\u0002\u0002\u0002\u02f1",
    "\u02cd\u0003\u0002\u0002\u0002\u02f1\u02cf\u0003\u0002\u0002\u0002\u02f1",
    "\u02e0\u0003\u0002\u0002\u0002\u02f25\u0003\u0002\u0002\u0002\u02f3",
    "\u02f4\u00071\u0002\u0002\u02f4\u02f5\u0007\u008c\u0002\u0002\u02f5",
    "\u031e\u00071\u0002\u0002\u02f6\u02f7\u00071\u0002\u0002\u02f7\u02f8",
    "\u0007\u008b\u0002\u0002\u02f8\u031e\u00071\u0002\u0002\u02f9\u02fa",
    "\u00071\u0002\u0002\u02fa\u0301\u0007\u0090\u0002\u0002\u02fb\u02fc",
    "\u00071\u0002\u0002\u02fc\u0300\u0007\u0099\u0002\u0002\u02fd\u02fe",
    "\u00072\u0002\u0002\u02fe\u0300\u0007\u009a\u0002\u0002\u02ff\u02fb",
    "\u0003\u0002\u0002\u0002\u02ff\u02fd\u0003\u0002\u0002\u0002\u0300\u0303",
    "\u0003\u0002\u0002\u0002\u0301\u02ff\u0003\u0002\u0002\u0002\u0301\u0302",
    "\u0003\u0002\u0002\u0002\u0302\u0308\u0003\u0002\u0002\u0002\u0303\u0301",
    "\u0003\u0002\u0002\u0002\u0304\u0305\u00071\u0002\u0002\u0305\u0309",
    "\u0007\u0096\u0002\u0002\u0306\u0307\u00072\u0002\u0002\u0307\u0309",
    "\u0007\u0098\u0002\u0002\u0308\u0304\u0003\u0002\u0002\u0002\u0308\u0306",
    "\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u031e",
    "\u00071\u0002\u0002\u030b\u030c\u00071\u0002\u0002\u030c\u0313\u0007",
    "\u008f\u0002\u0002\u030d\u030e\u00071\u0002\u0002\u030e\u0312\u0007",
    "\u0099\u0002\u0002\u030f\u0310\u00072\u0002\u0002\u0310\u0312\u0007",
    "\u009a\u0002\u0002\u0311\u030d\u0003\u0002\u0002\u0002\u0311\u030f\u0003",
    "\u0002\u0002\u0002\u0312\u0315\u0003\u0002\u0002\u0002\u0313\u0311\u0003",
    "\u0002\u0002\u0002\u0313\u0314\u0003\u0002\u0002\u0002\u0314\u031a\u0003",
    "\u0002\u0002\u0002\u0315\u0313\u0003\u0002\u0002\u0002\u0316\u0317\u0007",
    "1\u0002\u0002\u0317\u031b\u0007\u0095\u0002\u0002\u0318\u0319\u0007",
    "2\u0002\u0002\u0319\u031b\u0007\u0097\u0002\u0002\u031a\u0316\u0003",
    "\u0002\u0002\u0002\u031a\u0318\u0003\u0002\u0002\u0002\u031b\u031c\u0003",
    "\u0002\u0002\u0002\u031c\u031e\u00071\u0002\u0002\u031d\u02f3\u0003",
    "\u0002\u0002\u0002\u031d\u02f6\u0003\u0002\u0002\u0002\u031d\u02f9\u0003",
    "\u0002\u0002\u0002\u031d\u030b\u0003\u0002\u0002\u0002\u031e7\u0003",
    "\u0002\u0002\u0002\u031f\u0326\u0007\u008e\u0002\u0002\u0320\u0321\u0007",
    "1\u0002\u0002\u0321\u0325\u0007\u0099\u0002\u0002\u0322\u0323\u0007",
    "2\u0002\u0002\u0323\u0325\u0007\u009a\u0002\u0002\u0324\u0320\u0003",
    "\u0002\u0002\u0002\u0324\u0322\u0003\u0002\u0002\u0002\u0325\u0328\u0003",
    "\u0002\u0002\u0002\u0326\u0324\u0003\u0002\u0002\u0002\u0326\u0327\u0003",
    "\u0002\u0002\u0002\u0327\u032d\u0003\u0002\u0002\u0002\u0328\u0326\u0003",
    "\u0002\u0002\u0002\u0329\u032a\u00071\u0002\u0002\u032a\u032e\u0007",
    "\u0092\u0002\u0002\u032b\u032c\u00072\u0002\u0002\u032c\u032e\u0007",
    "\u0094\u0002\u0002\u032d\u0329\u0003\u0002\u0002\u0002\u032d\u032b\u0003",
    "\u0002\u0002\u0002\u032e\u0340\u0003\u0002\u0002\u0002\u032f\u0336\u0007",
    "\u008d\u0002\u0002\u0330\u0331\u00071\u0002\u0002\u0331\u0335\u0007",
    "\u0099\u0002\u0002\u0332\u0333\u00072\u0002\u0002\u0333\u0335\u0007",
    "\u009a\u0002\u0002\u0334\u0330\u0003\u0002\u0002\u0002\u0334\u0332\u0003",
    "\u0002\u0002\u0002\u0335\u0338\u0003\u0002\u0002\u0002\u0336\u0334\u0003",
    "\u0002\u0002\u0002\u0336\u0337\u0003\u0002\u0002\u0002\u0337\u033d\u0003",
    "\u0002\u0002\u0002\u0338\u0336\u0003\u0002\u0002\u0002\u0339\u033a\u0007",
    "1\u0002\u0002\u033a\u033e\u0007\u0091\u0002\u0002\u033b\u033c\u0007",
    "2\u0002\u0002\u033c\u033e\u0007\u0093\u0002\u0002\u033d\u0339\u0003",
    "\u0002\u0002\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033e\u0340\u0003",
    "\u0002\u0002\u0002\u033f\u031f\u0003\u0002\u0002\u0002\u033f\u032f\u0003",
    "\u0002\u0002\u0002\u03409\u0003\u0002\u0002\u0002\u0341\u0346\u0005",
    "<\u001f\u0002\u0342\u0346\u0005> \u0002\u0343\u0346\u0005@!\u0002\u0344",
    "\u0346\u0005B\"\u0002\u0345\u0341\u0003\u0002\u0002\u0002\u0345\u0342",
    "\u0003\u0002\u0002\u0002\u0345\u0343\u0003\u0002\u0002\u0002\u0345\u0344",
    "\u0003\u0002\u0002\u0002\u0346;\u0003\u0002\u0002\u0002\u0347\u0348",
    "\u0007\u0088\u0002\u0002\u0348\u0355\u0007F\u0002\u0002\u0349\u034e",
    "\u0007\u008e\u0002\u0002\u034a\u034b\u0007F\u0002\u0002\u034b\u034d",
    "\t\u0004\u0002\u0002\u034c\u034a\u0003\u0002\u0002\u0002\u034d\u0350",
    "\u0003\u0002\u0002\u0002\u034e\u034c\u0003\u0002\u0002\u0002\u034e\u034f",
    "\u0003\u0002\u0002\u0002\u034f\u0351\u0003\u0002\u0002\u0002\u0350\u034e",
    "\u0003\u0002\u0002\u0002\u0351\u0352\u0007F\u0002\u0002\u0352\u0353",
    "\t\u0005\u0002\u0002\u0353\u0355\u0007F\u0002\u0002\u0354\u0347\u0003",
    "\u0002\u0002\u0002\u0354\u0349\u0003\u0002\u0002\u0002\u0355=\u0003",
    "\u0002\u0002\u0002\u0356\u0357\u0007F\u0002\u0002\u0357\u0364\u0007",
    "\u008a\u0002\u0002\u0358\u0359\u0007F\u0002\u0002\u0359\u035e\u0007",
    "\u0090\u0002\u0002\u035a\u035b\u0007F\u0002\u0002\u035b\u035d\t\u0004",
    "\u0002\u0002\u035c\u035a\u0003\u0002\u0002\u0002\u035d\u0360\u0003\u0002",
    "\u0002\u0002\u035e\u035c\u0003\u0002\u0002\u0002\u035e\u035f\u0003\u0002",
    "\u0002\u0002\u035f\u0361\u0003\u0002\u0002\u0002\u0360\u035e\u0003\u0002",
    "\u0002\u0002\u0361\u0362\u0007F\u0002\u0002\u0362\u0364\t\u0006\u0002",
    "\u0002\u0363\u0356\u0003\u0002\u0002\u0002\u0363\u0358\u0003\u0002\u0002",
    "\u0002\u0364?\u0003\u0002\u0002\u0002\u0365\u0366\u0007F\u0002\u0002",
    "\u0366\u0367\u0007\u008c\u0002\u0002\u0367\u0375\u0007F\u0002\u0002",
    "\u0368\u0369\u0007F\u0002\u0002\u0369\u036e\u0007\u0090\u0002\u0002",
    "\u036a\u036b\u0007F\u0002\u0002\u036b\u036d\t\u0004\u0002\u0002\u036c",
    "\u036a\u0003\u0002\u0002\u0002\u036d\u0370\u0003\u0002\u0002\u0002\u036e",
    "\u036c\u0003\u0002\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f",
    "\u0371\u0003\u0002\u0002\u0002\u0370\u036e\u0003\u0002\u0002\u0002\u0371",
    "\u0372\u0007F\u0002\u0002\u0372\u0373\t\u0005\u0002\u0002\u0373\u0375",
    "\u0007F\u0002\u0002\u0374\u0365\u0003\u0002\u0002\u0002\u0374\u0368",
    "\u0003\u0002\u0002\u0002\u0375A\u0003\u0002\u0002\u0002\u0376\u037b",
    "\u0007\u008e\u0002\u0002\u0377\u0378\u0007F\u0002\u0002\u0378\u037a",
    "\t\u0004\u0002\u0002\u0379\u0377\u0003\u0002\u0002\u0002\u037a\u037d",
    "\u0003\u0002\u0002\u0002\u037b\u0379\u0003\u0002\u0002\u0002\u037b\u037c",
    "\u0003\u0002\u0002\u0002\u037c\u037e\u0003\u0002\u0002\u0002\u037d\u037b",
    "\u0003\u0002\u0002\u0002\u037e\u037f\u0007F\u0002\u0002\u037f\u0380",
    "\t\u0006\u0002\u0002\u0380C\u0003\u0002\u0002\u0002\u0381\u0386\u0005",
    "F$\u0002\u0382\u0386\u0005H%\u0002\u0383\u0386\u0005J&\u0002\u0384\u0386",
    "\u0005L\'\u0002\u0385\u0381\u0003\u0002\u0002\u0002\u0385\u0382\u0003",
    "\u0002\u0002\u0002\u0385\u0383\u0003\u0002\u0002\u0002\u0385\u0384\u0003",
    "\u0002\u0002\u0002\u0386E\u0003\u0002\u0002\u0002\u0387\u0388\u0007",
    "\u0087\u0002\u0002\u0388\u0398\u0005\u0010\t\u0002\u0389\u038b\u0007",
    "\u008d\u0002\u0002\u038a\u038c\u0005X-\u0002\u038b\u038a\u0003\u0002",
    "\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u0394\u0003\u0002",
    "\u0002\u0002\u038d\u038e\u0005\u0010\t\u0002\u038e\u038f\u0007\u0095",
    "\u0002\u0002\u038f\u0395\u0003\u0002\u0002\u0002\u0390\u0392\u0005Z",
    ".\u0002\u0391\u0390\u0003\u0002\u0002\u0002\u0391\u0392\u0003\u0002",
    "\u0002\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0395\u0007\u0097",
    "\u0002\u0002\u0394\u038d\u0003\u0002\u0002\u0002\u0394\u0391\u0003\u0002",
    "\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u0398\u0005\u0010",
    "\t\u0002\u0397\u0387\u0003\u0002\u0002\u0002\u0397\u0389\u0003\u0002",
    "\u0002\u0002\u0398G\u0003\u0002\u0002\u0002\u0399\u039a\u0005\u0010",
    "\t\u0002\u039a\u039b\u0007\u0089\u0002\u0002\u039b\u03ab\u0003\u0002",
    "\u0002\u0002\u039c\u039d\u0005\u0010\t\u0002\u039d\u039f\u0007\u008f",
    "\u0002\u0002\u039e\u03a0\u0005X-\u0002\u039f\u039e\u0003\u0002\u0002",
    "\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a8\u0003\u0002\u0002",
    "\u0002\u03a1\u03a2\u0005\u0010\t\u0002\u03a2\u03a3\u0007\u0091\u0002",
    "\u0002\u03a3\u03a9\u0003\u0002\u0002\u0002\u03a4\u03a6\u0005Z.\u0002",
    "\u03a5\u03a4\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002",
    "\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7\u03a9\u0007\u0093\u0002\u0002",
    "\u03a8\u03a1\u0003\u0002\u0002\u0002\u03a8\u03a5\u0003\u0002\u0002\u0002",
    "\u03a9\u03ab\u0003\u0002\u0002\u0002\u03aa\u0399\u0003\u0002\u0002\u0002",
    "\u03aa\u039c\u0003\u0002\u0002\u0002\u03abI\u0003\u0002\u0002\u0002",
    "\u03ac\u03ad\u0005\u0010\t\u0002\u03ad\u03b0\u0006&\u001c\u0002\u03ae",
    "\u03af\t\u0007\u0002\u0002\u03af\u03b1\u0005\u0010\t\u0002\u03b0\u03ae",
    "\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b0",
    "\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003\u0002\u0002\u0002\u03b3\u03dd",
    "\u0003\u0002\u0002\u0002\u03b4\u03b7\u0005\u0010\t\u0002\u03b5\u03b6",
    "\t\u0007\u0002\u0002\u03b6\u03b8\u0005\u0010\t\u0002\u03b7\u03b5\u0003",
    "\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003",
    "\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03dd\u0003",
    "\u0002\u0002\u0002\u03bb\u03bc\u0005\u0010\t\u0002\u03bc\u03bd\u0006",
    "&\u001d\u0002\u03bd\u03bf\u0007\u008f\u0002\u0002\u03be\u03c0\u0005",
    "X-\u0002\u03bf\u03be\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002",
    "\u0002\u0002\u03c0\u03c8\u0003\u0002\u0002\u0002\u03c1\u03c2\u0005\u0010",
    "\t\u0002\u03c2\u03c3\u0007\u0095\u0002\u0002\u03c3\u03c9\u0003\u0002",
    "\u0002\u0002\u03c4\u03c6\u0005Z.\u0002\u03c5\u03c4\u0003\u0002\u0002",
    "\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002",
    "\u0002\u03c7\u03c9\u0007\u0097\u0002\u0002\u03c8\u03c1\u0003\u0002\u0002",
    "\u0002\u03c8\u03c5\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002",
    "\u0002\u03ca\u03cb\u0005\u0010\t\u0002\u03cb\u03dd\u0003\u0002\u0002",
    "\u0002\u03cc\u03cd\u0005\u0010\t\u0002\u03cd\u03cf\u0007\u008f\u0002",
    "\u0002\u03ce\u03d0\u0005X-\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002",
    "\u03cf\u03d0\u0003\u0002\u0002\u0002\u03d0\u03d8\u0003\u0002\u0002\u0002",
    "\u03d1\u03d2\u0005\u0010\t\u0002\u03d2\u03d3\u0007\u0095\u0002\u0002",
    "\u03d3\u03d9\u0003\u0002\u0002\u0002\u03d4\u03d6\u0005Z.\u0002\u03d5",
    "\u03d4\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6",
    "\u03d7\u0003\u0002\u0002\u0002\u03d7\u03d9\u0007\u0097\u0002\u0002\u03d8",
    "\u03d1\u0003\u0002\u0002\u0002\u03d8\u03d5\u0003\u0002\u0002\u0002\u03d9",
    "\u03da\u0003\u0002\u0002\u0002\u03da\u03db\u0005\u0010\t\u0002\u03db",
    "\u03dd\u0003\u0002\u0002\u0002\u03dc\u03ac\u0003\u0002\u0002\u0002\u03dc",
    "\u03b4\u0003\u0002\u0002\u0002\u03dc\u03bb\u0003\u0002\u0002\u0002\u03dc",
    "\u03cc\u0003\u0002\u0002\u0002\u03ddK\u0003\u0002\u0002\u0002\u03de",
    "\u03e0\u0007\u008d\u0002\u0002\u03df\u03e1\u0005X-\u0002\u03e0\u03df",
    "\u0003\u0002\u0002\u0002\u03e0\u03e1\u0003\u0002\u0002\u0002\u03e1\u03e9",
    "\u0003\u0002\u0002\u0002\u03e2\u03e3\u0005\u0010\t\u0002\u03e3\u03e4",
    "\u0007\u0091\u0002\u0002\u03e4\u03ea\u0003\u0002\u0002\u0002\u03e5\u03e7",
    "\u0005Z.\u0002\u03e6\u03e5\u0003\u0002\u0002\u0002\u03e6\u03e7\u0003",
    "\u0002\u0002\u0002\u03e7\u03e8\u0003\u0002\u0002\u0002\u03e8\u03ea\u0007",
    "\u0093\u0002\u0002\u03e9\u03e2\u0003\u0002\u0002\u0002\u03e9\u03e6\u0003",
    "\u0002\u0002\u0002\u03eaM\u0003\u0002\u0002\u0002\u03eb\u03f0\u0005",
    "P)\u0002\u03ec\u03f0\u0005R*\u0002\u03ed\u03f0\u0005T+\u0002\u03ee\u03f0",
    "\u0005V,\u0002\u03ef\u03eb\u0003\u0002\u0002\u0002\u03ef\u03ec\u0003",
    "\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002\u0002\u0002\u03ef\u03ee\u0003",
    "\u0002\u0002\u0002\u03f0O\u0003\u0002\u0002\u0002\u03f1\u03f2\u0007",
    "\u0088\u0002\u0002\u03f2\u0402\u0005\u0010\t\u0002\u03f3\u03f5\u0007",
    "\u008e\u0002\u0002\u03f4\u03f6\u0005X-\u0002\u03f5\u03f4\u0003\u0002",
    "\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u03fe\u0003\u0002",
    "\u0002\u0002\u03f7\u03f8\u0005\u0010\t\u0002\u03f8\u03f9\u0007\u0096",
    "\u0002\u0002\u03f9\u03ff\u0003\u0002\u0002\u0002\u03fa\u03fc\u0005Z",
    ".\u0002\u03fb\u03fa\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002",
    "\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u03ff\u0007\u0098",
    "\u0002\u0002\u03fe\u03f7\u0003\u0002\u0002\u0002\u03fe\u03fb\u0003\u0002",
    "\u0002\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0402\u0005\u0010",
    "\t\u0002\u0401\u03f1\u0003\u0002\u0002\u0002\u0401\u03f3\u0003\u0002",
    "\u0002\u0002\u0402Q\u0003\u0002\u0002\u0002\u0403\u0404\u0005\u0010",
    "\t\u0002\u0404\u0405\u0007\u008a\u0002\u0002\u0405\u0415\u0003\u0002",
    "\u0002\u0002\u0406\u0407\u0005\u0010\t\u0002\u0407\u0409\u0007\u0090",
    "\u0002\u0002\u0408\u040a\u0005X-\u0002\u0409\u0408\u0003\u0002\u0002",
    "\u0002\u0409\u040a\u0003\u0002\u0002\u0002\u040a\u0412\u0003\u0002\u0002",
    "\u0002\u040b\u040c\u0005\u0010\t\u0002\u040c\u040d\u0007\u0092\u0002",
    "\u0002\u040d\u0413\u0003\u0002\u0002\u0002\u040e\u0410\u0005Z.\u0002",
    "\u040f\u040e\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002",
    "\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u0413\u0007\u0094\u0002\u0002",
    "\u0412\u040b\u0003\u0002\u0002\u0002\u0412\u040f\u0003\u0002\u0002\u0002",
    "\u0413\u0415\u0003\u0002\u0002\u0002\u0414\u0403\u0003\u0002\u0002\u0002",
    "\u0414\u0406\u0003\u0002\u0002\u0002\u0415S\u0003\u0002\u0002\u0002",
    "\u0416\u0417\u0005\u0010\t\u0002\u0417\u0418\u0007\u008c\u0002\u0002",
    "\u0418\u0419\u0005\u0010\t\u0002\u0419\u042b\u0003\u0002\u0002\u0002",
    "\u041a\u041b\u0005\u0010\t\u0002\u041b\u041d\u0007\u0090\u0002\u0002",
    "\u041c\u041e\u0005X-\u0002\u041d\u041c\u0003\u0002\u0002\u0002\u041d",
    "\u041e\u0003\u0002\u0002\u0002\u041e\u0426\u0003\u0002\u0002\u0002\u041f",
    "\u0420\u0005\u0010\t\u0002\u0420\u0421\u0007\u0096\u0002\u0002\u0421",
    "\u0427\u0003\u0002\u0002\u0002\u0422\u0424\u0005Z.\u0002\u0423\u0422",
    "\u0003\u0002\u0002\u0002\u0423\u0424\u0003\u0002\u0002\u0002\u0424\u0425",
    "\u0003\u0002\u0002\u0002\u0425\u0427\u0007\u0098\u0002\u0002\u0426\u041f",
    "\u0003\u0002\u0002\u0002\u0426\u0423\u0003\u0002\u0002\u0002\u0427\u0428",
    "\u0003\u0002\u0002\u0002\u0428\u0429\u0005\u0010\t\u0002\u0429\u042b",
    "\u0003\u0002\u0002\u0002\u042a\u0416\u0003\u0002\u0002\u0002\u042a\u041a",
    "\u0003\u0002\u0002\u0002\u042bU\u0003\u0002\u0002\u0002\u042c\u042e",
    "\u0007\u008e\u0002\u0002\u042d\u042f\u0005X-\u0002\u042e\u042d\u0003",
    "\u0002\u0002\u0002\u042e\u042f\u0003\u0002\u0002\u0002\u042f\u0437\u0003",
    "\u0002\u0002\u0002\u0430\u0431\u0005\u0010\t\u0002\u0431\u0432\u0007",
    "\u0092\u0002\u0002\u0432\u0438\u0003\u0002\u0002\u0002\u0433\u0435\u0005",
    "Z.\u0002\u0434\u0433\u0003\u0002\u0002\u0002\u0434\u0435\u0003\u0002",
    "\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002\u0436\u0438\u0007\u0094",
    "\u0002\u0002\u0437\u0430\u0003\u0002\u0002\u0002\u0437\u0434\u0003\u0002",
    "\u0002\u0002\u0438W\u0003\u0002\u0002\u0002\u0439\u043a\u0005\u0010",
    "\t\u0002\u043a\u043b\u0007\u0099\u0002\u0002\u043b\u0441\u0003\u0002",
    "\u0002\u0002\u043c\u043e\u0005Z.\u0002\u043d\u043c\u0003\u0002\u0002",
    "\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002\u0002",
    "\u0002\u043f\u0441\u0007\u009a\u0002\u0002\u0440\u0439\u0003\u0002\u0002",
    "\u0002\u0440\u043d\u0003\u0002\u0002\u0002\u0441\u0442\u0003\u0002\u0002",
    "\u0002\u0442\u0440\u0003\u0002\u0002\u0002\u0442\u0443\u0003\u0002\u0002",
    "\u0002\u0443Y\u0003\u0002\u0002\u0002\u0444\u0449\u0005\u0010\t\u0002",
    "\u0445\u0446\u0007)\u0002\u0002\u0446\u0448\u0005\u0010\t\u0002\u0447",
    "\u0445\u0003\u0002\u0002\u0002\u0448\u044b\u0003\u0002\u0002\u0002\u0449",
    "\u0447\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a",
    "[\u0003\u0002\u0002\u0002\u044b\u0449\u0003\u0002\u0002\u0002\u008d",
    "_akq{~\u0085\u0090\u009b\u00a7\u00ae\u00c8\u00de\u00e7\u00ef\u00f6\u0113",
    "\u0127\u0129\u014c\u0163\u0169\u016c\u0171\u0177\u017a\u0181\u0188\u018f",
    "\u01a6\u01a9\u01b2\u01bf\u01e0\u01e6\u01e9\u01f6\u0200\u0207\u020d\u0210",
    "\u0220\u022b\u022d\u0231\u0234\u0237\u023b\u023f\u0241\u0244\u024b\u0252",
    "\u0259\u0261\u0269\u0272\u027c\u0282\u0294\u029b\u02a1\u02ac\u02ae\u02b5",
    "\u02bd\u02bf\u02c6\u02c9\u02d5\u02d7\u02de\u02e6\u02e8\u02ef\u02f1\u02ff",
    "\u0301\u0308\u0311\u0313\u031a\u031d\u0324\u0326\u032d\u0334\u0336\u033d",
    "\u033f\u0345\u034e\u0354\u035e\u0363\u036e\u0374\u037b\u0385\u038b\u0391",
    "\u0394\u0397\u039f\u03a5\u03a8\u03aa\u03b2\u03b9\u03bf\u03c5\u03c8\u03cf",
    "\u03d5\u03d8\u03dc\u03e0\u03e6\u03e9\u03ef\u03f5\u03fb\u03fe\u0401\u0409",
    "\u040f\u0412\u0414\u041d\u0423\u0426\u042a\u042e\u0434\u0437\u043d\u0440",
    "\u0442\u0449"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'\u2500'", "'\u250C'", "'\u2577'", null, null, 
                     null, "'\u0028'", "'\u0029'", "'\u005B'", "'\u005D'", 
                     "'\u007B'", "'\u007D'", "'\u2989'", "'\u298A'", "'\u27EA'", 
                     "'\u27EB'", "'\u2550'", "'\u2514'", null, null, null, 
                     "'else'", "'false'", "'function'", "'generic'", "'if'", 
                     "'leftassoc'", "'let'", "'\u2119'", "'parents'", "'pre'", 
                     "'relation'", "'rightassoc'", "'section'", "'then'", 
                     "'true'", "':'", "'=='", "','", "'::='", "'|'", "'\u0026'", 
                     "'\u005C'", "'/'", "'.'", "';'", "'_'", "',,'", "'='", 
                     null, "'\u2200'", "'\u2981'", "'\u2203'", null, "'\u21D4'", 
                     "'\u21D2'", "'\u2228'", "'\u2227'", "'\u00AC'", "'\u2208'", 
                     "'\u2A21'", "'\u00D7'", "'\u03B8'", "'\u03BB'", "'\u03BC'", 
                     "'\u2A1F'", "'\u2A20'", null, null, "'\u0394'", "'\u039E'", 
                     "'\uD835\uDD38'", "'\u2115'", "'\u2032'", "'\u0021'", 
                     "'\u003F'", "'\u2197'", "'\u2199'", "'\u2198'", "'\u2196'", 
                     "'\u22A2'", "'\u29F9'", "'\u002B'", null, "'\u2194'", 
                     "'\u2192'", "'\u2260'", "'\u2209'", "'\u2205'", "'\u2286'", 
                     "'\u2282'", "'\u222A'", "'\u2229'", "'\u2216'", "'\u2296'", 
                     "'\u22C3'", "'\u22C2'", "'\uD835\uDD3D'", "'\u21A6'", 
                     "'\u2A3E'", "'\u2218'", "'\u25C1'", "'\u25B7'", "'\u2A64'", 
                     "'\u2A65'", "'\u223C'", "'\u2987'", "'\u2988'", "'\u2295'", 
                     "'\u21F8'", "'\u2914'", "'\u21A3'", "'\u2900'", "'\u21A0'", 
                     "'\u2916'", "'\u21FB'", "'\u2915'", "'\u2124'", "'\u002D'", 
                     "'\u2212'", "'\u2264'", "'\u003C'", "'\u2265'", "'\u003E'", 
                     "'\u002A'", "'\u0023'", "'\u2040'", "'\u21BF'", "'\u21BE'", 
                     "'\u27E8'", "'\u27E9'", null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, "'\u2028'" ];

var symbolicNames = [ null, "ZED", "SCH", "AX", "TEXT", "NUMERAL", "STROKE", 
                      "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", 
                      "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
                      "LEFT_BINDING_BRACKET", "RIGHT_BINDING_BRACKET", "LEFT_DOUBLE_ANGLE_BRACKET", 
                      "RIGHT_DOUBLE_ANGLE_BRACKET", "GEN", "END", "WS", 
                      "NL", "IGNORE_NL", "ELSE", "FALSE", "FUNCTION", "GENERIC", 
                      "IF", "LEFTASSOC", "LET", "POWERSET", "PARENTS", "PRE_KEY", 
                      "RELATION", "RIGHTASSOC", "SECTION", "THEN", "TRUE", 
                      "COLON", "DEFINE_EQUAL", "COMMA", "FREE_EQUALS", "VERTICAL_LINE", 
                      "AMPERSAND", "REVERSE_SOLIDUS", "SOLIDUS", "FULL_STOP", 
                      "SEMICOLON", "ARGUMENT", "LIST", "EQUALS_SIGN", "CONJECTURE", 
                      "FOR_ALL", "SPOT", "THERE_EXISTS", "UNIQUE_EXISTS", 
                      "LEFT_RIGHT_DOUBLE_ARROW", "RIGHTWARDS_DOUBLE_ARROW", 
                      "LOGICAL_OR", "LOGICAL_AND", "NOT_SIGN", "ELEMENT_OF", 
                      "SCHEMA_PROJECTION", "MULTIPLICATION_SIGN", "GREEK_SMALL_LETTER_THETA", 
                      "GREEK_SMALL_LETTER_LAMBDA", "GREEK_SMALL_LETTER_MU", 
                      "SCHEMA_COMPOSITION", "SCHEMA_PIPING", "NAME", "WORDPART", 
                      "GREEK_CAPITAL_LETTER_DELTA", "GREEK_CAPITAL_LETTER_XI", 
                      "MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_A", "DOUBLE_STRUCK_CAPITAL_N", 
                      "MODIFIER_LETTER_PRIME", "EXCLAMATION_MARK", "QUESTION_MARK", 
                      "NORTH_EAST_ARROW", "SOUTH_WEST_ARROW", "SOUTH_EAST_ARROW", 
                      "NORTH_WEST_ARROW", "RIGHT_TACK", "BIG_REVERSE_SOLIDUS", 
                      "PLUS_SIGN", "MATHEMATICAL_TOOLKIT_SYMBOLS", "LEFT_RIGHT_ARROW", 
                      "RIGHTWARDS_ARROW", "NOT_EQUAL_TO", "NOT_AN_ELEMENT_OF", 
                      "EMPTY_SET", "SUBSET_OF_OR_EQUAL_TO", "SUBSET_OF", 
                      "UNION", "INTERSECTION", "SET_MINUS", "CIRCLED_MINUS", 
                      "N_ARY_UNION", "N_ARY_INTERSECTION", "MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_F", 
                      "RIGHTWARDS_ARROW_FROM_BAR", "RELATIONAL_COMPOSITION", 
                      "RING_OPERATOR", "WHITE_LEFT_POINTING_TRIANGLE", "WHITE_RIGHT_POINTING_TRIANGLE", 
                      "DOMAIN_ANTIRESTRICTION", "RANGE_ANTIRESTRICTION", 
                      "TILDE_OPERATOR", "LEFT_IMAGE_BRACKET", "RIGHT_IMAGE_BRACKET", 
                      "CIRCLED_PLUS", "RIGHTWARDS_ARROW_WITH_VERTICAL_STROKE", 
                      "RIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE", 
                      "RIGHTWARDS_ARROW_WITH_TAIL", "RIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE", 
                      "RIGHTWARDS_TWO_HEADED_ARROW", "RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL", 
                      "RIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE", "RIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE", 
                      "DOUBLE_STRUCK_CAPITAL_Z", "HYPHEN_MINUS", "MINUS_SIGN", 
                      "LESS_THAN_OR_EQUAL_TO", "LESS_THAN_SIGN", "GREATER_THAN_OR_EQUAL_TO", 
                      "GREATER_THAN_SIGN", "ASTERISK", "NUMBER_SIGN", "CHARACTER_TIE", 
                      "UPWARDS_HARPOON_WITH_BARB_LEFTWARDS", "UPWARDS_HARPOON_WITH_BARB_RIGHTWARDS", 
                      "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", "ID", 
                      "PREP", "PRE", "POSTP", "POST", "IP", "I", "LP", "L", 
                      "ELP", "EL", "ERP", "ER", "SRP", "SR", "EREP", "ERE", 
                      "SREP", "SRE", "ES", "SS", "UNKNOWN", "NLCHAR" ];

var ruleNames =  [ "specification", "section", "paragraph", "freetype", 
                   "branch", "formals", "predicate", "expression", "schemaText", 
                   "declPart", "declNameExpression", "declaration", "operatorTemplate", 
                   "categoryTemplate", "prec", "assoc", "template", "prefixTemplate", 
                   "postfixTemplate", "infixTemplate", "nofixTemplate", 
                   "declName", "refName", "opName", "prefixName", "postfixName", 
                   "infixName", "nofixName", "genName", "prefixGenName", 
                   "postfixGenName", "infixGenName", "nofixGenName", "relation", 
                   "prefixRel", "postfixRel", "infixRel", "nofixRel", "application", 
                   "prefixApp", "postfixApp", "infixApp", "nofixApp", "expSep", 
                   "expressionList" ];

function ZParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ZParser.prototype = Object.create(antlr4.Parser.prototype);
ZParser.prototype.constructor = ZParser;

Object.defineProperty(ZParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ZParser.EOF = antlr4.Token.EOF;
ZParser.ZED = 1;
ZParser.SCH = 2;
ZParser.AX = 3;
ZParser.TEXT = 4;
ZParser.NUMERAL = 5;
ZParser.STROKE = 6;
ZParser.LEFT_PARENTHESIS = 7;
ZParser.RIGHT_PARENTHESIS = 8;
ZParser.LEFT_SQUARE_BRACKET = 9;
ZParser.RIGHT_SQUARE_BRACKET = 10;
ZParser.LEFT_CURLY_BRACKET = 11;
ZParser.RIGHT_CURLY_BRACKET = 12;
ZParser.LEFT_BINDING_BRACKET = 13;
ZParser.RIGHT_BINDING_BRACKET = 14;
ZParser.LEFT_DOUBLE_ANGLE_BRACKET = 15;
ZParser.RIGHT_DOUBLE_ANGLE_BRACKET = 16;
ZParser.GEN = 17;
ZParser.END = 18;
ZParser.WS = 19;
ZParser.NL = 20;
ZParser.IGNORE_NL = 21;
ZParser.ELSE = 22;
ZParser.FALSE = 23;
ZParser.FUNCTION = 24;
ZParser.GENERIC = 25;
ZParser.IF = 26;
ZParser.LEFTASSOC = 27;
ZParser.LET = 28;
ZParser.POWERSET = 29;
ZParser.PARENTS = 30;
ZParser.PRE_KEY = 31;
ZParser.RELATION = 32;
ZParser.RIGHTASSOC = 33;
ZParser.SECTION = 34;
ZParser.THEN = 35;
ZParser.TRUE = 36;
ZParser.COLON = 37;
ZParser.DEFINE_EQUAL = 38;
ZParser.COMMA = 39;
ZParser.FREE_EQUALS = 40;
ZParser.VERTICAL_LINE = 41;
ZParser.AMPERSAND = 42;
ZParser.REVERSE_SOLIDUS = 43;
ZParser.SOLIDUS = 44;
ZParser.FULL_STOP = 45;
ZParser.SEMICOLON = 46;
ZParser.ARGUMENT = 47;
ZParser.LIST = 48;
ZParser.EQUALS_SIGN = 49;
ZParser.CONJECTURE = 50;
ZParser.FOR_ALL = 51;
ZParser.SPOT = 52;
ZParser.THERE_EXISTS = 53;
ZParser.UNIQUE_EXISTS = 54;
ZParser.LEFT_RIGHT_DOUBLE_ARROW = 55;
ZParser.RIGHTWARDS_DOUBLE_ARROW = 56;
ZParser.LOGICAL_OR = 57;
ZParser.LOGICAL_AND = 58;
ZParser.NOT_SIGN = 59;
ZParser.ELEMENT_OF = 60;
ZParser.SCHEMA_PROJECTION = 61;
ZParser.MULTIPLICATION_SIGN = 62;
ZParser.GREEK_SMALL_LETTER_THETA = 63;
ZParser.GREEK_SMALL_LETTER_LAMBDA = 64;
ZParser.GREEK_SMALL_LETTER_MU = 65;
ZParser.SCHEMA_COMPOSITION = 66;
ZParser.SCHEMA_PIPING = 67;
ZParser.NAME = 68;
ZParser.WORDPART = 69;
ZParser.GREEK_CAPITAL_LETTER_DELTA = 70;
ZParser.GREEK_CAPITAL_LETTER_XI = 71;
ZParser.MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_A = 72;
ZParser.DOUBLE_STRUCK_CAPITAL_N = 73;
ZParser.MODIFIER_LETTER_PRIME = 74;
ZParser.EXCLAMATION_MARK = 75;
ZParser.QUESTION_MARK = 76;
ZParser.NORTH_EAST_ARROW = 77;
ZParser.SOUTH_WEST_ARROW = 78;
ZParser.SOUTH_EAST_ARROW = 79;
ZParser.NORTH_WEST_ARROW = 80;
ZParser.RIGHT_TACK = 81;
ZParser.BIG_REVERSE_SOLIDUS = 82;
ZParser.PLUS_SIGN = 83;
ZParser.MATHEMATICAL_TOOLKIT_SYMBOLS = 84;
ZParser.LEFT_RIGHT_ARROW = 85;
ZParser.RIGHTWARDS_ARROW = 86;
ZParser.NOT_EQUAL_TO = 87;
ZParser.NOT_AN_ELEMENT_OF = 88;
ZParser.EMPTY_SET = 89;
ZParser.SUBSET_OF_OR_EQUAL_TO = 90;
ZParser.SUBSET_OF = 91;
ZParser.UNION = 92;
ZParser.INTERSECTION = 93;
ZParser.SET_MINUS = 94;
ZParser.CIRCLED_MINUS = 95;
ZParser.N_ARY_UNION = 96;
ZParser.N_ARY_INTERSECTION = 97;
ZParser.MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_F = 98;
ZParser.RIGHTWARDS_ARROW_FROM_BAR = 99;
ZParser.RELATIONAL_COMPOSITION = 100;
ZParser.RING_OPERATOR = 101;
ZParser.WHITE_LEFT_POINTING_TRIANGLE = 102;
ZParser.WHITE_RIGHT_POINTING_TRIANGLE = 103;
ZParser.DOMAIN_ANTIRESTRICTION = 104;
ZParser.RANGE_ANTIRESTRICTION = 105;
ZParser.TILDE_OPERATOR = 106;
ZParser.LEFT_IMAGE_BRACKET = 107;
ZParser.RIGHT_IMAGE_BRACKET = 108;
ZParser.CIRCLED_PLUS = 109;
ZParser.RIGHTWARDS_ARROW_WITH_VERTICAL_STROKE = 110;
ZParser.RIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE = 111;
ZParser.RIGHTWARDS_ARROW_WITH_TAIL = 112;
ZParser.RIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE = 113;
ZParser.RIGHTWARDS_TWO_HEADED_ARROW = 114;
ZParser.RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL = 115;
ZParser.RIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE = 116;
ZParser.RIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE = 117;
ZParser.DOUBLE_STRUCK_CAPITAL_Z = 118;
ZParser.HYPHEN_MINUS = 119;
ZParser.MINUS_SIGN = 120;
ZParser.LESS_THAN_OR_EQUAL_TO = 121;
ZParser.LESS_THAN_SIGN = 122;
ZParser.GREATER_THAN_OR_EQUAL_TO = 123;
ZParser.GREATER_THAN_SIGN = 124;
ZParser.ASTERISK = 125;
ZParser.NUMBER_SIGN = 126;
ZParser.CHARACTER_TIE = 127;
ZParser.UPWARDS_HARPOON_WITH_BARB_LEFTWARDS = 128;
ZParser.UPWARDS_HARPOON_WITH_BARB_RIGHTWARDS = 129;
ZParser.LEFT_ANGLE_BRACKET = 130;
ZParser.RIGHT_ANGLE_BRACKET = 131;
ZParser.ID = 132;
ZParser.PREP = 133;
ZParser.PRE = 134;
ZParser.POSTP = 135;
ZParser.POST = 136;
ZParser.IP = 137;
ZParser.I = 138;
ZParser.LP = 139;
ZParser.L = 140;
ZParser.ELP = 141;
ZParser.EL = 142;
ZParser.ERP = 143;
ZParser.ER = 144;
ZParser.SRP = 145;
ZParser.SR = 146;
ZParser.EREP = 147;
ZParser.ERE = 148;
ZParser.SREP = 149;
ZParser.SRE = 150;
ZParser.ES = 151;
ZParser.SS = 152;
ZParser.UNKNOWN = 153;
ZParser.NLCHAR = 154;

ZParser.RULE_specification = 0;
ZParser.RULE_section = 1;
ZParser.RULE_paragraph = 2;
ZParser.RULE_freetype = 3;
ZParser.RULE_branch = 4;
ZParser.RULE_formals = 5;
ZParser.RULE_predicate = 6;
ZParser.RULE_expression = 7;
ZParser.RULE_schemaText = 8;
ZParser.RULE_declPart = 9;
ZParser.RULE_declNameExpression = 10;
ZParser.RULE_declaration = 11;
ZParser.RULE_operatorTemplate = 12;
ZParser.RULE_categoryTemplate = 13;
ZParser.RULE_prec = 14;
ZParser.RULE_assoc = 15;
ZParser.RULE_template = 16;
ZParser.RULE_prefixTemplate = 17;
ZParser.RULE_postfixTemplate = 18;
ZParser.RULE_infixTemplate = 19;
ZParser.RULE_nofixTemplate = 20;
ZParser.RULE_declName = 21;
ZParser.RULE_refName = 22;
ZParser.RULE_opName = 23;
ZParser.RULE_prefixName = 24;
ZParser.RULE_postfixName = 25;
ZParser.RULE_infixName = 26;
ZParser.RULE_nofixName = 27;
ZParser.RULE_genName = 28;
ZParser.RULE_prefixGenName = 29;
ZParser.RULE_postfixGenName = 30;
ZParser.RULE_infixGenName = 31;
ZParser.RULE_nofixGenName = 32;
ZParser.RULE_relation = 33;
ZParser.RULE_prefixRel = 34;
ZParser.RULE_postfixRel = 35;
ZParser.RULE_infixRel = 36;
ZParser.RULE_nofixRel = 37;
ZParser.RULE_application = 38;
ZParser.RULE_prefixApp = 39;
ZParser.RULE_postfixApp = 40;
ZParser.RULE_infixApp = 41;
ZParser.RULE_nofixApp = 42;
ZParser.RULE_expSep = 43;
ZParser.RULE_expressionList = 44;


function SpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_specification;
    return this;
}

SpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecificationContext.prototype.constructor = SpecificationContext;

SpecificationContext.prototype.EOF = function() {
    return this.getToken(ZParser.EOF, 0);
};

SpecificationContext.prototype.TEXT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.TEXT);
    } else {
        return this.getToken(ZParser.TEXT, i);
    }
};


SpecificationContext.prototype.section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SectionContext);
    } else {
        return this.getTypedRuleContext(SectionContext,i);
    }
};

SpecificationContext.prototype.paragraph = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParagraphContext);
    } else {
        return this.getTypedRuleContext(ParagraphContext,i);
    }
};

SpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSpecification(this);
	}
};

SpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSpecification(this);
	}
};




ZParser.SpecificationContext = SpecificationContext;

ZParser.prototype.specification = function() {

    var localctx = new SpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ZParser.RULE_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 95;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.ZED) | (1 << ZParser.SCH) | (1 << ZParser.AX) | (1 << ZParser.TEXT))) !== 0)) {
            this.state = 93;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
            switch(la_) {
            case 1:
                this.state = 90;
                this.match(ZParser.TEXT);
                break;

            case 2:
                this.state = 91;
                this.section();
                break;

            case 3:
                this.state = 92;
                this.paragraph();
                break;

            }
            this.state = 97;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 98;
        this.match(ZParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_section;
    return this;
}

SectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SectionContext.prototype.constructor = SectionContext;


 
SectionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BaseSectionContext(parser, ctx) {
	SectionContext.call(this, parser);
    SectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BaseSectionContext.prototype = Object.create(SectionContext.prototype);
BaseSectionContext.prototype.constructor = BaseSectionContext;

ZParser.BaseSectionContext = BaseSectionContext;

BaseSectionContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

BaseSectionContext.prototype.SECTION = function() {
    return this.getToken(ZParser.SECTION, 0);
};

BaseSectionContext.prototype.NAME = function() {
    return this.getToken(ZParser.NAME, 0);
};

BaseSectionContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

BaseSectionContext.prototype.paragraph = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParagraphContext);
    } else {
        return this.getTypedRuleContext(ParagraphContext,i);
    }
};
BaseSectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterBaseSection(this);
	}
};

BaseSectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitBaseSection(this);
	}
};


function InheritingSectionContext(parser, ctx) {
	SectionContext.call(this, parser);
    SectionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InheritingSectionContext.prototype = Object.create(SectionContext.prototype);
InheritingSectionContext.prototype.constructor = InheritingSectionContext;

ZParser.InheritingSectionContext = InheritingSectionContext;

InheritingSectionContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

InheritingSectionContext.prototype.SECTION = function() {
    return this.getToken(ZParser.SECTION, 0);
};

InheritingSectionContext.prototype.NAME = function() {
    return this.getToken(ZParser.NAME, 0);
};

InheritingSectionContext.prototype.PARENTS = function() {
    return this.getToken(ZParser.PARENTS, 0);
};

InheritingSectionContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

InheritingSectionContext.prototype.formals = function() {
    return this.getTypedRuleContext(FormalsContext,0);
};

InheritingSectionContext.prototype.paragraph = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParagraphContext);
    } else {
        return this.getTypedRuleContext(ParagraphContext,i);
    }
};
InheritingSectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInheritingSection(this);
	}
};

InheritingSectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInheritingSection(this);
	}
};



ZParser.SectionContext = SectionContext;

ZParser.prototype.section = function() {

    var localctx = new SectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ZParser.RULE_section);
    var _la = 0; // Token type
    try {
        this.state = 124;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InheritingSectionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 100;
            this.match(ZParser.ZED);
            this.state = 101;
            this.match(ZParser.SECTION);
            this.state = 102;
            this.match(ZParser.NAME);
            this.state = 103;
            this.match(ZParser.PARENTS);
            this.state = 105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ZParser.NAME) {
                this.state = 104;
                this.formals();
            }

            this.state = 107;
            this.match(ZParser.END);
            this.state = 111;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 108;
                    this.paragraph(); 
                }
                this.state = 113;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
            }

            break;

        case 2:
            localctx = new BaseSectionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 114;
            this.match(ZParser.ZED);
            this.state = 115;
            this.match(ZParser.SECTION);
            this.state = 116;
            this.match(ZParser.NAME);
            this.state = 117;
            this.match(ZParser.END);
            this.state = 121;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 118;
                    this.paragraph(); 
                }
                this.state = 123;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParagraphContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_paragraph;
    return this;
}

ParagraphContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParagraphContext.prototype.constructor = ParagraphContext;


 
ParagraphContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConjectureParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConjectureParagraphContext.prototype = Object.create(ParagraphContext.prototype);
ConjectureParagraphContext.prototype.constructor = ConjectureParagraphContext;

ZParser.ConjectureParagraphContext = ConjectureParagraphContext;

ConjectureParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

ConjectureParagraphContext.prototype.CONJECTURE = function() {
    return this.getToken(ZParser.CONJECTURE, 0);
};

ConjectureParagraphContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

ConjectureParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};
ConjectureParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterConjectureParagraph(this);
	}
};

ConjectureParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitConjectureParagraph(this);
	}
};


function GenericHorizontalDefinitionParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericHorizontalDefinitionParagraphContext.prototype = Object.create(ParagraphContext.prototype);
GenericHorizontalDefinitionParagraphContext.prototype.constructor = GenericHorizontalDefinitionParagraphContext;

ZParser.GenericHorizontalDefinitionParagraphContext = GenericHorizontalDefinitionParagraphContext;

GenericHorizontalDefinitionParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

GenericHorizontalDefinitionParagraphContext.prototype.declName = function() {
    return this.getTypedRuleContext(DeclNameContext,0);
};

GenericHorizontalDefinitionParagraphContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

GenericHorizontalDefinitionParagraphContext.prototype.formals = function() {
    return this.getTypedRuleContext(FormalsContext,0);
};

GenericHorizontalDefinitionParagraphContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};

GenericHorizontalDefinitionParagraphContext.prototype.DEFINE_EQUAL = function() {
    return this.getToken(ZParser.DEFINE_EQUAL, 0);
};

GenericHorizontalDefinitionParagraphContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GenericHorizontalDefinitionParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};
GenericHorizontalDefinitionParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericHorizontalDefinitionParagraph(this);
	}
};

GenericHorizontalDefinitionParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericHorizontalDefinitionParagraph(this);
	}
};


function HorizontalDefinitionParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HorizontalDefinitionParagraphContext.prototype = Object.create(ParagraphContext.prototype);
HorizontalDefinitionParagraphContext.prototype.constructor = HorizontalDefinitionParagraphContext;

ZParser.HorizontalDefinitionParagraphContext = HorizontalDefinitionParagraphContext;

HorizontalDefinitionParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

HorizontalDefinitionParagraphContext.prototype.declNameExpression = function() {
    return this.getTypedRuleContext(DeclNameExpressionContext,0);
};

HorizontalDefinitionParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

HorizontalDefinitionParagraphContext.prototype.NL = function() {
    return this.getToken(ZParser.NL, 0);
};
HorizontalDefinitionParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterHorizontalDefinitionParagraph(this);
	}
};

HorizontalDefinitionParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitHorizontalDefinitionParagraph(this);
	}
};


function GenericSchemaDefinitionParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericSchemaDefinitionParagraphContext.prototype = Object.create(ParagraphContext.prototype);
GenericSchemaDefinitionParagraphContext.prototype.constructor = GenericSchemaDefinitionParagraphContext;

ZParser.GenericSchemaDefinitionParagraphContext = GenericSchemaDefinitionParagraphContext;

GenericSchemaDefinitionParagraphContext.prototype.SCH = function() {
    return this.getToken(ZParser.SCH, 0);
};

GenericSchemaDefinitionParagraphContext.prototype.GEN = function() {
    return this.getToken(ZParser.GEN, 0);
};

GenericSchemaDefinitionParagraphContext.prototype.NAME = function() {
    return this.getToken(ZParser.NAME, 0);
};

GenericSchemaDefinitionParagraphContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

GenericSchemaDefinitionParagraphContext.prototype.formals = function() {
    return this.getTypedRuleContext(FormalsContext,0);
};

GenericSchemaDefinitionParagraphContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};

GenericSchemaDefinitionParagraphContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

GenericSchemaDefinitionParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

GenericSchemaDefinitionParagraphContext.prototype.NL = function() {
    return this.getToken(ZParser.NL, 0);
};
GenericSchemaDefinitionParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericSchemaDefinitionParagraph(this);
	}
};

GenericSchemaDefinitionParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericSchemaDefinitionParagraph(this);
	}
};


function GenericOperatorDefinitionParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericOperatorDefinitionParagraphContext.prototype = Object.create(ParagraphContext.prototype);
GenericOperatorDefinitionParagraphContext.prototype.constructor = GenericOperatorDefinitionParagraphContext;

ZParser.GenericOperatorDefinitionParagraphContext = GenericOperatorDefinitionParagraphContext;

GenericOperatorDefinitionParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

GenericOperatorDefinitionParagraphContext.prototype.genName = function() {
    return this.getTypedRuleContext(GenNameContext,0);
};

GenericOperatorDefinitionParagraphContext.prototype.DEFINE_EQUAL = function() {
    return this.getToken(ZParser.DEFINE_EQUAL, 0);
};

GenericOperatorDefinitionParagraphContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GenericOperatorDefinitionParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};
GenericOperatorDefinitionParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericOperatorDefinitionParagraph(this);
	}
};

GenericOperatorDefinitionParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericOperatorDefinitionParagraph(this);
	}
};


function GenericAxiomaticDescriptionParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericAxiomaticDescriptionParagraphContext.prototype = Object.create(ParagraphContext.prototype);
GenericAxiomaticDescriptionParagraphContext.prototype.constructor = GenericAxiomaticDescriptionParagraphContext;

ZParser.GenericAxiomaticDescriptionParagraphContext = GenericAxiomaticDescriptionParagraphContext;

GenericAxiomaticDescriptionParagraphContext.prototype.AX = function() {
    return this.getToken(ZParser.AX, 0);
};

GenericAxiomaticDescriptionParagraphContext.prototype.GEN = function() {
    return this.getToken(ZParser.GEN, 0);
};

GenericAxiomaticDescriptionParagraphContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

GenericAxiomaticDescriptionParagraphContext.prototype.formals = function() {
    return this.getTypedRuleContext(FormalsContext,0);
};

GenericAxiomaticDescriptionParagraphContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};

GenericAxiomaticDescriptionParagraphContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

GenericAxiomaticDescriptionParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

GenericAxiomaticDescriptionParagraphContext.prototype.NL = function() {
    return this.getToken(ZParser.NL, 0);
};
GenericAxiomaticDescriptionParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericAxiomaticDescriptionParagraph(this);
	}
};

GenericAxiomaticDescriptionParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericAxiomaticDescriptionParagraph(this);
	}
};


function OperatorTemplateParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OperatorTemplateParagraphContext.prototype = Object.create(ParagraphContext.prototype);
OperatorTemplateParagraphContext.prototype.constructor = OperatorTemplateParagraphContext;

ZParser.OperatorTemplateParagraphContext = OperatorTemplateParagraphContext;

OperatorTemplateParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

OperatorTemplateParagraphContext.prototype.operatorTemplate = function() {
    return this.getTypedRuleContext(OperatorTemplateContext,0);
};

OperatorTemplateParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};
OperatorTemplateParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterOperatorTemplateParagraph(this);
	}
};

OperatorTemplateParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitOperatorTemplateParagraph(this);
	}
};


function GenericConjectureParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericConjectureParagraphContext.prototype = Object.create(ParagraphContext.prototype);
GenericConjectureParagraphContext.prototype.constructor = GenericConjectureParagraphContext;

ZParser.GenericConjectureParagraphContext = GenericConjectureParagraphContext;

GenericConjectureParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

GenericConjectureParagraphContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

GenericConjectureParagraphContext.prototype.formals = function() {
    return this.getTypedRuleContext(FormalsContext,0);
};

GenericConjectureParagraphContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};

GenericConjectureParagraphContext.prototype.CONJECTURE = function() {
    return this.getToken(ZParser.CONJECTURE, 0);
};

GenericConjectureParagraphContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

GenericConjectureParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};
GenericConjectureParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericConjectureParagraph(this);
	}
};

GenericConjectureParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericConjectureParagraph(this);
	}
};


function GivenTypesParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GivenTypesParagraphContext.prototype = Object.create(ParagraphContext.prototype);
GivenTypesParagraphContext.prototype.constructor = GivenTypesParagraphContext;

ZParser.GivenTypesParagraphContext = GivenTypesParagraphContext;

GivenTypesParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

GivenTypesParagraphContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

GivenTypesParagraphContext.prototype.formals = function() {
    return this.getTypedRuleContext(FormalsContext,0);
};

GivenTypesParagraphContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};

GivenTypesParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

GivenTypesParagraphContext.prototype.NL = function() {
    return this.getToken(ZParser.NL, 0);
};
GivenTypesParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGivenTypesParagraph(this);
	}
};

GivenTypesParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGivenTypesParagraph(this);
	}
};


function SchemaDefinitionParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaDefinitionParagraphContext.prototype = Object.create(ParagraphContext.prototype);
SchemaDefinitionParagraphContext.prototype.constructor = SchemaDefinitionParagraphContext;

ZParser.SchemaDefinitionParagraphContext = SchemaDefinitionParagraphContext;

SchemaDefinitionParagraphContext.prototype.SCH = function() {
    return this.getToken(ZParser.SCH, 0);
};

SchemaDefinitionParagraphContext.prototype.NAME = function() {
    return this.getToken(ZParser.NAME, 0);
};

SchemaDefinitionParagraphContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

SchemaDefinitionParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

SchemaDefinitionParagraphContext.prototype.NL = function() {
    return this.getToken(ZParser.NL, 0);
};
SchemaDefinitionParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaDefinitionParagraph(this);
	}
};

SchemaDefinitionParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaDefinitionParagraph(this);
	}
};


function FreeTypesParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FreeTypesParagraphContext.prototype = Object.create(ParagraphContext.prototype);
FreeTypesParagraphContext.prototype.constructor = FreeTypesParagraphContext;

ZParser.FreeTypesParagraphContext = FreeTypesParagraphContext;

FreeTypesParagraphContext.prototype.ZED = function() {
    return this.getToken(ZParser.ZED, 0);
};

FreeTypesParagraphContext.prototype.freetype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FreetypeContext);
    } else {
        return this.getTypedRuleContext(FreetypeContext,i);
    }
};

FreeTypesParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};

FreeTypesParagraphContext.prototype.AMPERSAND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.AMPERSAND);
    } else {
        return this.getToken(ZParser.AMPERSAND, i);
    }
};

FreeTypesParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterFreeTypesParagraph(this);
	}
};

FreeTypesParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitFreeTypesParagraph(this);
	}
};


function AxiomaticDescriptionParagraphContext(parser, ctx) {
	ParagraphContext.call(this, parser);
    ParagraphContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AxiomaticDescriptionParagraphContext.prototype = Object.create(ParagraphContext.prototype);
AxiomaticDescriptionParagraphContext.prototype.constructor = AxiomaticDescriptionParagraphContext;

ZParser.AxiomaticDescriptionParagraphContext = AxiomaticDescriptionParagraphContext;

AxiomaticDescriptionParagraphContext.prototype.AX = function() {
    return this.getToken(ZParser.AX, 0);
};

AxiomaticDescriptionParagraphContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

AxiomaticDescriptionParagraphContext.prototype.END = function() {
    return this.getToken(ZParser.END, 0);
};
AxiomaticDescriptionParagraphContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterAxiomaticDescriptionParagraph(this);
	}
};

AxiomaticDescriptionParagraphContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitAxiomaticDescriptionParagraph(this);
	}
};



ZParser.ParagraphContext = ParagraphContext;

ZParser.prototype.paragraph = function() {

    var localctx = new ParagraphContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ZParser.RULE_paragraph);
    var _la = 0; // Token type
    try {
        this.state = 220;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GivenTypesParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 126;
            this.match(ZParser.ZED);
            this.state = 127;
            this.match(ZParser.LEFT_SQUARE_BRACKET);
            this.state = 128;
            this.formals();
            this.state = 129;
            this.match(ZParser.RIGHT_SQUARE_BRACKET);
            this.state = 131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ZParser.NL) {
                this.state = 130;
                this.match(ZParser.NL);
            }

            this.state = 133;
            this.match(ZParser.END);
            break;

        case 2:
            localctx = new AxiomaticDescriptionParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 135;
            this.match(ZParser.AX);
            this.state = 136;
            this.schemaText();
            this.state = 137;
            this.match(ZParser.END);
            break;

        case 3:
            localctx = new SchemaDefinitionParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 139;
            this.match(ZParser.SCH);
            this.state = 140;
            this.match(ZParser.NAME);
            this.state = 142;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 141;
                this.match(ZParser.NL);

            }
            this.state = 144;
            this.schemaText();
            this.state = 145;
            this.match(ZParser.END);
            break;

        case 4:
            localctx = new GenericAxiomaticDescriptionParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 147;
            this.match(ZParser.AX);
            this.state = 148;
            this.match(ZParser.GEN);
            this.state = 149;
            this.match(ZParser.LEFT_SQUARE_BRACKET);
            this.state = 150;
            this.formals();
            this.state = 151;
            this.match(ZParser.RIGHT_SQUARE_BRACKET);
            this.state = 153;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            if(la_===1) {
                this.state = 152;
                this.match(ZParser.NL);

            }
            this.state = 155;
            this.schemaText();
            this.state = 156;
            this.match(ZParser.END);
            break;

        case 5:
            localctx = new GenericSchemaDefinitionParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 158;
            this.match(ZParser.SCH);
            this.state = 159;
            this.match(ZParser.GEN);
            this.state = 160;
            this.match(ZParser.NAME);
            this.state = 161;
            this.match(ZParser.LEFT_SQUARE_BRACKET);
            this.state = 162;
            this.formals();
            this.state = 163;
            this.match(ZParser.RIGHT_SQUARE_BRACKET);
            this.state = 165;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
            if(la_===1) {
                this.state = 164;
                this.match(ZParser.NL);

            }
            this.state = 167;
            this.schemaText();
            this.state = 168;
            this.match(ZParser.END);
            break;

        case 6:
            localctx = new HorizontalDefinitionParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 170;
            this.match(ZParser.ZED);
            this.state = 172;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ZParser.NL) {
                this.state = 171;
                this.match(ZParser.NL);
            }

            this.state = 174;
            this.declNameExpression();
            this.state = 175;
            this.match(ZParser.END);
            break;

        case 7:
            localctx = new GenericHorizontalDefinitionParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 177;
            this.match(ZParser.ZED);
            this.state = 178;
            this.declName();
            this.state = 179;
            this.match(ZParser.LEFT_SQUARE_BRACKET);
            this.state = 180;
            this.formals();
            this.state = 181;
            this.match(ZParser.RIGHT_SQUARE_BRACKET);
            this.state = 182;
            this.match(ZParser.DEFINE_EQUAL);
            this.state = 183;
            this.expression(0);
            this.state = 184;
            this.match(ZParser.END);
            break;

        case 8:
            localctx = new GenericOperatorDefinitionParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 186;
            this.match(ZParser.ZED);
            this.state = 187;
            this.genName();
            this.state = 188;
            this.match(ZParser.DEFINE_EQUAL);
            this.state = 189;
            this.expression(0);
            this.state = 190;
            this.match(ZParser.END);
            break;

        case 9:
            localctx = new FreeTypesParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 192;
            this.match(ZParser.ZED);
            this.state = 193;
            this.freetype();
            this.state = 198;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ZParser.AMPERSAND) {
                this.state = 194;
                this.match(ZParser.AMPERSAND);
                this.state = 195;
                this.freetype();
                this.state = 200;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 201;
            this.match(ZParser.END);
            break;

        case 10:
            localctx = new ConjectureParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 203;
            this.match(ZParser.ZED);
            this.state = 204;
            this.match(ZParser.CONJECTURE);
            this.state = 205;
            this.predicate(0);
            this.state = 206;
            this.match(ZParser.END);
            break;

        case 11:
            localctx = new GenericConjectureParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 208;
            this.match(ZParser.ZED);
            this.state = 209;
            this.match(ZParser.LEFT_SQUARE_BRACKET);
            this.state = 210;
            this.formals();
            this.state = 211;
            this.match(ZParser.RIGHT_SQUARE_BRACKET);
            this.state = 212;
            this.match(ZParser.CONJECTURE);
            this.state = 213;
            this.predicate(0);
            this.state = 214;
            this.match(ZParser.END);
            break;

        case 12:
            localctx = new OperatorTemplateParagraphContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 216;
            this.match(ZParser.ZED);
            this.state = 217;
            this.operatorTemplate();
            this.state = 218;
            this.match(ZParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FreetypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_freetype;
    return this;
}

FreetypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FreetypeContext.prototype.constructor = FreetypeContext;

FreetypeContext.prototype.NAME = function() {
    return this.getToken(ZParser.NAME, 0);
};

FreetypeContext.prototype.FREE_EQUALS = function() {
    return this.getToken(ZParser.FREE_EQUALS, 0);
};

FreetypeContext.prototype.branch = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BranchContext);
    } else {
        return this.getTypedRuleContext(BranchContext,i);
    }
};

FreetypeContext.prototype.VERTICAL_LINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.VERTICAL_LINE);
    } else {
        return this.getToken(ZParser.VERTICAL_LINE, i);
    }
};


FreetypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterFreetype(this);
	}
};

FreetypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitFreetype(this);
	}
};




ZParser.FreetypeContext = FreetypeContext;

ZParser.prototype.freetype = function() {

    var localctx = new FreetypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ZParser.RULE_freetype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 222;
        this.match(ZParser.NAME);
        this.state = 223;
        this.match(ZParser.FREE_EQUALS);
        this.state = 224;
        this.branch();
        this.state = 229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ZParser.VERTICAL_LINE) {
            this.state = 225;
            this.match(ZParser.VERTICAL_LINE);
            this.state = 226;
            this.branch();
            this.state = 231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BranchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_branch;
    return this;
}

BranchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BranchContext.prototype.constructor = BranchContext;

BranchContext.prototype.declName = function() {
    return this.getTypedRuleContext(DeclNameContext,0);
};

BranchContext.prototype.LEFT_DOUBLE_ANGLE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_DOUBLE_ANGLE_BRACKET, 0);
};

BranchContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BranchContext.prototype.RIGHT_DOUBLE_ANGLE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_DOUBLE_ANGLE_BRACKET, 0);
};

BranchContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterBranch(this);
	}
};

BranchContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitBranch(this);
	}
};




ZParser.BranchContext = BranchContext;

ZParser.prototype.branch = function() {

    var localctx = new BranchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ZParser.RULE_branch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 232;
        this.declName();
        this.state = 237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ZParser.LEFT_DOUBLE_ANGLE_BRACKET) {
            this.state = 233;
            this.match(ZParser.LEFT_DOUBLE_ANGLE_BRACKET);
            this.state = 234;
            this.expression(0);
            this.state = 235;
            this.match(ZParser.RIGHT_DOUBLE_ANGLE_BRACKET);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_formals;
    return this;
}

FormalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalsContext.prototype.constructor = FormalsContext;

FormalsContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.NAME);
    } else {
        return this.getToken(ZParser.NAME, i);
    }
};


FormalsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.COMMA);
    } else {
        return this.getToken(ZParser.COMMA, i);
    }
};


FormalsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterFormals(this);
	}
};

FormalsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitFormals(this);
	}
};




ZParser.FormalsContext = FormalsContext;

ZParser.prototype.formals = function() {

    var localctx = new FormalsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ZParser.RULE_formals);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 239;
        this.match(ZParser.NAME);
        this.state = 244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ZParser.COMMA) {
            this.state = 240;
            this.match(ZParser.COMMA);
            this.state = 241;
            this.match(ZParser.NAME);
            this.state = 246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExistentialQuantificationPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistentialQuantificationPredicateContext.prototype = Object.create(PredicateContext.prototype);
ExistentialQuantificationPredicateContext.prototype.constructor = ExistentialQuantificationPredicateContext;

ZParser.ExistentialQuantificationPredicateContext = ExistentialQuantificationPredicateContext;

ExistentialQuantificationPredicateContext.prototype.THERE_EXISTS = function() {
    return this.getToken(ZParser.THERE_EXISTS, 0);
};

ExistentialQuantificationPredicateContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

ExistentialQuantificationPredicateContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

ExistentialQuantificationPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
ExistentialQuantificationPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterExistentialQuantificationPredicate(this);
	}
};

ExistentialQuantificationPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitExistentialQuantificationPredicate(this);
	}
};


function ConjunctionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConjunctionPredicateContext.prototype = Object.create(PredicateContext.prototype);
ConjunctionPredicateContext.prototype.constructor = ConjunctionPredicateContext;

ZParser.ConjunctionPredicateContext = ConjunctionPredicateContext;

ConjunctionPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

ConjunctionPredicateContext.prototype.LOGICAL_AND = function() {
    return this.getToken(ZParser.LOGICAL_AND, 0);
};
ConjunctionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterConjunctionPredicate(this);
	}
};

ConjunctionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitConjunctionPredicate(this);
	}
};


function EquivalencePredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EquivalencePredicateContext.prototype = Object.create(PredicateContext.prototype);
EquivalencePredicateContext.prototype.constructor = EquivalencePredicateContext;

ZParser.EquivalencePredicateContext = EquivalencePredicateContext;

EquivalencePredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

EquivalencePredicateContext.prototype.LEFT_RIGHT_DOUBLE_ARROW = function() {
    return this.getToken(ZParser.LEFT_RIGHT_DOUBLE_ARROW, 0);
};
EquivalencePredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterEquivalencePredicate(this);
	}
};

EquivalencePredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitEquivalencePredicate(this);
	}
};


function NewlineConjunctionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewlineConjunctionPredicateContext.prototype = Object.create(PredicateContext.prototype);
NewlineConjunctionPredicateContext.prototype.constructor = NewlineConjunctionPredicateContext;

ZParser.NewlineConjunctionPredicateContext = NewlineConjunctionPredicateContext;

NewlineConjunctionPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

NewlineConjunctionPredicateContext.prototype.NL = function() {
    return this.getToken(ZParser.NL, 0);
};
NewlineConjunctionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNewlineConjunctionPredicate(this);
	}
};

NewlineConjunctionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNewlineConjunctionPredicate(this);
	}
};


function ImplicationPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImplicationPredicateContext.prototype = Object.create(PredicateContext.prototype);
ImplicationPredicateContext.prototype.constructor = ImplicationPredicateContext;

ZParser.ImplicationPredicateContext = ImplicationPredicateContext;

ImplicationPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

ImplicationPredicateContext.prototype.RIGHTWARDS_DOUBLE_ARROW = function() {
    return this.getToken(ZParser.RIGHTWARDS_DOUBLE_ARROW, 0);
};
ImplicationPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterImplicationPredicate(this);
	}
};

ImplicationPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitImplicationPredicate(this);
	}
};


function RelationOperatorApplicationPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationOperatorApplicationPredicateContext.prototype = Object.create(PredicateContext.prototype);
RelationOperatorApplicationPredicateContext.prototype.constructor = RelationOperatorApplicationPredicateContext;

ZParser.RelationOperatorApplicationPredicateContext = RelationOperatorApplicationPredicateContext;

RelationOperatorApplicationPredicateContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};
RelationOperatorApplicationPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterRelationOperatorApplicationPredicate(this);
	}
};

RelationOperatorApplicationPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitRelationOperatorApplicationPredicate(this);
	}
};


function UniversalQuantificationPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UniversalQuantificationPredicateContext.prototype = Object.create(PredicateContext.prototype);
UniversalQuantificationPredicateContext.prototype.constructor = UniversalQuantificationPredicateContext;

ZParser.UniversalQuantificationPredicateContext = UniversalQuantificationPredicateContext;

UniversalQuantificationPredicateContext.prototype.FOR_ALL = function() {
    return this.getToken(ZParser.FOR_ALL, 0);
};

UniversalQuantificationPredicateContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

UniversalQuantificationPredicateContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

UniversalQuantificationPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
UniversalQuantificationPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterUniversalQuantificationPredicate(this);
	}
};

UniversalQuantificationPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitUniversalQuantificationPredicate(this);
	}
};


function TruthPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TruthPredicateContext.prototype = Object.create(PredicateContext.prototype);
TruthPredicateContext.prototype.constructor = TruthPredicateContext;

ZParser.TruthPredicateContext = TruthPredicateContext;

TruthPredicateContext.prototype.TRUE = function() {
    return this.getToken(ZParser.TRUE, 0);
};
TruthPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterTruthPredicate(this);
	}
};

TruthPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitTruthPredicate(this);
	}
};


function FalsityPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FalsityPredicateContext.prototype = Object.create(PredicateContext.prototype);
FalsityPredicateContext.prototype.constructor = FalsityPredicateContext;

ZParser.FalsityPredicateContext = FalsityPredicateContext;

FalsityPredicateContext.prototype.FALSE = function() {
    return this.getToken(ZParser.FALSE, 0);
};
FalsityPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterFalsityPredicate(this);
	}
};

FalsityPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitFalsityPredicate(this);
	}
};


function ParenthesizedPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedPredicateContext.prototype = Object.create(PredicateContext.prototype);
ParenthesizedPredicateContext.prototype.constructor = ParenthesizedPredicateContext;

ZParser.ParenthesizedPredicateContext = ParenthesizedPredicateContext;

ParenthesizedPredicateContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

ParenthesizedPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

ParenthesizedPredicateContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};
ParenthesizedPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterParenthesizedPredicate(this);
	}
};

ParenthesizedPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitParenthesizedPredicate(this);
	}
};


function DisjunctionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DisjunctionPredicateContext.prototype = Object.create(PredicateContext.prototype);
DisjunctionPredicateContext.prototype.constructor = DisjunctionPredicateContext;

ZParser.DisjunctionPredicateContext = DisjunctionPredicateContext;

DisjunctionPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

DisjunctionPredicateContext.prototype.LOGICAL_OR = function() {
    return this.getToken(ZParser.LOGICAL_OR, 0);
};
DisjunctionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterDisjunctionPredicate(this);
	}
};

DisjunctionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitDisjunctionPredicate(this);
	}
};


function SemicolonConjunctionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SemicolonConjunctionPredicateContext.prototype = Object.create(PredicateContext.prototype);
SemicolonConjunctionPredicateContext.prototype.constructor = SemicolonConjunctionPredicateContext;

ZParser.SemicolonConjunctionPredicateContext = SemicolonConjunctionPredicateContext;

SemicolonConjunctionPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

SemicolonConjunctionPredicateContext.prototype.SEMICOLON = function() {
    return this.getToken(ZParser.SEMICOLON, 0);
};
SemicolonConjunctionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSemicolonConjunctionPredicate(this);
	}
};

SemicolonConjunctionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSemicolonConjunctionPredicate(this);
	}
};


function SchemaPredicatePredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaPredicatePredicateContext.prototype = Object.create(PredicateContext.prototype);
SchemaPredicatePredicateContext.prototype.constructor = SchemaPredicatePredicateContext;

ZParser.SchemaPredicatePredicateContext = SchemaPredicatePredicateContext;

SchemaPredicatePredicateContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SchemaPredicatePredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaPredicatePredicate(this);
	}
};

SchemaPredicatePredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaPredicatePredicate(this);
	}
};


function UniqueExistentialQuantificationPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UniqueExistentialQuantificationPredicateContext.prototype = Object.create(PredicateContext.prototype);
UniqueExistentialQuantificationPredicateContext.prototype.constructor = UniqueExistentialQuantificationPredicateContext;

ZParser.UniqueExistentialQuantificationPredicateContext = UniqueExistentialQuantificationPredicateContext;

UniqueExistentialQuantificationPredicateContext.prototype.UNIQUE_EXISTS = function() {
    return this.getToken(ZParser.UNIQUE_EXISTS, 0);
};

UniqueExistentialQuantificationPredicateContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

UniqueExistentialQuantificationPredicateContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

UniqueExistentialQuantificationPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
UniqueExistentialQuantificationPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterUniqueExistentialQuantificationPredicate(this);
	}
};

UniqueExistentialQuantificationPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitUniqueExistentialQuantificationPredicate(this);
	}
};


function NegationPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NegationPredicateContext.prototype = Object.create(PredicateContext.prototype);
NegationPredicateContext.prototype.constructor = NegationPredicateContext;

ZParser.NegationPredicateContext = NegationPredicateContext;

NegationPredicateContext.prototype.NOT_SIGN = function() {
    return this.getToken(ZParser.NOT_SIGN, 0);
};

NegationPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
NegationPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNegationPredicate(this);
	}
};

NegationPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNegationPredicate(this);
	}
};



ZParser.prototype.predicate = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PredicateContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 12;
    this.enterRecursionRule(localctx, 12, ZParser.RULE_predicate, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 273;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UniversalQuantificationPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 248;
            this.match(ZParser.FOR_ALL);
            this.state = 249;
            this.schemaText();
            this.state = 250;
            this.match(ZParser.SPOT);
            this.state = 251;
            this.predicate(13);
            break;

        case 2:
            localctx = new ExistentialQuantificationPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 253;
            this.match(ZParser.THERE_EXISTS);
            this.state = 254;
            this.schemaText();
            this.state = 255;
            this.match(ZParser.SPOT);
            this.state = 256;
            this.predicate(12);
            break;

        case 3:
            localctx = new UniqueExistentialQuantificationPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 258;
            this.match(ZParser.UNIQUE_EXISTS);
            this.state = 259;
            this.schemaText();
            this.state = 260;
            this.match(ZParser.SPOT);
            this.state = 261;
            this.predicate(11);
            break;

        case 4:
            localctx = new NegationPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 263;
            this.match(ZParser.NOT_SIGN);
            this.state = 264;
            this.predicate(6);
            break;

        case 5:
            localctx = new RelationOperatorApplicationPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 265;
            this.relation();
            break;

        case 6:
            localctx = new SchemaPredicatePredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 266;
            this.expression(0);
            break;

        case 7:
            localctx = new TruthPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 267;
            this.match(ZParser.TRUE);
            break;

        case 8:
            localctx = new FalsityPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 268;
            this.match(ZParser.FALSE);
            break;

        case 9:
            localctx = new ParenthesizedPredicateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 269;
            this.match(ZParser.LEFT_PARENTHESIS);
            this.state = 270;
            this.predicate(0);
            this.state = 271;
            this.match(ZParser.RIGHT_PARENTHESIS);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 295;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 293;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NewlineConjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
                    this.state = 275;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 276;
                    this.match(ZParser.NL);
                    this.state = 277;
                    this.predicate(16);
                    break;

                case 2:
                    localctx = new SemicolonConjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
                    this.state = 278;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 279;
                    this.match(ZParser.SEMICOLON);
                    this.state = 280;
                    this.predicate(15);
                    break;

                case 3:
                    localctx = new EquivalencePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
                    this.state = 281;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 282;
                    this.match(ZParser.LEFT_RIGHT_DOUBLE_ARROW);
                    this.state = 283;
                    this.predicate(11);
                    break;

                case 4:
                    localctx = new ImplicationPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
                    this.state = 284;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 285;
                    this.match(ZParser.RIGHTWARDS_DOUBLE_ARROW);
                    this.state = 286;
                    this.predicate(10);
                    break;

                case 5:
                    localctx = new DisjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
                    this.state = 287;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 288;
                    this.match(ZParser.LOGICAL_OR);
                    this.state = 289;
                    this.predicate(9);
                    break;

                case 6:
                    localctx = new ConjunctionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_predicate);
                    this.state = 290;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 291;
                    this.match(ZParser.LOGICAL_AND);
                    this.state = 292;
                    this.predicate(8);
                    break;

                } 
            }
            this.state = 297;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SetComprehensionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetComprehensionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SetComprehensionExpressionContext.prototype.constructor = SetComprehensionExpressionContext;

ZParser.SetComprehensionExpressionContext = SetComprehensionExpressionContext;

SetComprehensionExpressionContext.prototype.LEFT_CURLY_BRACKET = function() {
    return this.getToken(ZParser.LEFT_CURLY_BRACKET, 0);
};

SetComprehensionExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

SetComprehensionExpressionContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

SetComprehensionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SetComprehensionExpressionContext.prototype.RIGHT_CURLY_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_CURLY_BRACKET, 0);
};
SetComprehensionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSetComprehensionExpression(this);
	}
};

SetComprehensionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSetComprehensionExpression(this);
	}
};


function SchemaEquivalenceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaEquivalenceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaEquivalenceExpressionContext.prototype.constructor = SchemaEquivalenceExpressionContext;

ZParser.SchemaEquivalenceExpressionContext = SchemaEquivalenceExpressionContext;

SchemaEquivalenceExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SchemaEquivalenceExpressionContext.prototype.LEFT_RIGHT_DOUBLE_ARROW = function() {
    return this.getToken(ZParser.LEFT_RIGHT_DOUBLE_ARROW, 0);
};
SchemaEquivalenceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaEquivalenceExpression(this);
	}
};

SchemaEquivalenceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaEquivalenceExpression(this);
	}
};


function NofixApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NofixApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NofixApplicationExpressionContext.prototype.constructor = NofixApplicationExpressionContext;

ZParser.NofixApplicationExpressionContext = NofixApplicationExpressionContext;

NofixApplicationExpressionContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

NofixApplicationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NofixApplicationExpressionContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

NofixApplicationExpressionContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

NofixApplicationExpressionContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

NofixApplicationExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
NofixApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNofixApplicationExpression(this);
	}
};

NofixApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNofixApplicationExpression(this);
	}
};


function SchemaConstructionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaConstructionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaConstructionExpressionContext.prototype.constructor = SchemaConstructionExpressionContext;

ZParser.SchemaConstructionExpressionContext = SchemaConstructionExpressionContext;

SchemaConstructionExpressionContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

SchemaConstructionExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

SchemaConstructionExpressionContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};
SchemaConstructionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaConstructionExpression(this);
	}
};

SchemaConstructionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaConstructionExpression(this);
	}
};


function GenericPostfixApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericPostfixApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GenericPostfixApplicationExpressionContext.prototype.constructor = GenericPostfixApplicationExpressionContext;

ZParser.GenericPostfixApplicationExpressionContext = GenericPostfixApplicationExpressionContext;

GenericPostfixApplicationExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GenericPostfixApplicationExpressionContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

GenericPostfixApplicationExpressionContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

GenericPostfixApplicationExpressionContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

GenericPostfixApplicationExpressionContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

GenericPostfixApplicationExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
GenericPostfixApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericPostfixApplicationExpression(this);
	}
};

GenericPostfixApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericPostfixApplicationExpression(this);
	}
};


function GenericPrefixApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericPrefixApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GenericPrefixApplicationExpressionContext.prototype.constructor = GenericPrefixApplicationExpressionContext;

ZParser.GenericPrefixApplicationExpressionContext = GenericPrefixApplicationExpressionContext;

GenericPrefixApplicationExpressionContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

GenericPrefixApplicationExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GenericPrefixApplicationExpressionContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

GenericPrefixApplicationExpressionContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

GenericPrefixApplicationExpressionContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

GenericPrefixApplicationExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
GenericPrefixApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericPrefixApplicationExpression(this);
	}
};

GenericPrefixApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericPrefixApplicationExpression(this);
	}
};


function CharacteristicDefiniteDescriptionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacteristicDefiniteDescriptionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CharacteristicDefiniteDescriptionExpressionContext.prototype.constructor = CharacteristicDefiniteDescriptionExpressionContext;

ZParser.CharacteristicDefiniteDescriptionExpressionContext = CharacteristicDefiniteDescriptionExpressionContext;

CharacteristicDefiniteDescriptionExpressionContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

CharacteristicDefiniteDescriptionExpressionContext.prototype.GREEK_SMALL_LETTER_MU = function() {
    return this.getToken(ZParser.GREEK_SMALL_LETTER_MU, 0);
};

CharacteristicDefiniteDescriptionExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

CharacteristicDefiniteDescriptionExpressionContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};
CharacteristicDefiniteDescriptionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterCharacteristicDefiniteDescriptionExpression(this);
	}
};

CharacteristicDefiniteDescriptionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitCharacteristicDefiniteDescriptionExpression(this);
	}
};


function SchemaUniversalQuantificationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaUniversalQuantificationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaUniversalQuantificationExpressionContext.prototype.constructor = SchemaUniversalQuantificationExpressionContext;

ZParser.SchemaUniversalQuantificationExpressionContext = SchemaUniversalQuantificationExpressionContext;

SchemaUniversalQuantificationExpressionContext.prototype.FOR_ALL = function() {
    return this.getToken(ZParser.FOR_ALL, 0);
};

SchemaUniversalQuantificationExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

SchemaUniversalQuantificationExpressionContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

SchemaUniversalQuantificationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SchemaUniversalQuantificationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaUniversalQuantificationExpression(this);
	}
};

SchemaUniversalQuantificationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaUniversalQuantificationExpression(this);
	}
};


function SetExtensionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetExtensionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SetExtensionExpressionContext.prototype.constructor = SetExtensionExpressionContext;

ZParser.SetExtensionExpressionContext = SetExtensionExpressionContext;

SetExtensionExpressionContext.prototype.LEFT_CURLY_BRACKET = function() {
    return this.getToken(ZParser.LEFT_CURLY_BRACKET, 0);
};

SetExtensionExpressionContext.prototype.RIGHT_CURLY_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_CURLY_BRACKET, 0);
};

SetExtensionExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
SetExtensionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSetExtensionExpression(this);
	}
};

SetExtensionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSetExtensionExpression(this);
	}
};


function FunctionConstructionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionConstructionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
FunctionConstructionExpressionContext.prototype.constructor = FunctionConstructionExpressionContext;

ZParser.FunctionConstructionExpressionContext = FunctionConstructionExpressionContext;

FunctionConstructionExpressionContext.prototype.GREEK_SMALL_LETTER_LAMBDA = function() {
    return this.getToken(ZParser.GREEK_SMALL_LETTER_LAMBDA, 0);
};

FunctionConstructionExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

FunctionConstructionExpressionContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

FunctionConstructionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
FunctionConstructionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterFunctionConstructionExpression(this);
	}
};

FunctionConstructionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitFunctionConstructionExpression(this);
	}
};


function SchemaNegationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaNegationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaNegationExpressionContext.prototype.constructor = SchemaNegationExpressionContext;

ZParser.SchemaNegationExpressionContext = SchemaNegationExpressionContext;

SchemaNegationExpressionContext.prototype.NOT_SIGN = function() {
    return this.getToken(ZParser.NOT_SIGN, 0);
};

SchemaNegationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SchemaNegationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaNegationExpression(this);
	}
};

SchemaNegationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaNegationExpression(this);
	}
};


function TupleExtensionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleExtensionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TupleExtensionExpressionContext.prototype.constructor = TupleExtensionExpressionContext;

ZParser.TupleExtensionExpressionContext = TupleExtensionExpressionContext;

TupleExtensionExpressionContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

TupleExtensionExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TupleExtensionExpressionContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};

TupleExtensionExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.COMMA);
    } else {
        return this.getToken(ZParser.COMMA, i);
    }
};

TupleExtensionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterTupleExtensionExpression(this);
	}
};

TupleExtensionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitTupleExtensionExpression(this);
	}
};


function SchemaCompositionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaCompositionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaCompositionExpressionContext.prototype.constructor = SchemaCompositionExpressionContext;

ZParser.SchemaCompositionExpressionContext = SchemaCompositionExpressionContext;

SchemaCompositionExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SchemaCompositionExpressionContext.prototype.SCHEMA_COMPOSITION = function() {
    return this.getToken(ZParser.SCHEMA_COMPOSITION, 0);
};
SchemaCompositionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaCompositionExpression(this);
	}
};

SchemaCompositionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaCompositionExpression(this);
	}
};


function PowersetExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PowersetExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PowersetExpressionContext.prototype.constructor = PowersetExpressionContext;

ZParser.PowersetExpressionContext = PowersetExpressionContext;

PowersetExpressionContext.prototype.POWERSET = function() {
    return this.getToken(ZParser.POWERSET, 0);
};

PowersetExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PowersetExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPowersetExpression(this);
	}
};

PowersetExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPowersetExpression(this);
	}
};


function SchemaDisjunctionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaDisjunctionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaDisjunctionExpressionContext.prototype.constructor = SchemaDisjunctionExpressionContext;

ZParser.SchemaDisjunctionExpressionContext = SchemaDisjunctionExpressionContext;

SchemaDisjunctionExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SchemaDisjunctionExpressionContext.prototype.LOGICAL_OR = function() {
    return this.getToken(ZParser.LOGICAL_OR, 0);
};
SchemaDisjunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaDisjunctionExpression(this);
	}
};

SchemaDisjunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaDisjunctionExpression(this);
	}
};


function SubstitutionExpressionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstitutionExpressionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SubstitutionExpressionExpressionContext.prototype.constructor = SubstitutionExpressionExpressionContext;

ZParser.SubstitutionExpressionExpressionContext = SubstitutionExpressionExpressionContext;

SubstitutionExpressionExpressionContext.prototype.LET = function() {
    return this.getToken(ZParser.LET, 0);
};

SubstitutionExpressionExpressionContext.prototype.declNameExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclNameExpressionContext);
    } else {
        return this.getTypedRuleContext(DeclNameExpressionContext,i);
    }
};

SubstitutionExpressionExpressionContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

SubstitutionExpressionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SubstitutionExpressionExpressionContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SEMICOLON);
    } else {
        return this.getToken(ZParser.SEMICOLON, i);
    }
};

SubstitutionExpressionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSubstitutionExpressionExpression(this);
	}
};

SubstitutionExpressionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSubstitutionExpressionExpression(this);
	}
};


function SchemaHidingExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaHidingExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaHidingExpressionContext.prototype.constructor = SchemaHidingExpressionContext;

ZParser.SchemaHidingExpressionContext = SchemaHidingExpressionContext;

SchemaHidingExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SchemaHidingExpressionContext.prototype.REVERSE_SOLIDUS = function() {
    return this.getToken(ZParser.REVERSE_SOLIDUS, 0);
};

SchemaHidingExpressionContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

SchemaHidingExpressionContext.prototype.declName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclNameContext);
    } else {
        return this.getTypedRuleContext(DeclNameContext,i);
    }
};

SchemaHidingExpressionContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};

SchemaHidingExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.COMMA);
    } else {
        return this.getToken(ZParser.COMMA, i);
    }
};

SchemaHidingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaHidingExpression(this);
	}
};

SchemaHidingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaHidingExpression(this);
	}
};


function PostfixApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostfixApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PostfixApplicationExpressionContext.prototype.constructor = PostfixApplicationExpressionContext;

ZParser.PostfixApplicationExpressionContext = PostfixApplicationExpressionContext;

PostfixApplicationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostfixApplicationExpressionContext.prototype.POST = function() {
    return this.getToken(ZParser.POST, 0);
};
PostfixApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPostfixApplicationExpression(this);
	}
};

PostfixApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPostfixApplicationExpression(this);
	}
};


function CartesianProductExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CartesianProductExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CartesianProductExpressionContext.prototype.constructor = CartesianProductExpressionContext;

ZParser.CartesianProductExpressionContext = CartesianProductExpressionContext;

CartesianProductExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CartesianProductExpressionContext.prototype.MULTIPLICATION_SIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.MULTIPLICATION_SIGN);
    } else {
        return this.getToken(ZParser.MULTIPLICATION_SIGN, i);
    }
};

CartesianProductExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterCartesianProductExpression(this);
	}
};

CartesianProductExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitCartesianProductExpression(this);
	}
};


function BindingSelectionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BindingSelectionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BindingSelectionExpressionContext.prototype.constructor = BindingSelectionExpressionContext;

ZParser.BindingSelectionExpressionContext = BindingSelectionExpressionContext;

BindingSelectionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BindingSelectionExpressionContext.prototype.FULL_STOP = function() {
    return this.getToken(ZParser.FULL_STOP, 0);
};

BindingSelectionExpressionContext.prototype.refName = function() {
    return this.getTypedRuleContext(RefNameContext,0);
};
BindingSelectionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterBindingSelectionExpression(this);
	}
};

BindingSelectionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitBindingSelectionExpression(this);
	}
};


function GenericInstantiationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericInstantiationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GenericInstantiationExpressionContext.prototype.constructor = GenericInstantiationExpressionContext;

ZParser.GenericInstantiationExpressionContext = GenericInstantiationExpressionContext;

GenericInstantiationExpressionContext.prototype.refName = function() {
    return this.getTypedRuleContext(RefNameContext,0);
};

GenericInstantiationExpressionContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

GenericInstantiationExpressionContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};

GenericInstantiationExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
GenericInstantiationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericInstantiationExpression(this);
	}
};

GenericInstantiationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericInstantiationExpression(this);
	}
};


function SchemaExistentialQuantificationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaExistentialQuantificationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaExistentialQuantificationExpressionContext.prototype.constructor = SchemaExistentialQuantificationExpressionContext;

ZParser.SchemaExistentialQuantificationExpressionContext = SchemaExistentialQuantificationExpressionContext;

SchemaExistentialQuantificationExpressionContext.prototype.THERE_EXISTS = function() {
    return this.getToken(ZParser.THERE_EXISTS, 0);
};

SchemaExistentialQuantificationExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

SchemaExistentialQuantificationExpressionContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

SchemaExistentialQuantificationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SchemaExistentialQuantificationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaExistentialQuantificationExpression(this);
	}
};

SchemaExistentialQuantificationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaExistentialQuantificationExpression(this);
	}
};


function NumberLiteralExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumberLiteralExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NumberLiteralExpressionContext.prototype.constructor = NumberLiteralExpressionContext;

ZParser.NumberLiteralExpressionContext = NumberLiteralExpressionContext;

NumberLiteralExpressionContext.prototype.NUMERAL = function() {
    return this.getToken(ZParser.NUMERAL, 0);
};
NumberLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNumberLiteralExpression(this);
	}
};

NumberLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNumberLiteralExpression(this);
	}
};


function ParenthesizedExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

ZParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesizedExpressionContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitParenthesizedExpression(this);
	}
};


function InfixLeftApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InfixLeftApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InfixLeftApplicationExpressionContext.prototype.constructor = InfixLeftApplicationExpressionContext;

ZParser.InfixLeftApplicationExpressionContext = InfixLeftApplicationExpressionContext;

InfixLeftApplicationExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InfixLeftApplicationExpressionContext.prototype.I = function() {
    return this.getToken(ZParser.I, 0);
};
InfixLeftApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInfixLeftApplicationExpression(this);
	}
};

InfixLeftApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInfixLeftApplicationExpression(this);
	}
};


function ApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ApplicationExpressionContext.prototype.constructor = ApplicationExpressionContext;

ZParser.ApplicationExpressionContext = ApplicationExpressionContext;

ApplicationExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterApplicationExpression(this);
	}
};

ApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitApplicationExpression(this);
	}
};


function SchemaRenamingExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaRenamingExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaRenamingExpressionContext.prototype.constructor = SchemaRenamingExpressionContext;

ZParser.SchemaRenamingExpressionContext = SchemaRenamingExpressionContext;

SchemaRenamingExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SchemaRenamingExpressionContext.prototype.LEFT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.LEFT_SQUARE_BRACKET, 0);
};

SchemaRenamingExpressionContext.prototype.declName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclNameContext);
    } else {
        return this.getTypedRuleContext(DeclNameContext,i);
    }
};

SchemaRenamingExpressionContext.prototype.SOLIDUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SOLIDUS);
    } else {
        return this.getToken(ZParser.SOLIDUS, i);
    }
};


SchemaRenamingExpressionContext.prototype.RIGHT_SQUARE_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_SQUARE_BRACKET, 0);
};

SchemaRenamingExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.COMMA);
    } else {
        return this.getToken(ZParser.COMMA, i);
    }
};

SchemaRenamingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaRenamingExpression(this);
	}
};

SchemaRenamingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaRenamingExpression(this);
	}
};


function SchemaConjunctionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaConjunctionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaConjunctionExpressionContext.prototype.constructor = SchemaConjunctionExpressionContext;

ZParser.SchemaConjunctionExpressionContext = SchemaConjunctionExpressionContext;

SchemaConjunctionExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SchemaConjunctionExpressionContext.prototype.LOGICAL_AND = function() {
    return this.getToken(ZParser.LOGICAL_AND, 0);
};
SchemaConjunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaConjunctionExpression(this);
	}
};

SchemaConjunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaConjunctionExpression(this);
	}
};


function ConditionalExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ZParser.ConditionalExpressionContext = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.IF = function() {
    return this.getToken(ZParser.IF, 0);
};

ConditionalExpressionContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

ConditionalExpressionContext.prototype.THEN = function() {
    return this.getToken(ZParser.THEN, 0);
};

ConditionalExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ConditionalExpressionContext.prototype.ELSE = function() {
    return this.getToken(ZParser.ELSE, 0);
};
ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitConditionalExpression(this);
	}
};


function SchemaProjectionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaProjectionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaProjectionExpressionContext.prototype.constructor = SchemaProjectionExpressionContext;

ZParser.SchemaProjectionExpressionContext = SchemaProjectionExpressionContext;

SchemaProjectionExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SchemaProjectionExpressionContext.prototype.SCHEMA_PROJECTION = function() {
    return this.getToken(ZParser.SCHEMA_PROJECTION, 0);
};
SchemaProjectionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaProjectionExpression(this);
	}
};

SchemaProjectionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaProjectionExpression(this);
	}
};


function InfixRightApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InfixRightApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InfixRightApplicationExpressionContext.prototype.constructor = InfixRightApplicationExpressionContext;

ZParser.InfixRightApplicationExpressionContext = InfixRightApplicationExpressionContext;

InfixRightApplicationExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InfixRightApplicationExpressionContext.prototype.I = function() {
    return this.getToken(ZParser.I, 0);
};
InfixRightApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInfixRightApplicationExpression(this);
	}
};

InfixRightApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInfixRightApplicationExpression(this);
	}
};


function CharacteristicSetComprehensionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharacteristicSetComprehensionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CharacteristicSetComprehensionExpressionContext.prototype.constructor = CharacteristicSetComprehensionExpressionContext;

ZParser.CharacteristicSetComprehensionExpressionContext = CharacteristicSetComprehensionExpressionContext;

CharacteristicSetComprehensionExpressionContext.prototype.LEFT_CURLY_BRACKET = function() {
    return this.getToken(ZParser.LEFT_CURLY_BRACKET, 0);
};

CharacteristicSetComprehensionExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

CharacteristicSetComprehensionExpressionContext.prototype.RIGHT_CURLY_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_CURLY_BRACKET, 0);
};
CharacteristicSetComprehensionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterCharacteristicSetComprehensionExpression(this);
	}
};

CharacteristicSetComprehensionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitCharacteristicSetComprehensionExpression(this);
	}
};


function SchemaPreconditionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaPreconditionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaPreconditionExpressionContext.prototype.constructor = SchemaPreconditionExpressionContext;

ZParser.SchemaPreconditionExpressionContext = SchemaPreconditionExpressionContext;

SchemaPreconditionExpressionContext.prototype.PRE_KEY = function() {
    return this.getToken(ZParser.PRE_KEY, 0);
};

SchemaPreconditionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SchemaPreconditionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaPreconditionExpression(this);
	}
};

SchemaPreconditionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaPreconditionExpression(this);
	}
};


function PrefixApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrefixApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PrefixApplicationExpressionContext.prototype.constructor = PrefixApplicationExpressionContext;

ZParser.PrefixApplicationExpressionContext = PrefixApplicationExpressionContext;

PrefixApplicationExpressionContext.prototype.PRE = function() {
    return this.getToken(ZParser.PRE, 0);
};

PrefixApplicationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PrefixApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPrefixApplicationExpression(this);
	}
};

PrefixApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPrefixApplicationExpression(this);
	}
};


function BindingConstructionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BindingConstructionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BindingConstructionExpressionContext.prototype.constructor = BindingConstructionExpressionContext;

ZParser.BindingConstructionExpressionContext = BindingConstructionExpressionContext;

BindingConstructionExpressionContext.prototype.GREEK_SMALL_LETTER_THETA = function() {
    return this.getToken(ZParser.GREEK_SMALL_LETTER_THETA, 0);
};

BindingConstructionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BindingConstructionExpressionContext.prototype.STROKE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.STROKE);
    } else {
        return this.getToken(ZParser.STROKE, i);
    }
};

BindingConstructionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterBindingConstructionExpression(this);
	}
};

BindingConstructionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitBindingConstructionExpression(this);
	}
};


function SchemaPipingExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaPipingExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaPipingExpressionContext.prototype.constructor = SchemaPipingExpressionContext;

ZParser.SchemaPipingExpressionContext = SchemaPipingExpressionContext;

SchemaPipingExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SchemaPipingExpressionContext.prototype.SCHEMA_PIPING = function() {
    return this.getToken(ZParser.SCHEMA_PIPING, 0);
};
SchemaPipingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaPipingExpression(this);
	}
};

SchemaPipingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaPipingExpression(this);
	}
};


function SchemaImplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaImplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaImplicationExpressionContext.prototype.constructor = SchemaImplicationExpressionContext;

ZParser.SchemaImplicationExpressionContext = SchemaImplicationExpressionContext;

SchemaImplicationExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SchemaImplicationExpressionContext.prototype.RIGHTWARDS_DOUBLE_ARROW = function() {
    return this.getToken(ZParser.RIGHTWARDS_DOUBLE_ARROW, 0);
};
SchemaImplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaImplicationExpression(this);
	}
};

SchemaImplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaImplicationExpression(this);
	}
};


function BindingExtensionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BindingExtensionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BindingExtensionExpressionContext.prototype.constructor = BindingExtensionExpressionContext;

ZParser.BindingExtensionExpressionContext = BindingExtensionExpressionContext;

BindingExtensionExpressionContext.prototype.LEFT_BINDING_BRACKET = function() {
    return this.getToken(ZParser.LEFT_BINDING_BRACKET, 0);
};

BindingExtensionExpressionContext.prototype.RIGHT_BINDING_BRACKET = function() {
    return this.getToken(ZParser.RIGHT_BINDING_BRACKET, 0);
};

BindingExtensionExpressionContext.prototype.declNameExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclNameExpressionContext);
    } else {
        return this.getTypedRuleContext(DeclNameExpressionContext,i);
    }
};

BindingExtensionExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.COMMA);
    } else {
        return this.getToken(ZParser.COMMA, i);
    }
};

BindingExtensionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterBindingExtensionExpression(this);
	}
};

BindingExtensionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitBindingExtensionExpression(this);
	}
};


function SchemaDecorationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaDecorationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaDecorationExpressionContext.prototype.constructor = SchemaDecorationExpressionContext;

ZParser.SchemaDecorationExpressionContext = SchemaDecorationExpressionContext;

SchemaDecorationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SchemaDecorationExpressionContext.prototype.STROKE = function() {
    return this.getToken(ZParser.STROKE, 0);
};
SchemaDecorationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaDecorationExpression(this);
	}
};

SchemaDecorationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaDecorationExpression(this);
	}
};


function SchemaUniqueExistentialQuantificationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaUniqueExistentialQuantificationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SchemaUniqueExistentialQuantificationExpressionContext.prototype.constructor = SchemaUniqueExistentialQuantificationExpressionContext;

ZParser.SchemaUniqueExistentialQuantificationExpressionContext = SchemaUniqueExistentialQuantificationExpressionContext;

SchemaUniqueExistentialQuantificationExpressionContext.prototype.UNIQUE_EXISTS = function() {
    return this.getToken(ZParser.UNIQUE_EXISTS, 0);
};

SchemaUniqueExistentialQuantificationExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

SchemaUniqueExistentialQuantificationExpressionContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

SchemaUniqueExistentialQuantificationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SchemaUniqueExistentialQuantificationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaUniqueExistentialQuantificationExpression(this);
	}
};

SchemaUniqueExistentialQuantificationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaUniqueExistentialQuantificationExpression(this);
	}
};


function DefiniteDescriptionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefiniteDescriptionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DefiniteDescriptionExpressionContext.prototype.constructor = DefiniteDescriptionExpressionContext;

ZParser.DefiniteDescriptionExpressionContext = DefiniteDescriptionExpressionContext;

DefiniteDescriptionExpressionContext.prototype.GREEK_SMALL_LETTER_MU = function() {
    return this.getToken(ZParser.GREEK_SMALL_LETTER_MU, 0);
};

DefiniteDescriptionExpressionContext.prototype.schemaText = function() {
    return this.getTypedRuleContext(SchemaTextContext,0);
};

DefiniteDescriptionExpressionContext.prototype.SPOT = function() {
    return this.getToken(ZParser.SPOT, 0);
};

DefiniteDescriptionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
DefiniteDescriptionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterDefiniteDescriptionExpression(this);
	}
};

DefiniteDescriptionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitDefiniteDescriptionExpression(this);
	}
};


function ReferenceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReferenceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ReferenceExpressionContext.prototype.constructor = ReferenceExpressionContext;

ZParser.ReferenceExpressionContext = ReferenceExpressionContext;

ReferenceExpressionContext.prototype.refName = function() {
    return this.getTypedRuleContext(RefNameContext,0);
};
ReferenceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterReferenceExpression(this);
	}
};

ReferenceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitReferenceExpression(this);
	}
};


function GenericInfixApplicationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenericInfixApplicationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
GenericInfixApplicationExpressionContext.prototype.constructor = GenericInfixApplicationExpressionContext;

ZParser.GenericInfixApplicationExpressionContext = GenericInfixApplicationExpressionContext;

GenericInfixApplicationExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GenericInfixApplicationExpressionContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

GenericInfixApplicationExpressionContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

GenericInfixApplicationExpressionContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

GenericInfixApplicationExpressionContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

GenericInfixApplicationExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
GenericInfixApplicationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenericInfixApplicationExpression(this);
	}
};

GenericInfixApplicationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenericInfixApplicationExpression(this);
	}
};


function TupleSelectionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleSelectionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TupleSelectionExpressionContext.prototype.constructor = TupleSelectionExpressionContext;

ZParser.TupleSelectionExpressionContext = TupleSelectionExpressionContext;

TupleSelectionExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TupleSelectionExpressionContext.prototype.FULL_STOP = function() {
    return this.getToken(ZParser.FULL_STOP, 0);
};

TupleSelectionExpressionContext.prototype.NUMERAL = function() {
    return this.getToken(ZParser.NUMERAL, 0);
};
TupleSelectionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterTupleSelectionExpression(this);
	}
};

TupleSelectionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitTupleSelectionExpression(this);
	}
};



ZParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 14;
    this.enterRecursionRule(localctx, 14, ZParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SchemaUniversalQuantificationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 299;
            this.match(ZParser.FOR_ALL);
            this.state = 300;
            this.schemaText();
            this.state = 301;
            this.match(ZParser.SPOT);
            this.state = 302;
            this.expression(44);
            break;

        case 2:
            localctx = new SchemaExistentialQuantificationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 304;
            this.match(ZParser.THERE_EXISTS);
            this.state = 305;
            this.schemaText();
            this.state = 306;
            this.match(ZParser.SPOT);
            this.state = 307;
            this.expression(43);
            break;

        case 3:
            localctx = new SchemaUniqueExistentialQuantificationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 309;
            this.match(ZParser.UNIQUE_EXISTS);
            this.state = 310;
            this.schemaText();
            this.state = 311;
            this.match(ZParser.SPOT);
            this.state = 312;
            this.expression(42);
            break;

        case 4:
            localctx = new FunctionConstructionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 314;
            this.match(ZParser.GREEK_SMALL_LETTER_LAMBDA);
            this.state = 315;
            this.schemaText();
            this.state = 316;
            this.match(ZParser.SPOT);
            this.state = 317;
            this.expression(41);
            break;

        case 5:
            localctx = new DefiniteDescriptionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 319;
            this.match(ZParser.GREEK_SMALL_LETTER_MU);
            this.state = 320;
            this.schemaText();
            this.state = 321;
            this.match(ZParser.SPOT);
            this.state = 322;
            this.expression(40);
            break;

        case 6:
            localctx = new SubstitutionExpressionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 324;
            this.match(ZParser.LET);
            this.state = 325;
            this.declNameExpression();
            this.state = 330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ZParser.SEMICOLON) {
                this.state = 326;
                this.match(ZParser.SEMICOLON);
                this.state = 327;
                this.declNameExpression();
                this.state = 332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 333;
            this.match(ZParser.SPOT);
            this.state = 334;
            this.expression(39);
            break;

        case 7:
            localctx = new SchemaNegationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 336;
            this.match(ZParser.NOT_SIGN);
            this.state = 337;
            this.expression(34);
            break;

        case 8:
            localctx = new ConditionalExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 338;
            this.match(ZParser.IF);
            this.state = 339;
            this.predicate(0);
            this.state = 340;
            this.match(ZParser.THEN);
            this.state = 341;
            this.expression(0);
            this.state = 342;
            this.match(ZParser.ELSE);
            this.state = 343;
            this.expression(33);
            break;

        case 9:
            localctx = new SchemaPreconditionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 345;
            this.match(ZParser.PRE_KEY);
            this.state = 346;
            this.expression(28);
            break;

        case 10:
            localctx = new PowersetExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 347;
            this.match(ZParser.POWERSET);
            this.state = 348;
            this.expression(26);
            break;

        case 11:
            localctx = new PrefixApplicationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 349;
            this.match(ZParser.PRE);
            this.state = 350;
            this.expression(25);
            break;

        case 12:
            localctx = new GenericPrefixApplicationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 351;
            this.match(ZParser.L);
            this.state = 353;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 352;
                this.expSep();

            }
            this.state = 362;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            switch(la_) {
            case 1:
                this.state = 355;
                this.expression(0);
                this.state = 356;
                this.match(ZParser.ERE);
                break;

            case 2:
                this.state = 359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 358;
                    this.expressionList();
                }

                this.state = 361;
                this.match(ZParser.SRE);
                break;

            }
            this.state = 364;
            this.expression(24);
            break;

        case 13:
            localctx = new NofixApplicationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 365;
            this.match(ZParser.L);
            this.state = 367;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
            if(la_===1) {
                this.state = 366;
                this.expSep();

            }
            this.state = 376;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            switch(la_) {
            case 1:
                this.state = 369;
                this.expression(0);
                this.state = 370;
                this.match(ZParser.ER);
                break;

            case 2:
                this.state = 373;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 372;
                    this.expressionList();
                }

                this.state = 375;
                this.match(ZParser.SR);
                break;

            }
            break;

        case 14:
            localctx = new BindingConstructionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 378;
            this.match(ZParser.GREEK_SMALL_LETTER_THETA);
            this.state = 379;
            this.expression(0);
            this.state = 383;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 380;
                    this.match(ZParser.STROKE); 
                }
                this.state = 385;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
            }

            break;

        case 15:
            localctx = new ReferenceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 386;
            this.refName();
            break;

        case 16:
            localctx = new GenericInstantiationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 387;
            this.refName();
            this.state = 388;
            this.match(ZParser.LEFT_SQUARE_BRACKET);
            this.state = 390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                this.state = 389;
                this.expressionList();
            }

            this.state = 392;
            this.match(ZParser.RIGHT_SQUARE_BRACKET);
            break;

        case 17:
            localctx = new NumberLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 394;
            this.match(ZParser.NUMERAL);
            break;

        case 18:
            localctx = new SetExtensionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 395;
            this.match(ZParser.LEFT_CURLY_BRACKET);
            this.state = 397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                this.state = 396;
                this.expressionList();
            }

            this.state = 399;
            this.match(ZParser.RIGHT_CURLY_BRACKET);
            break;

        case 19:
            localctx = new SetComprehensionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 400;
            this.match(ZParser.LEFT_CURLY_BRACKET);
            this.state = 401;
            this.schemaText();
            this.state = 402;
            this.match(ZParser.SPOT);
            this.state = 403;
            this.expression(0);
            this.state = 404;
            this.match(ZParser.RIGHT_CURLY_BRACKET);
            break;

        case 20:
            localctx = new CharacteristicSetComprehensionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 406;
            this.match(ZParser.LEFT_CURLY_BRACKET);
            this.state = 407;
            this.schemaText();
            this.state = 408;
            this.match(ZParser.RIGHT_CURLY_BRACKET);
            break;

        case 21:
            localctx = new SchemaConstructionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 410;
            this.match(ZParser.LEFT_SQUARE_BRACKET);
            this.state = 411;
            this.schemaText();
            this.state = 412;
            this.match(ZParser.RIGHT_SQUARE_BRACKET);
            break;

        case 22:
            localctx = new BindingExtensionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 414;
            this.match(ZParser.LEFT_BINDING_BRACKET);
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ZParser.ARGUMENT || _la===ZParser.NAME || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (ZParser.PREP - 133)) | (1 << (ZParser.PRE - 133)) | (1 << (ZParser.LP - 133)) | (1 << (ZParser.L - 133)))) !== 0)) {
                this.state = 415;
                this.declNameExpression();
                this.state = 420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===ZParser.COMMA) {
                    this.state = 416;
                    this.match(ZParser.COMMA);
                    this.state = 417;
                    this.declNameExpression();
                    this.state = 422;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 425;
            this.match(ZParser.RIGHT_BINDING_BRACKET);
            break;

        case 23:
            localctx = new TupleExtensionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 426;
            this.match(ZParser.LEFT_PARENTHESIS);
            this.state = 427;
            this.expression(0);
            this.state = 430; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 428;
                this.match(ZParser.COMMA);
                this.state = 429;
                this.expression(0);
                this.state = 432; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ZParser.COMMA);
            this.state = 434;
            this.match(ZParser.RIGHT_PARENTHESIS);
            break;

        case 24:
            localctx = new CharacteristicDefiniteDescriptionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 436;
            this.match(ZParser.LEFT_PARENTHESIS);
            this.state = 437;
            this.match(ZParser.GREEK_SMALL_LETTER_MU);
            this.state = 438;
            this.schemaText();
            this.state = 439;
            this.match(ZParser.RIGHT_PARENTHESIS);
            break;

        case 25:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 441;
            this.match(ZParser.LEFT_PARENTHESIS);
            this.state = 442;
            this.expression(0);
            this.state = 443;
            this.match(ZParser.RIGHT_PARENTHESIS);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 555;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 553;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SchemaEquivalenceExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 447;
                    if (!( this.precpred(this._ctx, 38))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
                    }
                    this.state = 448;
                    this.match(ZParser.LEFT_RIGHT_DOUBLE_ARROW);
                    this.state = 449;
                    this.expression(39);
                    break;

                case 2:
                    localctx = new SchemaImplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 450;
                    if (!( this.precpred(this._ctx, 37))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
                    }
                    this.state = 451;
                    this.match(ZParser.RIGHTWARDS_DOUBLE_ARROW);
                    this.state = 452;
                    this.expression(38);
                    break;

                case 3:
                    localctx = new SchemaDisjunctionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 453;
                    if (!( this.precpred(this._ctx, 36))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
                    }
                    this.state = 454;
                    this.match(ZParser.LOGICAL_OR);
                    this.state = 455;
                    this.expression(37);
                    break;

                case 4:
                    localctx = new SchemaConjunctionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 456;
                    if (!( this.precpred(this._ctx, 35))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                    }
                    this.state = 457;
                    this.match(ZParser.LOGICAL_AND);
                    this.state = 458;
                    this.expression(36);
                    break;

                case 5:
                    localctx = new SchemaCompositionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 459;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 460;
                    this.match(ZParser.SCHEMA_COMPOSITION);
                    this.state = 461;
                    this.expression(33);
                    break;

                case 6:
                    localctx = new SchemaPipingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 462;
                    if (!( this.precpred(this._ctx, 31))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                    }
                    this.state = 463;
                    this.match(ZParser.SCHEMA_PIPING);
                    this.state = 464;
                    this.expression(32);
                    break;

                case 7:
                    localctx = new SchemaProjectionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 465;
                    if (!( this.precpred(this._ctx, 29))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                    }
                    this.state = 466;
                    this.match(ZParser.SCHEMA_PROJECTION);
                    this.state = 467;
                    this.expression(30);
                    break;

                case 8:
                    localctx = new InfixLeftApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 468;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 469;
                    if (!( ZSupport.isLeftAssociative(_input))) {
                        throw new antlr4.error.FailedPredicateException(this, "ZSupport.isLeftAssociative(_input)");
                    }
                    this.state = 470;
                    this.match(ZParser.I);
                    this.state = 471;
                    this.expression(22);
                    break;

                case 9:
                    localctx = new InfixRightApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 472;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 473;
                    this.match(ZParser.I);
                    this.state = 474;
                    this.expression(20);
                    break;

                case 10:
                    localctx = new GenericInfixApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 475;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 476;
                    this.match(ZParser.EL);
                    this.state = 478;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
                    if(la_===1) {
                        this.state = 477;
                        this.expSep();

                    }
                    this.state = 487;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 480;
                        this.expression(0);
                        this.state = 481;
                        this.match(ZParser.ERE);
                        break;

                    case 2:
                        this.state = 484;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                            this.state = 483;
                            this.expressionList();
                        }

                        this.state = 486;
                        this.match(ZParser.SRE);
                        break;

                    }
                    this.state = 489;
                    this.expression(20);
                    break;

                case 11:
                    localctx = new ApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 490;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 491;
                    this.expression(18);
                    break;

                case 12:
                    localctx = new SchemaHidingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 492;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 493;
                    this.match(ZParser.REVERSE_SOLIDUS);
                    this.state = 494;
                    this.match(ZParser.LEFT_PARENTHESIS);
                    this.state = 495;
                    this.declName();
                    this.state = 500;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===ZParser.COMMA) {
                        this.state = 496;
                        this.match(ZParser.COMMA);
                        this.state = 497;
                        this.declName();
                        this.state = 502;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 503;
                    this.match(ZParser.RIGHT_PARENTHESIS);
                    break;

                case 13:
                    localctx = new CartesianProductExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 505;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 508; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 506;
                    		this.match(ZParser.MULTIPLICATION_SIGN);
                    		this.state = 507;
                    		this.expression(0);
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 510; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,37, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;

                case 14:
                    localctx = new PostfixApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 512;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 513;
                    this.match(ZParser.POST);
                    break;

                case 15:
                    localctx = new GenericPostfixApplicationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 514;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 515;
                    this.match(ZParser.EL);
                    this.state = 517;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
                    if(la_===1) {
                        this.state = 516;
                        this.expSep();

                    }
                    this.state = 526;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 519;
                        this.expression(0);
                        this.state = 520;
                        this.match(ZParser.ER);
                        break;

                    case 2:
                        this.state = 523;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                            this.state = 522;
                            this.expressionList();
                        }

                        this.state = 525;
                        this.match(ZParser.SR);
                        break;

                    }
                    break;

                case 16:
                    localctx = new SchemaDecorationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 528;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 529;
                    this.match(ZParser.STROKE);
                    break;

                case 17:
                    localctx = new SchemaRenamingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 530;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 531;
                    this.match(ZParser.LEFT_SQUARE_BRACKET);
                    this.state = 532;
                    this.declName();
                    this.state = 533;
                    this.match(ZParser.SOLIDUS);
                    this.state = 534;
                    this.declName();
                    this.state = 542;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===ZParser.COMMA) {
                        this.state = 535;
                        this.match(ZParser.COMMA);
                        this.state = 536;
                        this.declName();
                        this.state = 537;
                        this.match(ZParser.SOLIDUS);
                        this.state = 538;
                        this.declName();
                        this.state = 544;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 545;
                    this.match(ZParser.RIGHT_SQUARE_BRACKET);
                    break;

                case 18:
                    localctx = new BindingSelectionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 547;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 548;
                    this.match(ZParser.FULL_STOP);
                    this.state = 549;
                    this.refName();
                    break;

                case 19:
                    localctx = new TupleSelectionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ZParser.RULE_expression);
                    this.state = 550;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 551;
                    this.match(ZParser.FULL_STOP);
                    this.state = 552;
                    this.match(ZParser.NUMERAL);
                    break;

                } 
            }
            this.state = 557;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SchemaTextContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_schemaText;
    return this;
}

SchemaTextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SchemaTextContext.prototype.constructor = SchemaTextContext;

SchemaTextContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.NL);
    } else {
        return this.getToken(ZParser.NL, i);
    }
};


SchemaTextContext.prototype.declPart = function() {
    return this.getTypedRuleContext(DeclPartContext,0);
};

SchemaTextContext.prototype.VERTICAL_LINE = function() {
    return this.getToken(ZParser.VERTICAL_LINE, 0);
};

SchemaTextContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

SchemaTextContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterSchemaText(this);
	}
};

SchemaTextContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitSchemaText(this);
	}
};




ZParser.SchemaTextContext = SchemaTextContext;

ZParser.prototype.schemaText = function() {

    var localctx = new SchemaTextContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ZParser.RULE_schemaText);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 558;
            this.match(ZParser.NL);

        }
        this.state = 562;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (ZParser.ARGUMENT - 47)) | (1 << (ZParser.FOR_ALL - 47)) | (1 << (ZParser.THERE_EXISTS - 47)) | (1 << (ZParser.UNIQUE_EXISTS - 47)) | (1 << (ZParser.NOT_SIGN - 47)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 47)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 47)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 47)) | (1 << (ZParser.NAME - 47)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (ZParser.PREP - 133)) | (1 << (ZParser.PRE - 133)) | (1 << (ZParser.LP - 133)) | (1 << (ZParser.L - 133)))) !== 0)) {
            this.state = 561;
            this.declPart();
        }

        this.state = 565;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 564;
            this.match(ZParser.NL);

        }
        this.state = 575;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ZParser.VERTICAL_LINE) {
            this.state = 567;
            this.match(ZParser.VERTICAL_LINE);
            this.state = 569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ZParser.NL) {
                this.state = 568;
                this.match(ZParser.NL);
            }

            this.state = 571;
            this.predicate(0);
            this.state = 573;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
            if(la_===1) {
                this.state = 572;
                this.match(ZParser.NL);

            }
        }

        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ZParser.NL) {
            this.state = 577;
            this.match(ZParser.NL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_declPart;
    return this;
}

DeclPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclPartContext.prototype.constructor = DeclPartContext;

DeclPartContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

DeclPartContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SEMICOLON);
    } else {
        return this.getToken(ZParser.SEMICOLON, i);
    }
};


DeclPartContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.NL);
    } else {
        return this.getToken(ZParser.NL, i);
    }
};


DeclPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterDeclPart(this);
	}
};

DeclPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitDeclPart(this);
	}
};




ZParser.DeclPartContext = DeclPartContext;

ZParser.prototype.declPart = function() {

    var localctx = new DeclPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ZParser.RULE_declPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.declaration();
        this.state = 585;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 581;
                _la = this._input.LA(1);
                if(!(_la===ZParser.NL || _la===ZParser.SEMICOLON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 582;
                this.declaration(); 
            }
            this.state = 587;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclNameExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_declNameExpression;
    return this;
}

DeclNameExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclNameExpressionContext.prototype.constructor = DeclNameExpressionContext;

DeclNameExpressionContext.prototype.declName = function() {
    return this.getTypedRuleContext(DeclNameContext,0);
};

DeclNameExpressionContext.prototype.DEFINE_EQUAL = function() {
    return this.getToken(ZParser.DEFINE_EQUAL, 0);
};

DeclNameExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DeclNameExpressionContext.prototype.NL = function() {
    return this.getToken(ZParser.NL, 0);
};

DeclNameExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterDeclNameExpression(this);
	}
};

DeclNameExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitDeclNameExpression(this);
	}
};




ZParser.DeclNameExpressionContext = DeclNameExpressionContext;

ZParser.prototype.declNameExpression = function() {

    var localctx = new DeclNameExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ZParser.RULE_declNameExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.declName();
        this.state = 589;
        this.match(ZParser.DEFINE_EQUAL);
        this.state = 590;
        this.expression(0);
        this.state = 592;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 591;
            this.match(ZParser.NL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.declName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclNameContext);
    } else {
        return this.getTypedRuleContext(DeclNameContext,i);
    }
};

DeclarationContext.prototype.COLON = function() {
    return this.getToken(ZParser.COLON, 0);
};

DeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DeclarationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.COMMA);
    } else {
        return this.getToken(ZParser.COMMA, i);
    }
};


DeclarationContext.prototype.declNameExpression = function() {
    return this.getTypedRuleContext(DeclNameExpressionContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitDeclaration(this);
	}
};




ZParser.DeclarationContext = DeclarationContext;

ZParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ZParser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.state = 607;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 594;
            this.declName();
            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ZParser.COMMA) {
                this.state = 595;
                this.match(ZParser.COMMA);
                this.state = 596;
                this.declName();
                this.state = 601;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 602;
            this.match(ZParser.COLON);
            this.state = 603;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 605;
            this.declNameExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 606;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_operatorTemplate;
    return this;
}

OperatorTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorTemplateContext.prototype.constructor = OperatorTemplateContext;

OperatorTemplateContext.prototype.RELATION = function() {
    return this.getToken(ZParser.RELATION, 0);
};

OperatorTemplateContext.prototype.template = function() {
    return this.getTypedRuleContext(TemplateContext,0);
};

OperatorTemplateContext.prototype.FUNCTION = function() {
    return this.getToken(ZParser.FUNCTION, 0);
};

OperatorTemplateContext.prototype.categoryTemplate = function() {
    return this.getTypedRuleContext(CategoryTemplateContext,0);
};

OperatorTemplateContext.prototype.GENERIC = function() {
    return this.getToken(ZParser.GENERIC, 0);
};

OperatorTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterOperatorTemplate(this);
	}
};

OperatorTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitOperatorTemplate(this);
	}
};




ZParser.OperatorTemplateContext = OperatorTemplateContext;

ZParser.prototype.operatorTemplate = function() {

    var localctx = new OperatorTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ZParser.RULE_operatorTemplate);
    try {
        this.state = 615;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.RELATION:
            this.enterOuterAlt(localctx, 1);
            this.state = 609;
            this.match(ZParser.RELATION);
            this.state = 610;
            this.template();
            break;
        case ZParser.FUNCTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 611;
            this.match(ZParser.FUNCTION);
            this.state = 612;
            this.categoryTemplate();
            break;
        case ZParser.GENERIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 613;
            this.match(ZParser.GENERIC);
            this.state = 614;
            this.categoryTemplate();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CategoryTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_categoryTemplate;
    return this;
}

CategoryTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CategoryTemplateContext.prototype.constructor = CategoryTemplateContext;

CategoryTemplateContext.prototype.prefixTemplate = function() {
    return this.getTypedRuleContext(PrefixTemplateContext,0);
};

CategoryTemplateContext.prototype.postfixTemplate = function() {
    return this.getTypedRuleContext(PostfixTemplateContext,0);
};

CategoryTemplateContext.prototype.prec = function() {
    return this.getTypedRuleContext(PrecContext,0);
};

CategoryTemplateContext.prototype.assoc = function() {
    return this.getTypedRuleContext(AssocContext,0);
};

CategoryTemplateContext.prototype.infixTemplate = function() {
    return this.getTypedRuleContext(InfixTemplateContext,0);
};

CategoryTemplateContext.prototype.nofixTemplate = function() {
    return this.getTypedRuleContext(NofixTemplateContext,0);
};

CategoryTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterCategoryTemplate(this);
	}
};

CategoryTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitCategoryTemplate(this);
	}
};




ZParser.CategoryTemplateContext = CategoryTemplateContext;

ZParser.prototype.categoryTemplate = function() {

    var localctx = new CategoryTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ZParser.RULE_categoryTemplate);
    try {
        this.state = 624;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 617;
            this.prefixTemplate();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 618;
            this.postfixTemplate();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 619;
            this.prec();
            this.state = 620;
            this.assoc();
            this.state = 621;
            this.infixTemplate();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 623;
            this.nofixTemplate();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_prec;
    return this;
}

PrecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrecContext.prototype.constructor = PrecContext;

PrecContext.prototype.NUMERAL = function() {
    return this.getToken(ZParser.NUMERAL, 0);
};

PrecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPrec(this);
	}
};

PrecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPrec(this);
	}
};




ZParser.PrecContext = PrecContext;

ZParser.prototype.prec = function() {

    var localctx = new PrecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ZParser.RULE_prec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        this.match(ZParser.NUMERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssocContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_assoc;
    return this;
}

AssocContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssocContext.prototype.constructor = AssocContext;

AssocContext.prototype.LEFTASSOC = function() {
    return this.getToken(ZParser.LEFTASSOC, 0);
};

AssocContext.prototype.RIGHTASSOC = function() {
    return this.getToken(ZParser.RIGHTASSOC, 0);
};

AssocContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterAssoc(this);
	}
};

AssocContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitAssoc(this);
	}
};




ZParser.AssocContext = AssocContext;

ZParser.prototype.assoc = function() {

    var localctx = new AssocContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ZParser.RULE_assoc);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        _la = this._input.LA(1);
        if(!(_la===ZParser.LEFTASSOC || _la===ZParser.RIGHTASSOC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_template;
    return this;
}

TemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateContext.prototype.constructor = TemplateContext;

TemplateContext.prototype.prefixTemplate = function() {
    return this.getTypedRuleContext(PrefixTemplateContext,0);
};

TemplateContext.prototype.postfixTemplate = function() {
    return this.getTypedRuleContext(PostfixTemplateContext,0);
};

TemplateContext.prototype.infixTemplate = function() {
    return this.getTypedRuleContext(InfixTemplateContext,0);
};

TemplateContext.prototype.nofixTemplate = function() {
    return this.getTypedRuleContext(NofixTemplateContext,0);
};

TemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterTemplate(this);
	}
};

TemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitTemplate(this);
	}
};




ZParser.TemplateContext = TemplateContext;

ZParser.prototype.template = function() {

    var localctx = new TemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ZParser.RULE_template);
    try {
        this.state = 634;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 630;
            this.prefixTemplate();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 631;
            this.postfixTemplate();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 632;
            this.infixTemplate();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 633;
            this.nofixTemplate();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_prefixTemplate;
    return this;
}

PrefixTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixTemplateContext.prototype.constructor = PrefixTemplateContext;

PrefixTemplateContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

PrefixTemplateContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};

PrefixTemplateContext.prototype.prefixName = function() {
    return this.getTypedRuleContext(PrefixNameContext,0);
};

PrefixTemplateContext.prototype.POWERSET = function() {
    return this.getToken(ZParser.POWERSET, 0);
};

PrefixTemplateContext.prototype.ARGUMENT = function() {
    return this.getToken(ZParser.ARGUMENT, 0);
};

PrefixTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPrefixTemplate(this);
	}
};

PrefixTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPrefixTemplate(this);
	}
};




ZParser.PrefixTemplateContext = PrefixTemplateContext;

ZParser.prototype.prefixTemplate = function() {

    var localctx = new PrefixTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ZParser.RULE_prefixTemplate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 636;
        this.match(ZParser.LEFT_PARENTHESIS);
        this.state = 640;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.PREP:
        case ZParser.PRE:
        case ZParser.LP:
        case ZParser.L:
            this.state = 637;
            this.prefixName();
            break;
        case ZParser.POWERSET:
            this.state = 638;
            this.match(ZParser.POWERSET);
            this.state = 639;
            this.match(ZParser.ARGUMENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 642;
        this.match(ZParser.RIGHT_PARENTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_postfixTemplate;
    return this;
}

PostfixTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixTemplateContext.prototype.constructor = PostfixTemplateContext;

PostfixTemplateContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

PostfixTemplateContext.prototype.postfixName = function() {
    return this.getTypedRuleContext(PostfixNameContext,0);
};

PostfixTemplateContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};

PostfixTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPostfixTemplate(this);
	}
};

PostfixTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPostfixTemplate(this);
	}
};




ZParser.PostfixTemplateContext = PostfixTemplateContext;

ZParser.prototype.postfixTemplate = function() {

    var localctx = new PostfixTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ZParser.RULE_postfixTemplate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(ZParser.LEFT_PARENTHESIS);
        this.state = 645;
        this.postfixName();
        this.state = 646;
        this.match(ZParser.RIGHT_PARENTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InfixTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_infixTemplate;
    return this;
}

InfixTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixTemplateContext.prototype.constructor = InfixTemplateContext;

InfixTemplateContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

InfixTemplateContext.prototype.infixName = function() {
    return this.getTypedRuleContext(InfixNameContext,0);
};

InfixTemplateContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};

InfixTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInfixTemplate(this);
	}
};

InfixTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInfixTemplate(this);
	}
};




ZParser.InfixTemplateContext = InfixTemplateContext;

ZParser.prototype.infixTemplate = function() {

    var localctx = new InfixTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ZParser.RULE_infixTemplate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.match(ZParser.LEFT_PARENTHESIS);
        this.state = 649;
        this.infixName();
        this.state = 650;
        this.match(ZParser.RIGHT_PARENTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NofixTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_nofixTemplate;
    return this;
}

NofixTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NofixTemplateContext.prototype.constructor = NofixTemplateContext;

NofixTemplateContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

NofixTemplateContext.prototype.nofixName = function() {
    return this.getTypedRuleContext(NofixNameContext,0);
};

NofixTemplateContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};

NofixTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNofixTemplate(this);
	}
};

NofixTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNofixTemplate(this);
	}
};




ZParser.NofixTemplateContext = NofixTemplateContext;

ZParser.prototype.nofixTemplate = function() {

    var localctx = new NofixTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ZParser.RULE_nofixTemplate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.match(ZParser.LEFT_PARENTHESIS);
        this.state = 653;
        this.nofixName();
        this.state = 654;
        this.match(ZParser.RIGHT_PARENTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_declName;
    return this;
}

DeclNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclNameContext.prototype.constructor = DeclNameContext;

DeclNameContext.prototype.NAME = function() {
    return this.getToken(ZParser.NAME, 0);
};

DeclNameContext.prototype.opName = function() {
    return this.getTypedRuleContext(OpNameContext,0);
};

DeclNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterDeclName(this);
	}
};

DeclNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitDeclName(this);
	}
};




ZParser.DeclNameContext = DeclNameContext;

ZParser.prototype.declName = function() {

    var localctx = new DeclNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ZParser.RULE_declName);
    try {
        this.state = 658;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 656;
            this.match(ZParser.NAME);
            break;
        case ZParser.ARGUMENT:
        case ZParser.PREP:
        case ZParser.PRE:
        case ZParser.LP:
        case ZParser.L:
            this.enterOuterAlt(localctx, 2);
            this.state = 657;
            this.opName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RefNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_refName;
    return this;
}

RefNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RefNameContext.prototype.constructor = RefNameContext;

RefNameContext.prototype.NAME = function() {
    return this.getToken(ZParser.NAME, 0);
};

RefNameContext.prototype.LEFT_PARENTHESIS = function() {
    return this.getToken(ZParser.LEFT_PARENTHESIS, 0);
};

RefNameContext.prototype.opName = function() {
    return this.getTypedRuleContext(OpNameContext,0);
};

RefNameContext.prototype.RIGHT_PARENTHESIS = function() {
    return this.getToken(ZParser.RIGHT_PARENTHESIS, 0);
};

RefNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterRefName(this);
	}
};

RefNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitRefName(this);
	}
};




ZParser.RefNameContext = RefNameContext;

ZParser.prototype.refName = function() {

    var localctx = new RefNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ZParser.RULE_refName);
    try {
        this.state = 665;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 660;
            this.match(ZParser.NAME);
            break;
        case ZParser.LEFT_PARENTHESIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 661;
            this.match(ZParser.LEFT_PARENTHESIS);
            this.state = 662;
            this.opName();
            this.state = 663;
            this.match(ZParser.RIGHT_PARENTHESIS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OpNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_opName;
    return this;
}

OpNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpNameContext.prototype.constructor = OpNameContext;

OpNameContext.prototype.prefixName = function() {
    return this.getTypedRuleContext(PrefixNameContext,0);
};

OpNameContext.prototype.postfixName = function() {
    return this.getTypedRuleContext(PostfixNameContext,0);
};

OpNameContext.prototype.infixName = function() {
    return this.getTypedRuleContext(InfixNameContext,0);
};

OpNameContext.prototype.nofixName = function() {
    return this.getTypedRuleContext(NofixNameContext,0);
};

OpNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterOpName(this);
	}
};

OpNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitOpName(this);
	}
};




ZParser.OpNameContext = OpNameContext;

ZParser.prototype.opName = function() {

    var localctx = new OpNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ZParser.RULE_opName);
    try {
        this.state = 671;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 667;
            this.prefixName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 668;
            this.postfixName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 669;
            this.infixName();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 670;
            this.nofixName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_prefixName;
    return this;
}

PrefixNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixNameContext.prototype.constructor = PrefixNameContext;

PrefixNameContext.prototype.PRE = function() {
    return this.getToken(ZParser.PRE, 0);
};

PrefixNameContext.prototype.ARGUMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ARGUMENT);
    } else {
        return this.getToken(ZParser.ARGUMENT, i);
    }
};


PrefixNameContext.prototype.PREP = function() {
    return this.getToken(ZParser.PREP, 0);
};

PrefixNameContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

PrefixNameContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

PrefixNameContext.prototype.LIST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.LIST);
    } else {
        return this.getToken(ZParser.LIST, i);
    }
};


PrefixNameContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

PrefixNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


PrefixNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


PrefixNameContext.prototype.LP = function() {
    return this.getToken(ZParser.LP, 0);
};

PrefixNameContext.prototype.EREP = function() {
    return this.getToken(ZParser.EREP, 0);
};

PrefixNameContext.prototype.SREP = function() {
    return this.getToken(ZParser.SREP, 0);
};

PrefixNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPrefixName(this);
	}
};

PrefixNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPrefixName(this);
	}
};




ZParser.PrefixNameContext = PrefixNameContext;

ZParser.prototype.prefixName = function() {

    var localctx = new PrefixNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ZParser.RULE_prefixName);
    try {
        this.state = 711;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.PRE:
            this.enterOuterAlt(localctx, 1);
            this.state = 673;
            this.match(ZParser.PRE);
            this.state = 674;
            this.match(ZParser.ARGUMENT);
            break;
        case ZParser.PREP:
            this.enterOuterAlt(localctx, 2);
            this.state = 675;
            this.match(ZParser.PREP);
            this.state = 676;
            this.match(ZParser.ARGUMENT);
            break;
        case ZParser.L:
            this.enterOuterAlt(localctx, 3);
            this.state = 677;
            this.match(ZParser.L);
            this.state = 684;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 682;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 678;
                        this.match(ZParser.ARGUMENT);
                        this.state = 679;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 680;
                        this.match(ZParser.LIST);
                        this.state = 681;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 686;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
            }

            this.state = 691;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 687;
                this.match(ZParser.ARGUMENT);
                this.state = 688;
                this.match(ZParser.ERE);
                break;
            case ZParser.LIST:
                this.state = 689;
                this.match(ZParser.LIST);
                this.state = 690;
                this.match(ZParser.SRE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 693;
            this.match(ZParser.ARGUMENT);
            break;
        case ZParser.LP:
            this.enterOuterAlt(localctx, 4);
            this.state = 694;
            this.match(ZParser.LP);
            this.state = 701;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 699;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 695;
                        this.match(ZParser.ARGUMENT);
                        this.state = 696;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 697;
                        this.match(ZParser.LIST);
                        this.state = 698;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 703;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
            }

            this.state = 708;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 704;
                this.match(ZParser.ARGUMENT);
                this.state = 705;
                this.match(ZParser.EREP);
                break;
            case ZParser.LIST:
                this.state = 706;
                this.match(ZParser.LIST);
                this.state = 707;
                this.match(ZParser.SREP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 710;
            this.match(ZParser.ARGUMENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_postfixName;
    return this;
}

PostfixNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixNameContext.prototype.constructor = PostfixNameContext;

PostfixNameContext.prototype.ARGUMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ARGUMENT);
    } else {
        return this.getToken(ZParser.ARGUMENT, i);
    }
};


PostfixNameContext.prototype.POST = function() {
    return this.getToken(ZParser.POST, 0);
};

PostfixNameContext.prototype.POSTP = function() {
    return this.getToken(ZParser.POSTP, 0);
};

PostfixNameContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

PostfixNameContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

PostfixNameContext.prototype.LIST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.LIST);
    } else {
        return this.getToken(ZParser.LIST, i);
    }
};


PostfixNameContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

PostfixNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


PostfixNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


PostfixNameContext.prototype.ELP = function() {
    return this.getToken(ZParser.ELP, 0);
};

PostfixNameContext.prototype.ERP = function() {
    return this.getToken(ZParser.ERP, 0);
};

PostfixNameContext.prototype.SRP = function() {
    return this.getToken(ZParser.SRP, 0);
};

PostfixNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPostfixName(this);
	}
};

PostfixNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPostfixName(this);
	}
};




ZParser.PostfixNameContext = PostfixNameContext;

ZParser.prototype.postfixName = function() {

    var localctx = new PostfixNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ZParser.RULE_postfixName);
    try {
        this.state = 751;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 713;
            this.match(ZParser.ARGUMENT);
            this.state = 714;
            this.match(ZParser.POST);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 715;
            this.match(ZParser.ARGUMENT);
            this.state = 716;
            this.match(ZParser.POSTP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 717;
            this.match(ZParser.ARGUMENT);
            this.state = 718;
            this.match(ZParser.EL);
            this.state = 725;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 723;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 719;
                        this.match(ZParser.ARGUMENT);
                        this.state = 720;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 721;
                        this.match(ZParser.LIST);
                        this.state = 722;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 727;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
            }

            this.state = 732;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 728;
                this.match(ZParser.ARGUMENT);
                this.state = 729;
                this.match(ZParser.ER);
                break;
            case ZParser.LIST:
                this.state = 730;
                this.match(ZParser.LIST);
                this.state = 731;
                this.match(ZParser.SR);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 734;
            this.match(ZParser.ARGUMENT);
            this.state = 735;
            this.match(ZParser.ELP);
            this.state = 742;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 740;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 736;
                        this.match(ZParser.ARGUMENT);
                        this.state = 737;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 738;
                        this.match(ZParser.LIST);
                        this.state = 739;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 744;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
            }

            this.state = 749;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 745;
                this.match(ZParser.ARGUMENT);
                this.state = 746;
                this.match(ZParser.ERP);
                break;
            case ZParser.LIST:
                this.state = 747;
                this.match(ZParser.LIST);
                this.state = 748;
                this.match(ZParser.SRP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InfixNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_infixName;
    return this;
}

InfixNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixNameContext.prototype.constructor = InfixNameContext;

InfixNameContext.prototype.ARGUMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ARGUMENT);
    } else {
        return this.getToken(ZParser.ARGUMENT, i);
    }
};


InfixNameContext.prototype.I = function() {
    return this.getToken(ZParser.I, 0);
};

InfixNameContext.prototype.IP = function() {
    return this.getToken(ZParser.IP, 0);
};

InfixNameContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

InfixNameContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

InfixNameContext.prototype.LIST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.LIST);
    } else {
        return this.getToken(ZParser.LIST, i);
    }
};


InfixNameContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

InfixNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


InfixNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


InfixNameContext.prototype.ELP = function() {
    return this.getToken(ZParser.ELP, 0);
};

InfixNameContext.prototype.EREP = function() {
    return this.getToken(ZParser.EREP, 0);
};

InfixNameContext.prototype.SREP = function() {
    return this.getToken(ZParser.SREP, 0);
};

InfixNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInfixName(this);
	}
};

InfixNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInfixName(this);
	}
};




ZParser.InfixNameContext = InfixNameContext;

ZParser.prototype.infixName = function() {

    var localctx = new InfixNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ZParser.RULE_infixName);
    try {
        this.state = 795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 753;
            this.match(ZParser.ARGUMENT);
            this.state = 754;
            this.match(ZParser.I);
            this.state = 755;
            this.match(ZParser.ARGUMENT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 756;
            this.match(ZParser.ARGUMENT);
            this.state = 757;
            this.match(ZParser.IP);
            this.state = 758;
            this.match(ZParser.ARGUMENT);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 759;
            this.match(ZParser.ARGUMENT);
            this.state = 760;
            this.match(ZParser.EL);
            this.state = 767;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 765;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 761;
                        this.match(ZParser.ARGUMENT);
                        this.state = 762;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 763;
                        this.match(ZParser.LIST);
                        this.state = 764;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 769;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
            }

            this.state = 774;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 770;
                this.match(ZParser.ARGUMENT);
                this.state = 771;
                this.match(ZParser.ERE);
                break;
            case ZParser.LIST:
                this.state = 772;
                this.match(ZParser.LIST);
                this.state = 773;
                this.match(ZParser.SRE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 776;
            this.match(ZParser.ARGUMENT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 777;
            this.match(ZParser.ARGUMENT);
            this.state = 778;
            this.match(ZParser.ELP);
            this.state = 785;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 783;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 779;
                        this.match(ZParser.ARGUMENT);
                        this.state = 780;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 781;
                        this.match(ZParser.LIST);
                        this.state = 782;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 787;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
            }

            this.state = 792;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 788;
                this.match(ZParser.ARGUMENT);
                this.state = 789;
                this.match(ZParser.EREP);
                break;
            case ZParser.LIST:
                this.state = 790;
                this.match(ZParser.LIST);
                this.state = 791;
                this.match(ZParser.SREP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 794;
            this.match(ZParser.ARGUMENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NofixNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_nofixName;
    return this;
}

NofixNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NofixNameContext.prototype.constructor = NofixNameContext;

NofixNameContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

NofixNameContext.prototype.ARGUMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ARGUMENT);
    } else {
        return this.getToken(ZParser.ARGUMENT, i);
    }
};


NofixNameContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

NofixNameContext.prototype.LIST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.LIST);
    } else {
        return this.getToken(ZParser.LIST, i);
    }
};


NofixNameContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

NofixNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


NofixNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


NofixNameContext.prototype.LP = function() {
    return this.getToken(ZParser.LP, 0);
};

NofixNameContext.prototype.ERP = function() {
    return this.getToken(ZParser.ERP, 0);
};

NofixNameContext.prototype.SRP = function() {
    return this.getToken(ZParser.SRP, 0);
};

NofixNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNofixName(this);
	}
};

NofixNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNofixName(this);
	}
};




ZParser.NofixNameContext = NofixNameContext;

ZParser.prototype.nofixName = function() {

    var localctx = new NofixNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ZParser.RULE_nofixName);
    try {
        this.state = 829;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.L:
            this.enterOuterAlt(localctx, 1);
            this.state = 797;
            this.match(ZParser.L);
            this.state = 804;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 802;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 798;
                        this.match(ZParser.ARGUMENT);
                        this.state = 799;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 800;
                        this.match(ZParser.LIST);
                        this.state = 801;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 806;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
            }

            this.state = 811;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 807;
                this.match(ZParser.ARGUMENT);
                this.state = 808;
                this.match(ZParser.ER);
                break;
            case ZParser.LIST:
                this.state = 809;
                this.match(ZParser.LIST);
                this.state = 810;
                this.match(ZParser.SR);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case ZParser.LP:
            this.enterOuterAlt(localctx, 2);
            this.state = 813;
            this.match(ZParser.LP);
            this.state = 820;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 818;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ZParser.ARGUMENT:
                        this.state = 814;
                        this.match(ZParser.ARGUMENT);
                        this.state = 815;
                        this.match(ZParser.ES);
                        break;
                    case ZParser.LIST:
                        this.state = 816;
                        this.match(ZParser.LIST);
                        this.state = 817;
                        this.match(ZParser.SS);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 822;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
            }

            this.state = 827;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ZParser.ARGUMENT:
                this.state = 823;
                this.match(ZParser.ARGUMENT);
                this.state = 824;
                this.match(ZParser.ERP);
                break;
            case ZParser.LIST:
                this.state = 825;
                this.match(ZParser.LIST);
                this.state = 826;
                this.match(ZParser.SRP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GenNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_genName;
    return this;
}

GenNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenNameContext.prototype.constructor = GenNameContext;

GenNameContext.prototype.prefixGenName = function() {
    return this.getTypedRuleContext(PrefixGenNameContext,0);
};

GenNameContext.prototype.postfixGenName = function() {
    return this.getTypedRuleContext(PostfixGenNameContext,0);
};

GenNameContext.prototype.infixGenName = function() {
    return this.getTypedRuleContext(InfixGenNameContext,0);
};

GenNameContext.prototype.nofixGenName = function() {
    return this.getTypedRuleContext(NofixGenNameContext,0);
};

GenNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterGenName(this);
	}
};

GenNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitGenName(this);
	}
};




ZParser.GenNameContext = GenNameContext;

ZParser.prototype.genName = function() {

    var localctx = new GenNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ZParser.RULE_genName);
    try {
        this.state = 835;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 831;
            this.prefixGenName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 832;
            this.postfixGenName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 833;
            this.infixGenName();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 834;
            this.nofixGenName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixGenNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_prefixGenName;
    return this;
}

PrefixGenNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixGenNameContext.prototype.constructor = PrefixGenNameContext;

PrefixGenNameContext.prototype.PRE = function() {
    return this.getToken(ZParser.PRE, 0);
};

PrefixGenNameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.NAME);
    } else {
        return this.getToken(ZParser.NAME, i);
    }
};


PrefixGenNameContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

PrefixGenNameContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

PrefixGenNameContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

PrefixGenNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


PrefixGenNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


PrefixGenNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPrefixGenName(this);
	}
};

PrefixGenNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPrefixGenName(this);
	}
};




ZParser.PrefixGenNameContext = PrefixGenNameContext;

ZParser.prototype.prefixGenName = function() {

    var localctx = new PrefixGenNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ZParser.RULE_prefixGenName);
    var _la = 0; // Token type
    try {
        this.state = 850;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.PRE:
            this.enterOuterAlt(localctx, 1);
            this.state = 837;
            this.match(ZParser.PRE);
            this.state = 838;
            this.match(ZParser.NAME);
            break;
        case ZParser.L:
            this.enterOuterAlt(localctx, 2);
            this.state = 839;
            this.match(ZParser.L);
            this.state = 844;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 840;
                    this.match(ZParser.NAME);
                    this.state = 841;
                    _la = this._input.LA(1);
                    if(!(_la===ZParser.ES || _la===ZParser.SS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 846;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
            }

            this.state = 847;
            this.match(ZParser.NAME);
            this.state = 848;
            _la = this._input.LA(1);
            if(!(_la===ZParser.ERE || _la===ZParser.SRE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 849;
            this.match(ZParser.NAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixGenNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_postfixGenName;
    return this;
}

PostfixGenNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixGenNameContext.prototype.constructor = PostfixGenNameContext;

PostfixGenNameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.NAME);
    } else {
        return this.getToken(ZParser.NAME, i);
    }
};


PostfixGenNameContext.prototype.POST = function() {
    return this.getToken(ZParser.POST, 0);
};

PostfixGenNameContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

PostfixGenNameContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

PostfixGenNameContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

PostfixGenNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


PostfixGenNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


PostfixGenNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPostfixGenName(this);
	}
};

PostfixGenNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPostfixGenName(this);
	}
};




ZParser.PostfixGenNameContext = PostfixGenNameContext;

ZParser.prototype.postfixGenName = function() {

    var localctx = new PostfixGenNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ZParser.RULE_postfixGenName);
    var _la = 0; // Token type
    try {
        this.state = 865;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 852;
            this.match(ZParser.NAME);
            this.state = 853;
            this.match(ZParser.POST);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 854;
            this.match(ZParser.NAME);
            this.state = 855;
            this.match(ZParser.EL);
            this.state = 860;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 856;
                    this.match(ZParser.NAME);
                    this.state = 857;
                    _la = this._input.LA(1);
                    if(!(_la===ZParser.ES || _la===ZParser.SS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 862;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
            }

            this.state = 863;
            this.match(ZParser.NAME);
            this.state = 864;
            _la = this._input.LA(1);
            if(!(_la===ZParser.ER || _la===ZParser.SR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InfixGenNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_infixGenName;
    return this;
}

InfixGenNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixGenNameContext.prototype.constructor = InfixGenNameContext;

InfixGenNameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.NAME);
    } else {
        return this.getToken(ZParser.NAME, i);
    }
};


InfixGenNameContext.prototype.I = function() {
    return this.getToken(ZParser.I, 0);
};

InfixGenNameContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

InfixGenNameContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

InfixGenNameContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

InfixGenNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


InfixGenNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


InfixGenNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInfixGenName(this);
	}
};

InfixGenNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInfixGenName(this);
	}
};




ZParser.InfixGenNameContext = InfixGenNameContext;

ZParser.prototype.infixGenName = function() {

    var localctx = new InfixGenNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ZParser.RULE_infixGenName);
    var _la = 0; // Token type
    try {
        this.state = 882;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 867;
            this.match(ZParser.NAME);
            this.state = 868;
            this.match(ZParser.I);
            this.state = 869;
            this.match(ZParser.NAME);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 870;
            this.match(ZParser.NAME);
            this.state = 871;
            this.match(ZParser.EL);
            this.state = 876;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 872;
                    this.match(ZParser.NAME);
                    this.state = 873;
                    _la = this._input.LA(1);
                    if(!(_la===ZParser.ES || _la===ZParser.SS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 878;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
            }

            this.state = 879;
            this.match(ZParser.NAME);
            this.state = 880;
            _la = this._input.LA(1);
            if(!(_la===ZParser.ERE || _la===ZParser.SRE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 881;
            this.match(ZParser.NAME);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NofixGenNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_nofixGenName;
    return this;
}

NofixGenNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NofixGenNameContext.prototype.constructor = NofixGenNameContext;

NofixGenNameContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

NofixGenNameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.NAME);
    } else {
        return this.getToken(ZParser.NAME, i);
    }
};


NofixGenNameContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

NofixGenNameContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

NofixGenNameContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


NofixGenNameContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


NofixGenNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNofixGenName(this);
	}
};

NofixGenNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNofixGenName(this);
	}
};




ZParser.NofixGenNameContext = NofixGenNameContext;

ZParser.prototype.nofixGenName = function() {

    var localctx = new NofixGenNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ZParser.RULE_nofixGenName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 884;
        this.match(ZParser.L);
        this.state = 889;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 885;
                this.match(ZParser.NAME);
                this.state = 886;
                _la = this._input.LA(1);
                if(!(_la===ZParser.ES || _la===ZParser.SS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 891;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
        }

        this.state = 892;
        this.match(ZParser.NAME);
        this.state = 893;
        _la = this._input.LA(1);
        if(!(_la===ZParser.ER || _la===ZParser.SR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;

RelationContext.prototype.prefixRel = function() {
    return this.getTypedRuleContext(PrefixRelContext,0);
};

RelationContext.prototype.postfixRel = function() {
    return this.getTypedRuleContext(PostfixRelContext,0);
};

RelationContext.prototype.infixRel = function() {
    return this.getTypedRuleContext(InfixRelContext,0);
};

RelationContext.prototype.nofixRel = function() {
    return this.getTypedRuleContext(NofixRelContext,0);
};

RelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterRelation(this);
	}
};

RelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitRelation(this);
	}
};




ZParser.RelationContext = RelationContext;

ZParser.prototype.relation = function() {

    var localctx = new RelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ZParser.RULE_relation);
    try {
        this.state = 899;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 895;
            this.prefixRel();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 896;
            this.postfixRel();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 897;
            this.infixRel();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 898;
            this.nofixRel();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixRelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_prefixRel;
    return this;
}

PrefixRelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixRelContext.prototype.constructor = PrefixRelContext;

PrefixRelContext.prototype.PREP = function() {
    return this.getToken(ZParser.PREP, 0);
};

PrefixRelContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PrefixRelContext.prototype.LP = function() {
    return this.getToken(ZParser.LP, 0);
};

PrefixRelContext.prototype.EREP = function() {
    return this.getToken(ZParser.EREP, 0);
};

PrefixRelContext.prototype.SREP = function() {
    return this.getToken(ZParser.SREP, 0);
};

PrefixRelContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

PrefixRelContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

PrefixRelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPrefixRel(this);
	}
};

PrefixRelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPrefixRel(this);
	}
};




ZParser.PrefixRelContext = PrefixRelContext;

ZParser.prototype.prefixRel = function() {

    var localctx = new PrefixRelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ZParser.RULE_prefixRel);
    var _la = 0; // Token type
    try {
        this.state = 917;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.PREP:
            this.enterOuterAlt(localctx, 1);
            this.state = 901;
            this.match(ZParser.PREP);
            this.state = 902;
            this.expression(0);
            break;
        case ZParser.LP:
            this.enterOuterAlt(localctx, 2);
            this.state = 903;
            this.match(ZParser.LP);
            this.state = 905;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
            if(la_===1) {
                this.state = 904;
                this.expSep();

            }
            this.state = 914;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
            switch(la_) {
            case 1:
                this.state = 907;
                this.expression(0);
                this.state = 908;
                this.match(ZParser.EREP);
                break;

            case 2:
                this.state = 911;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 910;
                    this.expressionList();
                }

                this.state = 913;
                this.match(ZParser.SREP);
                break;

            }
            this.state = 916;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixRelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_postfixRel;
    return this;
}

PostfixRelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixRelContext.prototype.constructor = PostfixRelContext;

PostfixRelContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PostfixRelContext.prototype.POSTP = function() {
    return this.getToken(ZParser.POSTP, 0);
};

PostfixRelContext.prototype.ELP = function() {
    return this.getToken(ZParser.ELP, 0);
};

PostfixRelContext.prototype.ERP = function() {
    return this.getToken(ZParser.ERP, 0);
};

PostfixRelContext.prototype.SRP = function() {
    return this.getToken(ZParser.SRP, 0);
};

PostfixRelContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

PostfixRelContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

PostfixRelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPostfixRel(this);
	}
};

PostfixRelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPostfixRel(this);
	}
};




ZParser.PostfixRelContext = PostfixRelContext;

ZParser.prototype.postfixRel = function() {

    var localctx = new PostfixRelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ZParser.RULE_postfixRel);
    var _la = 0; // Token type
    try {
        this.state = 936;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 919;
            this.expression(0);
            this.state = 920;
            this.match(ZParser.POSTP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 922;
            this.expression(0);
            this.state = 923;
            this.match(ZParser.ELP);
            this.state = 925;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
            if(la_===1) {
                this.state = 924;
                this.expSep();

            }
            this.state = 934;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
            switch(la_) {
            case 1:
                this.state = 927;
                this.expression(0);
                this.state = 928;
                this.match(ZParser.ERP);
                break;

            case 2:
                this.state = 931;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 930;
                    this.expressionList();
                }

                this.state = 933;
                this.match(ZParser.SRP);
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InfixRelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_infixRel;
    return this;
}

InfixRelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixRelContext.prototype.constructor = InfixRelContext;

InfixRelContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InfixRelContext.prototype.ELEMENT_OF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ELEMENT_OF);
    } else {
        return this.getToken(ZParser.ELEMENT_OF, i);
    }
};


InfixRelContext.prototype.EQUALS_SIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.EQUALS_SIGN);
    } else {
        return this.getToken(ZParser.EQUALS_SIGN, i);
    }
};


InfixRelContext.prototype.IP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.IP);
    } else {
        return this.getToken(ZParser.IP, i);
    }
};


InfixRelContext.prototype.ELP = function() {
    return this.getToken(ZParser.ELP, 0);
};

InfixRelContext.prototype.EREP = function() {
    return this.getToken(ZParser.EREP, 0);
};

InfixRelContext.prototype.SREP = function() {
    return this.getToken(ZParser.SREP, 0);
};

InfixRelContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

InfixRelContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

InfixRelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInfixRel(this);
	}
};

InfixRelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInfixRel(this);
	}
};




ZParser.InfixRelContext = InfixRelContext;

ZParser.prototype.infixRel = function() {

    var localctx = new InfixRelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ZParser.RULE_infixRel);
    var _la = 0; // Token type
    try {
        this.state = 986;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 938;
            this.expression(0);
            this.state = 939;
            if (!( ZSupport.isLeftAssociative(_input))) {
                throw new antlr4.error.FailedPredicateException(this, "ZSupport.isLeftAssociative(_input)");
            }
            this.state = 942; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 940;
            		_la = this._input.LA(1);
            		if(!(_la===ZParser.EQUALS_SIGN || _la===ZParser.ELEMENT_OF || _la===ZParser.IP)) {
            		this._errHandler.recoverInline(this);
            		}
            		else {
            			this._errHandler.reportMatch(this);
            		    this.consume();
            		}
            		this.state = 941;
            		this.expression(0);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 944; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,107, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 946;
            this.expression(0);
            this.state = 949; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 947;
            		_la = this._input.LA(1);
            		if(!(_la===ZParser.EQUALS_SIGN || _la===ZParser.ELEMENT_OF || _la===ZParser.IP)) {
            		this._errHandler.recoverInline(this);
            		}
            		else {
            			this._errHandler.reportMatch(this);
            		    this.consume();
            		}
            		this.state = 948;
            		this.expression(0);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 951; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,108, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 953;
            this.expression(0);
            this.state = 954;
            if (!( ZSupport.isLeftAssociative(_input))) {
                throw new antlr4.error.FailedPredicateException(this, "ZSupport.isLeftAssociative(_input)");
            }
            this.state = 955;
            this.match(ZParser.ELP);
            this.state = 957;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            if(la_===1) {
                this.state = 956;
                this.expSep();

            }
            this.state = 966;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
            switch(la_) {
            case 1:
                this.state = 959;
                this.expression(0);
                this.state = 960;
                this.match(ZParser.EREP);
                break;

            case 2:
                this.state = 963;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 962;
                    this.expressionList();
                }

                this.state = 965;
                this.match(ZParser.SREP);
                break;

            }
            this.state = 968;
            this.expression(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 970;
            this.expression(0);
            this.state = 971;
            this.match(ZParser.ELP);
            this.state = 973;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
            if(la_===1) {
                this.state = 972;
                this.expSep();

            }
            this.state = 982;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
            switch(la_) {
            case 1:
                this.state = 975;
                this.expression(0);
                this.state = 976;
                this.match(ZParser.EREP);
                break;

            case 2:
                this.state = 979;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 978;
                    this.expressionList();
                }

                this.state = 981;
                this.match(ZParser.SREP);
                break;

            }
            this.state = 984;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NofixRelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_nofixRel;
    return this;
}

NofixRelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NofixRelContext.prototype.constructor = NofixRelContext;

NofixRelContext.prototype.LP = function() {
    return this.getToken(ZParser.LP, 0);
};

NofixRelContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NofixRelContext.prototype.ERP = function() {
    return this.getToken(ZParser.ERP, 0);
};

NofixRelContext.prototype.SRP = function() {
    return this.getToken(ZParser.SRP, 0);
};

NofixRelContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

NofixRelContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

NofixRelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNofixRel(this);
	}
};

NofixRelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNofixRel(this);
	}
};




ZParser.NofixRelContext = NofixRelContext;

ZParser.prototype.nofixRel = function() {

    var localctx = new NofixRelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ZParser.RULE_nofixRel);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 988;
        this.match(ZParser.LP);
        this.state = 990;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 989;
            this.expSep();

        }
        this.state = 999;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.state = 992;
            this.expression(0);
            this.state = 993;
            this.match(ZParser.ERP);
            break;

        case 2:
            this.state = 996;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                this.state = 995;
                this.expressionList();
            }

            this.state = 998;
            this.match(ZParser.SRP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ApplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_application;
    return this;
}

ApplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApplicationContext.prototype.constructor = ApplicationContext;

ApplicationContext.prototype.prefixApp = function() {
    return this.getTypedRuleContext(PrefixAppContext,0);
};

ApplicationContext.prototype.postfixApp = function() {
    return this.getTypedRuleContext(PostfixAppContext,0);
};

ApplicationContext.prototype.infixApp = function() {
    return this.getTypedRuleContext(InfixAppContext,0);
};

ApplicationContext.prototype.nofixApp = function() {
    return this.getTypedRuleContext(NofixAppContext,0);
};

ApplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterApplication(this);
	}
};

ApplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitApplication(this);
	}
};




ZParser.ApplicationContext = ApplicationContext;

ZParser.prototype.application = function() {

    var localctx = new ApplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ZParser.RULE_application);
    try {
        this.state = 1005;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1001;
            this.prefixApp();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1002;
            this.postfixApp();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1003;
            this.infixApp();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1004;
            this.nofixApp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixAppContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_prefixApp;
    return this;
}

PrefixAppContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixAppContext.prototype.constructor = PrefixAppContext;

PrefixAppContext.prototype.PRE = function() {
    return this.getToken(ZParser.PRE, 0);
};

PrefixAppContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PrefixAppContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

PrefixAppContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

PrefixAppContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

PrefixAppContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

PrefixAppContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

PrefixAppContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPrefixApp(this);
	}
};

PrefixAppContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPrefixApp(this);
	}
};




ZParser.PrefixAppContext = PrefixAppContext;

ZParser.prototype.prefixApp = function() {

    var localctx = new PrefixAppContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ZParser.RULE_prefixApp);
    var _la = 0; // Token type
    try {
        this.state = 1023;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ZParser.PRE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1007;
            this.match(ZParser.PRE);
            this.state = 1008;
            this.expression(0);
            break;
        case ZParser.L:
            this.enterOuterAlt(localctx, 2);
            this.state = 1009;
            this.match(ZParser.L);
            this.state = 1011;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
            if(la_===1) {
                this.state = 1010;
                this.expSep();

            }
            this.state = 1020;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1013;
                this.expression(0);
                this.state = 1014;
                this.match(ZParser.ERE);
                break;

            case 2:
                this.state = 1017;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 1016;
                    this.expressionList();
                }

                this.state = 1019;
                this.match(ZParser.SRE);
                break;

            }
            this.state = 1022;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixAppContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_postfixApp;
    return this;
}

PostfixAppContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixAppContext.prototype.constructor = PostfixAppContext;

PostfixAppContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PostfixAppContext.prototype.POST = function() {
    return this.getToken(ZParser.POST, 0);
};

PostfixAppContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

PostfixAppContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

PostfixAppContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

PostfixAppContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

PostfixAppContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

PostfixAppContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterPostfixApp(this);
	}
};

PostfixAppContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitPostfixApp(this);
	}
};




ZParser.PostfixAppContext = PostfixAppContext;

ZParser.prototype.postfixApp = function() {

    var localctx = new PostfixAppContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ZParser.RULE_postfixApp);
    var _la = 0; // Token type
    try {
        this.state = 1042;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1025;
            this.expression(0);
            this.state = 1026;
            this.match(ZParser.POST);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1028;
            this.expression(0);
            this.state = 1029;
            this.match(ZParser.EL);
            this.state = 1031;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
            if(la_===1) {
                this.state = 1030;
                this.expSep();

            }
            this.state = 1040;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1033;
                this.expression(0);
                this.state = 1034;
                this.match(ZParser.ER);
                break;

            case 2:
                this.state = 1037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 1036;
                    this.expressionList();
                }

                this.state = 1039;
                this.match(ZParser.SR);
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InfixAppContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_infixApp;
    return this;
}

InfixAppContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixAppContext.prototype.constructor = InfixAppContext;

InfixAppContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InfixAppContext.prototype.I = function() {
    return this.getToken(ZParser.I, 0);
};

InfixAppContext.prototype.EL = function() {
    return this.getToken(ZParser.EL, 0);
};

InfixAppContext.prototype.ERE = function() {
    return this.getToken(ZParser.ERE, 0);
};

InfixAppContext.prototype.SRE = function() {
    return this.getToken(ZParser.SRE, 0);
};

InfixAppContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

InfixAppContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

InfixAppContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterInfixApp(this);
	}
};

InfixAppContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitInfixApp(this);
	}
};




ZParser.InfixAppContext = InfixAppContext;

ZParser.prototype.infixApp = function() {

    var localctx = new InfixAppContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ZParser.RULE_infixApp);
    var _la = 0; // Token type
    try {
        this.state = 1064;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1044;
            this.expression(0);
            this.state = 1045;
            this.match(ZParser.I);
            this.state = 1046;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1048;
            this.expression(0);
            this.state = 1049;
            this.match(ZParser.EL);
            this.state = 1051;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
            if(la_===1) {
                this.state = 1050;
                this.expSep();

            }
            this.state = 1060;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1053;
                this.expression(0);
                this.state = 1054;
                this.match(ZParser.ERE);
                break;

            case 2:
                this.state = 1057;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                    this.state = 1056;
                    this.expressionList();
                }

                this.state = 1059;
                this.match(ZParser.SRE);
                break;

            }
            this.state = 1062;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NofixAppContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_nofixApp;
    return this;
}

NofixAppContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NofixAppContext.prototype.constructor = NofixAppContext;

NofixAppContext.prototype.L = function() {
    return this.getToken(ZParser.L, 0);
};

NofixAppContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NofixAppContext.prototype.ER = function() {
    return this.getToken(ZParser.ER, 0);
};

NofixAppContext.prototype.SR = function() {
    return this.getToken(ZParser.SR, 0);
};

NofixAppContext.prototype.expSep = function() {
    return this.getTypedRuleContext(ExpSepContext,0);
};

NofixAppContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

NofixAppContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterNofixApp(this);
	}
};

NofixAppContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitNofixApp(this);
	}
};




ZParser.NofixAppContext = NofixAppContext;

ZParser.prototype.nofixApp = function() {

    var localctx = new NofixAppContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ZParser.RULE_nofixApp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1066;
        this.match(ZParser.L);
        this.state = 1068;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        if(la_===1) {
            this.state = 1067;
            this.expSep();

        }
        this.state = 1077;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1070;
            this.expression(0);
            this.state = 1071;
            this.match(ZParser.ER);
            break;

        case 2:
            this.state = 1074;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
                this.state = 1073;
                this.expressionList();
            }

            this.state = 1076;
            this.match(ZParser.SR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpSepContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_expSep;
    return this;
}

ExpSepContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpSepContext.prototype.constructor = ExpSepContext;

ExpSepContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpSepContext.prototype.ES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.ES);
    } else {
        return this.getToken(ZParser.ES, i);
    }
};


ExpSepContext.prototype.SS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.SS);
    } else {
        return this.getToken(ZParser.SS, i);
    }
};


ExpSepContext.prototype.expressionList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionListContext);
    } else {
        return this.getTypedRuleContext(ExpressionListContext,i);
    }
};

ExpSepContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterExpSep(this);
	}
};

ExpSepContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitExpSep(this);
	}
};




ZParser.ExpSepContext = ExpSepContext;

ZParser.prototype.expSep = function() {

    var localctx = new ExpSepContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ZParser.RULE_expSep);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1086;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 1079;
        		    this.expression(0);
        		    this.state = 1080;
        		    this.match(ZParser.ES);
        		    break;

        		case 2:
        		    this.state = 1083;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ZParser.NUMERAL) | (1 << ZParser.LEFT_PARENTHESIS) | (1 << ZParser.LEFT_SQUARE_BRACKET) | (1 << ZParser.LEFT_CURLY_BRACKET) | (1 << ZParser.LEFT_BINDING_BRACKET) | (1 << ZParser.IF) | (1 << ZParser.LET) | (1 << ZParser.POWERSET) | (1 << ZParser.PRE_KEY))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ZParser.FOR_ALL - 51)) | (1 << (ZParser.THERE_EXISTS - 51)) | (1 << (ZParser.UNIQUE_EXISTS - 51)) | (1 << (ZParser.NOT_SIGN - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParser.GREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParser.NAME - 51)))) !== 0) || _la===ZParser.PRE || _la===ZParser.L) {
        		        this.state = 1082;
        		        this.expressionList();
        		    }

        		    this.state = 1085;
        		    this.match(ZParser.SS);
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1088; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,137, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ZParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ZParser.COMMA);
    } else {
        return this.getToken(ZParser.COMMA, i);
    }
};


ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ZParserListener ) {
        listener.exitExpressionList(this);
	}
};




ZParser.ExpressionListContext = ExpressionListContext;

ZParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ZParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1090;
        this.expression(0);
        this.state = 1095;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ZParser.COMMA) {
            this.state = 1091;
            this.match(ZParser.COMMA);
            this.state = 1092;
            this.expression(0);
            this.state = 1097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ZParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 6:
			return this.predicate_sempred(localctx, predIndex);
	case 7:
			return this.expression_sempred(localctx, predIndex);
	case 36:
			return this.infixRel_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ZParser.prototype.predicate_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 15);
		case 1:
			return this.precpred(this._ctx, 14);
		case 2:
			return this.precpred(this._ctx, 10);
		case 3:
			return this.precpred(this._ctx, 9);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ZParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 38);
		case 7:
			return this.precpred(this._ctx, 37);
		case 8:
			return this.precpred(this._ctx, 36);
		case 9:
			return this.precpred(this._ctx, 35);
		case 10:
			return this.precpred(this._ctx, 32);
		case 11:
			return this.precpred(this._ctx, 31);
		case 12:
			return this.precpred(this._ctx, 29);
		case 13:
			return this.precpred(this._ctx, 21);
		case 14:
			return ZSupport.isLeftAssociative(_input);
		case 15:
			return this.precpred(this._ctx, 20);
		case 16:
			return this.precpred(this._ctx, 19);
		case 17:
			return this.precpred(this._ctx, 17);
		case 18:
			return this.precpred(this._ctx, 30);
		case 19:
			return this.precpred(this._ctx, 27);
		case 20:
			return this.precpred(this._ctx, 23);
		case 21:
			return this.precpred(this._ctx, 22);
		case 22:
			return this.precpred(this._ctx, 16);
		case 23:
			return this.precpred(this._ctx, 15);
		case 24:
			return this.precpred(this._ctx, 14);
		case 25:
			return this.precpred(this._ctx, 13);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ZParser.prototype.infixRel_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return ZSupport.isLeftAssociative(_input);
		case 27:
			return ZSupport.isLeftAssociative(_input);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ZParser = ZParser;
