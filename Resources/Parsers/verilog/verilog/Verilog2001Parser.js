"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/verilog/verilog/Verilog2001.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATN_1 = require("antlr4ts/atn/ATN");
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var NoViableAltException_1 = require("antlr4ts/NoViableAltException");
var Parser_1 = require("antlr4ts/Parser");
var ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
var ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
var RecognitionException_1 = require("antlr4ts/RecognitionException");
var Token_1 = require("antlr4ts/Token");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var Verilog2001Parser = /** @class */ (function (_super) {
    __extends(Verilog2001Parser, _super);
    function Verilog2001Parser(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new ParserATNSimulator_1.ParserATNSimulator(Verilog2001Parser._ATN, _this);
        return _this;
    }
    Object.defineProperty(Verilog2001Parser.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return Verilog2001Parser.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Verilog2001Parser.prototype, "grammarFileName", {
        // tslint:enable:no-trailing-whitespace
        // @Override
        get: function () { return "Verilog2001.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Verilog2001Parser.prototype, "ruleNames", {
        // @Override
        get: function () { return Verilog2001Parser.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Verilog2001Parser.prototype, "serializedATN", {
        // @Override
        get: function () { return Verilog2001Parser._serializedATN; },
        enumerable: true,
        configurable: true
    });
    // @RuleVersion(0)
    Verilog2001Parser.prototype.config_declaration = function () {
        var _localctx = new Config_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, Verilog2001Parser.RULE_config_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 618;
                this.match(Verilog2001Parser.T__0);
                this.state = 619;
                this.config_identifier();
                this.state = 620;
                this.match(Verilog2001Parser.T__1);
                this.state = 621;
                this.design_statement();
                this.state = 625;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__6) | (1 << Verilog2001Parser.T__8))) !== 0)) {
                    {
                        {
                            this.state = 622;
                            this.config_rule_statement();
                        }
                    }
                    this.state = 627;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 628;
                this.match(Verilog2001Parser.T__2);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.design_statement = function () {
        var _localctx = new Design_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, Verilog2001Parser.RULE_design_statement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 630;
                this.match(Verilog2001Parser.T__3);
                this.state = 639;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        {
                            this.state = 634;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 1, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 631;
                                        this.library_identifier();
                                        this.state = 632;
                                        this.match(Verilog2001Parser.T__4);
                                    }
                                    break;
                            }
                            this.state = 636;
                            this.cell_identifier();
                        }
                    }
                    this.state = 641;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 642;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.config_rule_statement = function () {
        var _localctx = new Config_rule_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, Verilog2001Parser.RULE_config_rule_statement);
        try {
            this.state = 659;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 644;
                        this.default_clause();
                        this.state = 645;
                        this.liblist_clause();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 647;
                        this.inst_clause();
                        this.state = 648;
                        this.liblist_clause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 650;
                        this.inst_clause();
                        this.state = 651;
                        this.use_clause();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 653;
                        this.cell_clause();
                        this.state = 654;
                        this.liblist_clause();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 656;
                        this.cell_clause();
                        this.state = 657;
                        this.use_clause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.default_clause = function () {
        var _localctx = new Default_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, Verilog2001Parser.RULE_default_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 661;
                this.match(Verilog2001Parser.T__5);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.inst_clause = function () {
        var _localctx = new Inst_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, Verilog2001Parser.RULE_inst_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 663;
                this.match(Verilog2001Parser.T__6);
                this.state = 664;
                this.inst_name();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.inst_name = function () {
        var _localctx = new Inst_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, Verilog2001Parser.RULE_inst_name);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 666;
                this.topmodule_identifier();
                this.state = 671;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__4) {
                    {
                        {
                            this.state = 667;
                            this.match(Verilog2001Parser.T__4);
                            this.state = 668;
                            this.instance_identifier();
                        }
                    }
                    this.state = 673;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.liblist_clause = function () {
        var _localctx = new Liblist_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, Verilog2001Parser.RULE_liblist_clause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 674;
                this.match(Verilog2001Parser.T__7);
                this.state = 678;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        {
                            this.state = 675;
                            this.library_identifier();
                        }
                    }
                    this.state = 680;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.cell_clause = function () {
        var _localctx = new Cell_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, Verilog2001Parser.RULE_cell_clause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 681;
                this.match(Verilog2001Parser.T__8);
                this.state = 685;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                    case 1:
                        {
                            this.state = 682;
                            this.library_identifier();
                            this.state = 683;
                            this.match(Verilog2001Parser.T__4);
                        }
                        break;
                }
                this.state = 687;
                this.cell_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.use_clause = function () {
        var _localctx = new Use_clauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, Verilog2001Parser.RULE_use_clause);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 689;
                this.match(Verilog2001Parser.T__9);
                this.state = 693;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
                    case 1:
                        {
                            this.state = 690;
                            this.library_identifier();
                            this.state = 691;
                            this.match(Verilog2001Parser.T__4);
                        }
                        break;
                }
                this.state = 695;
                this.cell_identifier();
                this.state = 697;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__10) {
                    {
                        this.state = 696;
                        this.match(Verilog2001Parser.T__10);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.source_text = function () {
        var _localctx = new Source_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, Verilog2001Parser.RULE_source_text);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 700;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__165) {
                    {
                        this.state = 699;
                        this.timing_spec();
                    }
                }
                this.state = 705;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__12) | (1 << Verilog2001Parser.T__13) | (1 << Verilog2001Parser.T__15))) !== 0)) {
                    {
                        {
                            this.state = 702;
                            this.description();
                        }
                    }
                    this.state = 707;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 708;
                this.match(Verilog2001Parser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.description = function () {
        var _localctx = new DescriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, Verilog2001Parser.RULE_description);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 710;
                this.module_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_declaration = function () {
        var _localctx = new Module_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, Verilog2001Parser.RULE_module_declaration);
        var _la;
        try {
            this.state = 758;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 19, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 715;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 712;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 717;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 718;
                        this.module_keyword();
                        this.state = 719;
                        this.module_identifier();
                        this.state = 721;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 720;
                                this.module_parameter_port_list();
                            }
                        }
                        this.state = 724;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 723;
                                this.list_of_ports();
                            }
                        }
                        this.state = 726;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 730;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__22) | (1 << Verilog2001Parser.T__23) | (1 << Verilog2001Parser.T__25) | (1 << Verilog2001Parser.T__26) | (1 << Verilog2001Parser.T__27) | (1 << Verilog2001Parser.T__28) | (1 << Verilog2001Parser.T__29) | (1 << Verilog2001Parser.T__30))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (Verilog2001Parser.T__31 - 32)) | (1 << (Verilog2001Parser.T__32 - 32)) | (1 << (Verilog2001Parser.T__33 - 32)) | (1 << (Verilog2001Parser.T__34 - 32)) | (1 << (Verilog2001Parser.T__35 - 32)) | (1 << (Verilog2001Parser.T__36 - 32)) | (1 << (Verilog2001Parser.T__37 - 32)) | (1 << (Verilog2001Parser.T__40 - 32)) | (1 << (Verilog2001Parser.T__41 - 32)) | (1 << (Verilog2001Parser.T__42 - 32)) | (1 << (Verilog2001Parser.T__43 - 32)) | (1 << (Verilog2001Parser.T__44 - 32)) | (1 << (Verilog2001Parser.T__45 - 32)) | (1 << (Verilog2001Parser.T__46 - 32)) | (1 << (Verilog2001Parser.T__47 - 32)) | (1 << (Verilog2001Parser.T__48 - 32)) | (1 << (Verilog2001Parser.T__49 - 32)))) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & ((1 << (Verilog2001Parser.T__65 - 66)) | (1 << (Verilog2001Parser.T__68 - 66)) | (1 << (Verilog2001Parser.T__70 - 66)) | (1 << (Verilog2001Parser.T__71 - 66)) | (1 << (Verilog2001Parser.T__72 - 66)) | (1 << (Verilog2001Parser.T__73 - 66)) | (1 << (Verilog2001Parser.T__74 - 66)) | (1 << (Verilog2001Parser.T__75 - 66)) | (1 << (Verilog2001Parser.T__76 - 66)) | (1 << (Verilog2001Parser.T__77 - 66)) | (1 << (Verilog2001Parser.T__78 - 66)) | (1 << (Verilog2001Parser.T__79 - 66)) | (1 << (Verilog2001Parser.T__80 - 66)) | (1 << (Verilog2001Parser.T__81 - 66)) | (1 << (Verilog2001Parser.T__82 - 66)) | (1 << (Verilog2001Parser.T__83 - 66)) | (1 << (Verilog2001Parser.T__84 - 66)) | (1 << (Verilog2001Parser.T__85 - 66)) | (1 << (Verilog2001Parser.T__86 - 66)) | (1 << (Verilog2001Parser.T__87 - 66)) | (1 << (Verilog2001Parser.T__88 - 66)) | (1 << (Verilog2001Parser.T__89 - 66)) | (1 << (Verilog2001Parser.T__90 - 66)) | (1 << (Verilog2001Parser.T__91 - 66)) | (1 << (Verilog2001Parser.T__92 - 66)) | (1 << (Verilog2001Parser.T__93 - 66)) | (1 << (Verilog2001Parser.T__94 - 66)) | (1 << (Verilog2001Parser.T__95 - 66)) | (1 << (Verilog2001Parser.T__96 - 66)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (Verilog2001Parser.T__105 - 106)) | (1 << (Verilog2001Parser.T__106 - 106)) | (1 << (Verilog2001Parser.T__107 - 106)) | (1 << (Verilog2001Parser.T__126 - 106)))) !== 0) || _la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                            {
                                {
                                    this.state = 727;
                                    this.module_item();
                                }
                            }
                            this.state = 732;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 733;
                        this.match(Verilog2001Parser.T__11);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 738;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 735;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 740;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 741;
                        this.module_keyword();
                        this.state = 742;
                        this.module_identifier();
                        this.state = 744;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 743;
                                this.module_parameter_port_list();
                            }
                        }
                        this.state = 747;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 746;
                                this.list_of_port_declarations();
                            }
                        }
                        this.state = 749;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 753;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__22) | (1 << Verilog2001Parser.T__23) | (1 << Verilog2001Parser.T__25) | (1 << Verilog2001Parser.T__26) | (1 << Verilog2001Parser.T__27) | (1 << Verilog2001Parser.T__28) | (1 << Verilog2001Parser.T__29) | (1 << Verilog2001Parser.T__30))) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (Verilog2001Parser.T__34 - 35)) | (1 << (Verilog2001Parser.T__35 - 35)) | (1 << (Verilog2001Parser.T__36 - 35)) | (1 << (Verilog2001Parser.T__37 - 35)) | (1 << (Verilog2001Parser.T__40 - 35)) | (1 << (Verilog2001Parser.T__41 - 35)) | (1 << (Verilog2001Parser.T__42 - 35)) | (1 << (Verilog2001Parser.T__43 - 35)) | (1 << (Verilog2001Parser.T__44 - 35)) | (1 << (Verilog2001Parser.T__45 - 35)) | (1 << (Verilog2001Parser.T__46 - 35)) | (1 << (Verilog2001Parser.T__47 - 35)) | (1 << (Verilog2001Parser.T__48 - 35)) | (1 << (Verilog2001Parser.T__49 - 35)) | (1 << (Verilog2001Parser.T__65 - 35)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (Verilog2001Parser.T__68 - 69)) | (1 << (Verilog2001Parser.T__70 - 69)) | (1 << (Verilog2001Parser.T__71 - 69)) | (1 << (Verilog2001Parser.T__72 - 69)) | (1 << (Verilog2001Parser.T__73 - 69)) | (1 << (Verilog2001Parser.T__74 - 69)) | (1 << (Verilog2001Parser.T__75 - 69)) | (1 << (Verilog2001Parser.T__76 - 69)) | (1 << (Verilog2001Parser.T__77 - 69)) | (1 << (Verilog2001Parser.T__78 - 69)) | (1 << (Verilog2001Parser.T__79 - 69)) | (1 << (Verilog2001Parser.T__80 - 69)) | (1 << (Verilog2001Parser.T__81 - 69)) | (1 << (Verilog2001Parser.T__82 - 69)) | (1 << (Verilog2001Parser.T__83 - 69)) | (1 << (Verilog2001Parser.T__84 - 69)) | (1 << (Verilog2001Parser.T__85 - 69)) | (1 << (Verilog2001Parser.T__86 - 69)) | (1 << (Verilog2001Parser.T__87 - 69)) | (1 << (Verilog2001Parser.T__88 - 69)) | (1 << (Verilog2001Parser.T__89 - 69)) | (1 << (Verilog2001Parser.T__90 - 69)) | (1 << (Verilog2001Parser.T__91 - 69)) | (1 << (Verilog2001Parser.T__92 - 69)) | (1 << (Verilog2001Parser.T__93 - 69)) | (1 << (Verilog2001Parser.T__94 - 69)) | (1 << (Verilog2001Parser.T__95 - 69)) | (1 << (Verilog2001Parser.T__96 - 69)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (Verilog2001Parser.T__105 - 106)) | (1 << (Verilog2001Parser.T__106 - 106)) | (1 << (Verilog2001Parser.T__107 - 106)) | (1 << (Verilog2001Parser.T__126 - 106)))) !== 0) || _la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                            {
                                {
                                    this.state = 750;
                                    this.non_port_module_item();
                                }
                            }
                            this.state = 755;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 756;
                        this.match(Verilog2001Parser.T__11);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_keyword = function () {
        var _localctx = new Module_keywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, Verilog2001Parser.RULE_module_keyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 760;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.T__12 || _la === Verilog2001Parser.T__13)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_parameter_port_list = function () {
        var _localctx = new Module_parameter_port_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, Verilog2001Parser.RULE_module_parameter_port_list);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 762;
                this.match(Verilog2001Parser.T__14);
                this.state = 763;
                this.match(Verilog2001Parser.T__15);
                this.state = 764;
                this.parameter_declaration_();
                this.state = 769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 765;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 766;
                            this.parameter_declaration_();
                        }
                    }
                    this.state = 771;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 772;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_ports = function () {
        var _localctx = new List_of_portsContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, Verilog2001Parser.RULE_list_of_ports);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 774;
                this.match(Verilog2001Parser.T__15);
                this.state = 775;
                this.port();
                this.state = 780;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 776;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 777;
                            this.port();
                        }
                    }
                    this.state = 782;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 783;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_port_declarations = function () {
        var _localctx = new List_of_port_declarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, Verilog2001Parser.RULE_list_of_port_declarations);
        var _la;
        try {
            this.state = 798;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 23, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 785;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 786;
                        this.port_declaration();
                        this.state = 791;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 787;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 788;
                                    this.port_declaration();
                                }
                            }
                            this.state = 793;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 794;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 796;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 797;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.port = function () {
        var _localctx = new PortContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, Verilog2001Parser.RULE_port);
        var _la;
        try {
            this.state = 811;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__16:
                case Verilog2001Parser.T__17:
                case Verilog2001Parser.T__18:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 801;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__18 || _la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                            {
                                this.state = 800;
                                this.port_expression();
                            }
                        }
                    }
                    break;
                case Verilog2001Parser.T__4:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 803;
                        this.match(Verilog2001Parser.T__4);
                        this.state = 804;
                        this.port_identifier();
                        this.state = 805;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 807;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__18 || _la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                            {
                                this.state = 806;
                                this.port_expression();
                            }
                        }
                        this.state = 809;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.port_expression = function () {
        var _localctx = new Port_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, Verilog2001Parser.RULE_port_expression);
        var _la;
        try {
            this.state = 825;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 813;
                        this.port_reference();
                    }
                    break;
                case Verilog2001Parser.T__18:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 814;
                        this.match(Verilog2001Parser.T__18);
                        this.state = 815;
                        this.port_reference();
                        this.state = 820;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 816;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 817;
                                    this.port_reference();
                                }
                            }
                            this.state = 822;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 823;
                        this.match(Verilog2001Parser.T__19);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.port_reference = function () {
        var _localctx = new Port_referenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, Verilog2001Parser.RULE_port_reference);
        try {
            this.state = 838;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 29, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 827;
                        this.port_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 828;
                        this.port_identifier();
                        this.state = 829;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 830;
                        this.constant_expression();
                        this.state = 831;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 833;
                        this.port_identifier();
                        this.state = 834;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 835;
                        this.range_expression();
                        this.state = 836;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.port_declaration = function () {
        var _localctx = new Port_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, Verilog2001Parser.RULE_port_declaration);
        var _la;
        try {
            this.state = 861;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 33, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 843;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 840;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 845;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 846;
                        this.inout_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 850;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 847;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 852;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 853;
                        this.input_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 857;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 854;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 859;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 860;
                        this.output_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_item = function () {
        var _localctx = new Module_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, Verilog2001Parser.RULE_module_item);
        var _la;
        try {
            this.state = 902;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 39, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 863;
                        this.module_or_generate_item();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 864;
                        this.port_declaration();
                        this.state = 865;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 870;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 867;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 872;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 873;
                        this.generated_instantiation();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 877;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 874;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 879;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 880;
                        this.local_parameter_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 884;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 881;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 886;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 887;
                        this.parameter_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 891;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 888;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 893;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 894;
                        this.specify_block();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 898;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 895;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 900;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 901;
                        this.specparam_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_or_generate_item = function () {
        var _localctx = new Module_or_generate_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, Verilog2001Parser.RULE_module_or_generate_item);
        var _la;
        try {
            this.state = 953;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 907;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 904;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 909;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 910;
                        this.module_or_generate_item_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 914;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 911;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 916;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 917;
                        this.parameter_override();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 921;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 918;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 923;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 924;
                        this.continuous_assign();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 928;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 925;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 930;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 931;
                        this.gate_instantiation();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 935;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 932;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 937;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 938;
                        this.module_instantiation();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 942;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 939;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 944;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 945;
                        this.initial_construct();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 949;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 946;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 951;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 952;
                        this.always_construct();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.non_port_module_item = function () {
        var _localctx = new Non_port_module_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, Verilog2001Parser.RULE_non_port_module_item);
        var _la;
        try {
            var _alt = void 0;
            this.state = 997;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 54, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 958;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 955;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 960;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 961;
                        this.generated_instantiation();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 965;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 962;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 967;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 968;
                        this.local_parameter_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 972;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 969;
                                        this.attribute_instance();
                                    }
                                }
                            }
                            this.state = 974;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                        }
                        this.state = 975;
                        this.module_or_generate_item();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 979;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 976;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 981;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 982;
                        this.parameter_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 986;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 983;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 988;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 989;
                        this.specify_block();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 993;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 990;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 995;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 996;
                        this.specparam_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_or_generate_item_declaration = function () {
        var _localctx = new Module_or_generate_item_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, Verilog2001Parser.RULE_module_or_generate_item_declaration);
        try {
            this.state = 1009;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__37:
                case Verilog2001Parser.T__40:
                case Verilog2001Parser.T__41:
                case Verilog2001Parser.T__42:
                case Verilog2001Parser.T__43:
                case Verilog2001Parser.T__44:
                case Verilog2001Parser.T__45:
                case Verilog2001Parser.T__46:
                case Verilog2001Parser.T__47:
                case Verilog2001Parser.T__48:
                case Verilog2001Parser.T__49:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 999;
                        this.net_declaration();
                    }
                    break;
                case Verilog2001Parser.T__34:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1000;
                        this.reg_declaration();
                    }
                    break;
                case Verilog2001Parser.T__25:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1001;
                        this.integer_declaration();
                    }
                    break;
                case Verilog2001Parser.T__26:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1002;
                        this.real_declaration();
                    }
                    break;
                case Verilog2001Parser.T__28:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1003;
                        this.time_declaration();
                    }
                    break;
                case Verilog2001Parser.T__27:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1004;
                        this.realtime_declaration();
                    }
                    break;
                case Verilog2001Parser.T__35:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1005;
                        this.event_declaration();
                    }
                    break;
                case Verilog2001Parser.T__36:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1006;
                        this.genvar_declaration();
                    }
                    break;
                case Verilog2001Parser.T__68:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1007;
                        this.task_declaration();
                    }
                    break;
                case Verilog2001Parser.T__65:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1008;
                        this.function_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.parameter_override = function () {
        var _localctx = new Parameter_overrideContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, Verilog2001Parser.RULE_parameter_override);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1011;
                this.match(Verilog2001Parser.T__22);
                this.state = 1012;
                this.list_of_param_assignments();
                this.state = 1013;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.local_parameter_declaration = function () {
        var _localctx = new Local_parameter_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, Verilog2001Parser.RULE_local_parameter_declaration);
        var _la;
        try {
            this.state = 1045;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 58, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1015;
                        this.match(Verilog2001Parser.T__23);
                        this.state = 1017;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1016;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1020;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__20) {
                            {
                                this.state = 1019;
                                this.range_();
                            }
                        }
                        this.state = 1022;
                        this.list_of_param_assignments();
                        this.state = 1023;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1025;
                        this.match(Verilog2001Parser.T__23);
                        this.state = 1026;
                        this.match(Verilog2001Parser.T__25);
                        this.state = 1027;
                        this.list_of_param_assignments();
                        this.state = 1028;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1030;
                        this.match(Verilog2001Parser.T__23);
                        this.state = 1031;
                        this.match(Verilog2001Parser.T__26);
                        this.state = 1032;
                        this.list_of_param_assignments();
                        this.state = 1033;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1035;
                        this.match(Verilog2001Parser.T__23);
                        this.state = 1036;
                        this.match(Verilog2001Parser.T__27);
                        this.state = 1037;
                        this.list_of_param_assignments();
                        this.state = 1038;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1040;
                        this.match(Verilog2001Parser.T__23);
                        this.state = 1041;
                        this.match(Verilog2001Parser.T__28);
                        this.state = 1042;
                        this.list_of_param_assignments();
                        this.state = 1043;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.parameter_declaration = function () {
        var _localctx = new Parameter_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, Verilog2001Parser.RULE_parameter_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1047;
                this.parameter_declaration_();
                this.state = 1048;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.parameter_declaration_ = function () {
        var _localctx = new Parameter_declaration_Context(this._ctx, this.state);
        this.enterRule(_localctx, 54, Verilog2001Parser.RULE_parameter_declaration_);
        var _la;
        try {
            this.state = 1070;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1050;
                        this.match(Verilog2001Parser.T__29);
                        this.state = 1052;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1051;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1055;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__20) {
                            {
                                this.state = 1054;
                                this.range_();
                            }
                        }
                        this.state = 1057;
                        this.list_of_param_assignments();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1058;
                        this.match(Verilog2001Parser.T__29);
                        this.state = 1059;
                        this.match(Verilog2001Parser.T__25);
                        this.state = 1060;
                        this.list_of_param_assignments();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1061;
                        this.match(Verilog2001Parser.T__29);
                        this.state = 1062;
                        this.match(Verilog2001Parser.T__26);
                        this.state = 1063;
                        this.list_of_param_assignments();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1064;
                        this.match(Verilog2001Parser.T__29);
                        this.state = 1065;
                        this.match(Verilog2001Parser.T__27);
                        this.state = 1066;
                        this.list_of_param_assignments();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1067;
                        this.match(Verilog2001Parser.T__29);
                        this.state = 1068;
                        this.match(Verilog2001Parser.T__28);
                        this.state = 1069;
                        this.list_of_param_assignments();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.specparam_declaration = function () {
        var _localctx = new Specparam_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, Verilog2001Parser.RULE_specparam_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1072;
                this.match(Verilog2001Parser.T__30);
                this.state = 1074;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 1073;
                        this.range_();
                    }
                }
                this.state = 1076;
                this.list_of_specparam_assignments();
                this.state = 1077;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.inout_declaration = function () {
        var _localctx = new Inout_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, Verilog2001Parser.RULE_inout_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1079;
                this.match(Verilog2001Parser.T__31);
                this.state = 1081;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (Verilog2001Parser.T__40 - 41)) | (1 << (Verilog2001Parser.T__41 - 41)) | (1 << (Verilog2001Parser.T__42 - 41)) | (1 << (Verilog2001Parser.T__43 - 41)) | (1 << (Verilog2001Parser.T__44 - 41)) | (1 << (Verilog2001Parser.T__45 - 41)) | (1 << (Verilog2001Parser.T__46 - 41)) | (1 << (Verilog2001Parser.T__47 - 41)) | (1 << (Verilog2001Parser.T__48 - 41)) | (1 << (Verilog2001Parser.T__49 - 41)))) !== 0)) {
                    {
                        this.state = 1080;
                        this.net_type();
                    }
                }
                this.state = 1084;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__24) {
                    {
                        this.state = 1083;
                        this.match(Verilog2001Parser.T__24);
                    }
                }
                this.state = 1087;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 1086;
                        this.range_();
                    }
                }
                this.state = 1089;
                this.list_of_port_identifiers();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.input_declaration = function () {
        var _localctx = new Input_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, Verilog2001Parser.RULE_input_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1091;
                this.match(Verilog2001Parser.T__32);
                this.state = 1093;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (Verilog2001Parser.T__40 - 41)) | (1 << (Verilog2001Parser.T__41 - 41)) | (1 << (Verilog2001Parser.T__42 - 41)) | (1 << (Verilog2001Parser.T__43 - 41)) | (1 << (Verilog2001Parser.T__44 - 41)) | (1 << (Verilog2001Parser.T__45 - 41)) | (1 << (Verilog2001Parser.T__46 - 41)) | (1 << (Verilog2001Parser.T__47 - 41)) | (1 << (Verilog2001Parser.T__48 - 41)) | (1 << (Verilog2001Parser.T__49 - 41)))) !== 0)) {
                    {
                        this.state = 1092;
                        this.net_type();
                    }
                }
                this.state = 1096;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__24) {
                    {
                        this.state = 1095;
                        this.match(Verilog2001Parser.T__24);
                    }
                }
                this.state = 1099;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 1098;
                        this.range_();
                    }
                }
                this.state = 1101;
                this.list_of_port_identifiers();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.output_declaration = function () {
        var _localctx = new Output_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, Verilog2001Parser.RULE_output_declaration);
        var _la;
        try {
            this.state = 1143;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 78, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1103;
                        this.match(Verilog2001Parser.T__33);
                        this.state = 1105;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (Verilog2001Parser.T__40 - 41)) | (1 << (Verilog2001Parser.T__41 - 41)) | (1 << (Verilog2001Parser.T__42 - 41)) | (1 << (Verilog2001Parser.T__43 - 41)) | (1 << (Verilog2001Parser.T__44 - 41)) | (1 << (Verilog2001Parser.T__45 - 41)) | (1 << (Verilog2001Parser.T__46 - 41)) | (1 << (Verilog2001Parser.T__47 - 41)) | (1 << (Verilog2001Parser.T__48 - 41)) | (1 << (Verilog2001Parser.T__49 - 41)))) !== 0)) {
                            {
                                this.state = 1104;
                                this.net_type();
                            }
                        }
                        this.state = 1108;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1107;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1111;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__20) {
                            {
                                this.state = 1110;
                                this.range_();
                            }
                        }
                        this.state = 1113;
                        this.list_of_port_identifiers();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1114;
                        this.match(Verilog2001Parser.T__33);
                        this.state = 1116;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__34) {
                            {
                                this.state = 1115;
                                this.match(Verilog2001Parser.T__34);
                            }
                        }
                        this.state = 1119;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1118;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1122;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__20) {
                            {
                                this.state = 1121;
                                this.range_();
                            }
                        }
                        this.state = 1124;
                        this.list_of_port_identifiers();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1125;
                        this.match(Verilog2001Parser.T__33);
                        this.state = 1126;
                        this.match(Verilog2001Parser.T__34);
                        this.state = 1128;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1127;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1131;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__20) {
                            {
                                this.state = 1130;
                                this.range_();
                            }
                        }
                        this.state = 1133;
                        this.list_of_variable_port_identifiers();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1134;
                        this.match(Verilog2001Parser.T__33);
                        this.state = 1136;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__25 || _la === Verilog2001Parser.T__28) {
                            {
                                this.state = 1135;
                                this.output_variable_type();
                            }
                        }
                        this.state = 1138;
                        this.list_of_port_identifiers();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1139;
                        this.match(Verilog2001Parser.T__33);
                        this.state = 1140;
                        this.output_variable_type();
                        this.state = 1141;
                        this.list_of_variable_port_identifiers();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.event_declaration = function () {
        var _localctx = new Event_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, Verilog2001Parser.RULE_event_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1145;
                this.match(Verilog2001Parser.T__35);
                this.state = 1146;
                this.list_of_event_identifiers();
                this.state = 1147;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.genvar_declaration = function () {
        var _localctx = new Genvar_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, Verilog2001Parser.RULE_genvar_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1149;
                this.match(Verilog2001Parser.T__36);
                this.state = 1150;
                this.list_of_genvar_identifiers();
                this.state = 1151;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.integer_declaration = function () {
        var _localctx = new Integer_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, Verilog2001Parser.RULE_integer_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1153;
                this.match(Verilog2001Parser.T__25);
                this.state = 1154;
                this.list_of_variable_identifiers();
                this.state = 1155;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.time_declaration = function () {
        var _localctx = new Time_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, Verilog2001Parser.RULE_time_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1157;
                this.match(Verilog2001Parser.T__28);
                this.state = 1158;
                this.list_of_variable_identifiers();
                this.state = 1159;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.real_declaration = function () {
        var _localctx = new Real_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, Verilog2001Parser.RULE_real_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1161;
                this.match(Verilog2001Parser.T__26);
                this.state = 1162;
                this.list_of_real_identifiers();
                this.state = 1163;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.realtime_declaration = function () {
        var _localctx = new Realtime_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, Verilog2001Parser.RULE_realtime_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1165;
                this.match(Verilog2001Parser.T__27);
                this.state = 1166;
                this.list_of_real_identifiers();
                this.state = 1167;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.reg_declaration = function () {
        var _localctx = new Reg_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, Verilog2001Parser.RULE_reg_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1169;
                this.match(Verilog2001Parser.T__34);
                this.state = 1171;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__24) {
                    {
                        this.state = 1170;
                        this.match(Verilog2001Parser.T__24);
                    }
                }
                this.state = 1174;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 1173;
                        this.range_();
                    }
                }
                this.state = 1176;
                this.list_of_variable_identifiers();
                this.state = 1177;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_declaration = function () {
        var _localctx = new Net_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, Verilog2001Parser.RULE_net_declaration);
        var _la;
        try {
            this.state = 1293;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 107, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1179;
                        this.net_type();
                        this.state = 1181;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1180;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1184;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1183;
                                this.delay3();
                            }
                        }
                        this.state = 1186;
                        this.list_of_net_identifiers();
                        this.state = 1187;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1189;
                        this.net_type();
                        this.state = 1191;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 1190;
                                this.drive_strength();
                            }
                        }
                        this.state = 1194;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1193;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1197;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1196;
                                this.delay3();
                            }
                        }
                        this.state = 1199;
                        this.list_of_net_decl_assignments();
                        this.state = 1200;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1202;
                        this.match(Verilog2001Parser.T__37);
                        this.state = 1204;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 1203;
                                this.drive_strength();
                            }
                        }
                        this.state = 1207;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1206;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1210;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1209;
                                this.delay3();
                            }
                        }
                        this.state = 1212;
                        this.list_of_net_decl_assignments();
                        this.state = 1213;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1215;
                        this.match(Verilog2001Parser.T__37);
                        this.state = 1217;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 1216;
                                this.charge_strength();
                            }
                        }
                        this.state = 1220;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1219;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1223;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1222;
                                this.delay3();
                            }
                        }
                        this.state = 1225;
                        this.list_of_net_identifiers();
                        this.state = 1226;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1228;
                        this.match(Verilog2001Parser.T__37);
                        this.state = 1230;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 1229;
                                this.charge_strength();
                            }
                        }
                        this.state = 1233;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39) {
                            {
                                this.state = 1232;
                                _la = this._input.LA(1);
                                if (!(_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 1236;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1235;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1238;
                        this.range_();
                        this.state = 1240;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1239;
                                this.delay3();
                            }
                        }
                        this.state = 1242;
                        this.list_of_net_identifiers();
                        this.state = 1243;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1245;
                        this.match(Verilog2001Parser.T__37);
                        this.state = 1247;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 1246;
                                this.drive_strength();
                            }
                        }
                        this.state = 1250;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39) {
                            {
                                this.state = 1249;
                                _la = this._input.LA(1);
                                if (!(_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 1253;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1252;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1255;
                        this.range_();
                        this.state = 1257;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1256;
                                this.delay3();
                            }
                        }
                        this.state = 1259;
                        this.list_of_net_decl_assignments();
                        this.state = 1260;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1262;
                        this.net_type();
                        this.state = 1264;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15) {
                            {
                                this.state = 1263;
                                this.drive_strength();
                            }
                        }
                        this.state = 1267;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39) {
                            {
                                this.state = 1266;
                                _la = this._input.LA(1);
                                if (!(_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 1270;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1269;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1272;
                        this.range_();
                        this.state = 1274;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1273;
                                this.delay3();
                            }
                        }
                        this.state = 1276;
                        this.list_of_net_decl_assignments();
                        this.state = 1277;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1279;
                        this.net_type();
                        this.state = 1281;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39) {
                            {
                                this.state = 1280;
                                _la = this._input.LA(1);
                                if (!(_la === Verilog2001Parser.T__38 || _la === Verilog2001Parser.T__39)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 1284;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1283;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1286;
                        this.range_();
                        this.state = 1288;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1287;
                                this.delay3();
                            }
                        }
                        this.state = 1290;
                        this.list_of_net_identifiers();
                        this.state = 1291;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_type = function () {
        var _localctx = new Net_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, Verilog2001Parser.RULE_net_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1295;
                _la = this._input.LA(1);
                if (!(((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (Verilog2001Parser.T__40 - 41)) | (1 << (Verilog2001Parser.T__41 - 41)) | (1 << (Verilog2001Parser.T__42 - 41)) | (1 << (Verilog2001Parser.T__43 - 41)) | (1 << (Verilog2001Parser.T__44 - 41)) | (1 << (Verilog2001Parser.T__45 - 41)) | (1 << (Verilog2001Parser.T__46 - 41)) | (1 << (Verilog2001Parser.T__47 - 41)) | (1 << (Verilog2001Parser.T__48 - 41)) | (1 << (Verilog2001Parser.T__49 - 41)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.output_variable_type = function () {
        var _localctx = new Output_variable_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, Verilog2001Parser.RULE_output_variable_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1297;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.T__25 || _la === Verilog2001Parser.T__28)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.real_type = function () {
        var _localctx = new Real_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, Verilog2001Parser.RULE_real_type);
        var _la;
        try {
            this.state = 1312;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 110, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1299;
                        this.real_identifier();
                        this.state = 1302;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__50) {
                            {
                                this.state = 1300;
                                this.match(Verilog2001Parser.T__50);
                                this.state = 1301;
                                this.constant_expression();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1304;
                        this.real_identifier();
                        this.state = 1305;
                        this.dimension();
                        this.state = 1309;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 1306;
                                    this.dimension();
                                }
                            }
                            this.state = 1311;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.variable_type = function () {
        var _localctx = new Variable_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, Verilog2001Parser.RULE_variable_type);
        var _la;
        try {
            this.state = 1327;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 113, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1314;
                        this.variable_identifier();
                        this.state = 1317;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__50) {
                            {
                                this.state = 1315;
                                this.match(Verilog2001Parser.T__50);
                                this.state = 1316;
                                this.constant_expression();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1319;
                        this.variable_identifier();
                        this.state = 1320;
                        this.dimension();
                        this.state = 1324;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 1321;
                                    this.dimension();
                                }
                            }
                            this.state = 1326;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.drive_strength = function () {
        var _localctx = new Drive_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, Verilog2001Parser.RULE_drive_strength);
        try {
            this.state = 1365;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1329;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1330;
                        this.strength0();
                        this.state = 1331;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 1332;
                        this.strength1();
                        this.state = 1333;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1335;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1336;
                        this.strength1();
                        this.state = 1337;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 1338;
                        this.strength0();
                        this.state = 1339;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1341;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1342;
                        this.strength0();
                        this.state = 1343;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 1344;
                        this.match(Verilog2001Parser.T__51);
                        this.state = 1345;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1347;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1348;
                        this.strength1();
                        this.state = 1349;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 1350;
                        this.match(Verilog2001Parser.T__52);
                        this.state = 1351;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1353;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1354;
                        this.match(Verilog2001Parser.T__52);
                        this.state = 1355;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 1356;
                        this.strength1();
                        this.state = 1357;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1359;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1360;
                        this.match(Verilog2001Parser.T__51);
                        this.state = 1361;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 1362;
                        this.strength0();
                        this.state = 1363;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.strength0 = function () {
        var _localctx = new Strength0Context(this._ctx, this.state);
        this.enterRule(_localctx, 90, Verilog2001Parser.RULE_strength0);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1367;
                _la = this._input.LA(1);
                if (!(((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (Verilog2001Parser.T__40 - 41)) | (1 << (Verilog2001Parser.T__53 - 41)) | (1 << (Verilog2001Parser.T__54 - 41)) | (1 << (Verilog2001Parser.T__55 - 41)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.strength1 = function () {
        var _localctx = new Strength1Context(this._ctx, this.state);
        this.enterRule(_localctx, 92, Verilog2001Parser.RULE_strength1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1369;
                _la = this._input.LA(1);
                if (!(((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (Verilog2001Parser.T__41 - 42)) | (1 << (Verilog2001Parser.T__56 - 42)) | (1 << (Verilog2001Parser.T__57 - 42)) | (1 << (Verilog2001Parser.T__58 - 42)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.charge_strength = function () {
        var _localctx = new Charge_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, Verilog2001Parser.RULE_charge_strength);
        try {
            this.state = 1380;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 115, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1371;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1372;
                        this.match(Verilog2001Parser.T__59);
                        this.state = 1373;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1374;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1375;
                        this.match(Verilog2001Parser.T__60);
                        this.state = 1376;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1377;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1378;
                        this.match(Verilog2001Parser.T__61);
                        this.state = 1379;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.delay3 = function () {
        var _localctx = new Delay3Context(this._ctx, this.state);
        this.enterRule(_localctx, 96, Verilog2001Parser.RULE_delay3);
        var _la;
        try {
            this.state = 1397;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 118, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1382;
                        this.match(Verilog2001Parser.T__14);
                        this.state = 1383;
                        this.delay_value();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1384;
                        this.match(Verilog2001Parser.T__14);
                        this.state = 1385;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1386;
                        this.delay_value();
                        this.state = 1393;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__16) {
                            {
                                this.state = 1387;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 1388;
                                this.delay_value();
                                this.state = 1391;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === Verilog2001Parser.T__16) {
                                    {
                                        this.state = 1389;
                                        this.match(Verilog2001Parser.T__16);
                                        this.state = 1390;
                                        this.delay_value();
                                    }
                                }
                            }
                        }
                        this.state = 1395;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.delay2 = function () {
        var _localctx = new Delay2Context(this._ctx, this.state);
        this.enterRule(_localctx, 98, Verilog2001Parser.RULE_delay2);
        var _la;
        try {
            this.state = 1410;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 120, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1399;
                        this.match(Verilog2001Parser.T__14);
                        this.state = 1400;
                        this.delay_value();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1401;
                        this.match(Verilog2001Parser.T__14);
                        this.state = 1402;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1403;
                        this.delay_value();
                        this.state = 1406;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__16) {
                            {
                                this.state = 1404;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 1405;
                                this.delay_value();
                            }
                        }
                        this.state = 1408;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.delay_value = function () {
        var _localctx = new Delay_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, Verilog2001Parser.RULE_delay_value);
        try {
            this.state = 1416;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 121, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1412;
                        this.match(Verilog2001Parser.Decimal_number);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1413;
                        this.parameter_identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1414;
                        this.specparam_identifier();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1415;
                        this.mintypmax_expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_event_identifiers = function () {
        var _localctx = new List_of_event_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, Verilog2001Parser.RULE_list_of_event_identifiers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1418;
                this.event_identifier();
                this.state = 1426;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 1419;
                        this.dimension();
                        this.state = 1423;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 1420;
                                    this.dimension();
                                }
                            }
                            this.state = 1425;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 1441;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1428;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1429;
                            this.event_identifier();
                            this.state = 1437;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Verilog2001Parser.T__20) {
                                {
                                    this.state = 1430;
                                    this.dimension();
                                    this.state = 1434;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === Verilog2001Parser.T__20) {
                                        {
                                            {
                                                this.state = 1431;
                                                this.dimension();
                                            }
                                        }
                                        this.state = 1436;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                        }
                    }
                    this.state = 1443;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_net_identifiers = function () {
        var _localctx = new List_of_net_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, Verilog2001Parser.RULE_list_of_net_identifiers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1444;
                this.net_identifier();
                this.state = 1452;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 1445;
                        this.dimension();
                        this.state = 1449;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 1446;
                                    this.dimension();
                                }
                            }
                            this.state = 1451;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 1467;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1454;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1455;
                            this.net_identifier();
                            this.state = 1463;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Verilog2001Parser.T__20) {
                                {
                                    this.state = 1456;
                                    this.dimension();
                                    this.state = 1460;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === Verilog2001Parser.T__20) {
                                        {
                                            {
                                                this.state = 1457;
                                                this.dimension();
                                            }
                                        }
                                        this.state = 1462;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                        }
                    }
                    this.state = 1469;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_genvar_identifiers = function () {
        var _localctx = new List_of_genvar_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, Verilog2001Parser.RULE_list_of_genvar_identifiers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1470;
                this.genvar_identifier();
                this.state = 1475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1471;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1472;
                            this.genvar_identifier();
                        }
                    }
                    this.state = 1477;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_port_identifiers = function () {
        var _localctx = new List_of_port_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, Verilog2001Parser.RULE_list_of_port_identifiers);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1478;
                this.port_identifier();
                this.state = 1483;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1479;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 1480;
                                this.port_identifier();
                            }
                        }
                    }
                    this.state = 1485;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 133, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_net_decl_assignments = function () {
        var _localctx = new List_of_net_decl_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, Verilog2001Parser.RULE_list_of_net_decl_assignments);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1486;
                this.net_decl_assignment();
                this.state = 1491;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1487;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1488;
                            this.net_decl_assignment();
                        }
                    }
                    this.state = 1493;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_param_assignments = function () {
        var _localctx = new List_of_param_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, Verilog2001Parser.RULE_list_of_param_assignments);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1494;
                this.param_assignment();
                this.state = 1499;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1495;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 1496;
                                this.param_assignment();
                            }
                        }
                    }
                    this.state = 1501;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_specparam_assignments = function () {
        var _localctx = new List_of_specparam_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, Verilog2001Parser.RULE_list_of_specparam_assignments);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1502;
                this.specparam_assignment();
                this.state = 1507;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1503;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1504;
                            this.specparam_assignment();
                        }
                    }
                    this.state = 1509;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_real_identifiers = function () {
        var _localctx = new List_of_real_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, Verilog2001Parser.RULE_list_of_real_identifiers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1510;
                this.real_type();
                this.state = 1515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1511;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1512;
                            this.real_type();
                        }
                    }
                    this.state = 1517;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_variable_identifiers = function () {
        var _localctx = new List_of_variable_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, Verilog2001Parser.RULE_list_of_variable_identifiers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1518;
                this.variable_type();
                this.state = 1523;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1519;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1520;
                            this.variable_type();
                        }
                    }
                    this.state = 1525;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_variable_port_identifiers = function () {
        var _localctx = new List_of_variable_port_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, Verilog2001Parser.RULE_list_of_variable_port_identifiers);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1526;
                this.port_identifier();
                this.state = 1529;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__50) {
                    {
                        this.state = 1527;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 1528;
                        this.constant_expression();
                    }
                }
                this.state = 1539;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1531;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 1532;
                                this.port_identifier();
                                this.state = 1535;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === Verilog2001Parser.T__50) {
                                    {
                                        this.state = 1533;
                                        this.match(Verilog2001Parser.T__50);
                                        this.state = 1534;
                                        this.constant_expression();
                                    }
                                }
                            }
                        }
                    }
                    this.state = 1541;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_decl_assignment = function () {
        var _localctx = new Net_decl_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, Verilog2001Parser.RULE_net_decl_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1542;
                this.net_identifier();
                this.state = 1543;
                this.match(Verilog2001Parser.T__50);
                this.state = 1544;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.param_assignment = function () {
        var _localctx = new Param_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, Verilog2001Parser.RULE_param_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1546;
                this.parameter_identifier();
                this.state = 1547;
                this.match(Verilog2001Parser.T__50);
                this.state = 1548;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.specparam_assignment = function () {
        var _localctx = new Specparam_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, Verilog2001Parser.RULE_specparam_assignment);
        try {
            this.state = 1555;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1550;
                        this.specparam_identifier();
                        this.state = 1551;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 1552;
                        this.constant_mintypmax_expression();
                    }
                    break;
                case Verilog2001Parser.T__62:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1554;
                        this.pulse_control_specparam();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pulse_control_specparam = function () {
        var _localctx = new Pulse_control_specparamContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, Verilog2001Parser.RULE_pulse_control_specparam);
        var _la;
        try {
            this.state = 1582;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 145, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1557;
                        this.match(Verilog2001Parser.T__62);
                        this.state = 1558;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 1559;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1560;
                        this.reject_limit_value();
                        this.state = 1563;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__16) {
                            {
                                this.state = 1561;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 1562;
                                this.error_limit_value();
                            }
                        }
                        this.state = 1565;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 1566;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1568;
                        this.match(Verilog2001Parser.T__62);
                        this.state = 1569;
                        this.specify_input_terminal_descriptor();
                        this.state = 1570;
                        this.match(Verilog2001Parser.T__63);
                        this.state = 1571;
                        this.specify_output_terminal_descriptor();
                        this.state = 1572;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 1573;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1574;
                        this.reject_limit_value();
                        this.state = 1577;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__16) {
                            {
                                this.state = 1575;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 1576;
                                this.error_limit_value();
                            }
                        }
                        this.state = 1579;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 1580;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.error_limit_value = function () {
        var _localctx = new Error_limit_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, Verilog2001Parser.RULE_error_limit_value);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1584;
                this.limit_value();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.reject_limit_value = function () {
        var _localctx = new Reject_limit_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, Verilog2001Parser.RULE_reject_limit_value);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1586;
                this.limit_value();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.limit_value = function () {
        var _localctx = new Limit_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, Verilog2001Parser.RULE_limit_value);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1588;
                this.constant_mintypmax_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.dimension = function () {
        var _localctx = new DimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, Verilog2001Parser.RULE_dimension);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1590;
                this.match(Verilog2001Parser.T__20);
                this.state = 1591;
                this.dimension_constant_expression();
                this.state = 1592;
                this.match(Verilog2001Parser.T__64);
                this.state = 1593;
                this.dimension_constant_expression();
                this.state = 1594;
                this.match(Verilog2001Parser.T__21);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.range_ = function () {
        var _localctx = new Range_Context(this._ctx, this.state);
        this.enterRule(_localctx, 138, Verilog2001Parser.RULE_range_);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1596;
                this.match(Verilog2001Parser.T__20);
                this.state = 1597;
                this.msb_constant_expression();
                this.state = 1598;
                this.match(Verilog2001Parser.T__64);
                this.state = 1599;
                this.lsb_constant_expression();
                this.state = 1600;
                this.match(Verilog2001Parser.T__21);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_declaration = function () {
        var _localctx = new Function_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, Verilog2001Parser.RULE_function_declaration);
        var _la;
        try {
            var _alt = void 0;
            this.state = 1651;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 156, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1602;
                        this.match(Verilog2001Parser.T__65);
                        this.state = 1604;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__66) {
                            {
                                this.state = 1603;
                                this.match(Verilog2001Parser.T__66);
                            }
                        }
                        this.state = 1607;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1606;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1610;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__20) | (1 << Verilog2001Parser.T__25) | (1 << Verilog2001Parser.T__26) | (1 << Verilog2001Parser.T__27) | (1 << Verilog2001Parser.T__28))) !== 0)) {
                            {
                                this.state = 1609;
                                this.range_or_type();
                            }
                        }
                        this.state = 1612;
                        this.function_identifier();
                        this.state = 1613;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 1617;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1614;
                                        this.function_item_declaration();
                                    }
                                }
                            }
                            this.state = 1619;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                        }
                        this.state = 1621;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (Verilog2001Parser.T__98 - 99)) | (1 << (Verilog2001Parser.T__100 - 99)) | (1 << (Verilog2001Parser.T__102 - 99)) | (1 << (Verilog2001Parser.T__103 - 99)) | (1 << (Verilog2001Parser.T__114 - 99)) | (1 << (Verilog2001Parser.T__115 - 99)) | (1 << (Verilog2001Parser.T__122 - 99)) | (1 << (Verilog2001Parser.T__123 - 99)) | (1 << (Verilog2001Parser.T__124 - 99)) | (1 << (Verilog2001Parser.T__125 - 99)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (Verilog2001Parser.Escaped_identifier - 175)) | (1 << (Verilog2001Parser.Simple_identifier - 175)) | (1 << (Verilog2001Parser.Dollar_Identifier - 175)))) !== 0)) {
                            {
                                this.state = 1620;
                                this.function_statement();
                            }
                        }
                        this.state = 1623;
                        this.match(Verilog2001Parser.T__67);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1625;
                        this.match(Verilog2001Parser.T__65);
                        this.state = 1627;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__66) {
                            {
                                this.state = 1626;
                                this.match(Verilog2001Parser.T__66);
                            }
                        }
                        this.state = 1630;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1629;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1633;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__20) | (1 << Verilog2001Parser.T__25) | (1 << Verilog2001Parser.T__26) | (1 << Verilog2001Parser.T__27) | (1 << Verilog2001Parser.T__28))) !== 0)) {
                            {
                                this.state = 1632;
                                this.range_or_type();
                            }
                        }
                        this.state = 1635;
                        this.function_identifier();
                        this.state = 1636;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1637;
                        this.function_port_list();
                        this.state = 1638;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 1639;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 1643;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1640;
                                        this.block_item_declaration();
                                    }
                                }
                            }
                            this.state = 1645;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
                        }
                        this.state = 1647;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (Verilog2001Parser.T__98 - 99)) | (1 << (Verilog2001Parser.T__100 - 99)) | (1 << (Verilog2001Parser.T__102 - 99)) | (1 << (Verilog2001Parser.T__103 - 99)) | (1 << (Verilog2001Parser.T__114 - 99)) | (1 << (Verilog2001Parser.T__115 - 99)) | (1 << (Verilog2001Parser.T__122 - 99)) | (1 << (Verilog2001Parser.T__123 - 99)) | (1 << (Verilog2001Parser.T__124 - 99)) | (1 << (Verilog2001Parser.T__125 - 99)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (Verilog2001Parser.Escaped_identifier - 175)) | (1 << (Verilog2001Parser.Simple_identifier - 175)) | (1 << (Verilog2001Parser.Dollar_Identifier - 175)))) !== 0)) {
                            {
                                this.state = 1646;
                                this.function_statement();
                            }
                        }
                        this.state = 1649;
                        this.match(Verilog2001Parser.T__67);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_item_declaration = function () {
        var _localctx = new Function_item_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, Verilog2001Parser.RULE_function_item_declaration);
        try {
            this.state = 1657;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__23:
                case Verilog2001Parser.T__25:
                case Verilog2001Parser.T__26:
                case Verilog2001Parser.T__27:
                case Verilog2001Parser.T__28:
                case Verilog2001Parser.T__29:
                case Verilog2001Parser.T__34:
                case Verilog2001Parser.T__35:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1653;
                        this.block_item_declaration();
                    }
                    break;
                case Verilog2001Parser.T__31:
                case Verilog2001Parser.T__32:
                case Verilog2001Parser.T__33:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1654;
                        this.tf_declaration();
                        this.state = 1655;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_port_list = function () {
        var _localctx = new Function_port_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, Verilog2001Parser.RULE_function_port_list);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1659;
                this.function_port();
                this.state = 1664;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1660;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1661;
                            this.function_port();
                        }
                    }
                    this.state = 1666;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_port = function () {
        var _localctx = new Function_portContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, Verilog2001Parser.RULE_function_port);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1670;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__15) {
                    {
                        {
                            this.state = 1667;
                            this.attribute_instance();
                        }
                    }
                    this.state = 1672;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1673;
                this.tf_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.range_or_type = function () {
        var _localctx = new Range_or_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, Verilog2001Parser.RULE_range_or_type);
        try {
            this.state = 1680;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__20:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1675;
                        this.range_();
                    }
                    break;
                case Verilog2001Parser.T__25:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1676;
                        this.match(Verilog2001Parser.T__25);
                    }
                    break;
                case Verilog2001Parser.T__26:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1677;
                        this.match(Verilog2001Parser.T__26);
                    }
                    break;
                case Verilog2001Parser.T__27:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1678;
                        this.match(Verilog2001Parser.T__27);
                    }
                    break;
                case Verilog2001Parser.T__28:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1679;
                        this.match(Verilog2001Parser.T__28);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.task_declaration = function () {
        var _localctx = new Task_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, Verilog2001Parser.RULE_task_declaration);
        var _la;
        try {
            var _alt = void 0;
            this.state = 1717;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 166, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1682;
                        this.match(Verilog2001Parser.T__68);
                        this.state = 1684;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__66) {
                            {
                                this.state = 1683;
                                this.match(Verilog2001Parser.T__66);
                            }
                        }
                        this.state = 1686;
                        this.task_identifier();
                        this.state = 1687;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 1691;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1688;
                                        this.task_item_declaration();
                                    }
                                }
                            }
                            this.state = 1693;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
                        }
                        this.state = 1694;
                        this.statement();
                        this.state = 1695;
                        this.match(Verilog2001Parser.T__69);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1697;
                        this.match(Verilog2001Parser.T__68);
                        this.state = 1699;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__66) {
                            {
                                this.state = 1698;
                                this.match(Verilog2001Parser.T__66);
                            }
                        }
                        this.state = 1701;
                        this.task_identifier();
                        this.state = 1702;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 1704;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - 16)) & ~0x1F) === 0 && ((1 << (_la - 16)) & ((1 << (Verilog2001Parser.T__15 - 16)) | (1 << (Verilog2001Parser.T__31 - 16)) | (1 << (Verilog2001Parser.T__32 - 16)) | (1 << (Verilog2001Parser.T__33 - 16)))) !== 0)) {
                            {
                                this.state = 1703;
                                this.task_port_list();
                            }
                        }
                        this.state = 1706;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 1707;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 1711;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 1708;
                                        this.block_item_declaration();
                                    }
                                }
                            }
                            this.state = 1713;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
                        }
                        this.state = 1714;
                        this.statement();
                        this.state = 1715;
                        this.match(Verilog2001Parser.T__69);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.task_item_declaration = function () {
        var _localctx = new Task_item_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, Verilog2001Parser.RULE_task_item_declaration);
        var _la;
        try {
            this.state = 1729;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 168, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1719;
                        this.block_item_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1723;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1720;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1725;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1726;
                        this.tf_declaration();
                        this.state = 1727;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.task_port_list = function () {
        var _localctx = new Task_port_listContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, Verilog2001Parser.RULE_task_port_list);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1731;
                this.task_port_item();
                this.state = 1736;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1732;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1733;
                            this.task_port_item();
                        }
                    }
                    this.state = 1738;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.task_port_item = function () {
        var _localctx = new Task_port_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, Verilog2001Parser.RULE_task_port_item);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1742;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__15) {
                    {
                        {
                            this.state = 1739;
                            this.attribute_instance();
                        }
                    }
                    this.state = 1744;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1745;
                this.tf_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tf_decl_header = function () {
        var _localctx = new Tf_decl_headerContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, Verilog2001Parser.RULE_tf_decl_header);
        var _la;
        try {
            this.state = 1767;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 177, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1747;
                        _la = this._input.LA(1);
                        if (!(((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (Verilog2001Parser.T__31 - 32)) | (1 << (Verilog2001Parser.T__32 - 32)) | (1 << (Verilog2001Parser.T__33 - 32)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1749;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (Verilog2001Parser.T__40 - 41)) | (1 << (Verilog2001Parser.T__41 - 41)) | (1 << (Verilog2001Parser.T__42 - 41)) | (1 << (Verilog2001Parser.T__43 - 41)) | (1 << (Verilog2001Parser.T__44 - 41)) | (1 << (Verilog2001Parser.T__45 - 41)) | (1 << (Verilog2001Parser.T__46 - 41)) | (1 << (Verilog2001Parser.T__47 - 41)) | (1 << (Verilog2001Parser.T__48 - 41)) | (1 << (Verilog2001Parser.T__49 - 41)))) !== 0)) {
                            {
                                this.state = 1748;
                                this.net_type();
                            }
                        }
                        this.state = 1752;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__34) {
                            {
                                this.state = 1751;
                                this.match(Verilog2001Parser.T__34);
                            }
                        }
                        this.state = 1755;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__24) {
                            {
                                this.state = 1754;
                                this.match(Verilog2001Parser.T__24);
                            }
                        }
                        this.state = 1758;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__20) {
                            {
                                this.state = 1757;
                                this.range_();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1760;
                        _la = this._input.LA(1);
                        if (!(((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (Verilog2001Parser.T__31 - 32)) | (1 << (Verilog2001Parser.T__32 - 32)) | (1 << (Verilog2001Parser.T__33 - 32)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1762;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & ((1 << (Verilog2001Parser.T__40 - 41)) | (1 << (Verilog2001Parser.T__41 - 41)) | (1 << (Verilog2001Parser.T__42 - 41)) | (1 << (Verilog2001Parser.T__43 - 41)) | (1 << (Verilog2001Parser.T__44 - 41)) | (1 << (Verilog2001Parser.T__45 - 41)) | (1 << (Verilog2001Parser.T__46 - 41)) | (1 << (Verilog2001Parser.T__47 - 41)) | (1 << (Verilog2001Parser.T__48 - 41)) | (1 << (Verilog2001Parser.T__49 - 41)))) !== 0)) {
                            {
                                this.state = 1761;
                                this.net_type();
                            }
                        }
                        this.state = 1765;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__25) | (1 << Verilog2001Parser.T__26) | (1 << Verilog2001Parser.T__27) | (1 << Verilog2001Parser.T__28))) !== 0)) {
                            {
                                this.state = 1764;
                                this.task_port_type();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tf_declaration = function () {
        var _localctx = new Tf_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, Verilog2001Parser.RULE_tf_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1769;
                this.tf_decl_header();
                this.state = 1770;
                this.list_of_port_identifiers();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.task_port_type = function () {
        var _localctx = new Task_port_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, Verilog2001Parser.RULE_task_port_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1772;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__25) | (1 << Verilog2001Parser.T__26) | (1 << Verilog2001Parser.T__27) | (1 << Verilog2001Parser.T__28))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.block_item_declaration = function () {
        var _localctx = new Block_item_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, Verilog2001Parser.RULE_block_item_declaration);
        var _la;
        try {
            this.state = 1830;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 186, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1777;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1774;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1779;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1780;
                        this.block_reg_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1784;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1781;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1786;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1787;
                        this.event_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1791;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1788;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1793;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1794;
                        this.integer_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1798;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1795;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1800;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1801;
                        this.local_parameter_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1805;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1802;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1807;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1808;
                        this.parameter_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1812;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1809;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1814;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1815;
                        this.real_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1819;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1816;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1821;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1822;
                        this.realtime_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1826;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 1823;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 1828;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1829;
                        this.time_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.block_reg_declaration = function () {
        var _localctx = new Block_reg_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, Verilog2001Parser.RULE_block_reg_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1832;
                this.match(Verilog2001Parser.T__34);
                this.state = 1834;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__24) {
                    {
                        this.state = 1833;
                        this.match(Verilog2001Parser.T__24);
                    }
                }
                this.state = 1837;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 1836;
                        this.range_();
                    }
                }
                this.state = 1839;
                this.list_of_block_variable_identifiers();
                this.state = 1840;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_block_variable_identifiers = function () {
        var _localctx = new List_of_block_variable_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, Verilog2001Parser.RULE_list_of_block_variable_identifiers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1842;
                this.block_variable_type();
                this.state = 1847;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 1843;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 1844;
                            this.block_variable_type();
                        }
                    }
                    this.state = 1849;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.block_variable_type = function () {
        var _localctx = new Block_variable_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, Verilog2001Parser.RULE_block_variable_type);
        var _la;
        try {
            this.state = 1859;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 191, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1850;
                        this.variable_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1851;
                        this.variable_identifier();
                        this.state = 1852;
                        this.dimension();
                        this.state = 1856;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 1853;
                                    this.dimension();
                                }
                            }
                            this.state = 1858;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.gate_instantiation = function () {
        var _localctx = new Gate_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, Verilog2001Parser.RULE_gate_instantiation);
        var _la;
        try {
            this.state = 1993;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__72:
                case Verilog2001Parser.T__73:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1861;
                        this.cmos_switchtype();
                        this.state = 1863;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1862;
                                this.delay3();
                            }
                        }
                        this.state = 1865;
                        this.cmos_switch_instance();
                        this.state = 1870;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1866;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1867;
                                    this.cmos_switch_instance();
                                }
                            }
                            this.state = 1872;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1873;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__78:
                case Verilog2001Parser.T__79:
                case Verilog2001Parser.T__80:
                case Verilog2001Parser.T__81:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1875;
                        this.mos_switchtype();
                        this.state = 1877;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1876;
                                this.delay3();
                            }
                        }
                        this.state = 1879;
                        this.mos_switch_instance();
                        this.state = 1884;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1880;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1881;
                                    this.mos_switch_instance();
                                }
                            }
                            this.state = 1886;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1887;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__94:
                case Verilog2001Parser.T__95:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1889;
                        this.pass_switchtype();
                        this.state = 1890;
                        this.pass_switch_instance();
                        this.state = 1895;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1891;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1892;
                                    this.pass_switch_instance();
                                }
                            }
                            this.state = 1897;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1898;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__70:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1900;
                        this.match(Verilog2001Parser.T__70);
                        this.state = 1902;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 197, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1901;
                                    this.pulldown_strength();
                                }
                                break;
                        }
                        this.state = 1904;
                        this.pull_gate_instance();
                        this.state = 1909;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1905;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1906;
                                    this.pull_gate_instance();
                                }
                            }
                            this.state = 1911;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1912;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__71:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1914;
                        this.match(Verilog2001Parser.T__71);
                        this.state = 1916;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 199, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1915;
                                    this.pullup_strength();
                                }
                                break;
                        }
                        this.state = 1918;
                        this.pull_gate_instance();
                        this.state = 1923;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1919;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1920;
                                    this.pull_gate_instance();
                                }
                            }
                            this.state = 1925;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1926;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__74:
                case Verilog2001Parser.T__75:
                case Verilog2001Parser.T__76:
                case Verilog2001Parser.T__77:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1928;
                        this.enable_gatetype();
                        this.state = 1930;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 201, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1929;
                                    this.drive_strength();
                                }
                                break;
                        }
                        this.state = 1933;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1932;
                                this.delay3();
                            }
                        }
                        this.state = 1935;
                        this.enable_gate_instance();
                        this.state = 1940;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1936;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1937;
                                    this.enable_gate_instance();
                                }
                            }
                            this.state = 1942;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1943;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__82:
                case Verilog2001Parser.T__83:
                case Verilog2001Parser.T__84:
                case Verilog2001Parser.T__85:
                case Verilog2001Parser.T__86:
                case Verilog2001Parser.T__87:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1945;
                        this.n_input_gatetype();
                        this.state = 1947;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 204, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1946;
                                    this.drive_strength();
                                }
                                break;
                        }
                        this.state = 1950;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1949;
                                this.delay2();
                            }
                        }
                        this.state = 1952;
                        this.n_input_gate_instance();
                        this.state = 1957;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1953;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1954;
                                    this.n_input_gate_instance();
                                }
                            }
                            this.state = 1959;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1960;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__88:
                case Verilog2001Parser.T__89:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1962;
                        this.n_output_gatetype();
                        this.state = 1964;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 207, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1963;
                                    this.drive_strength();
                                }
                                break;
                        }
                        this.state = 1967;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1966;
                                this.delay2();
                            }
                        }
                        this.state = 1969;
                        this.n_output_gate_instance();
                        this.state = 1974;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1970;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1971;
                                    this.n_output_gate_instance();
                                }
                            }
                            this.state = 1976;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1977;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__90:
                case Verilog2001Parser.T__91:
                case Verilog2001Parser.T__92:
                case Verilog2001Parser.T__93:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1979;
                        this.pass_en_switchtype();
                        this.state = 1981;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__14) {
                            {
                                this.state = 1980;
                                this.delay2();
                            }
                        }
                        this.state = 1983;
                        this.pass_enable_switch_instance();
                        this.state = 1988;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 1984;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 1985;
                                    this.pass_enable_switch_instance();
                                }
                            }
                            this.state = 1990;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1991;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.cmos_switch_instance = function () {
        var _localctx = new Cmos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, Verilog2001Parser.RULE_cmos_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1996;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 1995;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 1998;
                this.match(Verilog2001Parser.T__15);
                this.state = 1999;
                this.output_terminal();
                this.state = 2000;
                this.match(Verilog2001Parser.T__16);
                this.state = 2001;
                this.input_terminal();
                this.state = 2002;
                this.match(Verilog2001Parser.T__16);
                this.state = 2003;
                this.ncontrol_terminal();
                this.state = 2004;
                this.match(Verilog2001Parser.T__16);
                this.state = 2005;
                this.pcontrol_terminal();
                this.state = 2006;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.enable_gate_instance = function () {
        var _localctx = new Enable_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, Verilog2001Parser.RULE_enable_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2009;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 2008;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 2011;
                this.match(Verilog2001Parser.T__15);
                this.state = 2012;
                this.output_terminal();
                this.state = 2013;
                this.match(Verilog2001Parser.T__16);
                this.state = 2014;
                this.input_terminal();
                this.state = 2015;
                this.match(Verilog2001Parser.T__16);
                this.state = 2016;
                this.enable_terminal();
                this.state = 2017;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.mos_switch_instance = function () {
        var _localctx = new Mos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, Verilog2001Parser.RULE_mos_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2020;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 2019;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 2022;
                this.match(Verilog2001Parser.T__15);
                this.state = 2023;
                this.output_terminal();
                this.state = 2024;
                this.match(Verilog2001Parser.T__16);
                this.state = 2025;
                this.input_terminal();
                this.state = 2026;
                this.match(Verilog2001Parser.T__16);
                this.state = 2027;
                this.enable_terminal();
                this.state = 2028;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.n_input_gate_instance = function () {
        var _localctx = new N_input_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, Verilog2001Parser.RULE_n_input_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2031;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 2030;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 2033;
                this.match(Verilog2001Parser.T__15);
                this.state = 2034;
                this.output_terminal();
                this.state = 2035;
                this.match(Verilog2001Parser.T__16);
                this.state = 2036;
                this.input_terminal();
                this.state = 2041;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 2037;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 2038;
                            this.input_terminal();
                        }
                    }
                    this.state = 2043;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2044;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.n_output_gate_instance = function () {
        var _localctx = new N_output_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, Verilog2001Parser.RULE_n_output_gate_instance);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2047;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 2046;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 2049;
                this.match(Verilog2001Parser.T__15);
                this.state = 2050;
                this.output_terminal();
                this.state = 2055;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2051;
                                this.match(Verilog2001Parser.T__16);
                                this.state = 2052;
                                this.output_terminal();
                            }
                        }
                    }
                    this.state = 2057;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 219, this._ctx);
                }
                this.state = 2058;
                this.match(Verilog2001Parser.T__16);
                this.state = 2059;
                this.input_terminal();
                this.state = 2060;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pass_switch_instance = function () {
        var _localctx = new Pass_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, Verilog2001Parser.RULE_pass_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2063;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 2062;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 2065;
                this.match(Verilog2001Parser.T__15);
                this.state = 2066;
                this.inout_terminal();
                this.state = 2067;
                this.match(Verilog2001Parser.T__16);
                this.state = 2068;
                this.inout_terminal();
                this.state = 2069;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pass_enable_switch_instance = function () {
        var _localctx = new Pass_enable_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, Verilog2001Parser.RULE_pass_enable_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2072;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 2071;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 2074;
                this.match(Verilog2001Parser.T__15);
                this.state = 2075;
                this.inout_terminal();
                this.state = 2076;
                this.match(Verilog2001Parser.T__16);
                this.state = 2077;
                this.inout_terminal();
                this.state = 2078;
                this.match(Verilog2001Parser.T__16);
                this.state = 2079;
                this.enable_terminal();
                this.state = 2080;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pull_gate_instance = function () {
        var _localctx = new Pull_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, Verilog2001Parser.RULE_pull_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2083;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        this.state = 2082;
                        this.name_of_gate_instance();
                    }
                }
                this.state = 2085;
                this.match(Verilog2001Parser.T__15);
                this.state = 2086;
                this.output_terminal();
                this.state = 2087;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.name_of_gate_instance = function () {
        var _localctx = new Name_of_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, Verilog2001Parser.RULE_name_of_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2089;
                this.gate_instance_identifier();
                this.state = 2091;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 2090;
                        this.range_();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pulldown_strength = function () {
        var _localctx = new Pulldown_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, Verilog2001Parser.RULE_pulldown_strength);
        try {
            this.state = 2109;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 224, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2093;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2094;
                        this.strength0();
                        this.state = 2095;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 2096;
                        this.strength1();
                        this.state = 2097;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2099;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2100;
                        this.strength1();
                        this.state = 2101;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 2102;
                        this.strength0();
                        this.state = 2103;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2105;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2106;
                        this.strength0();
                        this.state = 2107;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pullup_strength = function () {
        var _localctx = new Pullup_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, Verilog2001Parser.RULE_pullup_strength);
        try {
            this.state = 2127;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 225, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2111;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2112;
                        this.strength0();
                        this.state = 2113;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 2114;
                        this.strength1();
                        this.state = 2115;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2117;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2118;
                        this.strength1();
                        this.state = 2119;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 2120;
                        this.strength0();
                        this.state = 2121;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2123;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2124;
                        this.strength1();
                        this.state = 2125;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.enable_terminal = function () {
        var _localctx = new Enable_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, Verilog2001Parser.RULE_enable_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2129;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.ncontrol_terminal = function () {
        var _localctx = new Ncontrol_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, Verilog2001Parser.RULE_ncontrol_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2131;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pcontrol_terminal = function () {
        var _localctx = new Pcontrol_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, Verilog2001Parser.RULE_pcontrol_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2133;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.input_terminal = function () {
        var _localctx = new Input_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, Verilog2001Parser.RULE_input_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2135;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.inout_terminal = function () {
        var _localctx = new Inout_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, Verilog2001Parser.RULE_inout_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2137;
                this.net_lvalue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.output_terminal = function () {
        var _localctx = new Output_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, Verilog2001Parser.RULE_output_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2139;
                this.net_lvalue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.cmos_switchtype = function () {
        var _localctx = new Cmos_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, Verilog2001Parser.RULE_cmos_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2141;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.T__72 || _la === Verilog2001Parser.T__73)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.enable_gatetype = function () {
        var _localctx = new Enable_gatetypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, Verilog2001Parser.RULE_enable_gatetype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2143;
                _la = this._input.LA(1);
                if (!(((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (Verilog2001Parser.T__74 - 75)) | (1 << (Verilog2001Parser.T__75 - 75)) | (1 << (Verilog2001Parser.T__76 - 75)) | (1 << (Verilog2001Parser.T__77 - 75)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.mos_switchtype = function () {
        var _localctx = new Mos_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, Verilog2001Parser.RULE_mos_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2145;
                _la = this._input.LA(1);
                if (!(((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & ((1 << (Verilog2001Parser.T__78 - 79)) | (1 << (Verilog2001Parser.T__79 - 79)) | (1 << (Verilog2001Parser.T__80 - 79)) | (1 << (Verilog2001Parser.T__81 - 79)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.n_input_gatetype = function () {
        var _localctx = new N_input_gatetypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, Verilog2001Parser.RULE_n_input_gatetype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2147;
                _la = this._input.LA(1);
                if (!(((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (Verilog2001Parser.T__82 - 83)) | (1 << (Verilog2001Parser.T__83 - 83)) | (1 << (Verilog2001Parser.T__84 - 83)) | (1 << (Verilog2001Parser.T__85 - 83)) | (1 << (Verilog2001Parser.T__86 - 83)) | (1 << (Verilog2001Parser.T__87 - 83)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.n_output_gatetype = function () {
        var _localctx = new N_output_gatetypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, Verilog2001Parser.RULE_n_output_gatetype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2149;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.T__88 || _la === Verilog2001Parser.T__89)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pass_en_switchtype = function () {
        var _localctx = new Pass_en_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, Verilog2001Parser.RULE_pass_en_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2151;
                _la = this._input.LA(1);
                if (!(((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & ((1 << (Verilog2001Parser.T__90 - 91)) | (1 << (Verilog2001Parser.T__91 - 91)) | (1 << (Verilog2001Parser.T__92 - 91)) | (1 << (Verilog2001Parser.T__93 - 91)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pass_switchtype = function () {
        var _localctx = new Pass_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, Verilog2001Parser.RULE_pass_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2153;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.T__94 || _la === Verilog2001Parser.T__95)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_instantiation = function () {
        var _localctx = new Module_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, Verilog2001Parser.RULE_module_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2155;
                this.module_identifier();
                this.state = 2157;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__14) {
                    {
                        this.state = 2156;
                        this.parameter_value_assignment();
                    }
                }
                this.state = 2159;
                this.module_instance();
                this.state = 2164;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 2160;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 2161;
                            this.module_instance();
                        }
                    }
                    this.state = 2166;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2167;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.parameter_value_assignment = function () {
        var _localctx = new Parameter_value_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, Verilog2001Parser.RULE_parameter_value_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2169;
                this.match(Verilog2001Parser.T__14);
                this.state = 2170;
                this.match(Verilog2001Parser.T__15);
                this.state = 2171;
                this.list_of_parameter_assignments();
                this.state = 2172;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_parameter_assignments = function () {
        var _localctx = new List_of_parameter_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, Verilog2001Parser.RULE_list_of_parameter_assignments);
        var _la;
        try {
            this.state = 2190;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__18:
                case Verilog2001Parser.T__135:
                case Verilog2001Parser.T__136:
                case Verilog2001Parser.T__140:
                case Verilog2001Parser.T__141:
                case Verilog2001Parser.T__142:
                case Verilog2001Parser.T__143:
                case Verilog2001Parser.T__144:
                case Verilog2001Parser.T__145:
                case Verilog2001Parser.T__146:
                case Verilog2001Parser.T__147:
                case Verilog2001Parser.T__148:
                case Verilog2001Parser.Real_number:
                case Verilog2001Parser.Decimal_number:
                case Verilog2001Parser.Binary_number:
                case Verilog2001Parser.Octal_number:
                case Verilog2001Parser.Hex_number:
                case Verilog2001Parser.String:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                case Verilog2001Parser.Dollar_Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2174;
                        this.ordered_parameter_assignment();
                        this.state = 2179;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 2175;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2176;
                                    this.ordered_parameter_assignment();
                                }
                            }
                            this.state = 2181;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case Verilog2001Parser.T__4:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2182;
                        this.named_parameter_assignment();
                        this.state = 2187;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 2183;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2184;
                                    this.named_parameter_assignment();
                                }
                            }
                            this.state = 2189;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.ordered_parameter_assignment = function () {
        var _localctx = new Ordered_parameter_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, Verilog2001Parser.RULE_ordered_parameter_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2192;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.named_parameter_assignment = function () {
        var _localctx = new Named_parameter_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, Verilog2001Parser.RULE_named_parameter_assignment);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2194;
                this.match(Verilog2001Parser.T__4);
                this.state = 2195;
                this.parameter_identifier();
                this.state = 2196;
                this.match(Verilog2001Parser.T__15);
                this.state = 2198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                    {
                        this.state = 2197;
                        this.expression();
                    }
                }
                this.state = 2200;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_instance = function () {
        var _localctx = new Module_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, Verilog2001Parser.RULE_module_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2202;
                this.name_of_instance();
                this.state = 2203;
                this.match(Verilog2001Parser.T__15);
                this.state = 2204;
                this.list_of_port_connections();
                this.state = 2205;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.name_of_instance = function () {
        var _localctx = new Name_of_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, Verilog2001Parser.RULE_name_of_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2207;
                this.module_instance_identifier();
                this.state = 2209;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__20) {
                    {
                        this.state = 2208;
                        this.range_();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_port_connections = function () {
        var _localctx = new List_of_port_connectionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, Verilog2001Parser.RULE_list_of_port_connections);
        var _la;
        try {
            this.state = 2227;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 235, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2211;
                        this.ordered_port_connection();
                        this.state = 2216;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 2212;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2213;
                                    this.ordered_port_connection();
                                }
                            }
                            this.state = 2218;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2219;
                        this.named_port_connection();
                        this.state = 2224;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 2220;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2221;
                                    this.named_port_connection();
                                }
                            }
                            this.state = 2226;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.ordered_port_connection = function () {
        var _localctx = new Ordered_port_connectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, Verilog2001Parser.RULE_ordered_port_connection);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2232;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2229;
                                this.attribute_instance();
                            }
                        }
                    }
                    this.state = 2234;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
                }
                this.state = 2236;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                    {
                        this.state = 2235;
                        this.expression();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.named_port_connection = function () {
        var _localctx = new Named_port_connectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, Verilog2001Parser.RULE_named_port_connection);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2241;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__15) {
                    {
                        {
                            this.state = 2238;
                            this.attribute_instance();
                        }
                    }
                    this.state = 2243;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2244;
                this.match(Verilog2001Parser.T__4);
                this.state = 2245;
                this.port_identifier();
                this.state = 2246;
                this.match(Verilog2001Parser.T__15);
                this.state = 2248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                    {
                        this.state = 2247;
                        this.expression();
                    }
                }
                this.state = 2250;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generated_instantiation = function () {
        var _localctx = new Generated_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, Verilog2001Parser.RULE_generated_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2252;
                this.match(Verilog2001Parser.T__96);
                this.state = 2256;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 16)) & ~0x1F) === 0 && ((1 << (_la - 16)) & ((1 << (Verilog2001Parser.T__15 - 16)) | (1 << (Verilog2001Parser.T__22 - 16)) | (1 << (Verilog2001Parser.T__25 - 16)) | (1 << (Verilog2001Parser.T__26 - 16)) | (1 << (Verilog2001Parser.T__27 - 16)) | (1 << (Verilog2001Parser.T__28 - 16)) | (1 << (Verilog2001Parser.T__34 - 16)) | (1 << (Verilog2001Parser.T__35 - 16)) | (1 << (Verilog2001Parser.T__36 - 16)) | (1 << (Verilog2001Parser.T__37 - 16)) | (1 << (Verilog2001Parser.T__40 - 16)) | (1 << (Verilog2001Parser.T__41 - 16)) | (1 << (Verilog2001Parser.T__42 - 16)) | (1 << (Verilog2001Parser.T__43 - 16)) | (1 << (Verilog2001Parser.T__44 - 16)) | (1 << (Verilog2001Parser.T__45 - 16)) | (1 << (Verilog2001Parser.T__46 - 16)))) !== 0) || ((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (Verilog2001Parser.T__47 - 48)) | (1 << (Verilog2001Parser.T__48 - 48)) | (1 << (Verilog2001Parser.T__49 - 48)) | (1 << (Verilog2001Parser.T__65 - 48)) | (1 << (Verilog2001Parser.T__68 - 48)) | (1 << (Verilog2001Parser.T__70 - 48)) | (1 << (Verilog2001Parser.T__71 - 48)) | (1 << (Verilog2001Parser.T__72 - 48)) | (1 << (Verilog2001Parser.T__73 - 48)) | (1 << (Verilog2001Parser.T__74 - 48)) | (1 << (Verilog2001Parser.T__75 - 48)) | (1 << (Verilog2001Parser.T__76 - 48)) | (1 << (Verilog2001Parser.T__77 - 48)) | (1 << (Verilog2001Parser.T__78 - 48)))) !== 0) || ((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & ((1 << (Verilog2001Parser.T__79 - 80)) | (1 << (Verilog2001Parser.T__80 - 80)) | (1 << (Verilog2001Parser.T__81 - 80)) | (1 << (Verilog2001Parser.T__82 - 80)) | (1 << (Verilog2001Parser.T__83 - 80)) | (1 << (Verilog2001Parser.T__84 - 80)) | (1 << (Verilog2001Parser.T__85 - 80)) | (1 << (Verilog2001Parser.T__86 - 80)) | (1 << (Verilog2001Parser.T__87 - 80)) | (1 << (Verilog2001Parser.T__88 - 80)) | (1 << (Verilog2001Parser.T__89 - 80)) | (1 << (Verilog2001Parser.T__90 - 80)) | (1 << (Verilog2001Parser.T__91 - 80)) | (1 << (Verilog2001Parser.T__92 - 80)) | (1 << (Verilog2001Parser.T__93 - 80)) | (1 << (Verilog2001Parser.T__94 - 80)) | (1 << (Verilog2001Parser.T__95 - 80)) | (1 << (Verilog2001Parser.T__98 - 80)) | (1 << (Verilog2001Parser.T__100 - 80)) | (1 << (Verilog2001Parser.T__102 - 80)) | (1 << (Verilog2001Parser.T__103 - 80)) | (1 << (Verilog2001Parser.T__105 - 80)) | (1 << (Verilog2001Parser.T__106 - 80)) | (1 << (Verilog2001Parser.T__107 - 80)))) !== 0) || _la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        {
                            this.state = 2253;
                            this.generate_item();
                        }
                    }
                    this.state = 2258;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2259;
                this.match(Verilog2001Parser.T__97);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generate_item_or_null = function () {
        var _localctx = new Generate_item_or_nullContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, Verilog2001Parser.RULE_generate_item_or_null);
        try {
            this.state = 2263;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__22:
                case Verilog2001Parser.T__25:
                case Verilog2001Parser.T__26:
                case Verilog2001Parser.T__27:
                case Verilog2001Parser.T__28:
                case Verilog2001Parser.T__34:
                case Verilog2001Parser.T__35:
                case Verilog2001Parser.T__36:
                case Verilog2001Parser.T__37:
                case Verilog2001Parser.T__40:
                case Verilog2001Parser.T__41:
                case Verilog2001Parser.T__42:
                case Verilog2001Parser.T__43:
                case Verilog2001Parser.T__44:
                case Verilog2001Parser.T__45:
                case Verilog2001Parser.T__46:
                case Verilog2001Parser.T__47:
                case Verilog2001Parser.T__48:
                case Verilog2001Parser.T__49:
                case Verilog2001Parser.T__65:
                case Verilog2001Parser.T__68:
                case Verilog2001Parser.T__70:
                case Verilog2001Parser.T__71:
                case Verilog2001Parser.T__72:
                case Verilog2001Parser.T__73:
                case Verilog2001Parser.T__74:
                case Verilog2001Parser.T__75:
                case Verilog2001Parser.T__76:
                case Verilog2001Parser.T__77:
                case Verilog2001Parser.T__78:
                case Verilog2001Parser.T__79:
                case Verilog2001Parser.T__80:
                case Verilog2001Parser.T__81:
                case Verilog2001Parser.T__82:
                case Verilog2001Parser.T__83:
                case Verilog2001Parser.T__84:
                case Verilog2001Parser.T__85:
                case Verilog2001Parser.T__86:
                case Verilog2001Parser.T__87:
                case Verilog2001Parser.T__88:
                case Verilog2001Parser.T__89:
                case Verilog2001Parser.T__90:
                case Verilog2001Parser.T__91:
                case Verilog2001Parser.T__92:
                case Verilog2001Parser.T__93:
                case Verilog2001Parser.T__94:
                case Verilog2001Parser.T__95:
                case Verilog2001Parser.T__98:
                case Verilog2001Parser.T__100:
                case Verilog2001Parser.T__102:
                case Verilog2001Parser.T__103:
                case Verilog2001Parser.T__105:
                case Verilog2001Parser.T__106:
                case Verilog2001Parser.T__107:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2261;
                        this.generate_item();
                    }
                    break;
                case Verilog2001Parser.T__1:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2262;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generate_item = function () {
        var _localctx = new Generate_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, Verilog2001Parser.RULE_generate_item);
        try {
            this.state = 2270;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__98:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2265;
                        this.generate_conditional_statement();
                    }
                    break;
                case Verilog2001Parser.T__100:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2266;
                        this.generate_case_statement();
                    }
                    break;
                case Verilog2001Parser.T__102:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2267;
                        this.generate_loop_statement();
                    }
                    break;
                case Verilog2001Parser.T__103:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2268;
                        this.generate_block();
                    }
                    break;
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__22:
                case Verilog2001Parser.T__25:
                case Verilog2001Parser.T__26:
                case Verilog2001Parser.T__27:
                case Verilog2001Parser.T__28:
                case Verilog2001Parser.T__34:
                case Verilog2001Parser.T__35:
                case Verilog2001Parser.T__36:
                case Verilog2001Parser.T__37:
                case Verilog2001Parser.T__40:
                case Verilog2001Parser.T__41:
                case Verilog2001Parser.T__42:
                case Verilog2001Parser.T__43:
                case Verilog2001Parser.T__44:
                case Verilog2001Parser.T__45:
                case Verilog2001Parser.T__46:
                case Verilog2001Parser.T__47:
                case Verilog2001Parser.T__48:
                case Verilog2001Parser.T__49:
                case Verilog2001Parser.T__65:
                case Verilog2001Parser.T__68:
                case Verilog2001Parser.T__70:
                case Verilog2001Parser.T__71:
                case Verilog2001Parser.T__72:
                case Verilog2001Parser.T__73:
                case Verilog2001Parser.T__74:
                case Verilog2001Parser.T__75:
                case Verilog2001Parser.T__76:
                case Verilog2001Parser.T__77:
                case Verilog2001Parser.T__78:
                case Verilog2001Parser.T__79:
                case Verilog2001Parser.T__80:
                case Verilog2001Parser.T__81:
                case Verilog2001Parser.T__82:
                case Verilog2001Parser.T__83:
                case Verilog2001Parser.T__84:
                case Verilog2001Parser.T__85:
                case Verilog2001Parser.T__86:
                case Verilog2001Parser.T__87:
                case Verilog2001Parser.T__88:
                case Verilog2001Parser.T__89:
                case Verilog2001Parser.T__90:
                case Verilog2001Parser.T__91:
                case Verilog2001Parser.T__92:
                case Verilog2001Parser.T__93:
                case Verilog2001Parser.T__94:
                case Verilog2001Parser.T__95:
                case Verilog2001Parser.T__105:
                case Verilog2001Parser.T__106:
                case Verilog2001Parser.T__107:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2269;
                        this.module_or_generate_item();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generate_conditional_statement = function () {
        var _localctx = new Generate_conditional_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, Verilog2001Parser.RULE_generate_conditional_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2272;
                this.match(Verilog2001Parser.T__98);
                this.state = 2273;
                this.match(Verilog2001Parser.T__15);
                this.state = 2274;
                this.constant_expression();
                this.state = 2275;
                this.match(Verilog2001Parser.T__17);
                this.state = 2276;
                this.generate_item_or_null();
                this.state = 2279;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 243, this._ctx)) {
                    case 1:
                        {
                            this.state = 2277;
                            this.match(Verilog2001Parser.T__99);
                            this.state = 2278;
                            this.generate_item_or_null();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generate_case_statement = function () {
        var _localctx = new Generate_case_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, Verilog2001Parser.RULE_generate_case_statement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2281;
                this.match(Verilog2001Parser.T__100);
                this.state = 2282;
                this.match(Verilog2001Parser.T__15);
                this.state = 2283;
                this.constant_expression();
                this.state = 2284;
                this.match(Verilog2001Parser.T__17);
                this.state = 2285;
                this.genvar_case_item();
                this.state = 2289;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                    {
                        {
                            this.state = 2286;
                            this.genvar_case_item();
                        }
                    }
                    this.state = 2291;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2292;
                this.match(Verilog2001Parser.T__101);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.genvar_case_item = function () {
        var _localctx = new Genvar_case_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, Verilog2001Parser.RULE_genvar_case_item);
        var _la;
        try {
            this.state = 2310;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__18:
                case Verilog2001Parser.T__135:
                case Verilog2001Parser.T__136:
                case Verilog2001Parser.T__140:
                case Verilog2001Parser.T__141:
                case Verilog2001Parser.T__142:
                case Verilog2001Parser.T__143:
                case Verilog2001Parser.T__144:
                case Verilog2001Parser.T__145:
                case Verilog2001Parser.T__146:
                case Verilog2001Parser.T__147:
                case Verilog2001Parser.T__148:
                case Verilog2001Parser.Real_number:
                case Verilog2001Parser.Decimal_number:
                case Verilog2001Parser.Binary_number:
                case Verilog2001Parser.Octal_number:
                case Verilog2001Parser.Hex_number:
                case Verilog2001Parser.String:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                case Verilog2001Parser.Dollar_Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2294;
                        this.constant_expression();
                        this.state = 2299;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 2295;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2296;
                                    this.constant_expression();
                                }
                            }
                            this.state = 2301;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2302;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 2303;
                        this.generate_item_or_null();
                    }
                    break;
                case Verilog2001Parser.T__5:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2305;
                        this.match(Verilog2001Parser.T__5);
                        this.state = 2307;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__64) {
                            {
                                this.state = 2306;
                                this.match(Verilog2001Parser.T__64);
                            }
                        }
                        this.state = 2309;
                        this.generate_item_or_null();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generate_loop_statement = function () {
        var _localctx = new Generate_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, Verilog2001Parser.RULE_generate_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2312;
                this.match(Verilog2001Parser.T__102);
                this.state = 2313;
                this.match(Verilog2001Parser.T__15);
                this.state = 2314;
                this.genvar_assignment();
                this.state = 2315;
                this.match(Verilog2001Parser.T__1);
                this.state = 2316;
                this.constant_expression();
                this.state = 2317;
                this.match(Verilog2001Parser.T__1);
                this.state = 2318;
                this.genvar_assignment();
                this.state = 2319;
                this.match(Verilog2001Parser.T__17);
                this.state = 2320;
                this.generate_block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.genvar_assignment = function () {
        var _localctx = new Genvar_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, Verilog2001Parser.RULE_genvar_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2322;
                this.genvar_identifier();
                this.state = 2323;
                this.match(Verilog2001Parser.T__50);
                this.state = 2324;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generate_block = function () {
        var _localctx = new Generate_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, Verilog2001Parser.RULE_generate_block);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2326;
                this.match(Verilog2001Parser.T__103);
                this.state = 2329;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__64) {
                    {
                        this.state = 2327;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 2328;
                        this.generate_block_identifier();
                    }
                }
                this.state = 2334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 16)) & ~0x1F) === 0 && ((1 << (_la - 16)) & ((1 << (Verilog2001Parser.T__15 - 16)) | (1 << (Verilog2001Parser.T__22 - 16)) | (1 << (Verilog2001Parser.T__25 - 16)) | (1 << (Verilog2001Parser.T__26 - 16)) | (1 << (Verilog2001Parser.T__27 - 16)) | (1 << (Verilog2001Parser.T__28 - 16)) | (1 << (Verilog2001Parser.T__34 - 16)) | (1 << (Verilog2001Parser.T__35 - 16)) | (1 << (Verilog2001Parser.T__36 - 16)) | (1 << (Verilog2001Parser.T__37 - 16)) | (1 << (Verilog2001Parser.T__40 - 16)) | (1 << (Verilog2001Parser.T__41 - 16)) | (1 << (Verilog2001Parser.T__42 - 16)) | (1 << (Verilog2001Parser.T__43 - 16)) | (1 << (Verilog2001Parser.T__44 - 16)) | (1 << (Verilog2001Parser.T__45 - 16)) | (1 << (Verilog2001Parser.T__46 - 16)))) !== 0) || ((((_la - 48)) & ~0x1F) === 0 && ((1 << (_la - 48)) & ((1 << (Verilog2001Parser.T__47 - 48)) | (1 << (Verilog2001Parser.T__48 - 48)) | (1 << (Verilog2001Parser.T__49 - 48)) | (1 << (Verilog2001Parser.T__65 - 48)) | (1 << (Verilog2001Parser.T__68 - 48)) | (1 << (Verilog2001Parser.T__70 - 48)) | (1 << (Verilog2001Parser.T__71 - 48)) | (1 << (Verilog2001Parser.T__72 - 48)) | (1 << (Verilog2001Parser.T__73 - 48)) | (1 << (Verilog2001Parser.T__74 - 48)) | (1 << (Verilog2001Parser.T__75 - 48)) | (1 << (Verilog2001Parser.T__76 - 48)) | (1 << (Verilog2001Parser.T__77 - 48)) | (1 << (Verilog2001Parser.T__78 - 48)))) !== 0) || ((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & ((1 << (Verilog2001Parser.T__79 - 80)) | (1 << (Verilog2001Parser.T__80 - 80)) | (1 << (Verilog2001Parser.T__81 - 80)) | (1 << (Verilog2001Parser.T__82 - 80)) | (1 << (Verilog2001Parser.T__83 - 80)) | (1 << (Verilog2001Parser.T__84 - 80)) | (1 << (Verilog2001Parser.T__85 - 80)) | (1 << (Verilog2001Parser.T__86 - 80)) | (1 << (Verilog2001Parser.T__87 - 80)) | (1 << (Verilog2001Parser.T__88 - 80)) | (1 << (Verilog2001Parser.T__89 - 80)) | (1 << (Verilog2001Parser.T__90 - 80)) | (1 << (Verilog2001Parser.T__91 - 80)) | (1 << (Verilog2001Parser.T__92 - 80)) | (1 << (Verilog2001Parser.T__93 - 80)) | (1 << (Verilog2001Parser.T__94 - 80)) | (1 << (Verilog2001Parser.T__95 - 80)) | (1 << (Verilog2001Parser.T__98 - 80)) | (1 << (Verilog2001Parser.T__100 - 80)) | (1 << (Verilog2001Parser.T__102 - 80)) | (1 << (Verilog2001Parser.T__103 - 80)) | (1 << (Verilog2001Parser.T__105 - 80)) | (1 << (Verilog2001Parser.T__106 - 80)) | (1 << (Verilog2001Parser.T__107 - 80)))) !== 0) || _la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        {
                            this.state = 2331;
                            this.generate_item();
                        }
                    }
                    this.state = 2336;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2337;
                this.match(Verilog2001Parser.T__104);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.continuous_assign = function () {
        var _localctx = new Continuous_assignContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, Verilog2001Parser.RULE_continuous_assign);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2339;
                this.match(Verilog2001Parser.T__105);
                this.state = 2341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15) {
                    {
                        this.state = 2340;
                        this.drive_strength();
                    }
                }
                this.state = 2344;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__14) {
                    {
                        this.state = 2343;
                        this.delay3();
                    }
                }
                this.state = 2346;
                this.list_of_net_assignments();
                this.state = 2347;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_net_assignments = function () {
        var _localctx = new List_of_net_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, Verilog2001Parser.RULE_list_of_net_assignments);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2349;
                this.net_assignment();
                this.state = 2354;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 2350;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 2351;
                            this.net_assignment();
                        }
                    }
                    this.state = 2356;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_assignment = function () {
        var _localctx = new Net_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, Verilog2001Parser.RULE_net_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2357;
                this.net_lvalue();
                this.state = 2358;
                this.match(Verilog2001Parser.T__50);
                this.state = 2359;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.initial_construct = function () {
        var _localctx = new Initial_constructContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, Verilog2001Parser.RULE_initial_construct);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2361;
                this.match(Verilog2001Parser.T__106);
                this.state = 2362;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.always_construct = function () {
        var _localctx = new Always_constructContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, Verilog2001Parser.RULE_always_construct);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2364;
                this.match(Verilog2001Parser.T__107);
                this.state = 2365;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.blocking_assignment = function () {
        var _localctx = new Blocking_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, Verilog2001Parser.RULE_blocking_assignment);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2367;
                this.variable_lvalue();
                this.state = 2368;
                this.match(Verilog2001Parser.T__50);
                this.state = 2370;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__14 || _la === Verilog2001Parser.T__114 || _la === Verilog2001Parser.T__116) {
                    {
                        this.state = 2369;
                        this.delay_or_event_control();
                    }
                }
                this.state = 2372;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.nonblocking_assignment = function () {
        var _localctx = new Nonblocking_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, Verilog2001Parser.RULE_nonblocking_assignment);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2374;
                this.variable_lvalue();
                this.state = 2375;
                this.match(Verilog2001Parser.T__108);
                this.state = 2377;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__14 || _la === Verilog2001Parser.T__114 || _la === Verilog2001Parser.T__116) {
                    {
                        this.state = 2376;
                        this.delay_or_event_control();
                    }
                }
                this.state = 2379;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.procedural_continuous_assignments = function () {
        var _localctx = new Procedural_continuous_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, Verilog2001Parser.RULE_procedural_continuous_assignments);
        try {
            this.state = 2393;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 255, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2381;
                        this.match(Verilog2001Parser.T__105);
                        this.state = 2382;
                        this.variable_assignment();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2383;
                        this.match(Verilog2001Parser.T__109);
                        this.state = 2384;
                        this.variable_lvalue();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2385;
                        this.match(Verilog2001Parser.T__110);
                        this.state = 2386;
                        this.variable_assignment();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2387;
                        this.match(Verilog2001Parser.T__110);
                        this.state = 2388;
                        this.net_assignment();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2389;
                        this.match(Verilog2001Parser.T__111);
                        this.state = 2390;
                        this.variable_lvalue();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2391;
                        this.match(Verilog2001Parser.T__111);
                        this.state = 2392;
                        this.net_lvalue();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_blocking_assignment = function () {
        var _localctx = new Function_blocking_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, Verilog2001Parser.RULE_function_blocking_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2395;
                this.variable_lvalue();
                this.state = 2396;
                this.match(Verilog2001Parser.T__50);
                this.state = 2397;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_statement_or_null = function () {
        var _localctx = new Function_statement_or_nullContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, Verilog2001Parser.RULE_function_statement_or_null);
        var _la;
        try {
            this.state = 2407;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 257, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2399;
                        this.function_statement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2403;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2400;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2405;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2406;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_seq_block = function () {
        var _localctx = new Function_seq_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, Verilog2001Parser.RULE_function_seq_block);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2409;
                this.match(Verilog2001Parser.T__103);
                this.state = 2418;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__64) {
                    {
                        this.state = 2410;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 2411;
                        this.block_identifier();
                        this.state = 2415;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 2412;
                                        this.block_item_declaration();
                                    }
                                }
                            }
                            this.state = 2417;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 258, this._ctx);
                        }
                    }
                }
                this.state = 2423;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (Verilog2001Parser.T__98 - 99)) | (1 << (Verilog2001Parser.T__100 - 99)) | (1 << (Verilog2001Parser.T__102 - 99)) | (1 << (Verilog2001Parser.T__103 - 99)) | (1 << (Verilog2001Parser.T__114 - 99)) | (1 << (Verilog2001Parser.T__115 - 99)) | (1 << (Verilog2001Parser.T__122 - 99)) | (1 << (Verilog2001Parser.T__123 - 99)) | (1 << (Verilog2001Parser.T__124 - 99)) | (1 << (Verilog2001Parser.T__125 - 99)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (Verilog2001Parser.Escaped_identifier - 175)) | (1 << (Verilog2001Parser.Simple_identifier - 175)) | (1 << (Verilog2001Parser.Dollar_Identifier - 175)))) !== 0)) {
                    {
                        {
                            this.state = 2420;
                            this.function_statement();
                        }
                    }
                    this.state = 2425;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2426;
                this.match(Verilog2001Parser.T__104);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.variable_assignment = function () {
        var _localctx = new Variable_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, Verilog2001Parser.RULE_variable_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2428;
                this.variable_lvalue();
                this.state = 2429;
                this.match(Verilog2001Parser.T__50);
                this.state = 2430;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.par_block = function () {
        var _localctx = new Par_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, Verilog2001Parser.RULE_par_block);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2432;
                this.match(Verilog2001Parser.T__112);
                this.state = 2441;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__64) {
                    {
                        this.state = 2433;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 2434;
                        this.block_identifier();
                        this.state = 2438;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 2435;
                                        this.block_item_declaration();
                                    }
                                }
                            }
                            this.state = 2440;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
                        }
                    }
                }
                this.state = 2446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__14) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (Verilog2001Parser.T__98 - 99)) | (1 << (Verilog2001Parser.T__100 - 99)) | (1 << (Verilog2001Parser.T__102 - 99)) | (1 << (Verilog2001Parser.T__103 - 99)) | (1 << (Verilog2001Parser.T__105 - 99)) | (1 << (Verilog2001Parser.T__109 - 99)) | (1 << (Verilog2001Parser.T__110 - 99)) | (1 << (Verilog2001Parser.T__111 - 99)) | (1 << (Verilog2001Parser.T__112 - 99)) | (1 << (Verilog2001Parser.T__114 - 99)) | (1 << (Verilog2001Parser.T__115 - 99)) | (1 << (Verilog2001Parser.T__116 - 99)) | (1 << (Verilog2001Parser.T__118 - 99)) | (1 << (Verilog2001Parser.T__121 - 99)) | (1 << (Verilog2001Parser.T__122 - 99)) | (1 << (Verilog2001Parser.T__123 - 99)) | (1 << (Verilog2001Parser.T__124 - 99)) | (1 << (Verilog2001Parser.T__125 - 99)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (Verilog2001Parser.Escaped_identifier - 175)) | (1 << (Verilog2001Parser.Simple_identifier - 175)) | (1 << (Verilog2001Parser.Dollar_Identifier - 175)))) !== 0)) {
                    {
                        {
                            this.state = 2443;
                            this.statement();
                        }
                    }
                    this.state = 2448;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2449;
                this.match(Verilog2001Parser.T__113);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.seq_block = function () {
        var _localctx = new Seq_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, Verilog2001Parser.RULE_seq_block);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2451;
                this.match(Verilog2001Parser.T__103);
                this.state = 2460;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__64) {
                    {
                        this.state = 2452;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 2453;
                        this.block_identifier();
                        this.state = 2457;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 2454;
                                        this.block_item_declaration();
                                    }
                                }
                            }
                            this.state = 2459;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
                        }
                    }
                }
                this.state = 2465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__14) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (Verilog2001Parser.T__98 - 99)) | (1 << (Verilog2001Parser.T__100 - 99)) | (1 << (Verilog2001Parser.T__102 - 99)) | (1 << (Verilog2001Parser.T__103 - 99)) | (1 << (Verilog2001Parser.T__105 - 99)) | (1 << (Verilog2001Parser.T__109 - 99)) | (1 << (Verilog2001Parser.T__110 - 99)) | (1 << (Verilog2001Parser.T__111 - 99)) | (1 << (Verilog2001Parser.T__112 - 99)) | (1 << (Verilog2001Parser.T__114 - 99)) | (1 << (Verilog2001Parser.T__115 - 99)) | (1 << (Verilog2001Parser.T__116 - 99)) | (1 << (Verilog2001Parser.T__118 - 99)) | (1 << (Verilog2001Parser.T__121 - 99)) | (1 << (Verilog2001Parser.T__122 - 99)) | (1 << (Verilog2001Parser.T__123 - 99)) | (1 << (Verilog2001Parser.T__124 - 99)) | (1 << (Verilog2001Parser.T__125 - 99)))) !== 0) || ((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (Verilog2001Parser.Escaped_identifier - 175)) | (1 << (Verilog2001Parser.Simple_identifier - 175)) | (1 << (Verilog2001Parser.Dollar_Identifier - 175)))) !== 0)) {
                    {
                        {
                            this.state = 2462;
                            this.statement();
                        }
                    }
                    this.state = 2467;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2468;
                this.match(Verilog2001Parser.T__104);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.statement = function () {
        var _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, Verilog2001Parser.RULE_statement);
        var _la;
        try {
            this.state = 2574;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 281, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2473;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2470;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2475;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2476;
                        this.blocking_assignment();
                        this.state = 2477;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2482;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2479;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2484;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2485;
                        this.case_statement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2489;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2486;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2491;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2492;
                        this.conditional_statement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2496;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2493;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2498;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2499;
                        this.disable_statement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2503;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2500;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2505;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2506;
                        this.event_trigger();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2510;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2507;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2512;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2513;
                        this.loop_statement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2517;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2514;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2519;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2520;
                        this.nonblocking_assignment();
                        this.state = 2521;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2526;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2523;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2528;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2529;
                        this.par_block();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 2533;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2530;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2535;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2536;
                        this.procedural_continuous_assignments();
                        this.state = 2537;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 2542;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2539;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2544;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2545;
                        this.procedural_timing_control_statement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 2549;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2546;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2551;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2552;
                        this.seq_block();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 2556;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2553;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2558;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2559;
                        this.system_task_enable();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 2563;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2560;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2565;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2566;
                        this.task_enable();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 2570;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2567;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2572;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2573;
                        this.wait_statement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.statement_or_null = function () {
        var _localctx = new Statement_or_nullContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, Verilog2001Parser.RULE_statement_or_null);
        var _la;
        try {
            this.state = 2584;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 283, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2576;
                        this.statement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2580;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2577;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2582;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2583;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_statement = function () {
        var _localctx = new Function_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, Verilog2001Parser.RULE_function_statement);
        var _la;
        try {
            this.state = 2637;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 291, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2589;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2586;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2591;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2592;
                        this.function_blocking_assignment();
                        this.state = 2593;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2598;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2595;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2600;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2601;
                        this.function_case_statement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2605;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2602;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2607;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2608;
                        this.function_conditional_statement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2612;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2609;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2614;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2615;
                        this.function_loop_statement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2619;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2616;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2621;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2622;
                        this.function_seq_block();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2626;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2623;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2628;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2629;
                        this.disable_statement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2633;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__15) {
                            {
                                {
                                    this.state = 2630;
                                    this.attribute_instance();
                                }
                            }
                            this.state = 2635;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2636;
                        this.system_task_enable();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.delay_or_event_control = function () {
        var _localctx = new Delay_or_event_controlContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, Verilog2001Parser.RULE_delay_or_event_control);
        try {
            this.state = 2647;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__14:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2639;
                        this.delay_control();
                    }
                    break;
                case Verilog2001Parser.T__116:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2640;
                        this.event_control();
                    }
                    break;
                case Verilog2001Parser.T__114:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2641;
                        this.match(Verilog2001Parser.T__114);
                        this.state = 2642;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2643;
                        this.expression();
                        this.state = 2644;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2645;
                        this.event_control();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.delay_control = function () {
        var _localctx = new Delay_controlContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, Verilog2001Parser.RULE_delay_control);
        try {
            this.state = 2656;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 293, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2649;
                        this.match(Verilog2001Parser.T__14);
                        this.state = 2650;
                        this.delay_value();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2651;
                        this.match(Verilog2001Parser.T__14);
                        this.state = 2652;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2653;
                        this.mintypmax_expression();
                        this.state = 2654;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.disable_statement = function () {
        var _localctx = new Disable_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, Verilog2001Parser.RULE_disable_statement);
        try {
            this.state = 2666;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 294, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2658;
                        this.match(Verilog2001Parser.T__115);
                        this.state = 2659;
                        this.hierarchical_task_identifier();
                        this.state = 2660;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2662;
                        this.match(Verilog2001Parser.T__115);
                        this.state = 2663;
                        this.hierarchical_block_identifier();
                        this.state = 2664;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.event_control = function () {
        var _localctx = new Event_controlContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, Verilog2001Parser.RULE_event_control);
        try {
            this.state = 2681;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 295, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2668;
                        this.match(Verilog2001Parser.T__116);
                        this.state = 2669;
                        this.event_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2670;
                        this.match(Verilog2001Parser.T__116);
                        this.state = 2671;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2672;
                        this.event_expression();
                        this.state = 2673;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2675;
                        this.match(Verilog2001Parser.T__116);
                        this.state = 2676;
                        this.match(Verilog2001Parser.T__117);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2677;
                        this.match(Verilog2001Parser.T__116);
                        this.state = 2678;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2679;
                        this.match(Verilog2001Parser.T__117);
                        this.state = 2680;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.event_trigger = function () {
        var _localctx = new Event_triggerContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, Verilog2001Parser.RULE_event_trigger);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2683;
                this.match(Verilog2001Parser.T__118);
                this.state = 2684;
                this.hierarchical_event_identifier();
                this.state = 2685;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.event_expression = function () {
        var _localctx = new Event_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, Verilog2001Parser.RULE_event_expression);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2687;
                this.event_primary();
                this.state = 2694;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16 || _la === Verilog2001Parser.T__84) {
                    {
                        this.state = 2692;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Verilog2001Parser.T__84:
                                {
                                    this.state = 2688;
                                    this.match(Verilog2001Parser.T__84);
                                    this.state = 2689;
                                    this.event_primary();
                                }
                                break;
                            case Verilog2001Parser.T__16:
                                {
                                    this.state = 2690;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2691;
                                    this.event_primary();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 2696;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.event_primary = function () {
        var _localctx = new Event_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, Verilog2001Parser.RULE_event_primary);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2702;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Verilog2001Parser.T__15:
                    case Verilog2001Parser.T__18:
                    case Verilog2001Parser.T__135:
                    case Verilog2001Parser.T__136:
                    case Verilog2001Parser.T__140:
                    case Verilog2001Parser.T__141:
                    case Verilog2001Parser.T__142:
                    case Verilog2001Parser.T__143:
                    case Verilog2001Parser.T__144:
                    case Verilog2001Parser.T__145:
                    case Verilog2001Parser.T__146:
                    case Verilog2001Parser.T__147:
                    case Verilog2001Parser.T__148:
                    case Verilog2001Parser.Real_number:
                    case Verilog2001Parser.Decimal_number:
                    case Verilog2001Parser.Binary_number:
                    case Verilog2001Parser.Octal_number:
                    case Verilog2001Parser.Hex_number:
                    case Verilog2001Parser.String:
                    case Verilog2001Parser.Escaped_identifier:
                    case Verilog2001Parser.Simple_identifier:
                    case Verilog2001Parser.Dollar_Identifier:
                        {
                            this.state = 2697;
                            this.expression();
                        }
                        break;
                    case Verilog2001Parser.T__119:
                        {
                            this.state = 2698;
                            this.match(Verilog2001Parser.T__119);
                            this.state = 2699;
                            this.expression();
                        }
                        break;
                    case Verilog2001Parser.T__120:
                        {
                            this.state = 2700;
                            this.match(Verilog2001Parser.T__120);
                            this.state = 2701;
                            this.expression();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.procedural_timing_control_statement = function () {
        var _localctx = new Procedural_timing_control_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, Verilog2001Parser.RULE_procedural_timing_control_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2704;
                this.delay_or_event_control();
                this.state = 2705;
                this.statement_or_null();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.wait_statement = function () {
        var _localctx = new Wait_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, Verilog2001Parser.RULE_wait_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2707;
                this.match(Verilog2001Parser.T__121);
                this.state = 2708;
                this.match(Verilog2001Parser.T__15);
                this.state = 2709;
                this.expression();
                this.state = 2710;
                this.match(Verilog2001Parser.T__17);
                this.state = 2711;
                this.statement_or_null();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.conditional_statement = function () {
        var _localctx = new Conditional_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, Verilog2001Parser.RULE_conditional_statement);
        try {
            this.state = 2723;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 300, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2713;
                        this.match(Verilog2001Parser.T__98);
                        this.state = 2714;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2715;
                        this.expression();
                        this.state = 2716;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2717;
                        this.statement_or_null();
                        this.state = 2720;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 299, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2718;
                                    this.match(Verilog2001Parser.T__99);
                                    this.state = 2719;
                                    this.statement_or_null();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2722;
                        this.if_else_if_statement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.if_else_if_statement = function () {
        var _localctx = new If_else_if_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, Verilog2001Parser.RULE_if_else_if_statement);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2725;
                this.match(Verilog2001Parser.T__98);
                this.state = 2726;
                this.match(Verilog2001Parser.T__15);
                this.state = 2727;
                this.expression();
                this.state = 2728;
                this.match(Verilog2001Parser.T__17);
                this.state = 2729;
                this.statement_or_null();
                this.state = 2739;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2730;
                                this.match(Verilog2001Parser.T__99);
                                this.state = 2731;
                                this.match(Verilog2001Parser.T__98);
                                this.state = 2732;
                                this.match(Verilog2001Parser.T__15);
                                this.state = 2733;
                                this.expression();
                                this.state = 2734;
                                this.match(Verilog2001Parser.T__17);
                                this.state = 2735;
                                this.statement_or_null();
                            }
                        }
                    }
                    this.state = 2741;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 301, this._ctx);
                }
                this.state = 2744;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 302, this._ctx)) {
                    case 1:
                        {
                            this.state = 2742;
                            this.match(Verilog2001Parser.T__99);
                            this.state = 2743;
                            this.statement_or_null();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_conditional_statement = function () {
        var _localctx = new Function_conditional_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, Verilog2001Parser.RULE_function_conditional_statement);
        try {
            this.state = 2756;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 304, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2746;
                        this.match(Verilog2001Parser.T__98);
                        this.state = 2747;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2748;
                        this.expression();
                        this.state = 2749;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2750;
                        this.function_statement_or_null();
                        this.state = 2753;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 303, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2751;
                                    this.match(Verilog2001Parser.T__99);
                                    this.state = 2752;
                                    this.function_statement_or_null();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2755;
                        this.function_if_else_if_statement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_if_else_if_statement = function () {
        var _localctx = new Function_if_else_if_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, Verilog2001Parser.RULE_function_if_else_if_statement);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2758;
                this.match(Verilog2001Parser.T__98);
                this.state = 2759;
                this.match(Verilog2001Parser.T__15);
                this.state = 2760;
                this.expression();
                this.state = 2761;
                this.match(Verilog2001Parser.T__17);
                this.state = 2762;
                this.function_statement_or_null();
                this.state = 2772;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2763;
                                this.match(Verilog2001Parser.T__99);
                                this.state = 2764;
                                this.match(Verilog2001Parser.T__98);
                                this.state = 2765;
                                this.match(Verilog2001Parser.T__15);
                                this.state = 2766;
                                this.expression();
                                this.state = 2767;
                                this.match(Verilog2001Parser.T__17);
                                this.state = 2768;
                                this.function_statement_or_null();
                            }
                        }
                    }
                    this.state = 2774;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
                }
                this.state = 2777;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 306, this._ctx)) {
                    case 1:
                        {
                            this.state = 2775;
                            this.match(Verilog2001Parser.T__99);
                            this.state = 2776;
                            this.function_statement_or_null();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.case_statement = function () {
        var _localctx = new Case_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, Verilog2001Parser.RULE_case_statement);
        var _la;
        try {
            this.state = 2818;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__100:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2779;
                        this.match(Verilog2001Parser.T__100);
                        this.state = 2780;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2781;
                        this.expression();
                        this.state = 2782;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2783;
                        this.case_item();
                        this.state = 2787;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                {
                                    this.state = 2784;
                                    this.case_item();
                                }
                            }
                            this.state = 2789;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2790;
                        this.match(Verilog2001Parser.T__101);
                    }
                    break;
                case Verilog2001Parser.T__122:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2792;
                        this.match(Verilog2001Parser.T__122);
                        this.state = 2793;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2794;
                        this.expression();
                        this.state = 2795;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2796;
                        this.case_item();
                        this.state = 2800;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                {
                                    this.state = 2797;
                                    this.case_item();
                                }
                            }
                            this.state = 2802;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2803;
                        this.match(Verilog2001Parser.T__101);
                    }
                    break;
                case Verilog2001Parser.T__123:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2805;
                        this.match(Verilog2001Parser.T__123);
                        this.state = 2806;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2807;
                        this.expression();
                        this.state = 2808;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2809;
                        this.case_item();
                        this.state = 2813;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                {
                                    this.state = 2810;
                                    this.case_item();
                                }
                            }
                            this.state = 2815;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2816;
                        this.match(Verilog2001Parser.T__101);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.case_item = function () {
        var _localctx = new Case_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, Verilog2001Parser.RULE_case_item);
        var _la;
        try {
            this.state = 2836;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__18:
                case Verilog2001Parser.T__135:
                case Verilog2001Parser.T__136:
                case Verilog2001Parser.T__140:
                case Verilog2001Parser.T__141:
                case Verilog2001Parser.T__142:
                case Verilog2001Parser.T__143:
                case Verilog2001Parser.T__144:
                case Verilog2001Parser.T__145:
                case Verilog2001Parser.T__146:
                case Verilog2001Parser.T__147:
                case Verilog2001Parser.T__148:
                case Verilog2001Parser.Real_number:
                case Verilog2001Parser.Decimal_number:
                case Verilog2001Parser.Binary_number:
                case Verilog2001Parser.Octal_number:
                case Verilog2001Parser.Hex_number:
                case Verilog2001Parser.String:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                case Verilog2001Parser.Dollar_Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2820;
                        this.expression();
                        this.state = 2825;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 2821;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2822;
                                    this.expression();
                                }
                            }
                            this.state = 2827;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2828;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 2829;
                        this.statement_or_null();
                    }
                    break;
                case Verilog2001Parser.T__5:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2831;
                        this.match(Verilog2001Parser.T__5);
                        this.state = 2833;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__64) {
                            {
                                this.state = 2832;
                                this.match(Verilog2001Parser.T__64);
                            }
                        }
                        this.state = 2835;
                        this.statement_or_null();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_case_statement = function () {
        var _localctx = new Function_case_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, Verilog2001Parser.RULE_function_case_statement);
        var _la;
        try {
            this.state = 2877;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__100:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2838;
                        this.match(Verilog2001Parser.T__100);
                        this.state = 2839;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2840;
                        this.expression();
                        this.state = 2841;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2842;
                        this.function_case_item();
                        this.state = 2846;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                {
                                    this.state = 2843;
                                    this.function_case_item();
                                }
                            }
                            this.state = 2848;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2849;
                        this.match(Verilog2001Parser.T__101);
                    }
                    break;
                case Verilog2001Parser.T__122:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2851;
                        this.match(Verilog2001Parser.T__122);
                        this.state = 2852;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2853;
                        this.expression();
                        this.state = 2854;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2855;
                        this.function_case_item();
                        this.state = 2859;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                {
                                    this.state = 2856;
                                    this.function_case_item();
                                }
                            }
                            this.state = 2861;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2862;
                        this.match(Verilog2001Parser.T__101);
                    }
                    break;
                case Verilog2001Parser.T__123:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2864;
                        this.match(Verilog2001Parser.T__123);
                        this.state = 2865;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2866;
                        this.expression();
                        this.state = 2867;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2868;
                        this.function_case_item();
                        this.state = 2872;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Verilog2001Parser.T__5) | (1 << Verilog2001Parser.T__15) | (1 << Verilog2001Parser.T__18))) !== 0) || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                {
                                    this.state = 2869;
                                    this.function_case_item();
                                }
                            }
                            this.state = 2874;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2875;
                        this.match(Verilog2001Parser.T__101);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_case_item = function () {
        var _localctx = new Function_case_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, Verilog2001Parser.RULE_function_case_item);
        var _la;
        try {
            this.state = 2895;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__18:
                case Verilog2001Parser.T__135:
                case Verilog2001Parser.T__136:
                case Verilog2001Parser.T__140:
                case Verilog2001Parser.T__141:
                case Verilog2001Parser.T__142:
                case Verilog2001Parser.T__143:
                case Verilog2001Parser.T__144:
                case Verilog2001Parser.T__145:
                case Verilog2001Parser.T__146:
                case Verilog2001Parser.T__147:
                case Verilog2001Parser.T__148:
                case Verilog2001Parser.Real_number:
                case Verilog2001Parser.Decimal_number:
                case Verilog2001Parser.Binary_number:
                case Verilog2001Parser.Octal_number:
                case Verilog2001Parser.Hex_number:
                case Verilog2001Parser.String:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                case Verilog2001Parser.Dollar_Identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2879;
                        this.expression();
                        this.state = 2884;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 2880;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 2881;
                                    this.expression();
                                }
                            }
                            this.state = 2886;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2887;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 2888;
                        this.function_statement_or_null();
                    }
                    break;
                case Verilog2001Parser.T__5:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2890;
                        this.match(Verilog2001Parser.T__5);
                        this.state = 2892;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__64) {
                            {
                                this.state = 2891;
                                this.match(Verilog2001Parser.T__64);
                            }
                        }
                        this.state = 2894;
                        this.function_statement_or_null();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_loop_statement = function () {
        var _localctx = new Function_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, Verilog2001Parser.RULE_function_loop_statement);
        try {
            this.state = 2921;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__124:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2897;
                        this.match(Verilog2001Parser.T__124);
                        this.state = 2898;
                        this.function_statement();
                    }
                    break;
                case Verilog2001Parser.T__114:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2899;
                        this.match(Verilog2001Parser.T__114);
                        this.state = 2900;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2901;
                        this.expression();
                        this.state = 2902;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2903;
                        this.function_statement();
                    }
                    break;
                case Verilog2001Parser.T__125:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2905;
                        this.match(Verilog2001Parser.T__125);
                        this.state = 2906;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2907;
                        this.expression();
                        this.state = 2908;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2909;
                        this.function_statement();
                    }
                    break;
                case Verilog2001Parser.T__102:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2911;
                        this.match(Verilog2001Parser.T__102);
                        this.state = 2912;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2913;
                        this.variable_assignment();
                        this.state = 2914;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 2915;
                        this.expression();
                        this.state = 2916;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 2917;
                        this.variable_assignment();
                        this.state = 2918;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2919;
                        this.function_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.loop_statement = function () {
        var _localctx = new Loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, Verilog2001Parser.RULE_loop_statement);
        try {
            this.state = 2947;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__124:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2923;
                        this.match(Verilog2001Parser.T__124);
                        this.state = 2924;
                        this.statement();
                    }
                    break;
                case Verilog2001Parser.T__114:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2925;
                        this.match(Verilog2001Parser.T__114);
                        this.state = 2926;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2927;
                        this.expression();
                        this.state = 2928;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2929;
                        this.statement();
                    }
                    break;
                case Verilog2001Parser.T__125:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2931;
                        this.match(Verilog2001Parser.T__125);
                        this.state = 2932;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2933;
                        this.expression();
                        this.state = 2934;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2935;
                        this.statement();
                    }
                    break;
                case Verilog2001Parser.T__102:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2937;
                        this.match(Verilog2001Parser.T__102);
                        this.state = 2938;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2939;
                        this.variable_assignment();
                        this.state = 2940;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 2941;
                        this.expression();
                        this.state = 2942;
                        this.match(Verilog2001Parser.T__1);
                        this.state = 2943;
                        this.variable_assignment();
                        this.state = 2944;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 2945;
                        this.statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.system_task_enable = function () {
        var _localctx = new System_task_enableContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, Verilog2001Parser.RULE_system_task_enable);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2949;
                this.system_task_identifier();
                this.state = 2962;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15) {
                    {
                        this.state = 2950;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2959;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                this.state = 2951;
                                this.expression();
                                this.state = 2956;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === Verilog2001Parser.T__16) {
                                    {
                                        {
                                            this.state = 2952;
                                            this.match(Verilog2001Parser.T__16);
                                            this.state = 2953;
                                            this.expression();
                                        }
                                    }
                                    this.state = 2958;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 2961;
                        this.match(Verilog2001Parser.T__17);
                    }
                }
                this.state = 2964;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.task_enable = function () {
        var _localctx = new Task_enableContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, Verilog2001Parser.RULE_task_enable);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2966;
                this.hierarchical_task_identifier();
                this.state = 2979;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15) {
                    {
                        this.state = 2967;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 2976;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                            {
                                this.state = 2968;
                                this.expression();
                                this.state = 2973;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === Verilog2001Parser.T__16) {
                                    {
                                        {
                                            this.state = 2969;
                                            this.match(Verilog2001Parser.T__16);
                                            this.state = 2970;
                                            this.expression();
                                        }
                                    }
                                    this.state = 2975;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                        }
                        this.state = 2978;
                        this.match(Verilog2001Parser.T__17);
                    }
                }
                this.state = 2981;
                this.match(Verilog2001Parser.T__1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.specify_block = function () {
        var _localctx = new Specify_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, Verilog2001Parser.RULE_specify_block);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2983;
                this.match(Verilog2001Parser.T__126);
                this.state = 2987;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__30 || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & ((1 << (Verilog2001Parser.T__98 - 99)) | (1 << (Verilog2001Parser.T__128 - 99)) | (1 << (Verilog2001Parser.T__129 - 99)))) !== 0) || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Verilog2001Parser.T__130 - 131)) | (1 << (Verilog2001Parser.T__131 - 131)) | (1 << (Verilog2001Parser.T__134 - 131)))) !== 0) || _la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier) {
                    {
                        {
                            this.state = 2984;
                            this.specify_item();
                        }
                    }
                    this.state = 2989;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2990;
                this.match(Verilog2001Parser.T__127);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.specify_item = function () {
        var _localctx = new Specify_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, Verilog2001Parser.RULE_specify_item);
        try {
            this.state = 2996;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__30:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2992;
                        this.specparam_declaration();
                    }
                    break;
                case Verilog2001Parser.T__128:
                case Verilog2001Parser.T__129:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2993;
                        this.pulsestyle_declaration();
                    }
                    break;
                case Verilog2001Parser.T__130:
                case Verilog2001Parser.T__131:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2994;
                        this.showcancelled_declaration();
                    }
                    break;
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__98:
                case Verilog2001Parser.T__134:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2995;
                        this.path_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.pulsestyle_declaration = function () {
        var _localctx = new Pulsestyle_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 340, Verilog2001Parser.RULE_pulsestyle_declaration);
        try {
            this.state = 3006;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__128:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2998;
                        this.match(Verilog2001Parser.T__128);
                        this.state = 2999;
                        this.list_of_path_outputs();
                        this.state = 3000;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__129:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3002;
                        this.match(Verilog2001Parser.T__129);
                        this.state = 3003;
                        this.list_of_path_outputs();
                        this.state = 3004;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.showcancelled_declaration = function () {
        var _localctx = new Showcancelled_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, Verilog2001Parser.RULE_showcancelled_declaration);
        try {
            this.state = 3016;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__130:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3008;
                        this.match(Verilog2001Parser.T__130);
                        this.state = 3009;
                        this.list_of_path_outputs();
                        this.state = 3010;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case Verilog2001Parser.T__131:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3012;
                        this.match(Verilog2001Parser.T__131);
                        this.state = 3013;
                        this.list_of_path_outputs();
                        this.state = 3014;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.path_declaration = function () {
        var _localctx = new Path_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, Verilog2001Parser.RULE_path_declaration);
        try {
            this.state = 3027;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 333, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3018;
                        this.simple_path_declaration();
                        this.state = 3019;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3021;
                        this.edge_sensitive_path_declaration();
                        this.state = 3022;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3024;
                        this.state_dependent_path_declaration();
                        this.state = 3025;
                        this.match(Verilog2001Parser.T__1);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.simple_path_declaration = function () {
        var _localctx = new Simple_path_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, Verilog2001Parser.RULE_simple_path_declaration);
        try {
            this.state = 3037;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3029;
                        this.parallel_path_description();
                        this.state = 3030;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 3031;
                        this.path_delay_value();
                    }
                    break;
                case Verilog2001Parser.T__15:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3033;
                        this.full_path_description();
                        this.state = 3034;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 3035;
                        this.path_delay_value();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.parallel_path_description = function () {
        var _localctx = new Parallel_path_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, Verilog2001Parser.RULE_parallel_path_description);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                {
                    this.state = 3039;
                    this.specify_input_terminal_descriptor();
                    this.state = 3041;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Verilog2001Parser.T__135 || _la === Verilog2001Parser.T__136) {
                        {
                            this.state = 3040;
                            this.polarity_operator();
                        }
                    }
                    this.state = 3043;
                    this.match(Verilog2001Parser.T__132);
                    this.state = 3044;
                    this.specify_output_terminal_descriptor();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.full_path_description = function () {
        var _localctx = new Full_path_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, Verilog2001Parser.RULE_full_path_description);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3046;
                this.match(Verilog2001Parser.T__15);
                this.state = 3047;
                this.list_of_path_inputs();
                this.state = 3049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__135 || _la === Verilog2001Parser.T__136) {
                    {
                        this.state = 3048;
                        this.polarity_operator();
                    }
                }
                this.state = 3051;
                this.match(Verilog2001Parser.T__133);
                this.state = 3052;
                this.list_of_path_outputs();
                this.state = 3053;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_path_inputs = function () {
        var _localctx = new List_of_path_inputsContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, Verilog2001Parser.RULE_list_of_path_inputs);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3055;
                this.specify_input_terminal_descriptor();
                this.state = 3060;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3056;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3057;
                            this.specify_input_terminal_descriptor();
                        }
                    }
                    this.state = 3062;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_path_outputs = function () {
        var _localctx = new List_of_path_outputsContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, Verilog2001Parser.RULE_list_of_path_outputs);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3063;
                this.specify_output_terminal_descriptor();
                this.state = 3068;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3064;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3065;
                            this.specify_output_terminal_descriptor();
                        }
                    }
                    this.state = 3070;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.specify_input_terminal_descriptor = function () {
        var _localctx = new Specify_input_terminal_descriptorContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, Verilog2001Parser.RULE_specify_input_terminal_descriptor);
        try {
            this.state = 3082;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 339, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3071;
                        this.input_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3072;
                        this.input_identifier();
                        this.state = 3073;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3074;
                        this.constant_expression();
                        this.state = 3075;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3077;
                        this.input_identifier();
                        this.state = 3078;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3079;
                        this.range_expression();
                        this.state = 3080;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.specify_output_terminal_descriptor = function () {
        var _localctx = new Specify_output_terminal_descriptorContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, Verilog2001Parser.RULE_specify_output_terminal_descriptor);
        try {
            this.state = 3095;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 340, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3084;
                        this.output_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3085;
                        this.output_identifier();
                        this.state = 3086;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3087;
                        this.constant_expression();
                        this.state = 3088;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3090;
                        this.output_identifier();
                        this.state = 3091;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3092;
                        this.range_expression();
                        this.state = 3093;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.input_identifier = function () {
        var _localctx = new Input_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, Verilog2001Parser.RULE_input_identifier);
        try {
            this.state = 3099;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 341, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3097;
                        this.input_port_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3098;
                        this.inout_port_identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.output_identifier = function () {
        var _localctx = new Output_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, Verilog2001Parser.RULE_output_identifier);
        try {
            this.state = 3103;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 342, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3101;
                        this.output_port_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3102;
                        this.inout_port_identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.path_delay_value = function () {
        var _localctx = new Path_delay_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, Verilog2001Parser.RULE_path_delay_value);
        try {
            this.state = 3110;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 343, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3105;
                        this.list_of_path_delay_expressions();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3106;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 3107;
                        this.list_of_path_delay_expressions();
                        this.state = 3108;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.list_of_path_delay_expressions = function () {
        var _localctx = new List_of_path_delay_expressionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, Verilog2001Parser.RULE_list_of_path_delay_expressions);
        try {
            this.state = 3159;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 344, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3112;
                        this.t_path_delay_expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3113;
                        this.trise_path_delay_expression();
                        this.state = 3114;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3115;
                        this.tfall_path_delay_expression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3117;
                        this.trise_path_delay_expression();
                        this.state = 3118;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3119;
                        this.tfall_path_delay_expression();
                        this.state = 3120;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3121;
                        this.tz_path_delay_expression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3123;
                        this.t01_path_delay_expression();
                        this.state = 3124;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3125;
                        this.t10_path_delay_expression();
                        this.state = 3126;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3127;
                        this.t0z_path_delay_expression();
                        this.state = 3128;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3129;
                        this.tz1_path_delay_expression();
                        this.state = 3130;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3131;
                        this.t1z_path_delay_expression();
                        this.state = 3132;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3133;
                        this.tz0_path_delay_expression();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3135;
                        this.t01_path_delay_expression();
                        this.state = 3136;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3137;
                        this.t10_path_delay_expression();
                        this.state = 3138;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3139;
                        this.t0z_path_delay_expression();
                        this.state = 3140;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3141;
                        this.tz1_path_delay_expression();
                        this.state = 3142;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3143;
                        this.t1z_path_delay_expression();
                        this.state = 3144;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3145;
                        this.tz0_path_delay_expression();
                        this.state = 3146;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3147;
                        this.t0x_path_delay_expression();
                        this.state = 3148;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3149;
                        this.tx1_path_delay_expression();
                        this.state = 3150;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3151;
                        this.t1x_path_delay_expression();
                        this.state = 3152;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3153;
                        this.tx0_path_delay_expression();
                        this.state = 3154;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3155;
                        this.txz_path_delay_expression();
                        this.state = 3156;
                        this.match(Verilog2001Parser.T__16);
                        this.state = 3157;
                        this.tzx_path_delay_expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.t_path_delay_expression = function () {
        var _localctx = new T_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, Verilog2001Parser.RULE_t_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3161;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.trise_path_delay_expression = function () {
        var _localctx = new Trise_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, Verilog2001Parser.RULE_trise_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3163;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tfall_path_delay_expression = function () {
        var _localctx = new Tfall_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, Verilog2001Parser.RULE_tfall_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3165;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tz_path_delay_expression = function () {
        var _localctx = new Tz_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, Verilog2001Parser.RULE_tz_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3167;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.t01_path_delay_expression = function () {
        var _localctx = new T01_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, Verilog2001Parser.RULE_t01_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3169;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.t10_path_delay_expression = function () {
        var _localctx = new T10_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, Verilog2001Parser.RULE_t10_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3171;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.t0z_path_delay_expression = function () {
        var _localctx = new T0z_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, Verilog2001Parser.RULE_t0z_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3173;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tz1_path_delay_expression = function () {
        var _localctx = new Tz1_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, Verilog2001Parser.RULE_tz1_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3175;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.t1z_path_delay_expression = function () {
        var _localctx = new T1z_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, Verilog2001Parser.RULE_t1z_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3177;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tz0_path_delay_expression = function () {
        var _localctx = new Tz0_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, Verilog2001Parser.RULE_tz0_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3179;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.t0x_path_delay_expression = function () {
        var _localctx = new T0x_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, Verilog2001Parser.RULE_t0x_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3181;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tx1_path_delay_expression = function () {
        var _localctx = new Tx1_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, Verilog2001Parser.RULE_tx1_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3183;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.t1x_path_delay_expression = function () {
        var _localctx = new T1x_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, Verilog2001Parser.RULE_t1x_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3185;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tx0_path_delay_expression = function () {
        var _localctx = new Tx0_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, Verilog2001Parser.RULE_tx0_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3187;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.txz_path_delay_expression = function () {
        var _localctx = new Txz_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, Verilog2001Parser.RULE_txz_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3189;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.tzx_path_delay_expression = function () {
        var _localctx = new Tzx_path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, Verilog2001Parser.RULE_tzx_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3191;
                this.path_delay_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.path_delay_expression = function () {
        var _localctx = new Path_delay_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 400, Verilog2001Parser.RULE_path_delay_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3193;
                this.constant_mintypmax_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.edge_sensitive_path_declaration = function () {
        var _localctx = new Edge_sensitive_path_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 402, Verilog2001Parser.RULE_edge_sensitive_path_declaration);
        try {
            this.state = 3203;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 345, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3195;
                        this.parallel_edge_sensitive_path_description();
                        this.state = 3196;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 3197;
                        this.path_delay_value();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3199;
                        this.full_edge_sensitive_path_description();
                        this.state = 3200;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 3201;
                        this.path_delay_value();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.parallel_edge_sensitive_path_description = function () {
        var _localctx = new Parallel_edge_sensitive_path_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 404, Verilog2001Parser.RULE_parallel_edge_sensitive_path_description);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3205;
                this.match(Verilog2001Parser.T__15);
                this.state = 3207;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__119 || _la === Verilog2001Parser.T__120) {
                    {
                        this.state = 3206;
                        this.edge_identifier();
                    }
                }
                this.state = 3209;
                this.specify_input_terminal_descriptor();
                this.state = 3210;
                this.match(Verilog2001Parser.T__132);
                this.state = 3211;
                this.specify_output_terminal_descriptor();
                this.state = 3213;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__135 || _la === Verilog2001Parser.T__136) {
                    {
                        this.state = 3212;
                        this.polarity_operator();
                    }
                }
                this.state = 3215;
                this.match(Verilog2001Parser.T__64);
                this.state = 3216;
                this.data_source_expression();
                this.state = 3217;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.full_edge_sensitive_path_description = function () {
        var _localctx = new Full_edge_sensitive_path_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 406, Verilog2001Parser.RULE_full_edge_sensitive_path_description);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3219;
                this.match(Verilog2001Parser.T__15);
                this.state = 3221;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__119 || _la === Verilog2001Parser.T__120) {
                    {
                        this.state = 3220;
                        this.edge_identifier();
                    }
                }
                this.state = 3223;
                this.list_of_path_inputs();
                this.state = 3224;
                this.match(Verilog2001Parser.T__133);
                this.state = 3225;
                this.list_of_path_outputs();
                this.state = 3227;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__135 || _la === Verilog2001Parser.T__136) {
                    {
                        this.state = 3226;
                        this.polarity_operator();
                    }
                }
                this.state = 3229;
                this.match(Verilog2001Parser.T__64);
                this.state = 3230;
                this.data_source_expression();
                this.state = 3231;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.data_source_expression = function () {
        var _localctx = new Data_source_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, Verilog2001Parser.RULE_data_source_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3233;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.edge_identifier = function () {
        var _localctx = new Edge_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, Verilog2001Parser.RULE_edge_identifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3235;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.T__119 || _la === Verilog2001Parser.T__120)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.state_dependent_path_declaration = function () {
        var _localctx = new State_dependent_path_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, Verilog2001Parser.RULE_state_dependent_path_declaration);
        try {
            this.state = 3251;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 350, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3237;
                        this.match(Verilog2001Parser.T__98);
                        this.state = 3238;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 3239;
                        this.module_path_expression();
                        this.state = 3240;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 3241;
                        this.simple_path_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3243;
                        this.match(Verilog2001Parser.T__98);
                        this.state = 3244;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 3245;
                        this.module_path_expression();
                        this.state = 3246;
                        this.match(Verilog2001Parser.T__17);
                        this.state = 3247;
                        this.edge_sensitive_path_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3249;
                        this.match(Verilog2001Parser.T__134);
                        this.state = 3250;
                        this.simple_path_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.polarity_operator = function () {
        var _localctx = new Polarity_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 414, Verilog2001Parser.RULE_polarity_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3253;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.T__135 || _la === Verilog2001Parser.T__136)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.checktime_condition = function () {
        var _localctx = new Checktime_conditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 416, Verilog2001Parser.RULE_checktime_condition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3255;
                this.mintypmax_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.delayed_data = function () {
        var _localctx = new Delayed_dataContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, Verilog2001Parser.RULE_delayed_data);
        try {
            this.state = 3263;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 351, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3257;
                        this.terminal_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3258;
                        this.terminal_identifier();
                        this.state = 3259;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3260;
                        this.constant_mintypmax_expression();
                        this.state = 3261;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.delayed_reference = function () {
        var _localctx = new Delayed_referenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, Verilog2001Parser.RULE_delayed_reference);
        try {
            this.state = 3271;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 352, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3265;
                        this.terminal_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3266;
                        this.terminal_identifier();
                        this.state = 3267;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3268;
                        this.constant_mintypmax_expression();
                        this.state = 3269;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.end_edge_offset = function () {
        var _localctx = new End_edge_offsetContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, Verilog2001Parser.RULE_end_edge_offset);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3273;
                this.mintypmax_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.event_based_flag = function () {
        var _localctx = new Event_based_flagContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, Verilog2001Parser.RULE_event_based_flag);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3275;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.notify_reg = function () {
        var _localctx = new Notify_regContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, Verilog2001Parser.RULE_notify_reg);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3277;
                this.variable_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.remain_active_flag = function () {
        var _localctx = new Remain_active_flagContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, Verilog2001Parser.RULE_remain_active_flag);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3279;
                this.constant_mintypmax_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.stamptime_condition = function () {
        var _localctx = new Stamptime_conditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 430, Verilog2001Parser.RULE_stamptime_condition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3281;
                this.mintypmax_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.start_edge_offset = function () {
        var _localctx = new Start_edge_offsetContext(this._ctx, this.state);
        this.enterRule(_localctx, 432, Verilog2001Parser.RULE_start_edge_offset);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3283;
                this.mintypmax_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.threshold = function () {
        var _localctx = new ThresholdContext(this._ctx, this.state);
        this.enterRule(_localctx, 434, Verilog2001Parser.RULE_threshold);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3285;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.timing_check_limit = function () {
        var _localctx = new Timing_check_limitContext(this._ctx, this.state);
        this.enterRule(_localctx, 436, Verilog2001Parser.RULE_timing_check_limit);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3287;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.concatenation = function () {
        var _localctx = new ConcatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 438, Verilog2001Parser.RULE_concatenation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3289;
                this.match(Verilog2001Parser.T__18);
                this.state = 3290;
                this.expression();
                this.state = 3295;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3291;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3292;
                            this.expression();
                        }
                    }
                    this.state = 3297;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3298;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_concatenation = function () {
        var _localctx = new Constant_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 440, Verilog2001Parser.RULE_constant_concatenation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3300;
                this.match(Verilog2001Parser.T__18);
                this.state = 3301;
                this.constant_expression();
                this.state = 3306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3302;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3303;
                            this.constant_expression();
                        }
                    }
                    this.state = 3308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3309;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_multiple_concatenation = function () {
        var _localctx = new Constant_multiple_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 442, Verilog2001Parser.RULE_constant_multiple_concatenation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3311;
                this.match(Verilog2001Parser.T__18);
                this.state = 3312;
                this.constant_expression();
                this.state = 3313;
                this.constant_concatenation();
                this.state = 3314;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_path_concatenation = function () {
        var _localctx = new Module_path_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 444, Verilog2001Parser.RULE_module_path_concatenation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3316;
                this.match(Verilog2001Parser.T__18);
                this.state = 3317;
                this.module_path_expression();
                this.state = 3322;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3318;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3319;
                            this.module_path_expression();
                        }
                    }
                    this.state = 3324;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3325;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_path_multiple_concatenation = function () {
        var _localctx = new Module_path_multiple_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 446, Verilog2001Parser.RULE_module_path_multiple_concatenation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3327;
                this.match(Verilog2001Parser.T__18);
                this.state = 3328;
                this.constant_expression();
                this.state = 3329;
                this.module_path_concatenation();
                this.state = 3330;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.multiple_concatenation = function () {
        var _localctx = new Multiple_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 448, Verilog2001Parser.RULE_multiple_concatenation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3332;
                this.match(Verilog2001Parser.T__18);
                this.state = 3333;
                this.constant_expression();
                this.state = 3334;
                this.concatenation();
                this.state = 3335;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_concatenation = function () {
        var _localctx = new Net_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 450, Verilog2001Parser.RULE_net_concatenation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3337;
                this.match(Verilog2001Parser.T__18);
                this.state = 3338;
                this.net_concatenation_value();
                this.state = 3343;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3339;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3340;
                            this.net_concatenation_value();
                        }
                    }
                    this.state = 3345;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3346;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_concatenation_value = function () {
        var _localctx = new Net_concatenation_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 452, Verilog2001Parser.RULE_net_concatenation_value);
        var _la;
        try {
            var _alt = void 0;
            this.state = 3385;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 359, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3348;
                        this.hierarchical_net_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3349;
                        this.hierarchical_net_identifier();
                        this.state = 3350;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3351;
                        this.expression();
                        this.state = 3352;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3359;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 3353;
                                    this.match(Verilog2001Parser.T__20);
                                    this.state = 3354;
                                    this.expression();
                                    this.state = 3355;
                                    this.match(Verilog2001Parser.T__21);
                                }
                            }
                            this.state = 3361;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3362;
                        this.hierarchical_net_identifier();
                        this.state = 3363;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3364;
                        this.expression();
                        this.state = 3365;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3372;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 3366;
                                        this.match(Verilog2001Parser.T__20);
                                        this.state = 3367;
                                        this.expression();
                                        this.state = 3368;
                                        this.match(Verilog2001Parser.T__21);
                                    }
                                }
                            }
                            this.state = 3374;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 358, this._ctx);
                        }
                        this.state = 3375;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3376;
                        this.range_expression();
                        this.state = 3377;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3379;
                        this.hierarchical_net_identifier();
                        this.state = 3380;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3381;
                        this.range_expression();
                        this.state = 3382;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3384;
                        this.net_concatenation();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.variable_concatenation = function () {
        var _localctx = new Variable_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 454, Verilog2001Parser.RULE_variable_concatenation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3387;
                this.match(Verilog2001Parser.T__18);
                this.state = 3388;
                this.variable_concatenation_value();
                this.state = 3393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3389;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3390;
                            this.variable_concatenation_value();
                        }
                    }
                    this.state = 3395;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3396;
                this.match(Verilog2001Parser.T__19);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.variable_concatenation_value = function () {
        var _localctx = new Variable_concatenation_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 456, Verilog2001Parser.RULE_variable_concatenation_value);
        var _la;
        try {
            var _alt = void 0;
            this.state = 3435;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 363, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3398;
                        this.hierarchical_variable_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3399;
                        this.hierarchical_variable_identifier();
                        this.state = 3400;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3401;
                        this.expression();
                        this.state = 3402;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3409;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 3403;
                                    this.match(Verilog2001Parser.T__20);
                                    this.state = 3404;
                                    this.expression();
                                    this.state = 3405;
                                    this.match(Verilog2001Parser.T__21);
                                }
                            }
                            this.state = 3411;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3412;
                        this.hierarchical_variable_identifier();
                        this.state = 3413;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3414;
                        this.expression();
                        this.state = 3415;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3422;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 3416;
                                        this.match(Verilog2001Parser.T__20);
                                        this.state = 3417;
                                        this.expression();
                                        this.state = 3418;
                                        this.match(Verilog2001Parser.T__21);
                                    }
                                }
                            }
                            this.state = 3424;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 362, this._ctx);
                        }
                        this.state = 3425;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3426;
                        this.range_expression();
                        this.state = 3427;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3429;
                        this.hierarchical_variable_identifier();
                        this.state = 3430;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3431;
                        this.range_expression();
                        this.state = 3432;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3434;
                        this.variable_concatenation();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_function_call = function () {
        var _localctx = new Constant_function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 458, Verilog2001Parser.RULE_constant_function_call);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3437;
                this.function_identifier();
                this.state = 3441;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3438;
                                this.attribute_instance();
                            }
                        }
                    }
                    this.state = 3443;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
                }
                this.state = 3444;
                this.match(Verilog2001Parser.T__15);
                this.state = 3453;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                    {
                        this.state = 3445;
                        this.constant_expression();
                        this.state = 3450;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 3446;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 3447;
                                    this.constant_expression();
                                }
                            }
                            this.state = 3452;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 3455;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_call = function () {
        var _localctx = new Function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 460, Verilog2001Parser.RULE_function_call);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3457;
                this.hierarchical_function_identifier();
                this.state = 3461;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3458;
                                this.attribute_instance();
                            }
                        }
                    }
                    this.state = 3463;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 367, this._ctx);
                }
                this.state = 3464;
                this.match(Verilog2001Parser.T__15);
                this.state = 3473;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                    {
                        this.state = 3465;
                        this.expression();
                        this.state = 3470;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 3466;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 3467;
                                    this.expression();
                                }
                            }
                            this.state = 3472;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 3475;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.system_function_call = function () {
        var _localctx = new System_function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 462, Verilog2001Parser.RULE_system_function_call);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3477;
                this.system_function_identifier();
                this.state = 3486;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 371, this._ctx)) {
                    case 1:
                        {
                            this.state = 3478;
                            this.expression();
                            this.state = 3483;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3479;
                                            this.match(Verilog2001Parser.T__16);
                                            this.state = 3480;
                                            this.expression();
                                        }
                                    }
                                }
                                this.state = 3485;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.genvar_function_call = function () {
        var _localctx = new Genvar_function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 464, Verilog2001Parser.RULE_genvar_function_call);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3488;
                this.genvar_function_identifier();
                this.state = 3492;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3489;
                                this.attribute_instance();
                            }
                        }
                    }
                    this.state = 3494;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 372, this._ctx);
                }
                this.state = 3495;
                this.match(Verilog2001Parser.T__15);
                this.state = 3504;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__15 || _la === Verilog2001Parser.T__18 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)) | (1 << (Verilog2001Parser.Real_number - 136)))) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & ((1 << (Verilog2001Parser.Decimal_number - 168)) | (1 << (Verilog2001Parser.Binary_number - 168)) | (1 << (Verilog2001Parser.Octal_number - 168)) | (1 << (Verilog2001Parser.Hex_number - 168)) | (1 << (Verilog2001Parser.String - 168)) | (1 << (Verilog2001Parser.Escaped_identifier - 168)) | (1 << (Verilog2001Parser.Simple_identifier - 168)) | (1 << (Verilog2001Parser.Dollar_Identifier - 168)))) !== 0)) {
                    {
                        this.state = 3496;
                        this.constant_expression();
                        this.state = 3501;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__16) {
                            {
                                {
                                    this.state = 3497;
                                    this.match(Verilog2001Parser.T__16);
                                    this.state = 3498;
                                    this.constant_expression();
                                }
                            }
                            this.state = 3503;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 3506;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.base_expression = function () {
        var _localctx = new Base_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 466, Verilog2001Parser.RULE_base_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3508;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_base_expression = function () {
        var _localctx = new Constant_base_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 468, Verilog2001Parser.RULE_constant_base_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3510;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_expression = function () {
        var _localctx = new Constant_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 470, Verilog2001Parser.RULE_constant_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3512;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_mintypmax_expression = function () {
        var _localctx = new Constant_mintypmax_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 472, Verilog2001Parser.RULE_constant_mintypmax_expression);
        try {
            this.state = 3521;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 375, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3514;
                        this.constant_expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3515;
                        this.constant_expression();
                        this.state = 3516;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3517;
                        this.constant_expression();
                        this.state = 3518;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3519;
                        this.constant_expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_range_expression = function () {
        var _localctx = new Constant_range_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 474, Verilog2001Parser.RULE_constant_range_expression);
        try {
            this.state = 3536;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 376, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3523;
                        this.constant_expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3524;
                        this.msb_constant_expression();
                        this.state = 3525;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3526;
                        this.lsb_constant_expression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3528;
                        this.constant_base_expression();
                        this.state = 3529;
                        this.match(Verilog2001Parser.T__137);
                        this.state = 3530;
                        this.width_constant_expression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3532;
                        this.constant_base_expression();
                        this.state = 3533;
                        this.match(Verilog2001Parser.T__138);
                        this.state = 3534;
                        this.width_constant_expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.dimension_constant_expression = function () {
        var _localctx = new Dimension_constant_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 476, Verilog2001Parser.RULE_dimension_constant_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3538;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.expression = function () {
        var _localctx = new ExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 478, Verilog2001Parser.RULE_expression);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3540;
                this.term();
                this.state = 3563;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 3561;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case Verilog2001Parser.T__108:
                                case Verilog2001Parser.T__117:
                                case Verilog2001Parser.T__135:
                                case Verilog2001Parser.T__136:
                                case Verilog2001Parser.T__142:
                                case Verilog2001Parser.T__144:
                                case Verilog2001Parser.T__146:
                                case Verilog2001Parser.T__147:
                                case Verilog2001Parser.T__148:
                                case Verilog2001Parser.T__149:
                                case Verilog2001Parser.T__150:
                                case Verilog2001Parser.T__151:
                                case Verilog2001Parser.T__152:
                                case Verilog2001Parser.T__153:
                                case Verilog2001Parser.T__154:
                                case Verilog2001Parser.T__155:
                                case Verilog2001Parser.T__156:
                                case Verilog2001Parser.T__157:
                                case Verilog2001Parser.T__158:
                                case Verilog2001Parser.T__159:
                                case Verilog2001Parser.T__160:
                                case Verilog2001Parser.T__161:
                                case Verilog2001Parser.T__162:
                                case Verilog2001Parser.T__163:
                                case Verilog2001Parser.T__164:
                                    {
                                        this.state = 3541;
                                        this.binary_operator();
                                        this.state = 3545;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3542;
                                                        this.attribute_instance();
                                                    }
                                                }
                                            }
                                            this.state = 3547;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
                                        }
                                        this.state = 3548;
                                        this.term();
                                    }
                                    break;
                                case Verilog2001Parser.T__139:
                                    {
                                        this.state = 3550;
                                        this.match(Verilog2001Parser.T__139);
                                        this.state = 3554;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3551;
                                                        this.attribute_instance();
                                                    }
                                                }
                                            }
                                            this.state = 3556;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 378, this._ctx);
                                        }
                                        this.state = 3557;
                                        this.expression();
                                        this.state = 3558;
                                        this.match(Verilog2001Parser.T__64);
                                        this.state = 3559;
                                        this.term();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 3565;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 380, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.term = function () {
        var _localctx = new TermContext(this._ctx, this.state);
        this.enterRule(_localctx, 480, Verilog2001Parser.RULE_term);
        try {
            var _alt = void 0;
            this.state = 3577;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.T__135:
                case Verilog2001Parser.T__136:
                case Verilog2001Parser.T__140:
                case Verilog2001Parser.T__141:
                case Verilog2001Parser.T__142:
                case Verilog2001Parser.T__143:
                case Verilog2001Parser.T__144:
                case Verilog2001Parser.T__145:
                case Verilog2001Parser.T__146:
                case Verilog2001Parser.T__147:
                case Verilog2001Parser.T__148:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3566;
                        this.unary_operator();
                        this.state = 3570;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 3567;
                                        this.attribute_instance();
                                    }
                                }
                            }
                            this.state = 3572;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
                        }
                        this.state = 3573;
                        this.primary();
                    }
                    break;
                case Verilog2001Parser.T__15:
                case Verilog2001Parser.T__18:
                case Verilog2001Parser.Real_number:
                case Verilog2001Parser.Decimal_number:
                case Verilog2001Parser.Binary_number:
                case Verilog2001Parser.Octal_number:
                case Verilog2001Parser.Hex_number:
                case Verilog2001Parser.Escaped_identifier:
                case Verilog2001Parser.Simple_identifier:
                case Verilog2001Parser.Dollar_Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3575;
                        this.primary();
                    }
                    break;
                case Verilog2001Parser.String:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3576;
                        this.match(Verilog2001Parser.String);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.lsb_constant_expression = function () {
        var _localctx = new Lsb_constant_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 482, Verilog2001Parser.RULE_lsb_constant_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3579;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.mintypmax_expression = function () {
        var _localctx = new Mintypmax_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 484, Verilog2001Parser.RULE_mintypmax_expression);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3581;
                this.expression();
                this.state = 3587;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__64) {
                    {
                        this.state = 3582;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3583;
                        this.expression();
                        this.state = 3584;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3585;
                        this.expression();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_path_conditional_expression = function () {
        var _localctx = new Module_path_conditional_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 486, Verilog2001Parser.RULE_module_path_conditional_expression);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3589;
                this.module_path_expression();
                this.state = 3590;
                this.match(Verilog2001Parser.T__139);
                this.state = 3594;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3591;
                                this.attribute_instance();
                            }
                        }
                    }
                    this.state = 3596;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 384, this._ctx);
                }
                this.state = 3597;
                this.module_path_expression();
                this.state = 3598;
                this.match(Verilog2001Parser.T__64);
                this.state = 3599;
                this.module_path_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_path_expression = function () {
        var _localctx = new Module_path_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 488, Verilog2001Parser.RULE_module_path_expression);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3611;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case Verilog2001Parser.T__15:
                    case Verilog2001Parser.T__18:
                    case Verilog2001Parser.Real_number:
                    case Verilog2001Parser.Decimal_number:
                    case Verilog2001Parser.Binary_number:
                    case Verilog2001Parser.Octal_number:
                    case Verilog2001Parser.Hex_number:
                    case Verilog2001Parser.Escaped_identifier:
                    case Verilog2001Parser.Simple_identifier:
                    case Verilog2001Parser.Dollar_Identifier:
                        {
                            this.state = 3601;
                            this.module_path_primary();
                        }
                        break;
                    case Verilog2001Parser.T__140:
                    case Verilog2001Parser.T__141:
                    case Verilog2001Parser.T__142:
                    case Verilog2001Parser.T__143:
                    case Verilog2001Parser.T__144:
                    case Verilog2001Parser.T__145:
                    case Verilog2001Parser.T__146:
                    case Verilog2001Parser.T__147:
                    case Verilog2001Parser.T__148:
                        {
                            this.state = 3602;
                            this.unary_module_path_operator();
                            this.state = 3606;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 3603;
                                            this.attribute_instance();
                                        }
                                    }
                                }
                                this.state = 3608;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
                            }
                            this.state = 3609;
                            this.module_path_primary();
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 3635;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            this.state = 3633;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case Verilog2001Parser.T__142:
                                case Verilog2001Parser.T__144:
                                case Verilog2001Parser.T__146:
                                case Verilog2001Parser.T__147:
                                case Verilog2001Parser.T__148:
                                case Verilog2001Parser.T__151:
                                case Verilog2001Parser.T__152:
                                case Verilog2001Parser.T__155:
                                case Verilog2001Parser.T__156:
                                    {
                                        this.state = 3613;
                                        this.binary_module_path_operator();
                                        this.state = 3617;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3614;
                                                        this.attribute_instance();
                                                    }
                                                }
                                            }
                                            this.state = 3619;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 387, this._ctx);
                                        }
                                        this.state = 3620;
                                        this.module_path_expression();
                                    }
                                    break;
                                case Verilog2001Parser.T__139:
                                    {
                                        this.state = 3622;
                                        this.match(Verilog2001Parser.T__139);
                                        this.state = 3626;
                                        this._errHandler.sync(this);
                                        _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                            if (_alt === 1) {
                                                {
                                                    {
                                                        this.state = 3623;
                                                        this.attribute_instance();
                                                    }
                                                }
                                            }
                                            this.state = 3628;
                                            this._errHandler.sync(this);
                                            _alt = this.interpreter.adaptivePredict(this._input, 388, this._ctx);
                                        }
                                        this.state = 3629;
                                        this.module_path_expression();
                                        this.state = 3630;
                                        this.match(Verilog2001Parser.T__64);
                                        this.state = 3631;
                                        this.module_path_expression();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                    }
                    this.state = 3637;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 390, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_path_mintypmax_expression = function () {
        var _localctx = new Module_path_mintypmax_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 490, Verilog2001Parser.RULE_module_path_mintypmax_expression);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3638;
                this.module_path_expression();
                this.state = 3644;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__64) {
                    {
                        this.state = 3639;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3640;
                        this.module_path_expression();
                        this.state = 3641;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3642;
                        this.module_path_expression();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.msb_constant_expression = function () {
        var _localctx = new Msb_constant_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 492, Verilog2001Parser.RULE_msb_constant_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3646;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.range_expression = function () {
        var _localctx = new Range_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 494, Verilog2001Parser.RULE_range_expression);
        try {
            this.state = 3661;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 392, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3648;
                        this.expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3649;
                        this.msb_constant_expression();
                        this.state = 3650;
                        this.match(Verilog2001Parser.T__64);
                        this.state = 3651;
                        this.lsb_constant_expression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3653;
                        this.base_expression();
                        this.state = 3654;
                        this.match(Verilog2001Parser.T__137);
                        this.state = 3655;
                        this.width_constant_expression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3657;
                        this.base_expression();
                        this.state = 3658;
                        this.match(Verilog2001Parser.T__138);
                        this.state = 3659;
                        this.width_constant_expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.width_constant_expression = function () {
        var _localctx = new Width_constant_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 496, Verilog2001Parser.RULE_width_constant_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3663;
                this.constant_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.constant_primary = function () {
        var _localctx = new Constant_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 498, Verilog2001Parser.RULE_constant_primary);
        try {
            this.state = 3676;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 393, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3665;
                        this.constant_concatenation();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3666;
                        this.constant_function_call();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3667;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 3668;
                        this.constant_mintypmax_expression();
                        this.state = 3669;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3671;
                        this.constant_multiple_concatenation();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3672;
                        this.genvar_identifier();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3673;
                        this.number();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3674;
                        this.parameter_identifier();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3675;
                        this.specparam_identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_path_primary = function () {
        var _localctx = new Module_path_primaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 500, Verilog2001Parser.RULE_module_path_primary);
        try {
            this.state = 3689;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 394, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3678;
                        this.number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3679;
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3680;
                        this.module_path_concatenation();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3681;
                        this.module_path_multiple_concatenation();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3682;
                        this.function_call();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3683;
                        this.system_function_call();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3684;
                        this.constant_function_call();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3685;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 3686;
                        this.module_path_mintypmax_expression();
                        this.state = 3687;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.primary = function () {
        var _localctx = new PrimaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 502, Verilog2001Parser.RULE_primary);
        var _la;
        try {
            var _alt = void 0;
            this.state = 3729;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 397, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3691;
                        this.number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3692;
                        this.hierarchical_identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3693;
                        this.hierarchical_identifier();
                        this.state = 3698;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 3694;
                                    this.match(Verilog2001Parser.T__20);
                                    this.state = 3695;
                                    this.expression();
                                    this.state = 3696;
                                    this.match(Verilog2001Parser.T__21);
                                }
                            }
                            this.state = 3700;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === Verilog2001Parser.T__20);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3702;
                        this.hierarchical_identifier();
                        this.state = 3707;
                        this._errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 3703;
                                            this.match(Verilog2001Parser.T__20);
                                            this.state = 3704;
                                            this.expression();
                                            this.state = 3705;
                                            this.match(Verilog2001Parser.T__21);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 3709;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
                        } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        this.state = 3711;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3712;
                        this.range_expression();
                        this.state = 3713;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3715;
                        this.hierarchical_identifier();
                        this.state = 3716;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3717;
                        this.range_expression();
                        this.state = 3718;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3720;
                        this.concatenation();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3721;
                        this.multiple_concatenation();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3722;
                        this.function_call();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 3723;
                        this.system_function_call();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 3724;
                        this.constant_function_call();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 3725;
                        this.match(Verilog2001Parser.T__15);
                        this.state = 3726;
                        this.mintypmax_expression();
                        this.state = 3727;
                        this.match(Verilog2001Parser.T__17);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_lvalue = function () {
        var _localctx = new Net_lvalueContext(this._ctx, this.state);
        this.enterRule(_localctx, 504, Verilog2001Parser.RULE_net_lvalue);
        var _la;
        try {
            var _alt = void 0;
            this.state = 3768;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 400, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3731;
                        this.hierarchical_net_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3732;
                        this.hierarchical_net_identifier();
                        this.state = 3733;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3734;
                        this.constant_expression();
                        this.state = 3735;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3742;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 3736;
                                    this.match(Verilog2001Parser.T__20);
                                    this.state = 3737;
                                    this.constant_expression();
                                    this.state = 3738;
                                    this.match(Verilog2001Parser.T__21);
                                }
                            }
                            this.state = 3744;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3745;
                        this.hierarchical_net_identifier();
                        this.state = 3746;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3747;
                        this.constant_expression();
                        this.state = 3748;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3755;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 3749;
                                        this.match(Verilog2001Parser.T__20);
                                        this.state = 3750;
                                        this.constant_expression();
                                        this.state = 3751;
                                        this.match(Verilog2001Parser.T__21);
                                    }
                                }
                            }
                            this.state = 3757;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 399, this._ctx);
                        }
                        this.state = 3758;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3759;
                        this.constant_range_expression();
                        this.state = 3760;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3762;
                        this.hierarchical_net_identifier();
                        this.state = 3763;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3764;
                        this.constant_range_expression();
                        this.state = 3765;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3767;
                        this.net_concatenation();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.variable_lvalue = function () {
        var _localctx = new Variable_lvalueContext(this._ctx, this.state);
        this.enterRule(_localctx, 506, Verilog2001Parser.RULE_variable_lvalue);
        var _la;
        try {
            var _alt = void 0;
            this.state = 3807;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 403, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3770;
                        this.hierarchical_variable_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3771;
                        this.hierarchical_variable_identifier();
                        this.state = 3772;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3773;
                        this.expression();
                        this.state = 3774;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3781;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === Verilog2001Parser.T__20) {
                            {
                                {
                                    this.state = 3775;
                                    this.match(Verilog2001Parser.T__20);
                                    this.state = 3776;
                                    this.expression();
                                    this.state = 3777;
                                    this.match(Verilog2001Parser.T__21);
                                }
                            }
                            this.state = 3783;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3784;
                        this.hierarchical_variable_identifier();
                        this.state = 3785;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3786;
                        this.expression();
                        this.state = 3787;
                        this.match(Verilog2001Parser.T__21);
                        this.state = 3794;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 3788;
                                        this.match(Verilog2001Parser.T__20);
                                        this.state = 3789;
                                        this.expression();
                                        this.state = 3790;
                                        this.match(Verilog2001Parser.T__21);
                                    }
                                }
                            }
                            this.state = 3796;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 402, this._ctx);
                        }
                        this.state = 3797;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3798;
                        this.range_expression();
                        this.state = 3799;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3801;
                        this.hierarchical_variable_identifier();
                        this.state = 3802;
                        this.match(Verilog2001Parser.T__20);
                        this.state = 3803;
                        this.range_expression();
                        this.state = 3804;
                        this.match(Verilog2001Parser.T__21);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3806;
                        this.variable_concatenation();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.unary_operator = function () {
        var _localctx = new Unary_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 508, Verilog2001Parser.RULE_unary_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3809;
                _la = this._input.LA(1);
                if (!(((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (Verilog2001Parser.T__135 - 136)) | (1 << (Verilog2001Parser.T__136 - 136)) | (1 << (Verilog2001Parser.T__140 - 136)) | (1 << (Verilog2001Parser.T__141 - 136)) | (1 << (Verilog2001Parser.T__142 - 136)) | (1 << (Verilog2001Parser.T__143 - 136)) | (1 << (Verilog2001Parser.T__144 - 136)) | (1 << (Verilog2001Parser.T__145 - 136)) | (1 << (Verilog2001Parser.T__146 - 136)) | (1 << (Verilog2001Parser.T__147 - 136)) | (1 << (Verilog2001Parser.T__148 - 136)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.binary_operator = function () {
        var _localctx = new Binary_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 510, Verilog2001Parser.RULE_binary_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3811;
                _la = this._input.LA(1);
                if (!(((((_la - 109)) & ~0x1F) === 0 && ((1 << (_la - 109)) & ((1 << (Verilog2001Parser.T__108 - 109)) | (1 << (Verilog2001Parser.T__117 - 109)) | (1 << (Verilog2001Parser.T__135 - 109)) | (1 << (Verilog2001Parser.T__136 - 109)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (Verilog2001Parser.T__142 - 143)) | (1 << (Verilog2001Parser.T__144 - 143)) | (1 << (Verilog2001Parser.T__146 - 143)) | (1 << (Verilog2001Parser.T__147 - 143)) | (1 << (Verilog2001Parser.T__148 - 143)) | (1 << (Verilog2001Parser.T__149 - 143)) | (1 << (Verilog2001Parser.T__150 - 143)) | (1 << (Verilog2001Parser.T__151 - 143)) | (1 << (Verilog2001Parser.T__152 - 143)) | (1 << (Verilog2001Parser.T__153 - 143)) | (1 << (Verilog2001Parser.T__154 - 143)) | (1 << (Verilog2001Parser.T__155 - 143)) | (1 << (Verilog2001Parser.T__156 - 143)) | (1 << (Verilog2001Parser.T__157 - 143)) | (1 << (Verilog2001Parser.T__158 - 143)) | (1 << (Verilog2001Parser.T__159 - 143)) | (1 << (Verilog2001Parser.T__160 - 143)) | (1 << (Verilog2001Parser.T__161 - 143)) | (1 << (Verilog2001Parser.T__162 - 143)) | (1 << (Verilog2001Parser.T__163 - 143)) | (1 << (Verilog2001Parser.T__164 - 143)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.unary_module_path_operator = function () {
        var _localctx = new Unary_module_path_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 512, Verilog2001Parser.RULE_unary_module_path_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3813;
                _la = this._input.LA(1);
                if (!(((((_la - 141)) & ~0x1F) === 0 && ((1 << (_la - 141)) & ((1 << (Verilog2001Parser.T__140 - 141)) | (1 << (Verilog2001Parser.T__141 - 141)) | (1 << (Verilog2001Parser.T__142 - 141)) | (1 << (Verilog2001Parser.T__143 - 141)) | (1 << (Verilog2001Parser.T__144 - 141)) | (1 << (Verilog2001Parser.T__145 - 141)) | (1 << (Verilog2001Parser.T__146 - 141)) | (1 << (Verilog2001Parser.T__147 - 141)) | (1 << (Verilog2001Parser.T__148 - 141)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.binary_module_path_operator = function () {
        var _localctx = new Binary_module_path_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 514, Verilog2001Parser.RULE_binary_module_path_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3815;
                _la = this._input.LA(1);
                if (!(((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (Verilog2001Parser.T__142 - 143)) | (1 << (Verilog2001Parser.T__144 - 143)) | (1 << (Verilog2001Parser.T__146 - 143)) | (1 << (Verilog2001Parser.T__147 - 143)) | (1 << (Verilog2001Parser.T__148 - 143)) | (1 << (Verilog2001Parser.T__151 - 143)) | (1 << (Verilog2001Parser.T__152 - 143)) | (1 << (Verilog2001Parser.T__155 - 143)) | (1 << (Verilog2001Parser.T__156 - 143)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.number = function () {
        var _localctx = new NumberContext(this._ctx, this.state);
        this.enterRule(_localctx, 516, Verilog2001Parser.RULE_number);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3817;
                _la = this._input.LA(1);
                if (!(((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (Verilog2001Parser.Real_number - 167)) | (1 << (Verilog2001Parser.Decimal_number - 167)) | (1 << (Verilog2001Parser.Binary_number - 167)) | (1 << (Verilog2001Parser.Octal_number - 167)) | (1 << (Verilog2001Parser.Hex_number - 167)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.timing_spec = function () {
        var _localctx = new Timing_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 518, Verilog2001Parser.RULE_timing_spec);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3819;
                this.match(Verilog2001Parser.T__165);
                this.state = 3820;
                this.match(Verilog2001Parser.Time_Identifier);
                this.state = 3821;
                this.match(Verilog2001Parser.T__149);
                this.state = 3822;
                this.match(Verilog2001Parser.Time_Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.attribute_instance = function () {
        var _localctx = new Attribute_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 520, Verilog2001Parser.RULE_attribute_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3824;
                this.match(Verilog2001Parser.T__15);
                this.state = 3825;
                this.match(Verilog2001Parser.T__117);
                this.state = 3826;
                this.attr_spec();
                this.state = 3831;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__16) {
                    {
                        {
                            this.state = 3827;
                            this.match(Verilog2001Parser.T__16);
                            this.state = 3828;
                            this.attr_spec();
                        }
                    }
                    this.state = 3833;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3834;
                this.match(Verilog2001Parser.T__117);
                this.state = 3835;
                this.match(Verilog2001Parser.T__17);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.attr_spec = function () {
        var _localctx = new Attr_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 522, Verilog2001Parser.RULE_attr_spec);
        try {
            this.state = 3842;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 405, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3837;
                        this.attr_name();
                        this.state = 3838;
                        this.match(Verilog2001Parser.T__50);
                        this.state = 3839;
                        this.constant_expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3841;
                        this.attr_name();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.attr_name = function () {
        var _localctx = new Attr_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 524, Verilog2001Parser.RULE_attr_name);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3844;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.arrayed_identifier = function () {
        var _localctx = new Arrayed_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 526, Verilog2001Parser.RULE_arrayed_identifier);
        try {
            this.state = 3848;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3846;
                        this.simple_arrayed_identifier();
                    }
                    break;
                case Verilog2001Parser.Escaped_identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3847;
                        this.escaped_arrayed_identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.block_identifier = function () {
        var _localctx = new Block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 528, Verilog2001Parser.RULE_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3850;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.cell_identifier = function () {
        var _localctx = new Cell_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 530, Verilog2001Parser.RULE_cell_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3852;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.config_identifier = function () {
        var _localctx = new Config_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 532, Verilog2001Parser.RULE_config_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3854;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.escaped_arrayed_identifier = function () {
        var _localctx = new Escaped_arrayed_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 534, Verilog2001Parser.RULE_escaped_arrayed_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3856;
                this.match(Verilog2001Parser.Escaped_identifier);
                this.state = 3858;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 407, this._ctx)) {
                    case 1:
                        {
                            this.state = 3857;
                            this.range_();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.escaped_hierarchical_identifier = function () {
        var _localctx = new Escaped_hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 536, Verilog2001Parser.RULE_escaped_hierarchical_identifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3860;
                this.escaped_hierarchical_branch();
                this.state = 3867;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === Verilog2001Parser.T__4) {
                    {
                        this.state = 3865;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 408, this._ctx)) {
                            case 1:
                                {
                                    this.state = 3861;
                                    this.match(Verilog2001Parser.T__4);
                                    this.state = 3862;
                                    this.simple_hierarchical_branch();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 3863;
                                    this.match(Verilog2001Parser.T__4);
                                    this.state = 3864;
                                    this.escaped_hierarchical_branch();
                                }
                                break;
                        }
                    }
                    this.state = 3869;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.event_identifier = function () {
        var _localctx = new Event_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 538, Verilog2001Parser.RULE_event_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3870;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.function_identifier = function () {
        var _localctx = new Function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 540, Verilog2001Parser.RULE_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3872;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.gate_instance_identifier = function () {
        var _localctx = new Gate_instance_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 542, Verilog2001Parser.RULE_gate_instance_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3874;
                this.arrayed_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.generate_block_identifier = function () {
        var _localctx = new Generate_block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 544, Verilog2001Parser.RULE_generate_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3876;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.genvar_function_identifier = function () {
        var _localctx = new Genvar_function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 546, Verilog2001Parser.RULE_genvar_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3878;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.genvar_identifier = function () {
        var _localctx = new Genvar_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 548, Verilog2001Parser.RULE_genvar_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3880;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.hierarchical_block_identifier = function () {
        var _localctx = new Hierarchical_block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 550, Verilog2001Parser.RULE_hierarchical_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3882;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.hierarchical_event_identifier = function () {
        var _localctx = new Hierarchical_event_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 552, Verilog2001Parser.RULE_hierarchical_event_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3884;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.hierarchical_function_identifier = function () {
        var _localctx = new Hierarchical_function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 554, Verilog2001Parser.RULE_hierarchical_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3886;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.hierarchical_identifier = function () {
        var _localctx = new Hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 556, Verilog2001Parser.RULE_hierarchical_identifier);
        try {
            this.state = 3890;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Verilog2001Parser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3888;
                        this.simple_hierarchical_identifier();
                    }
                    break;
                case Verilog2001Parser.Escaped_identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3889;
                        this.escaped_hierarchical_identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.hierarchical_net_identifier = function () {
        var _localctx = new Hierarchical_net_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 558, Verilog2001Parser.RULE_hierarchical_net_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3892;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.hierarchical_variable_identifier = function () {
        var _localctx = new Hierarchical_variable_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 560, Verilog2001Parser.RULE_hierarchical_variable_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3894;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.hierarchical_task_identifier = function () {
        var _localctx = new Hierarchical_task_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 562, Verilog2001Parser.RULE_hierarchical_task_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3896;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.identifier = function () {
        var _localctx = new IdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 564, Verilog2001Parser.RULE_identifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3898;
                _la = this._input.LA(1);
                if (!(_la === Verilog2001Parser.Escaped_identifier || _la === Verilog2001Parser.Simple_identifier)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.inout_port_identifier = function () {
        var _localctx = new Inout_port_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 566, Verilog2001Parser.RULE_inout_port_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3900;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.input_port_identifier = function () {
        var _localctx = new Input_port_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 568, Verilog2001Parser.RULE_input_port_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3902;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.instance_identifier = function () {
        var _localctx = new Instance_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 570, Verilog2001Parser.RULE_instance_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3904;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.library_identifier = function () {
        var _localctx = new Library_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 572, Verilog2001Parser.RULE_library_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3906;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.memory_identifier = function () {
        var _localctx = new Memory_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 574, Verilog2001Parser.RULE_memory_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3908;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_identifier = function () {
        var _localctx = new Module_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 576, Verilog2001Parser.RULE_module_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3910;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.module_instance_identifier = function () {
        var _localctx = new Module_instance_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 578, Verilog2001Parser.RULE_module_instance_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3912;
                this.arrayed_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.net_identifier = function () {
        var _localctx = new Net_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 580, Verilog2001Parser.RULE_net_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3914;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.output_port_identifier = function () {
        var _localctx = new Output_port_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 582, Verilog2001Parser.RULE_output_port_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3916;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.parameter_identifier = function () {
        var _localctx = new Parameter_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 584, Verilog2001Parser.RULE_parameter_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3918;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.port_identifier = function () {
        var _localctx = new Port_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 586, Verilog2001Parser.RULE_port_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3920;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.real_identifier = function () {
        var _localctx = new Real_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 588, Verilog2001Parser.RULE_real_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3922;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.simple_arrayed_identifier = function () {
        var _localctx = new Simple_arrayed_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 590, Verilog2001Parser.RULE_simple_arrayed_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3924;
                this.match(Verilog2001Parser.Simple_identifier);
                this.state = 3926;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 411, this._ctx)) {
                    case 1:
                        {
                            this.state = 3925;
                            this.range_();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.simple_hierarchical_identifier = function () {
        var _localctx = new Simple_hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 592, Verilog2001Parser.RULE_simple_hierarchical_identifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3928;
                this.simple_hierarchical_branch();
                this.state = 3931;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Verilog2001Parser.T__4) {
                    {
                        this.state = 3929;
                        this.match(Verilog2001Parser.T__4);
                        this.state = 3930;
                        this.match(Verilog2001Parser.Escaped_identifier);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.specparam_identifier = function () {
        var _localctx = new Specparam_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 594, Verilog2001Parser.RULE_specparam_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3933;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.system_function_identifier = function () {
        var _localctx = new System_function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 596, Verilog2001Parser.RULE_system_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3935;
                this.match(Verilog2001Parser.Dollar_Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.system_task_identifier = function () {
        var _localctx = new System_task_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 598, Verilog2001Parser.RULE_system_task_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3937;
                this.match(Verilog2001Parser.Dollar_Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.task_identifier = function () {
        var _localctx = new Task_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 600, Verilog2001Parser.RULE_task_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3939;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.terminal_identifier = function () {
        var _localctx = new Terminal_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 602, Verilog2001Parser.RULE_terminal_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3941;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.text_macro_identifier = function () {
        var _localctx = new Text_macro_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 604, Verilog2001Parser.RULE_text_macro_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3943;
                this.match(Verilog2001Parser.Simple_identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.topmodule_identifier = function () {
        var _localctx = new Topmodule_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 606, Verilog2001Parser.RULE_topmodule_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3945;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.udp_identifier = function () {
        var _localctx = new Udp_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 608, Verilog2001Parser.RULE_udp_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3947;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.udp_instance_identifier = function () {
        var _localctx = new Udp_instance_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 610, Verilog2001Parser.RULE_udp_instance_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3949;
                this.arrayed_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.variable_identifier = function () {
        var _localctx = new Variable_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 612, Verilog2001Parser.RULE_variable_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3951;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.simple_hierarchical_branch = function () {
        var _localctx = new Simple_hierarchical_branchContext(this._ctx, this.state);
        this.enterRule(_localctx, 614, Verilog2001Parser.RULE_simple_hierarchical_branch);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3953;
                this.match(Verilog2001Parser.Simple_identifier);
                this.state = 3957;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 413, this._ctx)) {
                    case 1:
                        {
                            this.state = 3954;
                            this.match(Verilog2001Parser.T__20);
                            this.state = 3955;
                            this.match(Verilog2001Parser.Decimal_number);
                            this.state = 3956;
                            this.match(Verilog2001Parser.T__21);
                        }
                        break;
                }
                this.state = 3968;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3959;
                                this.match(Verilog2001Parser.T__4);
                                this.state = 3960;
                                this.match(Verilog2001Parser.Simple_identifier);
                                this.state = 3964;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 414, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 3961;
                                            this.match(Verilog2001Parser.T__20);
                                            this.state = 3962;
                                            this.match(Verilog2001Parser.Decimal_number);
                                            this.state = 3963;
                                            this.match(Verilog2001Parser.T__21);
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    this.state = 3970;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    Verilog2001Parser.prototype.escaped_hierarchical_branch = function () {
        var _localctx = new Escaped_hierarchical_branchContext(this._ctx, this.state);
        this.enterRule(_localctx, 616, Verilog2001Parser.RULE_escaped_hierarchical_branch);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3971;
                this.match(Verilog2001Parser.Escaped_identifier);
                this.state = 3975;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 416, this._ctx)) {
                    case 1:
                        {
                            this.state = 3972;
                            this.match(Verilog2001Parser.T__20);
                            this.state = 3973;
                            this.match(Verilog2001Parser.Decimal_number);
                            this.state = 3974;
                            this.match(Verilog2001Parser.T__21);
                        }
                        break;
                }
                this.state = 3986;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3977;
                                this.match(Verilog2001Parser.T__4);
                                this.state = 3978;
                                this.match(Verilog2001Parser.Escaped_identifier);
                                this.state = 3982;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 417, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 3979;
                                            this.match(Verilog2001Parser.T__20);
                                            this.state = 3980;
                                            this.match(Verilog2001Parser.Decimal_number);
                                            this.state = 3981;
                                            this.match(Verilog2001Parser.T__21);
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    this.state = 3988;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 418, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    Object.defineProperty(Verilog2001Parser, "_ATN", {
        get: function () {
            if (!Verilog2001Parser.__ATN) {
                Verilog2001Parser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(Verilog2001Parser._serializedATN));
            }
            return Verilog2001Parser.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    Verilog2001Parser.T__0 = 1;
    Verilog2001Parser.T__1 = 2;
    Verilog2001Parser.T__2 = 3;
    Verilog2001Parser.T__3 = 4;
    Verilog2001Parser.T__4 = 5;
    Verilog2001Parser.T__5 = 6;
    Verilog2001Parser.T__6 = 7;
    Verilog2001Parser.T__7 = 8;
    Verilog2001Parser.T__8 = 9;
    Verilog2001Parser.T__9 = 10;
    Verilog2001Parser.T__10 = 11;
    Verilog2001Parser.T__11 = 12;
    Verilog2001Parser.T__12 = 13;
    Verilog2001Parser.T__13 = 14;
    Verilog2001Parser.T__14 = 15;
    Verilog2001Parser.T__15 = 16;
    Verilog2001Parser.T__16 = 17;
    Verilog2001Parser.T__17 = 18;
    Verilog2001Parser.T__18 = 19;
    Verilog2001Parser.T__19 = 20;
    Verilog2001Parser.T__20 = 21;
    Verilog2001Parser.T__21 = 22;
    Verilog2001Parser.T__22 = 23;
    Verilog2001Parser.T__23 = 24;
    Verilog2001Parser.T__24 = 25;
    Verilog2001Parser.T__25 = 26;
    Verilog2001Parser.T__26 = 27;
    Verilog2001Parser.T__27 = 28;
    Verilog2001Parser.T__28 = 29;
    Verilog2001Parser.T__29 = 30;
    Verilog2001Parser.T__30 = 31;
    Verilog2001Parser.T__31 = 32;
    Verilog2001Parser.T__32 = 33;
    Verilog2001Parser.T__33 = 34;
    Verilog2001Parser.T__34 = 35;
    Verilog2001Parser.T__35 = 36;
    Verilog2001Parser.T__36 = 37;
    Verilog2001Parser.T__37 = 38;
    Verilog2001Parser.T__38 = 39;
    Verilog2001Parser.T__39 = 40;
    Verilog2001Parser.T__40 = 41;
    Verilog2001Parser.T__41 = 42;
    Verilog2001Parser.T__42 = 43;
    Verilog2001Parser.T__43 = 44;
    Verilog2001Parser.T__44 = 45;
    Verilog2001Parser.T__45 = 46;
    Verilog2001Parser.T__46 = 47;
    Verilog2001Parser.T__47 = 48;
    Verilog2001Parser.T__48 = 49;
    Verilog2001Parser.T__49 = 50;
    Verilog2001Parser.T__50 = 51;
    Verilog2001Parser.T__51 = 52;
    Verilog2001Parser.T__52 = 53;
    Verilog2001Parser.T__53 = 54;
    Verilog2001Parser.T__54 = 55;
    Verilog2001Parser.T__55 = 56;
    Verilog2001Parser.T__56 = 57;
    Verilog2001Parser.T__57 = 58;
    Verilog2001Parser.T__58 = 59;
    Verilog2001Parser.T__59 = 60;
    Verilog2001Parser.T__60 = 61;
    Verilog2001Parser.T__61 = 62;
    Verilog2001Parser.T__62 = 63;
    Verilog2001Parser.T__63 = 64;
    Verilog2001Parser.T__64 = 65;
    Verilog2001Parser.T__65 = 66;
    Verilog2001Parser.T__66 = 67;
    Verilog2001Parser.T__67 = 68;
    Verilog2001Parser.T__68 = 69;
    Verilog2001Parser.T__69 = 70;
    Verilog2001Parser.T__70 = 71;
    Verilog2001Parser.T__71 = 72;
    Verilog2001Parser.T__72 = 73;
    Verilog2001Parser.T__73 = 74;
    Verilog2001Parser.T__74 = 75;
    Verilog2001Parser.T__75 = 76;
    Verilog2001Parser.T__76 = 77;
    Verilog2001Parser.T__77 = 78;
    Verilog2001Parser.T__78 = 79;
    Verilog2001Parser.T__79 = 80;
    Verilog2001Parser.T__80 = 81;
    Verilog2001Parser.T__81 = 82;
    Verilog2001Parser.T__82 = 83;
    Verilog2001Parser.T__83 = 84;
    Verilog2001Parser.T__84 = 85;
    Verilog2001Parser.T__85 = 86;
    Verilog2001Parser.T__86 = 87;
    Verilog2001Parser.T__87 = 88;
    Verilog2001Parser.T__88 = 89;
    Verilog2001Parser.T__89 = 90;
    Verilog2001Parser.T__90 = 91;
    Verilog2001Parser.T__91 = 92;
    Verilog2001Parser.T__92 = 93;
    Verilog2001Parser.T__93 = 94;
    Verilog2001Parser.T__94 = 95;
    Verilog2001Parser.T__95 = 96;
    Verilog2001Parser.T__96 = 97;
    Verilog2001Parser.T__97 = 98;
    Verilog2001Parser.T__98 = 99;
    Verilog2001Parser.T__99 = 100;
    Verilog2001Parser.T__100 = 101;
    Verilog2001Parser.T__101 = 102;
    Verilog2001Parser.T__102 = 103;
    Verilog2001Parser.T__103 = 104;
    Verilog2001Parser.T__104 = 105;
    Verilog2001Parser.T__105 = 106;
    Verilog2001Parser.T__106 = 107;
    Verilog2001Parser.T__107 = 108;
    Verilog2001Parser.T__108 = 109;
    Verilog2001Parser.T__109 = 110;
    Verilog2001Parser.T__110 = 111;
    Verilog2001Parser.T__111 = 112;
    Verilog2001Parser.T__112 = 113;
    Verilog2001Parser.T__113 = 114;
    Verilog2001Parser.T__114 = 115;
    Verilog2001Parser.T__115 = 116;
    Verilog2001Parser.T__116 = 117;
    Verilog2001Parser.T__117 = 118;
    Verilog2001Parser.T__118 = 119;
    Verilog2001Parser.T__119 = 120;
    Verilog2001Parser.T__120 = 121;
    Verilog2001Parser.T__121 = 122;
    Verilog2001Parser.T__122 = 123;
    Verilog2001Parser.T__123 = 124;
    Verilog2001Parser.T__124 = 125;
    Verilog2001Parser.T__125 = 126;
    Verilog2001Parser.T__126 = 127;
    Verilog2001Parser.T__127 = 128;
    Verilog2001Parser.T__128 = 129;
    Verilog2001Parser.T__129 = 130;
    Verilog2001Parser.T__130 = 131;
    Verilog2001Parser.T__131 = 132;
    Verilog2001Parser.T__132 = 133;
    Verilog2001Parser.T__133 = 134;
    Verilog2001Parser.T__134 = 135;
    Verilog2001Parser.T__135 = 136;
    Verilog2001Parser.T__136 = 137;
    Verilog2001Parser.T__137 = 138;
    Verilog2001Parser.T__138 = 139;
    Verilog2001Parser.T__139 = 140;
    Verilog2001Parser.T__140 = 141;
    Verilog2001Parser.T__141 = 142;
    Verilog2001Parser.T__142 = 143;
    Verilog2001Parser.T__143 = 144;
    Verilog2001Parser.T__144 = 145;
    Verilog2001Parser.T__145 = 146;
    Verilog2001Parser.T__146 = 147;
    Verilog2001Parser.T__147 = 148;
    Verilog2001Parser.T__148 = 149;
    Verilog2001Parser.T__149 = 150;
    Verilog2001Parser.T__150 = 151;
    Verilog2001Parser.T__151 = 152;
    Verilog2001Parser.T__152 = 153;
    Verilog2001Parser.T__153 = 154;
    Verilog2001Parser.T__154 = 155;
    Verilog2001Parser.T__155 = 156;
    Verilog2001Parser.T__156 = 157;
    Verilog2001Parser.T__157 = 158;
    Verilog2001Parser.T__158 = 159;
    Verilog2001Parser.T__159 = 160;
    Verilog2001Parser.T__160 = 161;
    Verilog2001Parser.T__161 = 162;
    Verilog2001Parser.T__162 = 163;
    Verilog2001Parser.T__163 = 164;
    Verilog2001Parser.T__164 = 165;
    Verilog2001Parser.T__165 = 166;
    Verilog2001Parser.Real_number = 167;
    Verilog2001Parser.Decimal_number = 168;
    Verilog2001Parser.Binary_number = 169;
    Verilog2001Parser.Octal_number = 170;
    Verilog2001Parser.Hex_number = 171;
    Verilog2001Parser.String = 172;
    Verilog2001Parser.One_line_comment = 173;
    Verilog2001Parser.Block_comment = 174;
    Verilog2001Parser.Escaped_identifier = 175;
    Verilog2001Parser.Simple_identifier = 176;
    Verilog2001Parser.Dollar_Identifier = 177;
    Verilog2001Parser.Time_Identifier = 178;
    Verilog2001Parser.White_space = 179;
    Verilog2001Parser.RULE_config_declaration = 0;
    Verilog2001Parser.RULE_design_statement = 1;
    Verilog2001Parser.RULE_config_rule_statement = 2;
    Verilog2001Parser.RULE_default_clause = 3;
    Verilog2001Parser.RULE_inst_clause = 4;
    Verilog2001Parser.RULE_inst_name = 5;
    Verilog2001Parser.RULE_liblist_clause = 6;
    Verilog2001Parser.RULE_cell_clause = 7;
    Verilog2001Parser.RULE_use_clause = 8;
    Verilog2001Parser.RULE_source_text = 9;
    Verilog2001Parser.RULE_description = 10;
    Verilog2001Parser.RULE_module_declaration = 11;
    Verilog2001Parser.RULE_module_keyword = 12;
    Verilog2001Parser.RULE_module_parameter_port_list = 13;
    Verilog2001Parser.RULE_list_of_ports = 14;
    Verilog2001Parser.RULE_list_of_port_declarations = 15;
    Verilog2001Parser.RULE_port = 16;
    Verilog2001Parser.RULE_port_expression = 17;
    Verilog2001Parser.RULE_port_reference = 18;
    Verilog2001Parser.RULE_port_declaration = 19;
    Verilog2001Parser.RULE_module_item = 20;
    Verilog2001Parser.RULE_module_or_generate_item = 21;
    Verilog2001Parser.RULE_non_port_module_item = 22;
    Verilog2001Parser.RULE_module_or_generate_item_declaration = 23;
    Verilog2001Parser.RULE_parameter_override = 24;
    Verilog2001Parser.RULE_local_parameter_declaration = 25;
    Verilog2001Parser.RULE_parameter_declaration = 26;
    Verilog2001Parser.RULE_parameter_declaration_ = 27;
    Verilog2001Parser.RULE_specparam_declaration = 28;
    Verilog2001Parser.RULE_inout_declaration = 29;
    Verilog2001Parser.RULE_input_declaration = 30;
    Verilog2001Parser.RULE_output_declaration = 31;
    Verilog2001Parser.RULE_event_declaration = 32;
    Verilog2001Parser.RULE_genvar_declaration = 33;
    Verilog2001Parser.RULE_integer_declaration = 34;
    Verilog2001Parser.RULE_time_declaration = 35;
    Verilog2001Parser.RULE_real_declaration = 36;
    Verilog2001Parser.RULE_realtime_declaration = 37;
    Verilog2001Parser.RULE_reg_declaration = 38;
    Verilog2001Parser.RULE_net_declaration = 39;
    Verilog2001Parser.RULE_net_type = 40;
    Verilog2001Parser.RULE_output_variable_type = 41;
    Verilog2001Parser.RULE_real_type = 42;
    Verilog2001Parser.RULE_variable_type = 43;
    Verilog2001Parser.RULE_drive_strength = 44;
    Verilog2001Parser.RULE_strength0 = 45;
    Verilog2001Parser.RULE_strength1 = 46;
    Verilog2001Parser.RULE_charge_strength = 47;
    Verilog2001Parser.RULE_delay3 = 48;
    Verilog2001Parser.RULE_delay2 = 49;
    Verilog2001Parser.RULE_delay_value = 50;
    Verilog2001Parser.RULE_list_of_event_identifiers = 51;
    Verilog2001Parser.RULE_list_of_net_identifiers = 52;
    Verilog2001Parser.RULE_list_of_genvar_identifiers = 53;
    Verilog2001Parser.RULE_list_of_port_identifiers = 54;
    Verilog2001Parser.RULE_list_of_net_decl_assignments = 55;
    Verilog2001Parser.RULE_list_of_param_assignments = 56;
    Verilog2001Parser.RULE_list_of_specparam_assignments = 57;
    Verilog2001Parser.RULE_list_of_real_identifiers = 58;
    Verilog2001Parser.RULE_list_of_variable_identifiers = 59;
    Verilog2001Parser.RULE_list_of_variable_port_identifiers = 60;
    Verilog2001Parser.RULE_net_decl_assignment = 61;
    Verilog2001Parser.RULE_param_assignment = 62;
    Verilog2001Parser.RULE_specparam_assignment = 63;
    Verilog2001Parser.RULE_pulse_control_specparam = 64;
    Verilog2001Parser.RULE_error_limit_value = 65;
    Verilog2001Parser.RULE_reject_limit_value = 66;
    Verilog2001Parser.RULE_limit_value = 67;
    Verilog2001Parser.RULE_dimension = 68;
    Verilog2001Parser.RULE_range_ = 69;
    Verilog2001Parser.RULE_function_declaration = 70;
    Verilog2001Parser.RULE_function_item_declaration = 71;
    Verilog2001Parser.RULE_function_port_list = 72;
    Verilog2001Parser.RULE_function_port = 73;
    Verilog2001Parser.RULE_range_or_type = 74;
    Verilog2001Parser.RULE_task_declaration = 75;
    Verilog2001Parser.RULE_task_item_declaration = 76;
    Verilog2001Parser.RULE_task_port_list = 77;
    Verilog2001Parser.RULE_task_port_item = 78;
    Verilog2001Parser.RULE_tf_decl_header = 79;
    Verilog2001Parser.RULE_tf_declaration = 80;
    Verilog2001Parser.RULE_task_port_type = 81;
    Verilog2001Parser.RULE_block_item_declaration = 82;
    Verilog2001Parser.RULE_block_reg_declaration = 83;
    Verilog2001Parser.RULE_list_of_block_variable_identifiers = 84;
    Verilog2001Parser.RULE_block_variable_type = 85;
    Verilog2001Parser.RULE_gate_instantiation = 86;
    Verilog2001Parser.RULE_cmos_switch_instance = 87;
    Verilog2001Parser.RULE_enable_gate_instance = 88;
    Verilog2001Parser.RULE_mos_switch_instance = 89;
    Verilog2001Parser.RULE_n_input_gate_instance = 90;
    Verilog2001Parser.RULE_n_output_gate_instance = 91;
    Verilog2001Parser.RULE_pass_switch_instance = 92;
    Verilog2001Parser.RULE_pass_enable_switch_instance = 93;
    Verilog2001Parser.RULE_pull_gate_instance = 94;
    Verilog2001Parser.RULE_name_of_gate_instance = 95;
    Verilog2001Parser.RULE_pulldown_strength = 96;
    Verilog2001Parser.RULE_pullup_strength = 97;
    Verilog2001Parser.RULE_enable_terminal = 98;
    Verilog2001Parser.RULE_ncontrol_terminal = 99;
    Verilog2001Parser.RULE_pcontrol_terminal = 100;
    Verilog2001Parser.RULE_input_terminal = 101;
    Verilog2001Parser.RULE_inout_terminal = 102;
    Verilog2001Parser.RULE_output_terminal = 103;
    Verilog2001Parser.RULE_cmos_switchtype = 104;
    Verilog2001Parser.RULE_enable_gatetype = 105;
    Verilog2001Parser.RULE_mos_switchtype = 106;
    Verilog2001Parser.RULE_n_input_gatetype = 107;
    Verilog2001Parser.RULE_n_output_gatetype = 108;
    Verilog2001Parser.RULE_pass_en_switchtype = 109;
    Verilog2001Parser.RULE_pass_switchtype = 110;
    Verilog2001Parser.RULE_module_instantiation = 111;
    Verilog2001Parser.RULE_parameter_value_assignment = 112;
    Verilog2001Parser.RULE_list_of_parameter_assignments = 113;
    Verilog2001Parser.RULE_ordered_parameter_assignment = 114;
    Verilog2001Parser.RULE_named_parameter_assignment = 115;
    Verilog2001Parser.RULE_module_instance = 116;
    Verilog2001Parser.RULE_name_of_instance = 117;
    Verilog2001Parser.RULE_list_of_port_connections = 118;
    Verilog2001Parser.RULE_ordered_port_connection = 119;
    Verilog2001Parser.RULE_named_port_connection = 120;
    Verilog2001Parser.RULE_generated_instantiation = 121;
    Verilog2001Parser.RULE_generate_item_or_null = 122;
    Verilog2001Parser.RULE_generate_item = 123;
    Verilog2001Parser.RULE_generate_conditional_statement = 124;
    Verilog2001Parser.RULE_generate_case_statement = 125;
    Verilog2001Parser.RULE_genvar_case_item = 126;
    Verilog2001Parser.RULE_generate_loop_statement = 127;
    Verilog2001Parser.RULE_genvar_assignment = 128;
    Verilog2001Parser.RULE_generate_block = 129;
    Verilog2001Parser.RULE_continuous_assign = 130;
    Verilog2001Parser.RULE_list_of_net_assignments = 131;
    Verilog2001Parser.RULE_net_assignment = 132;
    Verilog2001Parser.RULE_initial_construct = 133;
    Verilog2001Parser.RULE_always_construct = 134;
    Verilog2001Parser.RULE_blocking_assignment = 135;
    Verilog2001Parser.RULE_nonblocking_assignment = 136;
    Verilog2001Parser.RULE_procedural_continuous_assignments = 137;
    Verilog2001Parser.RULE_function_blocking_assignment = 138;
    Verilog2001Parser.RULE_function_statement_or_null = 139;
    Verilog2001Parser.RULE_function_seq_block = 140;
    Verilog2001Parser.RULE_variable_assignment = 141;
    Verilog2001Parser.RULE_par_block = 142;
    Verilog2001Parser.RULE_seq_block = 143;
    Verilog2001Parser.RULE_statement = 144;
    Verilog2001Parser.RULE_statement_or_null = 145;
    Verilog2001Parser.RULE_function_statement = 146;
    Verilog2001Parser.RULE_delay_or_event_control = 147;
    Verilog2001Parser.RULE_delay_control = 148;
    Verilog2001Parser.RULE_disable_statement = 149;
    Verilog2001Parser.RULE_event_control = 150;
    Verilog2001Parser.RULE_event_trigger = 151;
    Verilog2001Parser.RULE_event_expression = 152;
    Verilog2001Parser.RULE_event_primary = 153;
    Verilog2001Parser.RULE_procedural_timing_control_statement = 154;
    Verilog2001Parser.RULE_wait_statement = 155;
    Verilog2001Parser.RULE_conditional_statement = 156;
    Verilog2001Parser.RULE_if_else_if_statement = 157;
    Verilog2001Parser.RULE_function_conditional_statement = 158;
    Verilog2001Parser.RULE_function_if_else_if_statement = 159;
    Verilog2001Parser.RULE_case_statement = 160;
    Verilog2001Parser.RULE_case_item = 161;
    Verilog2001Parser.RULE_function_case_statement = 162;
    Verilog2001Parser.RULE_function_case_item = 163;
    Verilog2001Parser.RULE_function_loop_statement = 164;
    Verilog2001Parser.RULE_loop_statement = 165;
    Verilog2001Parser.RULE_system_task_enable = 166;
    Verilog2001Parser.RULE_task_enable = 167;
    Verilog2001Parser.RULE_specify_block = 168;
    Verilog2001Parser.RULE_specify_item = 169;
    Verilog2001Parser.RULE_pulsestyle_declaration = 170;
    Verilog2001Parser.RULE_showcancelled_declaration = 171;
    Verilog2001Parser.RULE_path_declaration = 172;
    Verilog2001Parser.RULE_simple_path_declaration = 173;
    Verilog2001Parser.RULE_parallel_path_description = 174;
    Verilog2001Parser.RULE_full_path_description = 175;
    Verilog2001Parser.RULE_list_of_path_inputs = 176;
    Verilog2001Parser.RULE_list_of_path_outputs = 177;
    Verilog2001Parser.RULE_specify_input_terminal_descriptor = 178;
    Verilog2001Parser.RULE_specify_output_terminal_descriptor = 179;
    Verilog2001Parser.RULE_input_identifier = 180;
    Verilog2001Parser.RULE_output_identifier = 181;
    Verilog2001Parser.RULE_path_delay_value = 182;
    Verilog2001Parser.RULE_list_of_path_delay_expressions = 183;
    Verilog2001Parser.RULE_t_path_delay_expression = 184;
    Verilog2001Parser.RULE_trise_path_delay_expression = 185;
    Verilog2001Parser.RULE_tfall_path_delay_expression = 186;
    Verilog2001Parser.RULE_tz_path_delay_expression = 187;
    Verilog2001Parser.RULE_t01_path_delay_expression = 188;
    Verilog2001Parser.RULE_t10_path_delay_expression = 189;
    Verilog2001Parser.RULE_t0z_path_delay_expression = 190;
    Verilog2001Parser.RULE_tz1_path_delay_expression = 191;
    Verilog2001Parser.RULE_t1z_path_delay_expression = 192;
    Verilog2001Parser.RULE_tz0_path_delay_expression = 193;
    Verilog2001Parser.RULE_t0x_path_delay_expression = 194;
    Verilog2001Parser.RULE_tx1_path_delay_expression = 195;
    Verilog2001Parser.RULE_t1x_path_delay_expression = 196;
    Verilog2001Parser.RULE_tx0_path_delay_expression = 197;
    Verilog2001Parser.RULE_txz_path_delay_expression = 198;
    Verilog2001Parser.RULE_tzx_path_delay_expression = 199;
    Verilog2001Parser.RULE_path_delay_expression = 200;
    Verilog2001Parser.RULE_edge_sensitive_path_declaration = 201;
    Verilog2001Parser.RULE_parallel_edge_sensitive_path_description = 202;
    Verilog2001Parser.RULE_full_edge_sensitive_path_description = 203;
    Verilog2001Parser.RULE_data_source_expression = 204;
    Verilog2001Parser.RULE_edge_identifier = 205;
    Verilog2001Parser.RULE_state_dependent_path_declaration = 206;
    Verilog2001Parser.RULE_polarity_operator = 207;
    Verilog2001Parser.RULE_checktime_condition = 208;
    Verilog2001Parser.RULE_delayed_data = 209;
    Verilog2001Parser.RULE_delayed_reference = 210;
    Verilog2001Parser.RULE_end_edge_offset = 211;
    Verilog2001Parser.RULE_event_based_flag = 212;
    Verilog2001Parser.RULE_notify_reg = 213;
    Verilog2001Parser.RULE_remain_active_flag = 214;
    Verilog2001Parser.RULE_stamptime_condition = 215;
    Verilog2001Parser.RULE_start_edge_offset = 216;
    Verilog2001Parser.RULE_threshold = 217;
    Verilog2001Parser.RULE_timing_check_limit = 218;
    Verilog2001Parser.RULE_concatenation = 219;
    Verilog2001Parser.RULE_constant_concatenation = 220;
    Verilog2001Parser.RULE_constant_multiple_concatenation = 221;
    Verilog2001Parser.RULE_module_path_concatenation = 222;
    Verilog2001Parser.RULE_module_path_multiple_concatenation = 223;
    Verilog2001Parser.RULE_multiple_concatenation = 224;
    Verilog2001Parser.RULE_net_concatenation = 225;
    Verilog2001Parser.RULE_net_concatenation_value = 226;
    Verilog2001Parser.RULE_variable_concatenation = 227;
    Verilog2001Parser.RULE_variable_concatenation_value = 228;
    Verilog2001Parser.RULE_constant_function_call = 229;
    Verilog2001Parser.RULE_function_call = 230;
    Verilog2001Parser.RULE_system_function_call = 231;
    Verilog2001Parser.RULE_genvar_function_call = 232;
    Verilog2001Parser.RULE_base_expression = 233;
    Verilog2001Parser.RULE_constant_base_expression = 234;
    Verilog2001Parser.RULE_constant_expression = 235;
    Verilog2001Parser.RULE_constant_mintypmax_expression = 236;
    Verilog2001Parser.RULE_constant_range_expression = 237;
    Verilog2001Parser.RULE_dimension_constant_expression = 238;
    Verilog2001Parser.RULE_expression = 239;
    Verilog2001Parser.RULE_term = 240;
    Verilog2001Parser.RULE_lsb_constant_expression = 241;
    Verilog2001Parser.RULE_mintypmax_expression = 242;
    Verilog2001Parser.RULE_module_path_conditional_expression = 243;
    Verilog2001Parser.RULE_module_path_expression = 244;
    Verilog2001Parser.RULE_module_path_mintypmax_expression = 245;
    Verilog2001Parser.RULE_msb_constant_expression = 246;
    Verilog2001Parser.RULE_range_expression = 247;
    Verilog2001Parser.RULE_width_constant_expression = 248;
    Verilog2001Parser.RULE_constant_primary = 249;
    Verilog2001Parser.RULE_module_path_primary = 250;
    Verilog2001Parser.RULE_primary = 251;
    Verilog2001Parser.RULE_net_lvalue = 252;
    Verilog2001Parser.RULE_variable_lvalue = 253;
    Verilog2001Parser.RULE_unary_operator = 254;
    Verilog2001Parser.RULE_binary_operator = 255;
    Verilog2001Parser.RULE_unary_module_path_operator = 256;
    Verilog2001Parser.RULE_binary_module_path_operator = 257;
    Verilog2001Parser.RULE_number = 258;
    Verilog2001Parser.RULE_timing_spec = 259;
    Verilog2001Parser.RULE_attribute_instance = 260;
    Verilog2001Parser.RULE_attr_spec = 261;
    Verilog2001Parser.RULE_attr_name = 262;
    Verilog2001Parser.RULE_arrayed_identifier = 263;
    Verilog2001Parser.RULE_block_identifier = 264;
    Verilog2001Parser.RULE_cell_identifier = 265;
    Verilog2001Parser.RULE_config_identifier = 266;
    Verilog2001Parser.RULE_escaped_arrayed_identifier = 267;
    Verilog2001Parser.RULE_escaped_hierarchical_identifier = 268;
    Verilog2001Parser.RULE_event_identifier = 269;
    Verilog2001Parser.RULE_function_identifier = 270;
    Verilog2001Parser.RULE_gate_instance_identifier = 271;
    Verilog2001Parser.RULE_generate_block_identifier = 272;
    Verilog2001Parser.RULE_genvar_function_identifier = 273;
    Verilog2001Parser.RULE_genvar_identifier = 274;
    Verilog2001Parser.RULE_hierarchical_block_identifier = 275;
    Verilog2001Parser.RULE_hierarchical_event_identifier = 276;
    Verilog2001Parser.RULE_hierarchical_function_identifier = 277;
    Verilog2001Parser.RULE_hierarchical_identifier = 278;
    Verilog2001Parser.RULE_hierarchical_net_identifier = 279;
    Verilog2001Parser.RULE_hierarchical_variable_identifier = 280;
    Verilog2001Parser.RULE_hierarchical_task_identifier = 281;
    Verilog2001Parser.RULE_identifier = 282;
    Verilog2001Parser.RULE_inout_port_identifier = 283;
    Verilog2001Parser.RULE_input_port_identifier = 284;
    Verilog2001Parser.RULE_instance_identifier = 285;
    Verilog2001Parser.RULE_library_identifier = 286;
    Verilog2001Parser.RULE_memory_identifier = 287;
    Verilog2001Parser.RULE_module_identifier = 288;
    Verilog2001Parser.RULE_module_instance_identifier = 289;
    Verilog2001Parser.RULE_net_identifier = 290;
    Verilog2001Parser.RULE_output_port_identifier = 291;
    Verilog2001Parser.RULE_parameter_identifier = 292;
    Verilog2001Parser.RULE_port_identifier = 293;
    Verilog2001Parser.RULE_real_identifier = 294;
    Verilog2001Parser.RULE_simple_arrayed_identifier = 295;
    Verilog2001Parser.RULE_simple_hierarchical_identifier = 296;
    Verilog2001Parser.RULE_specparam_identifier = 297;
    Verilog2001Parser.RULE_system_function_identifier = 298;
    Verilog2001Parser.RULE_system_task_identifier = 299;
    Verilog2001Parser.RULE_task_identifier = 300;
    Verilog2001Parser.RULE_terminal_identifier = 301;
    Verilog2001Parser.RULE_text_macro_identifier = 302;
    Verilog2001Parser.RULE_topmodule_identifier = 303;
    Verilog2001Parser.RULE_udp_identifier = 304;
    Verilog2001Parser.RULE_udp_instance_identifier = 305;
    Verilog2001Parser.RULE_variable_identifier = 306;
    Verilog2001Parser.RULE_simple_hierarchical_branch = 307;
    Verilog2001Parser.RULE_escaped_hierarchical_branch = 308;
    // tslint:disable:no-trailing-whitespace
    Verilog2001Parser.ruleNames = [
        "config_declaration", "design_statement", "config_rule_statement", "default_clause",
        "inst_clause", "inst_name", "liblist_clause", "cell_clause", "use_clause",
        "source_text", "description", "module_declaration", "module_keyword",
        "module_parameter_port_list", "list_of_ports", "list_of_port_declarations",
        "port", "port_expression", "port_reference", "port_declaration", "module_item",
        "module_or_generate_item", "non_port_module_item", "module_or_generate_item_declaration",
        "parameter_override", "local_parameter_declaration", "parameter_declaration",
        "parameter_declaration_", "specparam_declaration", "inout_declaration",
        "input_declaration", "output_declaration", "event_declaration", "genvar_declaration",
        "integer_declaration", "time_declaration", "real_declaration", "realtime_declaration",
        "reg_declaration", "net_declaration", "net_type", "output_variable_type",
        "real_type", "variable_type", "drive_strength", "strength0", "strength1",
        "charge_strength", "delay3", "delay2", "delay_value", "list_of_event_identifiers",
        "list_of_net_identifiers", "list_of_genvar_identifiers", "list_of_port_identifiers",
        "list_of_net_decl_assignments", "list_of_param_assignments", "list_of_specparam_assignments",
        "list_of_real_identifiers", "list_of_variable_identifiers", "list_of_variable_port_identifiers",
        "net_decl_assignment", "param_assignment", "specparam_assignment", "pulse_control_specparam",
        "error_limit_value", "reject_limit_value", "limit_value", "dimension",
        "range_", "function_declaration", "function_item_declaration", "function_port_list",
        "function_port", "range_or_type", "task_declaration", "task_item_declaration",
        "task_port_list", "task_port_item", "tf_decl_header", "tf_declaration",
        "task_port_type", "block_item_declaration", "block_reg_declaration", "list_of_block_variable_identifiers",
        "block_variable_type", "gate_instantiation", "cmos_switch_instance", "enable_gate_instance",
        "mos_switch_instance", "n_input_gate_instance", "n_output_gate_instance",
        "pass_switch_instance", "pass_enable_switch_instance", "pull_gate_instance",
        "name_of_gate_instance", "pulldown_strength", "pullup_strength", "enable_terminal",
        "ncontrol_terminal", "pcontrol_terminal", "input_terminal", "inout_terminal",
        "output_terminal", "cmos_switchtype", "enable_gatetype", "mos_switchtype",
        "n_input_gatetype", "n_output_gatetype", "pass_en_switchtype", "pass_switchtype",
        "module_instantiation", "parameter_value_assignment", "list_of_parameter_assignments",
        "ordered_parameter_assignment", "named_parameter_assignment", "module_instance",
        "name_of_instance", "list_of_port_connections", "ordered_port_connection",
        "named_port_connection", "generated_instantiation", "generate_item_or_null",
        "generate_item", "generate_conditional_statement", "generate_case_statement",
        "genvar_case_item", "generate_loop_statement", "genvar_assignment", "generate_block",
        "continuous_assign", "list_of_net_assignments", "net_assignment", "initial_construct",
        "always_construct", "blocking_assignment", "nonblocking_assignment", "procedural_continuous_assignments",
        "function_blocking_assignment", "function_statement_or_null", "function_seq_block",
        "variable_assignment", "par_block", "seq_block", "statement", "statement_or_null",
        "function_statement", "delay_or_event_control", "delay_control", "disable_statement",
        "event_control", "event_trigger", "event_expression", "event_primary",
        "procedural_timing_control_statement", "wait_statement", "conditional_statement",
        "if_else_if_statement", "function_conditional_statement", "function_if_else_if_statement",
        "case_statement", "case_item", "function_case_statement", "function_case_item",
        "function_loop_statement", "loop_statement", "system_task_enable", "task_enable",
        "specify_block", "specify_item", "pulsestyle_declaration", "showcancelled_declaration",
        "path_declaration", "simple_path_declaration", "parallel_path_description",
        "full_path_description", "list_of_path_inputs", "list_of_path_outputs",
        "specify_input_terminal_descriptor", "specify_output_terminal_descriptor",
        "input_identifier", "output_identifier", "path_delay_value", "list_of_path_delay_expressions",
        "t_path_delay_expression", "trise_path_delay_expression", "tfall_path_delay_expression",
        "tz_path_delay_expression", "t01_path_delay_expression", "t10_path_delay_expression",
        "t0z_path_delay_expression", "tz1_path_delay_expression", "t1z_path_delay_expression",
        "tz0_path_delay_expression", "t0x_path_delay_expression", "tx1_path_delay_expression",
        "t1x_path_delay_expression", "tx0_path_delay_expression", "txz_path_delay_expression",
        "tzx_path_delay_expression", "path_delay_expression", "edge_sensitive_path_declaration",
        "parallel_edge_sensitive_path_description", "full_edge_sensitive_path_description",
        "data_source_expression", "edge_identifier", "state_dependent_path_declaration",
        "polarity_operator", "checktime_condition", "delayed_data", "delayed_reference",
        "end_edge_offset", "event_based_flag", "notify_reg", "remain_active_flag",
        "stamptime_condition", "start_edge_offset", "threshold", "timing_check_limit",
        "concatenation", "constant_concatenation", "constant_multiple_concatenation",
        "module_path_concatenation", "module_path_multiple_concatenation", "multiple_concatenation",
        "net_concatenation", "net_concatenation_value", "variable_concatenation",
        "variable_concatenation_value", "constant_function_call", "function_call",
        "system_function_call", "genvar_function_call", "base_expression", "constant_base_expression",
        "constant_expression", "constant_mintypmax_expression", "constant_range_expression",
        "dimension_constant_expression", "expression", "term", "lsb_constant_expression",
        "mintypmax_expression", "module_path_conditional_expression", "module_path_expression",
        "module_path_mintypmax_expression", "msb_constant_expression", "range_expression",
        "width_constant_expression", "constant_primary", "module_path_primary",
        "primary", "net_lvalue", "variable_lvalue", "unary_operator", "binary_operator",
        "unary_module_path_operator", "binary_module_path_operator", "number",
        "timing_spec", "attribute_instance", "attr_spec", "attr_name", "arrayed_identifier",
        "block_identifier", "cell_identifier", "config_identifier", "escaped_arrayed_identifier",
        "escaped_hierarchical_identifier", "event_identifier", "function_identifier",
        "gate_instance_identifier", "generate_block_identifier", "genvar_function_identifier",
        "genvar_identifier", "hierarchical_block_identifier", "hierarchical_event_identifier",
        "hierarchical_function_identifier", "hierarchical_identifier", "hierarchical_net_identifier",
        "hierarchical_variable_identifier", "hierarchical_task_identifier", "identifier",
        "inout_port_identifier", "input_port_identifier", "instance_identifier",
        "library_identifier", "memory_identifier", "module_identifier", "module_instance_identifier",
        "net_identifier", "output_port_identifier", "parameter_identifier", "port_identifier",
        "real_identifier", "simple_arrayed_identifier", "simple_hierarchical_identifier",
        "specparam_identifier", "system_function_identifier", "system_task_identifier",
        "task_identifier", "terminal_identifier", "text_macro_identifier", "topmodule_identifier",
        "udp_identifier", "udp_instance_identifier", "variable_identifier", "simple_hierarchical_branch",
        "escaped_hierarchical_branch",
    ];
    Verilog2001Parser._LITERAL_NAMES = [
        undefined, "'config'", "';'", "'endconfig'", "'design'", "'.'", "'default'",
        "'instance'", "'liblist'", "'cell'", "'use'", "':config'", "'endmodule'",
        "'module'", "'macromodule'", "'#'", "'('", "','", "')'", "'{'", "'}'",
        "'['", "']'", "'defparam'", "'localparam'", "'signed'", "'integer'", "'real'",
        "'realtime'", "'time'", "'parameter'", "'specparam'", "'inout'", "'input'",
        "'output'", "'reg'", "'event'", "'genvar'", "'trireg'", "'vectored'",
        "'scalared'", "'supply0'", "'supply1'", "'tri'", "'triand'", "'trior'",
        "'tri0'", "'tri1'", "'wire'", "'wand'", "'wor'", "'='", "'highz1'", "'highz0'",
        "'strong0'", "'pull0'", "'weak0'", "'strong1'", "'pull1'", "'weak1'",
        "'small'", "'medium'", "'large'", "'PATHPULSE$'", "'$'", "':'", "'function'",
        "'automatic'", "'endfunction'", "'task'", "'endtask'", "'pulldown'", "'pullup'",
        "'cmos'", "'rcmos'", "'bufif0'", "'bufif1'", "'notif0'", "'notif1'", "'nmos'",
        "'pmos'", "'rnmos'", "'rpmos'", "'and'", "'nand'", "'or'", "'nor'", "'xor'",
        "'xnor'", "'buf'", "'not'", "'tranif0'", "'tranif1'", "'rtranif1'", "'rtranif0'",
        "'tran'", "'rtran'", "'generate'", "'endgenerate'", "'if'", "'else'",
        "'case'", "'endcase'", "'for'", "'begin'", "'end'", "'assign'", "'initial'",
        "'always'", "'<='", "'deassign'", "'force'", "'release'", "'fork'", "'join'",
        "'repeat'", "'disable'", "'@'", "'*'", "'->'", "'posedge'", "'negedge'",
        "'wait'", "'casez'", "'casex'", "'forever'", "'while'", "'specify'", "'endspecify'",
        "'pulsestyle_onevent'", "'pulsestyle_ondetect'", "'showcancelled'", "'noshowcancelled'",
        "'=>'", "'*>'", "'ifnone'", "'+'", "'-'", "'+:'", "'-:'", "'?'", "'!'",
        "'~'", "'&'", "'~&'", "'|'", "'~|'", "'^'", "'~^'", "'^~'", "'/'", "'%'",
        "'=='", "'!='", "'==='", "'!=='", "'&&'", "'||'", "'**'", "'<'", "'>'",
        "'>='", "'>>'", "'<<'", "'>>>'", "'<<<'", "'`timescale'",
    ];
    Verilog2001Parser._SYMBOLIC_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, "Real_number",
        "Decimal_number", "Binary_number", "Octal_number", "Hex_number", "String",
        "One_line_comment", "Block_comment", "Escaped_identifier", "Simple_identifier",
        "Dollar_Identifier", "Time_Identifier", "White_space",
    ];
    Verilog2001Parser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(Verilog2001Parser._LITERAL_NAMES, Verilog2001Parser._SYMBOLIC_NAMES, []);
    Verilog2001Parser._serializedATNSegments = 8;
    Verilog2001Parser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\xB5\u0F98\x04" +
        "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
        "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
        "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
        "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
        "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
        "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
        "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
        "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
        "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
        "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
        "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
        "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
        "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
        "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
        "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
        "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
        "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
        "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
        "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
        "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
        "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
        "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
        "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
        "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
        "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
        "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
        "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
        "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
        "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
        "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
        "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
        "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
        "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
        "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
        "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
        "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
        "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
        "\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
        "\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
        "\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
        "\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
        "\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
        "\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
        "\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
        "\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
        "\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
        "\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
        "\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
        "\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
        "\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
        "\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
        "\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
        "\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
        "\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
        "\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
        "\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x03" +
        "\x02\x03\x02\x03\x02\x03\x02\x03\x02\x07\x02\u0272\n\x02\f\x02\x0E\x02" +
        "\u0275\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\u027D" +
        "\n\x03\x03\x03\x07\x03\u0280\n\x03\f\x03\x0E\x03\u0283\v\x03\x03\x03\x03" +
        "\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u0296\n\x04" +
        "\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x07\x07" +
        "\u02A0\n\x07\f\x07\x0E\x07\u02A3\v\x07\x03\b\x03\b\x07\b\u02A7\n\b\f\b" +
        "\x0E\b\u02AA\v\b\x03\t\x03\t\x03\t\x03\t\x05\t\u02B0\n\t\x03\t\x03\t\x03" +
        "\n\x03\n\x03\n\x03\n\x05\n\u02B8\n\n\x03\n\x03\n\x05\n\u02BC\n\n\x03\v" +
        "\x05\v\u02BF\n\v\x03\v\x07\v\u02C2\n\v\f\v\x0E\v\u02C5\v\v\x03\v\x03\v" +
        "\x03\f\x03\f\x03\r\x07\r\u02CC\n\r\f\r\x0E\r\u02CF\v\r\x03\r\x03\r\x03" +
        "\r\x05\r\u02D4\n\r\x03\r\x05\r\u02D7\n\r\x03\r\x03\r\x07\r\u02DB\n\r\f" +
        "\r\x0E\r\u02DE\v\r\x03\r\x03\r\x03\r\x07\r\u02E3\n\r\f\r\x0E\r\u02E6\v" +
        "\r\x03\r\x03\r\x03\r\x05\r\u02EB\n\r\x03\r\x05\r\u02EE\n\r\x03\r\x03\r" +
        "\x07\r\u02F2\n\r\f\r\x0E\r\u02F5\v\r\x03\r\x03\r\x05\r\u02F9\n\r\x03\x0E" +
        "\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u0302\n\x0F\f" +
        "\x0F\x0E\x0F\u0305\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10" +
        "\x07\x10\u030D\n\x10\f\x10\x0E\x10\u0310\v\x10\x03\x10\x03\x10\x03\x11" +
        "\x03\x11\x03\x11\x03\x11\x07\x11\u0318\n\x11\f\x11\x0E\x11\u031B\v\x11" +
        "\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u0321\n\x11\x03\x12\x05\x12\u0324" +
        "\n\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u032A\n\x12\x03\x12\x03" +
        "\x12\x05\x12\u032E\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13" +
        "\u0335\n\x13\f\x13\x0E\x13\u0338\v\x13\x03\x13\x03\x13\x05\x13\u033C\n" +
        "\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
        "\x14\x03\x14\x03\x14\x05\x14\u0349\n\x14\x03\x15\x07\x15\u034C\n\x15\f" +
        "\x15\x0E\x15\u034F\v\x15\x03\x15\x03\x15\x07\x15\u0353\n\x15\f\x15\x0E" +
        "\x15\u0356\v\x15\x03\x15\x03\x15\x07\x15\u035A\n\x15\f\x15\x0E\x15\u035D" +
        "\v\x15\x03\x15\x05\x15\u0360\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
        "\x16\x07\x16\u0367\n\x16\f\x16\x0E\x16\u036A\v\x16\x03\x16\x03\x16\x07" +
        "\x16\u036E\n\x16\f\x16\x0E\x16\u0371\v\x16\x03\x16\x03\x16\x07\x16\u0375" +
        "\n\x16\f\x16\x0E\x16\u0378\v\x16\x03\x16\x03\x16\x07\x16\u037C\n\x16\f" +
        "\x16\x0E\x16\u037F\v\x16\x03\x16\x03\x16\x07\x16\u0383\n\x16\f\x16\x0E" +
        "\x16\u0386\v\x16\x03\x16\x05\x16\u0389\n\x16\x03\x17\x07\x17\u038C\n\x17" +
        "\f\x17\x0E\x17\u038F\v\x17\x03\x17\x03\x17\x07\x17\u0393\n\x17\f\x17\x0E" +
        "\x17\u0396\v\x17\x03\x17\x03\x17\x07\x17\u039A\n\x17\f\x17\x0E\x17\u039D" +
        "\v\x17\x03\x17\x03\x17\x07\x17\u03A1\n\x17\f\x17\x0E\x17\u03A4\v\x17\x03" +
        "\x17\x03\x17\x07\x17\u03A8\n\x17\f\x17\x0E\x17\u03AB\v\x17\x03\x17\x03" +
        "\x17\x07\x17\u03AF\n\x17\f\x17\x0E\x17\u03B2\v\x17\x03\x17\x03\x17\x07" +
        "\x17\u03B6\n\x17\f\x17\x0E\x17\u03B9\v\x17\x03\x17\x05\x17\u03BC\n\x17" +
        "\x03\x18\x07\x18\u03BF\n\x18\f\x18\x0E\x18\u03C2\v\x18\x03\x18\x03\x18" +
        "\x07\x18\u03C6\n\x18\f\x18\x0E\x18\u03C9\v\x18\x03\x18\x03\x18\x07\x18" +
        "\u03CD\n\x18\f\x18\x0E\x18\u03D0\v\x18\x03\x18\x03\x18\x07\x18\u03D4\n" +
        "\x18\f\x18\x0E\x18\u03D7\v\x18\x03\x18\x03\x18\x07\x18\u03DB\n\x18\f\x18" +
        "\x0E\x18\u03DE\v\x18\x03\x18\x03\x18\x07\x18\u03E2\n\x18\f\x18\x0E\x18" +
        "\u03E5\v\x18\x03\x18\x05\x18\u03E8\n\x18\x03\x19\x03\x19\x03\x19\x03\x19" +
        "\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\u03F4\n\x19\x03" +
        "\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x05\x1B\u03FC\n\x1B\x03\x1B" +
        "\x05\x1B\u03FF\n\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
        "\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
        "\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0418" +
        "\n\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x05\x1D\u041F\n\x1D\x03" +
        "\x1D\x05\x1D\u0422\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
        "\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u0431" +
        "\n\x1D\x03\x1E\x03\x1E\x05\x1E\u0435\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
        "\x1F\x03\x1F\x05\x1F\u043C\n\x1F\x03\x1F\x05\x1F\u043F\n\x1F\x03\x1F\x05" +
        "\x1F\u0442\n\x1F\x03\x1F\x03\x1F\x03 \x03 \x05 \u0448\n \x03 \x05 \u044B" +
        "\n \x03 \x05 \u044E\n \x03 \x03 \x03!\x03!\x05!\u0454\n!\x03!\x05!\u0457" +
        "\n!\x03!\x05!\u045A\n!\x03!\x03!\x03!\x05!\u045F\n!\x03!\x05!\u0462\n" +
        "!\x03!\x05!\u0465\n!\x03!\x03!\x03!\x03!\x05!\u046B\n!\x03!\x05!\u046E" +
        "\n!\x03!\x03!\x03!\x05!\u0473\n!\x03!\x03!\x03!\x03!\x03!\x05!\u047A\n" +
        "!\x03\"\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03" +
        "%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03(\x03" +
        "(\x05(\u0496\n(\x03(\x05(\u0499\n(\x03(\x03(\x03(\x03)\x03)\x05)\u04A0" +
        "\n)\x03)\x05)\u04A3\n)\x03)\x03)\x03)\x03)\x03)\x05)\u04AA\n)\x03)\x05" +
        ")\u04AD\n)\x03)\x05)\u04B0\n)\x03)\x03)\x03)\x03)\x03)\x05)\u04B7\n)\x03" +
        ")\x05)\u04BA\n)\x03)\x05)\u04BD\n)\x03)\x03)\x03)\x03)\x03)\x05)\u04C4" +
        "\n)\x03)\x05)\u04C7\n)\x03)\x05)\u04CA\n)\x03)\x03)\x03)\x03)\x03)\x05" +
        ")\u04D1\n)\x03)\x05)\u04D4\n)\x03)\x05)\u04D7\n)\x03)\x03)\x05)\u04DB" +
        "\n)\x03)\x03)\x03)\x03)\x03)\x05)\u04E2\n)\x03)\x05)\u04E5\n)\x03)\x05" +
        ")\u04E8\n)\x03)\x03)\x05)\u04EC\n)\x03)\x03)\x03)\x03)\x03)\x05)\u04F3" +
        "\n)\x03)\x05)\u04F6\n)\x03)\x05)\u04F9\n)\x03)\x03)\x05)\u04FD\n)\x03" +
        ")\x03)\x03)\x03)\x03)\x05)\u0504\n)\x03)\x05)\u0507\n)\x03)\x03)\x05)" +
        "\u050B\n)\x03)\x03)\x03)\x05)\u0510\n)\x03*\x03*\x03+\x03+\x03,\x03,\x03" +
        ",\x05,\u0519\n,\x03,\x03,\x03,\x07,\u051E\n,\f,\x0E,\u0521\v,\x05,\u0523" +
        "\n,\x03-\x03-\x03-\x05-\u0528\n-\x03-\x03-\x03-\x07-\u052D\n-\f-\x0E-" +
        "\u0530\v-\x05-\u0532\n-\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03" +
        ".\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03" +
        ".\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x05.\u0558" +
        "\n.\x03/\x03/\x030\x030\x031\x031\x031\x031\x031\x031\x031\x031\x031\x05" +
        "1\u0567\n1\x032\x032\x032\x032\x032\x032\x032\x032\x032\x052\u0572\n2" +
        "\x052\u0574\n2\x032\x032\x052\u0578\n2\x033\x033\x033\x033\x033\x033\x03" +
        "3\x053\u0581\n3\x033\x033\x053\u0585\n3\x034\x034\x034\x034\x054\u058B" +
        "\n4\x035\x035\x035\x075\u0590\n5\f5\x0E5\u0593\v5\x055\u0595\n5\x035\x03" +
        "5\x035\x035\x075\u059B\n5\f5\x0E5\u059E\v5\x055\u05A0\n5\x075\u05A2\n" +
        "5\f5\x0E5\u05A5\v5\x036\x036\x036\x076\u05AA\n6\f6\x0E6\u05AD\v6\x056" +
        "\u05AF\n6\x036\x036\x036\x036\x076\u05B5\n6\f6\x0E6\u05B8\v6\x056\u05BA" +
        "\n6\x076\u05BC\n6\f6\x0E6\u05BF\v6\x037\x037\x037\x077\u05C4\n7\f7\x0E" +
        "7\u05C7\v7\x038\x038\x038\x078\u05CC\n8\f8\x0E8\u05CF\v8\x039\x039\x03" +
        "9\x079\u05D4\n9\f9\x0E9\u05D7\v9\x03:\x03:\x03:\x07:\u05DC\n:\f:\x0E:" +
        "\u05DF\v:\x03;\x03;\x03;\x07;\u05E4\n;\f;\x0E;\u05E7\v;\x03<\x03<\x03" +
        "<\x07<\u05EC\n<\f<\x0E<\u05EF\v<\x03=\x03=\x03=\x07=\u05F4\n=\f=\x0E=" +
        "\u05F7\v=\x03>\x03>\x03>\x05>\u05FC\n>\x03>\x03>\x03>\x03>\x05>\u0602" +
        "\n>\x07>\u0604\n>\f>\x0E>\u0607\v>\x03?\x03?\x03?\x03?\x03@\x03@\x03@" +
        "\x03@\x03A\x03A\x03A\x03A\x03A\x05A\u0616\nA\x03B\x03B\x03B\x03B\x03B" +
        "\x03B\x05B\u061E\nB\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03B" +
        "\x03B\x03B\x05B\u062C\nB\x03B\x03B\x03B\x05B\u0631\nB\x03C\x03C\x03D\x03" +
        "D\x03E\x03E\x03F\x03F\x03F\x03F\x03F\x03F\x03G\x03G\x03G\x03G\x03G\x03" +
        "G\x03H\x03H\x05H\u0647\nH\x03H\x05H\u064A\nH\x03H\x05H\u064D\nH\x03H\x03" +
        "H\x03H\x07H\u0652\nH\fH\x0EH\u0655\vH\x03H\x05H\u0658\nH\x03H\x03H\x03" +
        "H\x03H\x05H\u065E\nH\x03H\x05H\u0661\nH\x03H\x05H\u0664\nH\x03H\x03H\x03" +
        "H\x03H\x03H\x03H\x07H\u066C\nH\fH\x0EH\u066F\vH\x03H\x05H\u0672\nH\x03" +
        "H\x03H\x05H\u0676\nH\x03I\x03I\x03I\x03I\x05I\u067C\nI\x03J\x03J\x03J" +
        "\x07J\u0681\nJ\fJ\x0EJ\u0684\vJ\x03K\x07K\u0687\nK\fK\x0EK\u068A\vK\x03" +
        "K\x03K\x03L\x03L\x03L\x03L\x03L\x05L\u0693\nL\x03M\x03M\x05M\u0697\nM" +
        "\x03M\x03M\x03M\x07M\u069C\nM\fM\x0EM\u069F\vM\x03M\x03M\x03M\x03M\x03" +
        "M\x05M\u06A6\nM\x03M\x03M\x03M\x05M\u06AB\nM\x03M\x03M\x03M\x07M\u06B0" +
        "\nM\fM\x0EM\u06B3\vM\x03M\x03M\x03M\x05M\u06B8\nM\x03N\x03N\x07N\u06BC" +
        "\nN\fN\x0EN\u06BF\vN\x03N\x03N\x03N\x05N\u06C4\nN\x03O\x03O\x03O\x07O" +
        "\u06C9\nO\fO\x0EO\u06CC\vO\x03P\x07P\u06CF\nP\fP\x0EP\u06D2\vP\x03P\x03" +
        "P\x03Q\x03Q\x05Q\u06D8\nQ\x03Q\x05Q\u06DB\nQ\x03Q\x05Q\u06DE\nQ\x03Q\x05" +
        "Q\u06E1\nQ\x03Q\x03Q\x05Q\u06E5\nQ\x03Q\x05Q\u06E8\nQ\x05Q\u06EA\nQ\x03" +
        "R\x03R\x03R\x03S\x03S\x03T\x07T\u06F2\nT\fT\x0ET\u06F5\vT\x03T\x03T\x07" +
        "T\u06F9\nT\fT\x0ET\u06FC\vT\x03T\x03T\x07T\u0700\nT\fT\x0ET\u0703\vT\x03" +
        "T\x03T\x07T\u0707\nT\fT\x0ET\u070A\vT\x03T\x03T\x07T\u070E\nT\fT\x0ET" +
        "\u0711\vT\x03T\x03T\x07T\u0715\nT\fT\x0ET\u0718\vT\x03T\x03T\x07T\u071C" +
        "\nT\fT\x0ET\u071F\vT\x03T\x03T\x07T\u0723\nT\fT\x0ET\u0726\vT\x03T\x05" +
        "T\u0729\nT\x03U\x03U\x05U\u072D\nU\x03U\x05U\u0730\nU\x03U\x03U\x03U\x03" +
        "V\x03V\x03V\x07V\u0738\nV\fV\x0EV\u073B\vV\x03W\x03W\x03W\x03W\x07W\u0741" +
        "\nW\fW\x0EW\u0744\vW\x05W\u0746\nW\x03X\x03X\x05X\u074A\nX\x03X\x03X\x03" +
        "X\x07X\u074F\nX\fX\x0EX\u0752\vX\x03X\x03X\x03X\x03X\x05X\u0758\nX\x03" +
        "X\x03X\x03X\x07X\u075D\nX\fX\x0EX\u0760\vX\x03X\x03X\x03X\x03X\x03X\x03" +
        "X\x07X\u0768\nX\fX\x0EX\u076B\vX\x03X\x03X\x03X\x03X\x05X\u0771\nX\x03" +
        "X\x03X\x03X\x07X\u0776\nX\fX\x0EX\u0779\vX\x03X\x03X\x03X\x03X\x05X\u077F" +
        "\nX\x03X\x03X\x03X\x07X\u0784\nX\fX\x0EX\u0787\vX\x03X\x03X\x03X\x03X" +
        "\x05X\u078D\nX\x03X\x05X\u0790\nX\x03X\x03X\x03X\x07X\u0795\nX\fX\x0E" +
        "X\u0798\vX\x03X\x03X\x03X\x03X\x05X\u079E\nX\x03X\x05X\u07A1\nX\x03X\x03" +
        "X\x03X\x07X\u07A6\nX\fX\x0EX\u07A9\vX\x03X\x03X\x03X\x03X\x05X\u07AF\n" +
        "X\x03X\x05X\u07B2\nX\x03X\x03X\x03X\x07X\u07B7\nX\fX\x0EX\u07BA\vX\x03" +
        "X\x03X\x03X\x03X\x05X\u07C0\nX\x03X\x03X\x03X\x07X\u07C5\nX\fX\x0EX\u07C8" +
        "\vX\x03X\x03X\x05X\u07CC\nX\x03Y\x05Y\u07CF\nY\x03Y\x03Y\x03Y\x03Y\x03" +
        "Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Z\x05Z\u07DC\nZ\x03Z\x03Z\x03Z\x03Z\x03" +
        "Z\x03Z\x03Z\x03Z\x03[\x05[\u07E7\n[\x03[\x03[\x03[\x03[\x03[\x03[\x03" +
        "[\x03[\x03\\\x05\\\u07F2\n\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x07\\" +
        "\u07FA\n\\\f\\\x0E\\\u07FD\v\\\x03\\\x03\\\x03]\x05]\u0802\n]\x03]\x03" +
        "]\x03]\x03]\x07]\u0808\n]\f]\x0E]\u080B\v]\x03]\x03]\x03]\x03]\x03^\x05" +
        "^\u0812\n^\x03^\x03^\x03^\x03^\x03^\x03^\x03_\x05_\u081B\n_\x03_\x03_" +
        "\x03_\x03_\x03_\x03_\x03_\x03_\x03`\x05`\u0826\n`\x03`\x03`\x03`\x03`" +
        "\x03a\x03a\x05a\u082E\na\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b" +
        "\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x05b\u0840\nb\x03c\x03c\x03c\x03c" +
        "\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x05c\u0852" +
        "\nc\x03d\x03d\x03e\x03e\x03f\x03f\x03g\x03g\x03h\x03h\x03i\x03i\x03j\x03" +
        "j\x03k\x03k\x03l\x03l\x03m\x03m\x03n\x03n\x03o\x03o\x03p\x03p\x03q\x03" +
        "q\x05q\u0870\nq\x03q\x03q\x03q\x07q\u0875\nq\fq\x0Eq\u0878\vq\x03q\x03" +
        "q\x03r\x03r\x03r\x03r\x03r\x03s\x03s\x03s\x07s\u0884\ns\fs\x0Es\u0887" +
        "\vs\x03s\x03s\x03s\x07s\u088C\ns\fs\x0Es\u088F\vs\x05s\u0891\ns\x03t\x03" +
        "t\x03u\x03u\x03u\x03u\x05u\u0899\nu\x03u\x03u\x03v\x03v\x03v\x03v\x03" +
        "v\x03w\x03w\x05w\u08A4\nw\x03x\x03x\x03x\x07x\u08A9\nx\fx\x0Ex\u08AC\v" +
        "x\x03x\x03x\x03x\x07x\u08B1\nx\fx\x0Ex\u08B4\vx\x05x\u08B6\nx\x03y\x07" +
        "y\u08B9\ny\fy\x0Ey\u08BC\vy\x03y\x05y\u08BF\ny\x03z\x07z\u08C2\nz\fz\x0E" +
        "z\u08C5\vz\x03z\x03z\x03z\x03z\x05z\u08CB\nz\x03z\x03z\x03{\x03{\x07{" +
        "\u08D1\n{\f{\x0E{\u08D4\v{\x03{\x03{\x03|\x03|\x05|\u08DA\n|\x03}\x03" +
        "}\x03}\x03}\x03}\x05}\u08E1\n}\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x05" +
        "~\u08EA\n~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x07\x7F\u08F2" +
        "\n\x7F\f\x7F\x0E\x7F\u08F5\v\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x03\x80" +
        "\x07\x80\u08FC\n\x80\f\x80\x0E\x80\u08FF\v\x80\x03\x80\x03\x80\x03\x80" +
        "\x03\x80\x03\x80\x05\x80\u0906\n\x80\x03\x80\x05\x80\u0909\n\x80\x03\x81" +
        "\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81" +
        "\x03\x82\x03\x82\x03\x82";
    Verilog2001Parser._serializedATNSegment1 = "\x03\x82\x03\x83\x03\x83\x03\x83\x05\x83\u091C\n\x83\x03\x83\x07\x83\u091F" +
        "\n\x83\f\x83\x0E\x83\u0922\v\x83\x03\x83\x03\x83\x03\x84\x03\x84\x05\x84" +
        "\u0928\n\x84\x03\x84\x05\x84\u092B\n\x84\x03\x84\x03\x84\x03\x84\x03\x85" +
        "\x03\x85\x03\x85\x07\x85\u0933\n\x85\f\x85\x0E\x85\u0936\v\x85\x03\x86" +
        "\x03\x86\x03\x86\x03\x86\x03\x87\x03\x87\x03\x87\x03\x88\x03\x88\x03\x88" +
        "\x03\x89\x03\x89\x03\x89\x05\x89\u0945\n\x89\x03\x89\x03\x89\x03\x8A\x03" +
        "\x8A\x03\x8A\x05\x8A\u094C\n\x8A\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8B" +
        "\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
        "\x05\x8B\u095C\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x07" +
        "\x8D\u0964\n\x8D\f\x8D\x0E\x8D\u0967\v\x8D\x03\x8D\x05\x8D\u096A\n\x8D" +
        "\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x07\x8E\u0970\n\x8E\f\x8E\x0E\x8E\u0973" +
        "\v\x8E\x05\x8E\u0975\n\x8E\x03\x8E\x07\x8E\u0978\n\x8E\f\x8E\x0E\x8E\u097B" +
        "\v\x8E\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x90\x03\x90" +
        "\x03\x90\x03\x90\x07\x90\u0987\n\x90\f\x90\x0E\x90\u098A\v\x90\x05\x90" +
        "\u098C\n\x90\x03\x90\x07\x90\u098F\n\x90\f\x90\x0E\x90\u0992\v\x90\x03" +
        "\x90\x03\x90\x03\x91\x03\x91\x03\x91\x03\x91\x07\x91\u099A\n\x91\f\x91" +
        "\x0E\x91\u099D\v\x91\x05\x91\u099F\n\x91\x03\x91\x07\x91\u09A2\n\x91\f" +
        "\x91\x0E\x91\u09A5\v\x91\x03\x91\x03\x91\x03\x92\x07\x92\u09AA\n\x92\f" +
        "\x92\x0E\x92\u09AD\v\x92\x03\x92\x03\x92\x03\x92\x03\x92\x07\x92\u09B3" +
        "\n\x92\f\x92\x0E\x92\u09B6\v\x92\x03\x92\x03\x92\x07\x92\u09BA\n\x92\f" +
        "\x92\x0E\x92\u09BD\v\x92\x03\x92\x03\x92\x07\x92\u09C1\n\x92\f\x92\x0E" +
        "\x92\u09C4\v\x92\x03\x92\x03\x92\x07\x92\u09C8\n\x92\f\x92\x0E\x92\u09CB" +
        "\v\x92\x03\x92\x03\x92\x07\x92\u09CF\n\x92\f\x92\x0E\x92\u09D2\v\x92\x03" +
        "\x92\x03\x92\x07\x92\u09D6\n\x92\f\x92\x0E\x92\u09D9\v\x92\x03\x92\x03" +
        "\x92\x03\x92\x03\x92\x07\x92\u09DF\n\x92\f\x92\x0E\x92\u09E2\v\x92\x03" +
        "\x92\x03\x92\x07\x92\u09E6\n\x92\f\x92\x0E\x92\u09E9\v\x92\x03\x92\x03" +
        "\x92\x03\x92\x03\x92\x07\x92\u09EF\n\x92\f\x92\x0E\x92\u09F2\v\x92\x03" +
        "\x92\x03\x92\x07\x92\u09F6\n\x92\f\x92\x0E\x92\u09F9\v\x92\x03\x92\x03" +
        "\x92\x07\x92\u09FD\n\x92\f\x92\x0E\x92\u0A00\v\x92\x03\x92\x03\x92\x07" +
        "\x92\u0A04\n\x92\f\x92\x0E\x92\u0A07\v\x92\x03\x92\x03\x92\x07\x92\u0A0B" +
        "\n\x92\f\x92\x0E\x92\u0A0E\v\x92\x03\x92\x05\x92\u0A11\n\x92\x03\x93\x03" +
        "\x93\x07\x93\u0A15\n\x93\f\x93\x0E\x93\u0A18\v\x93\x03\x93\x05\x93\u0A1B" +
        "\n\x93\x03\x94\x07\x94\u0A1E\n\x94\f\x94\x0E\x94\u0A21\v\x94\x03\x94\x03" +
        "\x94\x03\x94\x03\x94\x07\x94\u0A27\n\x94\f\x94\x0E\x94\u0A2A\v\x94\x03" +
        "\x94\x03\x94\x07\x94\u0A2E\n\x94\f\x94\x0E\x94\u0A31\v\x94\x03\x94\x03" +
        "\x94\x07\x94\u0A35\n\x94\f\x94\x0E\x94\u0A38\v\x94\x03\x94\x03\x94\x07" +
        "\x94\u0A3C\n\x94\f\x94\x0E\x94\u0A3F\v\x94\x03\x94\x03\x94\x07\x94\u0A43" +
        "\n\x94\f\x94\x0E\x94\u0A46\v\x94\x03\x94\x03\x94\x07\x94\u0A4A\n\x94\f" +
        "\x94\x0E\x94\u0A4D\v\x94\x03\x94\x05\x94\u0A50\n\x94\x03\x95\x03\x95\x03" +
        "\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0A5A\n\x95\x03\x96" +
        "\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0A63\n\x96\x03" +
        "\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x05\x97\u0A6D" +
        "\n\x97\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98" +
        "\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x05\x98\u0A7C\n\x98\x03\x99\x03" +
        "\x99\x03\x99\x03\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u0A87" +
        "\n\x9A\f\x9A\x0E\x9A\u0A8A\v\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B" +
        "\x05\x9B\u0A91\n\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9D\x03" +
        "\x9D\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03" +
        "\x9E\x05\x9E\u0AA3\n\x9E\x03\x9E\x05\x9E\u0AA6\n\x9E\x03\x9F\x03\x9F\x03" +
        "\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03" +
        "\x9F\x07\x9F\u0AB4\n\x9F\f\x9F\x0E\x9F\u0AB7\v\x9F\x03\x9F\x03\x9F\x05" +
        "\x9F\u0ABB\n\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0" +
        "\x05\xA0\u0AC4\n\xA0\x03\xA0\x05\xA0\u0AC7\n\xA0\x03\xA1\x03\xA1\x03\xA1" +
        "\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1" +
        "\x07\xA1\u0AD5\n\xA1\f\xA1\x0E\xA1\u0AD8\v\xA1\x03\xA1\x03\xA1\x05\xA1" +
        "\u0ADC\n\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0AE4" +
        "\n\xA2\f\xA2\x0E\xA2\u0AE7\v\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
        "\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0AF1\n\xA2\f\xA2\x0E\xA2\u0AF4\v\xA2" +
        "\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2" +
        "\u0AFE\n\xA2\f\xA2\x0E\xA2\u0B01\v\xA2\x03\xA2\x03\xA2\x05\xA2\u0B05\n" +
        "\xA2\x03\xA3\x03\xA3\x03\xA3\x07\xA3\u0B0A\n\xA3\f\xA3\x0E\xA3\u0B0D\v" +
        "\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0B14\n\xA3\x03\xA3" +
        "\x05\xA3\u0B17\n\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x07" +
        "\xA4\u0B1F\n\xA4\f\xA4\x0E\xA4\u0B22\v\xA4\x03\xA4\x03\xA4\x03\xA4\x03" +
        "\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x07\xA4\u0B2C\n\xA4\f\xA4\x0E\xA4" +
        "\u0B2F\v\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03" +
        "\xA4\x07\xA4\u0B39\n\xA4\f\xA4\x0E\xA4\u0B3C\v\xA4\x03\xA4\x03\xA4\x05" +
        "\xA4\u0B40\n\xA4\x03\xA5\x03\xA5\x03\xA5\x07\xA5\u0B45\n\xA5\f\xA5\x0E" +
        "\xA5\u0B48\v\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0B4F" +
        "\n\xA5\x03\xA5\x05\xA5\u0B52\n\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03" +
        "\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03" +
        "\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03" +
        "\xA6\x03\xA6\x05\xA6\u0B6C\n\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
        "\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
        "\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
        "\x03\xA7\x05\xA7\u0B86\n\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x07" +
        "\xA8\u0B8D\n\xA8\f\xA8\x0E\xA8\u0B90\v\xA8\x05\xA8\u0B92\n\xA8\x03\xA8" +
        "\x05\xA8\u0B95\n\xA8\x03\xA8\x03\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03" +
        "\xA9\x07\xA9\u0B9E\n\xA9\f\xA9\x0E\xA9\u0BA1\v\xA9\x05\xA9\u0BA3\n\xA9" +
        "\x03\xA9\x05\xA9\u0BA6\n\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x07\xAA\u0BAC" +
        "\n\xAA\f\xAA\x0E\xAA\u0BAF\v\xAA\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAB" +
        "\x03\xAB\x05\xAB\u0BB7\n\xAB\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03" +
        "\xAC\x03\xAC\x03\xAC\x05\xAC\u0BC1\n\xAC\x03\xAD\x03\xAD\x03\xAD\x03\xAD" +
        "\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0BCB\n\xAD\x03\xAE\x03\xAE\x03" +
        "\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u0BD6\n\xAE" +
        "\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF" +
        "\u0BE0\n\xAF\x03\xB0\x03\xB0\x05\xB0\u0BE4\n\xB0\x03\xB0\x03\xB0\x03\xB0" +
        "\x03\xB1\x03\xB1\x03\xB1\x05\xB1\u0BEC\n\xB1\x03\xB1\x03\xB1\x03\xB1\x03" +
        "\xB1\x03\xB2\x03\xB2\x03\xB2\x07\xB2\u0BF5\n\xB2\f\xB2\x0E\xB2\u0BF8\v" +
        "\xB2\x03\xB3\x03\xB3\x03\xB3\x07\xB3\u0BFD\n\xB3\f\xB3\x0E\xB3\u0C00\v" +
        "\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03" +
        "\xB4\x03\xB4\x03\xB4\x05\xB4\u0C0D\n\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5" +
        "\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0C1A" +
        "\n\xB5\x03\xB6\x03\xB6\x05\xB6\u0C1E\n\xB6\x03\xB7\x03\xB7\x05\xB7\u0C22" +
        "\n\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u0C29\n\xB8\x03" +
        "\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03" +
        "\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03" +
        "\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03" +
        "\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03" +
        "\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03" +
        "\xB9\x03\xB9\x05\xB9\u0C5A\n\xB9\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03\xBC" +
        "\x03\xBC\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBF\x03\xBF\x03\xC0\x03\xC0" +
        "\x03\xC1\x03\xC1\x03\xC2\x03\xC2\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x03\xC5" +
        "\x03\xC5\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03\xC9\x03\xC9" +
        "\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
        "\x03\xCB\x05\xCB\u0C86\n\xCB\x03\xCC\x03\xCC\x05\xCC\u0C8A\n\xCC\x03\xCC" +
        "\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u0C90\n\xCC\x03\xCC\x03\xCC\x03\xCC\x03" +
        "\xCC\x03\xCD\x03\xCD\x05\xCD\u0C98\n\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
        "\x05\xCD\u0C9E\n\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCE\x03\xCE\x03" +
        "\xCF\x03\xCF\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03" +
        "\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x05\xD0\u0CB6\n\xD0" +
        "\x03\xD1\x03\xD1\x03\xD2\x03\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3" +
        "\x03\xD3\x05\xD3\u0CC2\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03" +
        "\xD4\x05\xD4\u0CCA\n\xD4\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x03\xD7\x03\xD7" +
        "\x03\xD8\x03\xD8\x03\xD9\x03\xD9\x03\xDA\x03\xDA\x03\xDB\x03\xDB\x03\xDC" +
        "\x03\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u0CE0\n\xDD\f\xDD\x0E" +
        "\xDD\u0CE3\v\xDD\x03\xDD\x03\xDD\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x07\xDE" +
        "\u0CEB\n\xDE\f\xDE\x0E\xDE\u0CEE\v\xDE\x03\xDE\x03\xDE\x03\xDF\x03\xDF" +
        "\x03\xDF\x03\xDF\x03\xDF\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x07\xE0\u0CFB" +
        "\n\xE0\f\xE0\x0E\xE0\u0CFE\v\xE0\x03\xE0\x03\xE0\x03\xE1\x03\xE1\x03\xE1" +
        "\x03\xE1\x03\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE3\x03\xE3" +
        "\x03\xE3\x03\xE3\x07\xE3\u0D10\n\xE3\f\xE3\x0E\xE3\u0D13\v\xE3\x03\xE3" +
        "\x03\xE3\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4" +
        "\x03\xE4\x07\xE4\u0D20\n\xE4\f\xE4\x0E\xE4\u0D23\v\xE4\x03\xE4\x03\xE4" +
        "\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x07\xE4\u0D2D\n\xE4\f" +
        "\xE4\x0E\xE4\u0D30\v\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4" +
        "\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x05\xE4\u0D3C\n\xE4\x03\xE5\x03\xE5\x03" +
        "\xE5\x03\xE5\x07\xE5\u0D42\n\xE5\f\xE5\x0E\xE5\u0D45\v\xE5\x03\xE5\x03" +
        "\xE5\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
        "\xE6\x07\xE6\u0D52\n\xE6\f\xE6\x0E\xE6\u0D55\v\xE6\x03\xE6\x03\xE6\x03" +
        "\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x07\xE6\u0D5F\n\xE6\f\xE6" +
        "\x0E\xE6\u0D62\v\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
        "\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u0D6E\n\xE6\x03\xE7\x03\xE7\x07\xE7" +
        "\u0D72\n\xE7\f\xE7\x0E\xE7\u0D75\v\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7" +
        "\x07\xE7\u0D7B\n\xE7\f\xE7\x0E\xE7\u0D7E\v\xE7\x05\xE7\u0D80\n\xE7\x03" +
        "\xE7\x03\xE7\x03\xE8\x03\xE8\x07\xE8\u0D86\n\xE8\f\xE8\x0E\xE8\u0D89\v" +
        "\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x07\xE8\u0D8F\n\xE8\f\xE8\x0E\xE8" +
        "\u0D92\v\xE8\x05\xE8\u0D94\n\xE8\x03\xE8\x03\xE8\x03\xE9\x03\xE9\x03\xE9" +
        "\x03\xE9\x07\xE9\u0D9C\n\xE9\f\xE9\x0E\xE9\u0D9F\v\xE9\x05\xE9\u0DA1\n" +
        "\xE9\x03\xEA\x03\xEA\x07\xEA\u0DA5\n\xEA\f\xEA\x0E\xEA\u0DA8\v\xEA\x03" +
        "\xEA\x03\xEA\x03\xEA\x03\xEA\x07\xEA\u0DAE\n\xEA\f\xEA\x0E\xEA\u0DB1\v" +
        "\xEA\x05\xEA\u0DB3\n\xEA\x03\xEA\x03\xEA\x03\xEB\x03\xEB\x03\xEC\x03\xEC" +
        "\x03\xED\x03\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE" +
        "\x05\xEE\u0DC4\n\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03" +
        "\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u0DD3\n\xEF" +
        "\x03\xF0\x03\xF0\x03\xF1\x03\xF1\x03\xF1\x07\xF1\u0DDA\n\xF1\f\xF1\x0E" +
        "\xF1\u0DDD\v\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x07\xF1\u0DE3\n\xF1\f" +
        "\xF1\x0E\xF1\u0DE6\v\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x07\xF1\u0DEC" +
        "\n\xF1\f\xF1\x0E\xF1\u0DEF\v\xF1\x03\xF2\x03\xF2\x07\xF2\u0DF3\n\xF2\f" +
        "\xF2\x0E\xF2\u0DF6\v\xF2\x03\xF2\x03\xF2\x03\xF2\x03\xF2\x05\xF2\u0DFC" +
        "\n\xF2\x03\xF3\x03\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4" +
        "\x05\xF4\u0E06\n\xF4\x03\xF5\x03\xF5\x03\xF5\x07\xF5\u0E0B\n\xF5\f\xF5" +
        "\x0E\xF5\u0E0E\v\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03" +
        "\xF6\x07\xF6\u0E17\n\xF6\f\xF6\x0E\xF6\u0E1A\v\xF6\x03\xF6\x03\xF6\x05" +
        "\xF6\u0E1E\n\xF6\x03\xF6\x03\xF6\x07\xF6\u0E22\n\xF6\f\xF6\x0E\xF6\u0E25" +
        "\v\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x07\xF6\u0E2B\n\xF6\f\xF6\x0E\xF6" +
        "\u0E2E\v\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x07\xF6\u0E34\n\xF6\f\xF6" +
        "\x0E\xF6\u0E37\v\xF6\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x05" +
        "\xF7\u0E3F\n\xF7\x03\xF8\x03\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9" +
        "\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x05\xF9" +
        "\u0E50\n\xF9\x03\xFA\x03\xFA\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03" +
        "\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u0E5F\n\xFB\x03\xFC" +
        "\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x03\xFC" +
        "\x03\xFC\x05\xFC\u0E6C\n\xFC\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03" +
        "\xFD\x03\xFD\x06\xFD\u0E75\n\xFD\r\xFD\x0E\xFD\u0E76\x03\xFD\x03\xFD\x03" +
        "\xFD\x03\xFD\x03\xFD\x06\xFD\u0E7E\n\xFD\r\xFD\x0E\xFD\u0E7F\x03\xFD\x03" +
        "\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03" +
        "\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u0E94" +
        "\n\xFD\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE" +
        "\x03\xFE\x07\xFE\u0E9F\n\xFE\f\xFE\x0E\xFE\u0EA2\v\xFE\x03\xFE\x03\xFE" +
        "\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x07\xFE\u0EAC\n\xFE\f" +
        "\xFE\x0E\xFE\u0EAF\v\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE" +
        "\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x05\xFE\u0EBB\n\xFE\x03\xFF\x03\xFF\x03" +
        "\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x07\xFF\u0EC6\n\xFF" +
        "\f\xFF\x0E\xFF\u0EC9\v\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03" +
        "\xFF\x03\xFF\x03\xFF\x07\xFF\u0ED3\n\xFF\f\xFF\x0E\xFF\u0ED6\v\xFF\x03" +
        "\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03" +
        "\xFF\x05\xFF\u0EE2\n\xFF\x03\u0100\x03\u0100\x03\u0101\x03\u0101\x03\u0102" +
        "\x03\u0102\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0105\x03\u0105" +
        "\x03\u0105\x03\u0105\x03\u0105\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
        "\x03\u0106\x07\u0106\u0EF8\n\u0106\f\u0106\x0E\u0106\u0EFB\v\u0106\x03" +
        "\u0106\x03\u0106\x03\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03" +
        "\u0107\x05\u0107\u0F05\n\u0107\x03\u0108\x03\u0108\x03\u0109\x03\u0109" +
        "\x05\u0109\u0F0B\n\u0109\x03\u010A\x03\u010A\x03\u010B\x03\u010B\x03\u010C" +
        "\x03\u010C\x03\u010D\x03\u010D\x05\u010D\u0F15\n\u010D\x03\u010E\x03\u010E" +
        "\x03\u010E\x03\u010E\x03\u010E\x07\u010E\u0F1C\n\u010E\f\u010E\x0E\u010E" +
        "\u0F1F\v\u010E\x03\u010F\x03\u010F\x03\u0110\x03\u0110\x03\u0111\x03\u0111" +
        "\x03\u0112\x03\u0112\x03\u0113\x03\u0113\x03\u0114\x03\u0114\x03\u0115" +
        "\x03\u0115\x03\u0116\x03\u0116\x03\u0117\x03\u0117\x03\u0118\x03\u0118" +
        "\x05\u0118\u0F35\n\u0118\x03\u0119\x03\u0119\x03\u011A\x03\u011A\x03\u011B" +
        "\x03\u011B\x03\u011C\x03\u011C\x03\u011D\x03\u011D\x03\u011E\x03\u011E" +
        "\x03\u011F\x03\u011F\x03\u0120\x03\u0120\x03\u0121\x03\u0121\x03\u0122" +
        "\x03\u0122\x03\u0123\x03\u0123\x03\u0124\x03\u0124\x03\u0125\x03\u0125" +
        "\x03\u0126\x03\u0126\x03\u0127\x03\u0127\x03\u0128\x03\u0128\x03\u0129" +
        "\x03\u0129\x05\u0129\u0F59\n\u0129\x03\u012A\x03\u012A\x03\u012A\x05\u012A" +
        "\u0F5E\n\u012A\x03\u012B\x03\u012B\x03\u012C\x03\u012C\x03\u012D\x03\u012D" +
        "\x03\u012E\x03\u012E\x03\u012F\x03\u012F\x03\u0130\x03\u0130\x03\u0131" +
        "\x03\u0131\x03\u0132\x03\u0132\x03\u0133\x03\u0133\x03\u0134\x03\u0134" +
        "\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u0F78\n\u0135\x03\u0135" +
        "\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u0F7F\n\u0135\x07\u0135" +
        "\u0F81\n\u0135\f\u0135\x0E\u0135\u0F84\v\u0135\x03\u0136\x03\u0136\x03" +
        "\u0136\x03\u0136\x05\u0136\u0F8A\n\u0136\x03\u0136\x03\u0136\x03\u0136" +
        "\x03\u0136\x03\u0136\x05\u0136\u0F91\n\u0136\x07\u0136\u0F93\n\u0136\f" +
        "\u0136\x0E\u0136\u0F96\v\u0136\x03\u0136\x02\x02\x02\u0137\x02\x02\x04" +
        "\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02" +
        "\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02." +
        "\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02" +
        "J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02" +
        "f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80" +
        "\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92" +
        "\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4" +
        "\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6" +
        "\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8" +
        "\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA" +
        "\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC" +
        "\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE" +
        "\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
        "\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
        "\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
        "\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
        "\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
        "\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
        "\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
        "\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E" +
        "\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C" +
        "\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A" +
        "\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198" +
        "\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6" +
        "\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4" +
        "\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2" +
        "\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0" +
        "\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE" +
        "\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC" +
        "\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA" +
        "\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208" +
        "\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216" +
        "\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224" +
        "\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232" +
        "\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240" +
        "\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E" +
        "\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C" +
        "\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\u0268\x02\u026A" +
        "\x02\x02\x19\x03\x02\x0F\x10\x03\x02)*\x03\x02+4\x04\x02\x1C\x1C\x1F\x1F" +
        "\x04\x02++8:\x04\x02,,;=\x03\x02\"$\x03\x02\x1C\x1F\x03\x02KL\x03\x02" +
        "MP\x03\x02QT\x03\x02UZ\x03\x02[\\\x03\x02]`\x03\x02ab\x03\x02z{\x03\x02" +
        "\x8A\x8B\x04\x02\x8A\x8B\x8F\x97\b\x02ooxx\x8A\x8B\x91\x91\x93\x93\x95" +
        "\xA7\x03\x02\x8F\x97\x07\x02\x91\x91\x93\x93\x95\x97\x9A\x9B\x9E\x9F\x03" +
        "\x02\xA9\xAD\x03\x02\xB1\xB2\x02\u1099\x02\u026C\x03\x02\x02\x02\x04\u0278" +
        "\x03\x02\x02\x02\x06\u0295\x03\x02\x02\x02\b\u0297\x03\x02\x02\x02\n\u0299" +
        "\x03\x02\x02\x02\f\u029C\x03\x02\x02\x02\x0E\u02A4\x03\x02\x02\x02\x10" +
        "\u02AB\x03\x02\x02\x02\x12\u02B3\x03\x02\x02\x02\x14\u02BE\x03\x02\x02" +
        "\x02\x16\u02C8\x03\x02\x02\x02\x18\u02F8\x03\x02\x02\x02\x1A\u02FA\x03" +
        "\x02\x02\x02\x1C\u02FC\x03\x02\x02\x02\x1E\u0308\x03\x02\x02\x02 \u0320" +
        "\x03\x02\x02\x02\"\u032D\x03\x02\x02\x02$\u033B\x03\x02\x02\x02&\u0348" +
        "\x03\x02\x02\x02(\u035F\x03\x02\x02\x02*\u0388\x03\x02\x02\x02,\u03BB" +
        "\x03\x02\x02\x02.\u03E7\x03\x02\x02\x020\u03F3\x03\x02\x02\x022\u03F5" +
        "\x03\x02\x02\x024\u0417\x03\x02\x02\x026\u0419\x03\x02\x02\x028\u0430" +
        "\x03\x02\x02\x02:\u0432\x03\x02\x02\x02<\u0439\x03\x02\x02\x02>\u0445" +
        "\x03\x02\x02\x02@\u0479\x03\x02\x02\x02B\u047B\x03\x02\x02\x02D\u047F" +
        "\x03\x02\x02\x02F\u0483\x03\x02\x02\x02H\u0487\x03\x02\x02\x02J\u048B" +
        "\x03\x02\x02\x02L\u048F\x03\x02\x02\x02N\u0493\x03\x02\x02\x02P\u050F" +
        "\x03\x02\x02\x02R\u0511\x03\x02\x02\x02T\u0513\x03\x02\x02\x02V\u0522" +
        "\x03\x02\x02\x02X\u0531\x03\x02\x02\x02Z\u0557\x03\x02\x02\x02\\\u0559" +
        "\x03\x02\x02\x02^\u055B\x03\x02\x02\x02`\u0566\x03\x02\x02\x02b\u0577" +
        "\x03\x02\x02\x02d\u0584\x03\x02\x02\x02f\u058A\x03\x02\x02\x02h\u058C" +
        "\x03\x02\x02\x02j\u05A6\x03\x02\x02\x02l\u05C0\x03\x02\x02\x02n\u05C8" +
        "\x03\x02\x02\x02p\u05D0\x03\x02\x02\x02r\u05D8\x03\x02\x02\x02t\u05E0" +
        "\x03\x02\x02\x02v\u05E8\x03\x02\x02\x02x\u05F0\x03\x02\x02\x02z\u05F8" +
        "\x03\x02\x02\x02|\u0608\x03\x02\x02\x02~\u060C\x03\x02\x02\x02\x80\u0615" +
        "\x03\x02\x02\x02\x82\u0630\x03\x02\x02\x02\x84\u0632\x03\x02\x02\x02\x86" +
        "\u0634\x03\x02\x02\x02\x88\u0636\x03\x02\x02\x02\x8A\u0638\x03\x02\x02" +
        "\x02\x8C\u063E\x03\x02\x02\x02\x8E\u0675\x03\x02\x02\x02\x90\u067B\x03" +
        "\x02\x02\x02\x92\u067D\x03\x02\x02\x02\x94\u0688\x03\x02\x02\x02\x96\u0692" +
        "\x03\x02\x02\x02\x98\u06B7\x03\x02\x02\x02\x9A\u06C3\x03\x02\x02\x02\x9C" +
        "\u06C5\x03\x02\x02\x02\x9E\u06D0\x03\x02\x02\x02\xA0\u06E9\x03\x02\x02" +
        "\x02\xA2\u06EB\x03\x02\x02\x02\xA4\u06EE\x03\x02\x02\x02\xA6\u0728\x03" +
        "\x02\x02\x02\xA8\u072A\x03\x02\x02\x02\xAA\u0734\x03\x02\x02\x02\xAC\u0745" +
        "\x03\x02\x02\x02\xAE\u07CB\x03\x02\x02\x02\xB0\u07CE\x03\x02\x02\x02\xB2" +
        "\u07DB\x03\x02\x02\x02\xB4\u07E6\x03\x02\x02\x02\xB6\u07F1\x03\x02\x02" +
        "\x02\xB8\u0801\x03\x02\x02\x02\xBA\u0811\x03\x02\x02\x02\xBC\u081A\x03" +
        "\x02\x02\x02\xBE\u0825\x03\x02\x02\x02\xC0\u082B\x03\x02\x02\x02\xC2\u083F" +
        "\x03\x02\x02\x02\xC4\u0851\x03\x02\x02\x02\xC6\u0853\x03\x02\x02\x02\xC8" +
        "\u0855\x03\x02\x02\x02\xCA\u0857\x03\x02\x02\x02\xCC\u0859\x03\x02\x02" +
        "\x02\xCE\u085B\x03\x02\x02\x02\xD0\u085D\x03\x02\x02\x02\xD2\u085F\x03" +
        "\x02\x02\x02\xD4\u0861\x03\x02\x02\x02\xD6\u0863\x03\x02\x02\x02\xD8\u0865" +
        "\x03\x02\x02\x02\xDA\u0867\x03\x02\x02\x02\xDC\u0869\x03\x02\x02\x02\xDE" +
        "\u086B\x03\x02\x02\x02\xE0\u086D\x03\x02\x02\x02\xE2\u087B\x03\x02\x02";
    Verilog2001Parser._serializedATNSegment2 = "\x02\xE4\u0890\x03\x02\x02\x02\xE6\u0892\x03\x02\x02\x02\xE8\u0894\x03" +
        "\x02\x02\x02\xEA\u089C\x03\x02\x02\x02\xEC\u08A1\x03\x02\x02\x02\xEE\u08B5" +
        "\x03\x02\x02\x02\xF0\u08BA\x03\x02\x02\x02\xF2\u08C3\x03\x02\x02\x02\xF4" +
        "\u08CE\x03\x02\x02\x02\xF6\u08D9\x03\x02\x02\x02\xF8\u08E0\x03\x02\x02" +
        "\x02\xFA\u08E2\x03\x02\x02\x02\xFC\u08EB\x03\x02\x02\x02\xFE\u0908\x03" +
        "\x02\x02\x02\u0100\u090A\x03\x02\x02\x02\u0102\u0914\x03\x02\x02\x02\u0104" +
        "\u0918\x03\x02\x02\x02\u0106\u0925\x03\x02\x02\x02\u0108\u092F\x03\x02" +
        "\x02\x02\u010A\u0937\x03\x02\x02\x02\u010C\u093B\x03\x02\x02\x02\u010E" +
        "\u093E\x03\x02\x02\x02\u0110\u0941\x03\x02\x02\x02\u0112\u0948\x03\x02" +
        "\x02\x02\u0114\u095B\x03\x02\x02\x02\u0116\u095D\x03\x02\x02\x02\u0118" +
        "\u0969\x03\x02\x02\x02\u011A\u096B\x03\x02\x02\x02\u011C\u097E\x03\x02" +
        "\x02\x02\u011E\u0982\x03\x02\x02\x02\u0120\u0995\x03\x02\x02\x02\u0122" +
        "\u0A10\x03\x02\x02\x02\u0124\u0A1A\x03\x02\x02\x02\u0126\u0A4F\x03\x02" +
        "\x02\x02\u0128\u0A59\x03\x02\x02\x02\u012A\u0A62\x03\x02\x02\x02\u012C" +
        "\u0A6C\x03\x02\x02\x02\u012E\u0A7B\x03\x02\x02\x02\u0130\u0A7D\x03\x02" +
        "\x02\x02\u0132\u0A81\x03\x02\x02\x02\u0134\u0A90\x03\x02\x02\x02\u0136" +
        "\u0A92\x03\x02\x02\x02\u0138\u0A95\x03\x02\x02\x02\u013A\u0AA5\x03\x02" +
        "\x02\x02\u013C\u0AA7\x03\x02\x02\x02\u013E\u0AC6\x03\x02\x02\x02\u0140" +
        "\u0AC8\x03\x02\x02\x02\u0142\u0B04\x03\x02\x02\x02\u0144\u0B16\x03\x02" +
        "\x02\x02\u0146\u0B3F\x03\x02\x02\x02\u0148\u0B51\x03\x02\x02\x02\u014A" +
        "\u0B6B\x03\x02\x02\x02\u014C\u0B85\x03\x02\x02\x02\u014E\u0B87\x03\x02" +
        "\x02\x02\u0150\u0B98\x03\x02\x02\x02\u0152\u0BA9\x03\x02\x02\x02\u0154" +
        "\u0BB6\x03\x02\x02\x02\u0156\u0BC0\x03\x02\x02\x02\u0158\u0BCA\x03\x02" +
        "\x02\x02\u015A\u0BD5\x03\x02\x02\x02\u015C\u0BDF\x03\x02\x02\x02\u015E" +
        "\u0BE1\x03\x02\x02\x02\u0160\u0BE8\x03\x02\x02\x02\u0162\u0BF1\x03\x02" +
        "\x02\x02\u0164\u0BF9\x03\x02\x02\x02\u0166\u0C0C\x03\x02\x02\x02\u0168" +
        "\u0C19\x03\x02\x02\x02\u016A\u0C1D\x03\x02\x02\x02\u016C\u0C21\x03\x02" +
        "\x02\x02\u016E\u0C28\x03\x02\x02\x02\u0170\u0C59\x03\x02\x02\x02\u0172" +
        "\u0C5B\x03\x02\x02\x02\u0174\u0C5D\x03\x02\x02\x02\u0176\u0C5F\x03\x02" +
        "\x02\x02\u0178\u0C61\x03\x02\x02\x02\u017A\u0C63\x03\x02\x02\x02\u017C" +
        "\u0C65\x03\x02\x02\x02\u017E\u0C67\x03\x02\x02\x02\u0180\u0C69\x03\x02" +
        "\x02\x02\u0182\u0C6B\x03\x02\x02\x02\u0184\u0C6D\x03\x02\x02\x02\u0186" +
        "\u0C6F\x03\x02\x02\x02\u0188\u0C71\x03\x02\x02\x02\u018A\u0C73\x03\x02" +
        "\x02\x02\u018C\u0C75\x03\x02\x02\x02\u018E\u0C77\x03\x02\x02\x02\u0190" +
        "\u0C79\x03\x02\x02\x02\u0192\u0C7B\x03\x02\x02\x02\u0194\u0C85\x03\x02" +
        "\x02\x02\u0196\u0C87\x03\x02\x02\x02\u0198\u0C95\x03\x02\x02\x02\u019A" +
        "\u0CA3\x03\x02\x02\x02\u019C\u0CA5\x03\x02\x02\x02\u019E\u0CB5\x03\x02" +
        "\x02\x02\u01A0\u0CB7\x03\x02\x02\x02\u01A2\u0CB9\x03\x02\x02\x02\u01A4" +
        "\u0CC1\x03\x02\x02\x02\u01A6\u0CC9\x03\x02\x02\x02\u01A8\u0CCB\x03\x02" +
        "\x02\x02\u01AA\u0CCD\x03\x02\x02\x02\u01AC\u0CCF\x03\x02\x02\x02\u01AE" +
        "\u0CD1\x03\x02\x02\x02\u01B0\u0CD3\x03\x02\x02\x02\u01B2\u0CD5\x03\x02" +
        "\x02\x02\u01B4\u0CD7\x03\x02\x02\x02\u01B6\u0CD9\x03\x02\x02\x02\u01B8" +
        "\u0CDB\x03\x02\x02\x02\u01BA\u0CE6\x03\x02\x02\x02\u01BC\u0CF1\x03\x02" +
        "\x02\x02\u01BE\u0CF6\x03\x02\x02\x02\u01C0\u0D01\x03\x02\x02\x02\u01C2" +
        "\u0D06\x03\x02\x02\x02\u01C4\u0D0B\x03\x02\x02\x02\u01C6\u0D3B\x03\x02" +
        "\x02\x02\u01C8\u0D3D\x03\x02\x02\x02\u01CA\u0D6D\x03\x02\x02\x02\u01CC" +
        "\u0D6F\x03\x02\x02\x02\u01CE\u0D83\x03\x02\x02\x02\u01D0\u0D97\x03\x02" +
        "\x02\x02\u01D2\u0DA2\x03\x02\x02\x02\u01D4\u0DB6\x03\x02\x02\x02\u01D6" +
        "\u0DB8\x03\x02\x02\x02\u01D8\u0DBA\x03\x02\x02\x02\u01DA\u0DC3\x03\x02" +
        "\x02\x02\u01DC\u0DD2\x03\x02\x02\x02\u01DE\u0DD4\x03\x02\x02\x02\u01E0" +
        "\u0DD6\x03\x02\x02\x02\u01E2\u0DFB\x03\x02\x02\x02\u01E4\u0DFD\x03\x02" +
        "\x02\x02\u01E6\u0DFF\x03\x02\x02\x02\u01E8\u0E07\x03\x02\x02\x02\u01EA" +
        "\u0E1D\x03\x02\x02\x02\u01EC\u0E38\x03\x02\x02\x02\u01EE\u0E40\x03\x02" +
        "\x02\x02\u01F0\u0E4F\x03\x02\x02\x02\u01F2\u0E51\x03\x02\x02\x02\u01F4" +
        "\u0E5E\x03\x02\x02\x02\u01F6\u0E6B\x03\x02\x02\x02\u01F8\u0E93\x03\x02" +
        "\x02\x02\u01FA\u0EBA\x03\x02\x02\x02\u01FC\u0EE1\x03\x02\x02\x02\u01FE" +
        "\u0EE3\x03\x02\x02\x02\u0200\u0EE5\x03\x02\x02\x02\u0202\u0EE7\x03\x02" +
        "\x02\x02\u0204\u0EE9\x03\x02\x02\x02\u0206\u0EEB\x03\x02\x02\x02\u0208" +
        "\u0EED\x03\x02\x02\x02\u020A\u0EF2\x03\x02\x02\x02\u020C\u0F04\x03\x02" +
        "\x02\x02\u020E\u0F06\x03\x02\x02\x02\u0210\u0F0A\x03\x02\x02\x02\u0212" +
        "\u0F0C\x03\x02\x02\x02\u0214\u0F0E\x03\x02\x02\x02\u0216\u0F10\x03\x02" +
        "\x02\x02\u0218\u0F12\x03\x02\x02\x02\u021A\u0F16\x03\x02\x02\x02\u021C" +
        "\u0F20\x03\x02\x02\x02\u021E\u0F22\x03\x02\x02\x02\u0220\u0F24\x03\x02" +
        "\x02\x02\u0222\u0F26\x03\x02\x02\x02\u0224\u0F28\x03\x02\x02\x02\u0226" +
        "\u0F2A\x03\x02\x02\x02\u0228\u0F2C\x03\x02\x02\x02\u022A\u0F2E\x03\x02" +
        "\x02\x02\u022C\u0F30\x03\x02\x02\x02\u022E\u0F34\x03\x02\x02\x02\u0230" +
        "\u0F36\x03\x02\x02\x02\u0232\u0F38\x03\x02\x02\x02\u0234\u0F3A\x03\x02" +
        "\x02\x02\u0236\u0F3C\x03\x02\x02\x02\u0238\u0F3E\x03\x02\x02\x02\u023A" +
        "\u0F40\x03\x02\x02\x02\u023C\u0F42\x03\x02\x02\x02\u023E\u0F44\x03\x02" +
        "\x02\x02\u0240\u0F46\x03\x02\x02\x02\u0242\u0F48\x03\x02\x02\x02\u0244" +
        "\u0F4A\x03\x02\x02\x02\u0246\u0F4C\x03\x02\x02\x02\u0248\u0F4E\x03\x02" +
        "\x02\x02\u024A\u0F50\x03\x02\x02\x02\u024C\u0F52\x03\x02\x02\x02\u024E" +
        "\u0F54\x03\x02\x02\x02\u0250\u0F56\x03\x02\x02\x02\u0252\u0F5A\x03\x02" +
        "\x02\x02\u0254\u0F5F\x03\x02\x02\x02\u0256\u0F61\x03\x02\x02\x02\u0258" +
        "\u0F63\x03\x02\x02\x02\u025A\u0F65\x03\x02\x02\x02\u025C\u0F67\x03\x02" +
        "\x02\x02\u025E\u0F69\x03\x02\x02\x02\u0260\u0F6B\x03\x02\x02\x02\u0262" +
        "\u0F6D\x03\x02\x02\x02\u0264\u0F6F\x03\x02\x02\x02\u0266\u0F71\x03\x02" +
        "\x02\x02\u0268\u0F73\x03\x02\x02\x02\u026A\u0F85\x03\x02\x02\x02\u026C" +
        "\u026D\x07\x03\x02\x02\u026D\u026E\x05\u0216\u010C\x02\u026E\u026F\x07" +
        "\x04\x02\x02\u026F\u0273\x05\x04\x03\x02\u0270\u0272\x05\x06\x04\x02\u0271" +
        "\u0270\x03\x02\x02\x02\u0272\u0275\x03\x02\x02\x02\u0273\u0271\x03\x02" +
        "\x02\x02\u0273\u0274\x03\x02\x02\x02\u0274\u0276\x03\x02\x02\x02\u0275" +
        "\u0273\x03\x02\x02\x02\u0276\u0277\x07\x05\x02\x02\u0277\x03\x03\x02\x02" +
        "\x02\u0278\u0281\x07\x06\x02\x02\u0279\u027A\x05\u023E\u0120\x02\u027A" +
        "\u027B\x07\x07\x02\x02\u027B\u027D\x03\x02\x02\x02\u027C\u0279\x03\x02" +
        "\x02\x02\u027C\u027D\x03\x02\x02\x02\u027D\u027E\x03\x02\x02\x02\u027E" +
        "\u0280\x05\u0214\u010B\x02\u027F\u027C\x03\x02\x02\x02\u0280\u0283\x03" +
        "\x02\x02\x02\u0281\u027F\x03\x02\x02\x02\u0281\u0282\x03\x02\x02\x02\u0282" +
        "\u0284\x03\x02\x02\x02\u0283\u0281\x03\x02\x02\x02\u0284\u0285\x07\x04" +
        "\x02\x02\u0285\x05\x03\x02\x02\x02\u0286\u0287\x05\b\x05\x02\u0287\u0288" +
        "\x05\x0E\b\x02\u0288\u0296\x03\x02\x02\x02\u0289\u028A\x05\n\x06\x02\u028A" +
        "\u028B\x05\x0E\b\x02\u028B\u0296\x03\x02\x02\x02\u028C\u028D\x05\n\x06" +
        "\x02\u028D\u028E\x05\x12\n\x02\u028E\u0296\x03\x02\x02\x02\u028F\u0290" +
        "\x05\x10\t\x02\u0290\u0291\x05\x0E\b\x02\u0291\u0296\x03\x02\x02\x02\u0292" +
        "\u0293\x05\x10\t\x02\u0293\u0294\x05\x12\n\x02\u0294\u0296\x03\x02\x02" +
        "\x02\u0295\u0286\x03\x02\x02\x02\u0295\u0289\x03\x02\x02\x02\u0295\u028C" +
        "\x03\x02\x02\x02\u0295\u028F\x03\x02\x02\x02\u0295\u0292\x03\x02\x02\x02" +
        "\u0296\x07\x03\x02\x02\x02\u0297\u0298\x07\b\x02\x02\u0298\t\x03\x02\x02" +
        "\x02\u0299\u029A\x07\t\x02\x02\u029A\u029B\x05\f\x07\x02\u029B\v\x03\x02" +
        "\x02\x02\u029C\u02A1\x05\u0260\u0131\x02\u029D\u029E\x07\x07\x02\x02\u029E" +
        "\u02A0\x05\u023C\u011F\x02\u029F\u029D\x03\x02\x02\x02\u02A0\u02A3\x03" +
        "\x02\x02\x02\u02A1\u029F\x03\x02\x02\x02\u02A1\u02A2\x03\x02\x02\x02\u02A2" +
        "\r\x03\x02\x02\x02\u02A3\u02A1\x03\x02\x02\x02\u02A4\u02A8\x07\n\x02\x02" +
        "\u02A5\u02A7\x05\u023E\u0120\x02\u02A6\u02A5\x03\x02\x02\x02\u02A7\u02AA" +
        "\x03\x02\x02\x02\u02A8\u02A6\x03\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02" +
        "\u02A9\x0F\x03\x02\x02\x02\u02AA\u02A8\x03\x02\x02\x02\u02AB\u02AF\x07" +
        "\v\x02\x02\u02AC\u02AD\x05\u023E\u0120\x02\u02AD\u02AE\x07\x07\x02\x02" +
        "\u02AE\u02B0\x03\x02\x02\x02\u02AF\u02AC\x03\x02\x02\x02\u02AF\u02B0\x03" +
        "\x02\x02\x02\u02B0\u02B1\x03\x02\x02\x02\u02B1\u02B2\x05\u0214\u010B\x02" +
        "\u02B2\x11\x03\x02\x02\x02\u02B3\u02B7\x07\f\x02\x02\u02B4\u02B5\x05\u023E" +
        "\u0120\x02\u02B5\u02B6\x07\x07\x02\x02\u02B6\u02B8\x03\x02\x02\x02\u02B7" +
        "\u02B4\x03\x02\x02\x02\u02B7\u02B8\x03\x02\x02\x02\u02B8\u02B9\x03\x02" +
        "\x02\x02\u02B9\u02BB\x05\u0214\u010B\x02\u02BA\u02BC\x07\r\x02\x02\u02BB" +
        "\u02BA\x03\x02\x02\x02\u02BB\u02BC\x03\x02\x02\x02\u02BC\x13\x03\x02\x02" +
        "\x02\u02BD\u02BF\x05\u0208\u0105\x02\u02BE\u02BD\x03\x02\x02\x02\u02BE" +
        "\u02BF\x03\x02\x02\x02\u02BF\u02C3\x03\x02\x02\x02\u02C0\u02C2\x05\x16" +
        "\f\x02\u02C1\u02C0\x03\x02\x02\x02\u02C2\u02C5\x03\x02\x02\x02\u02C3\u02C1" +
        "\x03\x02\x02\x02\u02C3\u02C4\x03\x02\x02\x02\u02C4\u02C6\x03\x02\x02\x02" +
        "\u02C5\u02C3\x03\x02\x02\x02\u02C6\u02C7\x07\x02\x02\x03\u02C7\x15\x03" +
        "\x02\x02\x02\u02C8\u02C9\x05\x18\r\x02\u02C9\x17\x03\x02\x02\x02\u02CA" +
        "\u02CC\x05\u020A\u0106\x02\u02CB\u02CA\x03\x02\x02\x02\u02CC\u02CF\x03" +
        "\x02\x02\x02\u02CD\u02CB\x03\x02\x02\x02\u02CD\u02CE\x03\x02\x02\x02\u02CE" +
        "\u02D0\x03\x02\x02\x02\u02CF\u02CD\x03\x02\x02\x02\u02D0\u02D1\x05\x1A" +
        "\x0E\x02\u02D1\u02D3\x05\u0242\u0122\x02\u02D2\u02D4\x05\x1C\x0F\x02\u02D3" +
        "\u02D2\x03\x02\x02\x02\u02D3\u02D4\x03\x02\x02\x02\u02D4\u02D6\x03\x02" +
        "\x02\x02\u02D5\u02D7\x05\x1E\x10\x02\u02D6\u02D5\x03\x02\x02\x02\u02D6" +
        "\u02D7\x03\x02\x02\x02\u02D7\u02D8\x03\x02\x02\x02\u02D8\u02DC\x07\x04" +
        "\x02\x02\u02D9\u02DB\x05*\x16\x02\u02DA\u02D9\x03\x02\x02\x02\u02DB\u02DE" +
        "\x03\x02\x02\x02\u02DC\u02DA\x03\x02\x02\x02\u02DC\u02DD\x03\x02\x02\x02" +
        "\u02DD\u02DF\x03\x02\x02\x02\u02DE\u02DC\x03\x02\x02\x02\u02DF\u02E0\x07" +
        "\x0E\x02\x02\u02E0\u02F9\x03\x02\x02\x02\u02E1\u02E3\x05\u020A\u0106\x02" +
        "\u02E2\u02E1\x03\x02\x02\x02\u02E3\u02E6\x03\x02\x02\x02\u02E4\u02E2\x03" +
        "\x02\x02\x02\u02E4\u02E5\x03\x02\x02\x02\u02E5\u02E7\x03\x02\x02\x02\u02E6" +
        "\u02E4\x03\x02\x02\x02\u02E7\u02E8\x05\x1A\x0E\x02\u02E8\u02EA\x05\u0242" +
        "\u0122\x02\u02E9\u02EB\x05\x1C\x0F\x02\u02EA\u02E9\x03\x02\x02\x02\u02EA" +
        "\u02EB\x03\x02\x02\x02\u02EB\u02ED\x03\x02\x02\x02\u02EC\u02EE\x05 \x11" +
        "\x02\u02ED\u02EC\x03\x02\x02\x02\u02ED\u02EE\x03\x02\x02\x02\u02EE\u02EF" +
        "\x03\x02\x02\x02\u02EF\u02F3\x07\x04\x02\x02\u02F0\u02F2\x05.\x18\x02" +
        "\u02F1\u02F0\x03\x02\x02\x02\u02F2\u02F5\x03\x02\x02\x02\u02F3\u02F1\x03" +
        "\x02\x02\x02\u02F3\u02F4\x03\x02\x02\x02\u02F4\u02F6\x03\x02\x02\x02\u02F5" +
        "\u02F3\x03\x02\x02\x02\u02F6\u02F7\x07\x0E\x02\x02\u02F7\u02F9\x03\x02" +
        "\x02\x02\u02F8\u02CD\x03\x02\x02\x02\u02F8\u02E4\x03\x02\x02\x02\u02F9" +
        "\x19\x03\x02\x02\x02\u02FA\u02FB\t\x02\x02\x02\u02FB\x1B\x03\x02\x02\x02" +
        "\u02FC\u02FD\x07\x11\x02\x02\u02FD\u02FE\x07\x12\x02\x02\u02FE\u0303\x05" +
        "8\x1D\x02\u02FF\u0300\x07\x13\x02\x02\u0300\u0302\x058\x1D\x02\u0301\u02FF" +
        "\x03\x02\x02\x02\u0302\u0305\x03\x02\x02\x02\u0303\u0301\x03\x02\x02\x02" +
        "\u0303\u0304\x03\x02\x02\x02\u0304\u0306\x03\x02\x02\x02\u0305\u0303\x03" +
        "\x02\x02\x02\u0306\u0307\x07\x14\x02\x02\u0307\x1D\x03\x02\x02\x02\u0308" +
        "\u0309\x07\x12\x02\x02\u0309\u030E\x05\"\x12\x02\u030A\u030B\x07\x13\x02" +
        "\x02\u030B\u030D\x05\"\x12\x02\u030C\u030A\x03\x02\x02\x02\u030D\u0310" +
        "\x03\x02\x02\x02\u030E\u030C\x03\x02\x02\x02\u030E\u030F\x03\x02\x02\x02" +
        "\u030F\u0311\x03\x02\x02\x02\u0310\u030E\x03\x02\x02\x02\u0311\u0312\x07" +
        "\x14\x02\x02\u0312\x1F\x03\x02\x02\x02\u0313\u0314\x07\x12\x02\x02\u0314" +
        "\u0319\x05(\x15\x02\u0315\u0316\x07\x13\x02\x02\u0316\u0318\x05(\x15\x02" +
        "\u0317\u0315\x03\x02\x02\x02\u0318\u031B\x03\x02\x02\x02\u0319\u0317\x03" +
        "\x02\x02\x02\u0319\u031A\x03\x02\x02\x02\u031A\u031C\x03\x02\x02\x02\u031B" +
        "\u0319\x03\x02\x02\x02\u031C\u031D\x07\x14\x02\x02\u031D\u0321\x03\x02" +
        "\x02\x02\u031E\u031F\x07\x12\x02\x02\u031F\u0321\x07\x14\x02\x02\u0320" +
        "\u0313\x03\x02\x02\x02\u0320\u031E\x03\x02\x02\x02\u0321!\x03\x02\x02" +
        "\x02\u0322\u0324\x05$\x13\x02\u0323\u0322\x03\x02\x02\x02\u0323\u0324" +
        "\x03\x02\x02\x02\u0324\u032E\x03\x02\x02\x02\u0325\u0326\x07\x07\x02\x02" +
        "\u0326\u0327\x05\u024C\u0127\x02\u0327\u0329\x07\x12\x02\x02\u0328\u032A" +
        "\x05$\x13\x02\u0329\u0328\x03\x02\x02\x02\u0329\u032A\x03\x02\x02\x02" +
        "\u032A\u032B\x03\x02\x02\x02\u032B\u032C\x07\x14\x02\x02\u032C\u032E\x03" +
        "\x02\x02\x02\u032D\u0323\x03\x02\x02\x02\u032D\u0325\x03\x02\x02\x02\u032E" +
        "#\x03\x02\x02\x02\u032F\u033C\x05&\x14\x02\u0330\u0331\x07\x15\x02\x02" +
        "\u0331\u0336\x05&\x14\x02\u0332\u0333\x07\x13\x02\x02\u0333\u0335\x05" +
        "&\x14\x02\u0334\u0332\x03\x02\x02\x02\u0335\u0338\x03\x02\x02\x02\u0336" +
        "\u0334\x03\x02\x02\x02\u0336\u0337\x03\x02\x02\x02\u0337\u0339\x03\x02" +
        "\x02\x02\u0338\u0336\x03\x02\x02\x02\u0339\u033A\x07\x16\x02\x02\u033A" +
        "\u033C\x03\x02\x02\x02\u033B\u032F\x03\x02\x02\x02\u033B\u0330\x03\x02" +
        "\x02\x02\u033C%\x03\x02\x02\x02\u033D\u0349\x05\u024C\u0127\x02\u033E" +
        "\u033F\x05\u024C\u0127\x02\u033F\u0340\x07\x17\x02\x02\u0340\u0341\x05" +
        "\u01D8\xED\x02\u0341\u0342\x07\x18\x02\x02\u0342\u0349\x03\x02\x02\x02" +
        "\u0343\u0344\x05\u024C\u0127\x02\u0344\u0345\x07\x17\x02\x02\u0345\u0346" +
        "\x05\u01F0\xF9\x02\u0346\u0347\x07\x18\x02\x02\u0347\u0349\x03\x02\x02" +
        "\x02\u0348\u033D\x03\x02\x02\x02\u0348\u033E\x03\x02\x02\x02\u0348\u0343" +
        "\x03\x02\x02\x02\u0349\'\x03\x02\x02\x02\u034A\u034C\x05\u020A\u0106\x02" +
        "\u034B\u034A\x03\x02\x02\x02\u034C\u034F\x03\x02\x02\x02\u034D\u034B\x03" +
        "\x02\x02\x02\u034D\u034E\x03\x02\x02\x02\u034E\u0350\x03\x02\x02\x02\u034F" +
        "\u034D\x03\x02\x02\x02\u0350\u0360\x05<\x1F\x02\u0351\u0353\x05\u020A" +
        "\u0106\x02\u0352\u0351\x03\x02\x02\x02\u0353\u0356\x03\x02\x02\x02\u0354" +
        "\u0352\x03\x02\x02\x02\u0354\u0355\x03\x02\x02\x02\u0355\u0357\x03\x02" +
        "\x02\x02\u0356\u0354\x03\x02\x02\x02\u0357\u0360\x05> \x02\u0358\u035A" +
        "\x05\u020A\u0106\x02\u0359\u0358\x03\x02\x02\x02\u035A\u035D\x03\x02\x02" +
        "\x02\u035B\u0359\x03\x02\x02\x02\u035B\u035C\x03\x02\x02\x02\u035C\u035E" +
        "\x03\x02\x02\x02\u035D\u035B\x03\x02\x02\x02\u035E\u0360\x05@!\x02\u035F" +
        "\u034D\x03\x02\x02\x02\u035F\u0354\x03\x02\x02\x02\u035F\u035B\x03\x02" +
        "\x02\x02\u0360)\x03\x02\x02\x02\u0361\u0389\x05,\x17\x02\u0362\u0363\x05" +
        "(\x15\x02\u0363\u0364\x07\x04\x02\x02\u0364\u0389\x03\x02\x02\x02\u0365" +
        "\u0367\x05\u020A\u0106\x02\u0366\u0365\x03\x02\x02\x02\u0367\u036A\x03" +
        "\x02\x02\x02\u0368\u0366\x03\x02\x02\x02\u0368\u0369\x03\x02\x02\x02\u0369" +
        "\u036B\x03\x02\x02\x02\u036A\u0368\x03\x02\x02\x02\u036B\u0389\x05\xF4" +
        "{\x02\u036C\u036E\x05\u020A\u0106\x02\u036D\u036C\x03\x02\x02\x02\u036E" +
        "\u0371\x03\x02\x02\x02\u036F\u036D\x03\x02\x02\x02\u036F\u0370\x03\x02" +
        "\x02\x02\u0370\u0372\x03\x02\x02\x02\u0371\u036F\x03\x02\x02\x02\u0372" +
        "\u0389\x054\x1B\x02\u0373\u0375\x05\u020A\u0106\x02\u0374\u0373\x03\x02" +
        "\x02\x02\u0375\u0378\x03\x02\x02\x02\u0376\u0374\x03\x02\x02\x02\u0376" +
        "\u0377\x03\x02\x02\x02\u0377\u0379\x03\x02\x02\x02\u0378\u0376\x03\x02" +
        "\x02\x02\u0379\u0389\x056\x1C\x02\u037A\u037C\x05\u020A\u0106\x02\u037B" +
        "\u037A\x03\x02\x02\x02\u037C\u037F\x03\x02\x02\x02\u037D\u037B\x03\x02" +
        "\x02\x02\u037D\u037E\x03\x02\x02\x02\u037E\u0380\x03\x02\x02\x02\u037F" +
        "\u037D\x03\x02\x02\x02\u0380\u0389\x05\u0152\xAA\x02\u0381\u0383\x05\u020A" +
        "\u0106\x02\u0382\u0381\x03\x02\x02\x02\u0383\u0386\x03\x02\x02\x02\u0384" +
        "\u0382\x03\x02\x02\x02\u0384\u0385\x03\x02\x02\x02\u0385\u0387\x03\x02" +
        "\x02\x02\u0386\u0384\x03\x02\x02\x02\u0387\u0389\x05:\x1E\x02\u0388\u0361" +
        "\x03\x02\x02\x02\u0388\u0362\x03\x02\x02\x02\u0388\u0368\x03\x02\x02\x02" +
        "\u0388\u036F\x03\x02\x02\x02\u0388\u0376\x03\x02\x02\x02\u0388\u037D\x03" +
        "\x02\x02\x02\u0388\u0384\x03\x02\x02\x02\u0389+\x03\x02\x02\x02\u038A" +
        "\u038C\x05\u020A\u0106\x02\u038B\u038A\x03\x02\x02\x02\u038C\u038F\x03" +
        "\x02\x02\x02\u038D\u038B\x03\x02\x02\x02\u038D\u038E\x03\x02\x02\x02\u038E" +
        "\u0390\x03\x02\x02\x02\u038F\u038D\x03\x02\x02\x02\u0390\u03BC\x050\x19" +
        "\x02\u0391\u0393\x05\u020A\u0106\x02\u0392\u0391\x03\x02\x02\x02\u0393" +
        "\u0396\x03\x02\x02\x02\u0394\u0392\x03\x02\x02\x02\u0394\u0395\x03\x02" +
        "\x02\x02\u0395\u0397\x03\x02\x02\x02\u0396\u0394\x03\x02\x02\x02\u0397" +
        "\u03BC\x052\x1A\x02\u0398\u039A\x05\u020A\u0106\x02\u0399\u0398\x03\x02" +
        "\x02\x02\u039A\u039D\x03\x02\x02\x02\u039B\u0399\x03\x02\x02\x02\u039B" +
        "\u039C\x03\x02\x02\x02\u039C\u039E\x03\x02\x02\x02\u039D\u039B\x03\x02" +
        "\x02\x02\u039E\u03BC\x05\u0106\x84\x02\u039F\u03A1\x05\u020A\u0106\x02" +
        "\u03A0\u039F\x03\x02\x02\x02\u03A1\u03A4\x03\x02\x02\x02\u03A2\u03A0\x03" +
        "\x02\x02\x02\u03A2\u03A3\x03\x02\x02\x02\u03A3\u03A5\x03\x02\x02\x02\u03A4" +
        "\u03A2\x03\x02\x02\x02\u03A5\u03BC\x05\xAEX\x02\u03A6\u03A8\x05\u020A" +
        "\u0106\x02\u03A7\u03A6\x03\x02\x02\x02\u03A8\u03AB\x03\x02\x02\x02\u03A9" +
        "\u03A7\x03\x02\x02\x02\u03A9\u03AA\x03\x02\x02\x02\u03AA\u03AC\x03\x02" +
        "\x02\x02\u03AB\u03A9\x03\x02\x02\x02\u03AC\u03BC\x05\xE0q\x02\u03AD\u03AF" +
        "\x05\u020A\u0106\x02\u03AE\u03AD\x03\x02\x02\x02\u03AF\u03B2\x03\x02\x02" +
        "\x02\u03B0\u03AE\x03\x02\x02\x02\u03B0\u03B1\x03\x02\x02\x02\u03B1\u03B3" +
        "\x03\x02\x02\x02\u03B2\u03B0\x03\x02\x02\x02\u03B3\u03BC\x05\u010C\x87" +
        "\x02\u03B4\u03B6\x05\u020A\u0106\x02\u03B5\u03B4\x03\x02\x02\x02\u03B6" +
        "\u03B9\x03\x02\x02\x02\u03B7\u03B5\x03\x02\x02\x02\u03B7\u03B8\x03\x02" +
        "\x02\x02\u03B8\u03BA\x03\x02\x02\x02\u03B9\u03B7\x03\x02\x02\x02\u03BA" +
        "\u03BC\x05\u010E\x88\x02\u03BB\u038D\x03\x02\x02\x02\u03BB\u0394\x03\x02" +
        "\x02\x02\u03BB\u039B\x03\x02\x02\x02\u03BB\u03A2\x03\x02\x02\x02\u03BB" +
        "\u03A9\x03\x02\x02\x02\u03BB\u03B0\x03\x02\x02\x02\u03BB\u03B7\x03\x02" +
        "\x02\x02\u03BC-\x03\x02\x02\x02\u03BD\u03BF\x05\u020A\u0106\x02\u03BE" +
        "\u03BD\x03\x02\x02\x02\u03BF\u03C2\x03\x02\x02\x02\u03C0\u03BE\x03\x02" +
        "\x02\x02\u03C0\u03C1\x03\x02\x02\x02\u03C1\u03C3\x03\x02\x02\x02\u03C2" +
        "\u03C0\x03\x02\x02\x02\u03C3\u03E8\x05\xF4{\x02\u03C4\u03C6\x05\u020A" +
        "\u0106\x02\u03C5\u03C4\x03\x02\x02\x02\u03C6\u03C9\x03\x02\x02\x02\u03C7" +
        "\u03C5\x03\x02\x02\x02\u03C7\u03C8\x03\x02\x02\x02\u03C8\u03CA\x03\x02" +
        "\x02\x02\u03C9\u03C7\x03\x02\x02\x02\u03CA\u03E8\x054\x1B\x02\u03CB\u03CD" +
        "\x05\u020A\u0106\x02\u03CC\u03CB\x03\x02\x02\x02\u03CD\u03D0\x03\x02\x02" +
        "\x02\u03CE\u03CC\x03\x02\x02\x02\u03CE\u03CF\x03\x02\x02\x02\u03CF\u03D1" +
        "\x03\x02\x02\x02\u03D0\u03CE\x03\x02\x02\x02\u03D1\u03E8\x05,\x17\x02" +
        "\u03D2\u03D4\x05\u020A\u0106\x02\u03D3\u03D2\x03\x02\x02\x02\u03D4\u03D7" +
        "\x03\x02\x02\x02\u03D5\u03D3\x03\x02\x02\x02\u03D5\u03D6\x03\x02\x02\x02" +
        "\u03D6\u03D8\x03\x02\x02\x02\u03D7\u03D5\x03\x02\x02\x02\u03D8\u03E8\x05" +
        "6\x1C\x02\u03D9\u03DB\x05\u020A\u0106\x02\u03DA\u03D9\x03\x02\x02\x02" +
        "\u03DB\u03DE\x03\x02\x02\x02\u03DC\u03DA\x03\x02\x02\x02\u03DC\u03DD\x03" +
        "\x02\x02\x02\u03DD\u03DF\x03\x02\x02\x02\u03DE\u03DC\x03\x02\x02\x02\u03DF" +
        "\u03E8\x05\u0152\xAA\x02\u03E0\u03E2\x05\u020A\u0106\x02\u03E1\u03E0\x03" +
        "\x02\x02\x02\u03E2\u03E5\x03\x02\x02\x02\u03E3\u03E1\x03\x02\x02\x02\u03E3" +
        "\u03E4\x03\x02\x02\x02\u03E4\u03E6\x03\x02\x02\x02\u03E5\u03E3\x03\x02" +
        "\x02\x02\u03E6\u03E8\x05:\x1E\x02\u03E7\u03C0\x03\x02\x02\x02\u03E7\u03C7" +
        "\x03\x02\x02\x02\u03E7\u03CE\x03\x02\x02\x02\u03E7\u03D5\x03\x02\x02\x02" +
        "\u03E7\u03DC\x03\x02\x02\x02\u03E7\u03E3\x03\x02\x02\x02\u03E8/\x03\x02" +
        "\x02\x02\u03E9\u03F4\x05P)\x02\u03EA\u03F4\x05N(\x02\u03EB\u03F4\x05F" +
        "$\x02\u03EC\u03F4\x05J&\x02\u03ED\u03F4\x05H%\x02\u03EE\u03F4\x05L\'\x02" +
        "\u03EF\u03F4\x05B\"\x02\u03F0\u03F4\x05D#\x02\u03F1\u03F4\x05\x98M\x02" +
        "\u03F2\u03F4\x05\x8EH\x02\u03F3\u03E9\x03\x02\x02\x02\u03F3\u03EA\x03" +
        "\x02\x02\x02\u03F3\u03EB\x03\x02\x02\x02\u03F3\u03EC\x03\x02\x02\x02\u03F3" +
        "\u03ED\x03\x02\x02\x02\u03F3\u03EE\x03\x02\x02\x02\u03F3\u03EF\x03\x02" +
        "\x02\x02\u03F3\u03F0\x03\x02\x02\x02\u03F3\u03F1\x03\x02\x02\x02\u03F3" +
        "\u03F2\x03\x02\x02\x02\u03F41\x03\x02\x02\x02\u03F5\u03F6\x07\x19\x02" +
        "\x02\u03F6\u03F7\x05r:\x02\u03F7\u03F8\x07\x04\x02\x02\u03F83\x03\x02" +
        "\x02\x02\u03F9\u03FB\x07\x1A\x02\x02\u03FA\u03FC\x07\x1B\x02\x02\u03FB" +
        "\u03FA\x03\x02\x02\x02\u03FB\u03FC\x03\x02\x02\x02\u03FC\u03FE\x03\x02" +
        "\x02\x02\u03FD\u03FF\x05\x8CG\x02\u03FE\u03FD\x03\x02\x02\x02\u03FE\u03FF" +
        "\x03\x02\x02\x02\u03FF\u0400\x03\x02\x02\x02\u0400\u0401\x05r:\x02\u0401" +
        "\u0402\x07\x04\x02\x02\u0402\u0418\x03\x02\x02\x02\u0403\u0404\x07\x1A" +
        "\x02\x02\u0404\u0405\x07\x1C\x02\x02\u0405\u0406\x05r:\x02\u0406\u0407" +
        "\x07\x04\x02\x02\u0407\u0418\x03\x02\x02\x02\u0408\u0409\x07\x1A\x02\x02" +
        "\u0409\u040A\x07\x1D\x02\x02\u040A\u040B\x05r:\x02\u040B\u040C\x07\x04" +
        "\x02\x02\u040C\u0418\x03\x02\x02\x02\u040D\u040E\x07\x1A\x02\x02\u040E" +
        "\u040F\x07\x1E\x02\x02\u040F\u0410\x05r:\x02\u0410\u0411\x07\x04\x02\x02" +
        "\u0411\u0418\x03\x02\x02\x02\u0412\u0413\x07\x1A\x02\x02\u0413\u0414\x07" +
        "\x1F\x02\x02\u0414\u0415\x05r:\x02\u0415\u0416\x07\x04\x02\x02\u0416\u0418" +
        "\x03\x02\x02\x02\u0417\u03F9\x03\x02\x02\x02\u0417\u0403\x03\x02\x02\x02" +
        "\u0417\u0408\x03\x02\x02\x02\u0417\u040D\x03\x02\x02\x02\u0417\u0412\x03" +
        "\x02\x02\x02\u04185\x03\x02\x02\x02\u0419\u041A\x058\x1D\x02\u041A\u041B" +
        "\x07\x04\x02\x02\u041B7\x03\x02\x02\x02\u041C\u041E\x07 \x02\x02\u041D" +
        "\u041F\x07\x1B\x02\x02\u041E\u041D\x03\x02\x02\x02\u041E\u041F\x03\x02" +
        "\x02\x02\u041F\u0421\x03\x02\x02\x02\u0420\u0422\x05\x8CG\x02\u0421\u0420" +
        "\x03\x02\x02\x02\u0421\u0422\x03\x02\x02\x02\u0422\u0423\x03\x02\x02\x02" +
        "\u0423\u0431\x05r:\x02\u0424\u0425\x07 \x02\x02\u0425\u0426\x07\x1C\x02" +
        "\x02\u0426\u0431\x05r:\x02\u0427\u0428\x07 \x02\x02\u0428\u0429\x07\x1D" +
        "\x02\x02\u0429\u0431\x05r:\x02\u042A\u042B\x07 \x02\x02\u042B\u042C\x07" +
        "\x1E\x02\x02\u042C\u0431\x05r:\x02\u042D\u042E\x07 \x02\x02\u042E\u042F" +
        "\x07\x1F\x02\x02\u042F\u0431\x05r:\x02\u0430\u041C\x03\x02\x02\x02\u0430" +
        "\u0424\x03\x02\x02\x02\u0430\u0427\x03\x02\x02\x02\u0430\u042A\x03\x02" +
        "\x02\x02\u0430\u042D\x03\x02\x02\x02\u04319\x03\x02\x02\x02\u0432\u0434" +
        "\x07!\x02\x02\u0433\u0435\x05\x8CG\x02\u0434\u0433\x03\x02\x02\x02\u0434" +
        "\u0435\x03\x02\x02\x02\u0435\u0436\x03\x02\x02\x02\u0436\u0437\x05t;\x02" +
        "\u0437\u0438\x07\x04\x02\x02\u0438;\x03\x02\x02\x02\u0439\u043B\x07\"" +
        "\x02\x02\u043A\u043C\x05R*\x02\u043B\u043A\x03\x02\x02\x02\u043B\u043C" +
        "\x03\x02\x02\x02\u043C\u043E\x03\x02\x02\x02\u043D\u043F\x07\x1B\x02\x02" +
        "\u043E\u043D\x03\x02\x02\x02\u043E\u043F\x03\x02\x02\x02\u043F\u0441\x03" +
        "\x02\x02\x02\u0440\u0442\x05\x8CG\x02\u0441\u0440\x03\x02\x02\x02\u0441" +
        "\u0442\x03\x02\x02\x02\u0442\u0443\x03\x02\x02\x02\u0443\u0444\x05n8\x02" +
        "\u0444=\x03\x02\x02\x02\u0445\u0447\x07#\x02\x02\u0446\u0448\x05R*\x02" +
        "\u0447\u0446\x03\x02\x02\x02\u0447\u0448\x03\x02\x02\x02\u0448\u044A\x03" +
        "\x02\x02\x02\u0449\u044B\x07\x1B\x02\x02\u044A\u0449\x03\x02\x02\x02\u044A" +
        "\u044B\x03\x02\x02\x02\u044B\u044D\x03\x02\x02\x02\u044C\u044E\x05\x8C" +
        "G\x02\u044D\u044C\x03\x02\x02\x02\u044D\u044E\x03\x02\x02\x02\u044E\u044F" +
        "\x03\x02\x02\x02\u044F\u0450\x05n8\x02\u0450?\x03\x02\x02\x02\u0451\u0453" +
        "\x07$\x02\x02\u0452\u0454\x05R*\x02\u0453\u0452\x03\x02\x02\x02\u0453" +
        "\u0454\x03\x02\x02\x02\u0454\u0456\x03\x02\x02\x02\u0455\u0457\x07\x1B" +
        "\x02\x02\u0456\u0455\x03\x02\x02\x02\u0456\u0457\x03\x02\x02\x02\u0457" +
        "\u0459\x03\x02\x02\x02\u0458\u045A\x05\x8CG\x02\u0459\u0458\x03\x02\x02" +
        "\x02\u0459\u045A\x03\x02\x02\x02\u045A\u045B\x03\x02\x02\x02\u045B\u047A" +
        "\x05n8\x02\u045C\u045E\x07$\x02\x02\u045D\u045F\x07%\x02\x02\u045E\u045D" +
        "\x03\x02\x02\x02\u045E\u045F\x03\x02\x02\x02\u045F\u0461\x03\x02\x02\x02" +
        "\u0460\u0462\x07\x1B\x02\x02\u0461\u0460\x03\x02\x02\x02\u0461\u0462\x03" +
        "\x02\x02\x02\u0462\u0464\x03\x02\x02\x02\u0463\u0465\x05\x8CG\x02\u0464" +
        "\u0463\x03\x02\x02\x02\u0464\u0465\x03\x02\x02\x02\u0465\u0466\x03\x02" +
        "\x02\x02\u0466\u047A\x05n8\x02\u0467\u0468\x07$\x02\x02\u0468\u046A\x07" +
        "%\x02\x02\u0469\u046B\x07\x1B\x02\x02\u046A\u0469\x03\x02\x02\x02\u046A" +
        "\u046B\x03\x02\x02\x02\u046B\u046D\x03\x02\x02\x02\u046C\u046E\x05\x8C" +
        "G\x02\u046D\u046C\x03\x02\x02\x02\u046D\u046E\x03\x02\x02\x02\u046E\u046F" +
        "\x03\x02\x02\x02\u046F\u047A\x05z>\x02\u0470\u0472\x07$\x02\x02\u0471" +
        "\u0473\x05T+\x02\u0472\u0471\x03\x02\x02\x02\u0472\u0473\x03\x02\x02\x02" +
        "\u0473\u0474\x03\x02\x02\x02\u0474\u047A\x05n8\x02\u0475\u0476\x07$\x02" +
        "\x02\u0476\u0477\x05T+\x02\u0477\u0478\x05z>\x02\u0478\u047A\x03\x02\x02" +
        "\x02\u0479\u0451\x03\x02\x02\x02\u0479";
    Verilog2001Parser._serializedATNSegment3 = "\u045C\x03\x02\x02\x02\u0479\u0467\x03\x02\x02\x02\u0479\u0470\x03\x02" +
        "\x02\x02\u0479\u0475\x03\x02\x02\x02\u047AA\x03\x02\x02\x02\u047B\u047C" +
        "\x07&\x02\x02\u047C\u047D\x05h5\x02\u047D\u047E\x07\x04\x02\x02\u047E" +
        "C\x03\x02\x02\x02\u047F\u0480\x07\'\x02\x02\u0480\u0481\x05l7\x02\u0481" +
        "\u0482\x07\x04\x02\x02\u0482E\x03\x02\x02\x02\u0483\u0484\x07\x1C\x02" +
        "\x02\u0484\u0485\x05x=\x02\u0485\u0486\x07\x04\x02\x02\u0486G\x03\x02" +
        "\x02\x02\u0487\u0488\x07\x1F\x02\x02\u0488\u0489\x05x=\x02\u0489\u048A" +
        "\x07\x04\x02\x02\u048AI\x03\x02\x02\x02\u048B\u048C\x07\x1D\x02\x02\u048C" +
        "\u048D\x05v<\x02\u048D\u048E\x07\x04\x02\x02\u048EK\x03\x02\x02\x02\u048F" +
        "\u0490\x07\x1E\x02\x02\u0490\u0491\x05v<\x02\u0491\u0492\x07\x04\x02\x02" +
        "\u0492M\x03\x02\x02\x02\u0493\u0495\x07%\x02\x02\u0494\u0496\x07\x1B\x02" +
        "\x02\u0495\u0494\x03\x02\x02\x02\u0495\u0496\x03\x02\x02\x02\u0496\u0498" +
        "\x03\x02\x02\x02\u0497\u0499\x05\x8CG\x02\u0498\u0497\x03\x02\x02\x02" +
        "\u0498\u0499\x03\x02\x02\x02\u0499\u049A\x03\x02\x02\x02\u049A\u049B\x05" +
        "x=\x02\u049B\u049C\x07\x04\x02\x02\u049CO\x03\x02\x02\x02\u049D\u049F" +
        "\x05R*\x02\u049E\u04A0\x07\x1B\x02\x02\u049F\u049E\x03\x02\x02\x02\u049F" +
        "\u04A0\x03\x02\x02\x02\u04A0\u04A2\x03\x02\x02\x02\u04A1\u04A3\x05b2\x02" +
        "\u04A2\u04A1\x03\x02\x02\x02\u04A2\u04A3\x03\x02\x02\x02\u04A3\u04A4\x03" +
        "\x02\x02\x02\u04A4\u04A5\x05j6\x02\u04A5\u04A6\x07\x04\x02\x02\u04A6\u0510" +
        "\x03\x02\x02\x02\u04A7\u04A9\x05R*\x02\u04A8\u04AA\x05Z.\x02\u04A9\u04A8" +
        "\x03\x02\x02\x02\u04A9\u04AA\x03\x02\x02\x02\u04AA\u04AC\x03\x02\x02\x02" +
        "\u04AB\u04AD\x07\x1B\x02\x02\u04AC\u04AB\x03\x02\x02\x02\u04AC\u04AD\x03" +
        "\x02\x02\x02\u04AD\u04AF\x03\x02\x02\x02\u04AE\u04B0\x05b2\x02\u04AF\u04AE" +
        "\x03\x02\x02\x02\u04AF\u04B0\x03\x02\x02\x02\u04B0\u04B1\x03\x02\x02\x02" +
        "\u04B1\u04B2\x05p9\x02\u04B2\u04B3\x07\x04\x02\x02\u04B3\u0510\x03\x02" +
        "\x02\x02\u04B4\u04B6\x07(\x02\x02\u04B5\u04B7\x05Z.\x02\u04B6\u04B5\x03" +
        "\x02\x02\x02\u04B6\u04B7\x03\x02\x02\x02\u04B7\u04B9\x03\x02\x02\x02\u04B8" +
        "\u04BA\x07\x1B\x02\x02\u04B9\u04B8\x03\x02\x02\x02\u04B9\u04BA\x03\x02" +
        "\x02\x02\u04BA\u04BC\x03\x02\x02\x02\u04BB\u04BD\x05b2\x02\u04BC\u04BB" +
        "\x03\x02\x02\x02\u04BC\u04BD\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02" +
        "\u04BE\u04BF\x05p9\x02\u04BF\u04C0\x07\x04\x02\x02\u04C0\u0510\x03\x02" +
        "\x02\x02\u04C1\u04C3\x07(\x02\x02\u04C2\u04C4\x05`1\x02\u04C3\u04C2\x03" +
        "\x02\x02\x02\u04C3\u04C4\x03\x02\x02\x02\u04C4\u04C6\x03\x02\x02\x02\u04C5" +
        "\u04C7\x07\x1B\x02\x02\u04C6\u04C5\x03\x02\x02\x02\u04C6\u04C7\x03\x02" +
        "\x02\x02\u04C7\u04C9\x03\x02\x02\x02\u04C8\u04CA\x05b2\x02\u04C9\u04C8" +
        "\x03\x02\x02\x02\u04C9\u04CA\x03\x02\x02\x02\u04CA\u04CB\x03\x02\x02\x02" +
        "\u04CB\u04CC\x05j6\x02\u04CC\u04CD\x07\x04\x02\x02\u04CD\u0510\x03\x02" +
        "\x02\x02\u04CE\u04D0\x07(\x02\x02\u04CF\u04D1\x05`1\x02\u04D0\u04CF\x03" +
        "\x02\x02\x02\u04D0\u04D1\x03\x02\x02\x02\u04D1\u04D3\x03\x02\x02\x02\u04D2" +
        "\u04D4\t\x03\x02\x02\u04D3\u04D2\x03\x02\x02\x02\u04D3\u04D4\x03\x02\x02" +
        "\x02\u04D4\u04D6\x03\x02\x02\x02\u04D5\u04D7\x07\x1B\x02\x02\u04D6\u04D5" +
        "\x03\x02\x02\x02\u04D6\u04D7\x03\x02\x02\x02\u04D7\u04D8\x03\x02\x02\x02" +
        "\u04D8\u04DA\x05\x8CG\x02\u04D9\u04DB\x05b2\x02\u04DA\u04D9\x03\x02\x02" +
        "\x02\u04DA\u04DB\x03\x02\x02\x02\u04DB\u04DC\x03\x02\x02\x02\u04DC\u04DD" +
        "\x05j6\x02\u04DD\u04DE\x07\x04\x02\x02\u04DE\u0510\x03\x02\x02\x02\u04DF" +
        "\u04E1\x07(\x02\x02\u04E0\u04E2\x05Z.\x02\u04E1\u04E0\x03\x02\x02\x02" +
        "\u04E1\u04E2\x03\x02\x02\x02\u04E2\u04E4\x03\x02\x02\x02\u04E3\u04E5\t" +
        "\x03\x02\x02\u04E4\u04E3\x03\x02\x02\x02\u04E4\u04E5\x03\x02\x02\x02\u04E5" +
        "\u04E7\x03\x02\x02\x02\u04E6\u04E8\x07\x1B\x02\x02\u04E7\u04E6\x03\x02" +
        "\x02\x02\u04E7\u04E8\x03\x02\x02\x02\u04E8\u04E9\x03\x02\x02\x02\u04E9" +
        "\u04EB\x05\x8CG\x02\u04EA\u04EC\x05b2\x02\u04EB\u04EA\x03\x02\x02\x02" +
        "\u04EB\u04EC\x03\x02\x02\x02\u04EC\u04ED\x03\x02\x02\x02\u04ED\u04EE\x05" +
        "p9\x02\u04EE\u04EF\x07\x04\x02\x02\u04EF\u0510\x03\x02\x02\x02\u04F0\u04F2" +
        "\x05R*\x02\u04F1\u04F3\x05Z.\x02\u04F2\u04F1\x03\x02\x02\x02\u04F2\u04F3" +
        "\x03\x02\x02\x02\u04F3\u04F5\x03\x02\x02\x02\u04F4\u04F6\t\x03\x02\x02" +
        "\u04F5\u04F4\x03\x02\x02\x02\u04F5\u04F6\x03\x02\x02\x02\u04F6\u04F8\x03" +
        "\x02\x02\x02\u04F7\u04F9\x07\x1B\x02\x02\u04F8\u04F7\x03\x02\x02\x02\u04F8" +
        "\u04F9\x03\x02\x02\x02\u04F9\u04FA\x03\x02\x02\x02\u04FA\u04FC\x05\x8C" +
        "G\x02\u04FB\u04FD\x05b2\x02\u04FC\u04FB\x03\x02\x02\x02\u04FC\u04FD\x03" +
        "\x02\x02\x02\u04FD\u04FE\x03\x02\x02\x02\u04FE\u04FF\x05p9\x02\u04FF\u0500" +
        "\x07\x04\x02\x02\u0500\u0510\x03\x02\x02\x02\u0501\u0503\x05R*\x02\u0502" +
        "\u0504\t\x03\x02\x02\u0503\u0502\x03\x02\x02\x02\u0503\u0504\x03\x02\x02" +
        "\x02\u0504\u0506\x03\x02\x02\x02\u0505\u0507\x07\x1B\x02\x02\u0506\u0505" +
        "\x03\x02\x02\x02\u0506\u0507\x03\x02\x02\x02\u0507\u0508\x03\x02\x02\x02" +
        "\u0508\u050A\x05\x8CG\x02\u0509\u050B\x05b2\x02\u050A\u0509\x03\x02\x02" +
        "\x02\u050A\u050B\x03\x02\x02\x02\u050B\u050C\x03\x02\x02\x02\u050C\u050D" +
        "\x05j6\x02\u050D\u050E\x07\x04\x02\x02\u050E\u0510\x03\x02\x02\x02\u050F" +
        "\u049D\x03\x02\x02\x02\u050F\u04A7\x03\x02\x02\x02\u050F\u04B4\x03\x02" +
        "\x02\x02\u050F\u04C1\x03\x02\x02\x02\u050F\u04CE\x03\x02\x02\x02\u050F" +
        "\u04DF\x03\x02\x02\x02\u050F\u04F0\x03\x02\x02\x02\u050F\u0501\x03\x02" +
        "\x02\x02\u0510Q\x03\x02\x02\x02\u0511\u0512\t\x04\x02\x02\u0512S\x03\x02" +
        "\x02\x02\u0513\u0514\t\x05\x02\x02\u0514U\x03\x02\x02\x02\u0515\u0518" +
        "\x05\u024E\u0128\x02\u0516\u0517\x075\x02\x02\u0517\u0519\x05\u01D8\xED" +
        "\x02\u0518\u0516\x03\x02\x02\x02\u0518\u0519\x03\x02\x02\x02\u0519\u0523" +
        "\x03\x02\x02\x02\u051A\u051B\x05\u024E\u0128\x02\u051B\u051F\x05\x8AF" +
        "\x02\u051C\u051E\x05\x8AF\x02\u051D\u051C\x03\x02\x02\x02\u051E\u0521" +
        "\x03\x02\x02\x02\u051F\u051D\x03\x02\x02\x02\u051F\u0520\x03\x02\x02\x02" +
        "\u0520\u0523\x03\x02\x02\x02\u0521\u051F\x03\x02\x02\x02\u0522\u0515\x03" +
        "\x02\x02\x02\u0522\u051A\x03\x02\x02\x02\u0523W\x03\x02\x02\x02\u0524" +
        "\u0527\x05\u0266\u0134\x02\u0525\u0526\x075\x02\x02\u0526\u0528\x05\u01D8" +
        "\xED\x02\u0527\u0525\x03\x02\x02\x02\u0527\u0528\x03\x02\x02\x02\u0528" +
        "\u0532\x03\x02\x02\x02\u0529\u052A\x05\u0266\u0134\x02\u052A\u052E\x05" +
        "\x8AF\x02\u052B\u052D\x05\x8AF\x02\u052C\u052B\x03\x02\x02\x02\u052D\u0530" +
        "\x03\x02\x02\x02\u052E\u052C\x03\x02\x02\x02\u052E\u052F\x03\x02\x02\x02" +
        "\u052F\u0532\x03\x02\x02\x02\u0530\u052E\x03\x02\x02\x02\u0531\u0524\x03" +
        "\x02\x02\x02\u0531\u0529\x03\x02\x02\x02\u0532Y\x03\x02\x02\x02\u0533" +
        "\u0534\x07\x12\x02\x02\u0534\u0535\x05\\/\x02\u0535\u0536\x07\x13\x02" +
        "\x02\u0536\u0537\x05^0\x02\u0537\u0538\x07\x14\x02\x02\u0538\u0558\x03" +
        "\x02\x02\x02\u0539\u053A\x07\x12\x02\x02\u053A\u053B\x05^0\x02\u053B\u053C" +
        "\x07\x13\x02\x02\u053C\u053D\x05\\/\x02\u053D\u053E\x07\x14\x02\x02\u053E" +
        "\u0558\x03\x02\x02\x02\u053F\u0540\x07\x12\x02\x02\u0540\u0541\x05\\/" +
        "\x02\u0541\u0542\x07\x13\x02\x02\u0542\u0543\x076\x02\x02\u0543\u0544" +
        "\x07\x14\x02\x02\u0544\u0558\x03\x02\x02\x02\u0545\u0546\x07\x12\x02\x02" +
        "\u0546\u0547\x05^0\x02\u0547\u0548\x07\x13\x02\x02\u0548\u0549\x077\x02" +
        "\x02\u0549\u054A\x07\x14\x02\x02\u054A\u0558\x03\x02\x02\x02\u054B\u054C" +
        "\x07\x12\x02\x02\u054C\u054D\x077\x02\x02\u054D\u054E\x07\x13\x02\x02" +
        "\u054E\u054F\x05^0\x02\u054F\u0550\x07\x14\x02\x02\u0550\u0558\x03\x02" +
        "\x02\x02\u0551\u0552\x07\x12\x02\x02\u0552\u0553\x076\x02\x02\u0553\u0554" +
        "\x07\x13\x02\x02\u0554\u0555\x05\\/\x02\u0555\u0556\x07\x14\x02\x02\u0556" +
        "\u0558\x03\x02\x02\x02\u0557\u0533\x03\x02\x02\x02\u0557\u0539\x03\x02" +
        "\x02\x02\u0557\u053F\x03\x02\x02\x02\u0557\u0545\x03\x02\x02\x02\u0557" +
        "\u054B\x03\x02\x02\x02\u0557\u0551\x03\x02\x02\x02\u0558[\x03\x02\x02" +
        "\x02\u0559\u055A\t\x06\x02\x02\u055A]\x03\x02\x02\x02\u055B\u055C\t\x07" +
        "\x02\x02\u055C_\x03\x02\x02\x02\u055D\u055E\x07\x12\x02\x02\u055E\u055F" +
        "\x07>\x02\x02\u055F\u0567\x07\x14\x02\x02\u0560\u0561\x07\x12\x02\x02" +
        "\u0561\u0562\x07?\x02\x02\u0562\u0567\x07\x14\x02\x02\u0563\u0564\x07" +
        "\x12\x02\x02\u0564\u0565\x07@\x02\x02\u0565\u0567\x07\x14\x02\x02\u0566" +
        "\u055D\x03\x02\x02\x02\u0566\u0560\x03\x02\x02\x02\u0566\u0563\x03\x02" +
        "\x02\x02\u0567a\x03\x02\x02\x02\u0568\u0569\x07\x11\x02\x02\u0569\u0578" +
        "\x05f4\x02\u056A\u056B\x07\x11\x02\x02\u056B\u056C\x07\x12\x02\x02\u056C" +
        "\u0573\x05f4\x02\u056D\u056E\x07\x13\x02\x02\u056E\u0571\x05f4\x02\u056F" +
        "\u0570\x07\x13\x02\x02\u0570\u0572\x05f4\x02\u0571\u056F\x03\x02\x02\x02" +
        "\u0571\u0572\x03\x02\x02\x02\u0572\u0574\x03\x02\x02\x02\u0573\u056D\x03" +
        "\x02\x02\x02\u0573\u0574\x03\x02\x02\x02\u0574\u0575\x03\x02\x02\x02\u0575" +
        "\u0576\x07\x14\x02\x02\u0576\u0578\x03\x02\x02\x02\u0577\u0568\x03\x02" +
        "\x02\x02\u0577\u056A\x03\x02\x02\x02\u0578c\x03\x02\x02\x02\u0579\u057A" +
        "\x07\x11\x02\x02\u057A\u0585\x05f4\x02\u057B\u057C\x07\x11\x02\x02\u057C" +
        "\u057D\x07\x12\x02\x02\u057D\u0580\x05f4\x02\u057E\u057F\x07\x13\x02\x02" +
        "\u057F\u0581\x05f4\x02\u0580\u057E\x03\x02\x02\x02\u0580\u0581\x03\x02" +
        "\x02\x02\u0581\u0582\x03\x02\x02\x02\u0582\u0583\x07\x14\x02\x02\u0583" +
        "\u0585\x03\x02\x02\x02\u0584\u0579\x03\x02\x02\x02\u0584\u057B\x03\x02" +
        "\x02\x02\u0585e\x03\x02\x02\x02\u0586\u058B\x07\xAA\x02\x02\u0587\u058B" +
        "\x05\u024A\u0126\x02\u0588\u058B\x05\u0254\u012B\x02\u0589\u058B\x05\u01E6" +
        "\xF4\x02\u058A\u0586\x03\x02\x02\x02\u058A\u0587\x03\x02\x02\x02\u058A" +
        "\u0588\x03\x02\x02\x02\u058A\u0589\x03\x02\x02\x02\u058Bg\x03\x02\x02" +
        "\x02\u058C\u0594\x05\u021C\u010F\x02\u058D\u0591\x05\x8AF\x02\u058E\u0590" +
        "\x05\x8AF\x02\u058F\u058E\x03\x02\x02\x02\u0590\u0593\x03\x02\x02\x02" +
        "\u0591\u058F\x03\x02\x02\x02\u0591\u0592\x03\x02\x02\x02\u0592\u0595\x03" +
        "\x02\x02\x02\u0593\u0591\x03\x02\x02\x02\u0594\u058D\x03\x02\x02\x02\u0594" +
        "\u0595\x03\x02\x02\x02\u0595\u05A3\x03\x02\x02\x02\u0596\u0597\x07\x13" +
        "\x02\x02\u0597\u059F\x05\u021C\u010F\x02\u0598\u059C\x05\x8AF\x02\u0599" +
        "\u059B\x05\x8AF\x02\u059A\u0599\x03\x02\x02\x02\u059B\u059E\x03\x02\x02" +
        "\x02\u059C\u059A\x03\x02\x02\x02\u059C\u059D\x03\x02\x02\x02\u059D\u05A0" +
        "\x03\x02\x02\x02\u059E\u059C\x03\x02\x02\x02\u059F\u0598\x03\x02\x02\x02" +
        "\u059F\u05A0\x03\x02\x02\x02\u05A0\u05A2\x03\x02\x02\x02\u05A1\u0596\x03" +
        "\x02\x02\x02\u05A2\u05A5\x03\x02\x02\x02\u05A3\u05A1\x03\x02\x02\x02\u05A3" +
        "\u05A4\x03\x02\x02\x02\u05A4i\x03\x02\x02\x02\u05A5\u05A3\x03\x02\x02" +
        "\x02\u05A6\u05AE\x05\u0246\u0124\x02\u05A7\u05AB\x05\x8AF\x02\u05A8\u05AA" +
        "\x05\x8AF\x02\u05A9\u05A8\x03\x02\x02\x02\u05AA\u05AD\x03\x02\x02\x02" +
        "\u05AB\u05A9\x03\x02\x02\x02\u05AB\u05AC\x03\x02\x02\x02\u05AC\u05AF\x03" +
        "\x02\x02\x02\u05AD\u05AB\x03\x02\x02\x02\u05AE\u05A7\x03\x02\x02\x02\u05AE" +
        "\u05AF\x03\x02\x02\x02\u05AF\u05BD\x03\x02\x02\x02\u05B0\u05B1\x07\x13" +
        "\x02\x02\u05B1\u05B9\x05\u0246\u0124\x02\u05B2\u05B6\x05\x8AF\x02\u05B3" +
        "\u05B5\x05\x8AF\x02\u05B4\u05B3\x03\x02\x02\x02\u05B5\u05B8\x03\x02\x02" +
        "\x02\u05B6\u05B4\x03\x02\x02\x02\u05B6\u05B7\x03\x02\x02\x02\u05B7\u05BA" +
        "\x03\x02\x02\x02\u05B8\u05B6\x03\x02\x02\x02\u05B9\u05B2\x03\x02\x02\x02" +
        "\u05B9\u05BA\x03\x02\x02\x02\u05BA\u05BC\x03\x02\x02\x02\u05BB\u05B0\x03" +
        "\x02\x02\x02\u05BC\u05BF\x03\x02\x02\x02\u05BD\u05BB\x03\x02\x02\x02\u05BD" +
        "\u05BE\x03\x02\x02\x02\u05BEk\x03\x02\x02\x02\u05BF\u05BD\x03\x02\x02" +
        "\x02\u05C0\u05C5\x05\u0226\u0114\x02\u05C1\u05C2\x07\x13\x02\x02\u05C2" +
        "\u05C4\x05\u0226\u0114\x02\u05C3\u05C1\x03\x02\x02\x02\u05C4\u05C7\x03" +
        "\x02\x02\x02\u05C5\u05C3\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6" +
        "m\x03\x02\x02\x02\u05C7\u05C5\x03\x02\x02\x02\u05C8\u05CD\x05\u024C\u0127" +
        "\x02\u05C9\u05CA\x07\x13\x02\x02\u05CA\u05CC\x05\u024C\u0127\x02\u05CB" +
        "\u05C9\x03\x02\x02\x02\u05CC\u05CF\x03\x02\x02\x02\u05CD\u05CB\x03\x02" +
        "\x02\x02\u05CD\u05CE\x03\x02\x02\x02\u05CEo\x03\x02\x02\x02\u05CF\u05CD" +
        "\x03\x02\x02\x02\u05D0\u05D5\x05|?\x02\u05D1\u05D2\x07\x13\x02\x02\u05D2" +
        "\u05D4\x05|?\x02\u05D3\u05D1\x03\x02\x02\x02\u05D4\u05D7\x03\x02\x02\x02" +
        "\u05D5\u05D3\x03\x02\x02\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6q\x03\x02" +
        "\x02\x02\u05D7\u05D5\x03\x02\x02\x02\u05D8\u05DD\x05~@\x02\u05D9\u05DA" +
        "\x07\x13\x02\x02\u05DA\u05DC\x05~@\x02\u05DB\u05D9\x03\x02\x02\x02\u05DC" +
        "\u05DF\x03\x02\x02\x02\u05DD\u05DB\x03\x02\x02\x02\u05DD\u05DE\x03\x02" +
        "\x02\x02\u05DEs\x03\x02\x02\x02\u05DF\u05DD\x03\x02\x02\x02\u05E0\u05E5" +
        "\x05\x80A\x02\u05E1\u05E2\x07\x13\x02\x02\u05E2\u05E4\x05\x80A\x02\u05E3" +
        "\u05E1\x03\x02\x02\x02\u05E4\u05E7\x03\x02\x02\x02\u05E5\u05E3\x03\x02" +
        "\x02\x02\u05E5\u05E6\x03\x02\x02\x02\u05E6u\x03\x02\x02\x02\u05E7\u05E5" +
        "\x03\x02\x02\x02\u05E8\u05ED\x05V,\x02\u05E9\u05EA\x07\x13\x02\x02\u05EA" +
        "\u05EC\x05V,\x02\u05EB\u05E9\x03\x02\x02\x02\u05EC\u05EF\x03\x02\x02\x02" +
        "\u05ED\u05EB\x03\x02\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EEw\x03\x02" +
        "\x02\x02\u05EF\u05ED\x03\x02\x02\x02\u05F0\u05F5\x05X-\x02\u05F1\u05F2" +
        "\x07\x13\x02\x02\u05F2\u05F4\x05X-\x02\u05F3\u05F1\x03\x02\x02\x02\u05F4" +
        "\u05F7\x03\x02\x02\x02\u05F5\u05F3\x03\x02\x02\x02\u05F5\u05F6\x03\x02" +
        "\x02\x02\u05F6y\x03\x02\x02\x02\u05F7\u05F5\x03\x02\x02\x02\u05F8\u05FB" +
        "\x05\u024C\u0127\x02\u05F9\u05FA\x075\x02\x02\u05FA\u05FC\x05\u01D8\xED" +
        "\x02\u05FB\u05F9\x03\x02\x02\x02\u05FB\u05FC\x03\x02\x02\x02\u05FC\u0605" +
        "\x03\x02\x02\x02\u05FD\u05FE\x07\x13\x02\x02\u05FE\u0601\x05\u024C\u0127" +
        "\x02\u05FF\u0600\x075\x02\x02\u0600\u0602\x05\u01D8\xED\x02\u0601\u05FF" +
        "\x03\x02\x02\x02\u0601\u0602\x03\x02\x02\x02\u0602\u0604\x03\x02\x02\x02" +
        "\u0603\u05FD\x03\x02\x02\x02\u0604\u0607\x03\x02\x02\x02\u0605\u0603\x03" +
        "\x02\x02\x02\u0605\u0606\x03\x02\x02\x02\u0606{\x03\x02\x02\x02\u0607" +
        "\u0605\x03\x02\x02\x02\u0608\u0609\x05\u0246\u0124\x02\u0609\u060A\x07" +
        "5\x02\x02\u060A\u060B\x05\u01E0\xF1\x02\u060B}\x03\x02\x02\x02\u060C\u060D" +
        "\x05\u024A\u0126\x02\u060D\u060E\x075\x02\x02\u060E\u060F\x05\u01D8\xED" +
        "\x02\u060F\x7F\x03\x02\x02\x02\u0610\u0611\x05\u0254\u012B\x02\u0611\u0612" +
        "\x075\x02\x02\u0612\u0613\x05\u01DA\xEE\x02\u0613\u0616\x03\x02\x02\x02" +
        "\u0614\u0616\x05\x82B\x02\u0615\u0610\x03\x02\x02\x02\u0615\u0614\x03" +
        "\x02\x02\x02\u0616\x81\x03\x02\x02\x02\u0617\u0618\x07A\x02\x02\u0618" +
        "\u0619\x075\x02\x02\u0619\u061A\x07\x12\x02\x02\u061A\u061D\x05\x86D\x02" +
        "\u061B\u061C\x07\x13\x02\x02\u061C\u061E\x05\x84C\x02\u061D\u061B\x03" +
        "\x02\x02\x02\u061D\u061E\x03\x02\x02\x02\u061E\u061F\x03\x02\x02\x02\u061F" +
        "\u0620\x07\x14\x02\x02\u0620\u0621\x07\x04\x02\x02\u0621\u0631\x03\x02" +
        "\x02\x02\u0622\u0623\x07A\x02\x02\u0623\u0624\x05\u0166\xB4\x02\u0624" +
        "\u0625\x07B\x02\x02\u0625\u0626\x05\u0168\xB5\x02\u0626\u0627\x075\x02" +
        "\x02\u0627\u0628\x07\x12\x02\x02\u0628\u062B\x05\x86D\x02\u0629\u062A" +
        "\x07\x13\x02\x02\u062A\u062C\x05\x84C\x02\u062B\u0629\x03\x02\x02\x02" +
        "\u062B\u062C\x03\x02\x02\x02\u062C\u062D\x03\x02\x02\x02\u062D\u062E\x07" +
        "\x14\x02\x02\u062E\u062F\x07\x04\x02\x02\u062F\u0631\x03\x02\x02\x02\u0630" +
        "\u0617\x03\x02\x02\x02\u0630\u0622\x03\x02\x02\x02\u0631\x83\x03\x02\x02" +
        "\x02\u0632\u0633\x05\x88E\x02\u0633\x85\x03\x02\x02\x02\u0634\u0635\x05" +
        "\x88E\x02\u0635\x87\x03\x02\x02\x02\u0636\u0637\x05\u01DA\xEE\x02\u0637" +
        "\x89\x03\x02\x02\x02\u0638\u0639\x07\x17\x02\x02\u0639\u063A\x05\u01DE" +
        "\xF0\x02\u063A\u063B\x07C\x02\x02\u063B\u063C\x05\u01DE\xF0\x02\u063C" +
        "\u063D\x07\x18\x02\x02\u063D\x8B\x03\x02\x02\x02\u063E\u063F\x07\x17\x02" +
        "\x02\u063F\u0640\x05\u01EE\xF8\x02\u0640\u0641\x07C\x02\x02\u0641\u0642" +
        "\x05\u01E4\xF3\x02\u0642\u0643\x07\x18\x02\x02\u0643\x8D\x03\x02\x02\x02" +
        "\u0644\u0646\x07D\x02\x02\u0645\u0647\x07E\x02\x02\u0646\u0645\x03\x02" +
        "\x02\x02\u0646\u0647\x03\x02\x02\x02\u0647\u0649\x03\x02\x02\x02\u0648" +
        "\u064A\x07\x1B\x02\x02\u0649\u0648\x03\x02\x02\x02\u0649\u064A\x03\x02" +
        "\x02\x02\u064A\u064C\x03\x02\x02\x02\u064B\u064D\x05\x96L\x02\u064C\u064B" +
        "\x03\x02\x02\x02\u064C\u064D\x03\x02\x02\x02\u064D\u064E\x03\x02\x02\x02" +
        "\u064E\u064F\x05\u021E\u0110\x02\u064F\u0653\x07\x04\x02\x02\u0650\u0652" +
        "\x05\x90I\x02\u0651\u0650\x03\x02\x02\x02\u0652\u0655\x03\x02\x02\x02" +
        "\u0653\u0651\x03\x02\x02\x02\u0653\u0654\x03\x02\x02\x02\u0654\u0657\x03" +
        "\x02\x02\x02\u0655\u0653\x03\x02\x02\x02\u0656\u0658\x05\u0126\x94\x02" +
        "\u0657\u0656\x03\x02\x02\x02\u0657\u0658\x03\x02\x02\x02\u0658\u0659\x03" +
        "\x02\x02\x02\u0659\u065A\x07F\x02\x02\u065A\u0676\x03\x02\x02\x02\u065B" +
        "\u065D\x07D\x02\x02\u065C\u065E\x07E\x02\x02\u065D\u065C\x03\x02\x02\x02" +
        "\u065D\u065E\x03\x02\x02\x02\u065E\u0660\x03\x02\x02\x02\u065F\u0661\x07" +
        "\x1B\x02\x02\u0660\u065F\x03\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661" +
        "\u0663\x03\x02\x02\x02\u0662\u0664\x05\x96L\x02\u0663\u0662\x03\x02\x02" +
        "\x02\u0663\u0664\x03\x02\x02\x02\u0664\u0665\x03\x02\x02\x02\u0665\u0666" +
        "\x05\u021E\u0110\x02\u0666\u0667\x07\x12\x02\x02\u0667\u0668\x05\x92J" +
        "\x02\u0668\u0669\x07\x14\x02\x02\u0669\u066D\x07\x04\x02\x02\u066A\u066C" +
        "\x05\xA6T\x02\u066B\u066A\x03\x02\x02\x02\u066C\u066F\x03\x02\x02\x02" +
        "\u066D\u066B\x03\x02\x02\x02\u066D\u066E\x03\x02\x02\x02\u066E\u0671\x03" +
        "\x02\x02\x02\u066F\u066D\x03\x02\x02\x02\u0670\u0672\x05\u0126\x94\x02" +
        "\u0671\u0670\x03\x02\x02\x02\u0671\u0672\x03\x02\x02\x02\u0672\u0673\x03" +
        "\x02\x02\x02\u0673\u0674\x07F\x02\x02\u0674\u0676\x03\x02\x02\x02\u0675" +
        "\u0644\x03\x02\x02\x02\u0675\u065B\x03\x02\x02\x02\u0676\x8F\x03\x02\x02" +
        "\x02\u0677\u067C\x05\xA6T\x02\u0678\u0679\x05\xA2R\x02\u0679\u067A\x07" +
        "\x04\x02\x02\u067A\u067C\x03\x02\x02\x02\u067B\u0677\x03\x02\x02\x02\u067B" +
        "\u0678\x03\x02\x02\x02\u067C\x91\x03\x02\x02\x02\u067D\u0682\x05\x94K" +
        "\x02\u067E\u067F\x07\x13\x02\x02\u067F\u0681\x05\x94K\x02\u0680\u067E" +
        "\x03\x02\x02\x02\u0681\u0684\x03\x02\x02\x02\u0682\u0680\x03\x02\x02\x02" +
        "\u0682\u0683\x03\x02\x02\x02\u0683\x93\x03\x02\x02\x02\u0684\u0682\x03" +
        "\x02\x02\x02\u0685\u0687\x05\u020A\u0106\x02\u0686\u0685\x03\x02\x02\x02" +
        "\u0687\u068A\x03\x02\x02\x02\u0688\u0686\x03\x02\x02\x02\u0688\u0689\x03" +
        "\x02\x02\x02\u0689\u068B\x03\x02\x02\x02\u068A\u0688\x03\x02\x02\x02\u068B" +
        "\u068C\x05\xA2R\x02\u068C\x95\x03\x02\x02\x02\u068D\u0693\x05\x8CG\x02" +
        "\u068E\u0693\x07\x1C\x02\x02\u068F\u0693\x07\x1D\x02\x02\u0690\u0693\x07" +
        "\x1E\x02\x02\u0691\u0693\x07\x1F\x02\x02\u0692\u068D\x03\x02\x02\x02\u0692" +
        "\u068E\x03\x02\x02\x02\u0692\u068F\x03\x02\x02\x02\u0692\u0690\x03\x02" +
        "\x02\x02\u0692\u0691\x03\x02\x02\x02\u0693\x97\x03\x02\x02\x02\u0694\u0696" +
        "\x07G\x02\x02\u0695\u0697\x07E\x02\x02\u0696\u0695\x03\x02\x02\x02\u0696" +
        "\u0697\x03\x02\x02\x02\u0697\u0698\x03\x02\x02\x02\u0698\u0699\x05\u025A" +
        "\u012E\x02\u0699\u069D\x07\x04\x02\x02\u069A\u069C\x05\x9AN\x02\u069B" +
        "\u069A\x03\x02\x02\x02\u069C\u069F\x03\x02\x02\x02\u069D\u069B\x03\x02" +
        "\x02\x02\u069D\u069E\x03\x02\x02\x02\u069E\u06A0\x03\x02\x02\x02\u069F" +
        "\u069D\x03\x02\x02\x02\u06A0\u06A1\x05\u0122\x92\x02\u06A1\u06A2\x07H" +
        "\x02\x02\u06A2\u06B8\x03\x02\x02\x02\u06A3\u06A5\x07G\x02\x02\u06A4\u06A6" +
        "\x07E\x02\x02\u06A5\u06A4\x03\x02\x02\x02\u06A5\u06A6\x03\x02\x02\x02" +
        "\u06A6\u06A7\x03\x02\x02\x02\u06A7\u06A8\x05\u025A\u012E\x02\u06A8\u06AA" +
        "\x07\x12\x02\x02\u06A9\u06AB\x05\x9CO\x02\u06AA\u06A9\x03\x02\x02\x02" +
        "\u06AA\u06AB\x03\x02\x02\x02\u06AB\u06AC\x03\x02\x02\x02\u06AC\u06AD\x07" +
        "\x14\x02\x02\u06AD\u06B1\x07\x04\x02\x02\u06AE\u06B0\x05\xA6T\x02\u06AF" +
        "\u06AE\x03\x02\x02\x02\u06B0\u06B3\x03\x02\x02\x02\u06B1\u06AF\x03\x02" +
        "\x02\x02\u06B1\u06B2\x03\x02\x02\x02\u06B2\u06B4\x03\x02\x02\x02\u06B3" +
        "\u06B1\x03\x02\x02\x02\u06B4\u06B5\x05\u0122\x92\x02\u06B5\u06B6\x07H" +
        "\x02\x02\u06B6\u06B8\x03\x02\x02\x02\u06B7\u0694\x03\x02\x02\x02\u06B7" +
        "\u06A3\x03\x02\x02\x02\u06B8\x99\x03\x02\x02\x02\u06B9\u06C4\x05\xA6T" +
        "\x02\u06BA\u06BC\x05\u020A\u0106\x02\u06BB\u06BA\x03\x02\x02\x02\u06BC" +
        "\u06BF\x03\x02\x02\x02\u06BD\u06BB\x03\x02\x02\x02\u06BD\u06BE\x03\x02" +
        "\x02\x02\u06BE\u06C0\x03\x02\x02\x02\u06BF\u06BD\x03\x02\x02\x02\u06C0" +
        "\u06C1\x05\xA2R\x02\u06C1\u06C2\x07\x04\x02\x02\u06C2\u06C4\x03\x02\x02" +
        "\x02\u06C3\u06B9\x03\x02\x02\x02\u06C3\u06BD\x03\x02\x02\x02\u06C4\x9B" +
        "\x03\x02\x02\x02\u06C5\u06CA\x05\x9EP\x02\u06C6\u06C7\x07\x13\x02\x02" +
        "\u06C7\u06C9\x05\x9EP\x02\u06C8\u06C6\x03\x02\x02\x02\u06C9\u06CC\x03" +
        "\x02\x02\x02\u06CA\u06C8\x03\x02\x02\x02\u06CA\u06CB\x03\x02\x02\x02\u06CB" +
        "\x9D\x03\x02\x02\x02\u06CC\u06CA\x03\x02\x02\x02\u06CD\u06CF\x05\u020A" +
        "\u0106\x02\u06CE\u06CD\x03\x02\x02\x02\u06CF\u06D2\x03\x02\x02\x02\u06D0" +
        "\u06CE\x03\x02\x02\x02\u06D0\u06D1\x03\x02\x02\x02\u06D1\u06D3\x03\x02" +
        "\x02\x02\u06D2\u06D0\x03\x02\x02\x02\u06D3\u06D4\x05\xA2R\x02\u06D4\x9F" +
        "\x03\x02\x02\x02\u06D5\u06D7\t\b\x02\x02\u06D6\u06D8\x05R*\x02\u06D7\u06D6" +
        "\x03\x02\x02\x02\u06D7\u06D8\x03\x02\x02\x02\u06D8\u06DA\x03\x02\x02\x02" +
        "\u06D9\u06DB\x07%\x02\x02\u06DA\u06D9\x03\x02\x02\x02\u06DA\u06DB\x03" +
        "\x02\x02\x02\u06DB\u06DD\x03\x02\x02\x02\u06DC\u06DE\x07\x1B\x02\x02\u06DD" +
        "\u06DC\x03\x02\x02\x02\u06DD\u06DE\x03\x02\x02\x02\u06DE\u06E0\x03\x02" +
        "\x02\x02\u06DF\u06E1\x05\x8CG\x02\u06E0\u06DF\x03\x02\x02\x02\u06E0\u06E1" +
        "\x03\x02\x02\x02\u06E1\u06EA\x03\x02\x02\x02\u06E2\u06E4\t\b\x02\x02\u06E3" +
        "\u06E5\x05R*\x02\u06E4\u06E3\x03\x02\x02\x02\u06E4\u06E5\x03\x02\x02\x02" +
        "\u06E5\u06E7\x03\x02\x02\x02\u06E6\u06E8\x05\xA4S\x02\u06E7\u06E6\x03" +
        "\x02\x02\x02\u06E7\u06E8\x03\x02\x02\x02\u06E8\u06EA\x03\x02\x02\x02\u06E9" +
        "\u06D5\x03\x02\x02\x02\u06E9\u06E2\x03\x02\x02\x02\u06EA\xA1\x03\x02\x02" +
        "\x02\u06EB\u06EC\x05\xA0Q\x02\u06EC\u06ED\x05n8\x02\u06ED\xA3\x03\x02" +
        "\x02\x02\u06EE\u06EF\t\t\x02\x02\u06EF\xA5\x03\x02\x02\x02\u06F0\u06F2" +
        "\x05\u020A\u0106\x02\u06F1\u06F0\x03\x02\x02\x02\u06F2\u06F5\x03\x02\x02" +
        "\x02\u06F3\u06F1\x03\x02\x02\x02\u06F3\u06F4\x03\x02\x02\x02\u06F4\u06F6" +
        "\x03\x02\x02\x02\u06F5\u06F3\x03\x02\x02\x02\u06F6\u0729\x05\xA8U\x02" +
        "\u06F7\u06F9\x05\u020A\u0106\x02\u06F8\u06F7\x03\x02\x02\x02\u06F9\u06FC" +
        "\x03\x02\x02\x02\u06FA\u06F8\x03\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02" +
        "\u06FB\u06FD\x03\x02\x02\x02\u06FC\u06FA\x03\x02\x02\x02\u06FD\u0729\x05" +
        "B\"\x02\u06FE\u0700\x05\u020A\u0106\x02\u06FF\u06FE\x03\x02\x02\x02\u0700" +
        "\u0703\x03\x02\x02\x02\u0701\u06FF\x03\x02\x02\x02\u0701\u0702\x03\x02" +
        "\x02\x02\u0702\u0704\x03\x02\x02\x02\u0703\u0701\x03\x02\x02\x02\u0704" +
        "\u0729\x05F$\x02\u0705\u0707\x05\u020A\u0106\x02\u0706\u0705\x03\x02\x02" +
        "\x02\u0707\u070A\x03\x02\x02\x02\u0708\u0706\x03\x02\x02\x02\u0708\u0709" +
        "\x03\x02\x02\x02\u0709\u070B\x03\x02\x02\x02\u070A\u0708\x03\x02\x02\x02" +
        "\u070B\u0729\x054\x1B\x02\u070C\u070E\x05\u020A\u0106\x02\u070D\u070C" +
        "\x03\x02\x02\x02\u070E\u0711\x03\x02\x02\x02\u070F\u070D\x03\x02\x02\x02" +
        "\u070F\u0710\x03\x02\x02\x02\u0710\u0712\x03\x02\x02\x02\u0711\u070F\x03" +
        "\x02\x02\x02\u0712\u0729\x056\x1C\x02\u0713\u0715\x05\u020A\u0106\x02" +
        "\u0714\u0713\x03\x02\x02\x02\u0715\u0718\x03\x02\x02\x02\u0716\u0714\x03" +
        "\x02\x02\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0719\x03\x02\x02\x02\u0718" +
        "\u0716\x03\x02\x02\x02\u0719\u0729\x05J&\x02\u071A\u071C\x05\u020A\u0106" +
        "\x02\u071B\u071A\x03\x02\x02\x02\u071C\u071F\x03\x02\x02\x02\u071D\u071B" +
        "\x03\x02\x02\x02\u071D\u071E\x03\x02\x02\x02\u071E\u0720\x03\x02\x02\x02" +
        "\u071F\u071D\x03\x02\x02\x02\u0720\u0729\x05L\'\x02\u0721\u0723\x05\u020A" +
        "\u0106\x02\u0722\u0721\x03\x02\x02\x02\u0723\u0726\x03\x02\x02\x02\u0724" +
        "\u0722\x03\x02\x02\x02\u0724\u0725\x03\x02\x02\x02\u0725\u0727\x03\x02" +
        "\x02\x02\u0726\u0724\x03\x02\x02\x02\u0727\u0729\x05H%\x02\u0728\u06F3" +
        "\x03\x02\x02\x02\u0728\u06FA\x03\x02\x02\x02\u0728\u0701\x03\x02\x02\x02" +
        "\u0728\u0708\x03\x02\x02\x02\u0728\u070F\x03\x02\x02\x02\u0728\u0716\x03" +
        "\x02\x02\x02\u0728\u071D\x03\x02\x02\x02\u0728\u0724\x03\x02\x02\x02\u0729" +
        "\xA7\x03\x02\x02\x02\u072A\u072C\x07%\x02\x02\u072B\u072D\x07\x1B\x02" +
        "\x02\u072C\u072B\x03\x02\x02\x02\u072C\u072D\x03\x02\x02\x02\u072D\u072F" +
        "\x03\x02\x02\x02\u072E\u0730\x05\x8CG\x02\u072F\u072E\x03\x02\x02\x02" +
        "\u072F\u0730\x03\x02\x02\x02\u0730\u0731\x03\x02\x02\x02\u0731\u0732\x05" +
        "\xAAV\x02\u0732\u0733\x07\x04\x02\x02\u0733\xA9\x03";
    Verilog2001Parser._serializedATNSegment4 = "\x02\x02\x02\u0734\u0739\x05\xACW\x02\u0735\u0736\x07\x13\x02\x02\u0736" +
        "\u0738\x05\xACW\x02\u0737\u0735\x03\x02\x02\x02\u0738\u073B\x03\x02\x02" +
        "\x02\u0739\u0737\x03\x02\x02\x02\u0739\u073A\x03\x02\x02\x02\u073A\xAB" +
        "\x03\x02\x02\x02\u073B\u0739\x03\x02\x02\x02\u073C\u0746\x05\u0266\u0134" +
        "\x02\u073D\u073E\x05\u0266\u0134\x02\u073E\u0742\x05\x8AF\x02\u073F\u0741" +
        "\x05\x8AF\x02\u0740\u073F\x03\x02\x02\x02\u0741\u0744\x03\x02\x02\x02" +
        "\u0742\u0740\x03\x02\x02\x02\u0742\u0743\x03\x02\x02\x02\u0743\u0746\x03" +
        "\x02\x02\x02\u0744\u0742\x03\x02\x02\x02\u0745\u073C\x03\x02\x02\x02\u0745" +
        "\u073D\x03\x02\x02\x02\u0746\xAD\x03\x02\x02\x02\u0747\u0749\x05\xD2j" +
        "\x02\u0748\u074A\x05b2\x02\u0749\u0748\x03\x02\x02\x02\u0749\u074A\x03" +
        "\x02\x02\x02\u074A\u074B\x03\x02\x02\x02\u074B\u0750\x05\xB0Y\x02\u074C" +
        "\u074D\x07\x13\x02\x02\u074D\u074F\x05\xB0Y\x02\u074E\u074C\x03\x02\x02" +
        "\x02\u074F\u0752\x03\x02\x02\x02\u0750\u074E\x03\x02\x02\x02\u0750\u0751" +
        "\x03\x02\x02\x02\u0751\u0753\x03\x02\x02\x02\u0752\u0750\x03\x02\x02\x02" +
        "\u0753\u0754\x07\x04\x02\x02\u0754\u07CC\x03\x02\x02\x02\u0755\u0757\x05" +
        "\xD6l\x02\u0756\u0758\x05b2\x02\u0757\u0756\x03\x02\x02\x02\u0757\u0758" +
        "\x03\x02\x02\x02\u0758\u0759\x03\x02\x02\x02\u0759\u075E\x05\xB4[\x02" +
        "\u075A\u075B\x07\x13\x02\x02\u075B\u075D\x05\xB4[\x02\u075C\u075A\x03" +
        "\x02\x02\x02\u075D\u0760\x03\x02\x02\x02\u075E\u075C\x03\x02\x02\x02\u075E" +
        "\u075F\x03\x02\x02\x02\u075F\u0761\x03\x02\x02\x02\u0760\u075E\x03\x02" +
        "\x02\x02\u0761\u0762\x07\x04\x02\x02\u0762\u07CC\x03\x02\x02\x02\u0763" +
        "\u0764\x05\xDEp\x02\u0764\u0769\x05\xBA^\x02\u0765\u0766\x07\x13\x02\x02" +
        "\u0766\u0768\x05\xBA^\x02\u0767\u0765\x03\x02\x02\x02\u0768\u076B\x03" +
        "\x02\x02\x02\u0769\u0767\x03\x02\x02\x02\u0769\u076A\x03\x02\x02\x02\u076A" +
        "\u076C\x03\x02\x02\x02\u076B\u0769\x03\x02\x02\x02\u076C\u076D\x07\x04" +
        "\x02\x02\u076D\u07CC\x03\x02\x02\x02\u076E\u0770\x07I\x02\x02\u076F\u0771" +
        "\x05\xC2b\x02\u0770\u076F\x03\x02\x02\x02\u0770\u0771\x03\x02\x02\x02" +
        "\u0771\u0772\x03\x02\x02\x02\u0772\u0777\x05\xBE`\x02\u0773\u0774\x07" +
        "\x13\x02\x02\u0774\u0776\x05\xBE`\x02\u0775\u0773\x03\x02\x02\x02\u0776" +
        "\u0779\x03\x02\x02\x02\u0777\u0775\x03\x02\x02\x02\u0777\u0778\x03\x02" +
        "\x02\x02\u0778\u077A\x03\x02\x02\x02\u0779\u0777\x03\x02\x02\x02\u077A" +
        "\u077B\x07\x04\x02\x02\u077B\u07CC\x03\x02\x02\x02\u077C\u077E\x07J\x02" +
        "\x02\u077D\u077F\x05\xC4c\x02\u077E\u077D\x03\x02\x02\x02\u077E\u077F" +
        "\x03\x02\x02\x02\u077F\u0780\x03\x02\x02\x02\u0780\u0785\x05\xBE`\x02" +
        "\u0781\u0782\x07\x13\x02\x02\u0782\u0784\x05\xBE`\x02\u0783\u0781\x03" +
        "\x02\x02\x02\u0784\u0787\x03\x02\x02\x02\u0785\u0783\x03\x02\x02\x02\u0785" +
        "\u0786\x03\x02\x02\x02\u0786\u0788\x03\x02\x02\x02\u0787\u0785\x03\x02" +
        "\x02\x02\u0788\u0789\x07\x04\x02\x02\u0789\u07CC\x03\x02\x02\x02\u078A" +
        "\u078C\x05\xD4k\x02\u078B\u078D\x05Z.\x02\u078C\u078B\x03\x02\x02\x02" +
        "\u078C\u078D\x03\x02\x02\x02\u078D\u078F\x03\x02\x02\x02\u078E\u0790\x05" +
        "b2\x02\u078F\u078E\x03\x02\x02\x02\u078F\u0790\x03\x02\x02\x02\u0790\u0791" +
        "\x03\x02\x02\x02\u0791\u0796\x05\xB2Z\x02\u0792\u0793\x07\x13\x02\x02" +
        "\u0793\u0795\x05\xB2Z\x02\u0794\u0792\x03\x02\x02\x02\u0795\u0798\x03" +
        "\x02\x02\x02\u0796\u0794\x03\x02\x02\x02\u0796\u0797\x03\x02\x02\x02\u0797" +
        "\u0799\x03\x02\x02\x02\u0798\u0796\x03\x02\x02\x02\u0799\u079A\x07\x04" +
        "\x02\x02\u079A\u07CC\x03\x02\x02\x02\u079B\u079D\x05\xD8m\x02\u079C\u079E" +
        "\x05Z.\x02\u079D\u079C\x03\x02\x02\x02\u079D\u079E\x03\x02\x02\x02\u079E" +
        "\u07A0\x03\x02\x02\x02\u079F\u07A1\x05d3\x02\u07A0\u079F\x03\x02\x02\x02" +
        "\u07A0\u07A1\x03\x02\x02\x02\u07A1\u07A2\x03\x02\x02\x02\u07A2\u07A7\x05" +
        "\xB6\\\x02\u07A3\u07A4\x07\x13\x02\x02\u07A4\u07A6\x05\xB6\\\x02\u07A5" +
        "\u07A3\x03\x02\x02\x02\u07A6\u07A9\x03\x02\x02\x02\u07A7\u07A5\x03\x02" +
        "\x02\x02\u07A7\u07A8\x03\x02\x02\x02\u07A8\u07AA\x03\x02\x02\x02\u07A9" +
        "\u07A7\x03\x02\x02\x02\u07AA\u07AB\x07\x04\x02\x02\u07AB\u07CC\x03\x02" +
        "\x02\x02\u07AC\u07AE\x05\xDAn\x02\u07AD\u07AF\x05Z.\x02\u07AE\u07AD\x03" +
        "\x02\x02\x02\u07AE\u07AF\x03\x02\x02\x02\u07AF\u07B1\x03\x02\x02\x02\u07B0" +
        "\u07B2\x05d3\x02\u07B1\u07B0\x03\x02\x02\x02\u07B1\u07B2\x03\x02\x02\x02" +
        "\u07B2\u07B3\x03\x02\x02\x02\u07B3\u07B8\x05\xB8]\x02\u07B4\u07B5\x07" +
        "\x13\x02\x02\u07B5\u07B7\x05\xB8]\x02\u07B6\u07B4\x03\x02\x02\x02\u07B7" +
        "\u07BA\x03\x02\x02\x02\u07B8\u07B6\x03\x02\x02\x02\u07B8\u07B9\x03\x02" +
        "\x02\x02\u07B9\u07BB\x03\x02\x02\x02\u07BA\u07B8\x03\x02\x02\x02\u07BB" +
        "\u07BC\x07\x04\x02\x02\u07BC\u07CC\x03\x02\x02\x02\u07BD\u07BF\x05\xDC" +
        "o\x02\u07BE\u07C0\x05d3\x02\u07BF\u07BE\x03\x02\x02\x02\u07BF\u07C0\x03" +
        "\x02\x02\x02\u07C0\u07C1\x03\x02\x02\x02\u07C1\u07C6\x05\xBC_\x02\u07C2" +
        "\u07C3\x07\x13\x02\x02\u07C3\u07C5\x05\xBC_\x02\u07C4\u07C2\x03\x02\x02" +
        "\x02\u07C5\u07C8\x03\x02\x02\x02\u07C6\u07C4\x03\x02\x02\x02\u07C6\u07C7" +
        "\x03\x02\x02\x02\u07C7\u07C9\x03\x02\x02\x02\u07C8\u07C6\x03\x02\x02\x02" +
        "\u07C9\u07CA\x07\x04\x02\x02\u07CA\u07CC\x03\x02\x02\x02\u07CB\u0747\x03" +
        "\x02\x02\x02\u07CB\u0755\x03\x02\x02\x02\u07CB\u0763\x03\x02\x02\x02\u07CB" +
        "\u076E\x03\x02\x02\x02\u07CB\u077C\x03\x02\x02\x02\u07CB\u078A\x03\x02" +
        "\x02\x02\u07CB\u079B\x03\x02\x02\x02\u07CB\u07AC\x03\x02\x02\x02\u07CB" +
        "\u07BD\x03\x02\x02\x02\u07CC\xAF\x03\x02\x02\x02\u07CD\u07CF\x05\xC0a" +
        "\x02\u07CE\u07CD\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF\u07D0" +
        "\x03\x02\x02\x02\u07D0\u07D1\x07\x12\x02\x02\u07D1\u07D2\x05\xD0i\x02" +
        "\u07D2\u07D3\x07\x13\x02\x02\u07D3\u07D4\x05\xCCg\x02\u07D4\u07D5\x07" +
        "\x13\x02\x02\u07D5\u07D6\x05\xC8e\x02\u07D6\u07D7\x07\x13\x02\x02\u07D7" +
        "\u07D8\x05\xCAf\x02\u07D8\u07D9\x07\x14\x02\x02\u07D9\xB1\x03\x02\x02" +
        "\x02\u07DA\u07DC\x05\xC0a\x02\u07DB\u07DA\x03\x02\x02\x02\u07DB\u07DC" +
        "\x03\x02\x02\x02\u07DC\u07DD\x03\x02\x02\x02\u07DD\u07DE\x07\x12\x02\x02" +
        "\u07DE\u07DF\x05\xD0i\x02\u07DF\u07E0\x07\x13\x02\x02\u07E0\u07E1\x05" +
        "\xCCg\x02\u07E1\u07E2\x07\x13\x02\x02\u07E2\u07E3\x05\xC6d\x02\u07E3\u07E4" +
        "\x07\x14\x02\x02\u07E4\xB3\x03\x02\x02\x02\u07E5\u07E7\x05\xC0a\x02\u07E6" +
        "\u07E5\x03\x02\x02\x02\u07E6\u07E7\x03\x02\x02\x02\u07E7\u07E8\x03\x02" +
        "\x02\x02\u07E8\u07E9\x07\x12\x02\x02\u07E9\u07EA\x05\xD0i\x02\u07EA\u07EB" +
        "\x07\x13\x02\x02\u07EB\u07EC\x05\xCCg\x02\u07EC\u07ED\x07\x13\x02\x02" +
        "\u07ED\u07EE\x05\xC6d\x02\u07EE\u07EF\x07\x14\x02\x02\u07EF\xB5\x03\x02" +
        "\x02\x02\u07F0\u07F2\x05\xC0a\x02\u07F1\u07F0\x03\x02\x02\x02\u07F1\u07F2" +
        "\x03\x02\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3\u07F4\x07\x12\x02\x02" +
        "\u07F4\u07F5\x05\xD0i\x02\u07F5\u07F6\x07\x13\x02\x02\u07F6\u07FB\x05" +
        "\xCCg\x02\u07F7\u07F8\x07\x13\x02\x02\u07F8\u07FA\x05\xCCg\x02\u07F9\u07F7" +
        "\x03\x02\x02\x02\u07FA\u07FD\x03\x02\x02\x02\u07FB\u07F9\x03\x02\x02\x02" +
        "\u07FB\u07FC\x03\x02\x02\x02\u07FC\u07FE\x03\x02\x02\x02\u07FD\u07FB\x03" +
        "\x02\x02\x02\u07FE\u07FF\x07\x14\x02\x02\u07FF\xB7\x03\x02\x02\x02\u0800" +
        "\u0802\x05\xC0a\x02\u0801\u0800\x03\x02\x02\x02\u0801\u0802\x03\x02\x02" +
        "\x02\u0802\u0803\x03\x02\x02\x02\u0803\u0804\x07\x12\x02\x02\u0804\u0809" +
        "\x05\xD0i\x02\u0805\u0806\x07\x13\x02\x02\u0806\u0808\x05\xD0i\x02\u0807" +
        "\u0805\x03\x02\x02\x02\u0808\u080B\x03\x02\x02\x02\u0809\u0807\x03\x02" +
        "\x02\x02\u0809\u080A\x03\x02\x02\x02\u080A\u080C\x03\x02\x02\x02\u080B" +
        "\u0809\x03\x02\x02\x02\u080C\u080D\x07\x13\x02\x02\u080D\u080E\x05\xCC" +
        "g\x02\u080E\u080F\x07\x14\x02\x02\u080F\xB9\x03\x02\x02\x02\u0810\u0812" +
        "\x05\xC0a\x02\u0811\u0810\x03\x02\x02\x02\u0811\u0812\x03\x02\x02\x02" +
        "\u0812\u0813\x03\x02\x02\x02\u0813\u0814\x07\x12\x02\x02\u0814\u0815\x05" +
        "\xCEh\x02\u0815\u0816\x07\x13\x02\x02\u0816\u0817\x05\xCEh\x02\u0817\u0818" +
        "\x07\x14\x02\x02\u0818\xBB\x03\x02\x02\x02\u0819\u081B\x05\xC0a\x02\u081A" +
        "\u0819\x03\x02\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u081C\x03\x02" +
        "\x02\x02\u081C\u081D\x07\x12\x02\x02\u081D\u081E\x05\xCEh\x02\u081E\u081F" +
        "\x07\x13\x02\x02\u081F\u0820\x05\xCEh\x02\u0820\u0821\x07\x13\x02\x02" +
        "\u0821\u0822\x05\xC6d\x02\u0822\u0823\x07\x14\x02\x02\u0823\xBD\x03\x02" +
        "\x02\x02\u0824\u0826\x05\xC0a\x02\u0825\u0824\x03\x02\x02\x02\u0825\u0826" +
        "\x03\x02\x02\x02\u0826\u0827\x03\x02\x02\x02\u0827\u0828\x07\x12\x02\x02" +
        "\u0828\u0829\x05\xD0i\x02\u0829\u082A\x07\x14\x02\x02\u082A\xBF\x03\x02" +
        "\x02\x02\u082B\u082D\x05\u0220\u0111\x02\u082C\u082E\x05\x8CG\x02\u082D" +
        "\u082C\x03\x02\x02\x02\u082D\u082E\x03\x02\x02\x02\u082E\xC1\x03\x02\x02" +
        "\x02\u082F\u0830\x07\x12\x02\x02\u0830\u0831\x05\\/\x02\u0831\u0832\x07" +
        "\x13\x02\x02\u0832\u0833\x05^0\x02\u0833\u0834\x07\x14\x02\x02\u0834\u0840" +
        "\x03\x02\x02\x02\u0835\u0836\x07\x12\x02\x02\u0836\u0837\x05^0\x02\u0837" +
        "\u0838\x07\x13\x02\x02\u0838\u0839\x05\\/\x02\u0839\u083A\x07\x14\x02" +
        "\x02\u083A\u0840\x03\x02\x02\x02\u083B\u083C\x07\x12\x02\x02\u083C\u083D" +
        "\x05\\/\x02\u083D\u083E\x07\x14\x02\x02\u083E\u0840\x03\x02\x02\x02\u083F" +
        "\u082F\x03\x02\x02\x02\u083F\u0835\x03\x02\x02\x02\u083F\u083B\x03\x02" +
        "\x02\x02\u0840\xC3\x03\x02\x02\x02\u0841\u0842\x07\x12\x02\x02\u0842\u0843" +
        "\x05\\/\x02\u0843\u0844\x07\x13\x02\x02\u0844\u0845\x05^0\x02\u0845\u0846" +
        "\x07\x14\x02\x02\u0846\u0852\x03\x02\x02\x02\u0847\u0848\x07\x12\x02\x02" +
        "\u0848\u0849\x05^0\x02\u0849\u084A\x07\x13\x02\x02\u084A\u084B\x05\\/" +
        "\x02\u084B\u084C\x07\x14\x02\x02\u084C\u0852\x03\x02\x02\x02\u084D\u084E" +
        "\x07\x12\x02\x02\u084E\u084F\x05^0\x02\u084F\u0850\x07\x14\x02\x02\u0850" +
        "\u0852\x03\x02\x02\x02\u0851\u0841\x03\x02\x02\x02\u0851\u0847\x03\x02" +
        "\x02\x02\u0851\u084D\x03\x02\x02\x02\u0852\xC5\x03\x02\x02\x02\u0853\u0854" +
        "\x05\u01E0\xF1\x02\u0854\xC7\x03\x02\x02\x02\u0855\u0856\x05\u01E0\xF1" +
        "\x02\u0856\xC9\x03\x02\x02\x02\u0857\u0858\x05\u01E0\xF1\x02\u0858\xCB" +
        "\x03\x02\x02\x02\u0859\u085A\x05\u01E0\xF1\x02\u085A\xCD\x03\x02\x02\x02" +
        "\u085B\u085C\x05\u01FA\xFE\x02\u085C\xCF\x03\x02\x02\x02\u085D\u085E\x05" +
        "\u01FA\xFE\x02\u085E\xD1\x03\x02\x02\x02\u085F\u0860\t\n\x02\x02\u0860" +
        "\xD3\x03\x02\x02\x02\u0861\u0862\t\v\x02\x02\u0862\xD5\x03\x02\x02\x02" +
        "\u0863\u0864\t\f\x02\x02\u0864\xD7\x03\x02\x02\x02\u0865\u0866\t\r\x02" +
        "\x02\u0866\xD9\x03\x02\x02\x02\u0867\u0868\t\x0E\x02\x02\u0868\xDB\x03" +
        "\x02\x02\x02\u0869\u086A\t\x0F\x02\x02\u086A\xDD\x03\x02\x02\x02\u086B" +
        "\u086C\t\x10\x02\x02\u086C\xDF\x03\x02\x02\x02\u086D\u086F\x05\u0242\u0122" +
        "\x02\u086E\u0870\x05\xE2r\x02\u086F\u086E\x03\x02\x02\x02\u086F\u0870" +
        "\x03\x02\x02\x02\u0870\u0871\x03\x02\x02\x02\u0871\u0876\x05\xEAv\x02" +
        "\u0872\u0873\x07\x13\x02\x02\u0873\u0875\x05\xEAv\x02\u0874\u0872\x03" +
        "\x02\x02\x02\u0875\u0878\x03\x02\x02\x02\u0876\u0874\x03\x02\x02\x02\u0876" +
        "\u0877\x03\x02\x02\x02\u0877\u0879\x03\x02\x02\x02\u0878\u0876\x03\x02" +
        "\x02\x02\u0879\u087A\x07\x04\x02\x02\u087A\xE1\x03\x02\x02\x02\u087B\u087C" +
        "\x07\x11\x02\x02\u087C\u087D\x07\x12\x02\x02\u087D\u087E\x05\xE4s\x02" +
        "\u087E\u087F\x07\x14\x02\x02\u087F\xE3\x03\x02\x02\x02\u0880\u0885\x05" +
        "\xE6t\x02\u0881\u0882\x07\x13\x02\x02\u0882\u0884\x05\xE6t\x02\u0883\u0881" +
        "\x03\x02\x02\x02\u0884\u0887\x03\x02\x02\x02\u0885\u0883\x03\x02\x02\x02" +
        "\u0885\u0886\x03\x02\x02\x02\u0886\u0891\x03\x02\x02\x02\u0887\u0885\x03" +
        "\x02\x02\x02\u0888\u088D\x05\xE8u\x02\u0889\u088A\x07\x13\x02\x02\u088A" +
        "\u088C\x05\xE8u\x02\u088B\u0889\x03\x02\x02\x02\u088C\u088F\x03\x02\x02" +
        "\x02\u088D\u088B\x03\x02\x02\x02\u088D\u088E\x03\x02\x02\x02\u088E\u0891" +
        "\x03\x02\x02\x02\u088F\u088D\x03\x02\x02\x02\u0890\u0880\x03\x02\x02\x02" +
        "\u0890\u0888\x03\x02\x02\x02\u0891\xE5\x03\x02\x02\x02\u0892\u0893\x05" +
        "\u01E0\xF1\x02\u0893\xE7\x03\x02\x02\x02\u0894\u0895\x07\x07\x02\x02\u0895" +
        "\u0896\x05\u024A\u0126\x02\u0896\u0898\x07\x12\x02\x02\u0897\u0899\x05" +
        "\u01E0\xF1\x02\u0898\u0897\x03\x02\x02\x02\u0898\u0899\x03\x02\x02\x02" +
        "\u0899\u089A\x03\x02\x02\x02\u089A\u089B\x07\x14\x02\x02\u089B\xE9\x03" +
        "\x02\x02\x02\u089C\u089D\x05\xECw\x02\u089D\u089E\x07\x12\x02\x02\u089E" +
        "\u089F\x05\xEEx\x02\u089F\u08A0\x07\x14\x02\x02\u08A0\xEB\x03\x02\x02" +
        "\x02\u08A1\u08A3\x05\u0244\u0123\x02\u08A2\u08A4\x05\x8CG\x02\u08A3\u08A2" +
        "\x03\x02\x02\x02\u08A3\u08A4\x03\x02\x02\x02\u08A4\xED\x03\x02\x02\x02" +
        "\u08A5\u08AA\x05\xF0y\x02\u08A6\u08A7\x07\x13\x02\x02\u08A7\u08A9\x05" +
        "\xF0y\x02\u08A8\u08A6\x03\x02\x02\x02\u08A9\u08AC\x03\x02\x02\x02\u08AA" +
        "\u08A8\x03\x02\x02\x02\u08AA\u08AB\x03\x02\x02\x02\u08AB\u08B6\x03\x02" +
        "\x02\x02\u08AC\u08AA\x03\x02\x02\x02\u08AD\u08B2\x05\xF2z\x02\u08AE\u08AF" +
        "\x07\x13\x02\x02\u08AF\u08B1\x05\xF2z\x02\u08B0\u08AE\x03\x02\x02\x02" +
        "\u08B1\u08B4\x03\x02\x02\x02\u08B2\u08B0\x03\x02\x02\x02\u08B2\u08B3\x03" +
        "\x02\x02\x02\u08B3\u08B6\x03\x02\x02\x02\u08B4\u08B2\x03\x02\x02\x02\u08B5" +
        "\u08A5\x03\x02\x02\x02\u08B5\u08AD\x03\x02\x02\x02\u08B6\xEF\x03\x02\x02" +
        "\x02\u08B7\u08B9\x05\u020A\u0106\x02\u08B8\u08B7\x03\x02\x02\x02\u08B9" +
        "\u08BC\x03\x02\x02\x02\u08BA\u08B8\x03\x02\x02\x02\u08BA\u08BB\x03\x02" +
        "\x02\x02\u08BB\u08BE\x03\x02\x02\x02\u08BC\u08BA\x03\x02\x02\x02\u08BD" +
        "\u08BF\x05\u01E0\xF1\x02\u08BE\u08BD\x03\x02\x02\x02\u08BE\u08BF\x03\x02" +
        "\x02\x02\u08BF\xF1\x03\x02\x02\x02\u08C0\u08C2\x05\u020A\u0106\x02\u08C1" +
        "\u08C0\x03\x02\x02\x02\u08C2\u08C5\x03\x02\x02\x02\u08C3\u08C1\x03\x02" +
        "\x02\x02\u08C3\u08C4\x03\x02\x02\x02\u08C4\u08C6\x03\x02\x02\x02\u08C5" +
        "\u08C3\x03\x02\x02\x02\u08C6\u08C7\x07\x07\x02\x02\u08C7\u08C8\x05\u024C" +
        "\u0127\x02\u08C8\u08CA\x07\x12\x02\x02\u08C9\u08CB\x05\u01E0\xF1\x02\u08CA" +
        "\u08C9\x03\x02\x02\x02\u08CA\u08CB\x03\x02\x02\x02\u08CB\u08CC\x03\x02" +
        "\x02\x02\u08CC\u08CD\x07\x14\x02\x02\u08CD\xF3\x03\x02\x02\x02\u08CE\u08D2" +
        "\x07c\x02\x02\u08CF\u08D1\x05\xF8}\x02\u08D0\u08CF\x03\x02\x02\x02\u08D1" +
        "\u08D4\x03\x02\x02\x02\u08D2\u08D0\x03\x02\x02\x02\u08D2\u08D3\x03\x02" +
        "\x02\x02\u08D3\u08D5\x03\x02\x02\x02\u08D4\u08D2\x03\x02\x02\x02\u08D5" +
        "\u08D6\x07d\x02\x02\u08D6\xF5\x03\x02\x02\x02\u08D7\u08DA\x05\xF8}\x02" +
        "\u08D8\u08DA\x07\x04\x02\x02\u08D9\u08D7\x03\x02\x02\x02\u08D9\u08D8\x03" +
        "\x02\x02\x02\u08DA\xF7\x03\x02\x02\x02\u08DB\u08E1\x05\xFA~\x02\u08DC" +
        "\u08E1\x05\xFC\x7F\x02\u08DD\u08E1\x05\u0100\x81\x02\u08DE\u08E1\x05\u0104" +
        "\x83\x02\u08DF\u08E1\x05,\x17\x02\u08E0\u08DB\x03\x02\x02\x02\u08E0\u08DC" +
        "\x03\x02\x02\x02\u08E0\u08DD\x03\x02\x02\x02\u08E0\u08DE\x03\x02\x02\x02" +
        "\u08E0\u08DF\x03\x02\x02\x02\u08E1\xF9\x03\x02\x02\x02\u08E2\u08E3\x07" +
        "e\x02\x02\u08E3\u08E4\x07\x12\x02\x02\u08E4\u08E5\x05\u01D8\xED\x02\u08E5" +
        "\u08E6\x07\x14\x02\x02\u08E6\u08E9\x05\xF6|\x02\u08E7\u08E8\x07f\x02\x02" +
        "\u08E8\u08EA\x05\xF6|\x02\u08E9\u08E7\x03\x02\x02\x02\u08E9\u08EA\x03" +
        "\x02\x02\x02\u08EA\xFB\x03\x02\x02\x02\u08EB\u08EC\x07g\x02\x02\u08EC" +
        "\u08ED\x07\x12\x02\x02\u08ED\u08EE\x05\u01D8\xED\x02\u08EE\u08EF\x07\x14" +
        "\x02\x02\u08EF\u08F3\x05\xFE\x80\x02\u08F0\u08F2\x05\xFE\x80\x02\u08F1" +
        "\u08F0\x03\x02\x02\x02\u08F2\u08F5\x03\x02\x02\x02\u08F3\u08F1\x03\x02" +
        "\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4\u08F6\x03\x02\x02\x02\u08F5" +
        "\u08F3\x03\x02\x02\x02\u08F6\u08F7\x07h\x02\x02\u08F7\xFD\x03\x02\x02" +
        "\x02\u08F8\u08FD\x05\u01D8\xED\x02\u08F9\u08FA\x07\x13\x02\x02\u08FA\u08FC" +
        "\x05\u01D8\xED\x02\u08FB\u08F9\x03\x02\x02\x02\u08FC\u08FF\x03\x02\x02" +
        "\x02\u08FD\u08FB\x03\x02\x02\x02\u08FD\u08FE\x03\x02\x02\x02\u08FE\u0900" +
        "\x03\x02\x02\x02\u08FF\u08FD\x03\x02\x02\x02\u0900\u0901\x07C\x02\x02" +
        "\u0901\u0902\x05\xF6|\x02\u0902\u0909\x03\x02\x02\x02\u0903\u0905\x07" +
        "\b\x02\x02\u0904\u0906\x07C\x02\x02\u0905\u0904\x03\x02\x02\x02\u0905" +
        "\u0906\x03\x02\x02\x02\u0906\u0907\x03\x02\x02\x02\u0907\u0909\x05\xF6" +
        "|\x02\u0908\u08F8\x03\x02\x02\x02\u0908\u0903\x03\x02\x02\x02\u0909\xFF" +
        "\x03\x02\x02\x02\u090A\u090B\x07i\x02\x02\u090B\u090C\x07\x12\x02\x02" +
        "\u090C\u090D\x05\u0102\x82\x02\u090D\u090E\x07\x04\x02\x02\u090E\u090F" +
        "\x05\u01D8\xED\x02\u090F\u0910\x07\x04\x02\x02\u0910\u0911\x05\u0102\x82" +
        "\x02\u0911\u0912\x07\x14\x02\x02\u0912\u0913\x05\u0104\x83\x02\u0913\u0101" +
        "\x03\x02\x02\x02\u0914\u0915\x05\u0226\u0114\x02\u0915\u0916\x075\x02" +
        "\x02\u0916\u0917\x05\u01D8\xED\x02\u0917\u0103\x03\x02\x02\x02\u0918\u091B" +
        "\x07j\x02\x02\u0919\u091A\x07C\x02\x02\u091A\u091C\x05\u0222\u0112\x02" +
        "\u091B\u0919\x03\x02\x02\x02\u091B\u091C\x03\x02\x02\x02\u091C\u0920\x03" +
        "\x02\x02\x02\u091D\u091F\x05\xF8}\x02\u091E\u091D\x03\x02\x02\x02\u091F" +
        "\u0922\x03\x02\x02\x02\u0920\u091E\x03\x02\x02\x02\u0920\u0921\x03\x02" +
        "\x02\x02\u0921\u0923\x03\x02\x02\x02\u0922\u0920\x03\x02\x02\x02\u0923" +
        "\u0924\x07k\x02\x02\u0924\u0105\x03\x02\x02\x02\u0925\u0927\x07l\x02\x02" +
        "\u0926\u0928\x05Z.\x02\u0927\u0926\x03\x02\x02\x02\u0927\u0928\x03\x02" +
        "\x02\x02\u0928\u092A\x03\x02\x02\x02\u0929\u092B\x05b2\x02\u092A\u0929" +
        "\x03\x02\x02\x02\u092A\u092B\x03\x02\x02\x02\u092B\u092C\x03\x02\x02\x02" +
        "\u092C\u092D\x05\u0108\x85\x02\u092D\u092E\x07\x04\x02\x02\u092E\u0107" +
        "\x03\x02\x02\x02\u092F\u0934\x05\u010A\x86\x02\u0930\u0931\x07\x13\x02" +
        "\x02\u0931\u0933\x05\u010A\x86\x02\u0932\u0930\x03\x02\x02\x02\u0933\u0936" +
        "\x03\x02\x02\x02\u0934\u0932\x03\x02\x02\x02\u0934\u0935\x03\x02\x02\x02" +
        "\u0935\u0109\x03\x02\x02\x02\u0936\u0934\x03\x02\x02\x02\u0937\u0938\x05" +
        "\u01FA\xFE\x02\u0938\u0939\x075\x02\x02\u0939\u093A\x05\u01E0\xF1\x02" +
        "\u093A\u010B\x03\x02\x02\x02\u093B\u093C\x07m\x02\x02\u093C\u093D\x05" +
        "\u0122\x92\x02\u093D\u010D\x03\x02\x02\x02\u093E\u093F\x07n\x02\x02\u093F" +
        "\u0940\x05\u0122\x92\x02\u0940\u010F\x03\x02\x02\x02\u0941\u0942\x05\u01FC" +
        "\xFF\x02\u0942\u0944\x075\x02\x02\u0943\u0945\x05\u0128\x95\x02\u0944" +
        "\u0943\x03\x02\x02\x02\u0944\u0945\x03\x02\x02\x02\u0945\u0946\x03\x02" +
        "\x02\x02\u0946\u0947\x05\u01E0\xF1\x02\u0947\u0111\x03\x02\x02\x02\u0948" +
        "\u0949\x05\u01FC\xFF\x02\u0949\u094B\x07o\x02\x02\u094A\u094C\x05\u0128" +
        "\x95\x02\u094B\u094A\x03\x02\x02\x02\u094B\u094C\x03\x02\x02\x02\u094C" +
        "\u094D\x03\x02\x02\x02\u094D\u094E\x05\u01E0\xF1\x02\u094E\u0113\x03\x02" +
        "\x02\x02\u094F\u0950\x07l\x02\x02\u0950\u095C\x05\u011C\x8F\x02\u0951" +
        "\u0952\x07p\x02\x02\u0952\u095C\x05\u01FC\xFF\x02\u0953\u0954\x07q\x02" +
        "\x02\u0954\u095C\x05\u011C\x8F\x02\u0955\u0956\x07q\x02\x02\u0956\u095C" +
        "\x05\u010A\x86\x02\u0957\u0958\x07r\x02\x02\u0958\u095C\x05\u01FC\xFF" +
        "\x02\u0959\u095A\x07r\x02\x02\u095A\u095C\x05\u01FA\xFE\x02\u095B\u094F" +
        "\x03\x02\x02\x02\u095B\u0951\x03\x02\x02\x02\u095B\u0953\x03\x02\x02\x02" +
        "\u095B\u0955\x03\x02\x02\x02\u095B\u0957\x03\x02\x02\x02\u095B\u0959\x03" +
        "\x02\x02\x02\u095C\u0115\x03\x02\x02\x02\u095D\u095E\x05\u01FC\xFF\x02" +
        "\u095E\u095F\x075\x02\x02\u095F\u0960\x05\u01E0\xF1\x02\u0960\u0117\x03" +
        "\x02\x02\x02\u0961\u096A\x05\u0126\x94\x02\u0962\u0964\x05\u020A\u0106" +
        "\x02\u0963\u0962\x03\x02\x02\x02\u0964\u0967\x03\x02\x02\x02\u0965\u0963" +
        "\x03\x02\x02\x02\u0965\u0966\x03\x02\x02\x02\u0966\u0968\x03\x02\x02\x02" +
        "\u0967\u0965\x03\x02\x02\x02\u0968\u096A\x07\x04\x02\x02\u0969\u0961\x03" +
        "\x02\x02\x02\u0969\u0965\x03\x02\x02\x02\u096A\u0119\x03\x02\x02\x02\u096B" +
        "\u0974\x07j\x02\x02\u096C\u096D\x07C\x02\x02\u096D\u0971\x05\u0212\u010A" +
        "\x02\u096E\u0970\x05\xA6T\x02\u096F\u096E\x03\x02\x02\x02\u0970\u0973" +
        "\x03\x02\x02\x02\u0971\u096F\x03\x02\x02\x02\u0971\u0972\x03\x02\x02\x02" +
        "\u0972\u0975\x03\x02\x02\x02\u0973\u0971\x03\x02\x02\x02\u0974\u096C\x03" +
        "\x02\x02\x02\u0974\u0975\x03\x02\x02\x02\u0975\u0979\x03\x02\x02\x02\u0976" +
        "\u0978\x05\u0126\x94\x02\u0977\u0976\x03\x02\x02\x02\u0978\u097B\x03\x02" +
        "\x02\x02\u0979\u0977\x03\x02\x02\x02\u0979\u097A\x03\x02\x02\x02\u097A" +
        "\u097C\x03\x02\x02\x02\u097B\u0979\x03\x02\x02\x02\u097C\u097D\x07k\x02" +
        "\x02\u097D\u011B\x03\x02\x02\x02\u097E\u097F\x05\u01FC\xFF\x02\u097F\u0980" +
        "\x075\x02\x02\u0980\u0981\x05\u01E0\xF1\x02\u0981\u011D\x03\x02\x02\x02" +
        "\u0982\u098B\x07s\x02\x02\u0983\u0984\x07C\x02\x02\u0984\u0988\x05\u0212" +
        "\u010A\x02\u0985\u0987\x05\xA6T\x02\u0986\u0985\x03\x02\x02\x02\u0987" +
        "\u098A\x03\x02\x02\x02\u0988\u0986\x03\x02\x02\x02\u0988\u0989\x03\x02" +
        "\x02\x02\u0989\u098C\x03\x02\x02\x02\u098A\u0988\x03\x02\x02\x02\u098B" +
        "\u0983\x03\x02\x02\x02\u098B\u098C\x03\x02\x02\x02\u098C\u0990\x03\x02" +
        "\x02\x02\u098D\u098F\x05\u0122\x92\x02\u098E\u098D\x03\x02\x02\x02\u098F" +
        "\u0992\x03\x02\x02\x02\u0990\u098E\x03\x02\x02\x02\u0990\u0991\x03\x02" +
        "\x02\x02\u0991\u0993\x03\x02\x02\x02\u0992\u0990\x03\x02\x02\x02\u0993" +
        "\u0994\x07t\x02\x02\u0994\u011F\x03\x02\x02\x02\u0995\u099E\x07j\x02\x02" +
        "\u0996\u0997\x07C\x02\x02\u0997\u099B\x05\u0212\u010A\x02\u0998\u099A" +
        "\x05\xA6T\x02\u0999\u0998\x03\x02\x02\x02\u099A\u099D\x03\x02\x02\x02" +
        "\u099B\u0999\x03\x02\x02\x02\u099B\u099C\x03\x02\x02\x02\u099C\u099F\x03" +
        "\x02\x02\x02\u099D\u099B\x03\x02\x02\x02\u099E\u0996\x03\x02\x02\x02\u099E" +
        "\u099F\x03\x02\x02\x02\u099F\u09A3\x03\x02\x02\x02\u09A0\u09A2\x05\u0122" +
        "\x92\x02\u09A1\u09A0\x03\x02\x02\x02\u09A2\u09A5\x03\x02\x02\x02\u09A3" +
        "\u09A1\x03\x02\x02\x02\u09A3\u09A4\x03\x02\x02\x02\u09A4\u09A6\x03\x02" +
        "\x02\x02\u09A5\u09A3\x03\x02\x02\x02\u09A6\u09A7\x07k\x02\x02\u09A7\u0121" +
        "\x03\x02\x02\x02\u09A8\u09AA\x05\u020A\u0106\x02\u09A9\u09A8\x03\x02\x02" +
        "\x02\u09AA\u09AD\x03\x02\x02\x02\u09AB\u09A9\x03\x02\x02\x02\u09AB\u09AC" +
        "\x03\x02\x02\x02\u09AC\u09AE\x03\x02\x02\x02\u09AD\u09AB\x03\x02\x02\x02" +
        "\u09AE\u09AF\x05\u0110\x89\x02\u09AF\u09B0\x07\x04\x02\x02\u09B0\u0A11" +
        "\x03\x02\x02\x02\u09B1\u09B3\x05\u020A\u0106\x02\u09B2\u09B1\x03\x02\x02" +
        "\x02\u09B3\u09B6\x03\x02\x02\x02\u09B4\u09B2\x03\x02\x02\x02\u09B4\u09B5" +
        "\x03\x02\x02\x02\u09B5\u09B7\x03\x02\x02\x02\u09B6\u09B4\x03\x02\x02\x02" +
        "\u09B7\u0A11\x05\u0142\xA2\x02\u09B8\u09BA\x05\u020A\u0106\x02\u09B9\u09B8" +
        "\x03\x02\x02\x02\u09BA\u09BD\x03\x02\x02\x02\u09BB\u09B9\x03\x02\x02\x02" +
        "\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BE\x03\x02\x02\x02\u09BD\u09BB\x03" +
        "\x02\x02\x02\u09BE\u0A11\x05\u013A\x9E\x02\u09BF\u09C1\x05\u020A\u0106" +
        "\x02\u09C0\u09BF\x03\x02\x02\x02\u09C1\u09C4\x03\x02\x02\x02\u09C2\u09C0" +
        "\x03\x02\x02\x02\u09C2\u09C3\x03\x02\x02\x02\u09C3\u09C5\x03\x02\x02\x02" +
        "\u09C4\u09C2\x03\x02\x02\x02\u09C5\u0A11\x05\u012C\x97\x02\u09C6\u09C8" +
        "\x05\u020A\u0106\x02\u09C7\u09C6\x03\x02\x02\x02\u09C8\u09CB\x03\x02\x02" +
        "\x02\u09C9\u09C7\x03\x02\x02\x02\u09C9\u09CA\x03\x02\x02\x02\u09CA\u09CC" +
        "\x03\x02\x02\x02\u09CB\u09C9\x03\x02\x02\x02\u09CC\u0A11\x05\u0130\x99" +
        "\x02\u09CD\u09CF\x05\u020A\u0106\x02\u09CE\u09CD\x03\x02\x02\x02\u09CF" +
        "\u09D2\x03\x02\x02\x02\u09D0\u09CE\x03\x02\x02\x02\u09D0\u09D1\x03\x02" +
        "\x02\x02\u09D1\u09D3\x03\x02\x02\x02\u09D2\u09D0\x03\x02\x02\x02\u09D3" +
        "\u0A11\x05\u014C\xA7\x02\u09D4\u09D6\x05\u020A\u0106\x02\u09D5\u09D4\x03" +
        "\x02\x02\x02\u09D6\u09D9\x03\x02\x02\x02\u09D7\u09D5\x03\x02\x02\x02\u09D7" +
        "\u09D8\x03\x02\x02\x02\u09D8\u09DA\x03\x02\x02\x02\u09D9\u09D7\x03\x02" +
        "\x02\x02\u09DA\u09DB\x05\u0112\x8A\x02\u09DB\u09DC\x07\x04\x02\x02\u09DC" +
        "\u0A11\x03\x02\x02\x02\u09DD\u09DF\x05\u020A\u0106\x02\u09DE\u09DD\x03" +
        "\x02\x02\x02\u09DF\u09E2\x03\x02\x02\x02\u09E0\u09DE\x03\x02\x02\x02\u09E0" +
        "\u09E1\x03\x02\x02\x02\u09E1\u09E3\x03\x02\x02\x02\u09E2\u09E0\x03\x02" +
        "\x02\x02\u09E3\u0A11\x05\u011E\x90\x02\u09E4\u09E6\x05\u020A\u0106\x02" +
        "\u09E5\u09E4\x03\x02\x02\x02\u09E6\u09E9\x03\x02\x02\x02\u09E7\u09E5\x03" +
        "\x02\x02\x02\u09E7\u09E8\x03\x02\x02\x02\u09E8\u09EA\x03\x02\x02\x02\u09E9" +
        "\u09E7\x03\x02\x02\x02\u09EA\u09EB\x05\u0114\x8B\x02\u09EB\u09EC\x07\x04" +
        "\x02\x02\u09EC\u0A11\x03\x02\x02\x02\u09ED\u09EF\x05\u020A\u0106\x02\u09EE" +
        "\u09ED\x03\x02\x02\x02\u09EF\u09F2\x03\x02\x02\x02\u09F0\u09EE\x03\x02" +
        "\x02\x02\u09F0\u09F1\x03\x02\x02\x02\u09F1\u09F3\x03\x02\x02\x02\u09F2" +
        "\u09F0\x03\x02\x02\x02\u09F3\u0A11\x05\u0136\x9C\x02\u09F4\u09F6\x05\u020A" +
        "\u0106\x02\u09F5\u09F4\x03\x02\x02\x02\u09F6\u09F9\x03\x02\x02\x02\u09F7" +
        "\u09F5\x03\x02\x02\x02\u09F7\u09F8\x03\x02\x02\x02\u09F8\u09FA\x03\x02" +
        "\x02\x02\u09F9\u09F7\x03\x02\x02\x02\u09FA\u0A11\x05\u0120\x91\x02\u09FB" +
        "\u09FD\x05\u020A\u0106\x02\u09FC\u09FB\x03\x02\x02\x02\u09FD\u0A00\x03" +
        "\x02\x02\x02\u09FE\u09FC\x03\x02\x02\x02\u09FE\u09FF\x03\x02\x02\x02\u09FF" +
        "\u0A01\x03\x02\x02\x02\u0A00\u09FE\x03\x02\x02\x02\u0A01\u0A11\x05\u014E" +
        "\xA8\x02\u0A02\u0A04\x05\u020A\u0106\x02\u0A03\u0A02\x03\x02\x02\x02\u0A04" +
        "\u0A07\x03\x02\x02\x02\u0A05\u0A03\x03\x02\x02\x02\u0A05\u0A06\x03\x02" +
        "\x02\x02\u0A06\u0A08\x03\x02\x02\x02\u0A07\u0A05\x03\x02\x02\x02\u0A08" +
        "\u0A11\x05\u0150\xA9\x02\u0A09\u0A0B\x05\u020A\u0106";
    Verilog2001Parser._serializedATNSegment5 = "\x02\u0A0A\u0A09\x03\x02\x02\x02\u0A0B\u0A0E\x03\x02\x02\x02\u0A0C\u0A0A" +
        "\x03\x02\x02\x02\u0A0C\u0A0D\x03\x02\x02\x02\u0A0D\u0A0F\x03\x02\x02\x02" +
        "\u0A0E\u0A0C\x03\x02\x02\x02\u0A0F\u0A11\x05\u0138\x9D\x02\u0A10\u09AB" +
        "\x03\x02\x02\x02\u0A10\u09B4\x03\x02\x02\x02\u0A10\u09BB\x03\x02\x02\x02" +
        "\u0A10\u09C2\x03\x02\x02\x02\u0A10\u09C9\x03\x02\x02\x02\u0A10\u09D0\x03" +
        "\x02\x02\x02\u0A10\u09D7\x03\x02\x02\x02\u0A10\u09E0\x03\x02\x02\x02\u0A10" +
        "\u09E7\x03\x02\x02\x02\u0A10\u09F0\x03\x02\x02\x02\u0A10\u09F7\x03\x02" +
        "\x02\x02\u0A10\u09FE\x03\x02\x02\x02\u0A10\u0A05\x03\x02\x02\x02\u0A10" +
        "\u0A0C\x03\x02\x02\x02\u0A11\u0123\x03\x02\x02\x02\u0A12\u0A1B\x05\u0122" +
        "\x92\x02\u0A13\u0A15\x05\u020A\u0106\x02\u0A14\u0A13\x03\x02\x02\x02\u0A15" +
        "\u0A18\x03\x02\x02\x02\u0A16\u0A14\x03\x02\x02\x02\u0A16\u0A17\x03\x02" +
        "\x02\x02\u0A17\u0A19\x03\x02\x02\x02\u0A18\u0A16\x03\x02\x02\x02\u0A19" +
        "\u0A1B\x07\x04\x02\x02\u0A1A\u0A12\x03\x02\x02\x02\u0A1A\u0A16\x03\x02" +
        "\x02\x02\u0A1B\u0125\x03\x02\x02\x02\u0A1C\u0A1E\x05\u020A\u0106\x02\u0A1D" +
        "\u0A1C\x03\x02\x02\x02\u0A1E\u0A21\x03\x02\x02\x02\u0A1F\u0A1D\x03\x02" +
        "\x02\x02\u0A1F\u0A20\x03\x02\x02\x02\u0A20\u0A22\x03\x02\x02\x02\u0A21" +
        "\u0A1F\x03\x02\x02\x02\u0A22\u0A23\x05\u0116\x8C\x02\u0A23\u0A24\x07\x04" +
        "\x02\x02\u0A24\u0A50\x03\x02\x02\x02\u0A25\u0A27\x05\u020A\u0106\x02\u0A26" +
        "\u0A25\x03\x02\x02\x02\u0A27\u0A2A\x03\x02\x02\x02\u0A28\u0A26\x03\x02" +
        "\x02\x02\u0A28\u0A29\x03\x02\x02\x02\u0A29\u0A2B\x03\x02\x02\x02\u0A2A" +
        "\u0A28\x03\x02\x02\x02\u0A2B\u0A50\x05\u0146\xA4\x02\u0A2C\u0A2E\x05\u020A" +
        "\u0106\x02\u0A2D\u0A2C\x03\x02\x02\x02\u0A2E\u0A31\x03\x02\x02\x02\u0A2F" +
        "\u0A2D\x03\x02\x02\x02\u0A2F\u0A30\x03\x02\x02\x02\u0A30\u0A32\x03\x02" +
        "\x02\x02\u0A31\u0A2F\x03\x02\x02\x02\u0A32\u0A50\x05\u013E\xA0\x02\u0A33" +
        "\u0A35\x05\u020A\u0106\x02\u0A34\u0A33\x03\x02\x02\x02\u0A35\u0A38\x03" +
        "\x02\x02\x02\u0A36\u0A34\x03\x02\x02\x02\u0A36\u0A37\x03\x02\x02\x02\u0A37" +
        "\u0A39\x03\x02\x02\x02\u0A38\u0A36\x03\x02\x02\x02\u0A39\u0A50\x05\u014A" +
        "\xA6\x02\u0A3A\u0A3C\x05\u020A\u0106\x02\u0A3B\u0A3A\x03\x02\x02\x02\u0A3C" +
        "\u0A3F\x03\x02\x02\x02\u0A3D\u0A3B\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02" +
        "\x02\x02\u0A3E\u0A40\x03\x02\x02\x02\u0A3F\u0A3D\x03\x02\x02\x02\u0A40" +
        "\u0A50\x05\u011A\x8E\x02\u0A41\u0A43\x05\u020A\u0106\x02\u0A42\u0A41\x03" +
        "\x02\x02\x02\u0A43\u0A46\x03\x02\x02\x02\u0A44\u0A42\x03\x02\x02\x02\u0A44" +
        "\u0A45\x03\x02\x02\x02\u0A45\u0A47\x03\x02\x02\x02\u0A46\u0A44\x03\x02" +
        "\x02\x02\u0A47\u0A50\x05\u012C\x97\x02\u0A48\u0A4A\x05\u020A\u0106\x02" +
        "\u0A49\u0A48\x03\x02\x02\x02\u0A4A\u0A4D\x03\x02\x02\x02\u0A4B\u0A49\x03" +
        "\x02\x02\x02\u0A4B\u0A4C\x03\x02\x02\x02\u0A4C\u0A4E\x03\x02\x02\x02\u0A4D" +
        "\u0A4B\x03\x02\x02\x02\u0A4E\u0A50\x05\u014E\xA8\x02\u0A4F\u0A1F\x03\x02" +
        "\x02\x02\u0A4F\u0A28\x03\x02\x02\x02\u0A4F\u0A2F\x03\x02\x02\x02\u0A4F" +
        "\u0A36\x03\x02\x02\x02\u0A4F\u0A3D\x03\x02\x02\x02\u0A4F\u0A44\x03\x02" +
        "\x02\x02\u0A4F\u0A4B\x03\x02\x02\x02\u0A50\u0127\x03\x02\x02\x02\u0A51" +
        "\u0A5A\x05\u012A\x96\x02\u0A52\u0A5A\x05\u012E\x98\x02\u0A53\u0A54\x07" +
        "u\x02\x02\u0A54\u0A55\x07\x12\x02\x02\u0A55\u0A56\x05\u01E0\xF1\x02\u0A56" +
        "\u0A57\x07\x14\x02\x02\u0A57\u0A58\x05\u012E\x98\x02\u0A58\u0A5A\x03\x02" +
        "\x02\x02\u0A59\u0A51\x03\x02\x02\x02\u0A59\u0A52\x03\x02\x02\x02\u0A59" +
        "\u0A53\x03\x02\x02\x02\u0A5A\u0129\x03\x02\x02\x02\u0A5B\u0A5C\x07\x11" +
        "\x02\x02\u0A5C\u0A63\x05f4\x02\u0A5D\u0A5E\x07\x11\x02\x02\u0A5E\u0A5F" +
        "\x07\x12\x02\x02\u0A5F\u0A60\x05\u01E6\xF4\x02\u0A60\u0A61\x07\x14\x02" +
        "\x02\u0A61\u0A63\x03\x02\x02\x02\u0A62\u0A5B\x03\x02\x02\x02\u0A62\u0A5D" +
        "\x03\x02\x02\x02\u0A63\u012B\x03\x02\x02\x02\u0A64\u0A65\x07v\x02\x02" +
        "\u0A65\u0A66\x05\u0234\u011B\x02\u0A66\u0A67\x07\x04\x02\x02\u0A67\u0A6D" +
        "\x03\x02\x02\x02\u0A68\u0A69\x07v\x02\x02\u0A69\u0A6A\x05\u0228\u0115" +
        "\x02\u0A6A\u0A6B\x07\x04\x02\x02\u0A6B\u0A6D\x03\x02\x02\x02\u0A6C\u0A64" +
        "\x03\x02\x02\x02\u0A6C\u0A68\x03\x02\x02\x02\u0A6D\u012D\x03\x02\x02\x02" +
        "\u0A6E\u0A6F\x07w\x02\x02\u0A6F\u0A7C\x05\u021C\u010F\x02\u0A70\u0A71" +
        "\x07w\x02\x02\u0A71\u0A72\x07\x12\x02\x02\u0A72\u0A73\x05\u0132\x9A\x02" +
        "\u0A73\u0A74\x07\x14\x02\x02\u0A74\u0A7C\x03\x02\x02\x02\u0A75\u0A76\x07" +
        "w\x02\x02\u0A76\u0A7C\x07x\x02\x02\u0A77\u0A78\x07w\x02\x02\u0A78\u0A79" +
        "\x07\x12\x02\x02\u0A79\u0A7A\x07x\x02\x02\u0A7A\u0A7C\x07\x14\x02\x02" +
        "\u0A7B\u0A6E\x03\x02\x02\x02\u0A7B\u0A70\x03\x02\x02\x02\u0A7B\u0A75\x03" +
        "\x02\x02\x02\u0A7B\u0A77\x03\x02\x02\x02\u0A7C\u012F\x03\x02\x02\x02\u0A7D" +
        "\u0A7E\x07y\x02\x02\u0A7E\u0A7F\x05\u022A\u0116\x02\u0A7F\u0A80\x07\x04" +
        "\x02\x02\u0A80\u0131\x03\x02\x02\x02\u0A81\u0A88\x05\u0134\x9B\x02\u0A82" +
        "\u0A83\x07W\x02\x02\u0A83\u0A87\x05\u0134\x9B\x02\u0A84\u0A85\x07\x13" +
        "\x02\x02\u0A85\u0A87\x05\u0134\x9B\x02\u0A86\u0A82\x03\x02\x02\x02\u0A86" +
        "\u0A84\x03\x02\x02\x02\u0A87\u0A8A\x03\x02\x02\x02\u0A88\u0A86\x03\x02" +
        "\x02\x02\u0A88\u0A89\x03\x02\x02\x02\u0A89\u0133\x03\x02\x02\x02\u0A8A" +
        "\u0A88\x03\x02\x02\x02\u0A8B\u0A91\x05\u01E0\xF1\x02\u0A8C\u0A8D\x07z" +
        "\x02\x02\u0A8D\u0A91\x05\u01E0\xF1\x02\u0A8E\u0A8F\x07{\x02\x02\u0A8F" +
        "\u0A91\x05\u01E0\xF1\x02\u0A90\u0A8B\x03\x02\x02\x02\u0A90\u0A8C\x03\x02" +
        "\x02\x02\u0A90\u0A8E\x03\x02\x02\x02\u0A91\u0135\x03\x02\x02\x02\u0A92" +
        "\u0A93\x05\u0128\x95\x02\u0A93\u0A94\x05\u0124\x93\x02\u0A94\u0137\x03" +
        "\x02\x02\x02\u0A95\u0A96\x07|\x02\x02\u0A96\u0A97\x07\x12\x02\x02\u0A97" +
        "\u0A98\x05\u01E0\xF1\x02\u0A98\u0A99\x07\x14\x02\x02\u0A99\u0A9A\x05\u0124" +
        "\x93\x02\u0A9A\u0139\x03\x02\x02\x02\u0A9B\u0A9C\x07e\x02\x02\u0A9C\u0A9D" +
        "\x07\x12\x02\x02\u0A9D\u0A9E\x05\u01E0\xF1\x02\u0A9E\u0A9F\x07\x14\x02" +
        "\x02\u0A9F\u0AA2\x05\u0124\x93\x02\u0AA0\u0AA1\x07f\x02\x02\u0AA1\u0AA3" +
        "\x05\u0124\x93\x02\u0AA2\u0AA0\x03\x02\x02\x02\u0AA2\u0AA3\x03\x02\x02" +
        "\x02\u0AA3\u0AA6\x03\x02\x02\x02\u0AA4\u0AA6\x05\u013C\x9F\x02\u0AA5\u0A9B" +
        "\x03\x02\x02\x02\u0AA5\u0AA4\x03\x02\x02\x02\u0AA6\u013B\x03\x02\x02\x02" +
        "\u0AA7\u0AA8\x07e\x02\x02\u0AA8\u0AA9\x07\x12\x02\x02\u0AA9\u0AAA\x05" +
        "\u01E0\xF1\x02\u0AAA\u0AAB\x07\x14\x02\x02\u0AAB\u0AB5\x05\u0124\x93\x02" +
        "\u0AAC\u0AAD\x07f\x02\x02\u0AAD\u0AAE\x07e\x02\x02\u0AAE\u0AAF\x07\x12" +
        "\x02\x02\u0AAF\u0AB0\x05\u01E0\xF1\x02\u0AB0\u0AB1\x07\x14\x02\x02\u0AB1" +
        "\u0AB2\x05\u0124\x93\x02\u0AB2\u0AB4\x03\x02\x02\x02\u0AB3\u0AAC\x03\x02" +
        "\x02\x02\u0AB4\u0AB7\x03\x02\x02\x02\u0AB5\u0AB3\x03\x02\x02\x02\u0AB5" +
        "\u0AB6\x03\x02\x02\x02\u0AB6\u0ABA\x03\x02\x02\x02\u0AB7\u0AB5\x03\x02" +
        "\x02\x02\u0AB8\u0AB9\x07f\x02\x02\u0AB9\u0ABB\x05\u0124\x93\x02\u0ABA" +
        "\u0AB8\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02\x02\x02\u0ABB\u013D\x03\x02" +
        "\x02\x02\u0ABC\u0ABD\x07e\x02\x02\u0ABD\u0ABE\x07\x12\x02\x02\u0ABE\u0ABF" +
        "\x05\u01E0\xF1\x02\u0ABF\u0AC0\x07\x14\x02\x02\u0AC0\u0AC3\x05\u0118\x8D" +
        "\x02\u0AC1\u0AC2\x07f\x02\x02\u0AC2\u0AC4\x05\u0118\x8D\x02\u0AC3\u0AC1" +
        "\x03\x02\x02\x02\u0AC3\u0AC4\x03\x02\x02\x02\u0AC4\u0AC7\x03\x02\x02\x02" +
        "\u0AC5\u0AC7\x05\u0140\xA1\x02\u0AC6\u0ABC\x03\x02\x02\x02\u0AC6\u0AC5" +
        "\x03\x02\x02\x02\u0AC7\u013F\x03\x02\x02\x02\u0AC8\u0AC9\x07e\x02\x02" +
        "\u0AC9\u0ACA\x07\x12\x02\x02\u0ACA\u0ACB\x05\u01E0\xF1\x02\u0ACB\u0ACC" +
        "\x07\x14\x02\x02\u0ACC\u0AD6\x05\u0118\x8D\x02\u0ACD\u0ACE\x07f\x02\x02" +
        "\u0ACE\u0ACF\x07e\x02\x02\u0ACF\u0AD0\x07\x12\x02\x02\u0AD0\u0AD1\x05" +
        "\u01E0\xF1\x02\u0AD1\u0AD2\x07\x14\x02\x02\u0AD2\u0AD3\x05\u0118\x8D\x02" +
        "\u0AD3\u0AD5\x03\x02\x02\x02\u0AD4\u0ACD\x03\x02\x02\x02\u0AD5\u0AD8\x03" +
        "\x02\x02\x02\u0AD6\u0AD4\x03\x02\x02\x02\u0AD6\u0AD7\x03\x02\x02\x02\u0AD7" +
        "\u0ADB\x03\x02\x02\x02\u0AD8\u0AD6\x03\x02\x02\x02\u0AD9\u0ADA\x07f\x02" +
        "\x02\u0ADA\u0ADC\x05\u0118\x8D\x02\u0ADB\u0AD9\x03\x02\x02\x02\u0ADB\u0ADC" +
        "\x03\x02\x02\x02\u0ADC\u0141\x03\x02\x02\x02\u0ADD\u0ADE\x07g\x02\x02" +
        "\u0ADE\u0ADF\x07\x12\x02\x02\u0ADF\u0AE0\x05\u01E0\xF1\x02\u0AE0\u0AE1" +
        "\x07\x14\x02\x02\u0AE1\u0AE5\x05\u0144\xA3\x02\u0AE2\u0AE4\x05\u0144\xA3" +
        "\x02\u0AE3\u0AE2\x03\x02\x02\x02\u0AE4\u0AE7\x03\x02\x02\x02\u0AE5\u0AE3" +
        "\x03\x02\x02\x02\u0AE5\u0AE6\x03\x02\x02\x02\u0AE6\u0AE8\x03\x02\x02\x02" +
        "\u0AE7\u0AE5\x03\x02\x02\x02\u0AE8\u0AE9\x07h\x02\x02\u0AE9\u0B05\x03" +
        "\x02\x02\x02\u0AEA\u0AEB\x07}\x02\x02\u0AEB\u0AEC\x07\x12\x02\x02\u0AEC" +
        "\u0AED\x05\u01E0\xF1\x02\u0AED\u0AEE\x07\x14\x02\x02\u0AEE\u0AF2\x05\u0144" +
        "\xA3\x02\u0AEF\u0AF1\x05\u0144\xA3\x02\u0AF0\u0AEF\x03\x02\x02\x02\u0AF1" +
        "\u0AF4\x03\x02\x02\x02\u0AF2\u0AF0\x03\x02\x02\x02\u0AF2\u0AF3\x03\x02" +
        "\x02\x02\u0AF3\u0AF5\x03\x02\x02\x02\u0AF4\u0AF2\x03\x02\x02\x02\u0AF5" +
        "\u0AF6\x07h\x02\x02\u0AF6\u0B05\x03\x02\x02\x02\u0AF7\u0AF8\x07~\x02\x02" +
        "\u0AF8\u0AF9\x07\x12\x02\x02\u0AF9\u0AFA\x05\u01E0\xF1\x02\u0AFA\u0AFB" +
        "\x07\x14\x02\x02\u0AFB\u0AFF\x05\u0144\xA3\x02\u0AFC\u0AFE\x05\u0144\xA3" +
        "\x02\u0AFD\u0AFC\x03\x02\x02\x02\u0AFE\u0B01\x03\x02\x02\x02\u0AFF\u0AFD" +
        "\x03\x02\x02\x02\u0AFF\u0B00\x03\x02\x02\x02\u0B00\u0B02\x03\x02\x02\x02" +
        "\u0B01\u0AFF\x03\x02\x02\x02\u0B02\u0B03\x07h\x02\x02\u0B03\u0B05\x03" +
        "\x02\x02\x02\u0B04\u0ADD\x03\x02\x02\x02\u0B04\u0AEA\x03\x02\x02\x02\u0B04" +
        "\u0AF7\x03\x02\x02\x02\u0B05\u0143\x03\x02\x02\x02\u0B06\u0B0B\x05\u01E0" +
        "\xF1\x02\u0B07\u0B08\x07\x13\x02\x02\u0B08\u0B0A\x05\u01E0\xF1\x02\u0B09" +
        "\u0B07\x03\x02\x02\x02\u0B0A\u0B0D\x03\x02\x02\x02\u0B0B\u0B09\x03\x02" +
        "\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C\u0B0E\x03\x02\x02\x02\u0B0D" +
        "\u0B0B\x03\x02\x02\x02\u0B0E\u0B0F\x07C\x02\x02\u0B0F\u0B10\x05\u0124" +
        "\x93\x02\u0B10\u0B17\x03\x02\x02\x02\u0B11\u0B13\x07\b\x02\x02\u0B12\u0B14" +
        "\x07C\x02\x02\u0B13\u0B12\x03\x02\x02\x02\u0B13\u0B14\x03\x02\x02\x02" +
        "\u0B14\u0B15\x03\x02\x02\x02\u0B15\u0B17\x05\u0124\x93\x02\u0B16\u0B06" +
        "\x03\x02\x02\x02\u0B16\u0B11\x03\x02\x02\x02\u0B17\u0145\x03\x02\x02\x02" +
        "\u0B18\u0B19\x07g\x02\x02\u0B19\u0B1A\x07\x12\x02\x02\u0B1A\u0B1B\x05" +
        "\u01E0\xF1\x02\u0B1B\u0B1C\x07\x14\x02\x02\u0B1C\u0B20\x05\u0148\xA5\x02" +
        "\u0B1D\u0B1F\x05\u0148\xA5\x02\u0B1E\u0B1D\x03\x02\x02\x02\u0B1F\u0B22" +
        "\x03\x02\x02\x02\u0B20\u0B1E\x03\x02\x02\x02\u0B20\u0B21\x03\x02\x02\x02" +
        "\u0B21\u0B23\x03\x02\x02\x02\u0B22\u0B20\x03\x02\x02\x02\u0B23\u0B24\x07" +
        "h\x02\x02\u0B24\u0B40\x03\x02\x02\x02\u0B25\u0B26\x07}\x02\x02\u0B26\u0B27" +
        "\x07\x12\x02\x02\u0B27\u0B28\x05\u01E0\xF1\x02\u0B28\u0B29\x07\x14\x02" +
        "\x02\u0B29\u0B2D\x05\u0148\xA5\x02\u0B2A\u0B2C\x05\u0148\xA5\x02\u0B2B" +
        "\u0B2A\x03\x02\x02\x02\u0B2C\u0B2F\x03\x02\x02\x02\u0B2D\u0B2B\x03\x02" +
        "\x02\x02\u0B2D\u0B2E\x03\x02\x02\x02\u0B2E\u0B30\x03\x02\x02\x02\u0B2F" +
        "\u0B2D\x03\x02\x02\x02\u0B30\u0B31\x07h\x02\x02\u0B31\u0B40\x03\x02\x02" +
        "\x02\u0B32\u0B33\x07~\x02\x02\u0B33\u0B34\x07\x12\x02\x02\u0B34\u0B35" +
        "\x05\u01E0\xF1\x02\u0B35\u0B36\x07\x14\x02\x02\u0B36\u0B3A\x05\u0148\xA5" +
        "\x02\u0B37\u0B39\x05\u0148\xA5\x02\u0B38\u0B37\x03\x02\x02\x02\u0B39\u0B3C" +
        "\x03\x02\x02\x02\u0B3A\u0B38\x03\x02\x02\x02\u0B3A\u0B3B\x03\x02\x02\x02" +
        "\u0B3B\u0B3D\x03\x02\x02\x02\u0B3C\u0B3A\x03\x02\x02\x02\u0B3D\u0B3E\x07" +
        "h\x02\x02\u0B3E\u0B40\x03\x02\x02\x02\u0B3F\u0B18\x03\x02\x02\x02\u0B3F" +
        "\u0B25\x03\x02\x02\x02\u0B3F\u0B32\x03\x02\x02\x02\u0B40\u0147\x03\x02" +
        "\x02\x02\u0B41\u0B46\x05\u01E0\xF1\x02\u0B42\u0B43\x07\x13\x02\x02\u0B43" +
        "\u0B45\x05\u01E0\xF1\x02\u0B44\u0B42\x03\x02\x02\x02\u0B45\u0B48\x03\x02" +
        "\x02\x02\u0B46\u0B44\x03\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47" +
        "\u0B49\x03\x02\x02\x02\u0B48\u0B46\x03\x02\x02\x02\u0B49\u0B4A\x07C\x02" +
        "\x02\u0B4A\u0B4B\x05\u0118\x8D\x02\u0B4B\u0B52\x03\x02\x02\x02\u0B4C\u0B4E" +
        "\x07\b\x02\x02\u0B4D\u0B4F\x07C\x02\x02\u0B4E\u0B4D\x03\x02\x02\x02\u0B4E" +
        "\u0B4F\x03\x02\x02\x02\u0B4F\u0B50\x03\x02\x02\x02\u0B50\u0B52\x05\u0118" +
        "\x8D\x02\u0B51\u0B41\x03\x02\x02\x02\u0B51\u0B4C\x03\x02\x02\x02\u0B52" +
        "\u0149\x03\x02\x02\x02\u0B53\u0B54\x07\x7F\x02\x02\u0B54\u0B6C\x05\u0126" +
        "\x94\x02\u0B55\u0B56\x07u\x02\x02\u0B56\u0B57\x07\x12\x02\x02\u0B57\u0B58" +
        "\x05\u01E0\xF1\x02\u0B58\u0B59\x07\x14\x02\x02\u0B59\u0B5A\x05\u0126\x94" +
        "\x02\u0B5A\u0B6C\x03\x02\x02\x02\u0B5B\u0B5C\x07\x80\x02\x02\u0B5C\u0B5D" +
        "\x07\x12\x02\x02\u0B5D\u0B5E\x05\u01E0\xF1\x02\u0B5E\u0B5F\x07\x14\x02" +
        "\x02\u0B5F\u0B60\x05\u0126\x94\x02\u0B60\u0B6C\x03\x02\x02\x02\u0B61\u0B62" +
        "\x07i\x02\x02\u0B62\u0B63\x07\x12\x02\x02\u0B63\u0B64\x05\u011C\x8F\x02" +
        "\u0B64\u0B65\x07\x04\x02\x02\u0B65\u0B66\x05\u01E0\xF1\x02\u0B66\u0B67" +
        "\x07\x04\x02\x02\u0B67\u0B68\x05\u011C\x8F\x02\u0B68\u0B69\x07\x14\x02" +
        "\x02\u0B69\u0B6A\x05\u0126\x94\x02\u0B6A\u0B6C\x03\x02\x02\x02\u0B6B\u0B53" +
        "\x03\x02\x02\x02\u0B6B\u0B55\x03\x02\x02\x02\u0B6B\u0B5B\x03\x02\x02\x02" +
        "\u0B6B\u0B61\x03\x02\x02\x02\u0B6C\u014B\x03\x02\x02\x02\u0B6D\u0B6E\x07" +
        "\x7F\x02\x02\u0B6E\u0B86\x05\u0122\x92\x02\u0B6F\u0B70\x07u\x02\x02\u0B70" +
        "\u0B71\x07\x12\x02\x02\u0B71\u0B72\x05\u01E0\xF1\x02\u0B72\u0B73\x07\x14" +
        "\x02\x02\u0B73\u0B74\x05\u0122\x92\x02\u0B74\u0B86\x03\x02\x02\x02\u0B75" +
        "\u0B76\x07\x80\x02\x02\u0B76\u0B77\x07\x12\x02\x02\u0B77\u0B78\x05\u01E0" +
        "\xF1\x02\u0B78\u0B79\x07\x14\x02\x02\u0B79\u0B7A\x05\u0122\x92\x02\u0B7A" +
        "\u0B86\x03\x02\x02\x02\u0B7B\u0B7C\x07i\x02\x02\u0B7C\u0B7D\x07\x12\x02" +
        "\x02\u0B7D\u0B7E\x05\u011C\x8F\x02\u0B7E\u0B7F\x07\x04\x02\x02\u0B7F\u0B80" +
        "\x05\u01E0\xF1\x02\u0B80\u0B81\x07\x04\x02\x02\u0B81\u0B82\x05\u011C\x8F" +
        "\x02\u0B82\u0B83\x07\x14\x02\x02\u0B83\u0B84\x05\u0122\x92\x02\u0B84\u0B86" +
        "\x03\x02\x02\x02\u0B85\u0B6D\x03\x02\x02\x02\u0B85\u0B6F\x03\x02\x02\x02" +
        "\u0B85\u0B75\x03\x02\x02\x02\u0B85\u0B7B\x03\x02\x02\x02\u0B86\u014D\x03" +
        "\x02\x02\x02\u0B87\u0B94\x05\u0258\u012D\x02\u0B88\u0B91\x07\x12\x02\x02" +
        "\u0B89\u0B8E\x05\u01E0\xF1\x02\u0B8A\u0B8B\x07\x13\x02\x02\u0B8B\u0B8D" +
        "\x05\u01E0\xF1\x02\u0B8C\u0B8A\x03\x02\x02\x02\u0B8D\u0B90\x03\x02\x02" +
        "\x02\u0B8E\u0B8C\x03\x02\x02\x02\u0B8E\u0B8F\x03\x02\x02\x02\u0B8F\u0B92" +
        "\x03\x02\x02\x02\u0B90\u0B8E\x03\x02\x02\x02\u0B91\u0B89\x03\x02\x02\x02" +
        "\u0B91\u0B92\x03\x02\x02\x02\u0B92\u0B93\x03\x02\x02\x02\u0B93\u0B95\x07" +
        "\x14\x02\x02\u0B94\u0B88\x03\x02\x02\x02\u0B94\u0B95\x03\x02\x02\x02\u0B95" +
        "\u0B96\x03\x02\x02\x02\u0B96\u0B97\x07\x04\x02\x02\u0B97\u014F\x03\x02" +
        "\x02\x02\u0B98\u0BA5\x05\u0234\u011B\x02\u0B99\u0BA2\x07\x12\x02\x02\u0B9A" +
        "\u0B9F\x05\u01E0\xF1\x02\u0B9B\u0B9C\x07\x13\x02\x02\u0B9C\u0B9E\x05\u01E0" +
        "\xF1\x02\u0B9D\u0B9B\x03\x02\x02\x02\u0B9E\u0BA1\x03\x02\x02\x02\u0B9F" +
        "\u0B9D\x03\x02\x02\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0BA3\x03\x02" +
        "\x02\x02\u0BA1\u0B9F\x03\x02\x02\x02\u0BA2\u0B9A\x03\x02\x02\x02\u0BA2" +
        "\u0BA3\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02\x02\x02\u0BA4\u0BA6\x07\x14" +
        "\x02\x02\u0BA5\u0B99\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02\x02\x02\u0BA6" +
        "\u0BA7\x03\x02\x02\x02\u0BA7\u0BA8\x07\x04\x02\x02\u0BA8\u0151\x03\x02" +
        "\x02\x02\u0BA9\u0BAD\x07\x81\x02\x02\u0BAA\u0BAC\x05\u0154\xAB\x02\u0BAB" +
        "\u0BAA\x03\x02\x02\x02\u0BAC\u0BAF\x03\x02\x02\x02\u0BAD\u0BAB\x03\x02" +
        "\x02\x02\u0BAD\u0BAE\x03\x02\x02\x02\u0BAE\u0BB0\x03\x02\x02\x02\u0BAF" +
        "\u0BAD\x03\x02\x02\x02\u0BB0\u0BB1\x07\x82\x02\x02\u0BB1\u0153\x03\x02" +
        "\x02\x02\u0BB2\u0BB7\x05:\x1E\x02\u0BB3\u0BB7\x05\u0156\xAC\x02\u0BB4" +
        "\u0BB7\x05\u0158\xAD\x02\u0BB5\u0BB7\x05\u015A\xAE\x02\u0BB6\u0BB2\x03" +
        "\x02\x02\x02\u0BB6\u0BB3\x03\x02\x02\x02\u0BB6\u0BB4\x03\x02\x02\x02\u0BB6" +
        "\u0BB5\x03\x02\x02\x02\u0BB7\u0155\x03\x02\x02\x02\u0BB8\u0BB9\x07\x83" +
        "\x02\x02\u0BB9\u0BBA\x05\u0164\xB3\x02\u0BBA\u0BBB\x07\x04\x02\x02\u0BBB" +
        "\u0BC1\x03\x02\x02\x02\u0BBC\u0BBD\x07\x84\x02\x02\u0BBD\u0BBE\x05\u0164" +
        "\xB3\x02\u0BBE\u0BBF\x07\x04\x02\x02\u0BBF\u0BC1\x03\x02\x02\x02\u0BC0" +
        "\u0BB8\x03\x02\x02\x02\u0BC0\u0BBC\x03\x02\x02\x02\u0BC1\u0157\x03\x02" +
        "\x02\x02\u0BC2\u0BC3\x07\x85\x02\x02\u0BC3\u0BC4\x05\u0164\xB3\x02\u0BC4" +
        "\u0BC5\x07\x04\x02\x02\u0BC5\u0BCB\x03\x02\x02\x02\u0BC6\u0BC7\x07\x86" +
        "\x02\x02\u0BC7\u0BC8\x05\u0164\xB3\x02\u0BC8\u0BC9\x07\x04\x02\x02\u0BC9" +
        "\u0BCB\x03\x02\x02\x02\u0BCA\u0BC2\x03\x02\x02\x02\u0BCA\u0BC6\x03\x02" +
        "\x02\x02\u0BCB\u0159\x03\x02\x02\x02\u0BCC\u0BCD\x05\u015C\xAF\x02\u0BCD" +
        "\u0BCE\x07\x04\x02\x02\u0BCE\u0BD6\x03\x02\x02\x02\u0BCF\u0BD0\x05\u0194" +
        "\xCB\x02\u0BD0\u0BD1\x07\x04\x02\x02\u0BD1\u0BD6\x03\x02\x02\x02\u0BD2" +
        "\u0BD3\x05\u019E\xD0\x02\u0BD3\u0BD4\x07\x04\x02\x02\u0BD4\u0BD6\x03\x02" +
        "\x02\x02\u0BD5\u0BCC\x03\x02\x02\x02\u0BD5\u0BCF\x03\x02\x02\x02\u0BD5" +
        "\u0BD2\x03\x02\x02\x02\u0BD6\u015B\x03\x02\x02\x02\u0BD7\u0BD8\x05\u015E" +
        "\xB0\x02\u0BD8\u0BD9\x075\x02\x02\u0BD9\u0BDA\x05\u016E\xB8\x02\u0BDA" +
        "\u0BE0\x03\x02\x02\x02\u0BDB\u0BDC\x05\u0160\xB1\x02\u0BDC\u0BDD\x075" +
        "\x02\x02\u0BDD\u0BDE\x05\u016E\xB8\x02\u0BDE\u0BE0\x03\x02\x02\x02\u0BDF" +
        "\u0BD7\x03\x02\x02\x02\u0BDF\u0BDB\x03\x02\x02\x02\u0BE0\u015D\x03\x02" +
        "\x02\x02\u0BE1\u0BE3\x05\u0166\xB4\x02\u0BE2\u0BE4\x05\u01A0\xD1\x02\u0BE3" +
        "\u0BE2\x03\x02\x02\x02\u0BE3\u0BE4\x03\x02\x02\x02\u0BE4\u0BE5\x03\x02" +
        "\x02\x02\u0BE5\u0BE6\x07\x87\x02\x02\u0BE6\u0BE7\x05\u0168\xB5\x02\u0BE7" +
        "\u015F\x03\x02\x02\x02\u0BE8\u0BE9\x07\x12\x02\x02\u0BE9\u0BEB\x05\u0162" +
        "\xB2\x02\u0BEA\u0BEC\x05\u01A0\xD1\x02\u0BEB\u0BEA\x03\x02\x02\x02\u0BEB" +
        "\u0BEC\x03\x02\x02\x02\u0BEC\u0BED\x03\x02\x02\x02\u0BED\u0BEE\x07\x88" +
        "\x02\x02\u0BEE\u0BEF\x05\u0164\xB3\x02\u0BEF\u0BF0\x07\x14\x02\x02\u0BF0" +
        "\u0161\x03\x02\x02\x02\u0BF1\u0BF6\x05\u0166\xB4\x02\u0BF2\u0BF3\x07\x13" +
        "\x02\x02\u0BF3\u0BF5\x05\u0166\xB4\x02\u0BF4\u0BF2\x03\x02\x02\x02\u0BF5" +
        "\u0BF8\x03\x02\x02\x02\u0BF6\u0BF4\x03\x02\x02\x02\u0BF6\u0BF7\x03\x02" +
        "\x02\x02\u0BF7\u0163\x03\x02\x02\x02\u0BF8\u0BF6\x03\x02\x02\x02\u0BF9" +
        "\u0BFE\x05\u0168\xB5\x02\u0BFA\u0BFB\x07\x13\x02\x02\u0BFB\u0BFD\x05\u0168" +
        "\xB5\x02\u0BFC\u0BFA\x03\x02\x02\x02\u0BFD\u0C00\x03\x02\x02\x02\u0BFE" +
        "\u0BFC\x03\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF\u0165\x03\x02" +
        "\x02\x02\u0C00\u0BFE\x03\x02\x02\x02\u0C01\u0C0D\x05\u016A\xB6\x02\u0C02" +
        "\u0C03\x05\u016A\xB6\x02\u0C03\u0C04\x07\x17\x02\x02\u0C04\u0C05\x05\u01D8" +
        "\xED\x02\u0C05\u0C06\x07\x18\x02\x02\u0C06\u0C0D\x03\x02\x02\x02\u0C07" +
        "\u0C08\x05\u016A\xB6\x02\u0C08\u0C09\x07\x17\x02\x02\u0C09\u0C0A\x05\u01F0" +
        "\xF9\x02\u0C0A\u0C0B\x07\x18\x02\x02\u0C0B\u0C0D\x03\x02\x02\x02\u0C0C" +
        "\u0C01\x03\x02\x02\x02\u0C0C\u0C02\x03\x02\x02\x02\u0C0C\u0C07\x03\x02" +
        "\x02\x02\u0C0D\u0167\x03\x02\x02\x02\u0C0E\u0C1A\x05\u016C\xB7\x02\u0C0F" +
        "\u0C10\x05\u016C\xB7\x02\u0C10\u0C11\x07\x17\x02\x02\u0C11\u0C12\x05\u01D8" +
        "\xED\x02\u0C12\u0C13\x07\x18\x02\x02\u0C13\u0C1A\x03\x02\x02\x02\u0C14" +
        "\u0C15\x05\u016C\xB7\x02\u0C15\u0C16\x07\x17\x02\x02\u0C16\u0C17\x05\u01F0" +
        "\xF9\x02\u0C17\u0C18\x07\x18\x02\x02\u0C18\u0C1A\x03\x02\x02\x02\u0C19" +
        "\u0C0E\x03\x02\x02\x02\u0C19\u0C0F\x03\x02\x02\x02\u0C19\u0C14\x03\x02" +
        "\x02\x02\u0C1A\u0169\x03\x02\x02\x02\u0C1B\u0C1E\x05\u023A\u011E\x02\u0C1C" +
        "\u0C1E\x05\u0238\u011D\x02\u0C1D\u0C1B\x03\x02\x02\x02\u0C1D\u0C1C\x03" +
        "\x02\x02\x02\u0C1E\u016B\x03\x02\x02\x02\u0C1F\u0C22\x05\u0248\u0125\x02" +
        "\u0C20\u0C22\x05\u0238\u011D\x02\u0C21\u0C1F\x03\x02\x02\x02\u0C21\u0C20" +
        "\x03\x02\x02\x02\u0C22\u016D\x03\x02\x02\x02\u0C23\u0C29\x05\u0170\xB9" +
        "\x02\u0C24\u0C25\x07\x12\x02\x02\u0C25\u0C26\x05\u0170\xB9\x02\u0C26\u0C27" +
        "\x07\x14\x02\x02\u0C27\u0C29\x03\x02\x02\x02\u0C28\u0C23\x03\x02\x02\x02" +
        "\u0C28\u0C24\x03\x02\x02\x02\u0C29\u016F\x03\x02\x02\x02\u0C2A\u0C5A\x05" +
        "\u0172\xBA\x02\u0C2B\u0C2C\x05\u0174\xBB\x02\u0C2C\u0C2D\x07\x13\x02\x02" +
        "\u0C2D\u0C2E\x05\u0176\xBC\x02\u0C2E\u0C5A\x03\x02\x02\x02\u0C2F\u0C30" +
        "\x05\u0174\xBB\x02\u0C30\u0C31\x07\x13\x02\x02\u0C31\u0C32\x05\u0176\xBC" +
        "\x02\u0C32\u0C33\x07\x13\x02\x02\u0C33\u0C34\x05\u0178\xBD\x02\u0C34\u0C5A" +
        "\x03\x02\x02\x02\u0C35\u0C36\x05\u017A\xBE\x02\u0C36\u0C37\x07\x13\x02" +
        "\x02\u0C37\u0C38\x05\u017C\xBF\x02\u0C38\u0C39\x07\x13\x02\x02\u0C39\u0C3A" +
        "\x05\u017E\xC0\x02\u0C3A\u0C3B\x07\x13\x02\x02\u0C3B\u0C3C\x05\u0180\xC1" +
        "\x02\u0C3C\u0C3D\x07\x13\x02\x02\u0C3D\u0C3E\x05\u0182\xC2\x02\u0C3E\u0C3F" +
        "\x07\x13\x02\x02\u0C3F\u0C40\x05\u0184\xC3\x02\u0C40\u0C5A\x03\x02\x02" +
        "\x02\u0C41\u0C42\x05\u017A\xBE\x02\u0C42\u0C43\x07\x13\x02\x02\u0C43\u0C44" +
        "\x05\u017C\xBF\x02\u0C44\u0C45\x07\x13\x02\x02\u0C45\u0C46\x05\u017E\xC0" +
        "\x02\u0C46\u0C47\x07\x13\x02\x02\u0C47\u0C48\x05\u0180\xC1\x02\u0C48\u0C49" +
        "\x07\x13\x02\x02\u0C49\u0C4A\x05\u0182\xC2\x02\u0C4A\u0C4B\x07\x13\x02" +
        "\x02\u0C4B\u0C4C\x05\u0184\xC3\x02\u0C4C\u0C4D\x07\x13\x02\x02\u0C4D\u0C4E" +
        "\x05\u0186\xC4\x02\u0C4E\u0C4F\x07\x13\x02\x02\u0C4F\u0C50\x05\u0188\xC5" +
        "\x02\u0C50\u0C51\x07\x13\x02\x02\u0C51\u0C52\x05\u018A\xC6\x02\u0C52\u0C53" +
        "\x07\x13\x02\x02\u0C53\u0C54\x05\u018C\xC7\x02\u0C54\u0C55\x07\x13\x02" +
        "\x02\u0C55\u0C56\x05\u018E\xC8\x02\u0C56\u0C57\x07\x13\x02\x02\u0C57\u0C58" +
        "\x05\u0190\xC9\x02\u0C58\u0C5A\x03\x02\x02\x02\u0C59\u0C2A\x03\x02\x02" +
        "\x02\u0C59\u0C2B\x03\x02\x02\x02\u0C59\u0C2F\x03\x02\x02\x02\u0C59\u0C35" +
        "\x03\x02\x02\x02\u0C59\u0C41\x03\x02\x02\x02\u0C5A\u0171\x03\x02\x02\x02" +
        "\u0C5B\u0C5C\x05\u0192\xCA\x02\u0C5C\u0173\x03\x02\x02\x02\u0C5D\u0C5E" +
        "\x05\u0192\xCA\x02\u0C5E\u0175\x03\x02\x02\x02\u0C5F\u0C60\x05\u0192\xCA" +
        "\x02\u0C60\u0177\x03\x02\x02\x02\u0C61\u0C62\x05\u0192\xCA\x02\u0C62\u0179" +
        "\x03\x02\x02\x02\u0C63\u0C64\x05\u0192\xCA\x02\u0C64\u017B\x03\x02\x02" +
        "\x02\u0C65\u0C66\x05\u0192\xCA\x02\u0C66\u017D\x03\x02\x02\x02\u0C67\u0C68" +
        "\x05\u0192\xCA\x02\u0C68\u017F\x03\x02\x02\x02\u0C69\u0C6A\x05\u0192\xCA" +
        "\x02\u0C6A\u0181\x03\x02\x02\x02\u0C6B\u0C6C\x05\u0192\xCA\x02\u0C6C\u0183" +
        "\x03\x02\x02\x02\u0C6D\u0C6E\x05\u0192\xCA\x02\u0C6E\u0185\x03\x02\x02" +
        "\x02\u0C6F\u0C70\x05\u0192\xCA\x02\u0C70\u0187\x03\x02\x02\x02\u0C71\u0C72" +
        "\x05\u0192\xCA\x02\u0C72\u0189\x03\x02\x02\x02\u0C73\u0C74\x05\u0192\xCA" +
        "\x02\u0C74\u018B\x03\x02\x02\x02\u0C75\u0C76\x05\u0192\xCA\x02\u0C76\u018D" +
        "\x03\x02\x02\x02\u0C77\u0C78\x05\u0192\xCA\x02\u0C78\u018F\x03\x02\x02" +
        "\x02\u0C79\u0C7A\x05\u0192\xCA\x02\u0C7A\u0191\x03\x02\x02\x02\u0C7B\u0C7C" +
        "\x05\u01DA\xEE\x02\u0C7C\u0193\x03\x02\x02\x02\u0C7D\u0C7E\x05\u0196\xCC" +
        "\x02\u0C7E\u0C7F\x075\x02\x02\u0C7F\u0C80\x05\u016E\xB8\x02\u0C80\u0C86" +
        "\x03\x02\x02\x02\u0C81\u0C82\x05\u0198\xCD\x02\u0C82\u0C83\x075\x02\x02" +
        "\u0C83\u0C84\x05\u016E\xB8\x02\u0C84\u0C86\x03\x02\x02\x02\u0C85\u0C7D" +
        "\x03\x02\x02\x02\u0C85\u0C81\x03\x02\x02\x02\u0C86\u0195\x03\x02\x02\x02" +
        "\u0C87\u0C89\x07\x12\x02\x02\u0C88\u0C8A\x05\u019C\xCF\x02\u0C89\u0C88" +
        "\x03\x02\x02\x02\u0C89\u0C8A\x03\x02\x02\x02\u0C8A\u0C8B\x03\x02\x02\x02" +
        "\u0C8B\u0C8C\x05\u0166\xB4\x02\u0C8C\u0C8D\x07\x87\x02\x02\u0C8D\u0C8F" +
        "\x05\u0168\xB5\x02\u0C8E\u0C90\x05\u01A0\xD1\x02\u0C8F\u0C8E\x03\x02\x02" +
        "\x02\u0C8F\u0C90\x03\x02\x02\x02\u0C90\u0C91\x03\x02\x02\x02\u0C91\u0C92" +
        "\x07C\x02\x02\u0C92\u0C93\x05\u019A\xCE\x02\u0C93\u0C94\x07\x14\x02\x02" +
        "\u0C94\u0197\x03\x02\x02\x02\u0C95\u0C97\x07\x12\x02\x02\u0C96\u0C98\x05" +
        "\u019C\xCF\x02\u0C97\u0C96\x03\x02\x02\x02\u0C97\u0C98\x03\x02\x02\x02" +
        "\u0C98\u0C99\x03\x02\x02\x02\u0C99\u0C9A\x05\u0162\xB2\x02\u0C9A\u0C9B" +
        "\x07\x88\x02\x02\u0C9B\u0C9D\x05\u0164\xB3\x02\u0C9C\u0C9E\x05\u01A0\xD1" +
        "\x02\u0C9D\u0C9C\x03\x02\x02\x02\u0C9D\u0C9E\x03\x02\x02\x02\u0C9E\u0C9F" +
        "\x03\x02\x02\x02\u0C9F\u0CA0\x07C\x02\x02\u0CA0\u0CA1\x05\u019A\xCE\x02" +
        "\u0CA1\u0CA2\x07\x14\x02\x02\u0CA2\u0199\x03\x02\x02\x02\u0CA3\u0CA4\x05" +
        "\u01E0\xF1\x02\u0CA4\u019B\x03\x02\x02\x02\u0CA5\u0CA6\t\x11\x02\x02\u0CA6" +
        "\u019D\x03\x02\x02\x02\u0CA7\u0CA8\x07e\x02\x02\u0CA8\u0CA9\x07\x12\x02" +
        "\x02\u0CA9\u0CAA\x05\u01EA\xF6\x02\u0CAA\u0CAB\x07\x14\x02\x02\u0CAB\u0CAC" +
        "\x05\u015C\xAF\x02\u0CAC\u0CB6\x03\x02\x02\x02\u0CAD\u0CAE\x07e\x02\x02" +
        "\u0CAE\u0CAF\x07\x12\x02\x02\u0CAF\u0CB0\x05\u01EA\xF6\x02\u0CB0\u0CB1" +
        "\x07\x14\x02\x02\u0CB1\u0CB2\x05\u0194\xCB\x02\u0CB2\u0CB6\x03\x02\x02" +
        "\x02\u0CB3\u0CB4\x07\x89\x02\x02\u0CB4\u0CB6\x05\u015C\xAF\x02\u0CB5\u0CA7" +
        "\x03\x02\x02\x02\u0CB5\u0CAD\x03\x02\x02\x02\u0CB5\u0CB3\x03\x02\x02\x02" +
        "\u0CB6\u019F\x03\x02\x02\x02\u0CB7\u0CB8\t\x12\x02\x02\u0CB8\u01A1\x03" +
        "\x02\x02\x02\u0CB9\u0CBA\x05\u01E6\xF4\x02\u0CBA\u01A3\x03\x02\x02\x02" +
        "\u0CBB\u0CC2\x05\u025C\u012F\x02\u0CBC\u0CBD\x05\u025C\u012F\x02\u0CBD" +
        "\u0CBE\x07\x17\x02\x02\u0CBE\u0CBF\x05\u01DA\xEE\x02\u0CBF\u0CC0\x07\x18" +
        "\x02\x02\u0CC0\u0CC2\x03\x02\x02\x02\u0CC1\u0CBB\x03\x02\x02\x02\u0CC1" +
        "\u0CBC\x03\x02\x02\x02\u0CC2\u01A5\x03\x02\x02\x02\u0CC3\u0CCA\x05\u025C" +
        "\u012F\x02\u0CC4\u0CC5\x05\u025C\u012F\x02\u0CC5\u0CC6\x07\x17\x02\x02" +
        "\u0CC6\u0CC7\x05\u01DA\xEE\x02\u0CC7\u0CC8\x07\x18\x02\x02\u0CC8\u0CCA" +
        "\x03\x02\x02\x02\u0CC9\u0CC3\x03\x02\x02\x02\u0CC9\u0CC4\x03\x02\x02\x02" +
        "\u0CCA\u01A7\x03\x02\x02\x02\u0CCB\u0CCC\x05\u01E6\xF4\x02\u0CCC\u01A9" +
        "\x03\x02\x02\x02\u0CCD\u0CCE\x05\u01D8\xED\x02\u0CCE\u01AB\x03\x02\x02" +
        "\x02\u0CCF\u0CD0\x05\u0266\u0134\x02\u0CD0\u01AD\x03\x02\x02\x02\u0CD1" +
        "\u0CD2\x05\u01DA\xEE\x02\u0CD2\u01AF\x03\x02\x02\x02\u0CD3\u0CD4\x05\u01E6" +
        "\xF4\x02\u0CD4\u01B1\x03\x02\x02\x02\u0CD5\u0CD6\x05\u01E6\xF4\x02\u0CD6" +
        "\u01B3\x03\x02\x02\x02\u0CD7\u0CD8\x05\u01D8\xED\x02\u0CD8\u01B5\x03\x02" +
        "\x02\x02\u0CD9\u0CDA\x05\u01E0\xF1\x02\u0CDA\u01B7\x03\x02\x02\x02\u0CDB" +
        "\u0CDC\x07\x15\x02\x02\u0CDC\u0CE1\x05\u01E0\xF1\x02\u0CDD\u0CDE\x07\x13" +
        "\x02\x02\u0CDE";
    Verilog2001Parser._serializedATNSegment6 = "\u0CE0\x05\u01E0\xF1\x02\u0CDF\u0CDD\x03\x02\x02\x02\u0CE0\u0CE3\x03\x02" +
        "\x02\x02\u0CE1\u0CDF\x03\x02\x02\x02\u0CE1\u0CE2\x03\x02\x02\x02\u0CE2" +
        "\u0CE4\x03\x02\x02\x02\u0CE3\u0CE1\x03\x02\x02\x02\u0CE4\u0CE5\x07\x16" +
        "\x02\x02\u0CE5\u01B9\x03\x02\x02\x02\u0CE6\u0CE7\x07\x15\x02\x02\u0CE7" +
        "\u0CEC\x05\u01D8\xED\x02\u0CE8\u0CE9\x07\x13\x02\x02\u0CE9\u0CEB\x05\u01D8" +
        "\xED\x02\u0CEA\u0CE8\x03\x02\x02\x02\u0CEB\u0CEE\x03\x02\x02\x02\u0CEC" +
        "\u0CEA\x03\x02\x02\x02\u0CEC\u0CED\x03\x02\x02\x02\u0CED\u0CEF\x03\x02" +
        "\x02\x02\u0CEE\u0CEC\x03\x02\x02\x02\u0CEF\u0CF0\x07\x16\x02\x02\u0CF0" +
        "\u01BB\x03\x02\x02\x02\u0CF1\u0CF2\x07\x15\x02\x02\u0CF2\u0CF3\x05\u01D8" +
        "\xED\x02\u0CF3\u0CF4\x05\u01BA\xDE\x02\u0CF4\u0CF5\x07\x16\x02\x02\u0CF5" +
        "\u01BD\x03\x02\x02\x02\u0CF6\u0CF7\x07\x15\x02\x02\u0CF7\u0CFC\x05\u01EA" +
        "\xF6\x02\u0CF8\u0CF9\x07\x13\x02\x02\u0CF9\u0CFB\x05\u01EA\xF6\x02\u0CFA" +
        "\u0CF8\x03\x02\x02\x02\u0CFB\u0CFE\x03\x02\x02\x02\u0CFC\u0CFA\x03\x02" +
        "\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD\u0CFF\x03\x02\x02\x02\u0CFE" +
        "\u0CFC\x03\x02\x02\x02\u0CFF\u0D00\x07\x16\x02\x02\u0D00\u01BF\x03\x02" +
        "\x02\x02\u0D01\u0D02\x07\x15\x02\x02\u0D02\u0D03\x05\u01D8\xED\x02\u0D03" +
        "\u0D04\x05\u01BE\xE0\x02\u0D04\u0D05\x07\x16\x02\x02\u0D05\u01C1\x03\x02" +
        "\x02\x02\u0D06\u0D07\x07\x15\x02\x02\u0D07\u0D08\x05\u01D8\xED\x02\u0D08" +
        "\u0D09\x05\u01B8\xDD\x02\u0D09\u0D0A\x07\x16\x02\x02\u0D0A\u01C3\x03\x02" +
        "\x02\x02\u0D0B\u0D0C\x07\x15\x02\x02\u0D0C\u0D11\x05\u01C6\xE4\x02\u0D0D" +
        "\u0D0E\x07\x13\x02\x02\u0D0E\u0D10\x05\u01C6\xE4\x02\u0D0F\u0D0D\x03\x02" +
        "\x02\x02\u0D10\u0D13\x03\x02\x02\x02\u0D11\u0D0F\x03\x02\x02\x02\u0D11" +
        "\u0D12\x03\x02\x02\x02\u0D12\u0D14\x03\x02\x02\x02\u0D13\u0D11\x03\x02" +
        "\x02\x02\u0D14\u0D15\x07\x16\x02\x02\u0D15\u01C5\x03\x02\x02\x02\u0D16" +
        "\u0D3C\x05\u0230\u0119\x02\u0D17\u0D18\x05\u0230\u0119\x02\u0D18\u0D19" +
        "\x07\x17\x02\x02\u0D19\u0D1A\x05\u01E0\xF1\x02\u0D1A\u0D21\x07\x18\x02" +
        "\x02\u0D1B\u0D1C\x07\x17\x02\x02\u0D1C\u0D1D\x05\u01E0\xF1\x02\u0D1D\u0D1E" +
        "\x07\x18\x02\x02\u0D1E\u0D20\x03\x02\x02\x02\u0D1F\u0D1B\x03\x02\x02\x02" +
        "\u0D20\u0D23\x03\x02\x02\x02\u0D21\u0D1F\x03\x02\x02\x02\u0D21\u0D22\x03" +
        "\x02\x02\x02\u0D22\u0D3C\x03\x02\x02\x02\u0D23\u0D21\x03\x02\x02\x02\u0D24" +
        "\u0D25\x05\u0230\u0119\x02\u0D25\u0D26\x07\x17\x02\x02\u0D26\u0D27\x05" +
        "\u01E0\xF1\x02\u0D27\u0D2E\x07\x18\x02\x02\u0D28\u0D29\x07\x17\x02\x02" +
        "\u0D29\u0D2A\x05\u01E0\xF1\x02\u0D2A\u0D2B\x07\x18\x02\x02\u0D2B\u0D2D" +
        "\x03\x02\x02\x02\u0D2C\u0D28\x03\x02\x02\x02\u0D2D\u0D30\x03\x02\x02\x02" +
        "\u0D2E\u0D2C\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D31\x03" +
        "\x02\x02\x02\u0D30\u0D2E\x03\x02\x02\x02\u0D31\u0D32\x07\x17\x02\x02\u0D32" +
        "\u0D33\x05\u01F0\xF9\x02\u0D33\u0D34\x07\x18\x02\x02\u0D34\u0D3C\x03\x02" +
        "\x02\x02\u0D35\u0D36\x05\u0230\u0119\x02\u0D36\u0D37\x07\x17\x02\x02\u0D37" +
        "\u0D38\x05\u01F0\xF9\x02\u0D38\u0D39\x07\x18\x02\x02\u0D39\u0D3C\x03\x02" +
        "\x02\x02\u0D3A\u0D3C\x05\u01C4\xE3\x02\u0D3B\u0D16\x03\x02\x02\x02\u0D3B" +
        "\u0D17\x03\x02\x02\x02\u0D3B\u0D24\x03\x02\x02\x02\u0D3B\u0D35\x03\x02" +
        "\x02\x02\u0D3B\u0D3A\x03\x02\x02\x02\u0D3C\u01C7\x03\x02\x02\x02\u0D3D" +
        "\u0D3E\x07\x15\x02\x02\u0D3E\u0D43\x05\u01CA\xE6\x02\u0D3F\u0D40\x07\x13" +
        "\x02\x02\u0D40\u0D42\x05\u01CA\xE6\x02\u0D41\u0D3F\x03\x02\x02\x02\u0D42" +
        "\u0D45\x03\x02\x02\x02\u0D43\u0D41\x03\x02\x02\x02\u0D43\u0D44\x03\x02" +
        "\x02\x02\u0D44\u0D46\x03\x02\x02\x02\u0D45\u0D43\x03\x02\x02\x02\u0D46" +
        "\u0D47\x07\x16\x02\x02\u0D47\u01C9\x03\x02\x02\x02\u0D48\u0D6E\x05\u0232" +
        "\u011A\x02\u0D49\u0D4A\x05\u0232\u011A\x02\u0D4A\u0D4B\x07\x17\x02\x02" +
        "\u0D4B\u0D4C\x05\u01E0\xF1\x02\u0D4C\u0D53\x07\x18\x02\x02\u0D4D\u0D4E" +
        "\x07\x17\x02\x02\u0D4E\u0D4F\x05\u01E0\xF1\x02\u0D4F\u0D50\x07\x18\x02" +
        "\x02\u0D50\u0D52\x03\x02\x02\x02\u0D51\u0D4D\x03\x02\x02\x02\u0D52\u0D55" +
        "\x03\x02\x02\x02\u0D53\u0D51\x03\x02\x02\x02\u0D53\u0D54\x03\x02\x02\x02" +
        "\u0D54\u0D6E\x03\x02\x02\x02\u0D55\u0D53\x03\x02\x02\x02\u0D56\u0D57\x05" +
        "\u0232\u011A\x02\u0D57\u0D58\x07\x17\x02\x02\u0D58\u0D59\x05\u01E0\xF1" +
        "\x02\u0D59\u0D60\x07\x18\x02\x02\u0D5A\u0D5B\x07\x17\x02\x02\u0D5B\u0D5C" +
        "\x05\u01E0\xF1\x02\u0D5C\u0D5D\x07\x18\x02\x02\u0D5D\u0D5F\x03\x02\x02" +
        "\x02\u0D5E\u0D5A\x03\x02\x02\x02\u0D5F\u0D62\x03\x02\x02\x02\u0D60\u0D5E" +
        "\x03\x02\x02\x02\u0D60\u0D61\x03\x02\x02\x02\u0D61\u0D63\x03\x02\x02\x02" +
        "\u0D62\u0D60\x03\x02\x02\x02\u0D63\u0D64\x07\x17\x02\x02\u0D64\u0D65\x05" +
        "\u01F0\xF9\x02\u0D65\u0D66\x07\x18\x02\x02\u0D66\u0D6E\x03\x02\x02\x02" +
        "\u0D67\u0D68\x05\u0232\u011A\x02\u0D68\u0D69\x07\x17\x02\x02\u0D69\u0D6A" +
        "\x05\u01F0\xF9\x02\u0D6A\u0D6B\x07\x18\x02\x02\u0D6B\u0D6E\x03\x02\x02" +
        "\x02\u0D6C\u0D6E\x05\u01C8\xE5\x02\u0D6D\u0D48\x03\x02\x02\x02\u0D6D\u0D49" +
        "\x03\x02\x02\x02\u0D6D\u0D56\x03\x02\x02\x02\u0D6D\u0D67\x03\x02\x02\x02" +
        "\u0D6D\u0D6C\x03\x02\x02\x02\u0D6E\u01CB\x03\x02\x02\x02\u0D6F\u0D73\x05" +
        "\u021E\u0110\x02\u0D70\u0D72\x05\u020A\u0106\x02\u0D71\u0D70\x03\x02\x02" +
        "\x02\u0D72\u0D75\x03\x02\x02\x02\u0D73\u0D71\x03\x02\x02\x02\u0D73\u0D74" +
        "\x03\x02\x02\x02\u0D74\u0D76\x03\x02\x02\x02\u0D75\u0D73\x03\x02\x02\x02" +
        "\u0D76\u0D7F\x07\x12\x02\x02\u0D77\u0D7C\x05\u01D8\xED\x02\u0D78\u0D79" +
        "\x07\x13\x02\x02\u0D79\u0D7B\x05\u01D8\xED\x02\u0D7A\u0D78\x03\x02\x02" +
        "\x02\u0D7B\u0D7E\x03\x02\x02\x02\u0D7C\u0D7A\x03\x02\x02\x02\u0D7C\u0D7D" +
        "\x03\x02\x02\x02\u0D7D\u0D80\x03\x02\x02\x02\u0D7E\u0D7C\x03\x02\x02\x02" +
        "\u0D7F\u0D77\x03\x02\x02\x02\u0D7F\u0D80\x03\x02\x02\x02\u0D80\u0D81\x03" +
        "\x02\x02\x02\u0D81\u0D82\x07\x14\x02\x02\u0D82\u01CD\x03\x02\x02\x02\u0D83" +
        "\u0D87\x05\u022C\u0117\x02\u0D84\u0D86\x05\u020A\u0106\x02\u0D85\u0D84" +
        "\x03\x02\x02\x02\u0D86\u0D89\x03\x02\x02\x02\u0D87\u0D85\x03\x02\x02\x02" +
        "\u0D87\u0D88\x03\x02\x02\x02\u0D88\u0D8A\x03\x02\x02\x02\u0D89\u0D87\x03" +
        "\x02\x02\x02\u0D8A\u0D93\x07\x12\x02\x02\u0D8B\u0D90\x05\u01E0\xF1\x02" +
        "\u0D8C\u0D8D\x07\x13\x02\x02\u0D8D\u0D8F\x05\u01E0\xF1\x02\u0D8E\u0D8C" +
        "\x03\x02\x02\x02\u0D8F\u0D92\x03\x02\x02\x02\u0D90\u0D8E\x03\x02\x02\x02" +
        "\u0D90\u0D91\x03\x02\x02\x02\u0D91\u0D94\x03\x02\x02\x02\u0D92\u0D90\x03" +
        "\x02\x02\x02\u0D93\u0D8B\x03\x02\x02\x02\u0D93\u0D94\x03\x02\x02\x02\u0D94" +
        "\u0D95\x03\x02\x02\x02\u0D95\u0D96\x07\x14\x02\x02\u0D96\u01CF\x03\x02" +
        "\x02\x02\u0D97\u0DA0\x05\u0256\u012C\x02\u0D98\u0D9D\x05\u01E0\xF1\x02" +
        "\u0D99\u0D9A\x07\x13\x02\x02\u0D9A\u0D9C\x05\u01E0\xF1\x02\u0D9B\u0D99" +
        "\x03\x02\x02\x02\u0D9C\u0D9F\x03\x02\x02\x02\u0D9D\u0D9B\x03\x02\x02\x02" +
        "\u0D9D\u0D9E\x03\x02\x02\x02\u0D9E\u0DA1\x03\x02\x02\x02\u0D9F\u0D9D\x03" +
        "\x02\x02\x02\u0DA0\u0D98\x03\x02\x02\x02\u0DA0\u0DA1\x03\x02\x02\x02\u0DA1" +
        "\u01D1\x03\x02\x02\x02\u0DA2\u0DA6\x05\u0224\u0113\x02\u0DA3\u0DA5\x05" +
        "\u020A\u0106\x02\u0DA4\u0DA3\x03\x02\x02\x02\u0DA5\u0DA8\x03\x02\x02\x02" +
        "\u0DA6\u0DA4\x03\x02\x02\x02\u0DA6\u0DA7\x03\x02\x02\x02\u0DA7\u0DA9\x03" +
        "\x02\x02\x02\u0DA8\u0DA6\x03\x02\x02\x02\u0DA9\u0DB2\x07\x12\x02\x02\u0DAA" +
        "\u0DAF\x05\u01D8\xED\x02\u0DAB\u0DAC\x07\x13\x02\x02\u0DAC\u0DAE\x05\u01D8" +
        "\xED\x02\u0DAD\u0DAB\x03\x02\x02\x02\u0DAE\u0DB1\x03\x02\x02\x02\u0DAF" +
        "\u0DAD\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02\u0DB0\u0DB3\x03\x02" +
        "\x02\x02\u0DB1\u0DAF\x03\x02\x02\x02\u0DB2\u0DAA\x03\x02\x02\x02\u0DB2" +
        "\u0DB3\x03\x02\x02\x02\u0DB3\u0DB4\x03\x02\x02\x02\u0DB4\u0DB5\x07\x14" +
        "\x02\x02\u0DB5\u01D3\x03\x02\x02\x02\u0DB6\u0DB7\x05\u01E0\xF1\x02\u0DB7" +
        "\u01D5\x03\x02\x02\x02\u0DB8\u0DB9\x05\u01D8\xED\x02\u0DB9\u01D7\x03\x02" +
        "\x02\x02\u0DBA\u0DBB\x05\u01E0\xF1\x02\u0DBB\u01D9\x03\x02\x02\x02\u0DBC" +
        "\u0DC4\x05\u01D8\xED\x02\u0DBD\u0DBE\x05\u01D8\xED\x02\u0DBE\u0DBF\x07" +
        "C\x02\x02\u0DBF\u0DC0\x05\u01D8\xED\x02\u0DC0\u0DC1\x07C\x02\x02\u0DC1" +
        "\u0DC2\x05\u01D8\xED\x02\u0DC2\u0DC4\x03\x02\x02\x02\u0DC3\u0DBC\x03\x02" +
        "\x02\x02\u0DC3\u0DBD\x03\x02\x02\x02\u0DC4\u01DB\x03\x02\x02\x02\u0DC5" +
        "\u0DD3\x05\u01D8\xED\x02\u0DC6\u0DC7\x05\u01EE\xF8\x02\u0DC7\u0DC8\x07" +
        "C\x02\x02\u0DC8\u0DC9\x05\u01E4\xF3\x02\u0DC9\u0DD3\x03\x02\x02\x02\u0DCA" +
        "\u0DCB\x05\u01D6\xEC\x02\u0DCB\u0DCC\x07\x8C\x02\x02\u0DCC\u0DCD\x05\u01F2" +
        "\xFA\x02\u0DCD\u0DD3\x03\x02\x02\x02\u0DCE\u0DCF\x05\u01D6\xEC\x02\u0DCF" +
        "\u0DD0\x07\x8D\x02\x02\u0DD0\u0DD1\x05\u01F2\xFA\x02\u0DD1\u0DD3\x03\x02" +
        "\x02\x02\u0DD2\u0DC5\x03\x02\x02\x02\u0DD2\u0DC6\x03\x02\x02\x02\u0DD2" +
        "\u0DCA\x03\x02\x02\x02\u0DD2\u0DCE\x03\x02\x02\x02\u0DD3\u01DD\x03\x02" +
        "\x02\x02\u0DD4\u0DD5\x05\u01D8\xED\x02\u0DD5\u01DF\x03\x02\x02\x02\u0DD6" +
        "\u0DED\x05\u01E2\xF2\x02\u0DD7\u0DDB\x05\u0200\u0101\x02\u0DD8\u0DDA\x05" +
        "\u020A\u0106\x02\u0DD9\u0DD8\x03\x02\x02\x02\u0DDA\u0DDD\x03\x02\x02\x02" +
        "\u0DDB\u0DD9\x03\x02\x02\x02\u0DDB\u0DDC\x03\x02\x02\x02\u0DDC\u0DDE\x03" +
        "\x02\x02\x02\u0DDD\u0DDB\x03\x02\x02\x02\u0DDE\u0DDF\x05\u01E2\xF2\x02" +
        "\u0DDF\u0DEC\x03\x02\x02\x02\u0DE0\u0DE4\x07\x8E\x02\x02\u0DE1\u0DE3\x05" +
        "\u020A\u0106\x02\u0DE2\u0DE1\x03\x02\x02\x02\u0DE3\u0DE6\x03\x02\x02\x02" +
        "\u0DE4\u0DE2\x03\x02\x02\x02\u0DE4\u0DE5\x03\x02\x02\x02\u0DE5\u0DE7\x03" +
        "\x02\x02\x02\u0DE6\u0DE4\x03\x02\x02\x02\u0DE7\u0DE8\x05\u01E0\xF1\x02" +
        "\u0DE8\u0DE9\x07C\x02\x02\u0DE9\u0DEA\x05\u01E2\xF2\x02\u0DEA\u0DEC\x03" +
        "\x02\x02\x02\u0DEB\u0DD7\x03\x02\x02\x02\u0DEB\u0DE0\x03\x02\x02\x02\u0DEC" +
        "\u0DEF\x03\x02\x02\x02\u0DED\u0DEB\x03\x02\x02\x02\u0DED\u0DEE\x03\x02" +
        "\x02\x02\u0DEE\u01E1\x03\x02\x02\x02\u0DEF\u0DED\x03\x02\x02\x02\u0DF0" +
        "\u0DF4\x05\u01FE\u0100\x02\u0DF1\u0DF3\x05\u020A\u0106\x02\u0DF2\u0DF1" +
        "\x03\x02\x02\x02\u0DF3\u0DF6\x03\x02\x02\x02\u0DF4\u0DF2\x03\x02\x02\x02" +
        "\u0DF4\u0DF5\x03\x02\x02\x02\u0DF5\u0DF7\x03\x02\x02\x02\u0DF6\u0DF4\x03" +
        "\x02\x02\x02\u0DF7\u0DF8\x05\u01F8\xFD\x02\u0DF8\u0DFC\x03\x02\x02\x02" +
        "\u0DF9\u0DFC\x05\u01F8\xFD\x02\u0DFA\u0DFC\x07\xAE\x02\x02\u0DFB\u0DF0" +
        "\x03\x02\x02\x02\u0DFB\u0DF9\x03\x02\x02\x02\u0DFB\u0DFA\x03\x02\x02\x02" +
        "\u0DFC\u01E3\x03\x02\x02\x02\u0DFD\u0DFE\x05\u01D8\xED\x02\u0DFE\u01E5" +
        "\x03\x02\x02\x02\u0DFF\u0E05\x05\u01E0\xF1\x02\u0E00\u0E01\x07C\x02\x02" +
        "\u0E01\u0E02\x05\u01E0\xF1\x02\u0E02\u0E03\x07C\x02\x02\u0E03\u0E04\x05" +
        "\u01E0\xF1\x02\u0E04\u0E06\x03\x02\x02\x02\u0E05\u0E00\x03\x02\x02\x02" +
        "\u0E05\u0E06\x03\x02\x02\x02\u0E06\u01E7\x03\x02\x02\x02\u0E07\u0E08\x05" +
        "\u01EA\xF6\x02\u0E08\u0E0C\x07\x8E\x02\x02\u0E09\u0E0B\x05\u020A\u0106" +
        "\x02\u0E0A\u0E09\x03\x02\x02\x02\u0E0B\u0E0E\x03\x02\x02\x02\u0E0C\u0E0A" +
        "\x03\x02\x02\x02\u0E0C\u0E0D\x03\x02\x02\x02\u0E0D\u0E0F\x03\x02\x02\x02" +
        "\u0E0E\u0E0C\x03\x02\x02\x02\u0E0F\u0E10\x05\u01EA\xF6\x02\u0E10\u0E11" +
        "\x07C\x02\x02\u0E11\u0E12\x05\u01EA\xF6\x02\u0E12\u01E9\x03\x02\x02\x02" +
        "\u0E13\u0E1E\x05\u01F6\xFC\x02\u0E14\u0E18\x05\u0202\u0102\x02\u0E15\u0E17" +
        "\x05\u020A\u0106\x02\u0E16\u0E15\x03\x02\x02\x02\u0E17\u0E1A\x03\x02\x02" +
        "\x02\u0E18\u0E16\x03\x02\x02\x02\u0E18\u0E19\x03\x02\x02\x02\u0E19\u0E1B" +
        "\x03\x02\x02\x02\u0E1A\u0E18\x03\x02\x02\x02\u0E1B\u0E1C\x05\u01F6\xFC" +
        "\x02\u0E1C\u0E1E\x03\x02\x02\x02\u0E1D\u0E13\x03\x02\x02\x02\u0E1D\u0E14" +
        "\x03\x02\x02\x02\u0E1E\u0E35\x03\x02\x02\x02\u0E1F\u0E23\x05\u0204\u0103" +
        "\x02\u0E20\u0E22\x05\u020A\u0106\x02\u0E21\u0E20\x03\x02\x02\x02\u0E22" +
        "\u0E25\x03\x02\x02\x02\u0E23\u0E21\x03\x02\x02\x02\u0E23\u0E24\x03\x02" +
        "\x02\x02\u0E24\u0E26\x03\x02\x02\x02\u0E25\u0E23\x03\x02\x02\x02\u0E26" +
        "\u0E27\x05\u01EA\xF6\x02\u0E27\u0E34\x03\x02\x02\x02\u0E28\u0E2C\x07\x8E" +
        "\x02\x02\u0E29\u0E2B\x05\u020A\u0106\x02\u0E2A\u0E29\x03\x02\x02\x02\u0E2B" +
        "\u0E2E\x03\x02\x02\x02\u0E2C\u0E2A\x03\x02\x02\x02\u0E2C\u0E2D\x03\x02" +
        "\x02\x02\u0E2D\u0E2F\x03\x02\x02\x02\u0E2E\u0E2C\x03\x02\x02\x02\u0E2F" +
        "\u0E30\x05\u01EA\xF6\x02\u0E30\u0E31\x07C\x02\x02\u0E31\u0E32\x05\u01EA" +
        "\xF6\x02\u0E32\u0E34\x03\x02\x02\x02\u0E33\u0E1F\x03\x02\x02\x02\u0E33" +
        "\u0E28\x03\x02\x02\x02\u0E34\u0E37\x03\x02\x02\x02\u0E35\u0E33\x03\x02" +
        "\x02\x02\u0E35\u0E36\x03\x02\x02\x02\u0E36\u01EB\x03\x02\x02\x02\u0E37" +
        "\u0E35\x03\x02\x02\x02\u0E38\u0E3E\x05\u01EA\xF6\x02\u0E39\u0E3A\x07C" +
        "\x02\x02\u0E3A\u0E3B\x05\u01EA\xF6\x02\u0E3B\u0E3C\x07C\x02\x02\u0E3C" +
        "\u0E3D\x05\u01EA\xF6\x02\u0E3D\u0E3F\x03\x02\x02\x02\u0E3E\u0E39\x03\x02" +
        "\x02\x02\u0E3E\u0E3F\x03\x02\x02\x02\u0E3F\u01ED\x03\x02\x02\x02\u0E40" +
        "\u0E41\x05\u01D8\xED\x02\u0E41\u01EF\x03\x02\x02\x02\u0E42\u0E50\x05\u01E0" +
        "\xF1\x02\u0E43\u0E44\x05\u01EE\xF8\x02\u0E44\u0E45\x07C\x02\x02\u0E45" +
        "\u0E46\x05\u01E4\xF3\x02\u0E46\u0E50\x03\x02\x02\x02\u0E47\u0E48\x05\u01D4" +
        "\xEB\x02\u0E48\u0E49\x07\x8C\x02\x02\u0E49\u0E4A\x05\u01F2\xFA\x02\u0E4A" +
        "\u0E50\x03\x02\x02\x02\u0E4B\u0E4C\x05\u01D4\xEB\x02\u0E4C\u0E4D\x07\x8D" +
        "\x02\x02\u0E4D\u0E4E\x05\u01F2\xFA\x02\u0E4E\u0E50\x03\x02\x02\x02\u0E4F" +
        "\u0E42\x03\x02\x02\x02\u0E4F\u0E43\x03\x02\x02\x02\u0E4F\u0E47\x03\x02" +
        "\x02\x02\u0E4F\u0E4B\x03\x02\x02\x02\u0E50\u01F1\x03\x02\x02\x02\u0E51" +
        "\u0E52\x05\u01D8\xED\x02\u0E52\u01F3\x03\x02\x02\x02\u0E53\u0E5F\x05\u01BA" +
        "\xDE\x02\u0E54\u0E5F\x05\u01CC\xE7\x02\u0E55\u0E56\x07\x12\x02\x02\u0E56" +
        "\u0E57\x05\u01DA\xEE\x02\u0E57\u0E58\x07\x14\x02\x02\u0E58\u0E5F\x03\x02" +
        "\x02\x02\u0E59\u0E5F\x05\u01BC\xDF\x02\u0E5A\u0E5F\x05\u0226\u0114\x02" +
        "\u0E5B\u0E5F\x05\u0206\u0104\x02\u0E5C\u0E5F\x05\u024A\u0126\x02\u0E5D" +
        "\u0E5F\x05\u0254\u012B\x02\u0E5E\u0E53\x03\x02\x02\x02\u0E5E\u0E54\x03" +
        "\x02\x02\x02\u0E5E\u0E55\x03\x02\x02\x02\u0E5E\u0E59\x03\x02\x02\x02\u0E5E" +
        "\u0E5A\x03\x02\x02\x02\u0E5E\u0E5B\x03\x02\x02\x02\u0E5E\u0E5C\x03\x02" +
        "\x02\x02\u0E5E\u0E5D\x03\x02\x02\x02\u0E5F\u01F5\x03\x02\x02\x02\u0E60" +
        "\u0E6C\x05\u0206\u0104\x02\u0E61\u0E6C\x05\u0236\u011C\x02\u0E62\u0E6C" +
        "\x05\u01BE\xE0\x02\u0E63\u0E6C\x05\u01C0\xE1\x02\u0E64\u0E6C\x05\u01CE" +
        "\xE8\x02\u0E65\u0E6C\x05\u01D0\xE9\x02\u0E66\u0E6C\x05\u01CC\xE7\x02\u0E67" +
        "\u0E68\x07\x12\x02\x02\u0E68\u0E69\x05\u01EC\xF7\x02\u0E69\u0E6A\x07\x14" +
        "\x02\x02\u0E6A\u0E6C\x03\x02\x02\x02\u0E6B\u0E60\x03\x02\x02\x02\u0E6B" +
        "\u0E61\x03\x02\x02\x02\u0E6B\u0E62\x03\x02\x02\x02\u0E6B\u0E63\x03\x02" +
        "\x02\x02\u0E6B\u0E64\x03\x02\x02\x02\u0E6B\u0E65\x03\x02\x02\x02\u0E6B" +
        "\u0E66\x03\x02\x02\x02\u0E6B\u0E67\x03\x02\x02\x02\u0E6C\u01F7\x03\x02" +
        "\x02\x02\u0E6D\u0E94\x05\u0206\u0104\x02\u0E6E\u0E94\x05\u022E\u0118\x02" +
        "\u0E6F\u0E74\x05\u022E\u0118\x02\u0E70\u0E71\x07\x17\x02\x02\u0E71\u0E72" +
        "\x05\u01E0\xF1\x02\u0E72\u0E73\x07\x18\x02\x02\u0E73\u0E75\x03\x02\x02" +
        "\x02\u0E74\u0E70\x03\x02\x02\x02\u0E75\u0E76\x03\x02\x02\x02\u0E76\u0E74" +
        "\x03\x02\x02\x02\u0E76\u0E77\x03\x02\x02\x02\u0E77\u0E94\x03\x02\x02\x02" +
        "\u0E78\u0E7D\x05\u022E\u0118\x02\u0E79\u0E7A\x07\x17\x02\x02\u0E7A\u0E7B" +
        "\x05\u01E0\xF1\x02\u0E7B\u0E7C\x07\x18\x02\x02\u0E7C\u0E7E\x03\x02\x02" +
        "\x02\u0E7D\u0E79\x03\x02\x02\x02\u0E7E\u0E7F\x03\x02\x02\x02\u0E7F\u0E7D" +
        "\x03\x02\x02\x02\u0E7F\u0E80\x03\x02\x02\x02\u0E80\u0E81\x03\x02\x02\x02" +
        "\u0E81\u0E82\x07\x17\x02\x02\u0E82\u0E83\x05\u01F0\xF9\x02\u0E83\u0E84" +
        "\x07\x18\x02\x02\u0E84\u0E94\x03\x02\x02\x02\u0E85\u0E86\x05\u022E\u0118" +
        "\x02\u0E86\u0E87\x07\x17\x02\x02\u0E87\u0E88\x05\u01F0\xF9\x02\u0E88\u0E89" +
        "\x07\x18\x02\x02\u0E89\u0E94\x03\x02\x02\x02\u0E8A\u0E94\x05\u01B8\xDD" +
        "\x02\u0E8B\u0E94\x05\u01C2\xE2\x02\u0E8C\u0E94\x05\u01CE\xE8\x02\u0E8D" +
        "\u0E94\x05\u01D0\xE9\x02\u0E8E\u0E94\x05\u01CC\xE7\x02\u0E8F\u0E90\x07" +
        "\x12\x02\x02\u0E90\u0E91\x05\u01E6\xF4\x02\u0E91\u0E92\x07\x14\x02\x02" +
        "\u0E92\u0E94\x03\x02\x02\x02\u0E93\u0E6D\x03\x02\x02\x02\u0E93\u0E6E\x03" +
        "\x02\x02\x02\u0E93\u0E6F\x03\x02\x02\x02\u0E93\u0E78\x03\x02\x02\x02\u0E93" +
        "\u0E85\x03\x02\x02\x02\u0E93\u0E8A\x03\x02\x02\x02\u0E93\u0E8B\x03\x02" +
        "\x02\x02\u0E93\u0E8C\x03\x02\x02\x02\u0E93\u0E8D\x03\x02\x02\x02\u0E93" +
        "\u0E8E\x03\x02\x02\x02\u0E93\u0E8F\x03\x02\x02\x02\u0E94\u01F9\x03\x02" +
        "\x02\x02\u0E95\u0EBB\x05\u0230\u0119\x02\u0E96\u0E97\x05\u0230\u0119\x02" +
        "\u0E97\u0E98\x07\x17\x02\x02\u0E98\u0E99\x05\u01D8\xED\x02\u0E99\u0EA0" +
        "\x07\x18\x02\x02\u0E9A\u0E9B\x07\x17\x02\x02\u0E9B\u0E9C\x05\u01D8\xED" +
        "\x02\u0E9C\u0E9D\x07\x18\x02\x02\u0E9D\u0E9F\x03\x02\x02\x02\u0E9E\u0E9A" +
        "\x03\x02\x02\x02\u0E9F\u0EA2\x03\x02\x02\x02\u0EA0\u0E9E\x03\x02\x02\x02" +
        "\u0EA0\u0EA1\x03\x02\x02\x02\u0EA1\u0EBB\x03\x02\x02\x02\u0EA2\u0EA0\x03" +
        "\x02\x02\x02\u0EA3\u0EA4\x05\u0230\u0119\x02\u0EA4\u0EA5\x07\x17\x02\x02" +
        "\u0EA5\u0EA6\x05\u01D8\xED\x02\u0EA6\u0EAD\x07\x18\x02\x02\u0EA7\u0EA8" +
        "\x07\x17\x02\x02\u0EA8\u0EA9\x05\u01D8\xED\x02\u0EA9\u0EAA\x07\x18\x02" +
        "\x02\u0EAA\u0EAC\x03\x02\x02\x02\u0EAB\u0EA7\x03\x02\x02\x02\u0EAC\u0EAF" +
        "\x03\x02\x02\x02\u0EAD\u0EAB\x03\x02\x02\x02\u0EAD\u0EAE\x03\x02\x02\x02" +
        "\u0EAE\u0EB0\x03\x02\x02\x02\u0EAF\u0EAD\x03\x02\x02\x02\u0EB0\u0EB1\x07" +
        "\x17\x02\x02\u0EB1\u0EB2\x05\u01DC\xEF\x02\u0EB2\u0EB3\x07\x18\x02\x02" +
        "\u0EB3\u0EBB\x03\x02\x02\x02\u0EB4\u0EB5\x05\u0230\u0119\x02\u0EB5\u0EB6" +
        "\x07\x17\x02\x02\u0EB6\u0EB7\x05\u01DC\xEF\x02\u0EB7\u0EB8\x07\x18\x02" +
        "\x02\u0EB8\u0EBB\x03\x02\x02\x02\u0EB9\u0EBB\x05\u01C4\xE3\x02\u0EBA\u0E95" +
        "\x03\x02\x02\x02\u0EBA\u0E96\x03\x02\x02\x02\u0EBA\u0EA3\x03\x02\x02\x02" +
        "\u0EBA\u0EB4\x03\x02\x02\x02\u0EBA\u0EB9\x03\x02\x02\x02\u0EBB\u01FB\x03" +
        "\x02\x02\x02\u0EBC\u0EE2\x05\u0232\u011A\x02\u0EBD\u0EBE\x05\u0232\u011A" +
        "\x02\u0EBE\u0EBF\x07\x17\x02\x02\u0EBF\u0EC0\x05\u01E0\xF1\x02\u0EC0\u0EC7" +
        "\x07\x18\x02\x02\u0EC1\u0EC2\x07\x17\x02\x02\u0EC2\u0EC3\x05\u01E0\xF1" +
        "\x02\u0EC3\u0EC4\x07\x18\x02\x02\u0EC4\u0EC6\x03\x02\x02\x02\u0EC5\u0EC1" +
        "\x03\x02\x02\x02\u0EC6\u0EC9\x03\x02\x02\x02\u0EC7\u0EC5\x03\x02\x02\x02" +
        "\u0EC7\u0EC8\x03\x02\x02\x02\u0EC8\u0EE2\x03\x02\x02\x02\u0EC9\u0EC7\x03" +
        "\x02\x02\x02\u0ECA\u0ECB\x05\u0232\u011A\x02\u0ECB\u0ECC\x07\x17\x02\x02" +
        "\u0ECC\u0ECD\x05\u01E0\xF1\x02\u0ECD\u0ED4\x07\x18\x02\x02\u0ECE\u0ECF" +
        "\x07\x17\x02\x02\u0ECF\u0ED0\x05\u01E0\xF1\x02\u0ED0\u0ED1\x07\x18\x02" +
        "\x02\u0ED1\u0ED3\x03\x02\x02\x02\u0ED2\u0ECE\x03\x02\x02\x02\u0ED3\u0ED6" +
        "\x03\x02\x02\x02\u0ED4\u0ED2\x03\x02\x02\x02\u0ED4\u0ED5\x03\x02\x02\x02" +
        "\u0ED5\u0ED7\x03\x02\x02\x02\u0ED6\u0ED4\x03\x02\x02\x02\u0ED7\u0ED8\x07" +
        "\x17\x02\x02\u0ED8\u0ED9\x05\u01F0\xF9\x02\u0ED9\u0EDA\x07\x18\x02\x02" +
        "\u0EDA\u0EE2\x03\x02\x02\x02\u0EDB\u0EDC\x05\u0232\u011A\x02\u0EDC\u0EDD" +
        "\x07\x17\x02\x02\u0EDD\u0EDE\x05\u01F0\xF9\x02\u0EDE\u0EDF\x07\x18\x02" +
        "\x02\u0EDF\u0EE2\x03\x02\x02\x02\u0EE0\u0EE2\x05\u01C8\xE5\x02\u0EE1\u0EBC" +
        "\x03\x02\x02\x02\u0EE1\u0EBD\x03\x02\x02\x02\u0EE1\u0ECA\x03\x02\x02\x02" +
        "\u0EE1\u0EDB\x03\x02\x02\x02\u0EE1\u0EE0\x03\x02\x02\x02\u0EE2\u01FD\x03" +
        "\x02\x02\x02\u0EE3\u0EE4\t\x13\x02\x02\u0EE4\u01FF\x03\x02\x02\x02\u0EE5" +
        "\u0EE6\t\x14\x02\x02\u0EE6\u0201\x03\x02\x02\x02\u0EE7\u0EE8\t\x15\x02" +
        "\x02\u0EE8\u0203\x03\x02\x02\x02\u0EE9\u0EEA\t\x16\x02\x02\u0EEA\u0205" +
        "\x03\x02\x02\x02\u0EEB\u0EEC\t\x17\x02\x02\u0EEC\u0207\x03\x02\x02\x02" +
        "\u0EED\u0EEE\x07\xA8\x02\x02\u0EEE\u0EEF\x07\xB4\x02\x02\u0EEF\u0EF0\x07" +
        "\x98\x02\x02\u0EF0\u0EF1\x07\xB4\x02\x02\u0EF1\u0209\x03\x02\x02\x02\u0EF2" +
        "\u0EF3\x07\x12\x02\x02\u0EF3\u0EF4\x07x\x02\x02\u0EF4\u0EF9\x05\u020C" +
        "\u0107\x02\u0EF5\u0EF6\x07\x13\x02\x02\u0EF6\u0EF8\x05\u020C\u0107\x02" +
        "\u0EF7\u0EF5\x03\x02\x02\x02\u0EF8\u0EFB\x03\x02\x02\x02\u0EF9\u0EF7\x03" +
        "\x02\x02\x02\u0EF9\u0EFA\x03\x02\x02\x02\u0EFA\u0EFC\x03\x02\x02\x02\u0EFB" +
        "\u0EF9\x03\x02\x02\x02\u0EFC\u0EFD\x07x\x02\x02\u0EFD\u0EFE\x07\x14\x02" +
        "\x02\u0EFE\u020B\x03\x02\x02\x02\u0EFF\u0F00\x05\u020E\u0108\x02\u0F00" +
        "\u0F01\x075\x02\x02\u0F01\u0F02\x05\u01D8\xED\x02\u0F02\u0F05\x03\x02" +
        "\x02\x02\u0F03\u0F05\x05\u020E\u0108\x02\u0F04\u0EFF\x03\x02\x02\x02\u0F04" +
        "\u0F03\x03\x02\x02\x02\u0F05\u020D\x03\x02\x02\x02\u0F06\u0F07\x05\u0236" +
        "\u011C\x02\u0F07\u020F\x03\x02\x02\x02\u0F08\u0F0B\x05\u0250\u0129\x02" +
        "\u0F09\u0F0B\x05\u0218\u010D\x02\u0F0A\u0F08\x03\x02\x02\x02\u0F0A\u0F09" +
        "\x03\x02\x02\x02\u0F0B\u0211\x03\x02\x02\x02\u0F0C\u0F0D\x05\u0236\u011C" +
        "\x02\u0F0D\u0213\x03\x02\x02\x02\u0F0E\u0F0F\x05\u0236\u011C\x02\u0F0F" +
        "\u0215\x03\x02\x02\x02\u0F10\u0F11\x05\u0236\u011C\x02\u0F11\u0217\x03" +
        "\x02\x02\x02\u0F12\u0F14\x07\xB1\x02\x02\u0F13\u0F15\x05\x8CG\x02\u0F14" +
        "\u0F13\x03\x02\x02\x02\u0F14\u0F15\x03\x02\x02\x02\u0F15\u0219\x03\x02" +
        "\x02\x02\u0F16\u0F1D\x05\u026A\u0136\x02\u0F17\u0F18\x07\x07\x02\x02\u0F18" +
        "\u0F1C\x05\u0268\u0135\x02\u0F19\u0F1A\x07\x07\x02\x02\u0F1A\u0F1C\x05" +
        "\u026A\u0136\x02\u0F1B\u0F17\x03\x02\x02\x02\u0F1B\u0F19\x03\x02\x02\x02" +
        "\u0F1C\u0F1F\x03\x02\x02\x02\u0F1D\u0F1B\x03\x02\x02\x02\u0F1D\u0F1E\x03" +
        "\x02\x02\x02\u0F1E\u021B\x03\x02\x02\x02\u0F1F\u0F1D\x03\x02\x02\x02\u0F20" +
        "\u0F21\x05\u0236\u011C\x02\u0F21\u021D\x03\x02\x02\x02\u0F22\u0F23\x05" +
        "\u0236\u011C\x02\u0F23\u021F\x03\x02\x02\x02\u0F24\u0F25\x05\u0210\u0109" +
        "\x02\u0F25\u0221\x03\x02\x02\x02\u0F26\u0F27\x05\u0236\u011C\x02\u0F27" +
        "\u0223\x03\x02\x02\x02\u0F28\u0F29\x05\u0236\u011C\x02\u0F29\u0225\x03" +
        "\x02\x02\x02\u0F2A\u0F2B\x05\u0236\u011C\x02\u0F2B\u0227\x03\x02\x02\x02" +
        "\u0F2C\u0F2D\x05\u022E\u0118\x02\u0F2D\u0229\x03\x02\x02\x02\u0F2E\u0F2F" +
        "\x05\u022E\u0118\x02\u0F2F\u022B\x03\x02\x02\x02\u0F30\u0F31\x05\u022E" +
        "\u0118\x02\u0F31\u022D\x03\x02\x02\x02\u0F32\u0F35\x05\u0252\u012A\x02" +
        "\u0F33\u0F35\x05\u021A\u010E\x02\u0F34\u0F32\x03\x02\x02\x02\u0F34\u0F33" +
        "\x03\x02\x02\x02\u0F35\u022F\x03\x02\x02\x02\u0F36\u0F37\x05\u022E\u0118" +
        "\x02\u0F37\u0231\x03\x02\x02\x02\u0F38\u0F39\x05\u022E\u0118\x02\u0F39" +
        "\u0233\x03\x02\x02\x02\u0F3A\u0F3B\x05\u022E\u0118\x02\u0F3B\u0235\x03" +
        "\x02\x02\x02\u0F3C\u0F3D\t\x18\x02\x02\u0F3D\u0237\x03\x02\x02\x02\u0F3E" +
        "\u0F3F\x05\u0236\u011C\x02\u0F3F\u0239\x03\x02\x02\x02\u0F40\u0F41\x05" +
        "\u0236\u011C\x02\u0F41\u023B\x03\x02\x02\x02\u0F42\u0F43\x05\u0236\u011C" +
        "\x02\u0F43\u023D\x03\x02\x02\x02\u0F44\u0F45\x05\u0236\u011C\x02\u0F45" +
        "\u023F\x03\x02\x02\x02\u0F46\u0F47\x05\u0236\u011C\x02\u0F47\u0241\x03" +
        "\x02\x02\x02\u0F48\u0F49\x05\u0236\u011C\x02\u0F49\u0243\x03\x02\x02\x02" +
        "\u0F4A\u0F4B\x05\u0210\u0109\x02\u0F4B\u0245\x03\x02\x02\x02\u0F4C\u0F4D" +
        "\x05\u0236\u011C\x02\u0F4D\u0247\x03\x02\x02\x02\u0F4E\u0F4F\x05\u0236" +
        "\u011C\x02\u0F4F\u0249\x03\x02\x02\x02\u0F50\u0F51\x05\u0236\u011C\x02" +
        "\u0F51\u024B\x03\x02\x02\x02\u0F52\u0F53\x05\u0236\u011C\x02\u0F53\u024D" +
        "\x03\x02\x02\x02\u0F54\u0F55\x05\u0236\u011C\x02\u0F55\u024F\x03\x02\x02" +
        "\x02\u0F56\u0F58\x07\xB2\x02\x02\u0F57\u0F59\x05\x8CG\x02\u0F58\u0F57" +
        "\x03\x02\x02\x02\u0F58\u0F59\x03\x02\x02\x02\u0F59\u0251\x03\x02\x02\x02" +
        "\u0F5A\u0F5D\x05\u0268\u0135\x02\u0F5B\u0F5C\x07\x07\x02\x02\u0F5C\u0F5E" +
        "\x07\xB1\x02\x02\u0F5D\u0F5B\x03\x02\x02\x02\u0F5D\u0F5E\x03\x02\x02\x02" +
        "\u0F5E\u0253\x03\x02\x02\x02\u0F5F\u0F60\x05\u0236\u011C\x02\u0F60\u0255" +
        "\x03\x02\x02\x02\u0F61\u0F62\x07\xB3\x02\x02\u0F62\u0257\x03\x02\x02\x02" +
        "\u0F63\u0F64\x07\xB3\x02\x02\u0F64\u0259\x03\x02\x02\x02\u0F65\u0F66\x05" +
        "\u0236\u011C\x02\u0F66\u025B\x03\x02\x02\x02\u0F67\u0F68\x05\u0236\u011C" +
        "\x02\u0F68\u025D\x03\x02\x02\x02\u0F69\u0F6A\x07\xB2\x02\x02\u0F6A\u025F" +
        "\x03\x02\x02\x02\u0F6B\u0F6C\x05\u0236\u011C\x02\u0F6C\u0261\x03\x02\x02" +
        "\x02\u0F6D\u0F6E\x05\u0236\u011C\x02\u0F6E\u0263\x03\x02\x02\x02\u0F6F" +
        "\u0F70\x05\u0210\u0109\x02\u0F70\u0265\x03\x02\x02\x02\u0F71\u0F72\x05" +
        "\u0236\u011C\x02\u0F72\u0267\x03\x02\x02\x02\u0F73\u0F77\x07\xB2\x02\x02" +
        "\u0F74\u0F75\x07\x17\x02\x02\u0F75\u0F76\x07\xAA\x02\x02\u0F76\u0F78\x07" +
        "\x18\x02\x02\u0F77\u0F74\x03\x02\x02\x02\u0F77\u0F78\x03\x02\x02\x02\u0F78" +
        "\u0F82\x03\x02\x02\x02\u0F79\u0F7A\x07\x07\x02\x02\u0F7A\u0F7E\x07\xB2" +
        "\x02\x02\u0F7B\u0F7C\x07\x17\x02\x02\u0F7C\u0F7D\x07\xAA\x02\x02\u0F7D" +
        "\u0F7F\x07\x18\x02\x02\u0F7E\u0F7B\x03\x02\x02\x02\u0F7E\u0F7F\x03\x02" +
        "\x02\x02\u0F7F\u0F81\x03\x02\x02\x02\u0F80\u0F79\x03\x02\x02\x02\u0F81" +
        "\u0F84\x03\x02\x02\x02\u0F82\u0F80\x03\x02\x02\x02\u0F82\u0F83\x03\x02" +
        "\x02\x02\u0F83\u0269\x03\x02\x02\x02\u0F84\u0F82\x03\x02\x02\x02\u0F85" +
        "\u0F89\x07\xB1\x02\x02\u0F86\u0F87\x07\x17\x02\x02\u0F87\u0F88\x07\xAA" +
        "\x02\x02\u0F88\u0F8A\x07\x18\x02\x02\u0F89\u0F86\x03\x02\x02\x02\u0F89" +
        "\u0F8A\x03\x02\x02\x02\u0F8A\u0F94\x03\x02\x02\x02\u0F8B\u0F8C\x07\x07" +
        "\x02\x02\u0F8C\u0F90\x07\xB1\x02\x02\u0F8D\u0F8E\x07\x17\x02\x02\u0F8E" +
        "\u0F8F\x07\xAA\x02\x02\u0F8F\u0F91\x07\x18\x02\x02\u0F90\u0F8D\x03\x02" +
        "\x02\x02\u0F90\u0F91\x03\x02\x02\x02\u0F91\u0F93\x03\x02\x02\x02\u0F92" +
        "\u0F8B\x03\x02\x02\x02\u0F93\u0F96\x03\x02\x02\x02\u0F94\u0F92\x03\x02" +
        "\x02\x02\u0F94\u0F95\x03\x02\x02\x02\u0F95\u026B\x03\x02\x02\x02\u0F96" +
        "\u0F94\x03\x02\x02\x02\u01A5\u0273\u027C\u0281\u0295\u02A1\u02A8\u02AF" +
        "\u02B7\u02BB\u02BE\u02C3\u02CD\u02D3\u02D6\u02DC\u02E4\u02EA\u02ED\u02F3" +
        "\u02F8\u0303\u030E\u0319\u0320\u0323\u0329\u032D\u0336\u033B\u0348\u034D" +
        "\u0354\u035B\u035F\u0368\u036F\u0376\u037D\u0384\u0388\u038D\u0394\u039B" +
        "\u03A2\u03A9\u03B0\u03B7\u03BB\u03C0\u03C7\u03CE\u03D5\u03DC\u03E3\u03E7" +
        "\u03F3\u03FB\u03FE\u0417\u041E\u0421\u0430\u0434\u043B\u043E\u0441\u0447" +
        "\u044A\u044D\u0453\u0456\u0459\u045E\u0461\u0464\u046A\u046D\u0472\u0479" +
        "\u0495\u0498\u049F\u04A2\u04A9\u04AC\u04AF\u04B6\u04B9\u04BC\u04C3\u04C6" +
        "\u04C9\u04D0\u04D3\u04D6\u04DA\u04E1\u04E4\u04E7\u04EB\u04F2\u04F5\u04F8" +
        "\u04FC\u0503\u0506\u050A\u050F\u0518\u051F\u0522\u0527\u052E\u0531\u0557" +
        "\u0566\u0571\u0573\u0577\u0580\u0584\u058A\u0591\u0594\u059C\u059F\u05A3" +
        "\u05AB\u05AE\u05B6\u05B9\u05BD\u05C5\u05CD\u05D5\u05DD\u05E5\u05ED\u05F5" +
        "\u05FB\u0601\u0605\u0615\u061D\u062B\u0630\u0646\u0649\u064C\u0653\u0657" +
        "\u065D\u0660\u0663\u066D\u0671\u0675\u067B\u0682\u0688\u0692\u0696\u069D" +
        "\u06A5\u06AA\u06B1\u06B7\u06BD\u06C3\u06CA\u06D0\u06D7\u06DA\u06DD\u06E0" +
        "\u06E4\u06E7\u06E9\u06F3\u06FA\u0701\u0708\u070F\u0716\u071D\u0724\u0728" +
        "\u072C\u072F\u0739\u0742\u0745\u0749\u0750";
    Verilog2001Parser._serializedATNSegment7 = "\u0757\u075E\u0769\u0770\u0777\u077E\u0785\u078C\u078F\u0796\u079D\u07A0" +
        "\u07A7\u07AE\u07B1\u07B8\u07BF\u07C6\u07CB\u07CE\u07DB\u07E6\u07F1\u07FB" +
        "\u0801\u0809\u0811\u081A\u0825\u082D\u083F\u0851\u086F\u0876\u0885\u088D" +
        "\u0890\u0898\u08A3\u08AA\u08B2\u08B5\u08BA\u08BE\u08C3\u08CA\u08D2\u08D9" +
        "\u08E0\u08E9\u08F3\u08FD\u0905\u0908\u091B\u0920\u0927\u092A\u0934\u0944" +
        "\u094B\u095B\u0965\u0969\u0971\u0974\u0979\u0988\u098B\u0990\u099B\u099E" +
        "\u09A3\u09AB\u09B4\u09BB\u09C2\u09C9\u09D0\u09D7\u09E0\u09E7\u09F0\u09F7" +
        "\u09FE\u0A05\u0A0C\u0A10\u0A16\u0A1A\u0A1F\u0A28\u0A2F\u0A36\u0A3D\u0A44" +
        "\u0A4B\u0A4F\u0A59\u0A62\u0A6C\u0A7B\u0A86\u0A88\u0A90\u0AA2\u0AA5\u0AB5" +
        "\u0ABA\u0AC3\u0AC6\u0AD6\u0ADB\u0AE5\u0AF2\u0AFF\u0B04\u0B0B\u0B13\u0B16" +
        "\u0B20\u0B2D\u0B3A\u0B3F\u0B46\u0B4E\u0B51\u0B6B\u0B85\u0B8E\u0B91\u0B94" +
        "\u0B9F\u0BA2\u0BA5\u0BAD\u0BB6\u0BC0\u0BCA\u0BD5\u0BDF\u0BE3\u0BEB\u0BF6" +
        "\u0BFE\u0C0C\u0C19\u0C1D\u0C21\u0C28\u0C59\u0C85\u0C89\u0C8F\u0C97\u0C9D" +
        "\u0CB5\u0CC1\u0CC9\u0CE1\u0CEC\u0CFC\u0D11\u0D21\u0D2E\u0D3B\u0D43\u0D53" +
        "\u0D60\u0D6D\u0D73\u0D7C\u0D7F\u0D87\u0D90\u0D93\u0D9D\u0DA0\u0DA6\u0DAF" +
        "\u0DB2\u0DC3\u0DD2\u0DDB\u0DE4\u0DEB\u0DED\u0DF4\u0DFB\u0E05\u0E0C\u0E18" +
        "\u0E1D\u0E23\u0E2C\u0E33\u0E35\u0E3E\u0E4F\u0E5E\u0E6B\u0E76\u0E7F\u0E93" +
        "\u0EA0\u0EAD\u0EBA\u0EC7\u0ED4\u0EE1\u0EF9\u0F04\u0F0A\u0F14\u0F1B\u0F1D" +
        "\u0F34\u0F58\u0F5D\u0F77\u0F7E\u0F82\u0F89\u0F90\u0F94";
    Verilog2001Parser._serializedATN = Utils.join([
        Verilog2001Parser._serializedATNSegment0,
        Verilog2001Parser._serializedATNSegment1,
        Verilog2001Parser._serializedATNSegment2,
        Verilog2001Parser._serializedATNSegment3,
        Verilog2001Parser._serializedATNSegment4,
        Verilog2001Parser._serializedATNSegment5,
        Verilog2001Parser._serializedATNSegment6,
        Verilog2001Parser._serializedATNSegment7,
    ], "");
    return Verilog2001Parser;
}(Parser_1.Parser));
exports.Verilog2001Parser = Verilog2001Parser;
var Config_declarationContext = /** @class */ (function (_super) {
    __extends(Config_declarationContext, _super);
    function Config_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Config_declarationContext.prototype.config_identifier = function () {
        return this.getRuleContext(0, Config_identifierContext);
    };
    Config_declarationContext.prototype.design_statement = function () {
        return this.getRuleContext(0, Design_statementContext);
    };
    Config_declarationContext.prototype.config_rule_statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Config_rule_statementContext);
        }
        else {
            return this.getRuleContext(i, Config_rule_statementContext);
        }
    };
    Object.defineProperty(Config_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_config_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Config_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterConfig_declaration) {
            listener.enterConfig_declaration(this);
        }
    };
    // @Override
    Config_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitConfig_declaration) {
            listener.exitConfig_declaration(this);
        }
    };
    // @Override
    Config_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitConfig_declaration) {
            return visitor.visitConfig_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Config_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Config_declarationContext = Config_declarationContext;
var Design_statementContext = /** @class */ (function (_super) {
    __extends(Design_statementContext, _super);
    function Design_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Design_statementContext.prototype.cell_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Cell_identifierContext);
        }
        else {
            return this.getRuleContext(i, Cell_identifierContext);
        }
    };
    Design_statementContext.prototype.library_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Library_identifierContext);
        }
        else {
            return this.getRuleContext(i, Library_identifierContext);
        }
    };
    Object.defineProperty(Design_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_design_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Design_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterDesign_statement) {
            listener.enterDesign_statement(this);
        }
    };
    // @Override
    Design_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitDesign_statement) {
            listener.exitDesign_statement(this);
        }
    };
    // @Override
    Design_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitDesign_statement) {
            return visitor.visitDesign_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Design_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Design_statementContext = Design_statementContext;
var Config_rule_statementContext = /** @class */ (function (_super) {
    __extends(Config_rule_statementContext, _super);
    function Config_rule_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Config_rule_statementContext.prototype.default_clause = function () {
        return this.tryGetRuleContext(0, Default_clauseContext);
    };
    Config_rule_statementContext.prototype.liblist_clause = function () {
        return this.tryGetRuleContext(0, Liblist_clauseContext);
    };
    Config_rule_statementContext.prototype.inst_clause = function () {
        return this.tryGetRuleContext(0, Inst_clauseContext);
    };
    Config_rule_statementContext.prototype.use_clause = function () {
        return this.tryGetRuleContext(0, Use_clauseContext);
    };
    Config_rule_statementContext.prototype.cell_clause = function () {
        return this.tryGetRuleContext(0, Cell_clauseContext);
    };
    Object.defineProperty(Config_rule_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_config_rule_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Config_rule_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterConfig_rule_statement) {
            listener.enterConfig_rule_statement(this);
        }
    };
    // @Override
    Config_rule_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitConfig_rule_statement) {
            listener.exitConfig_rule_statement(this);
        }
    };
    // @Override
    Config_rule_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitConfig_rule_statement) {
            return visitor.visitConfig_rule_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Config_rule_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Config_rule_statementContext = Config_rule_statementContext;
var Default_clauseContext = /** @class */ (function (_super) {
    __extends(Default_clauseContext, _super);
    function Default_clauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Default_clauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_default_clause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Default_clauseContext.prototype.enterRule = function (listener) {
        if (listener.enterDefault_clause) {
            listener.enterDefault_clause(this);
        }
    };
    // @Override
    Default_clauseContext.prototype.exitRule = function (listener) {
        if (listener.exitDefault_clause) {
            listener.exitDefault_clause(this);
        }
    };
    // @Override
    Default_clauseContext.prototype.accept = function (visitor) {
        if (visitor.visitDefault_clause) {
            return visitor.visitDefault_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Default_clauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Default_clauseContext = Default_clauseContext;
var Inst_clauseContext = /** @class */ (function (_super) {
    __extends(Inst_clauseContext, _super);
    function Inst_clauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inst_clauseContext.prototype.inst_name = function () {
        return this.getRuleContext(0, Inst_nameContext);
    };
    Object.defineProperty(Inst_clauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_inst_clause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inst_clauseContext.prototype.enterRule = function (listener) {
        if (listener.enterInst_clause) {
            listener.enterInst_clause(this);
        }
    };
    // @Override
    Inst_clauseContext.prototype.exitRule = function (listener) {
        if (listener.exitInst_clause) {
            listener.exitInst_clause(this);
        }
    };
    // @Override
    Inst_clauseContext.prototype.accept = function (visitor) {
        if (visitor.visitInst_clause) {
            return visitor.visitInst_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inst_clauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inst_clauseContext = Inst_clauseContext;
var Inst_nameContext = /** @class */ (function (_super) {
    __extends(Inst_nameContext, _super);
    function Inst_nameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inst_nameContext.prototype.topmodule_identifier = function () {
        return this.getRuleContext(0, Topmodule_identifierContext);
    };
    Inst_nameContext.prototype.instance_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Instance_identifierContext);
        }
        else {
            return this.getRuleContext(i, Instance_identifierContext);
        }
    };
    Object.defineProperty(Inst_nameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_inst_name; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inst_nameContext.prototype.enterRule = function (listener) {
        if (listener.enterInst_name) {
            listener.enterInst_name(this);
        }
    };
    // @Override
    Inst_nameContext.prototype.exitRule = function (listener) {
        if (listener.exitInst_name) {
            listener.exitInst_name(this);
        }
    };
    // @Override
    Inst_nameContext.prototype.accept = function (visitor) {
        if (visitor.visitInst_name) {
            return visitor.visitInst_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inst_nameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inst_nameContext = Inst_nameContext;
var Liblist_clauseContext = /** @class */ (function (_super) {
    __extends(Liblist_clauseContext, _super);
    function Liblist_clauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Liblist_clauseContext.prototype.library_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Library_identifierContext);
        }
        else {
            return this.getRuleContext(i, Library_identifierContext);
        }
    };
    Object.defineProperty(Liblist_clauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_liblist_clause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Liblist_clauseContext.prototype.enterRule = function (listener) {
        if (listener.enterLiblist_clause) {
            listener.enterLiblist_clause(this);
        }
    };
    // @Override
    Liblist_clauseContext.prototype.exitRule = function (listener) {
        if (listener.exitLiblist_clause) {
            listener.exitLiblist_clause(this);
        }
    };
    // @Override
    Liblist_clauseContext.prototype.accept = function (visitor) {
        if (visitor.visitLiblist_clause) {
            return visitor.visitLiblist_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Liblist_clauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Liblist_clauseContext = Liblist_clauseContext;
var Cell_clauseContext = /** @class */ (function (_super) {
    __extends(Cell_clauseContext, _super);
    function Cell_clauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Cell_clauseContext.prototype.cell_identifier = function () {
        return this.getRuleContext(0, Cell_identifierContext);
    };
    Cell_clauseContext.prototype.library_identifier = function () {
        return this.tryGetRuleContext(0, Library_identifierContext);
    };
    Object.defineProperty(Cell_clauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_cell_clause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cell_clauseContext.prototype.enterRule = function (listener) {
        if (listener.enterCell_clause) {
            listener.enterCell_clause(this);
        }
    };
    // @Override
    Cell_clauseContext.prototype.exitRule = function (listener) {
        if (listener.exitCell_clause) {
            listener.exitCell_clause(this);
        }
    };
    // @Override
    Cell_clauseContext.prototype.accept = function (visitor) {
        if (visitor.visitCell_clause) {
            return visitor.visitCell_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cell_clauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cell_clauseContext = Cell_clauseContext;
var Use_clauseContext = /** @class */ (function (_super) {
    __extends(Use_clauseContext, _super);
    function Use_clauseContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Use_clauseContext.prototype.cell_identifier = function () {
        return this.getRuleContext(0, Cell_identifierContext);
    };
    Use_clauseContext.prototype.library_identifier = function () {
        return this.tryGetRuleContext(0, Library_identifierContext);
    };
    Object.defineProperty(Use_clauseContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_use_clause; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Use_clauseContext.prototype.enterRule = function (listener) {
        if (listener.enterUse_clause) {
            listener.enterUse_clause(this);
        }
    };
    // @Override
    Use_clauseContext.prototype.exitRule = function (listener) {
        if (listener.exitUse_clause) {
            listener.exitUse_clause(this);
        }
    };
    // @Override
    Use_clauseContext.prototype.accept = function (visitor) {
        if (visitor.visitUse_clause) {
            return visitor.visitUse_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Use_clauseContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Use_clauseContext = Use_clauseContext;
var Source_textContext = /** @class */ (function (_super) {
    __extends(Source_textContext, _super);
    function Source_textContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Source_textContext.prototype.EOF = function () { return this.getToken(Verilog2001Parser.EOF, 0); };
    Source_textContext.prototype.timing_spec = function () {
        return this.tryGetRuleContext(0, Timing_specContext);
    };
    Source_textContext.prototype.description = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DescriptionContext);
        }
        else {
            return this.getRuleContext(i, DescriptionContext);
        }
    };
    Object.defineProperty(Source_textContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_source_text; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Source_textContext.prototype.enterRule = function (listener) {
        if (listener.enterSource_text) {
            listener.enterSource_text(this);
        }
    };
    // @Override
    Source_textContext.prototype.exitRule = function (listener) {
        if (listener.exitSource_text) {
            listener.exitSource_text(this);
        }
    };
    // @Override
    Source_textContext.prototype.accept = function (visitor) {
        if (visitor.visitSource_text) {
            return visitor.visitSource_text(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Source_textContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Source_textContext = Source_textContext;
var DescriptionContext = /** @class */ (function (_super) {
    __extends(DescriptionContext, _super);
    function DescriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DescriptionContext.prototype.module_declaration = function () {
        return this.getRuleContext(0, Module_declarationContext);
    };
    Object.defineProperty(DescriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DescriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterDescription) {
            listener.enterDescription(this);
        }
    };
    // @Override
    DescriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitDescription) {
            listener.exitDescription(this);
        }
    };
    // @Override
    DescriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitDescription) {
            return visitor.visitDescription(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DescriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DescriptionContext = DescriptionContext;
var Module_declarationContext = /** @class */ (function (_super) {
    __extends(Module_declarationContext, _super);
    function Module_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_declarationContext.prototype.module_keyword = function () {
        return this.getRuleContext(0, Module_keywordContext);
    };
    Module_declarationContext.prototype.module_identifier = function () {
        return this.getRuleContext(0, Module_identifierContext);
    };
    Module_declarationContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Module_declarationContext.prototype.module_parameter_port_list = function () {
        return this.tryGetRuleContext(0, Module_parameter_port_listContext);
    };
    Module_declarationContext.prototype.list_of_ports = function () {
        return this.tryGetRuleContext(0, List_of_portsContext);
    };
    Module_declarationContext.prototype.module_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Module_itemContext);
        }
        else {
            return this.getRuleContext(i, Module_itemContext);
        }
    };
    Module_declarationContext.prototype.list_of_port_declarations = function () {
        return this.tryGetRuleContext(0, List_of_port_declarationsContext);
    };
    Module_declarationContext.prototype.non_port_module_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Non_port_module_itemContext);
        }
        else {
            return this.getRuleContext(i, Non_port_module_itemContext);
        }
    };
    Object.defineProperty(Module_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_declaration) {
            listener.enterModule_declaration(this);
        }
    };
    // @Override
    Module_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_declaration) {
            listener.exitModule_declaration(this);
        }
    };
    // @Override
    Module_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_declaration) {
            return visitor.visitModule_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_declarationContext = Module_declarationContext;
var Module_keywordContext = /** @class */ (function (_super) {
    __extends(Module_keywordContext, _super);
    function Module_keywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Module_keywordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_keyword; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_keywordContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_keyword) {
            listener.enterModule_keyword(this);
        }
    };
    // @Override
    Module_keywordContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_keyword) {
            listener.exitModule_keyword(this);
        }
    };
    // @Override
    Module_keywordContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_keyword) {
            return visitor.visitModule_keyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_keywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_keywordContext = Module_keywordContext;
var Module_parameter_port_listContext = /** @class */ (function (_super) {
    __extends(Module_parameter_port_listContext, _super);
    function Module_parameter_port_listContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_parameter_port_listContext.prototype.parameter_declaration_ = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Parameter_declaration_Context);
        }
        else {
            return this.getRuleContext(i, Parameter_declaration_Context);
        }
    };
    Object.defineProperty(Module_parameter_port_listContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_parameter_port_list; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_parameter_port_listContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_parameter_port_list) {
            listener.enterModule_parameter_port_list(this);
        }
    };
    // @Override
    Module_parameter_port_listContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_parameter_port_list) {
            listener.exitModule_parameter_port_list(this);
        }
    };
    // @Override
    Module_parameter_port_listContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_parameter_port_list) {
            return visitor.visitModule_parameter_port_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_parameter_port_listContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_parameter_port_listContext = Module_parameter_port_listContext;
var List_of_portsContext = /** @class */ (function (_super) {
    __extends(List_of_portsContext, _super);
    function List_of_portsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_portsContext.prototype.port = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PortContext);
        }
        else {
            return this.getRuleContext(i, PortContext);
        }
    };
    Object.defineProperty(List_of_portsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_ports; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_portsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_ports) {
            listener.enterList_of_ports(this);
        }
    };
    // @Override
    List_of_portsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_ports) {
            listener.exitList_of_ports(this);
        }
    };
    // @Override
    List_of_portsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_ports) {
            return visitor.visitList_of_ports(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_portsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_portsContext = List_of_portsContext;
var List_of_port_declarationsContext = /** @class */ (function (_super) {
    __extends(List_of_port_declarationsContext, _super);
    function List_of_port_declarationsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_port_declarationsContext.prototype.port_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Port_declarationContext);
        }
        else {
            return this.getRuleContext(i, Port_declarationContext);
        }
    };
    Object.defineProperty(List_of_port_declarationsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_port_declarations; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_port_declarationsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_port_declarations) {
            listener.enterList_of_port_declarations(this);
        }
    };
    // @Override
    List_of_port_declarationsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_port_declarations) {
            listener.exitList_of_port_declarations(this);
        }
    };
    // @Override
    List_of_port_declarationsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_port_declarations) {
            return visitor.visitList_of_port_declarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_port_declarationsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_port_declarationsContext = List_of_port_declarationsContext;
var PortContext = /** @class */ (function (_super) {
    __extends(PortContext, _super);
    function PortContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PortContext.prototype.port_expression = function () {
        return this.tryGetRuleContext(0, Port_expressionContext);
    };
    PortContext.prototype.port_identifier = function () {
        return this.tryGetRuleContext(0, Port_identifierContext);
    };
    Object.defineProperty(PortContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_port; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PortContext.prototype.enterRule = function (listener) {
        if (listener.enterPort) {
            listener.enterPort(this);
        }
    };
    // @Override
    PortContext.prototype.exitRule = function (listener) {
        if (listener.exitPort) {
            listener.exitPort(this);
        }
    };
    // @Override
    PortContext.prototype.accept = function (visitor) {
        if (visitor.visitPort) {
            return visitor.visitPort(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PortContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PortContext = PortContext;
var Port_expressionContext = /** @class */ (function (_super) {
    __extends(Port_expressionContext, _super);
    function Port_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_expressionContext.prototype.port_reference = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Port_referenceContext);
        }
        else {
            return this.getRuleContext(i, Port_referenceContext);
        }
    };
    Object.defineProperty(Port_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_port_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_expression) {
            listener.enterPort_expression(this);
        }
    };
    // @Override
    Port_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_expression) {
            listener.exitPort_expression(this);
        }
    };
    // @Override
    Port_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_expression) {
            return visitor.visitPort_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_expressionContext = Port_expressionContext;
var Port_referenceContext = /** @class */ (function (_super) {
    __extends(Port_referenceContext, _super);
    function Port_referenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_referenceContext.prototype.port_identifier = function () {
        return this.getRuleContext(0, Port_identifierContext);
    };
    Port_referenceContext.prototype.constant_expression = function () {
        return this.tryGetRuleContext(0, Constant_expressionContext);
    };
    Port_referenceContext.prototype.range_expression = function () {
        return this.tryGetRuleContext(0, Range_expressionContext);
    };
    Object.defineProperty(Port_referenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_port_reference; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_referenceContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_reference) {
            listener.enterPort_reference(this);
        }
    };
    // @Override
    Port_referenceContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_reference) {
            listener.exitPort_reference(this);
        }
    };
    // @Override
    Port_referenceContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_reference) {
            return visitor.visitPort_reference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_referenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_referenceContext = Port_referenceContext;
var Port_declarationContext = /** @class */ (function (_super) {
    __extends(Port_declarationContext, _super);
    function Port_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_declarationContext.prototype.inout_declaration = function () {
        return this.tryGetRuleContext(0, Inout_declarationContext);
    };
    Port_declarationContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Port_declarationContext.prototype.input_declaration = function () {
        return this.tryGetRuleContext(0, Input_declarationContext);
    };
    Port_declarationContext.prototype.output_declaration = function () {
        return this.tryGetRuleContext(0, Output_declarationContext);
    };
    Object.defineProperty(Port_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_port_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_declaration) {
            listener.enterPort_declaration(this);
        }
    };
    // @Override
    Port_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_declaration) {
            listener.exitPort_declaration(this);
        }
    };
    // @Override
    Port_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_declaration) {
            return visitor.visitPort_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_declarationContext = Port_declarationContext;
var Module_itemContext = /** @class */ (function (_super) {
    __extends(Module_itemContext, _super);
    function Module_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_itemContext.prototype.module_or_generate_item = function () {
        return this.tryGetRuleContext(0, Module_or_generate_itemContext);
    };
    Module_itemContext.prototype.port_declaration = function () {
        return this.tryGetRuleContext(0, Port_declarationContext);
    };
    Module_itemContext.prototype.generated_instantiation = function () {
        return this.tryGetRuleContext(0, Generated_instantiationContext);
    };
    Module_itemContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Module_itemContext.prototype.local_parameter_declaration = function () {
        return this.tryGetRuleContext(0, Local_parameter_declarationContext);
    };
    Module_itemContext.prototype.parameter_declaration = function () {
        return this.tryGetRuleContext(0, Parameter_declarationContext);
    };
    Module_itemContext.prototype.specify_block = function () {
        return this.tryGetRuleContext(0, Specify_blockContext);
    };
    Module_itemContext.prototype.specparam_declaration = function () {
        return this.tryGetRuleContext(0, Specparam_declarationContext);
    };
    Object.defineProperty(Module_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_item) {
            listener.enterModule_item(this);
        }
    };
    // @Override
    Module_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_item) {
            listener.exitModule_item(this);
        }
    };
    // @Override
    Module_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_item) {
            return visitor.visitModule_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_itemContext = Module_itemContext;
var Module_or_generate_itemContext = /** @class */ (function (_super) {
    __extends(Module_or_generate_itemContext, _super);
    function Module_or_generate_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_or_generate_itemContext.prototype.module_or_generate_item_declaration = function () {
        return this.tryGetRuleContext(0, Module_or_generate_item_declarationContext);
    };
    Module_or_generate_itemContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Module_or_generate_itemContext.prototype.parameter_override = function () {
        return this.tryGetRuleContext(0, Parameter_overrideContext);
    };
    Module_or_generate_itemContext.prototype.continuous_assign = function () {
        return this.tryGetRuleContext(0, Continuous_assignContext);
    };
    Module_or_generate_itemContext.prototype.gate_instantiation = function () {
        return this.tryGetRuleContext(0, Gate_instantiationContext);
    };
    Module_or_generate_itemContext.prototype.module_instantiation = function () {
        return this.tryGetRuleContext(0, Module_instantiationContext);
    };
    Module_or_generate_itemContext.prototype.initial_construct = function () {
        return this.tryGetRuleContext(0, Initial_constructContext);
    };
    Module_or_generate_itemContext.prototype.always_construct = function () {
        return this.tryGetRuleContext(0, Always_constructContext);
    };
    Object.defineProperty(Module_or_generate_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_or_generate_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_or_generate_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_or_generate_item) {
            listener.enterModule_or_generate_item(this);
        }
    };
    // @Override
    Module_or_generate_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_or_generate_item) {
            listener.exitModule_or_generate_item(this);
        }
    };
    // @Override
    Module_or_generate_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_or_generate_item) {
            return visitor.visitModule_or_generate_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_or_generate_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_or_generate_itemContext = Module_or_generate_itemContext;
var Non_port_module_itemContext = /** @class */ (function (_super) {
    __extends(Non_port_module_itemContext, _super);
    function Non_port_module_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Non_port_module_itemContext.prototype.generated_instantiation = function () {
        return this.tryGetRuleContext(0, Generated_instantiationContext);
    };
    Non_port_module_itemContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Non_port_module_itemContext.prototype.local_parameter_declaration = function () {
        return this.tryGetRuleContext(0, Local_parameter_declarationContext);
    };
    Non_port_module_itemContext.prototype.module_or_generate_item = function () {
        return this.tryGetRuleContext(0, Module_or_generate_itemContext);
    };
    Non_port_module_itemContext.prototype.parameter_declaration = function () {
        return this.tryGetRuleContext(0, Parameter_declarationContext);
    };
    Non_port_module_itemContext.prototype.specify_block = function () {
        return this.tryGetRuleContext(0, Specify_blockContext);
    };
    Non_port_module_itemContext.prototype.specparam_declaration = function () {
        return this.tryGetRuleContext(0, Specparam_declarationContext);
    };
    Object.defineProperty(Non_port_module_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_non_port_module_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Non_port_module_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterNon_port_module_item) {
            listener.enterNon_port_module_item(this);
        }
    };
    // @Override
    Non_port_module_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitNon_port_module_item) {
            listener.exitNon_port_module_item(this);
        }
    };
    // @Override
    Non_port_module_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitNon_port_module_item) {
            return visitor.visitNon_port_module_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Non_port_module_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Non_port_module_itemContext = Non_port_module_itemContext;
var Module_or_generate_item_declarationContext = /** @class */ (function (_super) {
    __extends(Module_or_generate_item_declarationContext, _super);
    function Module_or_generate_item_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_or_generate_item_declarationContext.prototype.net_declaration = function () {
        return this.tryGetRuleContext(0, Net_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.real_declaration = function () {
        return this.tryGetRuleContext(0, Real_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.realtime_declaration = function () {
        return this.tryGetRuleContext(0, Realtime_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.event_declaration = function () {
        return this.tryGetRuleContext(0, Event_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.genvar_declaration = function () {
        return this.tryGetRuleContext(0, Genvar_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.task_declaration = function () {
        return this.tryGetRuleContext(0, Task_declarationContext);
    };
    Module_or_generate_item_declarationContext.prototype.function_declaration = function () {
        return this.tryGetRuleContext(0, Function_declarationContext);
    };
    Object.defineProperty(Module_or_generate_item_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_or_generate_item_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_or_generate_item_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_or_generate_item_declaration) {
            listener.enterModule_or_generate_item_declaration(this);
        }
    };
    // @Override
    Module_or_generate_item_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_or_generate_item_declaration) {
            listener.exitModule_or_generate_item_declaration(this);
        }
    };
    // @Override
    Module_or_generate_item_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_or_generate_item_declaration) {
            return visitor.visitModule_or_generate_item_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_or_generate_item_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_or_generate_item_declarationContext = Module_or_generate_item_declarationContext;
var Parameter_overrideContext = /** @class */ (function (_super) {
    __extends(Parameter_overrideContext, _super);
    function Parameter_overrideContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_overrideContext.prototype.list_of_param_assignments = function () {
        return this.getRuleContext(0, List_of_param_assignmentsContext);
    };
    Object.defineProperty(Parameter_overrideContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_parameter_override; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_overrideContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_override) {
            listener.enterParameter_override(this);
        }
    };
    // @Override
    Parameter_overrideContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_override) {
            listener.exitParameter_override(this);
        }
    };
    // @Override
    Parameter_overrideContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_override) {
            return visitor.visitParameter_override(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_overrideContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_overrideContext = Parameter_overrideContext;
var Local_parameter_declarationContext = /** @class */ (function (_super) {
    __extends(Local_parameter_declarationContext, _super);
    function Local_parameter_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Local_parameter_declarationContext.prototype.list_of_param_assignments = function () {
        return this.getRuleContext(0, List_of_param_assignmentsContext);
    };
    Local_parameter_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Local_parameter_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_local_parameter_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Local_parameter_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterLocal_parameter_declaration) {
            listener.enterLocal_parameter_declaration(this);
        }
    };
    // @Override
    Local_parameter_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitLocal_parameter_declaration) {
            listener.exitLocal_parameter_declaration(this);
        }
    };
    // @Override
    Local_parameter_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitLocal_parameter_declaration) {
            return visitor.visitLocal_parameter_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Local_parameter_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Local_parameter_declarationContext = Local_parameter_declarationContext;
var Parameter_declarationContext = /** @class */ (function (_super) {
    __extends(Parameter_declarationContext, _super);
    function Parameter_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_declarationContext.prototype.parameter_declaration_ = function () {
        return this.getRuleContext(0, Parameter_declaration_Context);
    };
    Object.defineProperty(Parameter_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_parameter_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_declaration) {
            listener.enterParameter_declaration(this);
        }
    };
    // @Override
    Parameter_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_declaration) {
            listener.exitParameter_declaration(this);
        }
    };
    // @Override
    Parameter_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_declaration) {
            return visitor.visitParameter_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_declarationContext = Parameter_declarationContext;
var Parameter_declaration_Context = /** @class */ (function (_super) {
    __extends(Parameter_declaration_Context, _super);
    function Parameter_declaration_Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_declaration_Context.prototype.list_of_param_assignments = function () {
        return this.getRuleContext(0, List_of_param_assignmentsContext);
    };
    Parameter_declaration_Context.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Parameter_declaration_Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_parameter_declaration_; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_declaration_Context.prototype.enterRule = function (listener) {
        if (listener.enterParameter_declaration_) {
            listener.enterParameter_declaration_(this);
        }
    };
    // @Override
    Parameter_declaration_Context.prototype.exitRule = function (listener) {
        if (listener.exitParameter_declaration_) {
            listener.exitParameter_declaration_(this);
        }
    };
    // @Override
    Parameter_declaration_Context.prototype.accept = function (visitor) {
        if (visitor.visitParameter_declaration_) {
            return visitor.visitParameter_declaration_(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_declaration_Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_declaration_Context = Parameter_declaration_Context;
var Specparam_declarationContext = /** @class */ (function (_super) {
    __extends(Specparam_declarationContext, _super);
    function Specparam_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Specparam_declarationContext.prototype.list_of_specparam_assignments = function () {
        return this.getRuleContext(0, List_of_specparam_assignmentsContext);
    };
    Specparam_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Specparam_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_specparam_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Specparam_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecparam_declaration) {
            listener.enterSpecparam_declaration(this);
        }
    };
    // @Override
    Specparam_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecparam_declaration) {
            listener.exitSpecparam_declaration(this);
        }
    };
    // @Override
    Specparam_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecparam_declaration) {
            return visitor.visitSpecparam_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Specparam_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Specparam_declarationContext = Specparam_declarationContext;
var Inout_declarationContext = /** @class */ (function (_super) {
    __extends(Inout_declarationContext, _super);
    function Inout_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inout_declarationContext.prototype.list_of_port_identifiers = function () {
        return this.getRuleContext(0, List_of_port_identifiersContext);
    };
    Inout_declarationContext.prototype.net_type = function () {
        return this.tryGetRuleContext(0, Net_typeContext);
    };
    Inout_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Inout_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_inout_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inout_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInout_declaration) {
            listener.enterInout_declaration(this);
        }
    };
    // @Override
    Inout_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInout_declaration) {
            listener.exitInout_declaration(this);
        }
    };
    // @Override
    Inout_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInout_declaration) {
            return visitor.visitInout_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inout_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inout_declarationContext = Inout_declarationContext;
var Input_declarationContext = /** @class */ (function (_super) {
    __extends(Input_declarationContext, _super);
    function Input_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Input_declarationContext.prototype.list_of_port_identifiers = function () {
        return this.getRuleContext(0, List_of_port_identifiersContext);
    };
    Input_declarationContext.prototype.net_type = function () {
        return this.tryGetRuleContext(0, Net_typeContext);
    };
    Input_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Input_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_input_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Input_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInput_declaration) {
            listener.enterInput_declaration(this);
        }
    };
    // @Override
    Input_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInput_declaration) {
            listener.exitInput_declaration(this);
        }
    };
    // @Override
    Input_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInput_declaration) {
            return visitor.visitInput_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Input_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Input_declarationContext = Input_declarationContext;
var Output_declarationContext = /** @class */ (function (_super) {
    __extends(Output_declarationContext, _super);
    function Output_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Output_declarationContext.prototype.list_of_port_identifiers = function () {
        return this.tryGetRuleContext(0, List_of_port_identifiersContext);
    };
    Output_declarationContext.prototype.net_type = function () {
        return this.tryGetRuleContext(0, Net_typeContext);
    };
    Output_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Output_declarationContext.prototype.list_of_variable_port_identifiers = function () {
        return this.tryGetRuleContext(0, List_of_variable_port_identifiersContext);
    };
    Output_declarationContext.prototype.output_variable_type = function () {
        return this.tryGetRuleContext(0, Output_variable_typeContext);
    };
    Object.defineProperty(Output_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_output_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_declaration) {
            listener.enterOutput_declaration(this);
        }
    };
    // @Override
    Output_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_declaration) {
            listener.exitOutput_declaration(this);
        }
    };
    // @Override
    Output_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_declaration) {
            return visitor.visitOutput_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_declarationContext = Output_declarationContext;
var Event_declarationContext = /** @class */ (function (_super) {
    __extends(Event_declarationContext, _super);
    function Event_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_declarationContext.prototype.list_of_event_identifiers = function () {
        return this.getRuleContext(0, List_of_event_identifiersContext);
    };
    Object.defineProperty(Event_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_event_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_declaration) {
            listener.enterEvent_declaration(this);
        }
    };
    // @Override
    Event_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_declaration) {
            listener.exitEvent_declaration(this);
        }
    };
    // @Override
    Event_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_declaration) {
            return visitor.visitEvent_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_declarationContext = Event_declarationContext;
var Genvar_declarationContext = /** @class */ (function (_super) {
    __extends(Genvar_declarationContext, _super);
    function Genvar_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Genvar_declarationContext.prototype.list_of_genvar_identifiers = function () {
        return this.getRuleContext(0, List_of_genvar_identifiersContext);
    };
    Object.defineProperty(Genvar_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_genvar_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Genvar_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterGenvar_declaration) {
            listener.enterGenvar_declaration(this);
        }
    };
    // @Override
    Genvar_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitGenvar_declaration) {
            listener.exitGenvar_declaration(this);
        }
    };
    // @Override
    Genvar_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitGenvar_declaration) {
            return visitor.visitGenvar_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Genvar_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Genvar_declarationContext = Genvar_declarationContext;
var Integer_declarationContext = /** @class */ (function (_super) {
    __extends(Integer_declarationContext, _super);
    function Integer_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Integer_declarationContext.prototype.list_of_variable_identifiers = function () {
        return this.getRuleContext(0, List_of_variable_identifiersContext);
    };
    Object.defineProperty(Integer_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_integer_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Integer_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInteger_declaration) {
            listener.enterInteger_declaration(this);
        }
    };
    // @Override
    Integer_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInteger_declaration) {
            listener.exitInteger_declaration(this);
        }
    };
    // @Override
    Integer_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInteger_declaration) {
            return visitor.visitInteger_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Integer_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Integer_declarationContext = Integer_declarationContext;
var Time_declarationContext = /** @class */ (function (_super) {
    __extends(Time_declarationContext, _super);
    function Time_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Time_declarationContext.prototype.list_of_variable_identifiers = function () {
        return this.getRuleContext(0, List_of_variable_identifiersContext);
    };
    Object.defineProperty(Time_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_time_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Time_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTime_declaration) {
            listener.enterTime_declaration(this);
        }
    };
    // @Override
    Time_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTime_declaration) {
            listener.exitTime_declaration(this);
        }
    };
    // @Override
    Time_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTime_declaration) {
            return visitor.visitTime_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Time_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Time_declarationContext = Time_declarationContext;
var Real_declarationContext = /** @class */ (function (_super) {
    __extends(Real_declarationContext, _super);
    function Real_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Real_declarationContext.prototype.list_of_real_identifiers = function () {
        return this.getRuleContext(0, List_of_real_identifiersContext);
    };
    Object.defineProperty(Real_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_real_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Real_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterReal_declaration) {
            listener.enterReal_declaration(this);
        }
    };
    // @Override
    Real_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitReal_declaration) {
            listener.exitReal_declaration(this);
        }
    };
    // @Override
    Real_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitReal_declaration) {
            return visitor.visitReal_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Real_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Real_declarationContext = Real_declarationContext;
var Realtime_declarationContext = /** @class */ (function (_super) {
    __extends(Realtime_declarationContext, _super);
    function Realtime_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Realtime_declarationContext.prototype.list_of_real_identifiers = function () {
        return this.getRuleContext(0, List_of_real_identifiersContext);
    };
    Object.defineProperty(Realtime_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_realtime_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Realtime_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterRealtime_declaration) {
            listener.enterRealtime_declaration(this);
        }
    };
    // @Override
    Realtime_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitRealtime_declaration) {
            listener.exitRealtime_declaration(this);
        }
    };
    // @Override
    Realtime_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitRealtime_declaration) {
            return visitor.visitRealtime_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Realtime_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Realtime_declarationContext = Realtime_declarationContext;
var Reg_declarationContext = /** @class */ (function (_super) {
    __extends(Reg_declarationContext, _super);
    function Reg_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Reg_declarationContext.prototype.list_of_variable_identifiers = function () {
        return this.getRuleContext(0, List_of_variable_identifiersContext);
    };
    Reg_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Reg_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_reg_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Reg_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterReg_declaration) {
            listener.enterReg_declaration(this);
        }
    };
    // @Override
    Reg_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitReg_declaration) {
            listener.exitReg_declaration(this);
        }
    };
    // @Override
    Reg_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitReg_declaration) {
            return visitor.visitReg_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Reg_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Reg_declarationContext = Reg_declarationContext;
var Net_declarationContext = /** @class */ (function (_super) {
    __extends(Net_declarationContext, _super);
    function Net_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_declarationContext.prototype.net_type = function () {
        return this.tryGetRuleContext(0, Net_typeContext);
    };
    Net_declarationContext.prototype.list_of_net_identifiers = function () {
        return this.tryGetRuleContext(0, List_of_net_identifiersContext);
    };
    Net_declarationContext.prototype.delay3 = function () {
        return this.tryGetRuleContext(0, Delay3Context);
    };
    Net_declarationContext.prototype.list_of_net_decl_assignments = function () {
        return this.tryGetRuleContext(0, List_of_net_decl_assignmentsContext);
    };
    Net_declarationContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    Net_declarationContext.prototype.charge_strength = function () {
        return this.tryGetRuleContext(0, Charge_strengthContext);
    };
    Net_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Net_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_declaration) {
            listener.enterNet_declaration(this);
        }
    };
    // @Override
    Net_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_declaration) {
            listener.exitNet_declaration(this);
        }
    };
    // @Override
    Net_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_declaration) {
            return visitor.visitNet_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_declarationContext = Net_declarationContext;
var Net_typeContext = /** @class */ (function (_super) {
    __extends(Net_typeContext, _super);
    function Net_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Net_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_type) {
            listener.enterNet_type(this);
        }
    };
    // @Override
    Net_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_type) {
            listener.exitNet_type(this);
        }
    };
    // @Override
    Net_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_type) {
            return visitor.visitNet_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_typeContext = Net_typeContext;
var Output_variable_typeContext = /** @class */ (function (_super) {
    __extends(Output_variable_typeContext, _super);
    function Output_variable_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Output_variable_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_output_variable_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_variable_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_variable_type) {
            listener.enterOutput_variable_type(this);
        }
    };
    // @Override
    Output_variable_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_variable_type) {
            listener.exitOutput_variable_type(this);
        }
    };
    // @Override
    Output_variable_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_variable_type) {
            return visitor.visitOutput_variable_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_variable_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_variable_typeContext = Output_variable_typeContext;
var Real_typeContext = /** @class */ (function (_super) {
    __extends(Real_typeContext, _super);
    function Real_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Real_typeContext.prototype.real_identifier = function () {
        return this.getRuleContext(0, Real_identifierContext);
    };
    Real_typeContext.prototype.constant_expression = function () {
        return this.tryGetRuleContext(0, Constant_expressionContext);
    };
    Real_typeContext.prototype.dimension = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimensionContext);
        }
        else {
            return this.getRuleContext(i, DimensionContext);
        }
    };
    Object.defineProperty(Real_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_real_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Real_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterReal_type) {
            listener.enterReal_type(this);
        }
    };
    // @Override
    Real_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitReal_type) {
            listener.exitReal_type(this);
        }
    };
    // @Override
    Real_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitReal_type) {
            return visitor.visitReal_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Real_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Real_typeContext = Real_typeContext;
var Variable_typeContext = /** @class */ (function (_super) {
    __extends(Variable_typeContext, _super);
    function Variable_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_typeContext.prototype.variable_identifier = function () {
        return this.getRuleContext(0, Variable_identifierContext);
    };
    Variable_typeContext.prototype.constant_expression = function () {
        return this.tryGetRuleContext(0, Constant_expressionContext);
    };
    Variable_typeContext.prototype.dimension = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimensionContext);
        }
        else {
            return this.getRuleContext(i, DimensionContext);
        }
    };
    Object.defineProperty(Variable_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_variable_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_type) {
            listener.enterVariable_type(this);
        }
    };
    // @Override
    Variable_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_type) {
            listener.exitVariable_type(this);
        }
    };
    // @Override
    Variable_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_type) {
            return visitor.visitVariable_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_typeContext = Variable_typeContext;
var Drive_strengthContext = /** @class */ (function (_super) {
    __extends(Drive_strengthContext, _super);
    function Drive_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Drive_strengthContext.prototype.strength0 = function () {
        return this.tryGetRuleContext(0, Strength0Context);
    };
    Drive_strengthContext.prototype.strength1 = function () {
        return this.tryGetRuleContext(0, Strength1Context);
    };
    Object.defineProperty(Drive_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_drive_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Drive_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterDrive_strength) {
            listener.enterDrive_strength(this);
        }
    };
    // @Override
    Drive_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitDrive_strength) {
            listener.exitDrive_strength(this);
        }
    };
    // @Override
    Drive_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitDrive_strength) {
            return visitor.visitDrive_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Drive_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Drive_strengthContext = Drive_strengthContext;
var Strength0Context = /** @class */ (function (_super) {
    __extends(Strength0Context, _super);
    function Strength0Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Strength0Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_strength0; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Strength0Context.prototype.enterRule = function (listener) {
        if (listener.enterStrength0) {
            listener.enterStrength0(this);
        }
    };
    // @Override
    Strength0Context.prototype.exitRule = function (listener) {
        if (listener.exitStrength0) {
            listener.exitStrength0(this);
        }
    };
    // @Override
    Strength0Context.prototype.accept = function (visitor) {
        if (visitor.visitStrength0) {
            return visitor.visitStrength0(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Strength0Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Strength0Context = Strength0Context;
var Strength1Context = /** @class */ (function (_super) {
    __extends(Strength1Context, _super);
    function Strength1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Strength1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_strength1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Strength1Context.prototype.enterRule = function (listener) {
        if (listener.enterStrength1) {
            listener.enterStrength1(this);
        }
    };
    // @Override
    Strength1Context.prototype.exitRule = function (listener) {
        if (listener.exitStrength1) {
            listener.exitStrength1(this);
        }
    };
    // @Override
    Strength1Context.prototype.accept = function (visitor) {
        if (visitor.visitStrength1) {
            return visitor.visitStrength1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Strength1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Strength1Context = Strength1Context;
var Charge_strengthContext = /** @class */ (function (_super) {
    __extends(Charge_strengthContext, _super);
    function Charge_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Charge_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_charge_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Charge_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterCharge_strength) {
            listener.enterCharge_strength(this);
        }
    };
    // @Override
    Charge_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitCharge_strength) {
            listener.exitCharge_strength(this);
        }
    };
    // @Override
    Charge_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitCharge_strength) {
            return visitor.visitCharge_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Charge_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Charge_strengthContext = Charge_strengthContext;
var Delay3Context = /** @class */ (function (_super) {
    __extends(Delay3Context, _super);
    function Delay3Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay3Context.prototype.delay_value = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Delay_valueContext);
        }
        else {
            return this.getRuleContext(i, Delay_valueContext);
        }
    };
    Object.defineProperty(Delay3Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_delay3; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay3Context.prototype.enterRule = function (listener) {
        if (listener.enterDelay3) {
            listener.enterDelay3(this);
        }
    };
    // @Override
    Delay3Context.prototype.exitRule = function (listener) {
        if (listener.exitDelay3) {
            listener.exitDelay3(this);
        }
    };
    // @Override
    Delay3Context.prototype.accept = function (visitor) {
        if (visitor.visitDelay3) {
            return visitor.visitDelay3(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay3Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay3Context = Delay3Context;
var Delay2Context = /** @class */ (function (_super) {
    __extends(Delay2Context, _super);
    function Delay2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay2Context.prototype.delay_value = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Delay_valueContext);
        }
        else {
            return this.getRuleContext(i, Delay_valueContext);
        }
    };
    Object.defineProperty(Delay2Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_delay2; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay2Context.prototype.enterRule = function (listener) {
        if (listener.enterDelay2) {
            listener.enterDelay2(this);
        }
    };
    // @Override
    Delay2Context.prototype.exitRule = function (listener) {
        if (listener.exitDelay2) {
            listener.exitDelay2(this);
        }
    };
    // @Override
    Delay2Context.prototype.accept = function (visitor) {
        if (visitor.visitDelay2) {
            return visitor.visitDelay2(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay2Context = Delay2Context;
var Delay_valueContext = /** @class */ (function (_super) {
    __extends(Delay_valueContext, _super);
    function Delay_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay_valueContext.prototype.Decimal_number = function () { return this.tryGetToken(Verilog2001Parser.Decimal_number, 0); };
    Delay_valueContext.prototype.parameter_identifier = function () {
        return this.tryGetRuleContext(0, Parameter_identifierContext);
    };
    Delay_valueContext.prototype.specparam_identifier = function () {
        return this.tryGetRuleContext(0, Specparam_identifierContext);
    };
    Delay_valueContext.prototype.mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(Delay_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_delay_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterDelay_value) {
            listener.enterDelay_value(this);
        }
    };
    // @Override
    Delay_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitDelay_value) {
            listener.exitDelay_value(this);
        }
    };
    // @Override
    Delay_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitDelay_value) {
            return visitor.visitDelay_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay_valueContext = Delay_valueContext;
var List_of_event_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_event_identifiersContext, _super);
    function List_of_event_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_event_identifiersContext.prototype.event_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Event_identifierContext);
        }
        else {
            return this.getRuleContext(i, Event_identifierContext);
        }
    };
    List_of_event_identifiersContext.prototype.dimension = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimensionContext);
        }
        else {
            return this.getRuleContext(i, DimensionContext);
        }
    };
    Object.defineProperty(List_of_event_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_event_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_event_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_event_identifiers) {
            listener.enterList_of_event_identifiers(this);
        }
    };
    // @Override
    List_of_event_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_event_identifiers) {
            listener.exitList_of_event_identifiers(this);
        }
    };
    // @Override
    List_of_event_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_event_identifiers) {
            return visitor.visitList_of_event_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_event_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_event_identifiersContext = List_of_event_identifiersContext;
var List_of_net_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_net_identifiersContext, _super);
    function List_of_net_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_net_identifiersContext.prototype.net_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Net_identifierContext);
        }
        else {
            return this.getRuleContext(i, Net_identifierContext);
        }
    };
    List_of_net_identifiersContext.prototype.dimension = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimensionContext);
        }
        else {
            return this.getRuleContext(i, DimensionContext);
        }
    };
    Object.defineProperty(List_of_net_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_net_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_net_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_net_identifiers) {
            listener.enterList_of_net_identifiers(this);
        }
    };
    // @Override
    List_of_net_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_net_identifiers) {
            listener.exitList_of_net_identifiers(this);
        }
    };
    // @Override
    List_of_net_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_net_identifiers) {
            return visitor.visitList_of_net_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_net_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_net_identifiersContext = List_of_net_identifiersContext;
var List_of_genvar_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_genvar_identifiersContext, _super);
    function List_of_genvar_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_genvar_identifiersContext.prototype.genvar_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Genvar_identifierContext);
        }
        else {
            return this.getRuleContext(i, Genvar_identifierContext);
        }
    };
    Object.defineProperty(List_of_genvar_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_genvar_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_genvar_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_genvar_identifiers) {
            listener.enterList_of_genvar_identifiers(this);
        }
    };
    // @Override
    List_of_genvar_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_genvar_identifiers) {
            listener.exitList_of_genvar_identifiers(this);
        }
    };
    // @Override
    List_of_genvar_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_genvar_identifiers) {
            return visitor.visitList_of_genvar_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_genvar_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_genvar_identifiersContext = List_of_genvar_identifiersContext;
var List_of_port_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_port_identifiersContext, _super);
    function List_of_port_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_port_identifiersContext.prototype.port_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Port_identifierContext);
        }
        else {
            return this.getRuleContext(i, Port_identifierContext);
        }
    };
    Object.defineProperty(List_of_port_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_port_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_port_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_port_identifiers) {
            listener.enterList_of_port_identifiers(this);
        }
    };
    // @Override
    List_of_port_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_port_identifiers) {
            listener.exitList_of_port_identifiers(this);
        }
    };
    // @Override
    List_of_port_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_port_identifiers) {
            return visitor.visitList_of_port_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_port_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_port_identifiersContext = List_of_port_identifiersContext;
var List_of_net_decl_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_net_decl_assignmentsContext, _super);
    function List_of_net_decl_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_net_decl_assignmentsContext.prototype.net_decl_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Net_decl_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Net_decl_assignmentContext);
        }
    };
    Object.defineProperty(List_of_net_decl_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_net_decl_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_net_decl_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_net_decl_assignments) {
            listener.enterList_of_net_decl_assignments(this);
        }
    };
    // @Override
    List_of_net_decl_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_net_decl_assignments) {
            listener.exitList_of_net_decl_assignments(this);
        }
    };
    // @Override
    List_of_net_decl_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_net_decl_assignments) {
            return visitor.visitList_of_net_decl_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_net_decl_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_net_decl_assignmentsContext = List_of_net_decl_assignmentsContext;
var List_of_param_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_param_assignmentsContext, _super);
    function List_of_param_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_param_assignmentsContext.prototype.param_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Param_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Param_assignmentContext);
        }
    };
    Object.defineProperty(List_of_param_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_param_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_param_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_param_assignments) {
            listener.enterList_of_param_assignments(this);
        }
    };
    // @Override
    List_of_param_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_param_assignments) {
            listener.exitList_of_param_assignments(this);
        }
    };
    // @Override
    List_of_param_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_param_assignments) {
            return visitor.visitList_of_param_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_param_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_param_assignmentsContext = List_of_param_assignmentsContext;
var List_of_specparam_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_specparam_assignmentsContext, _super);
    function List_of_specparam_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_specparam_assignmentsContext.prototype.specparam_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Specparam_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Specparam_assignmentContext);
        }
    };
    Object.defineProperty(List_of_specparam_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_specparam_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_specparam_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_specparam_assignments) {
            listener.enterList_of_specparam_assignments(this);
        }
    };
    // @Override
    List_of_specparam_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_specparam_assignments) {
            listener.exitList_of_specparam_assignments(this);
        }
    };
    // @Override
    List_of_specparam_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_specparam_assignments) {
            return visitor.visitList_of_specparam_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_specparam_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_specparam_assignmentsContext = List_of_specparam_assignmentsContext;
var List_of_real_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_real_identifiersContext, _super);
    function List_of_real_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_real_identifiersContext.prototype.real_type = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Real_typeContext);
        }
        else {
            return this.getRuleContext(i, Real_typeContext);
        }
    };
    Object.defineProperty(List_of_real_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_real_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_real_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_real_identifiers) {
            listener.enterList_of_real_identifiers(this);
        }
    };
    // @Override
    List_of_real_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_real_identifiers) {
            listener.exitList_of_real_identifiers(this);
        }
    };
    // @Override
    List_of_real_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_real_identifiers) {
            return visitor.visitList_of_real_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_real_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_real_identifiersContext = List_of_real_identifiersContext;
var List_of_variable_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_variable_identifiersContext, _super);
    function List_of_variable_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_variable_identifiersContext.prototype.variable_type = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Variable_typeContext);
        }
        else {
            return this.getRuleContext(i, Variable_typeContext);
        }
    };
    Object.defineProperty(List_of_variable_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_variable_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_variable_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_variable_identifiers) {
            listener.enterList_of_variable_identifiers(this);
        }
    };
    // @Override
    List_of_variable_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_variable_identifiers) {
            listener.exitList_of_variable_identifiers(this);
        }
    };
    // @Override
    List_of_variable_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_variable_identifiers) {
            return visitor.visitList_of_variable_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_variable_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_variable_identifiersContext = List_of_variable_identifiersContext;
var List_of_variable_port_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_variable_port_identifiersContext, _super);
    function List_of_variable_port_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_variable_port_identifiersContext.prototype.port_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Port_identifierContext);
        }
        else {
            return this.getRuleContext(i, Port_identifierContext);
        }
    };
    List_of_variable_port_identifiersContext.prototype.constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Constant_expressionContext);
        }
    };
    Object.defineProperty(List_of_variable_port_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_variable_port_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_variable_port_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_variable_port_identifiers) {
            listener.enterList_of_variable_port_identifiers(this);
        }
    };
    // @Override
    List_of_variable_port_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_variable_port_identifiers) {
            listener.exitList_of_variable_port_identifiers(this);
        }
    };
    // @Override
    List_of_variable_port_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_variable_port_identifiers) {
            return visitor.visitList_of_variable_port_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_variable_port_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_variable_port_identifiersContext = List_of_variable_port_identifiersContext;
var Net_decl_assignmentContext = /** @class */ (function (_super) {
    __extends(Net_decl_assignmentContext, _super);
    function Net_decl_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_decl_assignmentContext.prototype.net_identifier = function () {
        return this.getRuleContext(0, Net_identifierContext);
    };
    Net_decl_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Net_decl_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_decl_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_decl_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_decl_assignment) {
            listener.enterNet_decl_assignment(this);
        }
    };
    // @Override
    Net_decl_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_decl_assignment) {
            listener.exitNet_decl_assignment(this);
        }
    };
    // @Override
    Net_decl_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_decl_assignment) {
            return visitor.visitNet_decl_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_decl_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_decl_assignmentContext = Net_decl_assignmentContext;
var Param_assignmentContext = /** @class */ (function (_super) {
    __extends(Param_assignmentContext, _super);
    function Param_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Param_assignmentContext.prototype.parameter_identifier = function () {
        return this.getRuleContext(0, Parameter_identifierContext);
    };
    Param_assignmentContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Param_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_param_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Param_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterParam_assignment) {
            listener.enterParam_assignment(this);
        }
    };
    // @Override
    Param_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitParam_assignment) {
            listener.exitParam_assignment(this);
        }
    };
    // @Override
    Param_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitParam_assignment) {
            return visitor.visitParam_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Param_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Param_assignmentContext = Param_assignmentContext;
var Specparam_assignmentContext = /** @class */ (function (_super) {
    __extends(Specparam_assignmentContext, _super);
    function Specparam_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Specparam_assignmentContext.prototype.specparam_identifier = function () {
        return this.tryGetRuleContext(0, Specparam_identifierContext);
    };
    Specparam_assignmentContext.prototype.constant_mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
    };
    Specparam_assignmentContext.prototype.pulse_control_specparam = function () {
        return this.tryGetRuleContext(0, Pulse_control_specparamContext);
    };
    Object.defineProperty(Specparam_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_specparam_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Specparam_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecparam_assignment) {
            listener.enterSpecparam_assignment(this);
        }
    };
    // @Override
    Specparam_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecparam_assignment) {
            listener.exitSpecparam_assignment(this);
        }
    };
    // @Override
    Specparam_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecparam_assignment) {
            return visitor.visitSpecparam_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Specparam_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Specparam_assignmentContext = Specparam_assignmentContext;
var Pulse_control_specparamContext = /** @class */ (function (_super) {
    __extends(Pulse_control_specparamContext, _super);
    function Pulse_control_specparamContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pulse_control_specparamContext.prototype.reject_limit_value = function () {
        return this.getRuleContext(0, Reject_limit_valueContext);
    };
    Pulse_control_specparamContext.prototype.error_limit_value = function () {
        return this.tryGetRuleContext(0, Error_limit_valueContext);
    };
    Pulse_control_specparamContext.prototype.specify_input_terminal_descriptor = function () {
        return this.tryGetRuleContext(0, Specify_input_terminal_descriptorContext);
    };
    Pulse_control_specparamContext.prototype.specify_output_terminal_descriptor = function () {
        return this.tryGetRuleContext(0, Specify_output_terminal_descriptorContext);
    };
    Object.defineProperty(Pulse_control_specparamContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pulse_control_specparam; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pulse_control_specparamContext.prototype.enterRule = function (listener) {
        if (listener.enterPulse_control_specparam) {
            listener.enterPulse_control_specparam(this);
        }
    };
    // @Override
    Pulse_control_specparamContext.prototype.exitRule = function (listener) {
        if (listener.exitPulse_control_specparam) {
            listener.exitPulse_control_specparam(this);
        }
    };
    // @Override
    Pulse_control_specparamContext.prototype.accept = function (visitor) {
        if (visitor.visitPulse_control_specparam) {
            return visitor.visitPulse_control_specparam(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pulse_control_specparamContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pulse_control_specparamContext = Pulse_control_specparamContext;
var Error_limit_valueContext = /** @class */ (function (_super) {
    __extends(Error_limit_valueContext, _super);
    function Error_limit_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Error_limit_valueContext.prototype.limit_value = function () {
        return this.getRuleContext(0, Limit_valueContext);
    };
    Object.defineProperty(Error_limit_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_error_limit_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Error_limit_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterError_limit_value) {
            listener.enterError_limit_value(this);
        }
    };
    // @Override
    Error_limit_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitError_limit_value) {
            listener.exitError_limit_value(this);
        }
    };
    // @Override
    Error_limit_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitError_limit_value) {
            return visitor.visitError_limit_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Error_limit_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Error_limit_valueContext = Error_limit_valueContext;
var Reject_limit_valueContext = /** @class */ (function (_super) {
    __extends(Reject_limit_valueContext, _super);
    function Reject_limit_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Reject_limit_valueContext.prototype.limit_value = function () {
        return this.getRuleContext(0, Limit_valueContext);
    };
    Object.defineProperty(Reject_limit_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_reject_limit_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Reject_limit_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterReject_limit_value) {
            listener.enterReject_limit_value(this);
        }
    };
    // @Override
    Reject_limit_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitReject_limit_value) {
            listener.exitReject_limit_value(this);
        }
    };
    // @Override
    Reject_limit_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitReject_limit_value) {
            return visitor.visitReject_limit_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Reject_limit_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Reject_limit_valueContext = Reject_limit_valueContext;
var Limit_valueContext = /** @class */ (function (_super) {
    __extends(Limit_valueContext, _super);
    function Limit_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Limit_valueContext.prototype.constant_mintypmax_expression = function () {
        return this.getRuleContext(0, Constant_mintypmax_expressionContext);
    };
    Object.defineProperty(Limit_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_limit_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Limit_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterLimit_value) {
            listener.enterLimit_value(this);
        }
    };
    // @Override
    Limit_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitLimit_value) {
            listener.exitLimit_value(this);
        }
    };
    // @Override
    Limit_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitLimit_value) {
            return visitor.visitLimit_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Limit_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Limit_valueContext = Limit_valueContext;
var DimensionContext = /** @class */ (function (_super) {
    __extends(DimensionContext, _super);
    function DimensionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DimensionContext.prototype.dimension_constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Dimension_constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Dimension_constant_expressionContext);
        }
    };
    Object.defineProperty(DimensionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_dimension; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DimensionContext.prototype.enterRule = function (listener) {
        if (listener.enterDimension) {
            listener.enterDimension(this);
        }
    };
    // @Override
    DimensionContext.prototype.exitRule = function (listener) {
        if (listener.exitDimension) {
            listener.exitDimension(this);
        }
    };
    // @Override
    DimensionContext.prototype.accept = function (visitor) {
        if (visitor.visitDimension) {
            return visitor.visitDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DimensionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DimensionContext = DimensionContext;
var Range_Context = /** @class */ (function (_super) {
    __extends(Range_Context, _super);
    function Range_Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Range_Context.prototype.msb_constant_expression = function () {
        return this.getRuleContext(0, Msb_constant_expressionContext);
    };
    Range_Context.prototype.lsb_constant_expression = function () {
        return this.getRuleContext(0, Lsb_constant_expressionContext);
    };
    Object.defineProperty(Range_Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_range_; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Range_Context.prototype.enterRule = function (listener) {
        if (listener.enterRange_) {
            listener.enterRange_(this);
        }
    };
    // @Override
    Range_Context.prototype.exitRule = function (listener) {
        if (listener.exitRange_) {
            listener.exitRange_(this);
        }
    };
    // @Override
    Range_Context.prototype.accept = function (visitor) {
        if (visitor.visitRange_) {
            return visitor.visitRange_(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Range_Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Range_Context = Range_Context;
var Function_declarationContext = /** @class */ (function (_super) {
    __extends(Function_declarationContext, _super);
    function Function_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_declarationContext.prototype.function_identifier = function () {
        return this.getRuleContext(0, Function_identifierContext);
    };
    Function_declarationContext.prototype.range_or_type = function () {
        return this.tryGetRuleContext(0, Range_or_typeContext);
    };
    Function_declarationContext.prototype.function_item_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_item_declarationContext);
        }
        else {
            return this.getRuleContext(i, Function_item_declarationContext);
        }
    };
    Function_declarationContext.prototype.function_statement = function () {
        return this.tryGetRuleContext(0, Function_statementContext);
    };
    Function_declarationContext.prototype.function_port_list = function () {
        return this.tryGetRuleContext(0, Function_port_listContext);
    };
    Function_declarationContext.prototype.block_item_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Block_item_declarationContext);
        }
        else {
            return this.getRuleContext(i, Block_item_declarationContext);
        }
    };
    Object.defineProperty(Function_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_declaration) {
            listener.enterFunction_declaration(this);
        }
    };
    // @Override
    Function_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_declaration) {
            listener.exitFunction_declaration(this);
        }
    };
    // @Override
    Function_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_declaration) {
            return visitor.visitFunction_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_declarationContext = Function_declarationContext;
var Function_item_declarationContext = /** @class */ (function (_super) {
    __extends(Function_item_declarationContext, _super);
    function Function_item_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_item_declarationContext.prototype.block_item_declaration = function () {
        return this.tryGetRuleContext(0, Block_item_declarationContext);
    };
    Function_item_declarationContext.prototype.tf_declaration = function () {
        return this.tryGetRuleContext(0, Tf_declarationContext);
    };
    Object.defineProperty(Function_item_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_item_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_item_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_item_declaration) {
            listener.enterFunction_item_declaration(this);
        }
    };
    // @Override
    Function_item_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_item_declaration) {
            listener.exitFunction_item_declaration(this);
        }
    };
    // @Override
    Function_item_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_item_declaration) {
            return visitor.visitFunction_item_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_item_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_item_declarationContext = Function_item_declarationContext;
var Function_port_listContext = /** @class */ (function (_super) {
    __extends(Function_port_listContext, _super);
    function Function_port_listContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_port_listContext.prototype.function_port = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_portContext);
        }
        else {
            return this.getRuleContext(i, Function_portContext);
        }
    };
    Object.defineProperty(Function_port_listContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_port_list; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_port_listContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_port_list) {
            listener.enterFunction_port_list(this);
        }
    };
    // @Override
    Function_port_listContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_port_list) {
            listener.exitFunction_port_list(this);
        }
    };
    // @Override
    Function_port_listContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_port_list) {
            return visitor.visitFunction_port_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_port_listContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_port_listContext = Function_port_listContext;
var Function_portContext = /** @class */ (function (_super) {
    __extends(Function_portContext, _super);
    function Function_portContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_portContext.prototype.tf_declaration = function () {
        return this.getRuleContext(0, Tf_declarationContext);
    };
    Function_portContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Function_portContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_port; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_portContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_port) {
            listener.enterFunction_port(this);
        }
    };
    // @Override
    Function_portContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_port) {
            listener.exitFunction_port(this);
        }
    };
    // @Override
    Function_portContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_port) {
            return visitor.visitFunction_port(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_portContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_portContext = Function_portContext;
var Range_or_typeContext = /** @class */ (function (_super) {
    __extends(Range_or_typeContext, _super);
    function Range_or_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Range_or_typeContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Range_or_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_range_or_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Range_or_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterRange_or_type) {
            listener.enterRange_or_type(this);
        }
    };
    // @Override
    Range_or_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitRange_or_type) {
            listener.exitRange_or_type(this);
        }
    };
    // @Override
    Range_or_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitRange_or_type) {
            return visitor.visitRange_or_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Range_or_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Range_or_typeContext = Range_or_typeContext;
var Task_declarationContext = /** @class */ (function (_super) {
    __extends(Task_declarationContext, _super);
    function Task_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_declarationContext.prototype.task_identifier = function () {
        return this.getRuleContext(0, Task_identifierContext);
    };
    Task_declarationContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Task_declarationContext.prototype.task_item_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Task_item_declarationContext);
        }
        else {
            return this.getRuleContext(i, Task_item_declarationContext);
        }
    };
    Task_declarationContext.prototype.task_port_list = function () {
        return this.tryGetRuleContext(0, Task_port_listContext);
    };
    Task_declarationContext.prototype.block_item_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Block_item_declarationContext);
        }
        else {
            return this.getRuleContext(i, Block_item_declarationContext);
        }
    };
    Object.defineProperty(Task_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_task_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_declaration) {
            listener.enterTask_declaration(this);
        }
    };
    // @Override
    Task_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_declaration) {
            listener.exitTask_declaration(this);
        }
    };
    // @Override
    Task_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_declaration) {
            return visitor.visitTask_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_declarationContext = Task_declarationContext;
var Task_item_declarationContext = /** @class */ (function (_super) {
    __extends(Task_item_declarationContext, _super);
    function Task_item_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_item_declarationContext.prototype.block_item_declaration = function () {
        return this.tryGetRuleContext(0, Block_item_declarationContext);
    };
    Task_item_declarationContext.prototype.tf_declaration = function () {
        return this.tryGetRuleContext(0, Tf_declarationContext);
    };
    Task_item_declarationContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Task_item_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_task_item_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_item_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_item_declaration) {
            listener.enterTask_item_declaration(this);
        }
    };
    // @Override
    Task_item_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_item_declaration) {
            listener.exitTask_item_declaration(this);
        }
    };
    // @Override
    Task_item_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_item_declaration) {
            return visitor.visitTask_item_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_item_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_item_declarationContext = Task_item_declarationContext;
var Task_port_listContext = /** @class */ (function (_super) {
    __extends(Task_port_listContext, _super);
    function Task_port_listContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_port_listContext.prototype.task_port_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Task_port_itemContext);
        }
        else {
            return this.getRuleContext(i, Task_port_itemContext);
        }
    };
    Object.defineProperty(Task_port_listContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_task_port_list; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_port_listContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_port_list) {
            listener.enterTask_port_list(this);
        }
    };
    // @Override
    Task_port_listContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_port_list) {
            listener.exitTask_port_list(this);
        }
    };
    // @Override
    Task_port_listContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_port_list) {
            return visitor.visitTask_port_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_port_listContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_port_listContext = Task_port_listContext;
var Task_port_itemContext = /** @class */ (function (_super) {
    __extends(Task_port_itemContext, _super);
    function Task_port_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_port_itemContext.prototype.tf_declaration = function () {
        return this.getRuleContext(0, Tf_declarationContext);
    };
    Task_port_itemContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Task_port_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_task_port_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_port_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_port_item) {
            listener.enterTask_port_item(this);
        }
    };
    // @Override
    Task_port_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_port_item) {
            listener.exitTask_port_item(this);
        }
    };
    // @Override
    Task_port_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_port_item) {
            return visitor.visitTask_port_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_port_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_port_itemContext = Task_port_itemContext;
var Tf_decl_headerContext = /** @class */ (function (_super) {
    __extends(Tf_decl_headerContext, _super);
    function Tf_decl_headerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tf_decl_headerContext.prototype.net_type = function () {
        return this.tryGetRuleContext(0, Net_typeContext);
    };
    Tf_decl_headerContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Tf_decl_headerContext.prototype.task_port_type = function () {
        return this.tryGetRuleContext(0, Task_port_typeContext);
    };
    Object.defineProperty(Tf_decl_headerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tf_decl_header; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tf_decl_headerContext.prototype.enterRule = function (listener) {
        if (listener.enterTf_decl_header) {
            listener.enterTf_decl_header(this);
        }
    };
    // @Override
    Tf_decl_headerContext.prototype.exitRule = function (listener) {
        if (listener.exitTf_decl_header) {
            listener.exitTf_decl_header(this);
        }
    };
    // @Override
    Tf_decl_headerContext.prototype.accept = function (visitor) {
        if (visitor.visitTf_decl_header) {
            return visitor.visitTf_decl_header(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tf_decl_headerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tf_decl_headerContext = Tf_decl_headerContext;
var Tf_declarationContext = /** @class */ (function (_super) {
    __extends(Tf_declarationContext, _super);
    function Tf_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tf_declarationContext.prototype.tf_decl_header = function () {
        return this.getRuleContext(0, Tf_decl_headerContext);
    };
    Tf_declarationContext.prototype.list_of_port_identifiers = function () {
        return this.getRuleContext(0, List_of_port_identifiersContext);
    };
    Object.defineProperty(Tf_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tf_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tf_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTf_declaration) {
            listener.enterTf_declaration(this);
        }
    };
    // @Override
    Tf_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTf_declaration) {
            listener.exitTf_declaration(this);
        }
    };
    // @Override
    Tf_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTf_declaration) {
            return visitor.visitTf_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tf_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tf_declarationContext = Tf_declarationContext;
var Task_port_typeContext = /** @class */ (function (_super) {
    __extends(Task_port_typeContext, _super);
    function Task_port_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Task_port_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_task_port_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_port_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_port_type) {
            listener.enterTask_port_type(this);
        }
    };
    // @Override
    Task_port_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_port_type) {
            listener.exitTask_port_type(this);
        }
    };
    // @Override
    Task_port_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_port_type) {
            return visitor.visitTask_port_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_port_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_port_typeContext = Task_port_typeContext;
var Block_item_declarationContext = /** @class */ (function (_super) {
    __extends(Block_item_declarationContext, _super);
    function Block_item_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_item_declarationContext.prototype.block_reg_declaration = function () {
        return this.tryGetRuleContext(0, Block_reg_declarationContext);
    };
    Block_item_declarationContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Block_item_declarationContext.prototype.event_declaration = function () {
        return this.tryGetRuleContext(0, Event_declarationContext);
    };
    Block_item_declarationContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Block_item_declarationContext.prototype.local_parameter_declaration = function () {
        return this.tryGetRuleContext(0, Local_parameter_declarationContext);
    };
    Block_item_declarationContext.prototype.parameter_declaration = function () {
        return this.tryGetRuleContext(0, Parameter_declarationContext);
    };
    Block_item_declarationContext.prototype.real_declaration = function () {
        return this.tryGetRuleContext(0, Real_declarationContext);
    };
    Block_item_declarationContext.prototype.realtime_declaration = function () {
        return this.tryGetRuleContext(0, Realtime_declarationContext);
    };
    Block_item_declarationContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Object.defineProperty(Block_item_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_block_item_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_item_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_item_declaration) {
            listener.enterBlock_item_declaration(this);
        }
    };
    // @Override
    Block_item_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_item_declaration) {
            listener.exitBlock_item_declaration(this);
        }
    };
    // @Override
    Block_item_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_item_declaration) {
            return visitor.visitBlock_item_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_item_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_item_declarationContext = Block_item_declarationContext;
var Block_reg_declarationContext = /** @class */ (function (_super) {
    __extends(Block_reg_declarationContext, _super);
    function Block_reg_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_reg_declarationContext.prototype.list_of_block_variable_identifiers = function () {
        return this.getRuleContext(0, List_of_block_variable_identifiersContext);
    };
    Block_reg_declarationContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Block_reg_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_block_reg_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_reg_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_reg_declaration) {
            listener.enterBlock_reg_declaration(this);
        }
    };
    // @Override
    Block_reg_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_reg_declaration) {
            listener.exitBlock_reg_declaration(this);
        }
    };
    // @Override
    Block_reg_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_reg_declaration) {
            return visitor.visitBlock_reg_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_reg_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_reg_declarationContext = Block_reg_declarationContext;
var List_of_block_variable_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_block_variable_identifiersContext, _super);
    function List_of_block_variable_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_block_variable_identifiersContext.prototype.block_variable_type = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Block_variable_typeContext);
        }
        else {
            return this.getRuleContext(i, Block_variable_typeContext);
        }
    };
    Object.defineProperty(List_of_block_variable_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_block_variable_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_block_variable_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_block_variable_identifiers) {
            listener.enterList_of_block_variable_identifiers(this);
        }
    };
    // @Override
    List_of_block_variable_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_block_variable_identifiers) {
            listener.exitList_of_block_variable_identifiers(this);
        }
    };
    // @Override
    List_of_block_variable_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_block_variable_identifiers) {
            return visitor.visitList_of_block_variable_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_block_variable_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_block_variable_identifiersContext = List_of_block_variable_identifiersContext;
var Block_variable_typeContext = /** @class */ (function (_super) {
    __extends(Block_variable_typeContext, _super);
    function Block_variable_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_variable_typeContext.prototype.variable_identifier = function () {
        return this.getRuleContext(0, Variable_identifierContext);
    };
    Block_variable_typeContext.prototype.dimension = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimensionContext);
        }
        else {
            return this.getRuleContext(i, DimensionContext);
        }
    };
    Object.defineProperty(Block_variable_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_block_variable_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_variable_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_variable_type) {
            listener.enterBlock_variable_type(this);
        }
    };
    // @Override
    Block_variable_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_variable_type) {
            listener.exitBlock_variable_type(this);
        }
    };
    // @Override
    Block_variable_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_variable_type) {
            return visitor.visitBlock_variable_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_variable_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_variable_typeContext = Block_variable_typeContext;
var Gate_instantiationContext = /** @class */ (function (_super) {
    __extends(Gate_instantiationContext, _super);
    function Gate_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Gate_instantiationContext.prototype.cmos_switchtype = function () {
        return this.tryGetRuleContext(0, Cmos_switchtypeContext);
    };
    Gate_instantiationContext.prototype.cmos_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Cmos_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Cmos_switch_instanceContext);
        }
    };
    Gate_instantiationContext.prototype.delay3 = function () {
        return this.tryGetRuleContext(0, Delay3Context);
    };
    Gate_instantiationContext.prototype.mos_switchtype = function () {
        return this.tryGetRuleContext(0, Mos_switchtypeContext);
    };
    Gate_instantiationContext.prototype.mos_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Mos_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Mos_switch_instanceContext);
        }
    };
    Gate_instantiationContext.prototype.pass_switchtype = function () {
        return this.tryGetRuleContext(0, Pass_switchtypeContext);
    };
    Gate_instantiationContext.prototype.pass_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Pass_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Pass_switch_instanceContext);
        }
    };
    Gate_instantiationContext.prototype.pull_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Pull_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, Pull_gate_instanceContext);
        }
    };
    Gate_instantiationContext.prototype.pulldown_strength = function () {
        return this.tryGetRuleContext(0, Pulldown_strengthContext);
    };
    Gate_instantiationContext.prototype.pullup_strength = function () {
        return this.tryGetRuleContext(0, Pullup_strengthContext);
    };
    Gate_instantiationContext.prototype.enable_gatetype = function () {
        return this.tryGetRuleContext(0, Enable_gatetypeContext);
    };
    Gate_instantiationContext.prototype.enable_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Enable_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, Enable_gate_instanceContext);
        }
    };
    Gate_instantiationContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    Gate_instantiationContext.prototype.n_input_gatetype = function () {
        return this.tryGetRuleContext(0, N_input_gatetypeContext);
    };
    Gate_instantiationContext.prototype.n_input_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(N_input_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, N_input_gate_instanceContext);
        }
    };
    Gate_instantiationContext.prototype.delay2 = function () {
        return this.tryGetRuleContext(0, Delay2Context);
    };
    Gate_instantiationContext.prototype.n_output_gatetype = function () {
        return this.tryGetRuleContext(0, N_output_gatetypeContext);
    };
    Gate_instantiationContext.prototype.n_output_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(N_output_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, N_output_gate_instanceContext);
        }
    };
    Gate_instantiationContext.prototype.pass_en_switchtype = function () {
        return this.tryGetRuleContext(0, Pass_en_switchtypeContext);
    };
    Gate_instantiationContext.prototype.pass_enable_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Pass_enable_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Pass_enable_switch_instanceContext);
        }
    };
    Object.defineProperty(Gate_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_gate_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Gate_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterGate_instantiation) {
            listener.enterGate_instantiation(this);
        }
    };
    // @Override
    Gate_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitGate_instantiation) {
            listener.exitGate_instantiation(this);
        }
    };
    // @Override
    Gate_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitGate_instantiation) {
            return visitor.visitGate_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Gate_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Gate_instantiationContext = Gate_instantiationContext;
var Cmos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Cmos_switch_instanceContext, _super);
    function Cmos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Cmos_switch_instanceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Cmos_switch_instanceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    Cmos_switch_instanceContext.prototype.ncontrol_terminal = function () {
        return this.getRuleContext(0, Ncontrol_terminalContext);
    };
    Cmos_switch_instanceContext.prototype.pcontrol_terminal = function () {
        return this.getRuleContext(0, Pcontrol_terminalContext);
    };
    Cmos_switch_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(Cmos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_cmos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cmos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterCmos_switch_instance) {
            listener.enterCmos_switch_instance(this);
        }
    };
    // @Override
    Cmos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitCmos_switch_instance) {
            listener.exitCmos_switch_instance(this);
        }
    };
    // @Override
    Cmos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitCmos_switch_instance) {
            return visitor.visitCmos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cmos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cmos_switch_instanceContext = Cmos_switch_instanceContext;
var Enable_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Enable_gate_instanceContext, _super);
    function Enable_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enable_gate_instanceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Enable_gate_instanceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    Enable_gate_instanceContext.prototype.enable_terminal = function () {
        return this.getRuleContext(0, Enable_terminalContext);
    };
    Enable_gate_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(Enable_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_enable_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_gate_instance) {
            listener.enterEnable_gate_instance(this);
        }
    };
    // @Override
    Enable_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_gate_instance) {
            listener.exitEnable_gate_instance(this);
        }
    };
    // @Override
    Enable_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_gate_instance) {
            return visitor.visitEnable_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_gate_instanceContext = Enable_gate_instanceContext;
var Mos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Mos_switch_instanceContext, _super);
    function Mos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Mos_switch_instanceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Mos_switch_instanceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    Mos_switch_instanceContext.prototype.enable_terminal = function () {
        return this.getRuleContext(0, Enable_terminalContext);
    };
    Mos_switch_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(Mos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_mos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterMos_switch_instance) {
            listener.enterMos_switch_instance(this);
        }
    };
    // @Override
    Mos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitMos_switch_instance) {
            listener.exitMos_switch_instance(this);
        }
    };
    // @Override
    Mos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitMos_switch_instance) {
            return visitor.visitMos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mos_switch_instanceContext = Mos_switch_instanceContext;
var N_input_gate_instanceContext = /** @class */ (function (_super) {
    __extends(N_input_gate_instanceContext, _super);
    function N_input_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_input_gate_instanceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    N_input_gate_instanceContext.prototype.input_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Input_terminalContext);
        }
        else {
            return this.getRuleContext(i, Input_terminalContext);
        }
    };
    N_input_gate_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(N_input_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_n_input_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_input_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterN_input_gate_instance) {
            listener.enterN_input_gate_instance(this);
        }
    };
    // @Override
    N_input_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitN_input_gate_instance) {
            listener.exitN_input_gate_instance(this);
        }
    };
    // @Override
    N_input_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitN_input_gate_instance) {
            return visitor.visitN_input_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_input_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_input_gate_instanceContext = N_input_gate_instanceContext;
var N_output_gate_instanceContext = /** @class */ (function (_super) {
    __extends(N_output_gate_instanceContext, _super);
    function N_output_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_output_gate_instanceContext.prototype.output_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Output_terminalContext);
        }
        else {
            return this.getRuleContext(i, Output_terminalContext);
        }
    };
    N_output_gate_instanceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    N_output_gate_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(N_output_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_n_output_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_output_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterN_output_gate_instance) {
            listener.enterN_output_gate_instance(this);
        }
    };
    // @Override
    N_output_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitN_output_gate_instance) {
            listener.exitN_output_gate_instance(this);
        }
    };
    // @Override
    N_output_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitN_output_gate_instance) {
            return visitor.visitN_output_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_output_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_output_gate_instanceContext = N_output_gate_instanceContext;
var Pass_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Pass_switch_instanceContext, _super);
    function Pass_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_switch_instanceContext.prototype.inout_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Inout_terminalContext);
        }
        else {
            return this.getRuleContext(i, Inout_terminalContext);
        }
    };
    Pass_switch_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(Pass_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pass_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_switch_instance) {
            listener.enterPass_switch_instance(this);
        }
    };
    // @Override
    Pass_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_switch_instance) {
            listener.exitPass_switch_instance(this);
        }
    };
    // @Override
    Pass_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_switch_instance) {
            return visitor.visitPass_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_switch_instanceContext = Pass_switch_instanceContext;
var Pass_enable_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Pass_enable_switch_instanceContext, _super);
    function Pass_enable_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_enable_switch_instanceContext.prototype.inout_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Inout_terminalContext);
        }
        else {
            return this.getRuleContext(i, Inout_terminalContext);
        }
    };
    Pass_enable_switch_instanceContext.prototype.enable_terminal = function () {
        return this.getRuleContext(0, Enable_terminalContext);
    };
    Pass_enable_switch_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(Pass_enable_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pass_enable_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_enable_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_enable_switch_instance) {
            listener.enterPass_enable_switch_instance(this);
        }
    };
    // @Override
    Pass_enable_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_enable_switch_instance) {
            listener.exitPass_enable_switch_instance(this);
        }
    };
    // @Override
    Pass_enable_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_enable_switch_instance) {
            return visitor.visitPass_enable_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_enable_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_enable_switch_instanceContext = Pass_enable_switch_instanceContext;
var Pull_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Pull_gate_instanceContext, _super);
    function Pull_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pull_gate_instanceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Pull_gate_instanceContext.prototype.name_of_gate_instance = function () {
        return this.tryGetRuleContext(0, Name_of_gate_instanceContext);
    };
    Object.defineProperty(Pull_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pull_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pull_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterPull_gate_instance) {
            listener.enterPull_gate_instance(this);
        }
    };
    // @Override
    Pull_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitPull_gate_instance) {
            listener.exitPull_gate_instance(this);
        }
    };
    // @Override
    Pull_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitPull_gate_instance) {
            return visitor.visitPull_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pull_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pull_gate_instanceContext = Pull_gate_instanceContext;
var Name_of_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Name_of_gate_instanceContext, _super);
    function Name_of_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Name_of_gate_instanceContext.prototype.gate_instance_identifier = function () {
        return this.getRuleContext(0, Gate_instance_identifierContext);
    };
    Name_of_gate_instanceContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Name_of_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_name_of_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Name_of_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterName_of_gate_instance) {
            listener.enterName_of_gate_instance(this);
        }
    };
    // @Override
    Name_of_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitName_of_gate_instance) {
            listener.exitName_of_gate_instance(this);
        }
    };
    // @Override
    Name_of_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitName_of_gate_instance) {
            return visitor.visitName_of_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Name_of_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Name_of_gate_instanceContext = Name_of_gate_instanceContext;
var Pulldown_strengthContext = /** @class */ (function (_super) {
    __extends(Pulldown_strengthContext, _super);
    function Pulldown_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pulldown_strengthContext.prototype.strength0 = function () {
        return this.getRuleContext(0, Strength0Context);
    };
    Pulldown_strengthContext.prototype.strength1 = function () {
        return this.tryGetRuleContext(0, Strength1Context);
    };
    Object.defineProperty(Pulldown_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pulldown_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pulldown_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterPulldown_strength) {
            listener.enterPulldown_strength(this);
        }
    };
    // @Override
    Pulldown_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitPulldown_strength) {
            listener.exitPulldown_strength(this);
        }
    };
    // @Override
    Pulldown_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitPulldown_strength) {
            return visitor.visitPulldown_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pulldown_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pulldown_strengthContext = Pulldown_strengthContext;
var Pullup_strengthContext = /** @class */ (function (_super) {
    __extends(Pullup_strengthContext, _super);
    function Pullup_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pullup_strengthContext.prototype.strength0 = function () {
        return this.tryGetRuleContext(0, Strength0Context);
    };
    Pullup_strengthContext.prototype.strength1 = function () {
        return this.getRuleContext(0, Strength1Context);
    };
    Object.defineProperty(Pullup_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pullup_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pullup_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterPullup_strength) {
            listener.enterPullup_strength(this);
        }
    };
    // @Override
    Pullup_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitPullup_strength) {
            listener.exitPullup_strength(this);
        }
    };
    // @Override
    Pullup_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitPullup_strength) {
            return visitor.visitPullup_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pullup_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pullup_strengthContext = Pullup_strengthContext;
var Enable_terminalContext = /** @class */ (function (_super) {
    __extends(Enable_terminalContext, _super);
    function Enable_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enable_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Enable_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_enable_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_terminal) {
            listener.enterEnable_terminal(this);
        }
    };
    // @Override
    Enable_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_terminal) {
            listener.exitEnable_terminal(this);
        }
    };
    // @Override
    Enable_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_terminal) {
            return visitor.visitEnable_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_terminalContext = Enable_terminalContext;
var Ncontrol_terminalContext = /** @class */ (function (_super) {
    __extends(Ncontrol_terminalContext, _super);
    function Ncontrol_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ncontrol_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Ncontrol_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_ncontrol_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ncontrol_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterNcontrol_terminal) {
            listener.enterNcontrol_terminal(this);
        }
    };
    // @Override
    Ncontrol_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitNcontrol_terminal) {
            listener.exitNcontrol_terminal(this);
        }
    };
    // @Override
    Ncontrol_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitNcontrol_terminal) {
            return visitor.visitNcontrol_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ncontrol_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ncontrol_terminalContext = Ncontrol_terminalContext;
var Pcontrol_terminalContext = /** @class */ (function (_super) {
    __extends(Pcontrol_terminalContext, _super);
    function Pcontrol_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pcontrol_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Pcontrol_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pcontrol_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pcontrol_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterPcontrol_terminal) {
            listener.enterPcontrol_terminal(this);
        }
    };
    // @Override
    Pcontrol_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitPcontrol_terminal) {
            listener.exitPcontrol_terminal(this);
        }
    };
    // @Override
    Pcontrol_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitPcontrol_terminal) {
            return visitor.visitPcontrol_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pcontrol_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pcontrol_terminalContext = Pcontrol_terminalContext;
var Input_terminalContext = /** @class */ (function (_super) {
    __extends(Input_terminalContext, _super);
    function Input_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Input_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Input_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_input_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Input_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterInput_terminal) {
            listener.enterInput_terminal(this);
        }
    };
    // @Override
    Input_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitInput_terminal) {
            listener.exitInput_terminal(this);
        }
    };
    // @Override
    Input_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitInput_terminal) {
            return visitor.visitInput_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Input_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Input_terminalContext = Input_terminalContext;
var Inout_terminalContext = /** @class */ (function (_super) {
    __extends(Inout_terminalContext, _super);
    function Inout_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inout_terminalContext.prototype.net_lvalue = function () {
        return this.getRuleContext(0, Net_lvalueContext);
    };
    Object.defineProperty(Inout_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_inout_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inout_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterInout_terminal) {
            listener.enterInout_terminal(this);
        }
    };
    // @Override
    Inout_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitInout_terminal) {
            listener.exitInout_terminal(this);
        }
    };
    // @Override
    Inout_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitInout_terminal) {
            return visitor.visitInout_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inout_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inout_terminalContext = Inout_terminalContext;
var Output_terminalContext = /** @class */ (function (_super) {
    __extends(Output_terminalContext, _super);
    function Output_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Output_terminalContext.prototype.net_lvalue = function () {
        return this.getRuleContext(0, Net_lvalueContext);
    };
    Object.defineProperty(Output_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_output_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_terminal) {
            listener.enterOutput_terminal(this);
        }
    };
    // @Override
    Output_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_terminal) {
            listener.exitOutput_terminal(this);
        }
    };
    // @Override
    Output_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_terminal) {
            return visitor.visitOutput_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_terminalContext = Output_terminalContext;
var Cmos_switchtypeContext = /** @class */ (function (_super) {
    __extends(Cmos_switchtypeContext, _super);
    function Cmos_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Cmos_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_cmos_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cmos_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterCmos_switchtype) {
            listener.enterCmos_switchtype(this);
        }
    };
    // @Override
    Cmos_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitCmos_switchtype) {
            listener.exitCmos_switchtype(this);
        }
    };
    // @Override
    Cmos_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitCmos_switchtype) {
            return visitor.visitCmos_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cmos_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cmos_switchtypeContext = Cmos_switchtypeContext;
var Enable_gatetypeContext = /** @class */ (function (_super) {
    __extends(Enable_gatetypeContext, _super);
    function Enable_gatetypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Enable_gatetypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_enable_gatetype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_gatetypeContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_gatetype) {
            listener.enterEnable_gatetype(this);
        }
    };
    // @Override
    Enable_gatetypeContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_gatetype) {
            listener.exitEnable_gatetype(this);
        }
    };
    // @Override
    Enable_gatetypeContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_gatetype) {
            return visitor.visitEnable_gatetype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_gatetypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_gatetypeContext = Enable_gatetypeContext;
var Mos_switchtypeContext = /** @class */ (function (_super) {
    __extends(Mos_switchtypeContext, _super);
    function Mos_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Mos_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_mos_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mos_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterMos_switchtype) {
            listener.enterMos_switchtype(this);
        }
    };
    // @Override
    Mos_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitMos_switchtype) {
            listener.exitMos_switchtype(this);
        }
    };
    // @Override
    Mos_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitMos_switchtype) {
            return visitor.visitMos_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mos_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mos_switchtypeContext = Mos_switchtypeContext;
var N_input_gatetypeContext = /** @class */ (function (_super) {
    __extends(N_input_gatetypeContext, _super);
    function N_input_gatetypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(N_input_gatetypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_n_input_gatetype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_input_gatetypeContext.prototype.enterRule = function (listener) {
        if (listener.enterN_input_gatetype) {
            listener.enterN_input_gatetype(this);
        }
    };
    // @Override
    N_input_gatetypeContext.prototype.exitRule = function (listener) {
        if (listener.exitN_input_gatetype) {
            listener.exitN_input_gatetype(this);
        }
    };
    // @Override
    N_input_gatetypeContext.prototype.accept = function (visitor) {
        if (visitor.visitN_input_gatetype) {
            return visitor.visitN_input_gatetype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_input_gatetypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_input_gatetypeContext = N_input_gatetypeContext;
var N_output_gatetypeContext = /** @class */ (function (_super) {
    __extends(N_output_gatetypeContext, _super);
    function N_output_gatetypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(N_output_gatetypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_n_output_gatetype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_output_gatetypeContext.prototype.enterRule = function (listener) {
        if (listener.enterN_output_gatetype) {
            listener.enterN_output_gatetype(this);
        }
    };
    // @Override
    N_output_gatetypeContext.prototype.exitRule = function (listener) {
        if (listener.exitN_output_gatetype) {
            listener.exitN_output_gatetype(this);
        }
    };
    // @Override
    N_output_gatetypeContext.prototype.accept = function (visitor) {
        if (visitor.visitN_output_gatetype) {
            return visitor.visitN_output_gatetype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_output_gatetypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_output_gatetypeContext = N_output_gatetypeContext;
var Pass_en_switchtypeContext = /** @class */ (function (_super) {
    __extends(Pass_en_switchtypeContext, _super);
    function Pass_en_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Pass_en_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pass_en_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_en_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_en_switchtype) {
            listener.enterPass_en_switchtype(this);
        }
    };
    // @Override
    Pass_en_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_en_switchtype) {
            listener.exitPass_en_switchtype(this);
        }
    };
    // @Override
    Pass_en_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_en_switchtype) {
            return visitor.visitPass_en_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_en_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_en_switchtypeContext = Pass_en_switchtypeContext;
var Pass_switchtypeContext = /** @class */ (function (_super) {
    __extends(Pass_switchtypeContext, _super);
    function Pass_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Pass_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pass_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_switchtype) {
            listener.enterPass_switchtype(this);
        }
    };
    // @Override
    Pass_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_switchtype) {
            listener.exitPass_switchtype(this);
        }
    };
    // @Override
    Pass_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_switchtype) {
            return visitor.visitPass_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_switchtypeContext = Pass_switchtypeContext;
var Module_instantiationContext = /** @class */ (function (_super) {
    __extends(Module_instantiationContext, _super);
    function Module_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_instantiationContext.prototype.module_identifier = function () {
        return this.getRuleContext(0, Module_identifierContext);
    };
    Module_instantiationContext.prototype.module_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Module_instanceContext);
        }
        else {
            return this.getRuleContext(i, Module_instanceContext);
        }
    };
    Module_instantiationContext.prototype.parameter_value_assignment = function () {
        return this.tryGetRuleContext(0, Parameter_value_assignmentContext);
    };
    Object.defineProperty(Module_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_instantiation) {
            listener.enterModule_instantiation(this);
        }
    };
    // @Override
    Module_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_instantiation) {
            listener.exitModule_instantiation(this);
        }
    };
    // @Override
    Module_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_instantiation) {
            return visitor.visitModule_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_instantiationContext = Module_instantiationContext;
var Parameter_value_assignmentContext = /** @class */ (function (_super) {
    __extends(Parameter_value_assignmentContext, _super);
    function Parameter_value_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_value_assignmentContext.prototype.list_of_parameter_assignments = function () {
        return this.getRuleContext(0, List_of_parameter_assignmentsContext);
    };
    Object.defineProperty(Parameter_value_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_parameter_value_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_value_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_value_assignment) {
            listener.enterParameter_value_assignment(this);
        }
    };
    // @Override
    Parameter_value_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_value_assignment) {
            listener.exitParameter_value_assignment(this);
        }
    };
    // @Override
    Parameter_value_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_value_assignment) {
            return visitor.visitParameter_value_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_value_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_value_assignmentContext = Parameter_value_assignmentContext;
var List_of_parameter_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_parameter_assignmentsContext, _super);
    function List_of_parameter_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_parameter_assignmentsContext.prototype.ordered_parameter_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Ordered_parameter_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Ordered_parameter_assignmentContext);
        }
    };
    List_of_parameter_assignmentsContext.prototype.named_parameter_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Named_parameter_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Named_parameter_assignmentContext);
        }
    };
    Object.defineProperty(List_of_parameter_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_parameter_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_parameter_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_parameter_assignments) {
            listener.enterList_of_parameter_assignments(this);
        }
    };
    // @Override
    List_of_parameter_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_parameter_assignments) {
            listener.exitList_of_parameter_assignments(this);
        }
    };
    // @Override
    List_of_parameter_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_parameter_assignments) {
            return visitor.visitList_of_parameter_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_parameter_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_parameter_assignmentsContext = List_of_parameter_assignmentsContext;
var Ordered_parameter_assignmentContext = /** @class */ (function (_super) {
    __extends(Ordered_parameter_assignmentContext, _super);
    function Ordered_parameter_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ordered_parameter_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Ordered_parameter_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_ordered_parameter_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ordered_parameter_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterOrdered_parameter_assignment) {
            listener.enterOrdered_parameter_assignment(this);
        }
    };
    // @Override
    Ordered_parameter_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitOrdered_parameter_assignment) {
            listener.exitOrdered_parameter_assignment(this);
        }
    };
    // @Override
    Ordered_parameter_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitOrdered_parameter_assignment) {
            return visitor.visitOrdered_parameter_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ordered_parameter_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ordered_parameter_assignmentContext = Ordered_parameter_assignmentContext;
var Named_parameter_assignmentContext = /** @class */ (function (_super) {
    __extends(Named_parameter_assignmentContext, _super);
    function Named_parameter_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Named_parameter_assignmentContext.prototype.parameter_identifier = function () {
        return this.getRuleContext(0, Parameter_identifierContext);
    };
    Named_parameter_assignmentContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Named_parameter_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_named_parameter_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Named_parameter_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterNamed_parameter_assignment) {
            listener.enterNamed_parameter_assignment(this);
        }
    };
    // @Override
    Named_parameter_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitNamed_parameter_assignment) {
            listener.exitNamed_parameter_assignment(this);
        }
    };
    // @Override
    Named_parameter_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitNamed_parameter_assignment) {
            return visitor.visitNamed_parameter_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Named_parameter_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Named_parameter_assignmentContext = Named_parameter_assignmentContext;
var Module_instanceContext = /** @class */ (function (_super) {
    __extends(Module_instanceContext, _super);
    function Module_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_instanceContext.prototype.name_of_instance = function () {
        return this.getRuleContext(0, Name_of_instanceContext);
    };
    Module_instanceContext.prototype.list_of_port_connections = function () {
        return this.getRuleContext(0, List_of_port_connectionsContext);
    };
    Object.defineProperty(Module_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_instance) {
            listener.enterModule_instance(this);
        }
    };
    // @Override
    Module_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_instance) {
            listener.exitModule_instance(this);
        }
    };
    // @Override
    Module_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_instance) {
            return visitor.visitModule_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_instanceContext = Module_instanceContext;
var Name_of_instanceContext = /** @class */ (function (_super) {
    __extends(Name_of_instanceContext, _super);
    function Name_of_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Name_of_instanceContext.prototype.module_instance_identifier = function () {
        return this.getRuleContext(0, Module_instance_identifierContext);
    };
    Name_of_instanceContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Name_of_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_name_of_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Name_of_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterName_of_instance) {
            listener.enterName_of_instance(this);
        }
    };
    // @Override
    Name_of_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitName_of_instance) {
            listener.exitName_of_instance(this);
        }
    };
    // @Override
    Name_of_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitName_of_instance) {
            return visitor.visitName_of_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Name_of_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Name_of_instanceContext = Name_of_instanceContext;
var List_of_port_connectionsContext = /** @class */ (function (_super) {
    __extends(List_of_port_connectionsContext, _super);
    function List_of_port_connectionsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_port_connectionsContext.prototype.ordered_port_connection = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Ordered_port_connectionContext);
        }
        else {
            return this.getRuleContext(i, Ordered_port_connectionContext);
        }
    };
    List_of_port_connectionsContext.prototype.named_port_connection = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Named_port_connectionContext);
        }
        else {
            return this.getRuleContext(i, Named_port_connectionContext);
        }
    };
    Object.defineProperty(List_of_port_connectionsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_port_connections; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_port_connectionsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_port_connections) {
            listener.enterList_of_port_connections(this);
        }
    };
    // @Override
    List_of_port_connectionsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_port_connections) {
            listener.exitList_of_port_connections(this);
        }
    };
    // @Override
    List_of_port_connectionsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_port_connections) {
            return visitor.visitList_of_port_connections(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_port_connectionsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_port_connectionsContext = List_of_port_connectionsContext;
var Ordered_port_connectionContext = /** @class */ (function (_super) {
    __extends(Ordered_port_connectionContext, _super);
    function Ordered_port_connectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ordered_port_connectionContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Ordered_port_connectionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Ordered_port_connectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_ordered_port_connection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ordered_port_connectionContext.prototype.enterRule = function (listener) {
        if (listener.enterOrdered_port_connection) {
            listener.enterOrdered_port_connection(this);
        }
    };
    // @Override
    Ordered_port_connectionContext.prototype.exitRule = function (listener) {
        if (listener.exitOrdered_port_connection) {
            listener.exitOrdered_port_connection(this);
        }
    };
    // @Override
    Ordered_port_connectionContext.prototype.accept = function (visitor) {
        if (visitor.visitOrdered_port_connection) {
            return visitor.visitOrdered_port_connection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ordered_port_connectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ordered_port_connectionContext = Ordered_port_connectionContext;
var Named_port_connectionContext = /** @class */ (function (_super) {
    __extends(Named_port_connectionContext, _super);
    function Named_port_connectionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Named_port_connectionContext.prototype.port_identifier = function () {
        return this.getRuleContext(0, Port_identifierContext);
    };
    Named_port_connectionContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Named_port_connectionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Named_port_connectionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_named_port_connection; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Named_port_connectionContext.prototype.enterRule = function (listener) {
        if (listener.enterNamed_port_connection) {
            listener.enterNamed_port_connection(this);
        }
    };
    // @Override
    Named_port_connectionContext.prototype.exitRule = function (listener) {
        if (listener.exitNamed_port_connection) {
            listener.exitNamed_port_connection(this);
        }
    };
    // @Override
    Named_port_connectionContext.prototype.accept = function (visitor) {
        if (visitor.visitNamed_port_connection) {
            return visitor.visitNamed_port_connection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Named_port_connectionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Named_port_connectionContext = Named_port_connectionContext;
var Generated_instantiationContext = /** @class */ (function (_super) {
    __extends(Generated_instantiationContext, _super);
    function Generated_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generated_instantiationContext.prototype.generate_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Generate_itemContext);
        }
        else {
            return this.getRuleContext(i, Generate_itemContext);
        }
    };
    Object.defineProperty(Generated_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generated_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generated_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerated_instantiation) {
            listener.enterGenerated_instantiation(this);
        }
    };
    // @Override
    Generated_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerated_instantiation) {
            listener.exitGenerated_instantiation(this);
        }
    };
    // @Override
    Generated_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerated_instantiation) {
            return visitor.visitGenerated_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generated_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generated_instantiationContext = Generated_instantiationContext;
var Generate_item_or_nullContext = /** @class */ (function (_super) {
    __extends(Generate_item_or_nullContext, _super);
    function Generate_item_or_nullContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_item_or_nullContext.prototype.generate_item = function () {
        return this.tryGetRuleContext(0, Generate_itemContext);
    };
    Object.defineProperty(Generate_item_or_nullContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generate_item_or_null; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_item_or_nullContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_item_or_null) {
            listener.enterGenerate_item_or_null(this);
        }
    };
    // @Override
    Generate_item_or_nullContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_item_or_null) {
            listener.exitGenerate_item_or_null(this);
        }
    };
    // @Override
    Generate_item_or_nullContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_item_or_null) {
            return visitor.visitGenerate_item_or_null(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_item_or_nullContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_item_or_nullContext = Generate_item_or_nullContext;
var Generate_itemContext = /** @class */ (function (_super) {
    __extends(Generate_itemContext, _super);
    function Generate_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_itemContext.prototype.generate_conditional_statement = function () {
        return this.tryGetRuleContext(0, Generate_conditional_statementContext);
    };
    Generate_itemContext.prototype.generate_case_statement = function () {
        return this.tryGetRuleContext(0, Generate_case_statementContext);
    };
    Generate_itemContext.prototype.generate_loop_statement = function () {
        return this.tryGetRuleContext(0, Generate_loop_statementContext);
    };
    Generate_itemContext.prototype.generate_block = function () {
        return this.tryGetRuleContext(0, Generate_blockContext);
    };
    Generate_itemContext.prototype.module_or_generate_item = function () {
        return this.tryGetRuleContext(0, Module_or_generate_itemContext);
    };
    Object.defineProperty(Generate_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generate_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_item) {
            listener.enterGenerate_item(this);
        }
    };
    // @Override
    Generate_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_item) {
            listener.exitGenerate_item(this);
        }
    };
    // @Override
    Generate_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_item) {
            return visitor.visitGenerate_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_itemContext = Generate_itemContext;
var Generate_conditional_statementContext = /** @class */ (function (_super) {
    __extends(Generate_conditional_statementContext, _super);
    function Generate_conditional_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_conditional_statementContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Generate_conditional_statementContext.prototype.generate_item_or_null = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Generate_item_or_nullContext);
        }
        else {
            return this.getRuleContext(i, Generate_item_or_nullContext);
        }
    };
    Object.defineProperty(Generate_conditional_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generate_conditional_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_conditional_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_conditional_statement) {
            listener.enterGenerate_conditional_statement(this);
        }
    };
    // @Override
    Generate_conditional_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_conditional_statement) {
            listener.exitGenerate_conditional_statement(this);
        }
    };
    // @Override
    Generate_conditional_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_conditional_statement) {
            return visitor.visitGenerate_conditional_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_conditional_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_conditional_statementContext = Generate_conditional_statementContext;
var Generate_case_statementContext = /** @class */ (function (_super) {
    __extends(Generate_case_statementContext, _super);
    function Generate_case_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_case_statementContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Generate_case_statementContext.prototype.genvar_case_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Genvar_case_itemContext);
        }
        else {
            return this.getRuleContext(i, Genvar_case_itemContext);
        }
    };
    Object.defineProperty(Generate_case_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generate_case_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_case_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_case_statement) {
            listener.enterGenerate_case_statement(this);
        }
    };
    // @Override
    Generate_case_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_case_statement) {
            listener.exitGenerate_case_statement(this);
        }
    };
    // @Override
    Generate_case_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_case_statement) {
            return visitor.visitGenerate_case_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_case_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_case_statementContext = Generate_case_statementContext;
var Genvar_case_itemContext = /** @class */ (function (_super) {
    __extends(Genvar_case_itemContext, _super);
    function Genvar_case_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Genvar_case_itemContext.prototype.constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Constant_expressionContext);
        }
    };
    Genvar_case_itemContext.prototype.generate_item_or_null = function () {
        return this.getRuleContext(0, Generate_item_or_nullContext);
    };
    Object.defineProperty(Genvar_case_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_genvar_case_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Genvar_case_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterGenvar_case_item) {
            listener.enterGenvar_case_item(this);
        }
    };
    // @Override
    Genvar_case_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitGenvar_case_item) {
            listener.exitGenvar_case_item(this);
        }
    };
    // @Override
    Genvar_case_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitGenvar_case_item) {
            return visitor.visitGenvar_case_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Genvar_case_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Genvar_case_itemContext = Genvar_case_itemContext;
var Generate_loop_statementContext = /** @class */ (function (_super) {
    __extends(Generate_loop_statementContext, _super);
    function Generate_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_loop_statementContext.prototype.genvar_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Genvar_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Genvar_assignmentContext);
        }
    };
    Generate_loop_statementContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Generate_loop_statementContext.prototype.generate_block = function () {
        return this.getRuleContext(0, Generate_blockContext);
    };
    Object.defineProperty(Generate_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generate_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_loop_statement) {
            listener.enterGenerate_loop_statement(this);
        }
    };
    // @Override
    Generate_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_loop_statement) {
            listener.exitGenerate_loop_statement(this);
        }
    };
    // @Override
    Generate_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_loop_statement) {
            return visitor.visitGenerate_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_loop_statementContext = Generate_loop_statementContext;
var Genvar_assignmentContext = /** @class */ (function (_super) {
    __extends(Genvar_assignmentContext, _super);
    function Genvar_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Genvar_assignmentContext.prototype.genvar_identifier = function () {
        return this.getRuleContext(0, Genvar_identifierContext);
    };
    Genvar_assignmentContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Genvar_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_genvar_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Genvar_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterGenvar_assignment) {
            listener.enterGenvar_assignment(this);
        }
    };
    // @Override
    Genvar_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitGenvar_assignment) {
            listener.exitGenvar_assignment(this);
        }
    };
    // @Override
    Genvar_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitGenvar_assignment) {
            return visitor.visitGenvar_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Genvar_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Genvar_assignmentContext = Genvar_assignmentContext;
var Generate_blockContext = /** @class */ (function (_super) {
    __extends(Generate_blockContext, _super);
    function Generate_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_blockContext.prototype.generate_block_identifier = function () {
        return this.tryGetRuleContext(0, Generate_block_identifierContext);
    };
    Generate_blockContext.prototype.generate_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Generate_itemContext);
        }
        else {
            return this.getRuleContext(i, Generate_itemContext);
        }
    };
    Object.defineProperty(Generate_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generate_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_block) {
            listener.enterGenerate_block(this);
        }
    };
    // @Override
    Generate_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_block) {
            listener.exitGenerate_block(this);
        }
    };
    // @Override
    Generate_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_block) {
            return visitor.visitGenerate_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_blockContext = Generate_blockContext;
var Continuous_assignContext = /** @class */ (function (_super) {
    __extends(Continuous_assignContext, _super);
    function Continuous_assignContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Continuous_assignContext.prototype.list_of_net_assignments = function () {
        return this.getRuleContext(0, List_of_net_assignmentsContext);
    };
    Continuous_assignContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    Continuous_assignContext.prototype.delay3 = function () {
        return this.tryGetRuleContext(0, Delay3Context);
    };
    Object.defineProperty(Continuous_assignContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_continuous_assign; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Continuous_assignContext.prototype.enterRule = function (listener) {
        if (listener.enterContinuous_assign) {
            listener.enterContinuous_assign(this);
        }
    };
    // @Override
    Continuous_assignContext.prototype.exitRule = function (listener) {
        if (listener.exitContinuous_assign) {
            listener.exitContinuous_assign(this);
        }
    };
    // @Override
    Continuous_assignContext.prototype.accept = function (visitor) {
        if (visitor.visitContinuous_assign) {
            return visitor.visitContinuous_assign(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Continuous_assignContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Continuous_assignContext = Continuous_assignContext;
var List_of_net_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_net_assignmentsContext, _super);
    function List_of_net_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_net_assignmentsContext.prototype.net_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Net_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Net_assignmentContext);
        }
    };
    Object.defineProperty(List_of_net_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_net_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_net_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_net_assignments) {
            listener.enterList_of_net_assignments(this);
        }
    };
    // @Override
    List_of_net_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_net_assignments) {
            listener.exitList_of_net_assignments(this);
        }
    };
    // @Override
    List_of_net_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_net_assignments) {
            return visitor.visitList_of_net_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_net_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_net_assignmentsContext = List_of_net_assignmentsContext;
var Net_assignmentContext = /** @class */ (function (_super) {
    __extends(Net_assignmentContext, _super);
    function Net_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_assignmentContext.prototype.net_lvalue = function () {
        return this.getRuleContext(0, Net_lvalueContext);
    };
    Net_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Net_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_assignment) {
            listener.enterNet_assignment(this);
        }
    };
    // @Override
    Net_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_assignment) {
            listener.exitNet_assignment(this);
        }
    };
    // @Override
    Net_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_assignment) {
            return visitor.visitNet_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_assignmentContext = Net_assignmentContext;
var Initial_constructContext = /** @class */ (function (_super) {
    __extends(Initial_constructContext, _super);
    function Initial_constructContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Initial_constructContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Object.defineProperty(Initial_constructContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_initial_construct; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Initial_constructContext.prototype.enterRule = function (listener) {
        if (listener.enterInitial_construct) {
            listener.enterInitial_construct(this);
        }
    };
    // @Override
    Initial_constructContext.prototype.exitRule = function (listener) {
        if (listener.exitInitial_construct) {
            listener.exitInitial_construct(this);
        }
    };
    // @Override
    Initial_constructContext.prototype.accept = function (visitor) {
        if (visitor.visitInitial_construct) {
            return visitor.visitInitial_construct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Initial_constructContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Initial_constructContext = Initial_constructContext;
var Always_constructContext = /** @class */ (function (_super) {
    __extends(Always_constructContext, _super);
    function Always_constructContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Always_constructContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Object.defineProperty(Always_constructContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_always_construct; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Always_constructContext.prototype.enterRule = function (listener) {
        if (listener.enterAlways_construct) {
            listener.enterAlways_construct(this);
        }
    };
    // @Override
    Always_constructContext.prototype.exitRule = function (listener) {
        if (listener.exitAlways_construct) {
            listener.exitAlways_construct(this);
        }
    };
    // @Override
    Always_constructContext.prototype.accept = function (visitor) {
        if (visitor.visitAlways_construct) {
            return visitor.visitAlways_construct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Always_constructContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Always_constructContext = Always_constructContext;
var Blocking_assignmentContext = /** @class */ (function (_super) {
    __extends(Blocking_assignmentContext, _super);
    function Blocking_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Blocking_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Blocking_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Blocking_assignmentContext.prototype.delay_or_event_control = function () {
        return this.tryGetRuleContext(0, Delay_or_event_controlContext);
    };
    Object.defineProperty(Blocking_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_blocking_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Blocking_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterBlocking_assignment) {
            listener.enterBlocking_assignment(this);
        }
    };
    // @Override
    Blocking_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitBlocking_assignment) {
            listener.exitBlocking_assignment(this);
        }
    };
    // @Override
    Blocking_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitBlocking_assignment) {
            return visitor.visitBlocking_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Blocking_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Blocking_assignmentContext = Blocking_assignmentContext;
var Nonblocking_assignmentContext = /** @class */ (function (_super) {
    __extends(Nonblocking_assignmentContext, _super);
    function Nonblocking_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Nonblocking_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Nonblocking_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Nonblocking_assignmentContext.prototype.delay_or_event_control = function () {
        return this.tryGetRuleContext(0, Delay_or_event_controlContext);
    };
    Object.defineProperty(Nonblocking_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_nonblocking_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Nonblocking_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterNonblocking_assignment) {
            listener.enterNonblocking_assignment(this);
        }
    };
    // @Override
    Nonblocking_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitNonblocking_assignment) {
            listener.exitNonblocking_assignment(this);
        }
    };
    // @Override
    Nonblocking_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitNonblocking_assignment) {
            return visitor.visitNonblocking_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Nonblocking_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Nonblocking_assignmentContext = Nonblocking_assignmentContext;
var Procedural_continuous_assignmentsContext = /** @class */ (function (_super) {
    __extends(Procedural_continuous_assignmentsContext, _super);
    function Procedural_continuous_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Procedural_continuous_assignmentsContext.prototype.variable_assignment = function () {
        return this.tryGetRuleContext(0, Variable_assignmentContext);
    };
    Procedural_continuous_assignmentsContext.prototype.variable_lvalue = function () {
        return this.tryGetRuleContext(0, Variable_lvalueContext);
    };
    Procedural_continuous_assignmentsContext.prototype.net_assignment = function () {
        return this.tryGetRuleContext(0, Net_assignmentContext);
    };
    Procedural_continuous_assignmentsContext.prototype.net_lvalue = function () {
        return this.tryGetRuleContext(0, Net_lvalueContext);
    };
    Object.defineProperty(Procedural_continuous_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_procedural_continuous_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Procedural_continuous_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedural_continuous_assignments) {
            listener.enterProcedural_continuous_assignments(this);
        }
    };
    // @Override
    Procedural_continuous_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedural_continuous_assignments) {
            listener.exitProcedural_continuous_assignments(this);
        }
    };
    // @Override
    Procedural_continuous_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedural_continuous_assignments) {
            return visitor.visitProcedural_continuous_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Procedural_continuous_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Procedural_continuous_assignmentsContext = Procedural_continuous_assignmentsContext;
var Function_blocking_assignmentContext = /** @class */ (function (_super) {
    __extends(Function_blocking_assignmentContext, _super);
    function Function_blocking_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_blocking_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Function_blocking_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Function_blocking_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_blocking_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_blocking_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_blocking_assignment) {
            listener.enterFunction_blocking_assignment(this);
        }
    };
    // @Override
    Function_blocking_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_blocking_assignment) {
            listener.exitFunction_blocking_assignment(this);
        }
    };
    // @Override
    Function_blocking_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_blocking_assignment) {
            return visitor.visitFunction_blocking_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_blocking_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_blocking_assignmentContext = Function_blocking_assignmentContext;
var Function_statement_or_nullContext = /** @class */ (function (_super) {
    __extends(Function_statement_or_nullContext, _super);
    function Function_statement_or_nullContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_statement_or_nullContext.prototype.function_statement = function () {
        return this.tryGetRuleContext(0, Function_statementContext);
    };
    Function_statement_or_nullContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Function_statement_or_nullContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_statement_or_null; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_statement_or_nullContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_statement_or_null) {
            listener.enterFunction_statement_or_null(this);
        }
    };
    // @Override
    Function_statement_or_nullContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_statement_or_null) {
            listener.exitFunction_statement_or_null(this);
        }
    };
    // @Override
    Function_statement_or_nullContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_statement_or_null) {
            return visitor.visitFunction_statement_or_null(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_statement_or_nullContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_statement_or_nullContext = Function_statement_or_nullContext;
var Function_seq_blockContext = /** @class */ (function (_super) {
    __extends(Function_seq_blockContext, _super);
    function Function_seq_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_seq_blockContext.prototype.block_identifier = function () {
        return this.tryGetRuleContext(0, Block_identifierContext);
    };
    Function_seq_blockContext.prototype.function_statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_statementContext);
        }
        else {
            return this.getRuleContext(i, Function_statementContext);
        }
    };
    Function_seq_blockContext.prototype.block_item_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Block_item_declarationContext);
        }
        else {
            return this.getRuleContext(i, Block_item_declarationContext);
        }
    };
    Object.defineProperty(Function_seq_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_seq_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_seq_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_seq_block) {
            listener.enterFunction_seq_block(this);
        }
    };
    // @Override
    Function_seq_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_seq_block) {
            listener.exitFunction_seq_block(this);
        }
    };
    // @Override
    Function_seq_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_seq_block) {
            return visitor.visitFunction_seq_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_seq_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_seq_blockContext = Function_seq_blockContext;
var Variable_assignmentContext = /** @class */ (function (_super) {
    __extends(Variable_assignmentContext, _super);
    function Variable_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Variable_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Variable_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_variable_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_assignment) {
            listener.enterVariable_assignment(this);
        }
    };
    // @Override
    Variable_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_assignment) {
            listener.exitVariable_assignment(this);
        }
    };
    // @Override
    Variable_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_assignment) {
            return visitor.visitVariable_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_assignmentContext = Variable_assignmentContext;
var Par_blockContext = /** @class */ (function (_super) {
    __extends(Par_blockContext, _super);
    function Par_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Par_blockContext.prototype.block_identifier = function () {
        return this.tryGetRuleContext(0, Block_identifierContext);
    };
    Par_blockContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Par_blockContext.prototype.block_item_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Block_item_declarationContext);
        }
        else {
            return this.getRuleContext(i, Block_item_declarationContext);
        }
    };
    Object.defineProperty(Par_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_par_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Par_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterPar_block) {
            listener.enterPar_block(this);
        }
    };
    // @Override
    Par_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitPar_block) {
            listener.exitPar_block(this);
        }
    };
    // @Override
    Par_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitPar_block) {
            return visitor.visitPar_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Par_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Par_blockContext = Par_blockContext;
var Seq_blockContext = /** @class */ (function (_super) {
    __extends(Seq_blockContext, _super);
    function Seq_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Seq_blockContext.prototype.block_identifier = function () {
        return this.tryGetRuleContext(0, Block_identifierContext);
    };
    Seq_blockContext.prototype.statement = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }
        else {
            return this.getRuleContext(i, StatementContext);
        }
    };
    Seq_blockContext.prototype.block_item_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Block_item_declarationContext);
        }
        else {
            return this.getRuleContext(i, Block_item_declarationContext);
        }
    };
    Object.defineProperty(Seq_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_seq_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Seq_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterSeq_block) {
            listener.enterSeq_block(this);
        }
    };
    // @Override
    Seq_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitSeq_block) {
            listener.exitSeq_block(this);
        }
    };
    // @Override
    Seq_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitSeq_block) {
            return visitor.visitSeq_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Seq_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Seq_blockContext = Seq_blockContext;
var StatementContext = /** @class */ (function (_super) {
    __extends(StatementContext, _super);
    function StatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementContext.prototype.blocking_assignment = function () {
        return this.tryGetRuleContext(0, Blocking_assignmentContext);
    };
    StatementContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    StatementContext.prototype.case_statement = function () {
        return this.tryGetRuleContext(0, Case_statementContext);
    };
    StatementContext.prototype.conditional_statement = function () {
        return this.tryGetRuleContext(0, Conditional_statementContext);
    };
    StatementContext.prototype.disable_statement = function () {
        return this.tryGetRuleContext(0, Disable_statementContext);
    };
    StatementContext.prototype.event_trigger = function () {
        return this.tryGetRuleContext(0, Event_triggerContext);
    };
    StatementContext.prototype.loop_statement = function () {
        return this.tryGetRuleContext(0, Loop_statementContext);
    };
    StatementContext.prototype.nonblocking_assignment = function () {
        return this.tryGetRuleContext(0, Nonblocking_assignmentContext);
    };
    StatementContext.prototype.par_block = function () {
        return this.tryGetRuleContext(0, Par_blockContext);
    };
    StatementContext.prototype.procedural_continuous_assignments = function () {
        return this.tryGetRuleContext(0, Procedural_continuous_assignmentsContext);
    };
    StatementContext.prototype.procedural_timing_control_statement = function () {
        return this.tryGetRuleContext(0, Procedural_timing_control_statementContext);
    };
    StatementContext.prototype.seq_block = function () {
        return this.tryGetRuleContext(0, Seq_blockContext);
    };
    StatementContext.prototype.system_task_enable = function () {
        return this.tryGetRuleContext(0, System_task_enableContext);
    };
    StatementContext.prototype.task_enable = function () {
        return this.tryGetRuleContext(0, Task_enableContext);
    };
    StatementContext.prototype.wait_statement = function () {
        return this.tryGetRuleContext(0, Wait_statementContext);
    };
    Object.defineProperty(StatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementContext = StatementContext;
var Statement_or_nullContext = /** @class */ (function (_super) {
    __extends(Statement_or_nullContext, _super);
    function Statement_or_nullContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Statement_or_nullContext.prototype.statement = function () {
        return this.tryGetRuleContext(0, StatementContext);
    };
    Statement_or_nullContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Statement_or_nullContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_statement_or_null; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Statement_or_nullContext.prototype.enterRule = function (listener) {
        if (listener.enterStatement_or_null) {
            listener.enterStatement_or_null(this);
        }
    };
    // @Override
    Statement_or_nullContext.prototype.exitRule = function (listener) {
        if (listener.exitStatement_or_null) {
            listener.exitStatement_or_null(this);
        }
    };
    // @Override
    Statement_or_nullContext.prototype.accept = function (visitor) {
        if (visitor.visitStatement_or_null) {
            return visitor.visitStatement_or_null(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Statement_or_nullContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Statement_or_nullContext = Statement_or_nullContext;
var Function_statementContext = /** @class */ (function (_super) {
    __extends(Function_statementContext, _super);
    function Function_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_statementContext.prototype.function_blocking_assignment = function () {
        return this.tryGetRuleContext(0, Function_blocking_assignmentContext);
    };
    Function_statementContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Function_statementContext.prototype.function_case_statement = function () {
        return this.tryGetRuleContext(0, Function_case_statementContext);
    };
    Function_statementContext.prototype.function_conditional_statement = function () {
        return this.tryGetRuleContext(0, Function_conditional_statementContext);
    };
    Function_statementContext.prototype.function_loop_statement = function () {
        return this.tryGetRuleContext(0, Function_loop_statementContext);
    };
    Function_statementContext.prototype.function_seq_block = function () {
        return this.tryGetRuleContext(0, Function_seq_blockContext);
    };
    Function_statementContext.prototype.disable_statement = function () {
        return this.tryGetRuleContext(0, Disable_statementContext);
    };
    Function_statementContext.prototype.system_task_enable = function () {
        return this.tryGetRuleContext(0, System_task_enableContext);
    };
    Object.defineProperty(Function_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_statement) {
            listener.enterFunction_statement(this);
        }
    };
    // @Override
    Function_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_statement) {
            listener.exitFunction_statement(this);
        }
    };
    // @Override
    Function_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_statement) {
            return visitor.visitFunction_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_statementContext = Function_statementContext;
var Delay_or_event_controlContext = /** @class */ (function (_super) {
    __extends(Delay_or_event_controlContext, _super);
    function Delay_or_event_controlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay_or_event_controlContext.prototype.delay_control = function () {
        return this.tryGetRuleContext(0, Delay_controlContext);
    };
    Delay_or_event_controlContext.prototype.event_control = function () {
        return this.tryGetRuleContext(0, Event_controlContext);
    };
    Delay_or_event_controlContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Delay_or_event_controlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_delay_or_event_control; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay_or_event_controlContext.prototype.enterRule = function (listener) {
        if (listener.enterDelay_or_event_control) {
            listener.enterDelay_or_event_control(this);
        }
    };
    // @Override
    Delay_or_event_controlContext.prototype.exitRule = function (listener) {
        if (listener.exitDelay_or_event_control) {
            listener.exitDelay_or_event_control(this);
        }
    };
    // @Override
    Delay_or_event_controlContext.prototype.accept = function (visitor) {
        if (visitor.visitDelay_or_event_control) {
            return visitor.visitDelay_or_event_control(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay_or_event_controlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay_or_event_controlContext = Delay_or_event_controlContext;
var Delay_controlContext = /** @class */ (function (_super) {
    __extends(Delay_controlContext, _super);
    function Delay_controlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay_controlContext.prototype.delay_value = function () {
        return this.tryGetRuleContext(0, Delay_valueContext);
    };
    Delay_controlContext.prototype.mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(Delay_controlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_delay_control; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay_controlContext.prototype.enterRule = function (listener) {
        if (listener.enterDelay_control) {
            listener.enterDelay_control(this);
        }
    };
    // @Override
    Delay_controlContext.prototype.exitRule = function (listener) {
        if (listener.exitDelay_control) {
            listener.exitDelay_control(this);
        }
    };
    // @Override
    Delay_controlContext.prototype.accept = function (visitor) {
        if (visitor.visitDelay_control) {
            return visitor.visitDelay_control(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay_controlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay_controlContext = Delay_controlContext;
var Disable_statementContext = /** @class */ (function (_super) {
    __extends(Disable_statementContext, _super);
    function Disable_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Disable_statementContext.prototype.hierarchical_task_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_task_identifierContext);
    };
    Disable_statementContext.prototype.hierarchical_block_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_block_identifierContext);
    };
    Object.defineProperty(Disable_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_disable_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Disable_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterDisable_statement) {
            listener.enterDisable_statement(this);
        }
    };
    // @Override
    Disable_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitDisable_statement) {
            listener.exitDisable_statement(this);
        }
    };
    // @Override
    Disable_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitDisable_statement) {
            return visitor.visitDisable_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Disable_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Disable_statementContext = Disable_statementContext;
var Event_controlContext = /** @class */ (function (_super) {
    __extends(Event_controlContext, _super);
    function Event_controlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_controlContext.prototype.event_identifier = function () {
        return this.tryGetRuleContext(0, Event_identifierContext);
    };
    Event_controlContext.prototype.event_expression = function () {
        return this.tryGetRuleContext(0, Event_expressionContext);
    };
    Object.defineProperty(Event_controlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_event_control; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_controlContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_control) {
            listener.enterEvent_control(this);
        }
    };
    // @Override
    Event_controlContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_control) {
            listener.exitEvent_control(this);
        }
    };
    // @Override
    Event_controlContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_control) {
            return visitor.visitEvent_control(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_controlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_controlContext = Event_controlContext;
var Event_triggerContext = /** @class */ (function (_super) {
    __extends(Event_triggerContext, _super);
    function Event_triggerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_triggerContext.prototype.hierarchical_event_identifier = function () {
        return this.getRuleContext(0, Hierarchical_event_identifierContext);
    };
    Object.defineProperty(Event_triggerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_event_trigger; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_triggerContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_trigger) {
            listener.enterEvent_trigger(this);
        }
    };
    // @Override
    Event_triggerContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_trigger) {
            listener.exitEvent_trigger(this);
        }
    };
    // @Override
    Event_triggerContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_trigger) {
            return visitor.visitEvent_trigger(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_triggerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_triggerContext = Event_triggerContext;
var Event_expressionContext = /** @class */ (function (_super) {
    __extends(Event_expressionContext, _super);
    function Event_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_expressionContext.prototype.event_primary = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Event_primaryContext);
        }
        else {
            return this.getRuleContext(i, Event_primaryContext);
        }
    };
    Object.defineProperty(Event_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_event_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_expression) {
            listener.enterEvent_expression(this);
        }
    };
    // @Override
    Event_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_expression) {
            listener.exitEvent_expression(this);
        }
    };
    // @Override
    Event_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_expression) {
            return visitor.visitEvent_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_expressionContext = Event_expressionContext;
var Event_primaryContext = /** @class */ (function (_super) {
    __extends(Event_primaryContext, _super);
    function Event_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_primaryContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Event_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_event_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_primary) {
            listener.enterEvent_primary(this);
        }
    };
    // @Override
    Event_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_primary) {
            listener.exitEvent_primary(this);
        }
    };
    // @Override
    Event_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_primary) {
            return visitor.visitEvent_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_primaryContext = Event_primaryContext;
var Procedural_timing_control_statementContext = /** @class */ (function (_super) {
    __extends(Procedural_timing_control_statementContext, _super);
    function Procedural_timing_control_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Procedural_timing_control_statementContext.prototype.delay_or_event_control = function () {
        return this.getRuleContext(0, Delay_or_event_controlContext);
    };
    Procedural_timing_control_statementContext.prototype.statement_or_null = function () {
        return this.getRuleContext(0, Statement_or_nullContext);
    };
    Object.defineProperty(Procedural_timing_control_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_procedural_timing_control_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Procedural_timing_control_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedural_timing_control_statement) {
            listener.enterProcedural_timing_control_statement(this);
        }
    };
    // @Override
    Procedural_timing_control_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedural_timing_control_statement) {
            listener.exitProcedural_timing_control_statement(this);
        }
    };
    // @Override
    Procedural_timing_control_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedural_timing_control_statement) {
            return visitor.visitProcedural_timing_control_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Procedural_timing_control_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Procedural_timing_control_statementContext = Procedural_timing_control_statementContext;
var Wait_statementContext = /** @class */ (function (_super) {
    __extends(Wait_statementContext, _super);
    function Wait_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Wait_statementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Wait_statementContext.prototype.statement_or_null = function () {
        return this.getRuleContext(0, Statement_or_nullContext);
    };
    Object.defineProperty(Wait_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_wait_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Wait_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterWait_statement) {
            listener.enterWait_statement(this);
        }
    };
    // @Override
    Wait_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitWait_statement) {
            listener.exitWait_statement(this);
        }
    };
    // @Override
    Wait_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitWait_statement) {
            return visitor.visitWait_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Wait_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Wait_statementContext = Wait_statementContext;
var Conditional_statementContext = /** @class */ (function (_super) {
    __extends(Conditional_statementContext, _super);
    function Conditional_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Conditional_statementContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Conditional_statementContext.prototype.statement_or_null = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Statement_or_nullContext);
        }
        else {
            return this.getRuleContext(i, Statement_or_nullContext);
        }
    };
    Conditional_statementContext.prototype.if_else_if_statement = function () {
        return this.tryGetRuleContext(0, If_else_if_statementContext);
    };
    Object.defineProperty(Conditional_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_conditional_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Conditional_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterConditional_statement) {
            listener.enterConditional_statement(this);
        }
    };
    // @Override
    Conditional_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitConditional_statement) {
            listener.exitConditional_statement(this);
        }
    };
    // @Override
    Conditional_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitConditional_statement) {
            return visitor.visitConditional_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Conditional_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Conditional_statementContext = Conditional_statementContext;
var If_else_if_statementContext = /** @class */ (function (_super) {
    __extends(If_else_if_statementContext, _super);
    function If_else_if_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    If_else_if_statementContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    If_else_if_statementContext.prototype.statement_or_null = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Statement_or_nullContext);
        }
        else {
            return this.getRuleContext(i, Statement_or_nullContext);
        }
    };
    Object.defineProperty(If_else_if_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_if_else_if_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    If_else_if_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterIf_else_if_statement) {
            listener.enterIf_else_if_statement(this);
        }
    };
    // @Override
    If_else_if_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitIf_else_if_statement) {
            listener.exitIf_else_if_statement(this);
        }
    };
    // @Override
    If_else_if_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitIf_else_if_statement) {
            return visitor.visitIf_else_if_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return If_else_if_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.If_else_if_statementContext = If_else_if_statementContext;
var Function_conditional_statementContext = /** @class */ (function (_super) {
    __extends(Function_conditional_statementContext, _super);
    function Function_conditional_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_conditional_statementContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Function_conditional_statementContext.prototype.function_statement_or_null = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_statement_or_nullContext);
        }
        else {
            return this.getRuleContext(i, Function_statement_or_nullContext);
        }
    };
    Function_conditional_statementContext.prototype.function_if_else_if_statement = function () {
        return this.tryGetRuleContext(0, Function_if_else_if_statementContext);
    };
    Object.defineProperty(Function_conditional_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_conditional_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_conditional_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_conditional_statement) {
            listener.enterFunction_conditional_statement(this);
        }
    };
    // @Override
    Function_conditional_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_conditional_statement) {
            listener.exitFunction_conditional_statement(this);
        }
    };
    // @Override
    Function_conditional_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_conditional_statement) {
            return visitor.visitFunction_conditional_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_conditional_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_conditional_statementContext = Function_conditional_statementContext;
var Function_if_else_if_statementContext = /** @class */ (function (_super) {
    __extends(Function_if_else_if_statementContext, _super);
    function Function_if_else_if_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_if_else_if_statementContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Function_if_else_if_statementContext.prototype.function_statement_or_null = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_statement_or_nullContext);
        }
        else {
            return this.getRuleContext(i, Function_statement_or_nullContext);
        }
    };
    Object.defineProperty(Function_if_else_if_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_if_else_if_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_if_else_if_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_if_else_if_statement) {
            listener.enterFunction_if_else_if_statement(this);
        }
    };
    // @Override
    Function_if_else_if_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_if_else_if_statement) {
            listener.exitFunction_if_else_if_statement(this);
        }
    };
    // @Override
    Function_if_else_if_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_if_else_if_statement) {
            return visitor.visitFunction_if_else_if_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_if_else_if_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_if_else_if_statementContext = Function_if_else_if_statementContext;
var Case_statementContext = /** @class */ (function (_super) {
    __extends(Case_statementContext, _super);
    function Case_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_statementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Case_statementContext.prototype.case_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Case_itemContext);
        }
        else {
            return this.getRuleContext(i, Case_itemContext);
        }
    };
    Object.defineProperty(Case_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_case_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_statement) {
            listener.enterCase_statement(this);
        }
    };
    // @Override
    Case_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_statement) {
            listener.exitCase_statement(this);
        }
    };
    // @Override
    Case_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_statement) {
            return visitor.visitCase_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_statementContext = Case_statementContext;
var Case_itemContext = /** @class */ (function (_super) {
    __extends(Case_itemContext, _super);
    function Case_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_itemContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Case_itemContext.prototype.statement_or_null = function () {
        return this.getRuleContext(0, Statement_or_nullContext);
    };
    Object.defineProperty(Case_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_case_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_item) {
            listener.enterCase_item(this);
        }
    };
    // @Override
    Case_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_item) {
            listener.exitCase_item(this);
        }
    };
    // @Override
    Case_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_item) {
            return visitor.visitCase_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_itemContext = Case_itemContext;
var Function_case_statementContext = /** @class */ (function (_super) {
    __extends(Function_case_statementContext, _super);
    function Function_case_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_case_statementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Function_case_statementContext.prototype.function_case_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_case_itemContext);
        }
        else {
            return this.getRuleContext(i, Function_case_itemContext);
        }
    };
    Object.defineProperty(Function_case_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_case_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_case_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_case_statement) {
            listener.enterFunction_case_statement(this);
        }
    };
    // @Override
    Function_case_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_case_statement) {
            listener.exitFunction_case_statement(this);
        }
    };
    // @Override
    Function_case_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_case_statement) {
            return visitor.visitFunction_case_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_case_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_case_statementContext = Function_case_statementContext;
var Function_case_itemContext = /** @class */ (function (_super) {
    __extends(Function_case_itemContext, _super);
    function Function_case_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_case_itemContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Function_case_itemContext.prototype.function_statement_or_null = function () {
        return this.getRuleContext(0, Function_statement_or_nullContext);
    };
    Object.defineProperty(Function_case_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_case_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_case_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_case_item) {
            listener.enterFunction_case_item(this);
        }
    };
    // @Override
    Function_case_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_case_item) {
            listener.exitFunction_case_item(this);
        }
    };
    // @Override
    Function_case_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_case_item) {
            return visitor.visitFunction_case_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_case_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_case_itemContext = Function_case_itemContext;
var Function_loop_statementContext = /** @class */ (function (_super) {
    __extends(Function_loop_statementContext, _super);
    function Function_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_loop_statementContext.prototype.function_statement = function () {
        return this.getRuleContext(0, Function_statementContext);
    };
    Function_loop_statementContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Function_loop_statementContext.prototype.variable_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Variable_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Variable_assignmentContext);
        }
    };
    Object.defineProperty(Function_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_loop_statement) {
            listener.enterFunction_loop_statement(this);
        }
    };
    // @Override
    Function_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_loop_statement) {
            listener.exitFunction_loop_statement(this);
        }
    };
    // @Override
    Function_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_loop_statement) {
            return visitor.visitFunction_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_loop_statementContext = Function_loop_statementContext;
var Loop_statementContext = /** @class */ (function (_super) {
    __extends(Loop_statementContext, _super);
    function Loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Loop_statementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Loop_statementContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Loop_statementContext.prototype.variable_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Variable_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Variable_assignmentContext);
        }
    };
    Object.defineProperty(Loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterLoop_statement) {
            listener.enterLoop_statement(this);
        }
    };
    // @Override
    Loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitLoop_statement) {
            listener.exitLoop_statement(this);
        }
    };
    // @Override
    Loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitLoop_statement) {
            return visitor.visitLoop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Loop_statementContext = Loop_statementContext;
var System_task_enableContext = /** @class */ (function (_super) {
    __extends(System_task_enableContext, _super);
    function System_task_enableContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_task_enableContext.prototype.system_task_identifier = function () {
        return this.getRuleContext(0, System_task_identifierContext);
    };
    System_task_enableContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(System_task_enableContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_system_task_enable; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_task_enableContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_task_enable) {
            listener.enterSystem_task_enable(this);
        }
    };
    // @Override
    System_task_enableContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_task_enable) {
            listener.exitSystem_task_enable(this);
        }
    };
    // @Override
    System_task_enableContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_task_enable) {
            return visitor.visitSystem_task_enable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_task_enableContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_task_enableContext = System_task_enableContext;
var Task_enableContext = /** @class */ (function (_super) {
    __extends(Task_enableContext, _super);
    function Task_enableContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_enableContext.prototype.hierarchical_task_identifier = function () {
        return this.getRuleContext(0, Hierarchical_task_identifierContext);
    };
    Task_enableContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(Task_enableContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_task_enable; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_enableContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_enable) {
            listener.enterTask_enable(this);
        }
    };
    // @Override
    Task_enableContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_enable) {
            listener.exitTask_enable(this);
        }
    };
    // @Override
    Task_enableContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_enable) {
            return visitor.visitTask_enable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_enableContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_enableContext = Task_enableContext;
var Specify_blockContext = /** @class */ (function (_super) {
    __extends(Specify_blockContext, _super);
    function Specify_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Specify_blockContext.prototype.specify_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Specify_itemContext);
        }
        else {
            return this.getRuleContext(i, Specify_itemContext);
        }
    };
    Object.defineProperty(Specify_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_specify_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Specify_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecify_block) {
            listener.enterSpecify_block(this);
        }
    };
    // @Override
    Specify_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecify_block) {
            listener.exitSpecify_block(this);
        }
    };
    // @Override
    Specify_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecify_block) {
            return visitor.visitSpecify_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Specify_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Specify_blockContext = Specify_blockContext;
var Specify_itemContext = /** @class */ (function (_super) {
    __extends(Specify_itemContext, _super);
    function Specify_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Specify_itemContext.prototype.specparam_declaration = function () {
        return this.tryGetRuleContext(0, Specparam_declarationContext);
    };
    Specify_itemContext.prototype.pulsestyle_declaration = function () {
        return this.tryGetRuleContext(0, Pulsestyle_declarationContext);
    };
    Specify_itemContext.prototype.showcancelled_declaration = function () {
        return this.tryGetRuleContext(0, Showcancelled_declarationContext);
    };
    Specify_itemContext.prototype.path_declaration = function () {
        return this.tryGetRuleContext(0, Path_declarationContext);
    };
    Object.defineProperty(Specify_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_specify_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Specify_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecify_item) {
            listener.enterSpecify_item(this);
        }
    };
    // @Override
    Specify_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecify_item) {
            listener.exitSpecify_item(this);
        }
    };
    // @Override
    Specify_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecify_item) {
            return visitor.visitSpecify_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Specify_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Specify_itemContext = Specify_itemContext;
var Pulsestyle_declarationContext = /** @class */ (function (_super) {
    __extends(Pulsestyle_declarationContext, _super);
    function Pulsestyle_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pulsestyle_declarationContext.prototype.list_of_path_outputs = function () {
        return this.getRuleContext(0, List_of_path_outputsContext);
    };
    Object.defineProperty(Pulsestyle_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_pulsestyle_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pulsestyle_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterPulsestyle_declaration) {
            listener.enterPulsestyle_declaration(this);
        }
    };
    // @Override
    Pulsestyle_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitPulsestyle_declaration) {
            listener.exitPulsestyle_declaration(this);
        }
    };
    // @Override
    Pulsestyle_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitPulsestyle_declaration) {
            return visitor.visitPulsestyle_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pulsestyle_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pulsestyle_declarationContext = Pulsestyle_declarationContext;
var Showcancelled_declarationContext = /** @class */ (function (_super) {
    __extends(Showcancelled_declarationContext, _super);
    function Showcancelled_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Showcancelled_declarationContext.prototype.list_of_path_outputs = function () {
        return this.getRuleContext(0, List_of_path_outputsContext);
    };
    Object.defineProperty(Showcancelled_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_showcancelled_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Showcancelled_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterShowcancelled_declaration) {
            listener.enterShowcancelled_declaration(this);
        }
    };
    // @Override
    Showcancelled_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitShowcancelled_declaration) {
            listener.exitShowcancelled_declaration(this);
        }
    };
    // @Override
    Showcancelled_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitShowcancelled_declaration) {
            return visitor.visitShowcancelled_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Showcancelled_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Showcancelled_declarationContext = Showcancelled_declarationContext;
var Path_declarationContext = /** @class */ (function (_super) {
    __extends(Path_declarationContext, _super);
    function Path_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Path_declarationContext.prototype.simple_path_declaration = function () {
        return this.tryGetRuleContext(0, Simple_path_declarationContext);
    };
    Path_declarationContext.prototype.edge_sensitive_path_declaration = function () {
        return this.tryGetRuleContext(0, Edge_sensitive_path_declarationContext);
    };
    Path_declarationContext.prototype.state_dependent_path_declaration = function () {
        return this.tryGetRuleContext(0, State_dependent_path_declarationContext);
    };
    Object.defineProperty(Path_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_path_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Path_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterPath_declaration) {
            listener.enterPath_declaration(this);
        }
    };
    // @Override
    Path_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitPath_declaration) {
            listener.exitPath_declaration(this);
        }
    };
    // @Override
    Path_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitPath_declaration) {
            return visitor.visitPath_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Path_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Path_declarationContext = Path_declarationContext;
var Simple_path_declarationContext = /** @class */ (function (_super) {
    __extends(Simple_path_declarationContext, _super);
    function Simple_path_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Simple_path_declarationContext.prototype.parallel_path_description = function () {
        return this.tryGetRuleContext(0, Parallel_path_descriptionContext);
    };
    Simple_path_declarationContext.prototype.path_delay_value = function () {
        return this.getRuleContext(0, Path_delay_valueContext);
    };
    Simple_path_declarationContext.prototype.full_path_description = function () {
        return this.tryGetRuleContext(0, Full_path_descriptionContext);
    };
    Object.defineProperty(Simple_path_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_simple_path_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Simple_path_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterSimple_path_declaration) {
            listener.enterSimple_path_declaration(this);
        }
    };
    // @Override
    Simple_path_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitSimple_path_declaration) {
            listener.exitSimple_path_declaration(this);
        }
    };
    // @Override
    Simple_path_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitSimple_path_declaration) {
            return visitor.visitSimple_path_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Simple_path_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Simple_path_declarationContext = Simple_path_declarationContext;
var Parallel_path_descriptionContext = /** @class */ (function (_super) {
    __extends(Parallel_path_descriptionContext, _super);
    function Parallel_path_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parallel_path_descriptionContext.prototype.specify_input_terminal_descriptor = function () {
        return this.tryGetRuleContext(0, Specify_input_terminal_descriptorContext);
    };
    Parallel_path_descriptionContext.prototype.specify_output_terminal_descriptor = function () {
        return this.tryGetRuleContext(0, Specify_output_terminal_descriptorContext);
    };
    Parallel_path_descriptionContext.prototype.polarity_operator = function () {
        return this.tryGetRuleContext(0, Polarity_operatorContext);
    };
    Object.defineProperty(Parallel_path_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_parallel_path_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parallel_path_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterParallel_path_description) {
            listener.enterParallel_path_description(this);
        }
    };
    // @Override
    Parallel_path_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitParallel_path_description) {
            listener.exitParallel_path_description(this);
        }
    };
    // @Override
    Parallel_path_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitParallel_path_description) {
            return visitor.visitParallel_path_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parallel_path_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parallel_path_descriptionContext = Parallel_path_descriptionContext;
var Full_path_descriptionContext = /** @class */ (function (_super) {
    __extends(Full_path_descriptionContext, _super);
    function Full_path_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Full_path_descriptionContext.prototype.list_of_path_inputs = function () {
        return this.getRuleContext(0, List_of_path_inputsContext);
    };
    Full_path_descriptionContext.prototype.list_of_path_outputs = function () {
        return this.getRuleContext(0, List_of_path_outputsContext);
    };
    Full_path_descriptionContext.prototype.polarity_operator = function () {
        return this.tryGetRuleContext(0, Polarity_operatorContext);
    };
    Object.defineProperty(Full_path_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_full_path_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Full_path_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterFull_path_description) {
            listener.enterFull_path_description(this);
        }
    };
    // @Override
    Full_path_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitFull_path_description) {
            listener.exitFull_path_description(this);
        }
    };
    // @Override
    Full_path_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitFull_path_description) {
            return visitor.visitFull_path_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Full_path_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Full_path_descriptionContext = Full_path_descriptionContext;
var List_of_path_inputsContext = /** @class */ (function (_super) {
    __extends(List_of_path_inputsContext, _super);
    function List_of_path_inputsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_path_inputsContext.prototype.specify_input_terminal_descriptor = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Specify_input_terminal_descriptorContext);
        }
        else {
            return this.getRuleContext(i, Specify_input_terminal_descriptorContext);
        }
    };
    Object.defineProperty(List_of_path_inputsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_path_inputs; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_path_inputsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_path_inputs) {
            listener.enterList_of_path_inputs(this);
        }
    };
    // @Override
    List_of_path_inputsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_path_inputs) {
            listener.exitList_of_path_inputs(this);
        }
    };
    // @Override
    List_of_path_inputsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_path_inputs) {
            return visitor.visitList_of_path_inputs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_path_inputsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_path_inputsContext = List_of_path_inputsContext;
var List_of_path_outputsContext = /** @class */ (function (_super) {
    __extends(List_of_path_outputsContext, _super);
    function List_of_path_outputsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_path_outputsContext.prototype.specify_output_terminal_descriptor = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Specify_output_terminal_descriptorContext);
        }
        else {
            return this.getRuleContext(i, Specify_output_terminal_descriptorContext);
        }
    };
    Object.defineProperty(List_of_path_outputsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_path_outputs; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_path_outputsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_path_outputs) {
            listener.enterList_of_path_outputs(this);
        }
    };
    // @Override
    List_of_path_outputsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_path_outputs) {
            listener.exitList_of_path_outputs(this);
        }
    };
    // @Override
    List_of_path_outputsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_path_outputs) {
            return visitor.visitList_of_path_outputs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_path_outputsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_path_outputsContext = List_of_path_outputsContext;
var Specify_input_terminal_descriptorContext = /** @class */ (function (_super) {
    __extends(Specify_input_terminal_descriptorContext, _super);
    function Specify_input_terminal_descriptorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Specify_input_terminal_descriptorContext.prototype.input_identifier = function () {
        return this.getRuleContext(0, Input_identifierContext);
    };
    Specify_input_terminal_descriptorContext.prototype.constant_expression = function () {
        return this.tryGetRuleContext(0, Constant_expressionContext);
    };
    Specify_input_terminal_descriptorContext.prototype.range_expression = function () {
        return this.tryGetRuleContext(0, Range_expressionContext);
    };
    Object.defineProperty(Specify_input_terminal_descriptorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_specify_input_terminal_descriptor; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Specify_input_terminal_descriptorContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecify_input_terminal_descriptor) {
            listener.enterSpecify_input_terminal_descriptor(this);
        }
    };
    // @Override
    Specify_input_terminal_descriptorContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecify_input_terminal_descriptor) {
            listener.exitSpecify_input_terminal_descriptor(this);
        }
    };
    // @Override
    Specify_input_terminal_descriptorContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecify_input_terminal_descriptor) {
            return visitor.visitSpecify_input_terminal_descriptor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Specify_input_terminal_descriptorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Specify_input_terminal_descriptorContext = Specify_input_terminal_descriptorContext;
var Specify_output_terminal_descriptorContext = /** @class */ (function (_super) {
    __extends(Specify_output_terminal_descriptorContext, _super);
    function Specify_output_terminal_descriptorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Specify_output_terminal_descriptorContext.prototype.output_identifier = function () {
        return this.getRuleContext(0, Output_identifierContext);
    };
    Specify_output_terminal_descriptorContext.prototype.constant_expression = function () {
        return this.tryGetRuleContext(0, Constant_expressionContext);
    };
    Specify_output_terminal_descriptorContext.prototype.range_expression = function () {
        return this.tryGetRuleContext(0, Range_expressionContext);
    };
    Object.defineProperty(Specify_output_terminal_descriptorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_specify_output_terminal_descriptor; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Specify_output_terminal_descriptorContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecify_output_terminal_descriptor) {
            listener.enterSpecify_output_terminal_descriptor(this);
        }
    };
    // @Override
    Specify_output_terminal_descriptorContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecify_output_terminal_descriptor) {
            listener.exitSpecify_output_terminal_descriptor(this);
        }
    };
    // @Override
    Specify_output_terminal_descriptorContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecify_output_terminal_descriptor) {
            return visitor.visitSpecify_output_terminal_descriptor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Specify_output_terminal_descriptorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Specify_output_terminal_descriptorContext = Specify_output_terminal_descriptorContext;
var Input_identifierContext = /** @class */ (function (_super) {
    __extends(Input_identifierContext, _super);
    function Input_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Input_identifierContext.prototype.input_port_identifier = function () {
        return this.tryGetRuleContext(0, Input_port_identifierContext);
    };
    Input_identifierContext.prototype.inout_port_identifier = function () {
        return this.tryGetRuleContext(0, Inout_port_identifierContext);
    };
    Object.defineProperty(Input_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_input_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Input_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterInput_identifier) {
            listener.enterInput_identifier(this);
        }
    };
    // @Override
    Input_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitInput_identifier) {
            listener.exitInput_identifier(this);
        }
    };
    // @Override
    Input_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitInput_identifier) {
            return visitor.visitInput_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Input_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Input_identifierContext = Input_identifierContext;
var Output_identifierContext = /** @class */ (function (_super) {
    __extends(Output_identifierContext, _super);
    function Output_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Output_identifierContext.prototype.output_port_identifier = function () {
        return this.tryGetRuleContext(0, Output_port_identifierContext);
    };
    Output_identifierContext.prototype.inout_port_identifier = function () {
        return this.tryGetRuleContext(0, Inout_port_identifierContext);
    };
    Object.defineProperty(Output_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_output_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_identifier) {
            listener.enterOutput_identifier(this);
        }
    };
    // @Override
    Output_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_identifier) {
            listener.exitOutput_identifier(this);
        }
    };
    // @Override
    Output_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_identifier) {
            return visitor.visitOutput_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_identifierContext = Output_identifierContext;
var Path_delay_valueContext = /** @class */ (function (_super) {
    __extends(Path_delay_valueContext, _super);
    function Path_delay_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Path_delay_valueContext.prototype.list_of_path_delay_expressions = function () {
        return this.getRuleContext(0, List_of_path_delay_expressionsContext);
    };
    Object.defineProperty(Path_delay_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_path_delay_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Path_delay_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterPath_delay_value) {
            listener.enterPath_delay_value(this);
        }
    };
    // @Override
    Path_delay_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitPath_delay_value) {
            listener.exitPath_delay_value(this);
        }
    };
    // @Override
    Path_delay_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitPath_delay_value) {
            return visitor.visitPath_delay_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Path_delay_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Path_delay_valueContext = Path_delay_valueContext;
var List_of_path_delay_expressionsContext = /** @class */ (function (_super) {
    __extends(List_of_path_delay_expressionsContext, _super);
    function List_of_path_delay_expressionsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_path_delay_expressionsContext.prototype.t_path_delay_expression = function () {
        return this.tryGetRuleContext(0, T_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.trise_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Trise_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.tfall_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Tfall_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.tz_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Tz_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.t01_path_delay_expression = function () {
        return this.tryGetRuleContext(0, T01_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.t10_path_delay_expression = function () {
        return this.tryGetRuleContext(0, T10_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.t0z_path_delay_expression = function () {
        return this.tryGetRuleContext(0, T0z_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.tz1_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Tz1_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.t1z_path_delay_expression = function () {
        return this.tryGetRuleContext(0, T1z_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.tz0_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Tz0_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.t0x_path_delay_expression = function () {
        return this.tryGetRuleContext(0, T0x_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.tx1_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Tx1_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.t1x_path_delay_expression = function () {
        return this.tryGetRuleContext(0, T1x_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.tx0_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Tx0_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.txz_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Txz_path_delay_expressionContext);
    };
    List_of_path_delay_expressionsContext.prototype.tzx_path_delay_expression = function () {
        return this.tryGetRuleContext(0, Tzx_path_delay_expressionContext);
    };
    Object.defineProperty(List_of_path_delay_expressionsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_list_of_path_delay_expressions; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_path_delay_expressionsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_path_delay_expressions) {
            listener.enterList_of_path_delay_expressions(this);
        }
    };
    // @Override
    List_of_path_delay_expressionsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_path_delay_expressions) {
            listener.exitList_of_path_delay_expressions(this);
        }
    };
    // @Override
    List_of_path_delay_expressionsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_path_delay_expressions) {
            return visitor.visitList_of_path_delay_expressions(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_path_delay_expressionsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_path_delay_expressionsContext = List_of_path_delay_expressionsContext;
var T_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(T_path_delay_expressionContext, _super);
    function T_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    T_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(T_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_t_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    T_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterT_path_delay_expression) {
            listener.enterT_path_delay_expression(this);
        }
    };
    // @Override
    T_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitT_path_delay_expression) {
            listener.exitT_path_delay_expression(this);
        }
    };
    // @Override
    T_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitT_path_delay_expression) {
            return visitor.visitT_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return T_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.T_path_delay_expressionContext = T_path_delay_expressionContext;
var Trise_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Trise_path_delay_expressionContext, _super);
    function Trise_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Trise_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Trise_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_trise_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Trise_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTrise_path_delay_expression) {
            listener.enterTrise_path_delay_expression(this);
        }
    };
    // @Override
    Trise_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTrise_path_delay_expression) {
            listener.exitTrise_path_delay_expression(this);
        }
    };
    // @Override
    Trise_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTrise_path_delay_expression) {
            return visitor.visitTrise_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Trise_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Trise_path_delay_expressionContext = Trise_path_delay_expressionContext;
var Tfall_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Tfall_path_delay_expressionContext, _super);
    function Tfall_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tfall_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Tfall_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tfall_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tfall_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTfall_path_delay_expression) {
            listener.enterTfall_path_delay_expression(this);
        }
    };
    // @Override
    Tfall_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTfall_path_delay_expression) {
            listener.exitTfall_path_delay_expression(this);
        }
    };
    // @Override
    Tfall_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTfall_path_delay_expression) {
            return visitor.visitTfall_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tfall_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tfall_path_delay_expressionContext = Tfall_path_delay_expressionContext;
var Tz_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Tz_path_delay_expressionContext, _super);
    function Tz_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tz_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Tz_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tz_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tz_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTz_path_delay_expression) {
            listener.enterTz_path_delay_expression(this);
        }
    };
    // @Override
    Tz_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTz_path_delay_expression) {
            listener.exitTz_path_delay_expression(this);
        }
    };
    // @Override
    Tz_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTz_path_delay_expression) {
            return visitor.visitTz_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tz_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tz_path_delay_expressionContext = Tz_path_delay_expressionContext;
var T01_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(T01_path_delay_expressionContext, _super);
    function T01_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    T01_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(T01_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_t01_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    T01_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterT01_path_delay_expression) {
            listener.enterT01_path_delay_expression(this);
        }
    };
    // @Override
    T01_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitT01_path_delay_expression) {
            listener.exitT01_path_delay_expression(this);
        }
    };
    // @Override
    T01_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitT01_path_delay_expression) {
            return visitor.visitT01_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return T01_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.T01_path_delay_expressionContext = T01_path_delay_expressionContext;
var T10_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(T10_path_delay_expressionContext, _super);
    function T10_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    T10_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(T10_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_t10_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    T10_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterT10_path_delay_expression) {
            listener.enterT10_path_delay_expression(this);
        }
    };
    // @Override
    T10_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitT10_path_delay_expression) {
            listener.exitT10_path_delay_expression(this);
        }
    };
    // @Override
    T10_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitT10_path_delay_expression) {
            return visitor.visitT10_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return T10_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.T10_path_delay_expressionContext = T10_path_delay_expressionContext;
var T0z_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(T0z_path_delay_expressionContext, _super);
    function T0z_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    T0z_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(T0z_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_t0z_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    T0z_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterT0z_path_delay_expression) {
            listener.enterT0z_path_delay_expression(this);
        }
    };
    // @Override
    T0z_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitT0z_path_delay_expression) {
            listener.exitT0z_path_delay_expression(this);
        }
    };
    // @Override
    T0z_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitT0z_path_delay_expression) {
            return visitor.visitT0z_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return T0z_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.T0z_path_delay_expressionContext = T0z_path_delay_expressionContext;
var Tz1_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Tz1_path_delay_expressionContext, _super);
    function Tz1_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tz1_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Tz1_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tz1_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tz1_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTz1_path_delay_expression) {
            listener.enterTz1_path_delay_expression(this);
        }
    };
    // @Override
    Tz1_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTz1_path_delay_expression) {
            listener.exitTz1_path_delay_expression(this);
        }
    };
    // @Override
    Tz1_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTz1_path_delay_expression) {
            return visitor.visitTz1_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tz1_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tz1_path_delay_expressionContext = Tz1_path_delay_expressionContext;
var T1z_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(T1z_path_delay_expressionContext, _super);
    function T1z_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    T1z_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(T1z_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_t1z_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    T1z_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterT1z_path_delay_expression) {
            listener.enterT1z_path_delay_expression(this);
        }
    };
    // @Override
    T1z_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitT1z_path_delay_expression) {
            listener.exitT1z_path_delay_expression(this);
        }
    };
    // @Override
    T1z_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitT1z_path_delay_expression) {
            return visitor.visitT1z_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return T1z_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.T1z_path_delay_expressionContext = T1z_path_delay_expressionContext;
var Tz0_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Tz0_path_delay_expressionContext, _super);
    function Tz0_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tz0_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Tz0_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tz0_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tz0_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTz0_path_delay_expression) {
            listener.enterTz0_path_delay_expression(this);
        }
    };
    // @Override
    Tz0_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTz0_path_delay_expression) {
            listener.exitTz0_path_delay_expression(this);
        }
    };
    // @Override
    Tz0_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTz0_path_delay_expression) {
            return visitor.visitTz0_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tz0_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tz0_path_delay_expressionContext = Tz0_path_delay_expressionContext;
var T0x_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(T0x_path_delay_expressionContext, _super);
    function T0x_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    T0x_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(T0x_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_t0x_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    T0x_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterT0x_path_delay_expression) {
            listener.enterT0x_path_delay_expression(this);
        }
    };
    // @Override
    T0x_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitT0x_path_delay_expression) {
            listener.exitT0x_path_delay_expression(this);
        }
    };
    // @Override
    T0x_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitT0x_path_delay_expression) {
            return visitor.visitT0x_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return T0x_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.T0x_path_delay_expressionContext = T0x_path_delay_expressionContext;
var Tx1_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Tx1_path_delay_expressionContext, _super);
    function Tx1_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tx1_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Tx1_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tx1_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tx1_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTx1_path_delay_expression) {
            listener.enterTx1_path_delay_expression(this);
        }
    };
    // @Override
    Tx1_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTx1_path_delay_expression) {
            listener.exitTx1_path_delay_expression(this);
        }
    };
    // @Override
    Tx1_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTx1_path_delay_expression) {
            return visitor.visitTx1_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tx1_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tx1_path_delay_expressionContext = Tx1_path_delay_expressionContext;
var T1x_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(T1x_path_delay_expressionContext, _super);
    function T1x_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    T1x_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(T1x_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_t1x_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    T1x_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterT1x_path_delay_expression) {
            listener.enterT1x_path_delay_expression(this);
        }
    };
    // @Override
    T1x_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitT1x_path_delay_expression) {
            listener.exitT1x_path_delay_expression(this);
        }
    };
    // @Override
    T1x_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitT1x_path_delay_expression) {
            return visitor.visitT1x_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return T1x_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.T1x_path_delay_expressionContext = T1x_path_delay_expressionContext;
var Tx0_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Tx0_path_delay_expressionContext, _super);
    function Tx0_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tx0_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Tx0_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tx0_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tx0_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTx0_path_delay_expression) {
            listener.enterTx0_path_delay_expression(this);
        }
    };
    // @Override
    Tx0_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTx0_path_delay_expression) {
            listener.exitTx0_path_delay_expression(this);
        }
    };
    // @Override
    Tx0_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTx0_path_delay_expression) {
            return visitor.visitTx0_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tx0_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tx0_path_delay_expressionContext = Tx0_path_delay_expressionContext;
var Txz_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Txz_path_delay_expressionContext, _super);
    function Txz_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Txz_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Txz_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_txz_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Txz_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTxz_path_delay_expression) {
            listener.enterTxz_path_delay_expression(this);
        }
    };
    // @Override
    Txz_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTxz_path_delay_expression) {
            listener.exitTxz_path_delay_expression(this);
        }
    };
    // @Override
    Txz_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTxz_path_delay_expression) {
            return visitor.visitTxz_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Txz_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Txz_path_delay_expressionContext = Txz_path_delay_expressionContext;
var Tzx_path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Tzx_path_delay_expressionContext, _super);
    function Tzx_path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tzx_path_delay_expressionContext.prototype.path_delay_expression = function () {
        return this.getRuleContext(0, Path_delay_expressionContext);
    };
    Object.defineProperty(Tzx_path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_tzx_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tzx_path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTzx_path_delay_expression) {
            listener.enterTzx_path_delay_expression(this);
        }
    };
    // @Override
    Tzx_path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTzx_path_delay_expression) {
            listener.exitTzx_path_delay_expression(this);
        }
    };
    // @Override
    Tzx_path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTzx_path_delay_expression) {
            return visitor.visitTzx_path_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tzx_path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tzx_path_delay_expressionContext = Tzx_path_delay_expressionContext;
var Path_delay_expressionContext = /** @class */ (function (_super) {
    __extends(Path_delay_expressionContext, _super);
    function Path_delay_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Path_delay_expressionContext.prototype.constant_mintypmax_expression = function () {
        return this.getRuleContext(0, Constant_mintypmax_expressionContext);
    };
    Object.defineProperty(Path_delay_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_path_delay_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Path_delay_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterPath_delay_expression) {
            listener.enterPath_delay_expression(this);
        }
    };
    // @Override
    Path_delay_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitPath_delay_expression) {
            listener.exitPath_delay_expression(this);
        }
    };
    // @Override
    Path_delay_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitPath_delay_expression) {
            return visitor.visitPath_delay_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Path_delay_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Path_delay_expressionContext = Path_delay_expressionContext;
var Edge_sensitive_path_declarationContext = /** @class */ (function (_super) {
    __extends(Edge_sensitive_path_declarationContext, _super);
    function Edge_sensitive_path_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Edge_sensitive_path_declarationContext.prototype.parallel_edge_sensitive_path_description = function () {
        return this.tryGetRuleContext(0, Parallel_edge_sensitive_path_descriptionContext);
    };
    Edge_sensitive_path_declarationContext.prototype.path_delay_value = function () {
        return this.getRuleContext(0, Path_delay_valueContext);
    };
    Edge_sensitive_path_declarationContext.prototype.full_edge_sensitive_path_description = function () {
        return this.tryGetRuleContext(0, Full_edge_sensitive_path_descriptionContext);
    };
    Object.defineProperty(Edge_sensitive_path_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_edge_sensitive_path_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Edge_sensitive_path_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterEdge_sensitive_path_declaration) {
            listener.enterEdge_sensitive_path_declaration(this);
        }
    };
    // @Override
    Edge_sensitive_path_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitEdge_sensitive_path_declaration) {
            listener.exitEdge_sensitive_path_declaration(this);
        }
    };
    // @Override
    Edge_sensitive_path_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitEdge_sensitive_path_declaration) {
            return visitor.visitEdge_sensitive_path_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Edge_sensitive_path_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Edge_sensitive_path_declarationContext = Edge_sensitive_path_declarationContext;
var Parallel_edge_sensitive_path_descriptionContext = /** @class */ (function (_super) {
    __extends(Parallel_edge_sensitive_path_descriptionContext, _super);
    function Parallel_edge_sensitive_path_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parallel_edge_sensitive_path_descriptionContext.prototype.specify_input_terminal_descriptor = function () {
        return this.getRuleContext(0, Specify_input_terminal_descriptorContext);
    };
    Parallel_edge_sensitive_path_descriptionContext.prototype.specify_output_terminal_descriptor = function () {
        return this.getRuleContext(0, Specify_output_terminal_descriptorContext);
    };
    Parallel_edge_sensitive_path_descriptionContext.prototype.data_source_expression = function () {
        return this.getRuleContext(0, Data_source_expressionContext);
    };
    Parallel_edge_sensitive_path_descriptionContext.prototype.edge_identifier = function () {
        return this.tryGetRuleContext(0, Edge_identifierContext);
    };
    Parallel_edge_sensitive_path_descriptionContext.prototype.polarity_operator = function () {
        return this.tryGetRuleContext(0, Polarity_operatorContext);
    };
    Object.defineProperty(Parallel_edge_sensitive_path_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_parallel_edge_sensitive_path_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parallel_edge_sensitive_path_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterParallel_edge_sensitive_path_description) {
            listener.enterParallel_edge_sensitive_path_description(this);
        }
    };
    // @Override
    Parallel_edge_sensitive_path_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitParallel_edge_sensitive_path_description) {
            listener.exitParallel_edge_sensitive_path_description(this);
        }
    };
    // @Override
    Parallel_edge_sensitive_path_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitParallel_edge_sensitive_path_description) {
            return visitor.visitParallel_edge_sensitive_path_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parallel_edge_sensitive_path_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parallel_edge_sensitive_path_descriptionContext = Parallel_edge_sensitive_path_descriptionContext;
var Full_edge_sensitive_path_descriptionContext = /** @class */ (function (_super) {
    __extends(Full_edge_sensitive_path_descriptionContext, _super);
    function Full_edge_sensitive_path_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Full_edge_sensitive_path_descriptionContext.prototype.list_of_path_inputs = function () {
        return this.getRuleContext(0, List_of_path_inputsContext);
    };
    Full_edge_sensitive_path_descriptionContext.prototype.list_of_path_outputs = function () {
        return this.getRuleContext(0, List_of_path_outputsContext);
    };
    Full_edge_sensitive_path_descriptionContext.prototype.data_source_expression = function () {
        return this.getRuleContext(0, Data_source_expressionContext);
    };
    Full_edge_sensitive_path_descriptionContext.prototype.edge_identifier = function () {
        return this.tryGetRuleContext(0, Edge_identifierContext);
    };
    Full_edge_sensitive_path_descriptionContext.prototype.polarity_operator = function () {
        return this.tryGetRuleContext(0, Polarity_operatorContext);
    };
    Object.defineProperty(Full_edge_sensitive_path_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_full_edge_sensitive_path_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Full_edge_sensitive_path_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterFull_edge_sensitive_path_description) {
            listener.enterFull_edge_sensitive_path_description(this);
        }
    };
    // @Override
    Full_edge_sensitive_path_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitFull_edge_sensitive_path_description) {
            listener.exitFull_edge_sensitive_path_description(this);
        }
    };
    // @Override
    Full_edge_sensitive_path_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitFull_edge_sensitive_path_description) {
            return visitor.visitFull_edge_sensitive_path_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Full_edge_sensitive_path_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Full_edge_sensitive_path_descriptionContext = Full_edge_sensitive_path_descriptionContext;
var Data_source_expressionContext = /** @class */ (function (_super) {
    __extends(Data_source_expressionContext, _super);
    function Data_source_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Data_source_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Data_source_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_data_source_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Data_source_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterData_source_expression) {
            listener.enterData_source_expression(this);
        }
    };
    // @Override
    Data_source_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitData_source_expression) {
            listener.exitData_source_expression(this);
        }
    };
    // @Override
    Data_source_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitData_source_expression) {
            return visitor.visitData_source_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Data_source_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Data_source_expressionContext = Data_source_expressionContext;
var Edge_identifierContext = /** @class */ (function (_super) {
    __extends(Edge_identifierContext, _super);
    function Edge_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Edge_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_edge_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Edge_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEdge_identifier) {
            listener.enterEdge_identifier(this);
        }
    };
    // @Override
    Edge_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEdge_identifier) {
            listener.exitEdge_identifier(this);
        }
    };
    // @Override
    Edge_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEdge_identifier) {
            return visitor.visitEdge_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Edge_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Edge_identifierContext = Edge_identifierContext;
var State_dependent_path_declarationContext = /** @class */ (function (_super) {
    __extends(State_dependent_path_declarationContext, _super);
    function State_dependent_path_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    State_dependent_path_declarationContext.prototype.module_path_expression = function () {
        return this.tryGetRuleContext(0, Module_path_expressionContext);
    };
    State_dependent_path_declarationContext.prototype.simple_path_declaration = function () {
        return this.tryGetRuleContext(0, Simple_path_declarationContext);
    };
    State_dependent_path_declarationContext.prototype.edge_sensitive_path_declaration = function () {
        return this.tryGetRuleContext(0, Edge_sensitive_path_declarationContext);
    };
    Object.defineProperty(State_dependent_path_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_state_dependent_path_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    State_dependent_path_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterState_dependent_path_declaration) {
            listener.enterState_dependent_path_declaration(this);
        }
    };
    // @Override
    State_dependent_path_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitState_dependent_path_declaration) {
            listener.exitState_dependent_path_declaration(this);
        }
    };
    // @Override
    State_dependent_path_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitState_dependent_path_declaration) {
            return visitor.visitState_dependent_path_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return State_dependent_path_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.State_dependent_path_declarationContext = State_dependent_path_declarationContext;
var Polarity_operatorContext = /** @class */ (function (_super) {
    __extends(Polarity_operatorContext, _super);
    function Polarity_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Polarity_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_polarity_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Polarity_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterPolarity_operator) {
            listener.enterPolarity_operator(this);
        }
    };
    // @Override
    Polarity_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitPolarity_operator) {
            listener.exitPolarity_operator(this);
        }
    };
    // @Override
    Polarity_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitPolarity_operator) {
            return visitor.visitPolarity_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Polarity_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Polarity_operatorContext = Polarity_operatorContext;
var Checktime_conditionContext = /** @class */ (function (_super) {
    __extends(Checktime_conditionContext, _super);
    function Checktime_conditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Checktime_conditionContext.prototype.mintypmax_expression = function () {
        return this.getRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(Checktime_conditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_checktime_condition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Checktime_conditionContext.prototype.enterRule = function (listener) {
        if (listener.enterChecktime_condition) {
            listener.enterChecktime_condition(this);
        }
    };
    // @Override
    Checktime_conditionContext.prototype.exitRule = function (listener) {
        if (listener.exitChecktime_condition) {
            listener.exitChecktime_condition(this);
        }
    };
    // @Override
    Checktime_conditionContext.prototype.accept = function (visitor) {
        if (visitor.visitChecktime_condition) {
            return visitor.visitChecktime_condition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Checktime_conditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Checktime_conditionContext = Checktime_conditionContext;
var Delayed_dataContext = /** @class */ (function (_super) {
    __extends(Delayed_dataContext, _super);
    function Delayed_dataContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delayed_dataContext.prototype.terminal_identifier = function () {
        return this.getRuleContext(0, Terminal_identifierContext);
    };
    Delayed_dataContext.prototype.constant_mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
    };
    Object.defineProperty(Delayed_dataContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_delayed_data; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delayed_dataContext.prototype.enterRule = function (listener) {
        if (listener.enterDelayed_data) {
            listener.enterDelayed_data(this);
        }
    };
    // @Override
    Delayed_dataContext.prototype.exitRule = function (listener) {
        if (listener.exitDelayed_data) {
            listener.exitDelayed_data(this);
        }
    };
    // @Override
    Delayed_dataContext.prototype.accept = function (visitor) {
        if (visitor.visitDelayed_data) {
            return visitor.visitDelayed_data(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delayed_dataContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delayed_dataContext = Delayed_dataContext;
var Delayed_referenceContext = /** @class */ (function (_super) {
    __extends(Delayed_referenceContext, _super);
    function Delayed_referenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delayed_referenceContext.prototype.terminal_identifier = function () {
        return this.getRuleContext(0, Terminal_identifierContext);
    };
    Delayed_referenceContext.prototype.constant_mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
    };
    Object.defineProperty(Delayed_referenceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_delayed_reference; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delayed_referenceContext.prototype.enterRule = function (listener) {
        if (listener.enterDelayed_reference) {
            listener.enterDelayed_reference(this);
        }
    };
    // @Override
    Delayed_referenceContext.prototype.exitRule = function (listener) {
        if (listener.exitDelayed_reference) {
            listener.exitDelayed_reference(this);
        }
    };
    // @Override
    Delayed_referenceContext.prototype.accept = function (visitor) {
        if (visitor.visitDelayed_reference) {
            return visitor.visitDelayed_reference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delayed_referenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delayed_referenceContext = Delayed_referenceContext;
var End_edge_offsetContext = /** @class */ (function (_super) {
    __extends(End_edge_offsetContext, _super);
    function End_edge_offsetContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    End_edge_offsetContext.prototype.mintypmax_expression = function () {
        return this.getRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(End_edge_offsetContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_end_edge_offset; },
        enumerable: true,
        configurable: true
    });
    // @Override
    End_edge_offsetContext.prototype.enterRule = function (listener) {
        if (listener.enterEnd_edge_offset) {
            listener.enterEnd_edge_offset(this);
        }
    };
    // @Override
    End_edge_offsetContext.prototype.exitRule = function (listener) {
        if (listener.exitEnd_edge_offset) {
            listener.exitEnd_edge_offset(this);
        }
    };
    // @Override
    End_edge_offsetContext.prototype.accept = function (visitor) {
        if (visitor.visitEnd_edge_offset) {
            return visitor.visitEnd_edge_offset(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return End_edge_offsetContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.End_edge_offsetContext = End_edge_offsetContext;
var Event_based_flagContext = /** @class */ (function (_super) {
    __extends(Event_based_flagContext, _super);
    function Event_based_flagContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_based_flagContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Event_based_flagContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_event_based_flag; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_based_flagContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_based_flag) {
            listener.enterEvent_based_flag(this);
        }
    };
    // @Override
    Event_based_flagContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_based_flag) {
            listener.exitEvent_based_flag(this);
        }
    };
    // @Override
    Event_based_flagContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_based_flag) {
            return visitor.visitEvent_based_flag(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_based_flagContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_based_flagContext = Event_based_flagContext;
var Notify_regContext = /** @class */ (function (_super) {
    __extends(Notify_regContext, _super);
    function Notify_regContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Notify_regContext.prototype.variable_identifier = function () {
        return this.getRuleContext(0, Variable_identifierContext);
    };
    Object.defineProperty(Notify_regContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_notify_reg; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Notify_regContext.prototype.enterRule = function (listener) {
        if (listener.enterNotify_reg) {
            listener.enterNotify_reg(this);
        }
    };
    // @Override
    Notify_regContext.prototype.exitRule = function (listener) {
        if (listener.exitNotify_reg) {
            listener.exitNotify_reg(this);
        }
    };
    // @Override
    Notify_regContext.prototype.accept = function (visitor) {
        if (visitor.visitNotify_reg) {
            return visitor.visitNotify_reg(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Notify_regContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Notify_regContext = Notify_regContext;
var Remain_active_flagContext = /** @class */ (function (_super) {
    __extends(Remain_active_flagContext, _super);
    function Remain_active_flagContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Remain_active_flagContext.prototype.constant_mintypmax_expression = function () {
        return this.getRuleContext(0, Constant_mintypmax_expressionContext);
    };
    Object.defineProperty(Remain_active_flagContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_remain_active_flag; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Remain_active_flagContext.prototype.enterRule = function (listener) {
        if (listener.enterRemain_active_flag) {
            listener.enterRemain_active_flag(this);
        }
    };
    // @Override
    Remain_active_flagContext.prototype.exitRule = function (listener) {
        if (listener.exitRemain_active_flag) {
            listener.exitRemain_active_flag(this);
        }
    };
    // @Override
    Remain_active_flagContext.prototype.accept = function (visitor) {
        if (visitor.visitRemain_active_flag) {
            return visitor.visitRemain_active_flag(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Remain_active_flagContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Remain_active_flagContext = Remain_active_flagContext;
var Stamptime_conditionContext = /** @class */ (function (_super) {
    __extends(Stamptime_conditionContext, _super);
    function Stamptime_conditionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Stamptime_conditionContext.prototype.mintypmax_expression = function () {
        return this.getRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(Stamptime_conditionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_stamptime_condition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Stamptime_conditionContext.prototype.enterRule = function (listener) {
        if (listener.enterStamptime_condition) {
            listener.enterStamptime_condition(this);
        }
    };
    // @Override
    Stamptime_conditionContext.prototype.exitRule = function (listener) {
        if (listener.exitStamptime_condition) {
            listener.exitStamptime_condition(this);
        }
    };
    // @Override
    Stamptime_conditionContext.prototype.accept = function (visitor) {
        if (visitor.visitStamptime_condition) {
            return visitor.visitStamptime_condition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Stamptime_conditionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Stamptime_conditionContext = Stamptime_conditionContext;
var Start_edge_offsetContext = /** @class */ (function (_super) {
    __extends(Start_edge_offsetContext, _super);
    function Start_edge_offsetContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Start_edge_offsetContext.prototype.mintypmax_expression = function () {
        return this.getRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(Start_edge_offsetContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_start_edge_offset; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Start_edge_offsetContext.prototype.enterRule = function (listener) {
        if (listener.enterStart_edge_offset) {
            listener.enterStart_edge_offset(this);
        }
    };
    // @Override
    Start_edge_offsetContext.prototype.exitRule = function (listener) {
        if (listener.exitStart_edge_offset) {
            listener.exitStart_edge_offset(this);
        }
    };
    // @Override
    Start_edge_offsetContext.prototype.accept = function (visitor) {
        if (visitor.visitStart_edge_offset) {
            return visitor.visitStart_edge_offset(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Start_edge_offsetContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Start_edge_offsetContext = Start_edge_offsetContext;
var ThresholdContext = /** @class */ (function (_super) {
    __extends(ThresholdContext, _super);
    function ThresholdContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ThresholdContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(ThresholdContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_threshold; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ThresholdContext.prototype.enterRule = function (listener) {
        if (listener.enterThreshold) {
            listener.enterThreshold(this);
        }
    };
    // @Override
    ThresholdContext.prototype.exitRule = function (listener) {
        if (listener.exitThreshold) {
            listener.exitThreshold(this);
        }
    };
    // @Override
    ThresholdContext.prototype.accept = function (visitor) {
        if (visitor.visitThreshold) {
            return visitor.visitThreshold(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ThresholdContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ThresholdContext = ThresholdContext;
var Timing_check_limitContext = /** @class */ (function (_super) {
    __extends(Timing_check_limitContext, _super);
    function Timing_check_limitContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Timing_check_limitContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Timing_check_limitContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_timing_check_limit; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Timing_check_limitContext.prototype.enterRule = function (listener) {
        if (listener.enterTiming_check_limit) {
            listener.enterTiming_check_limit(this);
        }
    };
    // @Override
    Timing_check_limitContext.prototype.exitRule = function (listener) {
        if (listener.exitTiming_check_limit) {
            listener.exitTiming_check_limit(this);
        }
    };
    // @Override
    Timing_check_limitContext.prototype.accept = function (visitor) {
        if (visitor.visitTiming_check_limit) {
            return visitor.visitTiming_check_limit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Timing_check_limitContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Timing_check_limitContext = Timing_check_limitContext;
var ConcatenationContext = /** @class */ (function (_super) {
    __extends(ConcatenationContext, _super);
    function ConcatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConcatenationContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(ConcatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConcatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterConcatenation) {
            listener.enterConcatenation(this);
        }
    };
    // @Override
    ConcatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitConcatenation) {
            listener.exitConcatenation(this);
        }
    };
    // @Override
    ConcatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConcatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConcatenationContext = ConcatenationContext;
var Constant_concatenationContext = /** @class */ (function (_super) {
    __extends(Constant_concatenationContext, _super);
    function Constant_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_concatenationContext.prototype.constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Constant_expressionContext);
        }
    };
    Object.defineProperty(Constant_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_concatenation) {
            listener.enterConstant_concatenation(this);
        }
    };
    // @Override
    Constant_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_concatenation) {
            listener.exitConstant_concatenation(this);
        }
    };
    // @Override
    Constant_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_concatenation) {
            return visitor.visitConstant_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_concatenationContext = Constant_concatenationContext;
var Constant_multiple_concatenationContext = /** @class */ (function (_super) {
    __extends(Constant_multiple_concatenationContext, _super);
    function Constant_multiple_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_multiple_concatenationContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Constant_multiple_concatenationContext.prototype.constant_concatenation = function () {
        return this.getRuleContext(0, Constant_concatenationContext);
    };
    Object.defineProperty(Constant_multiple_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_multiple_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_multiple_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_multiple_concatenation) {
            listener.enterConstant_multiple_concatenation(this);
        }
    };
    // @Override
    Constant_multiple_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_multiple_concatenation) {
            listener.exitConstant_multiple_concatenation(this);
        }
    };
    // @Override
    Constant_multiple_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_multiple_concatenation) {
            return visitor.visitConstant_multiple_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_multiple_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_multiple_concatenationContext = Constant_multiple_concatenationContext;
var Module_path_concatenationContext = /** @class */ (function (_super) {
    __extends(Module_path_concatenationContext, _super);
    function Module_path_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_path_concatenationContext.prototype.module_path_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Module_path_expressionContext);
        }
        else {
            return this.getRuleContext(i, Module_path_expressionContext);
        }
    };
    Object.defineProperty(Module_path_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_path_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_path_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_path_concatenation) {
            listener.enterModule_path_concatenation(this);
        }
    };
    // @Override
    Module_path_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_path_concatenation) {
            listener.exitModule_path_concatenation(this);
        }
    };
    // @Override
    Module_path_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_path_concatenation) {
            return visitor.visitModule_path_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_path_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_path_concatenationContext = Module_path_concatenationContext;
var Module_path_multiple_concatenationContext = /** @class */ (function (_super) {
    __extends(Module_path_multiple_concatenationContext, _super);
    function Module_path_multiple_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_path_multiple_concatenationContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Module_path_multiple_concatenationContext.prototype.module_path_concatenation = function () {
        return this.getRuleContext(0, Module_path_concatenationContext);
    };
    Object.defineProperty(Module_path_multiple_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_path_multiple_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_path_multiple_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_path_multiple_concatenation) {
            listener.enterModule_path_multiple_concatenation(this);
        }
    };
    // @Override
    Module_path_multiple_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_path_multiple_concatenation) {
            listener.exitModule_path_multiple_concatenation(this);
        }
    };
    // @Override
    Module_path_multiple_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_path_multiple_concatenation) {
            return visitor.visitModule_path_multiple_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_path_multiple_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_path_multiple_concatenationContext = Module_path_multiple_concatenationContext;
var Multiple_concatenationContext = /** @class */ (function (_super) {
    __extends(Multiple_concatenationContext, _super);
    function Multiple_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Multiple_concatenationContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Multiple_concatenationContext.prototype.concatenation = function () {
        return this.getRuleContext(0, ConcatenationContext);
    };
    Object.defineProperty(Multiple_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_multiple_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Multiple_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiple_concatenation) {
            listener.enterMultiple_concatenation(this);
        }
    };
    // @Override
    Multiple_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiple_concatenation) {
            listener.exitMultiple_concatenation(this);
        }
    };
    // @Override
    Multiple_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiple_concatenation) {
            return visitor.visitMultiple_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Multiple_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Multiple_concatenationContext = Multiple_concatenationContext;
var Net_concatenationContext = /** @class */ (function (_super) {
    __extends(Net_concatenationContext, _super);
    function Net_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_concatenationContext.prototype.net_concatenation_value = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Net_concatenation_valueContext);
        }
        else {
            return this.getRuleContext(i, Net_concatenation_valueContext);
        }
    };
    Object.defineProperty(Net_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_concatenation) {
            listener.enterNet_concatenation(this);
        }
    };
    // @Override
    Net_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_concatenation) {
            listener.exitNet_concatenation(this);
        }
    };
    // @Override
    Net_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_concatenation) {
            return visitor.visitNet_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_concatenationContext = Net_concatenationContext;
var Net_concatenation_valueContext = /** @class */ (function (_super) {
    __extends(Net_concatenation_valueContext, _super);
    function Net_concatenation_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_concatenation_valueContext.prototype.hierarchical_net_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_net_identifierContext);
    };
    Net_concatenation_valueContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Net_concatenation_valueContext.prototype.range_expression = function () {
        return this.tryGetRuleContext(0, Range_expressionContext);
    };
    Net_concatenation_valueContext.prototype.net_concatenation = function () {
        return this.tryGetRuleContext(0, Net_concatenationContext);
    };
    Object.defineProperty(Net_concatenation_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_concatenation_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_concatenation_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_concatenation_value) {
            listener.enterNet_concatenation_value(this);
        }
    };
    // @Override
    Net_concatenation_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_concatenation_value) {
            listener.exitNet_concatenation_value(this);
        }
    };
    // @Override
    Net_concatenation_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_concatenation_value) {
            return visitor.visitNet_concatenation_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_concatenation_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_concatenation_valueContext = Net_concatenation_valueContext;
var Variable_concatenationContext = /** @class */ (function (_super) {
    __extends(Variable_concatenationContext, _super);
    function Variable_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_concatenationContext.prototype.variable_concatenation_value = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Variable_concatenation_valueContext);
        }
        else {
            return this.getRuleContext(i, Variable_concatenation_valueContext);
        }
    };
    Object.defineProperty(Variable_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_variable_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_concatenation) {
            listener.enterVariable_concatenation(this);
        }
    };
    // @Override
    Variable_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_concatenation) {
            listener.exitVariable_concatenation(this);
        }
    };
    // @Override
    Variable_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_concatenation) {
            return visitor.visitVariable_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_concatenationContext = Variable_concatenationContext;
var Variable_concatenation_valueContext = /** @class */ (function (_super) {
    __extends(Variable_concatenation_valueContext, _super);
    function Variable_concatenation_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_concatenation_valueContext.prototype.hierarchical_variable_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_variable_identifierContext);
    };
    Variable_concatenation_valueContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Variable_concatenation_valueContext.prototype.range_expression = function () {
        return this.tryGetRuleContext(0, Range_expressionContext);
    };
    Variable_concatenation_valueContext.prototype.variable_concatenation = function () {
        return this.tryGetRuleContext(0, Variable_concatenationContext);
    };
    Object.defineProperty(Variable_concatenation_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_variable_concatenation_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_concatenation_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_concatenation_value) {
            listener.enterVariable_concatenation_value(this);
        }
    };
    // @Override
    Variable_concatenation_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_concatenation_value) {
            listener.exitVariable_concatenation_value(this);
        }
    };
    // @Override
    Variable_concatenation_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_concatenation_value) {
            return visitor.visitVariable_concatenation_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_concatenation_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_concatenation_valueContext = Variable_concatenation_valueContext;
var Constant_function_callContext = /** @class */ (function (_super) {
    __extends(Constant_function_callContext, _super);
    function Constant_function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_function_callContext.prototype.function_identifier = function () {
        return this.getRuleContext(0, Function_identifierContext);
    };
    Constant_function_callContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Constant_function_callContext.prototype.constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Constant_expressionContext);
        }
    };
    Object.defineProperty(Constant_function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_function_call) {
            listener.enterConstant_function_call(this);
        }
    };
    // @Override
    Constant_function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_function_call) {
            listener.exitConstant_function_call(this);
        }
    };
    // @Override
    Constant_function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_function_call) {
            return visitor.visitConstant_function_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_function_callContext = Constant_function_callContext;
var Function_callContext = /** @class */ (function (_super) {
    __extends(Function_callContext, _super);
    function Function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_callContext.prototype.hierarchical_function_identifier = function () {
        return this.getRuleContext(0, Hierarchical_function_identifierContext);
    };
    Function_callContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Function_callContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(Function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_call) {
            listener.enterFunction_call(this);
        }
    };
    // @Override
    Function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_call) {
            listener.exitFunction_call(this);
        }
    };
    // @Override
    Function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_call) {
            return visitor.visitFunction_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_callContext = Function_callContext;
var System_function_callContext = /** @class */ (function (_super) {
    __extends(System_function_callContext, _super);
    function System_function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_function_callContext.prototype.system_function_identifier = function () {
        return this.getRuleContext(0, System_function_identifierContext);
    };
    System_function_callContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(System_function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_system_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_function_call) {
            listener.enterSystem_function_call(this);
        }
    };
    // @Override
    System_function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_function_call) {
            listener.exitSystem_function_call(this);
        }
    };
    // @Override
    System_function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_function_call) {
            return visitor.visitSystem_function_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_function_callContext = System_function_callContext;
var Genvar_function_callContext = /** @class */ (function (_super) {
    __extends(Genvar_function_callContext, _super);
    function Genvar_function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Genvar_function_callContext.prototype.genvar_function_identifier = function () {
        return this.getRuleContext(0, Genvar_function_identifierContext);
    };
    Genvar_function_callContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Genvar_function_callContext.prototype.constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Constant_expressionContext);
        }
    };
    Object.defineProperty(Genvar_function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_genvar_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Genvar_function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterGenvar_function_call) {
            listener.enterGenvar_function_call(this);
        }
    };
    // @Override
    Genvar_function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitGenvar_function_call) {
            listener.exitGenvar_function_call(this);
        }
    };
    // @Override
    Genvar_function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitGenvar_function_call) {
            return visitor.visitGenvar_function_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Genvar_function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Genvar_function_callContext = Genvar_function_callContext;
var Base_expressionContext = /** @class */ (function (_super) {
    __extends(Base_expressionContext, _super);
    function Base_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Base_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Base_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_base_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Base_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterBase_expression) {
            listener.enterBase_expression(this);
        }
    };
    // @Override
    Base_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitBase_expression) {
            listener.exitBase_expression(this);
        }
    };
    // @Override
    Base_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitBase_expression) {
            return visitor.visitBase_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Base_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Base_expressionContext = Base_expressionContext;
var Constant_base_expressionContext = /** @class */ (function (_super) {
    __extends(Constant_base_expressionContext, _super);
    function Constant_base_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_base_expressionContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Constant_base_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_base_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_base_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_base_expression) {
            listener.enterConstant_base_expression(this);
        }
    };
    // @Override
    Constant_base_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_base_expression) {
            listener.exitConstant_base_expression(this);
        }
    };
    // @Override
    Constant_base_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_base_expression) {
            return visitor.visitConstant_base_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_base_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_base_expressionContext = Constant_base_expressionContext;
var Constant_expressionContext = /** @class */ (function (_super) {
    __extends(Constant_expressionContext, _super);
    function Constant_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Constant_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_expression) {
            listener.enterConstant_expression(this);
        }
    };
    // @Override
    Constant_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_expression) {
            listener.exitConstant_expression(this);
        }
    };
    // @Override
    Constant_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_expression) {
            return visitor.visitConstant_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_expressionContext = Constant_expressionContext;
var Constant_mintypmax_expressionContext = /** @class */ (function (_super) {
    __extends(Constant_mintypmax_expressionContext, _super);
    function Constant_mintypmax_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_mintypmax_expressionContext.prototype.constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Constant_expressionContext);
        }
    };
    Object.defineProperty(Constant_mintypmax_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_mintypmax_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_mintypmax_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_mintypmax_expression) {
            listener.enterConstant_mintypmax_expression(this);
        }
    };
    // @Override
    Constant_mintypmax_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_mintypmax_expression) {
            listener.exitConstant_mintypmax_expression(this);
        }
    };
    // @Override
    Constant_mintypmax_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_mintypmax_expression) {
            return visitor.visitConstant_mintypmax_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_mintypmax_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_mintypmax_expressionContext = Constant_mintypmax_expressionContext;
var Constant_range_expressionContext = /** @class */ (function (_super) {
    __extends(Constant_range_expressionContext, _super);
    function Constant_range_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_range_expressionContext.prototype.constant_expression = function () {
        return this.tryGetRuleContext(0, Constant_expressionContext);
    };
    Constant_range_expressionContext.prototype.msb_constant_expression = function () {
        return this.tryGetRuleContext(0, Msb_constant_expressionContext);
    };
    Constant_range_expressionContext.prototype.lsb_constant_expression = function () {
        return this.tryGetRuleContext(0, Lsb_constant_expressionContext);
    };
    Constant_range_expressionContext.prototype.constant_base_expression = function () {
        return this.tryGetRuleContext(0, Constant_base_expressionContext);
    };
    Constant_range_expressionContext.prototype.width_constant_expression = function () {
        return this.tryGetRuleContext(0, Width_constant_expressionContext);
    };
    Object.defineProperty(Constant_range_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_range_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_range_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_range_expression) {
            listener.enterConstant_range_expression(this);
        }
    };
    // @Override
    Constant_range_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_range_expression) {
            listener.exitConstant_range_expression(this);
        }
    };
    // @Override
    Constant_range_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_range_expression) {
            return visitor.visitConstant_range_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_range_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_range_expressionContext = Constant_range_expressionContext;
var Dimension_constant_expressionContext = /** @class */ (function (_super) {
    __extends(Dimension_constant_expressionContext, _super);
    function Dimension_constant_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Dimension_constant_expressionContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Dimension_constant_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_dimension_constant_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Dimension_constant_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterDimension_constant_expression) {
            listener.enterDimension_constant_expression(this);
        }
    };
    // @Override
    Dimension_constant_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitDimension_constant_expression) {
            listener.exitDimension_constant_expression(this);
        }
    };
    // @Override
    Dimension_constant_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitDimension_constant_expression) {
            return visitor.visitDimension_constant_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Dimension_constant_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Dimension_constant_expressionContext = Dimension_constant_expressionContext;
var ExpressionContext = /** @class */ (function (_super) {
    __extends(ExpressionContext, _super);
    function ExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExpressionContext.prototype.term = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TermContext);
        }
        else {
            return this.getRuleContext(i, TermContext);
        }
    };
    ExpressionContext.prototype.binary_operator = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Binary_operatorContext);
        }
        else {
            return this.getRuleContext(i, Binary_operatorContext);
        }
    };
    ExpressionContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    ExpressionContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(ExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterExpression) {
            listener.enterExpression(this);
        }
    };
    // @Override
    ExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitExpression) {
            listener.exitExpression(this);
        }
    };
    // @Override
    ExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExpressionContext = ExpressionContext;
var TermContext = /** @class */ (function (_super) {
    __extends(TermContext, _super);
    function TermContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TermContext.prototype.unary_operator = function () {
        return this.tryGetRuleContext(0, Unary_operatorContext);
    };
    TermContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    TermContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    TermContext.prototype.String = function () { return this.tryGetToken(Verilog2001Parser.String, 0); };
    Object.defineProperty(TermContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_term; },
        enumerable: true,
        configurable: true
    });
    // @Override
    TermContext.prototype.enterRule = function (listener) {
        if (listener.enterTerm) {
            listener.enterTerm(this);
        }
    };
    // @Override
    TermContext.prototype.exitRule = function (listener) {
        if (listener.exitTerm) {
            listener.exitTerm(this);
        }
    };
    // @Override
    TermContext.prototype.accept = function (visitor) {
        if (visitor.visitTerm) {
            return visitor.visitTerm(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return TermContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TermContext = TermContext;
var Lsb_constant_expressionContext = /** @class */ (function (_super) {
    __extends(Lsb_constant_expressionContext, _super);
    function Lsb_constant_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Lsb_constant_expressionContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Lsb_constant_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_lsb_constant_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Lsb_constant_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterLsb_constant_expression) {
            listener.enterLsb_constant_expression(this);
        }
    };
    // @Override
    Lsb_constant_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitLsb_constant_expression) {
            listener.exitLsb_constant_expression(this);
        }
    };
    // @Override
    Lsb_constant_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitLsb_constant_expression) {
            return visitor.visitLsb_constant_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Lsb_constant_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Lsb_constant_expressionContext = Lsb_constant_expressionContext;
var Mintypmax_expressionContext = /** @class */ (function (_super) {
    __extends(Mintypmax_expressionContext, _super);
    function Mintypmax_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Mintypmax_expressionContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(Mintypmax_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_mintypmax_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mintypmax_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterMintypmax_expression) {
            listener.enterMintypmax_expression(this);
        }
    };
    // @Override
    Mintypmax_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitMintypmax_expression) {
            listener.exitMintypmax_expression(this);
        }
    };
    // @Override
    Mintypmax_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitMintypmax_expression) {
            return visitor.visitMintypmax_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mintypmax_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mintypmax_expressionContext = Mintypmax_expressionContext;
var Module_path_conditional_expressionContext = /** @class */ (function (_super) {
    __extends(Module_path_conditional_expressionContext, _super);
    function Module_path_conditional_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_path_conditional_expressionContext.prototype.module_path_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Module_path_expressionContext);
        }
        else {
            return this.getRuleContext(i, Module_path_expressionContext);
        }
    };
    Module_path_conditional_expressionContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Module_path_conditional_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_path_conditional_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_path_conditional_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_path_conditional_expression) {
            listener.enterModule_path_conditional_expression(this);
        }
    };
    // @Override
    Module_path_conditional_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_path_conditional_expression) {
            listener.exitModule_path_conditional_expression(this);
        }
    };
    // @Override
    Module_path_conditional_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_path_conditional_expression) {
            return visitor.visitModule_path_conditional_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_path_conditional_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_path_conditional_expressionContext = Module_path_conditional_expressionContext;
var Module_path_expressionContext = /** @class */ (function (_super) {
    __extends(Module_path_expressionContext, _super);
    function Module_path_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_path_expressionContext.prototype.module_path_primary = function () {
        return this.tryGetRuleContext(0, Module_path_primaryContext);
    };
    Module_path_expressionContext.prototype.unary_module_path_operator = function () {
        return this.tryGetRuleContext(0, Unary_module_path_operatorContext);
    };
    Module_path_expressionContext.prototype.binary_module_path_operator = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Binary_module_path_operatorContext);
        }
        else {
            return this.getRuleContext(i, Binary_module_path_operatorContext);
        }
    };
    Module_path_expressionContext.prototype.module_path_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Module_path_expressionContext);
        }
        else {
            return this.getRuleContext(i, Module_path_expressionContext);
        }
    };
    Module_path_expressionContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Module_path_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_path_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_path_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_path_expression) {
            listener.enterModule_path_expression(this);
        }
    };
    // @Override
    Module_path_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_path_expression) {
            listener.exitModule_path_expression(this);
        }
    };
    // @Override
    Module_path_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_path_expression) {
            return visitor.visitModule_path_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_path_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_path_expressionContext = Module_path_expressionContext;
var Module_path_mintypmax_expressionContext = /** @class */ (function (_super) {
    __extends(Module_path_mintypmax_expressionContext, _super);
    function Module_path_mintypmax_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_path_mintypmax_expressionContext.prototype.module_path_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Module_path_expressionContext);
        }
        else {
            return this.getRuleContext(i, Module_path_expressionContext);
        }
    };
    Object.defineProperty(Module_path_mintypmax_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_path_mintypmax_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_path_mintypmax_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_path_mintypmax_expression) {
            listener.enterModule_path_mintypmax_expression(this);
        }
    };
    // @Override
    Module_path_mintypmax_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_path_mintypmax_expression) {
            listener.exitModule_path_mintypmax_expression(this);
        }
    };
    // @Override
    Module_path_mintypmax_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_path_mintypmax_expression) {
            return visitor.visitModule_path_mintypmax_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_path_mintypmax_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_path_mintypmax_expressionContext = Module_path_mintypmax_expressionContext;
var Msb_constant_expressionContext = /** @class */ (function (_super) {
    __extends(Msb_constant_expressionContext, _super);
    function Msb_constant_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Msb_constant_expressionContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Msb_constant_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_msb_constant_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Msb_constant_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterMsb_constant_expression) {
            listener.enterMsb_constant_expression(this);
        }
    };
    // @Override
    Msb_constant_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitMsb_constant_expression) {
            listener.exitMsb_constant_expression(this);
        }
    };
    // @Override
    Msb_constant_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitMsb_constant_expression) {
            return visitor.visitMsb_constant_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Msb_constant_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Msb_constant_expressionContext = Msb_constant_expressionContext;
var Range_expressionContext = /** @class */ (function (_super) {
    __extends(Range_expressionContext, _super);
    function Range_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Range_expressionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Range_expressionContext.prototype.msb_constant_expression = function () {
        return this.tryGetRuleContext(0, Msb_constant_expressionContext);
    };
    Range_expressionContext.prototype.lsb_constant_expression = function () {
        return this.tryGetRuleContext(0, Lsb_constant_expressionContext);
    };
    Range_expressionContext.prototype.base_expression = function () {
        return this.tryGetRuleContext(0, Base_expressionContext);
    };
    Range_expressionContext.prototype.width_constant_expression = function () {
        return this.tryGetRuleContext(0, Width_constant_expressionContext);
    };
    Object.defineProperty(Range_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_range_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Range_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterRange_expression) {
            listener.enterRange_expression(this);
        }
    };
    // @Override
    Range_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitRange_expression) {
            listener.exitRange_expression(this);
        }
    };
    // @Override
    Range_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitRange_expression) {
            return visitor.visitRange_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Range_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Range_expressionContext = Range_expressionContext;
var Width_constant_expressionContext = /** @class */ (function (_super) {
    __extends(Width_constant_expressionContext, _super);
    function Width_constant_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Width_constant_expressionContext.prototype.constant_expression = function () {
        return this.getRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Width_constant_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_width_constant_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Width_constant_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterWidth_constant_expression) {
            listener.enterWidth_constant_expression(this);
        }
    };
    // @Override
    Width_constant_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitWidth_constant_expression) {
            listener.exitWidth_constant_expression(this);
        }
    };
    // @Override
    Width_constant_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitWidth_constant_expression) {
            return visitor.visitWidth_constant_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Width_constant_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Width_constant_expressionContext = Width_constant_expressionContext;
var Constant_primaryContext = /** @class */ (function (_super) {
    __extends(Constant_primaryContext, _super);
    function Constant_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_primaryContext.prototype.constant_concatenation = function () {
        return this.tryGetRuleContext(0, Constant_concatenationContext);
    };
    Constant_primaryContext.prototype.constant_function_call = function () {
        return this.tryGetRuleContext(0, Constant_function_callContext);
    };
    Constant_primaryContext.prototype.constant_mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
    };
    Constant_primaryContext.prototype.constant_multiple_concatenation = function () {
        return this.tryGetRuleContext(0, Constant_multiple_concatenationContext);
    };
    Constant_primaryContext.prototype.genvar_identifier = function () {
        return this.tryGetRuleContext(0, Genvar_identifierContext);
    };
    Constant_primaryContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    Constant_primaryContext.prototype.parameter_identifier = function () {
        return this.tryGetRuleContext(0, Parameter_identifierContext);
    };
    Constant_primaryContext.prototype.specparam_identifier = function () {
        return this.tryGetRuleContext(0, Specparam_identifierContext);
    };
    Object.defineProperty(Constant_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_constant_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_primary) {
            listener.enterConstant_primary(this);
        }
    };
    // @Override
    Constant_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_primary) {
            listener.exitConstant_primary(this);
        }
    };
    // @Override
    Constant_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_primary) {
            return visitor.visitConstant_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_primaryContext = Constant_primaryContext;
var Module_path_primaryContext = /** @class */ (function (_super) {
    __extends(Module_path_primaryContext, _super);
    function Module_path_primaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_path_primaryContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    Module_path_primaryContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    Module_path_primaryContext.prototype.module_path_concatenation = function () {
        return this.tryGetRuleContext(0, Module_path_concatenationContext);
    };
    Module_path_primaryContext.prototype.module_path_multiple_concatenation = function () {
        return this.tryGetRuleContext(0, Module_path_multiple_concatenationContext);
    };
    Module_path_primaryContext.prototype.function_call = function () {
        return this.tryGetRuleContext(0, Function_callContext);
    };
    Module_path_primaryContext.prototype.system_function_call = function () {
        return this.tryGetRuleContext(0, System_function_callContext);
    };
    Module_path_primaryContext.prototype.constant_function_call = function () {
        return this.tryGetRuleContext(0, Constant_function_callContext);
    };
    Module_path_primaryContext.prototype.module_path_mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Module_path_mintypmax_expressionContext);
    };
    Object.defineProperty(Module_path_primaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_path_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_path_primaryContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_path_primary) {
            listener.enterModule_path_primary(this);
        }
    };
    // @Override
    Module_path_primaryContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_path_primary) {
            listener.exitModule_path_primary(this);
        }
    };
    // @Override
    Module_path_primaryContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_path_primary) {
            return visitor.visitModule_path_primary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_path_primaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_path_primaryContext = Module_path_primaryContext;
var PrimaryContext = /** @class */ (function (_super) {
    __extends(PrimaryContext, _super);
    function PrimaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    PrimaryContext.prototype.hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_identifierContext);
    };
    PrimaryContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    PrimaryContext.prototype.range_expression = function () {
        return this.tryGetRuleContext(0, Range_expressionContext);
    };
    PrimaryContext.prototype.concatenation = function () {
        return this.tryGetRuleContext(0, ConcatenationContext);
    };
    PrimaryContext.prototype.multiple_concatenation = function () {
        return this.tryGetRuleContext(0, Multiple_concatenationContext);
    };
    PrimaryContext.prototype.function_call = function () {
        return this.tryGetRuleContext(0, Function_callContext);
    };
    PrimaryContext.prototype.system_function_call = function () {
        return this.tryGetRuleContext(0, System_function_callContext);
    };
    PrimaryContext.prototype.constant_function_call = function () {
        return this.tryGetRuleContext(0, Constant_function_callContext);
    };
    PrimaryContext.prototype.mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(PrimaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimary) {
            listener.enterPrimary(this);
        }
    };
    // @Override
    PrimaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimary) {
            listener.exitPrimary(this);
        }
    };
    // @Override
    PrimaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimary) {
            return visitor.visitPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryContext = PrimaryContext;
var Net_lvalueContext = /** @class */ (function (_super) {
    __extends(Net_lvalueContext, _super);
    function Net_lvalueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_lvalueContext.prototype.hierarchical_net_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_net_identifierContext);
    };
    Net_lvalueContext.prototype.constant_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Constant_expressionContext);
        }
        else {
            return this.getRuleContext(i, Constant_expressionContext);
        }
    };
    Net_lvalueContext.prototype.constant_range_expression = function () {
        return this.tryGetRuleContext(0, Constant_range_expressionContext);
    };
    Net_lvalueContext.prototype.net_concatenation = function () {
        return this.tryGetRuleContext(0, Net_concatenationContext);
    };
    Object.defineProperty(Net_lvalueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_lvalue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_lvalueContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_lvalue) {
            listener.enterNet_lvalue(this);
        }
    };
    // @Override
    Net_lvalueContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_lvalue) {
            listener.exitNet_lvalue(this);
        }
    };
    // @Override
    Net_lvalueContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_lvalue) {
            return visitor.visitNet_lvalue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_lvalueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_lvalueContext = Net_lvalueContext;
var Variable_lvalueContext = /** @class */ (function (_super) {
    __extends(Variable_lvalueContext, _super);
    function Variable_lvalueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_lvalueContext.prototype.hierarchical_variable_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_variable_identifierContext);
    };
    Variable_lvalueContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Variable_lvalueContext.prototype.range_expression = function () {
        return this.tryGetRuleContext(0, Range_expressionContext);
    };
    Variable_lvalueContext.prototype.variable_concatenation = function () {
        return this.tryGetRuleContext(0, Variable_concatenationContext);
    };
    Object.defineProperty(Variable_lvalueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_variable_lvalue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_lvalueContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_lvalue) {
            listener.enterVariable_lvalue(this);
        }
    };
    // @Override
    Variable_lvalueContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_lvalue) {
            listener.exitVariable_lvalue(this);
        }
    };
    // @Override
    Variable_lvalueContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_lvalue) {
            return visitor.visitVariable_lvalue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_lvalueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_lvalueContext = Variable_lvalueContext;
var Unary_operatorContext = /** @class */ (function (_super) {
    __extends(Unary_operatorContext, _super);
    function Unary_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Unary_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_unary_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Unary_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterUnary_operator) {
            listener.enterUnary_operator(this);
        }
    };
    // @Override
    Unary_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitUnary_operator) {
            listener.exitUnary_operator(this);
        }
    };
    // @Override
    Unary_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitUnary_operator) {
            return visitor.visitUnary_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Unary_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Unary_operatorContext = Unary_operatorContext;
var Binary_operatorContext = /** @class */ (function (_super) {
    __extends(Binary_operatorContext, _super);
    function Binary_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Binary_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_binary_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Binary_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterBinary_operator) {
            listener.enterBinary_operator(this);
        }
    };
    // @Override
    Binary_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitBinary_operator) {
            listener.exitBinary_operator(this);
        }
    };
    // @Override
    Binary_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitBinary_operator) {
            return visitor.visitBinary_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Binary_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Binary_operatorContext = Binary_operatorContext;
var Unary_module_path_operatorContext = /** @class */ (function (_super) {
    __extends(Unary_module_path_operatorContext, _super);
    function Unary_module_path_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Unary_module_path_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_unary_module_path_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Unary_module_path_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterUnary_module_path_operator) {
            listener.enterUnary_module_path_operator(this);
        }
    };
    // @Override
    Unary_module_path_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitUnary_module_path_operator) {
            listener.exitUnary_module_path_operator(this);
        }
    };
    // @Override
    Unary_module_path_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitUnary_module_path_operator) {
            return visitor.visitUnary_module_path_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Unary_module_path_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Unary_module_path_operatorContext = Unary_module_path_operatorContext;
var Binary_module_path_operatorContext = /** @class */ (function (_super) {
    __extends(Binary_module_path_operatorContext, _super);
    function Binary_module_path_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Binary_module_path_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_binary_module_path_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Binary_module_path_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterBinary_module_path_operator) {
            listener.enterBinary_module_path_operator(this);
        }
    };
    // @Override
    Binary_module_path_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitBinary_module_path_operator) {
            listener.exitBinary_module_path_operator(this);
        }
    };
    // @Override
    Binary_module_path_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitBinary_module_path_operator) {
            return visitor.visitBinary_module_path_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Binary_module_path_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Binary_module_path_operatorContext = Binary_module_path_operatorContext;
var NumberContext = /** @class */ (function (_super) {
    __extends(NumberContext, _super);
    function NumberContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumberContext.prototype.Decimal_number = function () { return this.tryGetToken(Verilog2001Parser.Decimal_number, 0); };
    NumberContext.prototype.Octal_number = function () { return this.tryGetToken(Verilog2001Parser.Octal_number, 0); };
    NumberContext.prototype.Binary_number = function () { return this.tryGetToken(Verilog2001Parser.Binary_number, 0); };
    NumberContext.prototype.Hex_number = function () { return this.tryGetToken(Verilog2001Parser.Hex_number, 0); };
    NumberContext.prototype.Real_number = function () { return this.tryGetToken(Verilog2001Parser.Real_number, 0); };
    Object.defineProperty(NumberContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_number; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NumberContext.prototype.enterRule = function (listener) {
        if (listener.enterNumber) {
            listener.enterNumber(this);
        }
    };
    // @Override
    NumberContext.prototype.exitRule = function (listener) {
        if (listener.exitNumber) {
            listener.exitNumber(this);
        }
    };
    // @Override
    NumberContext.prototype.accept = function (visitor) {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NumberContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumberContext = NumberContext;
var Timing_specContext = /** @class */ (function (_super) {
    __extends(Timing_specContext, _super);
    function Timing_specContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Timing_specContext.prototype.Time_Identifier = function (i) {
        if (i === undefined) {
            return this.getTokens(Verilog2001Parser.Time_Identifier);
        }
        else {
            return this.getToken(Verilog2001Parser.Time_Identifier, i);
        }
    };
    Object.defineProperty(Timing_specContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_timing_spec; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Timing_specContext.prototype.enterRule = function (listener) {
        if (listener.enterTiming_spec) {
            listener.enterTiming_spec(this);
        }
    };
    // @Override
    Timing_specContext.prototype.exitRule = function (listener) {
        if (listener.exitTiming_spec) {
            listener.exitTiming_spec(this);
        }
    };
    // @Override
    Timing_specContext.prototype.accept = function (visitor) {
        if (visitor.visitTiming_spec) {
            return visitor.visitTiming_spec(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Timing_specContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Timing_specContext = Timing_specContext;
var Attribute_instanceContext = /** @class */ (function (_super) {
    __extends(Attribute_instanceContext, _super);
    function Attribute_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attribute_instanceContext.prototype.attr_spec = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attr_specContext);
        }
        else {
            return this.getRuleContext(i, Attr_specContext);
        }
    };
    Object.defineProperty(Attribute_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_attribute_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attribute_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterAttribute_instance) {
            listener.enterAttribute_instance(this);
        }
    };
    // @Override
    Attribute_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitAttribute_instance) {
            listener.exitAttribute_instance(this);
        }
    };
    // @Override
    Attribute_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitAttribute_instance) {
            return visitor.visitAttribute_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attribute_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attribute_instanceContext = Attribute_instanceContext;
var Attr_specContext = /** @class */ (function (_super) {
    __extends(Attr_specContext, _super);
    function Attr_specContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_specContext.prototype.attr_name = function () {
        return this.getRuleContext(0, Attr_nameContext);
    };
    Attr_specContext.prototype.constant_expression = function () {
        return this.tryGetRuleContext(0, Constant_expressionContext);
    };
    Object.defineProperty(Attr_specContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_attr_spec; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_specContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_spec) {
            listener.enterAttr_spec(this);
        }
    };
    // @Override
    Attr_specContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_spec) {
            listener.exitAttr_spec(this);
        }
    };
    // @Override
    Attr_specContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_spec) {
            return visitor.visitAttr_spec(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_specContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_specContext = Attr_specContext;
var Attr_nameContext = /** @class */ (function (_super) {
    __extends(Attr_nameContext, _super);
    function Attr_nameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_nameContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Attr_nameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_attr_name; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_nameContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_name) {
            listener.enterAttr_name(this);
        }
    };
    // @Override
    Attr_nameContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_name) {
            listener.exitAttr_name(this);
        }
    };
    // @Override
    Attr_nameContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_name) {
            return visitor.visitAttr_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_nameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_nameContext = Attr_nameContext;
var Arrayed_identifierContext = /** @class */ (function (_super) {
    __extends(Arrayed_identifierContext, _super);
    function Arrayed_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Arrayed_identifierContext.prototype.simple_arrayed_identifier = function () {
        return this.tryGetRuleContext(0, Simple_arrayed_identifierContext);
    };
    Arrayed_identifierContext.prototype.escaped_arrayed_identifier = function () {
        return this.tryGetRuleContext(0, Escaped_arrayed_identifierContext);
    };
    Object.defineProperty(Arrayed_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_arrayed_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Arrayed_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayed_identifier) {
            listener.enterArrayed_identifier(this);
        }
    };
    // @Override
    Arrayed_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayed_identifier) {
            listener.exitArrayed_identifier(this);
        }
    };
    // @Override
    Arrayed_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayed_identifier) {
            return visitor.visitArrayed_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Arrayed_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Arrayed_identifierContext = Arrayed_identifierContext;
var Block_identifierContext = /** @class */ (function (_super) {
    __extends(Block_identifierContext, _super);
    function Block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_identifier) {
            listener.enterBlock_identifier(this);
        }
    };
    // @Override
    Block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_identifier) {
            listener.exitBlock_identifier(this);
        }
    };
    // @Override
    Block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_identifier) {
            return visitor.visitBlock_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_identifierContext = Block_identifierContext;
var Cell_identifierContext = /** @class */ (function (_super) {
    __extends(Cell_identifierContext, _super);
    function Cell_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Cell_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Cell_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_cell_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cell_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterCell_identifier) {
            listener.enterCell_identifier(this);
        }
    };
    // @Override
    Cell_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitCell_identifier) {
            listener.exitCell_identifier(this);
        }
    };
    // @Override
    Cell_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitCell_identifier) {
            return visitor.visitCell_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cell_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cell_identifierContext = Cell_identifierContext;
var Config_identifierContext = /** @class */ (function (_super) {
    __extends(Config_identifierContext, _super);
    function Config_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Config_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Config_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_config_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Config_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterConfig_identifier) {
            listener.enterConfig_identifier(this);
        }
    };
    // @Override
    Config_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitConfig_identifier) {
            listener.exitConfig_identifier(this);
        }
    };
    // @Override
    Config_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitConfig_identifier) {
            return visitor.visitConfig_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Config_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Config_identifierContext = Config_identifierContext;
var Escaped_arrayed_identifierContext = /** @class */ (function (_super) {
    __extends(Escaped_arrayed_identifierContext, _super);
    function Escaped_arrayed_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Escaped_arrayed_identifierContext.prototype.Escaped_identifier = function () { return this.getToken(Verilog2001Parser.Escaped_identifier, 0); };
    Escaped_arrayed_identifierContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Escaped_arrayed_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_escaped_arrayed_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Escaped_arrayed_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEscaped_arrayed_identifier) {
            listener.enterEscaped_arrayed_identifier(this);
        }
    };
    // @Override
    Escaped_arrayed_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEscaped_arrayed_identifier) {
            listener.exitEscaped_arrayed_identifier(this);
        }
    };
    // @Override
    Escaped_arrayed_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEscaped_arrayed_identifier) {
            return visitor.visitEscaped_arrayed_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Escaped_arrayed_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Escaped_arrayed_identifierContext = Escaped_arrayed_identifierContext;
var Escaped_hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Escaped_hierarchical_identifierContext, _super);
    function Escaped_hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Escaped_hierarchical_identifierContext.prototype.escaped_hierarchical_branch = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Escaped_hierarchical_branchContext);
        }
        else {
            return this.getRuleContext(i, Escaped_hierarchical_branchContext);
        }
    };
    Escaped_hierarchical_identifierContext.prototype.simple_hierarchical_branch = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Simple_hierarchical_branchContext);
        }
        else {
            return this.getRuleContext(i, Simple_hierarchical_branchContext);
        }
    };
    Object.defineProperty(Escaped_hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_escaped_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Escaped_hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEscaped_hierarchical_identifier) {
            listener.enterEscaped_hierarchical_identifier(this);
        }
    };
    // @Override
    Escaped_hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEscaped_hierarchical_identifier) {
            listener.exitEscaped_hierarchical_identifier(this);
        }
    };
    // @Override
    Escaped_hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEscaped_hierarchical_identifier) {
            return visitor.visitEscaped_hierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Escaped_hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Escaped_hierarchical_identifierContext = Escaped_hierarchical_identifierContext;
var Event_identifierContext = /** @class */ (function (_super) {
    __extends(Event_identifierContext, _super);
    function Event_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Event_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_event_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_identifier) {
            listener.enterEvent_identifier(this);
        }
    };
    // @Override
    Event_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_identifier) {
            listener.exitEvent_identifier(this);
        }
    };
    // @Override
    Event_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_identifier) {
            return visitor.visitEvent_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_identifierContext = Event_identifierContext;
var Function_identifierContext = /** @class */ (function (_super) {
    __extends(Function_identifierContext, _super);
    function Function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_identifier) {
            listener.enterFunction_identifier(this);
        }
    };
    // @Override
    Function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_identifier) {
            listener.exitFunction_identifier(this);
        }
    };
    // @Override
    Function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_identifier) {
            return visitor.visitFunction_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_identifierContext = Function_identifierContext;
var Gate_instance_identifierContext = /** @class */ (function (_super) {
    __extends(Gate_instance_identifierContext, _super);
    function Gate_instance_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Gate_instance_identifierContext.prototype.arrayed_identifier = function () {
        return this.getRuleContext(0, Arrayed_identifierContext);
    };
    Object.defineProperty(Gate_instance_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_gate_instance_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Gate_instance_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterGate_instance_identifier) {
            listener.enterGate_instance_identifier(this);
        }
    };
    // @Override
    Gate_instance_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitGate_instance_identifier) {
            listener.exitGate_instance_identifier(this);
        }
    };
    // @Override
    Gate_instance_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitGate_instance_identifier) {
            return visitor.visitGate_instance_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Gate_instance_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Gate_instance_identifierContext = Gate_instance_identifierContext;
var Generate_block_identifierContext = /** @class */ (function (_super) {
    __extends(Generate_block_identifierContext, _super);
    function Generate_block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_block_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Generate_block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_generate_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_block_identifier) {
            listener.enterGenerate_block_identifier(this);
        }
    };
    // @Override
    Generate_block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_block_identifier) {
            listener.exitGenerate_block_identifier(this);
        }
    };
    // @Override
    Generate_block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_block_identifier) {
            return visitor.visitGenerate_block_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_block_identifierContext = Generate_block_identifierContext;
var Genvar_function_identifierContext = /** @class */ (function (_super) {
    __extends(Genvar_function_identifierContext, _super);
    function Genvar_function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Genvar_function_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Genvar_function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_genvar_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Genvar_function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterGenvar_function_identifier) {
            listener.enterGenvar_function_identifier(this);
        }
    };
    // @Override
    Genvar_function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitGenvar_function_identifier) {
            listener.exitGenvar_function_identifier(this);
        }
    };
    // @Override
    Genvar_function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitGenvar_function_identifier) {
            return visitor.visitGenvar_function_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Genvar_function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Genvar_function_identifierContext = Genvar_function_identifierContext;
var Genvar_identifierContext = /** @class */ (function (_super) {
    __extends(Genvar_identifierContext, _super);
    function Genvar_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Genvar_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Genvar_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_genvar_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Genvar_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterGenvar_identifier) {
            listener.enterGenvar_identifier(this);
        }
    };
    // @Override
    Genvar_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitGenvar_identifier) {
            listener.exitGenvar_identifier(this);
        }
    };
    // @Override
    Genvar_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitGenvar_identifier) {
            return visitor.visitGenvar_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Genvar_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Genvar_identifierContext = Genvar_identifierContext;
var Hierarchical_block_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_block_identifierContext, _super);
    function Hierarchical_block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_block_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_hierarchical_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_block_identifier) {
            listener.enterHierarchical_block_identifier(this);
        }
    };
    // @Override
    Hierarchical_block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_block_identifier) {
            listener.exitHierarchical_block_identifier(this);
        }
    };
    // @Override
    Hierarchical_block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_block_identifier) {
            return visitor.visitHierarchical_block_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_block_identifierContext = Hierarchical_block_identifierContext;
var Hierarchical_event_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_event_identifierContext, _super);
    function Hierarchical_event_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_event_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_event_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_hierarchical_event_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_event_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_event_identifier) {
            listener.enterHierarchical_event_identifier(this);
        }
    };
    // @Override
    Hierarchical_event_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_event_identifier) {
            listener.exitHierarchical_event_identifier(this);
        }
    };
    // @Override
    Hierarchical_event_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_event_identifier) {
            return visitor.visitHierarchical_event_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_event_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_event_identifierContext = Hierarchical_event_identifierContext;
var Hierarchical_function_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_function_identifierContext, _super);
    function Hierarchical_function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_function_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_hierarchical_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_function_identifier) {
            listener.enterHierarchical_function_identifier(this);
        }
    };
    // @Override
    Hierarchical_function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_function_identifier) {
            listener.exitHierarchical_function_identifier(this);
        }
    };
    // @Override
    Hierarchical_function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_function_identifier) {
            return visitor.visitHierarchical_function_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_function_identifierContext = Hierarchical_function_identifierContext;
var Hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_identifierContext, _super);
    function Hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_identifierContext.prototype.simple_hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Simple_hierarchical_identifierContext);
    };
    Hierarchical_identifierContext.prototype.escaped_hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Escaped_hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_identifier) {
            listener.enterHierarchical_identifier(this);
        }
    };
    // @Override
    Hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_identifier) {
            listener.exitHierarchical_identifier(this);
        }
    };
    // @Override
    Hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_identifier) {
            return visitor.visitHierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_identifierContext = Hierarchical_identifierContext;
var Hierarchical_net_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_net_identifierContext, _super);
    function Hierarchical_net_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_net_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_net_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_hierarchical_net_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_net_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_net_identifier) {
            listener.enterHierarchical_net_identifier(this);
        }
    };
    // @Override
    Hierarchical_net_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_net_identifier) {
            listener.exitHierarchical_net_identifier(this);
        }
    };
    // @Override
    Hierarchical_net_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_net_identifier) {
            return visitor.visitHierarchical_net_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_net_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_net_identifierContext = Hierarchical_net_identifierContext;
var Hierarchical_variable_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_variable_identifierContext, _super);
    function Hierarchical_variable_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_variable_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_variable_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_hierarchical_variable_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_variable_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_variable_identifier) {
            listener.enterHierarchical_variable_identifier(this);
        }
    };
    // @Override
    Hierarchical_variable_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_variable_identifier) {
            listener.exitHierarchical_variable_identifier(this);
        }
    };
    // @Override
    Hierarchical_variable_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_variable_identifier) {
            return visitor.visitHierarchical_variable_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_variable_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_variable_identifierContext = Hierarchical_variable_identifierContext;
var Hierarchical_task_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_task_identifierContext, _super);
    function Hierarchical_task_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_task_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_task_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_hierarchical_task_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_task_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_task_identifier) {
            listener.enterHierarchical_task_identifier(this);
        }
    };
    // @Override
    Hierarchical_task_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_task_identifier) {
            listener.exitHierarchical_task_identifier(this);
        }
    };
    // @Override
    Hierarchical_task_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_task_identifier) {
            return visitor.visitHierarchical_task_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_task_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_task_identifierContext = Hierarchical_task_identifierContext;
var IdentifierContext = /** @class */ (function (_super) {
    __extends(IdentifierContext, _super);
    function IdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IdentifierContext.prototype.Simple_identifier = function () { return this.tryGetToken(Verilog2001Parser.Simple_identifier, 0); };
    IdentifierContext.prototype.Escaped_identifier = function () { return this.tryGetToken(Verilog2001Parser.Escaped_identifier, 0); };
    Object.defineProperty(IdentifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterIdentifier) {
            listener.enterIdentifier(this);
        }
    };
    // @Override
    IdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitIdentifier) {
            listener.exitIdentifier(this);
        }
    };
    // @Override
    IdentifierContext.prototype.accept = function (visitor) {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IdentifierContext = IdentifierContext;
var Inout_port_identifierContext = /** @class */ (function (_super) {
    __extends(Inout_port_identifierContext, _super);
    function Inout_port_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inout_port_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Inout_port_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_inout_port_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inout_port_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterInout_port_identifier) {
            listener.enterInout_port_identifier(this);
        }
    };
    // @Override
    Inout_port_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitInout_port_identifier) {
            listener.exitInout_port_identifier(this);
        }
    };
    // @Override
    Inout_port_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitInout_port_identifier) {
            return visitor.visitInout_port_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inout_port_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inout_port_identifierContext = Inout_port_identifierContext;
var Input_port_identifierContext = /** @class */ (function (_super) {
    __extends(Input_port_identifierContext, _super);
    function Input_port_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Input_port_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Input_port_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_input_port_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Input_port_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterInput_port_identifier) {
            listener.enterInput_port_identifier(this);
        }
    };
    // @Override
    Input_port_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitInput_port_identifier) {
            listener.exitInput_port_identifier(this);
        }
    };
    // @Override
    Input_port_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitInput_port_identifier) {
            return visitor.visitInput_port_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Input_port_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Input_port_identifierContext = Input_port_identifierContext;
var Instance_identifierContext = /** @class */ (function (_super) {
    __extends(Instance_identifierContext, _super);
    function Instance_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Instance_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Instance_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_instance_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Instance_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterInstance_identifier) {
            listener.enterInstance_identifier(this);
        }
    };
    // @Override
    Instance_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitInstance_identifier) {
            listener.exitInstance_identifier(this);
        }
    };
    // @Override
    Instance_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitInstance_identifier) {
            return visitor.visitInstance_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Instance_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Instance_identifierContext = Instance_identifierContext;
var Library_identifierContext = /** @class */ (function (_super) {
    __extends(Library_identifierContext, _super);
    function Library_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Library_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Library_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_library_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Library_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterLibrary_identifier) {
            listener.enterLibrary_identifier(this);
        }
    };
    // @Override
    Library_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitLibrary_identifier) {
            listener.exitLibrary_identifier(this);
        }
    };
    // @Override
    Library_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitLibrary_identifier) {
            return visitor.visitLibrary_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Library_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Library_identifierContext = Library_identifierContext;
var Memory_identifierContext = /** @class */ (function (_super) {
    __extends(Memory_identifierContext, _super);
    function Memory_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Memory_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Memory_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_memory_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Memory_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterMemory_identifier) {
            listener.enterMemory_identifier(this);
        }
    };
    // @Override
    Memory_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitMemory_identifier) {
            listener.exitMemory_identifier(this);
        }
    };
    // @Override
    Memory_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitMemory_identifier) {
            return visitor.visitMemory_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Memory_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Memory_identifierContext = Memory_identifierContext;
var Module_identifierContext = /** @class */ (function (_super) {
    __extends(Module_identifierContext, _super);
    function Module_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Module_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_identifier) {
            listener.enterModule_identifier(this);
        }
    };
    // @Override
    Module_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_identifier) {
            listener.exitModule_identifier(this);
        }
    };
    // @Override
    Module_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_identifier) {
            return visitor.visitModule_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_identifierContext = Module_identifierContext;
var Module_instance_identifierContext = /** @class */ (function (_super) {
    __extends(Module_instance_identifierContext, _super);
    function Module_instance_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_instance_identifierContext.prototype.arrayed_identifier = function () {
        return this.getRuleContext(0, Arrayed_identifierContext);
    };
    Object.defineProperty(Module_instance_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_module_instance_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_instance_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_instance_identifier) {
            listener.enterModule_instance_identifier(this);
        }
    };
    // @Override
    Module_instance_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_instance_identifier) {
            listener.exitModule_instance_identifier(this);
        }
    };
    // @Override
    Module_instance_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_instance_identifier) {
            return visitor.visitModule_instance_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_instance_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_instance_identifierContext = Module_instance_identifierContext;
var Net_identifierContext = /** @class */ (function (_super) {
    __extends(Net_identifierContext, _super);
    function Net_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Net_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_net_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_identifier) {
            listener.enterNet_identifier(this);
        }
    };
    // @Override
    Net_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_identifier) {
            listener.exitNet_identifier(this);
        }
    };
    // @Override
    Net_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_identifier) {
            return visitor.visitNet_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_identifierContext = Net_identifierContext;
var Output_port_identifierContext = /** @class */ (function (_super) {
    __extends(Output_port_identifierContext, _super);
    function Output_port_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Output_port_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Output_port_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_output_port_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_port_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_port_identifier) {
            listener.enterOutput_port_identifier(this);
        }
    };
    // @Override
    Output_port_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_port_identifier) {
            listener.exitOutput_port_identifier(this);
        }
    };
    // @Override
    Output_port_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_port_identifier) {
            return visitor.visitOutput_port_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_port_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_port_identifierContext = Output_port_identifierContext;
var Parameter_identifierContext = /** @class */ (function (_super) {
    __extends(Parameter_identifierContext, _super);
    function Parameter_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Parameter_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_parameter_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_identifier) {
            listener.enterParameter_identifier(this);
        }
    };
    // @Override
    Parameter_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_identifier) {
            listener.exitParameter_identifier(this);
        }
    };
    // @Override
    Parameter_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_identifier) {
            return visitor.visitParameter_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_identifierContext = Parameter_identifierContext;
var Port_identifierContext = /** @class */ (function (_super) {
    __extends(Port_identifierContext, _super);
    function Port_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Port_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_port_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_identifier) {
            listener.enterPort_identifier(this);
        }
    };
    // @Override
    Port_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_identifier) {
            listener.exitPort_identifier(this);
        }
    };
    // @Override
    Port_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_identifier) {
            return visitor.visitPort_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_identifierContext = Port_identifierContext;
var Real_identifierContext = /** @class */ (function (_super) {
    __extends(Real_identifierContext, _super);
    function Real_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Real_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Real_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_real_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Real_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterReal_identifier) {
            listener.enterReal_identifier(this);
        }
    };
    // @Override
    Real_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitReal_identifier) {
            listener.exitReal_identifier(this);
        }
    };
    // @Override
    Real_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitReal_identifier) {
            return visitor.visitReal_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Real_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Real_identifierContext = Real_identifierContext;
var Simple_arrayed_identifierContext = /** @class */ (function (_super) {
    __extends(Simple_arrayed_identifierContext, _super);
    function Simple_arrayed_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Simple_arrayed_identifierContext.prototype.Simple_identifier = function () { return this.getToken(Verilog2001Parser.Simple_identifier, 0); };
    Simple_arrayed_identifierContext.prototype.range_ = function () {
        return this.tryGetRuleContext(0, Range_Context);
    };
    Object.defineProperty(Simple_arrayed_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_simple_arrayed_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Simple_arrayed_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSimple_arrayed_identifier) {
            listener.enterSimple_arrayed_identifier(this);
        }
    };
    // @Override
    Simple_arrayed_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSimple_arrayed_identifier) {
            listener.exitSimple_arrayed_identifier(this);
        }
    };
    // @Override
    Simple_arrayed_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSimple_arrayed_identifier) {
            return visitor.visitSimple_arrayed_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Simple_arrayed_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Simple_arrayed_identifierContext = Simple_arrayed_identifierContext;
var Simple_hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Simple_hierarchical_identifierContext, _super);
    function Simple_hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Simple_hierarchical_identifierContext.prototype.simple_hierarchical_branch = function () {
        return this.getRuleContext(0, Simple_hierarchical_branchContext);
    };
    Simple_hierarchical_identifierContext.prototype.Escaped_identifier = function () { return this.tryGetToken(Verilog2001Parser.Escaped_identifier, 0); };
    Object.defineProperty(Simple_hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_simple_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Simple_hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSimple_hierarchical_identifier) {
            listener.enterSimple_hierarchical_identifier(this);
        }
    };
    // @Override
    Simple_hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSimple_hierarchical_identifier) {
            listener.exitSimple_hierarchical_identifier(this);
        }
    };
    // @Override
    Simple_hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSimple_hierarchical_identifier) {
            return visitor.visitSimple_hierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Simple_hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Simple_hierarchical_identifierContext = Simple_hierarchical_identifierContext;
var Specparam_identifierContext = /** @class */ (function (_super) {
    __extends(Specparam_identifierContext, _super);
    function Specparam_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Specparam_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Specparam_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_specparam_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Specparam_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecparam_identifier) {
            listener.enterSpecparam_identifier(this);
        }
    };
    // @Override
    Specparam_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecparam_identifier) {
            listener.exitSpecparam_identifier(this);
        }
    };
    // @Override
    Specparam_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSpecparam_identifier) {
            return visitor.visitSpecparam_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Specparam_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Specparam_identifierContext = Specparam_identifierContext;
var System_function_identifierContext = /** @class */ (function (_super) {
    __extends(System_function_identifierContext, _super);
    function System_function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_function_identifierContext.prototype.Dollar_Identifier = function () { return this.getToken(Verilog2001Parser.Dollar_Identifier, 0); };
    Object.defineProperty(System_function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_system_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_function_identifier) {
            listener.enterSystem_function_identifier(this);
        }
    };
    // @Override
    System_function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_function_identifier) {
            listener.exitSystem_function_identifier(this);
        }
    };
    // @Override
    System_function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_function_identifier) {
            return visitor.visitSystem_function_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_function_identifierContext = System_function_identifierContext;
var System_task_identifierContext = /** @class */ (function (_super) {
    __extends(System_task_identifierContext, _super);
    function System_task_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_task_identifierContext.prototype.Dollar_Identifier = function () { return this.getToken(Verilog2001Parser.Dollar_Identifier, 0); };
    Object.defineProperty(System_task_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_system_task_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_task_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_task_identifier) {
            listener.enterSystem_task_identifier(this);
        }
    };
    // @Override
    System_task_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_task_identifier) {
            listener.exitSystem_task_identifier(this);
        }
    };
    // @Override
    System_task_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_task_identifier) {
            return visitor.visitSystem_task_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_task_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_task_identifierContext = System_task_identifierContext;
var Task_identifierContext = /** @class */ (function (_super) {
    __extends(Task_identifierContext, _super);
    function Task_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Task_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_task_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_identifier) {
            listener.enterTask_identifier(this);
        }
    };
    // @Override
    Task_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_identifier) {
            listener.exitTask_identifier(this);
        }
    };
    // @Override
    Task_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_identifier) {
            return visitor.visitTask_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_identifierContext = Task_identifierContext;
var Terminal_identifierContext = /** @class */ (function (_super) {
    __extends(Terminal_identifierContext, _super);
    function Terminal_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Terminal_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Terminal_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_terminal_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Terminal_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTerminal_identifier) {
            listener.enterTerminal_identifier(this);
        }
    };
    // @Override
    Terminal_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTerminal_identifier) {
            listener.exitTerminal_identifier(this);
        }
    };
    // @Override
    Terminal_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitTerminal_identifier) {
            return visitor.visitTerminal_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Terminal_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Terminal_identifierContext = Terminal_identifierContext;
var Text_macro_identifierContext = /** @class */ (function (_super) {
    __extends(Text_macro_identifierContext, _super);
    function Text_macro_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Text_macro_identifierContext.prototype.Simple_identifier = function () { return this.getToken(Verilog2001Parser.Simple_identifier, 0); };
    Object.defineProperty(Text_macro_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_text_macro_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Text_macro_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterText_macro_identifier) {
            listener.enterText_macro_identifier(this);
        }
    };
    // @Override
    Text_macro_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitText_macro_identifier) {
            listener.exitText_macro_identifier(this);
        }
    };
    // @Override
    Text_macro_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitText_macro_identifier) {
            return visitor.visitText_macro_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Text_macro_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Text_macro_identifierContext = Text_macro_identifierContext;
var Topmodule_identifierContext = /** @class */ (function (_super) {
    __extends(Topmodule_identifierContext, _super);
    function Topmodule_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Topmodule_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Topmodule_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_topmodule_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Topmodule_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTopmodule_identifier) {
            listener.enterTopmodule_identifier(this);
        }
    };
    // @Override
    Topmodule_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTopmodule_identifier) {
            listener.exitTopmodule_identifier(this);
        }
    };
    // @Override
    Topmodule_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitTopmodule_identifier) {
            return visitor.visitTopmodule_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Topmodule_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Topmodule_identifierContext = Topmodule_identifierContext;
var Udp_identifierContext = /** @class */ (function (_super) {
    __extends(Udp_identifierContext, _super);
    function Udp_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Udp_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Udp_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_udp_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Udp_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterUdp_identifier) {
            listener.enterUdp_identifier(this);
        }
    };
    // @Override
    Udp_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitUdp_identifier) {
            listener.exitUdp_identifier(this);
        }
    };
    // @Override
    Udp_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitUdp_identifier) {
            return visitor.visitUdp_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Udp_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Udp_identifierContext = Udp_identifierContext;
var Udp_instance_identifierContext = /** @class */ (function (_super) {
    __extends(Udp_instance_identifierContext, _super);
    function Udp_instance_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Udp_instance_identifierContext.prototype.arrayed_identifier = function () {
        return this.getRuleContext(0, Arrayed_identifierContext);
    };
    Object.defineProperty(Udp_instance_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_udp_instance_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Udp_instance_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterUdp_instance_identifier) {
            listener.enterUdp_instance_identifier(this);
        }
    };
    // @Override
    Udp_instance_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitUdp_instance_identifier) {
            listener.exitUdp_instance_identifier(this);
        }
    };
    // @Override
    Udp_instance_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitUdp_instance_identifier) {
            return visitor.visitUdp_instance_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Udp_instance_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Udp_instance_identifierContext = Udp_instance_identifierContext;
var Variable_identifierContext = /** @class */ (function (_super) {
    __extends(Variable_identifierContext, _super);
    function Variable_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Variable_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_variable_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_identifier) {
            listener.enterVariable_identifier(this);
        }
    };
    // @Override
    Variable_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_identifier) {
            listener.exitVariable_identifier(this);
        }
    };
    // @Override
    Variable_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_identifier) {
            return visitor.visitVariable_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_identifierContext = Variable_identifierContext;
var Simple_hierarchical_branchContext = /** @class */ (function (_super) {
    __extends(Simple_hierarchical_branchContext, _super);
    function Simple_hierarchical_branchContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Simple_hierarchical_branchContext.prototype.Simple_identifier = function (i) {
        if (i === undefined) {
            return this.getTokens(Verilog2001Parser.Simple_identifier);
        }
        else {
            return this.getToken(Verilog2001Parser.Simple_identifier, i);
        }
    };
    Simple_hierarchical_branchContext.prototype.Decimal_number = function (i) {
        if (i === undefined) {
            return this.getTokens(Verilog2001Parser.Decimal_number);
        }
        else {
            return this.getToken(Verilog2001Parser.Decimal_number, i);
        }
    };
    Object.defineProperty(Simple_hierarchical_branchContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_simple_hierarchical_branch; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Simple_hierarchical_branchContext.prototype.enterRule = function (listener) {
        if (listener.enterSimple_hierarchical_branch) {
            listener.enterSimple_hierarchical_branch(this);
        }
    };
    // @Override
    Simple_hierarchical_branchContext.prototype.exitRule = function (listener) {
        if (listener.exitSimple_hierarchical_branch) {
            listener.exitSimple_hierarchical_branch(this);
        }
    };
    // @Override
    Simple_hierarchical_branchContext.prototype.accept = function (visitor) {
        if (visitor.visitSimple_hierarchical_branch) {
            return visitor.visitSimple_hierarchical_branch(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Simple_hierarchical_branchContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Simple_hierarchical_branchContext = Simple_hierarchical_branchContext;
var Escaped_hierarchical_branchContext = /** @class */ (function (_super) {
    __extends(Escaped_hierarchical_branchContext, _super);
    function Escaped_hierarchical_branchContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Escaped_hierarchical_branchContext.prototype.Escaped_identifier = function (i) {
        if (i === undefined) {
            return this.getTokens(Verilog2001Parser.Escaped_identifier);
        }
        else {
            return this.getToken(Verilog2001Parser.Escaped_identifier, i);
        }
    };
    Escaped_hierarchical_branchContext.prototype.Decimal_number = function (i) {
        if (i === undefined) {
            return this.getTokens(Verilog2001Parser.Decimal_number);
        }
        else {
            return this.getToken(Verilog2001Parser.Decimal_number, i);
        }
    };
    Object.defineProperty(Escaped_hierarchical_branchContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return Verilog2001Parser.RULE_escaped_hierarchical_branch; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Escaped_hierarchical_branchContext.prototype.enterRule = function (listener) {
        if (listener.enterEscaped_hierarchical_branch) {
            listener.enterEscaped_hierarchical_branch(this);
        }
    };
    // @Override
    Escaped_hierarchical_branchContext.prototype.exitRule = function (listener) {
        if (listener.exitEscaped_hierarchical_branch) {
            listener.exitEscaped_hierarchical_branch(this);
        }
    };
    // @Override
    Escaped_hierarchical_branchContext.prototype.accept = function (visitor) {
        if (visitor.visitEscaped_hierarchical_branch) {
            return visitor.visitEscaped_hierarchical_branch(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Escaped_hierarchical_branchContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Escaped_hierarchical_branchContext = Escaped_hierarchical_branchContext;
