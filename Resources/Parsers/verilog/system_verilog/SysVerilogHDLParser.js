"use strict";
// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/verilog/system_verilog/SysVerilogHDL.g4 by ANTLR 4.7.3-SNAPSHOT
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ATN_1 = require("antlr4ts/atn/ATN");
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var NoViableAltException_1 = require("antlr4ts/NoViableAltException");
var Parser_1 = require("antlr4ts/Parser");
var ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
var ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
var RecognitionException_1 = require("antlr4ts/RecognitionException");
var Token_1 = require("antlr4ts/Token");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var SysVerilogHDLParser = /** @class */ (function (_super) {
    __extends(SysVerilogHDLParser, _super);
    function SysVerilogHDLParser(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new ParserATNSimulator_1.ParserATNSimulator(SysVerilogHDLParser._ATN, _this);
        return _this;
    }
    Object.defineProperty(SysVerilogHDLParser.prototype, "vocabulary", {
        // @Override
        // @NotNull
        get: function () {
            return SysVerilogHDLParser.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SysVerilogHDLParser.prototype, "grammarFileName", {
        // tslint:enable:no-trailing-whitespace
        // @Override
        get: function () { return "SysVerilogHDL.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SysVerilogHDLParser.prototype, "ruleNames", {
        // @Override
        get: function () { return SysVerilogHDLParser.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SysVerilogHDLParser.prototype, "serializedATN", {
        // @Override
        get: function () { return SysVerilogHDLParser._serializedATN; },
        enumerable: true,
        configurable: true
    });
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_keyword = function () {
        var _localctx = new Module_keywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, SysVerilogHDLParser.RULE_module_keyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 890;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Macromodule || _la === SysVerilogHDLParser.Module_keyword_only)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.struct_keyword = function () {
        var _localctx = new Struct_keywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, SysVerilogHDLParser.RULE_struct_keyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 892;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Struct || _la === SysVerilogHDLParser.UnionStruct)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.any_case_keyword = function () {
        var _localctx = new Any_case_keywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, SysVerilogHDLParser.RULE_any_case_keyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 894;
                _la = this._input.LA(1);
                if (!(((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & ((1 << (SysVerilogHDLParser.Case_keyword - 62)) | (1 << (SysVerilogHDLParser.Casez - 62)) | (1 << (SysVerilogHDLParser.Casex - 62)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.semicolon = function () {
        var _localctx = new SemicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, SysVerilogHDLParser.RULE_semicolon);
        try {
            this.state = 900;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 896;
                        this.match(SysVerilogHDLParser.Semicolon);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 897;
                        this.match(SysVerilogHDLParser.T__0);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 898;
                        this.match(SysVerilogHDLParser.Semicolon);
                        this.state = 899;
                        this.match(SysVerilogHDLParser.Semicolon);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.unary_operator = function () {
        var _localctx = new Unary_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, SysVerilogHDLParser.RULE_unary_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 902;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10))) !== 0) || _la === SysVerilogHDLParser.Tilde)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.binary_operator = function () {
        var _localctx = new Binary_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, SysVerilogHDLParser.RULE_binary_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 904;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__11) | (1 << SysVerilogHDLParser.T__12) | (1 << SysVerilogHDLParser.T__13) | (1 << SysVerilogHDLParser.T__14) | (1 << SysVerilogHDLParser.T__15) | (1 << SysVerilogHDLParser.T__16) | (1 << SysVerilogHDLParser.T__17) | (1 << SysVerilogHDLParser.T__18) | (1 << SysVerilogHDLParser.T__19) | (1 << SysVerilogHDLParser.T__20) | (1 << SysVerilogHDLParser.T__21) | (1 << SysVerilogHDLParser.T__22) | (1 << SysVerilogHDLParser.T__23) | (1 << SysVerilogHDLParser.T__24) | (1 << SysVerilogHDLParser.T__25))) !== 0) || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & ((1 << (SysVerilogHDLParser.Forward_slash - 215)) | (1 << (SysVerilogHDLParser.Left_angle_equals - 215)) | (1 << (SysVerilogHDLParser.Star - 215)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.unary_assign_operator = function () {
        var _localctx = new Unary_assign_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, SysVerilogHDLParser.RULE_unary_assign_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 906;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.T__26 || _la === SysVerilogHDLParser.T__27)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.binary_assign_operator = function () {
        var _localctx = new Binary_assign_operatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, SysVerilogHDLParser.RULE_binary_assign_operator);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 908;
                _la = this._input.LA(1);
                if (!(((((_la - 29)) & ~0x1F) === 0 && ((1 << (_la - 29)) & ((1 << (SysVerilogHDLParser.T__28 - 29)) | (1 << (SysVerilogHDLParser.T__29 - 29)) | (1 << (SysVerilogHDLParser.T__30 - 29)) | (1 << (SysVerilogHDLParser.T__31 - 29)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.source_text = function () {
        var _localctx = new Source_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, SysVerilogHDLParser.RULE_source_text);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 910;
                this.description_star();
                this.state = 911;
                this.match(SysVerilogHDLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.description_star = function () {
        var _localctx = new Description_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, SysVerilogHDLParser.RULE_description_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 916;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)) | (1 << (SysVerilogHDLParser.Default_nettype - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Function - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Import - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Tick_timescale - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.Typedef - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        {
                            this.state = 913;
                            this.description();
                        }
                    }
                    this.state = 918;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.header_text = function () {
        var _localctx = new Header_textContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, SysVerilogHDLParser.RULE_header_text);
        try {
            this.state = 922;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Default_nettype:
                case SysVerilogHDLParser.Tick_timescale:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 919;
                        this.compiler_directive();
                    }
                    break;
                case SysVerilogHDLParser.Open_parenthesis:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 920;
                        this.design_attribute();
                    }
                    break;
                case SysVerilogHDLParser.Import:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 921;
                        this.import_package();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.design_attribute = function () {
        var _localctx = new Design_attributeContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, SysVerilogHDLParser.RULE_design_attribute);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 924;
                this.attribute_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.compiler_directive = function () {
        var _localctx = new Compiler_directiveContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, SysVerilogHDLParser.RULE_compiler_directive);
        try {
            this.state = 928;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Tick_timescale:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 926;
                        this.timescale_compiler_directive();
                    }
                    break;
                case SysVerilogHDLParser.Default_nettype:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 927;
                        this.default_nettype_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.description = function () {
        var _localctx = new DescriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, SysVerilogHDLParser.RULE_description);
        var _la;
        try {
            this.state = 951;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 930;
                        this.header_text();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 931;
                        this.package_declaration();
                        this.state = 933;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.T__0 || _la === SysVerilogHDLParser.Semicolon) {
                            {
                                this.state = 932;
                                this.semicolon();
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 935;
                        this.module_declaration();
                        this.state = 937;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.T__0 || _la === SysVerilogHDLParser.Semicolon) {
                            {
                                this.state = 936;
                                this.semicolon();
                            }
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 939;
                        this.function_declaration();
                        this.state = 941;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.T__0 || _la === SysVerilogHDLParser.Semicolon) {
                            {
                                this.state = 940;
                                this.semicolon();
                            }
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 943;
                        this.enum_declaration();
                        this.state = 945;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.T__0 || _la === SysVerilogHDLParser.Semicolon) {
                            {
                                this.state = 944;
                                this.semicolon();
                            }
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 947;
                        this.typedef_declaration();
                        this.state = 949;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.T__0 || _la === SysVerilogHDLParser.Semicolon) {
                            {
                                this.state = 948;
                                this.semicolon();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_declaration = function () {
        var _localctx = new Module_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, SysVerilogHDLParser.RULE_module_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 953;
                this.attribute_instance_star();
                this.state = 954;
                this.module_keyword();
                this.state = 955;
                this.module_identifier();
                this.state = 956;
                this.module_interface();
                this.state = 957;
                this.semicolon();
                this.state = 958;
                this.module_item_star();
                this.state = 959;
                this.match(SysVerilogHDLParser.Endmodule);
                this.state = 961;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 960;
                        this.colon_module_identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_identifier = function () {
        var _localctx = new Module_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, SysVerilogHDLParser.RULE_module_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 963;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_interface = function () {
        var _localctx = new Module_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, SysVerilogHDLParser.RULE_module_interface);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 966;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 965;
                        this.module_parameter_interface();
                    }
                }
                this.state = 969;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Open_parenthesis) {
                    {
                        this.state = 968;
                        this.module_port_interface();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_parameter_interface = function () {
        var _localctx = new Module_parameter_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, SysVerilogHDLParser.RULE_module_parameter_interface);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 971;
                this.match(SysVerilogHDLParser.Hash);
                this.state = 972;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 974;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Parameter || _la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 973;
                        this.list_of_interface_parameters();
                    }
                }
                this.state = 976;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_port_interface = function () {
        var _localctx = new Module_port_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, SysVerilogHDLParser.RULE_module_port_interface);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 978;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 980;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        this.state = 979;
                        this.list_of_interface_ports();
                    }
                }
                this.state = 982;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_item_star = function () {
        var _localctx = new Module_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, SysVerilogHDLParser.RULE_module_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 987;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)) | (1 << (SysVerilogHDLParser.Default_nettype - 42)) | (1 << (SysVerilogHDLParser.Defparam - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Function - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Import - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Localparam - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Parameter - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Task - 170)) | (1 << (SysVerilogHDLParser.Tick_timescale - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Timeprecision - 170)) | (1 << (SysVerilogHDLParser.Timeunit - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.Typedef - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        {
                            this.state = 984;
                            this.module_item();
                        }
                    }
                    this.state = 989;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_item = function () {
        var _localctx = new Module_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, SysVerilogHDLParser.RULE_module_item);
        try {
            this.state = 1000;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 16, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 990;
                        this.import_package();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 991;
                        this.parameter_item_semicolon();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 992;
                        this.attr_port_item_semicolon();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 993;
                        this.attr_variable_item_semicolon();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 994;
                        this.subroutine_item_semicolon();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 995;
                        this.attr_construct_item();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 996;
                        this.attr_generated_instantiation();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 997;
                        this.attr_component_item();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 998;
                        this.compiler_item();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 999;
                        this.type_item();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.colon_module_identifier = function () {
        var _localctx = new Colon_module_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, SysVerilogHDLParser.RULE_colon_module_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1002;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 1003;
                this.module_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.package_declaration = function () {
        var _localctx = new Package_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, SysVerilogHDLParser.RULE_package_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1005;
                this.attribute_instance_star();
                this.state = 1006;
                this.match(SysVerilogHDLParser.Package);
                this.state = 1007;
                this.package_identifier();
                this.state = 1008;
                this.semicolon();
                this.state = 1009;
                this.package_item_star();
                this.state = 1010;
                this.match(SysVerilogHDLParser.Endpackage);
                this.state = 1012;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 1011;
                        this.colon_package_identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.package_identifier = function () {
        var _localctx = new Package_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, SysVerilogHDLParser.RULE_package_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1014;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.colon_package_identifier = function () {
        var _localctx = new Colon_package_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, SysVerilogHDLParser.RULE_colon_package_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1016;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 1017;
                this.package_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.package_item_star = function () {
        var _localctx = new Package_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, SysVerilogHDLParser.RULE_package_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1022;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)) | (1 << (SysVerilogHDLParser.Default_nettype - 42)) | (1 << (SysVerilogHDLParser.Defparam - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Function - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Import - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Localparam - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Parameter - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Task - 170)) | (1 << (SysVerilogHDLParser.Tick_timescale - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Timeprecision - 170)) | (1 << (SysVerilogHDLParser.Timeunit - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.Typedef - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        {
                            this.state = 1019;
                            this.package_item();
                        }
                    }
                    this.state = 1024;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.package_item = function () {
        var _localctx = new Package_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, SysVerilogHDLParser.RULE_package_item);
        try {
            this.state = 1032;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 19, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1025;
                        this.import_package();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1026;
                        this.parameter_item_semicolon();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1027;
                        this.attr_variable_item_semicolon();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1028;
                        this.subroutine_item_semicolon();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1029;
                        this.attr_component_item();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1030;
                        this.compiler_item();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1031;
                        this.type_item();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.import_package = function () {
        var _localctx = new Import_packageContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, SysVerilogHDLParser.RULE_import_package);
        try {
            this.state = 1046;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 20, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1034;
                        this.match(SysVerilogHDLParser.Import);
                        this.state = 1035;
                        this.package_identifier();
                        this.state = 1036;
                        this.match(SysVerilogHDLParser.Double_colon);
                        this.state = 1037;
                        this.match(SysVerilogHDLParser.Star);
                        this.state = 1038;
                        this.semicolon();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1040;
                        this.match(SysVerilogHDLParser.Import);
                        this.state = 1041;
                        this.package_identifier();
                        this.state = 1042;
                        this.match(SysVerilogHDLParser.Double_colon);
                        this.state = 1043;
                        this.package_item_identifier();
                        this.state = 1044;
                        this.semicolon();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.package_item_identifier = function () {
        var _localctx = new Package_item_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, SysVerilogHDLParser.RULE_package_item_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1048;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.parameter_item_semicolon = function () {
        var _localctx = new Parameter_item_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, SysVerilogHDLParser.RULE_parameter_item_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1050;
                this.parameter_item();
                this.state = 1051;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.parameter_item = function () {
        var _localctx = new Parameter_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, SysVerilogHDLParser.RULE_parameter_item);
        try {
            this.state = 1056;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Parameter:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1053;
                        this.parameter_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Localparam:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1054;
                        this.local_parameter_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Defparam:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1055;
                        this.parameter_override();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_port_item_semicolon = function () {
        var _localctx = new Attr_port_item_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, SysVerilogHDLParser.RULE_attr_port_item_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1058;
                this.attribute_instance_star();
                this.state = 1059;
                this.port_declaration();
                this.state = 1060;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_variable_item_semicolon = function () {
        var _localctx = new Attr_variable_item_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, SysVerilogHDLParser.RULE_attr_variable_item_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1062;
                this.attribute_instance_star();
                this.state = 1063;
                this.variable_item();
                this.state = 1064;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_item = function () {
        var _localctx = new Variable_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, SysVerilogHDLParser.RULE_variable_item);
        try {
            this.state = 1081;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 22, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1066;
                        this.net_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1067;
                        this.reg_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1068;
                        this.logic_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1069;
                        this.bits_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1070;
                        this.integer_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1071;
                        this.int_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1072;
                        this.real_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1073;
                        this.time_declaration();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1074;
                        this.realtime_declaration();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1075;
                        this.event_declaration();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1076;
                        this.genvar_declaration();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 1077;
                        this.usertype_variable_declaration();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 1078;
                        this.string_declaration();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 1079;
                        this.struct_declaration();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(_localctx, 15);
                    {
                        this.state = 1080;
                        this.enum_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.subroutine_item_semicolon = function () {
        var _localctx = new Subroutine_item_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, SysVerilogHDLParser.RULE_subroutine_item_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1083;
                this.subroutine_item();
                this.state = 1085;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 23, this._ctx)) {
                    case 1:
                        {
                            this.state = 1084;
                            this.semicolon();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.subroutine_item = function () {
        var _localctx = new Subroutine_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, SysVerilogHDLParser.RULE_subroutine_item);
        try {
            this.state = 1089;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Task:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1087;
                        this.task_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Function:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1088;
                        this.function_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_construct_item = function () {
        var _localctx = new Attr_construct_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, SysVerilogHDLParser.RULE_attr_construct_item);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1091;
                this.attribute_instance_star();
                this.state = 1092;
                this.construct_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.construct_item = function () {
        var _localctx = new Construct_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, SysVerilogHDLParser.RULE_construct_item);
        try {
            this.state = 1098;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Assign:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1094;
                        this.continuous_assign();
                    }
                    break;
                case SysVerilogHDLParser.Initial:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1095;
                        this.initial_construct();
                    }
                    break;
                case SysVerilogHDLParser.Final:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1096;
                        this.final_construct();
                    }
                    break;
                case SysVerilogHDLParser.Always:
                case SysVerilogHDLParser.Always_comb:
                case SysVerilogHDLParser.Always_ff:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1097;
                        this.always_construct();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_component_item = function () {
        var _localctx = new Attr_component_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, SysVerilogHDLParser.RULE_attr_component_item);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1100;
                this.attribute_instance_star();
                this.state = 1101;
                this.component_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.component_item = function () {
        var _localctx = new Component_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, SysVerilogHDLParser.RULE_component_item);
        try {
            this.state = 1105;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1103;
                        this.module_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.And:
                case SysVerilogHDLParser.Buf:
                case SysVerilogHDLParser.Bufif0:
                case SysVerilogHDLParser.Bufif1:
                case SysVerilogHDLParser.Cmos:
                case SysVerilogHDLParser.Nand:
                case SysVerilogHDLParser.Nmos:
                case SysVerilogHDLParser.Nor:
                case SysVerilogHDLParser.Not:
                case SysVerilogHDLParser.Notif0:
                case SysVerilogHDLParser.Notif1:
                case SysVerilogHDLParser.Or:
                case SysVerilogHDLParser.Pmos:
                case SysVerilogHDLParser.Pullup:
                case SysVerilogHDLParser.Pulldown:
                case SysVerilogHDLParser.Rcmos:
                case SysVerilogHDLParser.Rnmos:
                case SysVerilogHDLParser.Rpmos:
                case SysVerilogHDLParser.Rtran:
                case SysVerilogHDLParser.Rtranif0:
                case SysVerilogHDLParser.Rtranif1:
                case SysVerilogHDLParser.Tran:
                case SysVerilogHDLParser.Tranif0:
                case SysVerilogHDLParser.Tranif1:
                case SysVerilogHDLParser.Xnor:
                case SysVerilogHDLParser.Xor:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1104;
                        this.gate_instantiation();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.compiler_item = function () {
        var _localctx = new Compiler_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, SysVerilogHDLParser.RULE_compiler_item);
        try {
            this.state = 1114;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Tick_timescale:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1107;
                        this.timescale_compiler_directive();
                    }
                    break;
                case SysVerilogHDLParser.Timeunit:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1108;
                        this.timeunit_directive();
                        this.state = 1109;
                        this.semicolon();
                    }
                    break;
                case SysVerilogHDLParser.Timeprecision:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1111;
                        this.timeprecision_directive();
                        this.state = 1112;
                        this.semicolon();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.type_item = function () {
        var _localctx = new Type_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, SysVerilogHDLParser.RULE_type_item);
        try {
            this.state = 1120;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Default_nettype:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1116;
                        this.default_nettype_statement();
                    }
                    break;
                case SysVerilogHDLParser.Typedef:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1117;
                        this.typedef_declaration();
                        this.state = 1118;
                        this.semicolon();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.null_item = function () {
        var _localctx = new Null_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, SysVerilogHDLParser.RULE_null_item);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1122;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_interface_parameters = function () {
        var _localctx = new List_of_interface_parametersContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, SysVerilogHDLParser.RULE_list_of_interface_parameters);
        try {
            this.state = 1126;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Parameter:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1124;
                        this.list_of_parameter_declarations();
                    }
                    break;
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1125;
                        this.list_of_parameter_descriptions();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_parameter_declarations = function () {
        var _localctx = new List_of_parameter_declarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, SysVerilogHDLParser.RULE_list_of_parameter_declarations);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1128;
                this.parameter_declaration();
                this.state = 1129;
                this.comma_parameter_declaration_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_parameter_declaration_star = function () {
        var _localctx = new Comma_parameter_declaration_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, SysVerilogHDLParser.RULE_comma_parameter_declaration_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1134;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1131;
                            this.comma_parameter_declaration();
                        }
                    }
                    this.state = 1136;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_parameter_declaration = function () {
        var _localctx = new Comma_parameter_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, SysVerilogHDLParser.RULE_comma_parameter_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1137;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1138;
                this.parameter_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_parameter_descriptions = function () {
        var _localctx = new List_of_parameter_descriptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, SysVerilogHDLParser.RULE_list_of_parameter_descriptions);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1140;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.param_declaration = function () {
        var _localctx = new Param_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, SysVerilogHDLParser.RULE_param_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1143;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1142;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1146;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1145;
                        this.dimension_plus();
                    }
                }
                this.state = 1148;
                this.list_of_hierarchical_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.param_description = function () {
        var _localctx = new Param_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, SysVerilogHDLParser.RULE_param_description);
        try {
            this.state = 1159;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 33, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1150;
                        this.param_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1151;
                        this.logic_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1152;
                        this.integer_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1153;
                        this.int_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1154;
                        this.real_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1155;
                        this.time_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1156;
                        this.realtime_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1157;
                        this.usertype_variable_declaration();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1158;
                        this.string_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.parameter_declaration = function () {
        var _localctx = new Parameter_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, SysVerilogHDLParser.RULE_parameter_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1161;
                this.match(SysVerilogHDLParser.Parameter);
                this.state = 1162;
                this.param_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.local_parameter_declaration = function () {
        var _localctx = new Local_parameter_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, SysVerilogHDLParser.RULE_local_parameter_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1164;
                this.match(SysVerilogHDLParser.Localparam);
                this.state = 1165;
                this.param_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.parameter_override = function () {
        var _localctx = new Parameter_overrideContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, SysVerilogHDLParser.RULE_parameter_override);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1167;
                this.match(SysVerilogHDLParser.Defparam);
                this.state = 1168;
                this.param_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_tf_interface_ports = function () {
        var _localctx = new List_of_tf_interface_portsContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, SysVerilogHDLParser.RULE_list_of_tf_interface_ports);
        try {
            this.state = 1172;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1170;
                        this.list_of_port_identifiers();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1171;
                        this.list_of_tf_port_declarations();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_tf_port_declarations = function () {
        var _localctx = new List_of_tf_port_declarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, SysVerilogHDLParser.RULE_list_of_tf_port_declarations);
        try {
            this.state = 1176;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 35, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1174;
                        this.list_of_tf_port_declarations_comma();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1175;
                        this.list_of_tf_port_declarations_semicolon();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_tf_port_declarations_comma = function () {
        var _localctx = new List_of_tf_port_declarations_commaContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, SysVerilogHDLParser.RULE_list_of_tf_port_declarations_comma);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1178;
                this.attr_tf_port_declaration();
                this.state = 1179;
                this.comma_attr_tf_port_declaration_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_attr_tf_port_declaration_star = function () {
        var _localctx = new Comma_attr_tf_port_declaration_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, SysVerilogHDLParser.RULE_comma_attr_tf_port_declaration_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1184;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1181;
                            this.comma_attr_tf_port_declaration();
                        }
                    }
                    this.state = 1186;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_attr_tf_port_declaration = function () {
        var _localctx = new Comma_attr_tf_port_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, SysVerilogHDLParser.RULE_comma_attr_tf_port_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1187;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1188;
                this.attr_tf_port_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_tf_port_declarations_semicolon = function () {
        var _localctx = new List_of_tf_port_declarations_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, SysVerilogHDLParser.RULE_list_of_tf_port_declarations_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1190;
                this.attr_tf_port_declaration_semicolon_plus();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_tf_port_declaration_semicolon_plus = function () {
        var _localctx = new Attr_tf_port_declaration_semicolon_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon_plus);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1193;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1192;
                            this.attr_tf_port_declaration_semicolon();
                        }
                    }
                    this.state = 1195;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_tf_port_declaration_semicolon_star = function () {
        var _localctx = new Attr_tf_port_declaration_semicolon_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1200;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        {
                            this.state = 1197;
                            this.attr_tf_port_declaration_semicolon();
                        }
                    }
                    this.state = 1202;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_tf_port_declaration_semicolon = function () {
        var _localctx = new Attr_tf_port_declaration_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1203;
                this.attr_tf_port_declaration();
                this.state = 1204;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_tf_port_declaration = function () {
        var _localctx = new Attr_tf_port_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, SysVerilogHDLParser.RULE_attr_tf_port_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1206;
                this.attribute_instance_star();
                this.state = 1207;
                this.tf_port_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.tf_port_declaration = function () {
        var _localctx = new Tf_port_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, SysVerilogHDLParser.RULE_tf_port_declaration);
        try {
            this.state = 1214;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Inout:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1209;
                        this.inout_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Input:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1210;
                        this.input_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Output:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1211;
                        this.output_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Ref:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1212;
                        this.ref_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Automatic:
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                case SysVerilogHDLParser.Const:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Integer:
                case SysVerilogHDLParser.Logic:
                case SysVerilogHDLParser.NONE:
                case SysVerilogHDLParser.Real:
                case SysVerilogHDLParser.Reg:
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Static:
                case SysVerilogHDLParser.SVString:
                case SysVerilogHDLParser.Supply0:
                case SysVerilogHDLParser.Supply1:
                case SysVerilogHDLParser.Time:
                case SysVerilogHDLParser.Tri:
                case SysVerilogHDLParser.Tri_and:
                case SysVerilogHDLParser.Tri_or:
                case SysVerilogHDLParser.Tri_reg:
                case SysVerilogHDLParser.Tri0:
                case SysVerilogHDLParser.Tri1:
                case SysVerilogHDLParser.Unsigned:
                case SysVerilogHDLParser.Uwire:
                case SysVerilogHDLParser.Wand:
                case SysVerilogHDLParser.Wire:
                case SysVerilogHDLParser.Wor:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.Left_bracket:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1213;
                        this.tf_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_interface_ports = function () {
        var _localctx = new List_of_interface_portsContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, SysVerilogHDLParser.RULE_list_of_interface_ports);
        try {
            this.state = 1218;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 40, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1216;
                        this.list_of_port_identifiers();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1217;
                        this.list_of_port_declarations();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_port_identifiers = function () {
        var _localctx = new List_of_port_identifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, SysVerilogHDLParser.RULE_list_of_port_identifiers);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1220;
                this.port_identifier();
                this.state = 1221;
                this.comma_port_identifier_star();
                this.state = 1223;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Comma) {
                    {
                        this.state = 1222;
                        this.match(SysVerilogHDLParser.Comma);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_port_identifier_star = function () {
        var _localctx = new Comma_port_identifier_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, SysVerilogHDLParser.RULE_comma_port_identifier_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1228;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1225;
                                this.comma_port_identifier();
                            }
                        }
                    }
                    this.state = 1230;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 42, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_port_identifier = function () {
        var _localctx = new Comma_port_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, SysVerilogHDLParser.RULE_comma_port_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1231;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1232;
                this.port_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.port_identifier = function () {
        var _localctx = new Port_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, SysVerilogHDLParser.RULE_port_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1234;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_port_declarations = function () {
        var _localctx = new List_of_port_declarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, SysVerilogHDLParser.RULE_list_of_port_declarations);
        try {
            this.state = 1238;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1236;
                        this.list_of_port_declarations_comma();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1237;
                        this.list_of_port_declarations_semicolon();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_port_declarations_comma = function () {
        var _localctx = new List_of_port_declarations_commaContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, SysVerilogHDLParser.RULE_list_of_port_declarations_comma);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1240;
                this.attr_port_declaration();
                this.state = 1241;
                this.comma_attr_port_declaration_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_attr_port_declaration_star = function () {
        var _localctx = new Comma_attr_port_declaration_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, SysVerilogHDLParser.RULE_comma_attr_port_declaration_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1246;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1243;
                            this.comma_attr_port_declaration();
                        }
                    }
                    this.state = 1248;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_attr_port_declaration = function () {
        var _localctx = new Comma_attr_port_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, SysVerilogHDLParser.RULE_comma_attr_port_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1249;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1250;
                this.attr_port_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_port_declarations_semicolon = function () {
        var _localctx = new List_of_port_declarations_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, SysVerilogHDLParser.RULE_list_of_port_declarations_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1252;
                this.attr_port_declaration_semicolon_plus();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_port_declaration_semicolon_plus = function () {
        var _localctx = new Attr_port_declaration_semicolon_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, SysVerilogHDLParser.RULE_attr_port_declaration_semicolon_plus);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1254;
                            this.attr_port_declaration_semicolon();
                        }
                    }
                    this.state = 1257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_port_declaration_semicolon_star = function () {
        var _localctx = new Attr_port_declaration_semicolon_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, SysVerilogHDLParser.RULE_attr_port_declaration_semicolon_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1262;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        {
                            this.state = 1259;
                            this.attr_port_declaration_semicolon();
                        }
                    }
                    this.state = 1264;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_port_declaration_semicolon = function () {
        var _localctx = new Attr_port_declaration_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, SysVerilogHDLParser.RULE_attr_port_declaration_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1265;
                this.attr_port_declaration();
                this.state = 1266;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_port_declaration = function () {
        var _localctx = new Attr_port_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, SysVerilogHDLParser.RULE_attr_port_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1268;
                this.attribute_instance_star();
                this.state = 1269;
                this.port_declaration();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.port_declaration = function () {
        var _localctx = new Port_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, SysVerilogHDLParser.RULE_port_declaration);
        try {
            this.state = 1275;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Inout:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1271;
                        this.inout_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Input:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1272;
                        this.input_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Output:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1273;
                        this.output_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Ref:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1274;
                        this.ref_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.port_description = function () {
        var _localctx = new Port_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, SysVerilogHDLParser.RULE_port_description);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1278;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1277;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1281;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1280;
                        this.dimension_plus();
                    }
                }
                this.state = 1283;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.inout_description = function () {
        var _localctx = new Inout_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, SysVerilogHDLParser.RULE_inout_description);
        try {
            this.state = 1287;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Unsigned:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.Left_bracket:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1285;
                        this.port_description();
                    }
                    break;
                case SysVerilogHDLParser.NONE:
                case SysVerilogHDLParser.Supply0:
                case SysVerilogHDLParser.Supply1:
                case SysVerilogHDLParser.Tri:
                case SysVerilogHDLParser.Tri_and:
                case SysVerilogHDLParser.Tri_or:
                case SysVerilogHDLParser.Tri_reg:
                case SysVerilogHDLParser.Tri0:
                case SysVerilogHDLParser.Tri1:
                case SysVerilogHDLParser.Uwire:
                case SysVerilogHDLParser.Wand:
                case SysVerilogHDLParser.Wire:
                case SysVerilogHDLParser.Wor:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1286;
                        this.net_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.input_description = function () {
        var _localctx = new Input_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, SysVerilogHDLParser.RULE_input_description);
        try {
            this.state = 1300;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 51, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1289;
                        this.port_description();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1290;
                        this.net_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1291;
                        this.reg_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1292;
                        this.logic_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1293;
                        this.bits_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1294;
                        this.int_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1295;
                        this.integer_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1296;
                        this.real_declaration();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1297;
                        this.time_declaration();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1298;
                        this.usertype_variable_declaration();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1299;
                        this.string_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.output_description = function () {
        var _localctx = new Output_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, SysVerilogHDLParser.RULE_output_description);
        try {
            this.state = 1310;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1302;
                        this.port_description();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1303;
                        this.net_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1304;
                        this.reg_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1305;
                        this.logic_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1306;
                        this.integer_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1307;
                        this.time_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1308;
                        this.usertype_variable_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1309;
                        this.string_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.ref_description = function () {
        var _localctx = new Ref_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, SysVerilogHDLParser.RULE_ref_description);
        try {
            this.state = 1320;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 53, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1312;
                        this.port_description();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1313;
                        this.net_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1314;
                        this.reg_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1315;
                        this.logic_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1316;
                        this.integer_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1317;
                        this.time_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1318;
                        this.usertype_variable_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1319;
                        this.string_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.tf_declaration = function () {
        var _localctx = new Tf_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, SysVerilogHDLParser.RULE_tf_declaration);
        try {
            this.state = 1333;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 54, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1322;
                        this.port_description();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1323;
                        this.real_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1324;
                        this.net_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1325;
                        this.reg_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1326;
                        this.logic_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1327;
                        this.bits_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1328;
                        this.int_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1329;
                        this.integer_declaration();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1330;
                        this.time_declaration();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1331;
                        this.usertype_variable_declaration();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 1332;
                        this.string_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.inout_declaration = function () {
        var _localctx = new Inout_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, SysVerilogHDLParser.RULE_inout_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1335;
                this.match(SysVerilogHDLParser.Inout);
                this.state = 1336;
                this.inout_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.input_declaration = function () {
        var _localctx = new Input_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, SysVerilogHDLParser.RULE_input_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1338;
                this.match(SysVerilogHDLParser.Input);
                this.state = 1339;
                this.input_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.output_declaration = function () {
        var _localctx = new Output_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, SysVerilogHDLParser.RULE_output_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1341;
                this.match(SysVerilogHDLParser.Output);
                this.state = 1342;
                this.output_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.ref_declaration = function () {
        var _localctx = new Ref_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, SysVerilogHDLParser.RULE_ref_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1344;
                this.match(SysVerilogHDLParser.Ref);
                this.state = 1345;
                this.ref_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.user_type = function () {
        var _localctx = new User_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 178, SysVerilogHDLParser.RULE_user_type);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1347;
                this.user_type_identifer();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.user_type_identifer = function () {
        var _localctx = new User_type_identiferContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, SysVerilogHDLParser.RULE_user_type_identifer);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1349;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.dimension_plus = function () {
        var _localctx = new Dimension_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, SysVerilogHDLParser.RULE_dimension_plus);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1352;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 1351;
                                    this.dimension();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 1354;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.dimension_star = function () {
        var _localctx = new Dimension_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, SysVerilogHDLParser.RULE_dimension_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        {
                            this.state = 1356;
                            this.dimension();
                        }
                    }
                    this.state = 1361;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.dimension = function () {
        var _localctx = new DimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, SysVerilogHDLParser.RULE_dimension);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1362;
                this.match(SysVerilogHDLParser.Left_bracket);
                this.state = 1363;
                this.range_expression();
                this.state = 1364;
                this.match(SysVerilogHDLParser.Right_bracket);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.range_expression = function () {
        var _localctx = new Range_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, SysVerilogHDLParser.RULE_range_expression);
        try {
            this.state = 1370;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1366;
                        this.index_expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1367;
                        this.sb_range();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1368;
                        this.base_increment_range();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1369;
                        this.base_decrement_range();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.index_expression = function () {
        var _localctx = new Index_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, SysVerilogHDLParser.RULE_index_expression);
        try {
            this.state = 1375;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.T__1:
                case SysVerilogHDLParser.T__2:
                case SysVerilogHDLParser.T__3:
                case SysVerilogHDLParser.T__4:
                case SysVerilogHDLParser.T__5:
                case SysVerilogHDLParser.T__6:
                case SysVerilogHDLParser.T__7:
                case SysVerilogHDLParser.T__8:
                case SysVerilogHDLParser.T__9:
                case SysVerilogHDLParser.T__10:
                case SysVerilogHDLParser.T__26:
                case SysVerilogHDLParser.T__27:
                case SysVerilogHDLParser.Binary_number:
                case SysVerilogHDLParser.Decimal_number:
                case SysVerilogHDLParser.Fixed_point_number:
                case SysVerilogHDLParser.Hex_number:
                case SysVerilogHDLParser.Octal_number:
                case SysVerilogHDLParser.Real_exp_form:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Unsigned:
                case SysVerilogHDLParser.Dollar_Identifier:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.String_literal:
                case SysVerilogHDLParser.Left_curly_bracket:
                case SysVerilogHDLParser.Open_parenthesis:
                case SysVerilogHDLParser.Quote:
                case SysVerilogHDLParser.Tilde:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1372;
                        this.expression();
                    }
                    break;
                case SysVerilogHDLParser.Dollar:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1373;
                        this.match(SysVerilogHDLParser.Dollar);
                    }
                    break;
                case SysVerilogHDLParser.Star:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1374;
                        this.match(SysVerilogHDLParser.Star);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.sb_range = function () {
        var _localctx = new Sb_rangeContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, SysVerilogHDLParser.RULE_sb_range);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1377;
                this.base_expression();
                this.state = 1378;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 1379;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.base_increment_range = function () {
        var _localctx = new Base_increment_rangeContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, SysVerilogHDLParser.RULE_base_increment_range);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1381;
                this.base_expression();
                this.state = 1382;
                this.match(SysVerilogHDLParser.Plus_colon);
                this.state = 1383;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.base_decrement_range = function () {
        var _localctx = new Base_decrement_rangeContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, SysVerilogHDLParser.RULE_base_decrement_range);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1385;
                this.base_expression();
                this.state = 1386;
                this.match(SysVerilogHDLParser.Minus_colon);
                this.state = 1387;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.base_expression = function () {
        var _localctx = new Base_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, SysVerilogHDLParser.RULE_base_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1389;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.net_type = function () {
        var _localctx = new Net_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, SysVerilogHDLParser.RULE_net_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1391;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.NONE || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.drive_strength = function () {
        var _localctx = new Drive_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, SysVerilogHDLParser.RULE_drive_strength);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1393;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 1394;
                this.drive_strength_value_0();
                this.state = 1395;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1396;
                this.drive_strength_value_1();
                this.state = 1397;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.drive_strength_value_0 = function () {
        var _localctx = new Drive_strength_value_0Context(this._ctx, this.state);
        this.enterRule(_localctx, 204, SysVerilogHDLParser.RULE_drive_strength_value_0);
        try {
            this.state = 1403;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Pull0:
                case SysVerilogHDLParser.Strong0:
                case SysVerilogHDLParser.Supply0:
                case SysVerilogHDLParser.Weak0:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1399;
                        this.strength0();
                    }
                    break;
                case SysVerilogHDLParser.Pull1:
                case SysVerilogHDLParser.Strong1:
                case SysVerilogHDLParser.Supply1:
                case SysVerilogHDLParser.Weak1:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1400;
                        this.strength1();
                    }
                    break;
                case SysVerilogHDLParser.Highz0:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1401;
                        this.highz0();
                    }
                    break;
                case SysVerilogHDLParser.Highz1:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1402;
                        this.highz1();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.drive_strength_value_1 = function () {
        var _localctx = new Drive_strength_value_1Context(this._ctx, this.state);
        this.enterRule(_localctx, 206, SysVerilogHDLParser.RULE_drive_strength_value_1);
        try {
            this.state = 1409;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Pull0:
                case SysVerilogHDLParser.Strong0:
                case SysVerilogHDLParser.Supply0:
                case SysVerilogHDLParser.Weak0:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1405;
                        this.strength0();
                    }
                    break;
                case SysVerilogHDLParser.Pull1:
                case SysVerilogHDLParser.Strong1:
                case SysVerilogHDLParser.Supply1:
                case SysVerilogHDLParser.Weak1:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1406;
                        this.strength1();
                    }
                    break;
                case SysVerilogHDLParser.Highz0:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1407;
                        this.highz0();
                    }
                    break;
                case SysVerilogHDLParser.Highz1:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1408;
                        this.highz1();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.strength0 = function () {
        var _localctx = new Strength0Context(this._ctx, this.state);
        this.enterRule(_localctx, 208, SysVerilogHDLParser.RULE_strength0);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1411;
                _la = this._input.LA(1);
                if (!(((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & ((1 << (SysVerilogHDLParser.Pull0 - 140)) | (1 << (SysVerilogHDLParser.Strong0 - 140)) | (1 << (SysVerilogHDLParser.Supply0 - 140)))) !== 0) || _la === SysVerilogHDLParser.Weak0)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.strength1 = function () {
        var _localctx = new Strength1Context(this._ctx, this.state);
        this.enterRule(_localctx, 210, SysVerilogHDLParser.RULE_strength1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1413;
                _la = this._input.LA(1);
                if (!(((((_la - 141)) & ~0x1F) === 0 && ((1 << (_la - 141)) & ((1 << (SysVerilogHDLParser.Pull1 - 141)) | (1 << (SysVerilogHDLParser.Strong1 - 141)) | (1 << (SysVerilogHDLParser.Supply1 - 141)))) !== 0) || _la === SysVerilogHDLParser.Weak1)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.highz0 = function () {
        var _localctx = new Highz0Context(this._ctx, this.state);
        this.enterRule(_localctx, 212, SysVerilogHDLParser.RULE_highz0);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1415;
                this.match(SysVerilogHDLParser.Highz0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.highz1 = function () {
        var _localctx = new Highz1Context(this._ctx, this.state);
        this.enterRule(_localctx, 214, SysVerilogHDLParser.RULE_highz1);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1417;
                this.match(SysVerilogHDLParser.Highz1);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.charge_strength = function () {
        var _localctx = new Charge_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, SysVerilogHDLParser.RULE_charge_strength);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1419;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 1420;
                this.charge_size();
                this.state = 1421;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.charge_size = function () {
        var _localctx = new Charge_sizeContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, SysVerilogHDLParser.RULE_charge_size);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1423;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Large || _la === SysVerilogHDLParser.Medium || _la === SysVerilogHDLParser.Small)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_variable_descriptions = function () {
        var _localctx = new List_of_variable_descriptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, SysVerilogHDLParser.RULE_list_of_variable_descriptions);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1425;
                this.variable_description();
                this.state = 1426;
                this.comma_variable_description_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_variable_description_star = function () {
        var _localctx = new Comma_variable_description_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, SysVerilogHDLParser.RULE_comma_variable_description_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1431;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1428;
                                this.comma_variable_description();
                            }
                        }
                    }
                    this.state = 1433;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_variable_description = function () {
        var _localctx = new Comma_variable_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, SysVerilogHDLParser.RULE_comma_variable_description);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1434;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1435;
                this.variable_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_description = function () {
        var _localctx = new Variable_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, SysVerilogHDLParser.RULE_variable_description);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1437;
                this.variable_identifier();
                this.state = 1439;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 62, this._ctx)) {
                    case 1:
                        {
                            this.state = 1438;
                            this.dimension_plus();
                        }
                        break;
                }
                this.state = 1443;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Equal) {
                    {
                        this.state = 1441;
                        this.match(SysVerilogHDLParser.Equal);
                        this.state = 1442;
                        this.expression();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_identifier = function () {
        var _localctx = new Variable_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, SysVerilogHDLParser.RULE_variable_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1445;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_hierarchical_variable_descriptions = function () {
        var _localctx = new List_of_hierarchical_variable_descriptionsContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, SysVerilogHDLParser.RULE_list_of_hierarchical_variable_descriptions);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1447;
                this.hierarchical_variable_description();
                this.state = 1448;
                this.comma_hierarchical_variable_description_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_hierarchical_variable_description_star = function () {
        var _localctx = new Comma_hierarchical_variable_description_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, SysVerilogHDLParser.RULE_comma_hierarchical_variable_description_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1453;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1450;
                                this.comma_hierarchical_variable_description();
                            }
                        }
                    }
                    this.state = 1455;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_hierarchical_variable_description = function () {
        var _localctx = new Comma_hierarchical_variable_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, SysVerilogHDLParser.RULE_comma_hierarchical_variable_description);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1456;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1457;
                this.hierarchical_variable_description();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_variable_description = function () {
        var _localctx = new Hierarchical_variable_descriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, SysVerilogHDLParser.RULE_hierarchical_variable_description);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1459;
                this.hierarchical_variable_identifier();
                this.state = 1461;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1460;
                        this.dimension_plus();
                    }
                }
                this.state = 1465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Equal) {
                    {
                        this.state = 1463;
                        this.match(SysVerilogHDLParser.Equal);
                        this.state = 1464;
                        this.expression();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_variable_identifier = function () {
        var _localctx = new Hierarchical_variable_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, SysVerilogHDLParser.RULE_hierarchical_variable_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1467;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.net_declaration = function () {
        var _localctx = new Net_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, SysVerilogHDLParser.RULE_net_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1469;
                this.net_type();
                this.state = 1471;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 67, this._ctx)) {
                    case 1:
                        {
                            this.state = 1470;
                            this.user_type();
                        }
                        break;
                }
                this.state = 1474;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 68, this._ctx)) {
                    case 1:
                        {
                            this.state = 1473;
                            this.drive_strength();
                        }
                        break;
                }
                this.state = 1477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Open_parenthesis) {
                    {
                        this.state = 1476;
                        this.charge_strength();
                    }
                }
                this.state = 1480;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Scalared || _la === SysVerilogHDLParser.Vectored) {
                    {
                        this.state = 1479;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Scalared || _la === SysVerilogHDLParser.Vectored)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1483;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1482;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1486;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1485;
                        this.dimension_plus();
                    }
                }
                this.state = 1489;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1488;
                        this.delay();
                    }
                }
                this.state = 1491;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.reg_declaration = function () {
        var _localctx = new Reg_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, SysVerilogHDLParser.RULE_reg_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1493;
                this.match(SysVerilogHDLParser.Reg);
                this.state = 1495;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1494;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1498;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1497;
                        this.dimension_plus();
                    }
                }
                this.state = 1500;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.logic_declaration = function () {
        var _localctx = new Logic_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, SysVerilogHDLParser.RULE_logic_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1502;
                this.match(SysVerilogHDLParser.Logic);
                this.state = 1504;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1503;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1507;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1506;
                        this.dimension_plus();
                    }
                }
                this.state = 1509;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.bits_type = function () {
        var _localctx = new Bits_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, SysVerilogHDLParser.RULE_bits_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1511;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Bit || _la === SysVerilogHDLParser.Byte)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.bits_declaration = function () {
        var _localctx = new Bits_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, SysVerilogHDLParser.RULE_bits_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1513;
                this.bits_type();
                this.state = 1515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1514;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1518;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1517;
                        this.dimension_plus();
                    }
                }
                this.state = 1520;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.integer_declaration = function () {
        var _localctx = new Integer_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, SysVerilogHDLParser.RULE_integer_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1523;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Automatic) {
                    {
                        this.state = 1522;
                        this.match(SysVerilogHDLParser.Automatic);
                    }
                }
                this.state = 1525;
                this.match(SysVerilogHDLParser.Integer);
                this.state = 1527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1526;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1529;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.int_declaration = function () {
        var _localctx = new Int_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, SysVerilogHDLParser.RULE_int_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Automatic || _la === SysVerilogHDLParser.Const || _la === SysVerilogHDLParser.Static) {
                    {
                        this.state = 1531;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Automatic || _la === SysVerilogHDLParser.Const || _la === SysVerilogHDLParser.Static)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1534;
                this.match(SysVerilogHDLParser.Int);
                this.state = 1536;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1535;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1538;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.real_declaration = function () {
        var _localctx = new Real_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, SysVerilogHDLParser.RULE_real_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1540;
                this.match(SysVerilogHDLParser.Real);
                this.state = 1541;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.time_declaration = function () {
        var _localctx = new Time_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, SysVerilogHDLParser.RULE_time_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1543;
                this.match(SysVerilogHDLParser.Time);
                this.state = 1544;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.realtime_declaration = function () {
        var _localctx = new Realtime_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, SysVerilogHDLParser.RULE_realtime_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1546;
                this.match(SysVerilogHDLParser.Realtime);
                this.state = 1547;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_declaration = function () {
        var _localctx = new Event_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 260, SysVerilogHDLParser.RULE_event_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1549;
                this.match(SysVerilogHDLParser.Event_keyword);
                this.state = 1550;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.genvar_declaration = function () {
        var _localctx = new Genvar_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, SysVerilogHDLParser.RULE_genvar_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1552;
                this.match(SysVerilogHDLParser.Genvar);
                this.state = 1553;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.usertype_variable_declaration = function () {
        var _localctx = new Usertype_variable_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, SysVerilogHDLParser.RULE_usertype_variable_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1556;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Automatic) {
                    {
                        this.state = 1555;
                        this.match(SysVerilogHDLParser.Automatic);
                    }
                }
                this.state = 1558;
                this.user_type();
                this.state = 1560;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1559;
                        this.dimension();
                    }
                }
                this.state = 1562;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.string_declaration = function () {
        var _localctx = new String_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 266, SysVerilogHDLParser.RULE_string_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1564;
                this.match(SysVerilogHDLParser.SVString);
                this.state = 1565;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.struct_declaration = function () {
        var _localctx = new Struct_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 268, SysVerilogHDLParser.RULE_struct_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1567;
                this.struct_type();
                this.state = 1568;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enum_declaration = function () {
        var _localctx = new Enum_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, SysVerilogHDLParser.RULE_enum_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1570;
                this.enumerated_type();
                this.state = 1571;
                this.list_of_variable_descriptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_declaration = function () {
        var _localctx = new Function_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, SysVerilogHDLParser.RULE_function_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1573;
                this.match(SysVerilogHDLParser.Function);
                this.state = 1575;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Automatic) {
                    {
                        this.state = 1574;
                        this.match(SysVerilogHDLParser.Automatic);
                    }
                }
                this.state = 1578;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1577;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1581;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 88, this._ctx)) {
                    case 1:
                        {
                            this.state = 1580;
                            this.function_type();
                        }
                        break;
                }
                this.state = 1584;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1583;
                        this.dimension();
                    }
                }
                this.state = 1586;
                this.function_identifier();
                this.state = 1588;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Open_parenthesis) {
                    {
                        this.state = 1587;
                        this.function_interface();
                    }
                }
                this.state = 1590;
                this.semicolon();
                this.state = 1591;
                this.function_item_declaration_star();
                this.state = 1592;
                this.function_statement();
                this.state = 1593;
                this.match(SysVerilogHDLParser.Endfunction);
                this.state = 1595;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 1594;
                        this.colon_function_identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_type = function () {
        var _localctx = new Function_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, SysVerilogHDLParser.RULE_function_type);
        try {
            this.state = 1607;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Logic:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1597;
                        this.match(SysVerilogHDLParser.Logic);
                    }
                    break;
                case SysVerilogHDLParser.Integer:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1598;
                        this.match(SysVerilogHDLParser.Integer);
                    }
                    break;
                case SysVerilogHDLParser.Int:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1599;
                        this.match(SysVerilogHDLParser.Int);
                    }
                    break;
                case SysVerilogHDLParser.Real:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1600;
                        this.match(SysVerilogHDLParser.Real);
                    }
                    break;
                case SysVerilogHDLParser.Realtime:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1601;
                        this.match(SysVerilogHDLParser.Realtime);
                    }
                    break;
                case SysVerilogHDLParser.Time:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1602;
                        this.match(SysVerilogHDLParser.Time);
                    }
                    break;
                case SysVerilogHDLParser.Reg:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1603;
                        this.match(SysVerilogHDLParser.Reg);
                    }
                    break;
                case SysVerilogHDLParser.SVString:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1604;
                        this.match(SysVerilogHDLParser.SVString);
                    }
                    break;
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1605;
                        this.bits_type();
                    }
                    break;
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 1606;
                        this.user_type();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_identifier = function () {
        var _localctx = new Function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, SysVerilogHDLParser.RULE_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1609;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_interface = function () {
        var _localctx = new Function_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, SysVerilogHDLParser.RULE_function_interface);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1611;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 1613;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        this.state = 1612;
                        this.list_of_tf_interface_ports();
                    }
                }
                this.state = 1615;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_item_declaration_star = function () {
        var _localctx = new Function_item_declaration_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, SysVerilogHDLParser.RULE_function_item_declaration_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1620;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1617;
                                this.function_item_declaration_semicolon();
                            }
                        }
                    }
                    this.state = 1622;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_item_declaration_semicolon = function () {
        var _localctx = new Function_item_declaration_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, SysVerilogHDLParser.RULE_function_item_declaration_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1623;
                this.function_item_declaration();
                this.state = 1624;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_item_declaration = function () {
        var _localctx = new Function_item_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, SysVerilogHDLParser.RULE_function_item_declaration);
        try {
            this.state = 1628;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Automatic:
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                case SysVerilogHDLParser.Const:
                case SysVerilogHDLParser.Event_keyword:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Integer:
                case SysVerilogHDLParser.Localparam:
                case SysVerilogHDLParser.Logic:
                case SysVerilogHDLParser.Parameter:
                case SysVerilogHDLParser.Real:
                case SysVerilogHDLParser.Realtime:
                case SysVerilogHDLParser.Reg:
                case SysVerilogHDLParser.Static:
                case SysVerilogHDLParser.SVString:
                case SysVerilogHDLParser.Time:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1626;
                        this.block_item_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Inout:
                case SysVerilogHDLParser.Input:
                case SysVerilogHDLParser.Output:
                case SysVerilogHDLParser.Ref:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1627;
                        this.port_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_statement = function () {
        var _localctx = new Function_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, SysVerilogHDLParser.RULE_function_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1630;
                this.statement_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.colon_function_identifier = function () {
        var _localctx = new Colon_function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, SysVerilogHDLParser.RULE_colon_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1632;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 1633;
                this.function_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_declaration = function () {
        var _localctx = new Task_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, SysVerilogHDLParser.RULE_task_declaration);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1635;
                this.match(SysVerilogHDLParser.Task);
                this.state = 1637;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Automatic) {
                    {
                        this.state = 1636;
                        this.match(SysVerilogHDLParser.Automatic);
                    }
                }
                this.state = 1639;
                this.task_identifier();
                this.state = 1641;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Open_parenthesis) {
                    {
                        this.state = 1640;
                        this.task_interface();
                    }
                }
                this.state = 1643;
                this.semicolon();
                this.state = 1644;
                this.task_item_declaration_star();
                this.state = 1645;
                this.task_statement();
                this.state = 1646;
                this.match(SysVerilogHDLParser.Endtask);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_identifier = function () {
        var _localctx = new Task_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, SysVerilogHDLParser.RULE_task_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1648;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_interface = function () {
        var _localctx = new Task_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, SysVerilogHDLParser.RULE_task_interface);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1650;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 1652;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        this.state = 1651;
                        this.list_of_tf_interface_ports();
                    }
                }
                this.state = 1654;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_item_declaration_semicolon = function () {
        var _localctx = new Task_item_declaration_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, SysVerilogHDLParser.RULE_task_item_declaration_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1656;
                this.task_item_declaration();
                this.state = 1657;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_item_declaration = function () {
        var _localctx = new Task_item_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, SysVerilogHDLParser.RULE_task_item_declaration);
        try {
            this.state = 1661;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Automatic:
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                case SysVerilogHDLParser.Const:
                case SysVerilogHDLParser.Event_keyword:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Integer:
                case SysVerilogHDLParser.Localparam:
                case SysVerilogHDLParser.Logic:
                case SysVerilogHDLParser.Parameter:
                case SysVerilogHDLParser.Real:
                case SysVerilogHDLParser.Realtime:
                case SysVerilogHDLParser.Reg:
                case SysVerilogHDLParser.Static:
                case SysVerilogHDLParser.SVString:
                case SysVerilogHDLParser.Time:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1659;
                        this.block_item_declaration();
                    }
                    break;
                case SysVerilogHDLParser.Inout:
                case SysVerilogHDLParser.Input:
                case SysVerilogHDLParser.Output:
                case SysVerilogHDLParser.Ref:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1660;
                        this.port_declaration();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_item_declaration_star = function () {
        var _localctx = new Task_item_declaration_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, SysVerilogHDLParser.RULE_task_item_declaration_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1666;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 100, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1663;
                                this.task_item_declaration_semicolon();
                            }
                        }
                    }
                    this.state = 1668;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 100, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_statement = function () {
        var _localctx = new Task_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, SysVerilogHDLParser.RULE_task_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1669;
                this.statement_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.struct_item_semicolon = function () {
        var _localctx = new Struct_item_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, SysVerilogHDLParser.RULE_struct_item_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1671;
                this.struct_item();
                this.state = 1672;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.struct_item_star = function () {
        var _localctx = new Struct_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, SysVerilogHDLParser.RULE_struct_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1677;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (((((_la - 55)) & ~0x1F) === 0 && ((1 << (_la - 55)) & ((1 << (SysVerilogHDLParser.Automatic - 55)) | (1 << (SysVerilogHDLParser.Bit - 55)) | (1 << (SysVerilogHDLParser.Byte - 55)) | (1 << (SysVerilogHDLParser.Const - 55)))) !== 0) || ((((_la - 109)) & ~0x1F) === 0 && ((1 << (_la - 109)) & ((1 << (SysVerilogHDLParser.Int - 109)) | (1 << (SysVerilogHDLParser.Integer - 109)) | (1 << (SysVerilogHDLParser.Logic - 109)))) !== 0) || _la === SysVerilogHDLParser.Static || _la === SysVerilogHDLParser.Time || _la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        {
                            this.state = 1674;
                            this.struct_item_semicolon();
                        }
                    }
                    this.state = 1679;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.struct_item = function () {
        var _localctx = new Struct_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, SysVerilogHDLParser.RULE_struct_item);
        try {
            this.state = 1686;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1680;
                        this.logic_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1681;
                        this.bits_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1682;
                        this.int_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1683;
                        this.integer_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1684;
                        this.usertype_variable_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1685;
                        this.time_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.struct_type = function () {
        var _localctx = new Struct_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, SysVerilogHDLParser.RULE_struct_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1688;
                this.struct_keyword();
                this.state = 1690;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Packed) {
                    {
                        this.state = 1689;
                        this.match(SysVerilogHDLParser.Packed);
                    }
                }
                this.state = 1692;
                this.match(SysVerilogHDLParser.Left_curly_bracket);
                this.state = 1693;
                this.struct_item_star();
                this.state = 1694;
                this.match(SysVerilogHDLParser.Right_curly_bracket);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enum_type = function () {
        var _localctx = new Enum_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, SysVerilogHDLParser.RULE_enum_type);
        try {
            this.state = 1700;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Integer:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1696;
                        this.match(SysVerilogHDLParser.Integer);
                    }
                    break;
                case SysVerilogHDLParser.Logic:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1697;
                        this.match(SysVerilogHDLParser.Logic);
                    }
                    break;
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1698;
                        this.bits_type();
                    }
                    break;
                case SysVerilogHDLParser.Int:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1699;
                        this.match(SysVerilogHDLParser.Int);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_enum_items = function () {
        var _localctx = new List_of_enum_itemsContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, SysVerilogHDLParser.RULE_list_of_enum_items);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1702;
                this.enum_item();
                this.state = 1703;
                this.comma_enum_item_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enum_item = function () {
        var _localctx = new Enum_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, SysVerilogHDLParser.RULE_enum_item);
        try {
            this.state = 1710;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 105, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1705;
                        this.enum_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1706;
                        this.enum_identifier();
                        this.state = 1707;
                        this.match(SysVerilogHDLParser.Equal);
                        this.state = 1708;
                        this.expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enum_identifier = function () {
        var _localctx = new Enum_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, SysVerilogHDLParser.RULE_enum_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1712;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_enum_item_star = function () {
        var _localctx = new Comma_enum_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, SysVerilogHDLParser.RULE_comma_enum_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1717;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1714;
                            this.comma_enum_item();
                        }
                    }
                    this.state = 1719;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_enum_item = function () {
        var _localctx = new Comma_enum_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, SysVerilogHDLParser.RULE_comma_enum_item);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1720;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1721;
                this.enum_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enumerated_type = function () {
        var _localctx = new Enumerated_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, SysVerilogHDLParser.RULE_enumerated_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1723;
                this.match(SysVerilogHDLParser.Enum);
                this.state = 1725;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Bit || _la === SysVerilogHDLParser.Byte || ((((_la - 109)) & ~0x1F) === 0 && ((1 << (_la - 109)) & ((1 << (SysVerilogHDLParser.Int - 109)) | (1 << (SysVerilogHDLParser.Integer - 109)) | (1 << (SysVerilogHDLParser.Logic - 109)))) !== 0)) {
                    {
                        this.state = 1724;
                        this.enum_type();
                    }
                }
                this.state = 1728;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 1727;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 1731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1730;
                        this.dimension();
                    }
                }
                this.state = 1733;
                this.match(SysVerilogHDLParser.Left_curly_bracket);
                this.state = 1734;
                this.list_of_enum_items();
                this.state = 1735;
                this.match(SysVerilogHDLParser.Right_curly_bracket);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_instantiation = function () {
        var _localctx = new Module_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, SysVerilogHDLParser.RULE_module_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1737;
                this.module_identifier();
                this.state = 1739;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1738;
                        this.parameter_interface_assignments();
                    }
                }
                this.state = 1741;
                this.list_of_module_instances();
                this.state = 1742;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.parameter_interface_assignments = function () {
        var _localctx = new Parameter_interface_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, SysVerilogHDLParser.RULE_parameter_interface_assignments);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1744;
                this.match(SysVerilogHDLParser.Hash);
                this.state = 1745;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 1747;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Dot - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                    {
                        this.state = 1746;
                        this.list_of_interface_assignments();
                    }
                }
                this.state = 1749;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_interface_assignments = function () {
        var _localctx = new List_of_interface_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, SysVerilogHDLParser.RULE_list_of_interface_assignments);
        try {
            this.state = 1753;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.T__1:
                case SysVerilogHDLParser.T__2:
                case SysVerilogHDLParser.T__3:
                case SysVerilogHDLParser.T__4:
                case SysVerilogHDLParser.T__5:
                case SysVerilogHDLParser.T__6:
                case SysVerilogHDLParser.T__7:
                case SysVerilogHDLParser.T__8:
                case SysVerilogHDLParser.T__9:
                case SysVerilogHDLParser.T__10:
                case SysVerilogHDLParser.T__26:
                case SysVerilogHDLParser.T__27:
                case SysVerilogHDLParser.Binary_number:
                case SysVerilogHDLParser.Decimal_number:
                case SysVerilogHDLParser.Fixed_point_number:
                case SysVerilogHDLParser.Hex_number:
                case SysVerilogHDLParser.Octal_number:
                case SysVerilogHDLParser.Real_exp_form:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Unsigned:
                case SysVerilogHDLParser.Dollar_Identifier:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.String_literal:
                case SysVerilogHDLParser.Left_curly_bracket:
                case SysVerilogHDLParser.Open_parenthesis:
                case SysVerilogHDLParser.Quote:
                case SysVerilogHDLParser.Tilde:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1751;
                        this.list_of_ordered_interface_assignments();
                    }
                    break;
                case SysVerilogHDLParser.Dot:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1752;
                        this.list_of_named_interface_assignments();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_ordered_interface_assignments = function () {
        var _localctx = new List_of_ordered_interface_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, SysVerilogHDLParser.RULE_list_of_ordered_interface_assignments);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1755;
                this.ordered_interface_assignment();
                this.state = 1756;
                this.comma_ordered_interface_assignment_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_ordered_interface_assignment_star = function () {
        var _localctx = new Comma_ordered_interface_assignment_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, SysVerilogHDLParser.RULE_comma_ordered_interface_assignment_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1761;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1758;
                            this.comma_ordered_interface_assignment();
                        }
                    }
                    this.state = 1763;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_ordered_interface_assignment = function () {
        var _localctx = new Comma_ordered_interface_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, SysVerilogHDLParser.RULE_comma_ordered_interface_assignment);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1764;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1766;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                    {
                        this.state = 1765;
                        this.ordered_interface_assignment();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.ordered_interface_assignment = function () {
        var _localctx = new Ordered_interface_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, SysVerilogHDLParser.RULE_ordered_interface_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1768;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_named_interface_assignments = function () {
        var _localctx = new List_of_named_interface_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 340, SysVerilogHDLParser.RULE_list_of_named_interface_assignments);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1770;
                this.named_interface_assignment();
                this.state = 1771;
                this.comma_named_interface_assignment_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_named_interface_assignment_star = function () {
        var _localctx = new Comma_named_interface_assignment_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, SysVerilogHDLParser.RULE_comma_named_interface_assignment_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1776;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1773;
                            this.comma_named_interface_assignment();
                        }
                    }
                    this.state = 1778;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_named_interface_assignment = function () {
        var _localctx = new Comma_named_interface_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, SysVerilogHDLParser.RULE_comma_named_interface_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1779;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1780;
                this.named_interface_assignment();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.named_interface_assignment = function () {
        var _localctx = new Named_interface_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, SysVerilogHDLParser.RULE_named_interface_assignment);
        var _la;
        try {
            this.state = 1793;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 118, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1782;
                        this.match(SysVerilogHDLParser.Dot);
                        this.state = 1783;
                        this.identifier();
                        this.state = 1789;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.Open_parenthesis) {
                            {
                                this.state = 1784;
                                this.match(SysVerilogHDLParser.Open_parenthesis);
                                this.state = 1786;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                                    {
                                        this.state = 1785;
                                        this.expression();
                                    }
                                }
                                this.state = 1788;
                                this.match(SysVerilogHDLParser.Close_parenthesis);
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1791;
                        this.match(SysVerilogHDLParser.Dot);
                        this.state = 1792;
                        this.match(SysVerilogHDLParser.Star);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_module_instances = function () {
        var _localctx = new List_of_module_instancesContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, SysVerilogHDLParser.RULE_list_of_module_instances);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1795;
                this.module_instance();
                this.state = 1796;
                this.comma_module_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_module_instance_star = function () {
        var _localctx = new Comma_module_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, SysVerilogHDLParser.RULE_comma_module_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1801;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1798;
                            this.comma_module_instance();
                        }
                    }
                    this.state = 1803;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_module_instance = function () {
        var _localctx = new Comma_module_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, SysVerilogHDLParser.RULE_comma_module_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1804;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1805;
                this.module_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_instance = function () {
        var _localctx = new Module_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, SysVerilogHDLParser.RULE_module_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1807;
                this.module_instance_identifier();
                this.state = 1809;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Open_parenthesis) {
                    {
                        this.state = 1808;
                        this.port_interface_assignments();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.module_instance_identifier = function () {
        var _localctx = new Module_instance_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, SysVerilogHDLParser.RULE_module_instance_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1811;
                this.arrayed_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.arrayed_identifier = function () {
        var _localctx = new Arrayed_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, SysVerilogHDLParser.RULE_arrayed_identifier);
        try {
            this.state = 1815;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1813;
                        this.simple_arrayed_identifier();
                    }
                    break;
                case SysVerilogHDLParser.Escaped_identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1814;
                        this.escaped_arrayed_identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.simple_arrayed_identifier = function () {
        var _localctx = new Simple_arrayed_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, SysVerilogHDLParser.RULE_simple_arrayed_identifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1817;
                this.match(SysVerilogHDLParser.Simple_identifier);
                this.state = 1819;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1818;
                        this.dimension();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.escaped_arrayed_identifier = function () {
        var _localctx = new Escaped_arrayed_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, SysVerilogHDLParser.RULE_escaped_arrayed_identifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1821;
                this.match(SysVerilogHDLParser.Escaped_identifier);
                this.state = 1823;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 1822;
                        this.dimension();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.port_interface_assignments = function () {
        var _localctx = new Port_interface_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, SysVerilogHDLParser.RULE_port_interface_assignments);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1825;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 1827;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Dot - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                    {
                        this.state = 1826;
                        this.list_of_interface_assignments();
                    }
                }
                this.state = 1829;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.delay = function () {
        var _localctx = new DelayContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, SysVerilogHDLParser.RULE_delay);
        try {
            this.state = 1838;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 125, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1831;
                        this.match(SysVerilogHDLParser.Hash);
                        this.state = 1832;
                        this.delay_value();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1833;
                        this.match(SysVerilogHDLParser.Hash);
                        this.state = 1834;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 1835;
                        this.list_of_delay_values();
                        this.state = 1836;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_delay_values = function () {
        var _localctx = new List_of_delay_valuesContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, SysVerilogHDLParser.RULE_list_of_delay_values);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1840;
                this.delay_value();
                this.state = 1841;
                this.comma_delay_value_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_delay_value_star = function () {
        var _localctx = new Comma_delay_value_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, SysVerilogHDLParser.RULE_comma_delay_value_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1846;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 1843;
                            this.comma_delay_value();
                        }
                    }
                    this.state = 1848;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_delay_value = function () {
        var _localctx = new Comma_delay_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, SysVerilogHDLParser.RULE_comma_delay_value);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1849;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 1850;
                this.delay_value();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.delay_value = function () {
        var _localctx = new Delay_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, SysVerilogHDLParser.RULE_delay_value);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1852;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pulldown_strength = function () {
        var _localctx = new Pulldown_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 376, SysVerilogHDLParser.RULE_pulldown_strength);
        try {
            this.state = 1870;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 127, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1854;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 1855;
                        this.strength0();
                        this.state = 1856;
                        this.match(SysVerilogHDLParser.Comma);
                        this.state = 1857;
                        this.strength1();
                        this.state = 1858;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1860;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 1861;
                        this.strength1();
                        this.state = 1862;
                        this.match(SysVerilogHDLParser.Comma);
                        this.state = 1863;
                        this.strength0();
                        this.state = 1864;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1866;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 1867;
                        this.strength0();
                        this.state = 1868;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pullup_strength = function () {
        var _localctx = new Pullup_strengthContext(this._ctx, this.state);
        this.enterRule(_localctx, 378, SysVerilogHDLParser.RULE_pullup_strength);
        try {
            this.state = 1888;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 128, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1872;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 1873;
                        this.strength0();
                        this.state = 1874;
                        this.match(SysVerilogHDLParser.Comma);
                        this.state = 1875;
                        this.strength1();
                        this.state = 1876;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1878;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 1879;
                        this.strength1();
                        this.state = 1880;
                        this.match(SysVerilogHDLParser.Comma);
                        this.state = 1881;
                        this.strength0();
                        this.state = 1882;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1884;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 1885;
                        this.strength1();
                        this.state = 1886;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.gate_instance_identifier = function () {
        var _localctx = new Gate_instance_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 380, SysVerilogHDLParser.RULE_gate_instance_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1890;
                this.arrayed_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.gate_instantiation = function () {
        var _localctx = new Gate_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 382, SysVerilogHDLParser.RULE_gate_instantiation);
        try {
            this.state = 1901;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Cmos:
                case SysVerilogHDLParser.Rcmos:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1892;
                        this.cmos_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.Nmos:
                case SysVerilogHDLParser.Pmos:
                case SysVerilogHDLParser.Rnmos:
                case SysVerilogHDLParser.Rpmos:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1893;
                        this.mos_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.Rtran:
                case SysVerilogHDLParser.Tran:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1894;
                        this.pass_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.Pulldown:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1895;
                        this.pulldown_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.Pullup:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1896;
                        this.pullup_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.Bufif0:
                case SysVerilogHDLParser.Bufif1:
                case SysVerilogHDLParser.Notif0:
                case SysVerilogHDLParser.Notif1:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1897;
                        this.enable_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.And:
                case SysVerilogHDLParser.Nand:
                case SysVerilogHDLParser.Nor:
                case SysVerilogHDLParser.Or:
                case SysVerilogHDLParser.Xnor:
                case SysVerilogHDLParser.Xor:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1898;
                        this.n_input_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.Buf:
                case SysVerilogHDLParser.Not:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1899;
                        this.n_output_instantiation();
                    }
                    break;
                case SysVerilogHDLParser.Rtranif0:
                case SysVerilogHDLParser.Rtranif1:
                case SysVerilogHDLParser.Tranif0:
                case SysVerilogHDLParser.Tranif1:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1900;
                        this.pass_enable_instantiation();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enable_gatetype = function () {
        var _localctx = new Enable_gatetypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 384, SysVerilogHDLParser.RULE_enable_gatetype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1903;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Bufif0 || _la === SysVerilogHDLParser.Bufif1 || _la === SysVerilogHDLParser.Notif0 || _la === SysVerilogHDLParser.Notif1)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.mos_switchtype = function () {
        var _localctx = new Mos_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 386, SysVerilogHDLParser.RULE_mos_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1905;
                _la = this._input.LA(1);
                if (!(((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (SysVerilogHDLParser.Nmos - 124)) | (1 << (SysVerilogHDLParser.Pmos - 124)) | (1 << (SysVerilogHDLParser.Rnmos - 124)) | (1 << (SysVerilogHDLParser.Rpmos - 124)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.cmos_switchtype = function () {
        var _localctx = new Cmos_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 388, SysVerilogHDLParser.RULE_cmos_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1907;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Cmos || _la === SysVerilogHDLParser.Rcmos)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_output_gatetype = function () {
        var _localctx = new N_output_gatetypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 390, SysVerilogHDLParser.RULE_n_output_gatetype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1909;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Buf || _la === SysVerilogHDLParser.Not)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_input_gatetype = function () {
        var _localctx = new N_input_gatetypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 392, SysVerilogHDLParser.RULE_n_input_gatetype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1911;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.And || ((((_la - 122)) & ~0x1F) === 0 && ((1 << (_la - 122)) & ((1 << (SysVerilogHDLParser.Nand - 122)) | (1 << (SysVerilogHDLParser.Nor - 122)) | (1 << (SysVerilogHDLParser.Or - 122)))) !== 0) || _la === SysVerilogHDLParser.Xnor || _la === SysVerilogHDLParser.Xor)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_switchtype = function () {
        var _localctx = new Pass_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 394, SysVerilogHDLParser.RULE_pass_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1913;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Rtran || _la === SysVerilogHDLParser.Tran)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_enable_switchtype = function () {
        var _localctx = new Pass_enable_switchtypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 396, SysVerilogHDLParser.RULE_pass_enable_switchtype);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1915;
                _la = this._input.LA(1);
                if (!(((((_la - 157)) & ~0x1F) === 0 && ((1 << (_la - 157)) & ((1 << (SysVerilogHDLParser.Rtranif0 - 157)) | (1 << (SysVerilogHDLParser.Rtranif1 - 157)) | (1 << (SysVerilogHDLParser.Tranif0 - 157)) | (1 << (SysVerilogHDLParser.Tranif1 - 157)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pulldown_instantiation = function () {
        var _localctx = new Pulldown_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 398, SysVerilogHDLParser.RULE_pulldown_instantiation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1917;
                this.match(SysVerilogHDLParser.Pulldown);
                this.state = 1919;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 130, this._ctx)) {
                    case 1:
                        {
                            this.state = 1918;
                            this.pulldown_strength();
                        }
                        break;
                }
                this.state = 1921;
                this.list_of_pull_gate_instance();
                this.state = 1922;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pullup_instantiation = function () {
        var _localctx = new Pullup_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 400, SysVerilogHDLParser.RULE_pullup_instantiation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1924;
                this.match(SysVerilogHDLParser.Pullup);
                this.state = 1926;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 131, this._ctx)) {
                    case 1:
                        {
                            this.state = 1925;
                            this.pullup_strength();
                        }
                        break;
                }
                this.state = 1928;
                this.list_of_pull_gate_instance();
                this.state = 1929;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enable_instantiation = function () {
        var _localctx = new Enable_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 402, SysVerilogHDLParser.RULE_enable_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1931;
                this.enable_gatetype();
                this.state = 1933;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 132, this._ctx)) {
                    case 1:
                        {
                            this.state = 1932;
                            this.drive_strength();
                        }
                        break;
                }
                this.state = 1936;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1935;
                        this.delay();
                    }
                }
                this.state = 1938;
                this.list_of_enable_gate_instance();
                this.state = 1939;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.mos_instantiation = function () {
        var _localctx = new Mos_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 404, SysVerilogHDLParser.RULE_mos_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1941;
                this.mos_switchtype();
                this.state = 1943;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1942;
                        this.delay();
                    }
                }
                this.state = 1945;
                this.list_of_mos_switch_instance();
                this.state = 1946;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.cmos_instantiation = function () {
        var _localctx = new Cmos_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 406, SysVerilogHDLParser.RULE_cmos_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1948;
                this.cmos_switchtype();
                this.state = 1950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1949;
                        this.delay();
                    }
                }
                this.state = 1952;
                this.list_of_cmos_switch_instance();
                this.state = 1953;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_output_instantiation = function () {
        var _localctx = new N_output_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 408, SysVerilogHDLParser.RULE_n_output_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1955;
                this.n_output_gatetype();
                this.state = 1957;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 136, this._ctx)) {
                    case 1:
                        {
                            this.state = 1956;
                            this.drive_strength();
                        }
                        break;
                }
                this.state = 1960;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1959;
                        this.delay();
                    }
                }
                this.state = 1962;
                this.list_of_n_output_gate_instance();
                this.state = 1963;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_input_instantiation = function () {
        var _localctx = new N_input_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 410, SysVerilogHDLParser.RULE_n_input_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1965;
                this.n_input_gatetype();
                this.state = 1967;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 138, this._ctx)) {
                    case 1:
                        {
                            this.state = 1966;
                            this.drive_strength();
                        }
                        break;
                }
                this.state = 1970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1969;
                        this.delay();
                    }
                }
                this.state = 1972;
                this.list_of_n_input_gate_instance();
                this.state = 1973;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_instantiation = function () {
        var _localctx = new Pass_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 412, SysVerilogHDLParser.RULE_pass_instantiation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1975;
                this.pass_switchtype();
                this.state = 1976;
                this.list_of_pass_switch_instance();
                this.state = 1977;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_enable_instantiation = function () {
        var _localctx = new Pass_enable_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 414, SysVerilogHDLParser.RULE_pass_enable_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1979;
                this.pass_enable_switchtype();
                this.state = 1981;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 1980;
                        this.delay();
                    }
                }
                this.state = 1983;
                this.list_of_pass_enable_switch_instance();
                this.state = 1984;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_pull_gate_instance = function () {
        var _localctx = new List_of_pull_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 416, SysVerilogHDLParser.RULE_list_of_pull_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1986;
                this.pull_gate_instance();
                this.state = 1987;
                this.comma_pull_gate_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_enable_gate_instance = function () {
        var _localctx = new List_of_enable_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 418, SysVerilogHDLParser.RULE_list_of_enable_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1989;
                this.enable_gate_instance();
                this.state = 1990;
                this.comma_enable_gate_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_mos_switch_instance = function () {
        var _localctx = new List_of_mos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 420, SysVerilogHDLParser.RULE_list_of_mos_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1992;
                this.mos_switch_instance();
                this.state = 1993;
                this.comma_mos_switch_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_cmos_switch_instance = function () {
        var _localctx = new List_of_cmos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 422, SysVerilogHDLParser.RULE_list_of_cmos_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1995;
                this.cmos_switch_instance();
                this.state = 1996;
                this.comma_cmos_switch_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_n_input_gate_instance = function () {
        var _localctx = new List_of_n_input_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 424, SysVerilogHDLParser.RULE_list_of_n_input_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1998;
                this.n_input_gate_instance();
                this.state = 1999;
                this.comma_n_input_gate_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_n_output_gate_instance = function () {
        var _localctx = new List_of_n_output_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 426, SysVerilogHDLParser.RULE_list_of_n_output_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2001;
                this.n_output_gate_instance();
                this.state = 2002;
                this.comma_n_output_gate_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_pass_switch_instance = function () {
        var _localctx = new List_of_pass_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 428, SysVerilogHDLParser.RULE_list_of_pass_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2004;
                this.pass_switch_instance();
                this.state = 2005;
                this.comma_pass_switch_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_pass_enable_switch_instance = function () {
        var _localctx = new List_of_pass_enable_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 430, SysVerilogHDLParser.RULE_list_of_pass_enable_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2007;
                this.pass_enable_switch_instance();
                this.state = 2008;
                this.comma_pass_enable_switch_instance_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_pull_gate_instance_star = function () {
        var _localctx = new Comma_pull_gate_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 432, SysVerilogHDLParser.RULE_comma_pull_gate_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2013;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2010;
                            this.comma_pull_gate_instance();
                        }
                    }
                    this.state = 2015;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_enable_gate_instance_star = function () {
        var _localctx = new Comma_enable_gate_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 434, SysVerilogHDLParser.RULE_comma_enable_gate_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2019;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2016;
                            this.comma_enable_gate_instance();
                        }
                    }
                    this.state = 2021;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_mos_switch_instance_star = function () {
        var _localctx = new Comma_mos_switch_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 436, SysVerilogHDLParser.RULE_comma_mos_switch_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2025;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2022;
                            this.comma_mos_switch_instance();
                        }
                    }
                    this.state = 2027;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_cmos_switch_instance_star = function () {
        var _localctx = new Comma_cmos_switch_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 438, SysVerilogHDLParser.RULE_comma_cmos_switch_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2031;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2028;
                            this.comma_cmos_switch_instance();
                        }
                    }
                    this.state = 2033;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_n_input_gate_instance_star = function () {
        var _localctx = new Comma_n_input_gate_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 440, SysVerilogHDLParser.RULE_comma_n_input_gate_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2034;
                            this.comma_n_input_gate_instance();
                        }
                    }
                    this.state = 2039;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_n_output_gate_instance_star = function () {
        var _localctx = new Comma_n_output_gate_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 442, SysVerilogHDLParser.RULE_comma_n_output_gate_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2043;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2040;
                            this.comma_n_output_gate_instance();
                        }
                    }
                    this.state = 2045;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_pass_switch_instance_star = function () {
        var _localctx = new Comma_pass_switch_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 444, SysVerilogHDLParser.RULE_comma_pass_switch_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2046;
                            this.comma_pass_switch_instance();
                        }
                    }
                    this.state = 2051;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_pass_enable_switch_instance_star = function () {
        var _localctx = new Comma_pass_enable_switch_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 446, SysVerilogHDLParser.RULE_comma_pass_enable_switch_instance_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2055;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2052;
                            this.comma_pass_enable_switch_instance();
                        }
                    }
                    this.state = 2057;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_pull_gate_instance = function () {
        var _localctx = new Comma_pull_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 448, SysVerilogHDLParser.RULE_comma_pull_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2058;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2059;
                this.pull_gate_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_enable_gate_instance = function () {
        var _localctx = new Comma_enable_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 450, SysVerilogHDLParser.RULE_comma_enable_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2061;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2062;
                this.enable_gate_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_mos_switch_instance = function () {
        var _localctx = new Comma_mos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 452, SysVerilogHDLParser.RULE_comma_mos_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2064;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2065;
                this.mos_switch_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_cmos_switch_instance = function () {
        var _localctx = new Comma_cmos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 454, SysVerilogHDLParser.RULE_comma_cmos_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2067;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2068;
                this.cmos_switch_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_n_input_gate_instance = function () {
        var _localctx = new Comma_n_input_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 456, SysVerilogHDLParser.RULE_comma_n_input_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2070;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2071;
                this.n_input_gate_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_n_output_gate_instance = function () {
        var _localctx = new Comma_n_output_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 458, SysVerilogHDLParser.RULE_comma_n_output_gate_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2073;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2074;
                this.n_output_gate_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_pass_switch_instance = function () {
        var _localctx = new Comma_pass_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 460, SysVerilogHDLParser.RULE_comma_pass_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2076;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2077;
                this.pass_switch_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_pass_enable_switch_instance = function () {
        var _localctx = new Comma_pass_enable_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 462, SysVerilogHDLParser.RULE_comma_pass_enable_switch_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2079;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2080;
                this.pass_enable_switch_instance();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pull_gate_instance = function () {
        var _localctx = new Pull_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 464, SysVerilogHDLParser.RULE_pull_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2083;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2082;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2085;
                this.pull_gate_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enable_gate_instance = function () {
        var _localctx = new Enable_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 466, SysVerilogHDLParser.RULE_enable_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2088;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2087;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2090;
                this.enable_gate_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.mos_switch_instance = function () {
        var _localctx = new Mos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 468, SysVerilogHDLParser.RULE_mos_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2093;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2092;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2095;
                this.mos_switch_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.cmos_switch_instance = function () {
        var _localctx = new Cmos_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 470, SysVerilogHDLParser.RULE_cmos_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2097;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2100;
                this.cmos_switch_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_input_gate_instance = function () {
        var _localctx = new N_input_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 472, SysVerilogHDLParser.RULE_n_input_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2103;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2102;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2105;
                this.n_input_gate_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_output_gate_instance = function () {
        var _localctx = new N_output_gate_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 474, SysVerilogHDLParser.RULE_n_output_gate_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2108;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2107;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2110;
                this.n_output_gate_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_switch_instance = function () {
        var _localctx = new Pass_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 476, SysVerilogHDLParser.RULE_pass_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2113;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2112;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2115;
                this.pass_switch_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_enable_switch_instance = function () {
        var _localctx = new Pass_enable_switch_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 478, SysVerilogHDLParser.RULE_pass_enable_switch_instance);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2118;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2117;
                        this.gate_instance_identifier();
                    }
                }
                this.state = 2120;
                this.pass_enable_switch_interface();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pull_gate_interface = function () {
        var _localctx = new Pull_gate_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 480, SysVerilogHDLParser.RULE_pull_gate_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2122;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2123;
                this.output_terminal();
                this.state = 2124;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enable_gate_interface = function () {
        var _localctx = new Enable_gate_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 482, SysVerilogHDLParser.RULE_enable_gate_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2126;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2127;
                this.output_terminal();
                this.state = 2128;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2129;
                this.input_terminal();
                this.state = 2130;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2131;
                this.enable_terminal();
                this.state = 2132;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.mos_switch_interface = function () {
        var _localctx = new Mos_switch_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 484, SysVerilogHDLParser.RULE_mos_switch_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2134;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2135;
                this.output_terminal();
                this.state = 2136;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2137;
                this.input_terminal();
                this.state = 2138;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2139;
                this.enable_terminal();
                this.state = 2140;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.cmos_switch_interface = function () {
        var _localctx = new Cmos_switch_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 486, SysVerilogHDLParser.RULE_cmos_switch_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2142;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2143;
                this.output_terminal();
                this.state = 2144;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2145;
                this.input_terminal();
                this.state = 2146;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2147;
                this.ncontrol_terminal();
                this.state = 2148;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2149;
                this.pcontrol_terminal();
                this.state = 2150;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_input_gate_interface = function () {
        var _localctx = new N_input_gate_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 488, SysVerilogHDLParser.RULE_n_input_gate_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2152;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2153;
                this.output_terminal();
                this.state = 2154;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2155;
                this.list_of_input_terminals();
                this.state = 2156;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.n_output_gate_interface = function () {
        var _localctx = new N_output_gate_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 490, SysVerilogHDLParser.RULE_n_output_gate_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2158;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2159;
                this.list_of_output_terminals();
                this.state = 2160;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2161;
                this.input_terminal();
                this.state = 2162;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_switch_interface = function () {
        var _localctx = new Pass_switch_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 492, SysVerilogHDLParser.RULE_pass_switch_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2164;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2165;
                this.inout_terminal();
                this.state = 2166;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2167;
                this.inout_terminal();
                this.state = 2168;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pass_enable_switch_interface = function () {
        var _localctx = new Pass_enable_switch_interfaceContext(this._ctx, this.state);
        this.enterRule(_localctx, 494, SysVerilogHDLParser.RULE_pass_enable_switch_interface);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2170;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2171;
                this.inout_terminal();
                this.state = 2172;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2173;
                this.inout_terminal();
                this.state = 2174;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2175;
                this.enable_terminal();
                this.state = 2176;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_input_terminals = function () {
        var _localctx = new List_of_input_terminalsContext(this._ctx, this.state);
        this.enterRule(_localctx, 496, SysVerilogHDLParser.RULE_list_of_input_terminals);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2178;
                this.input_terminal();
                this.state = 2179;
                this.comma_input_terminal_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_output_terminals = function () {
        var _localctx = new List_of_output_terminalsContext(this._ctx, this.state);
        this.enterRule(_localctx, 498, SysVerilogHDLParser.RULE_list_of_output_terminals);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2181;
                this.output_terminal();
                this.state = 2182;
                this.comma_output_terminal_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_input_terminal_star = function () {
        var _localctx = new Comma_input_terminal_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 500, SysVerilogHDLParser.RULE_comma_input_terminal_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2187;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2184;
                            this.comma_input_terminal();
                        }
                    }
                    this.state = 2189;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_output_terminal_star = function () {
        var _localctx = new Comma_output_terminal_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 502, SysVerilogHDLParser.RULE_comma_output_terminal_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2193;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2190;
                                this.comma_output_terminal();
                            }
                        }
                    }
                    this.state = 2195;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 158, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_input_terminal = function () {
        var _localctx = new Comma_input_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 504, SysVerilogHDLParser.RULE_comma_input_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2196;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2197;
                this.input_terminal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_output_terminal = function () {
        var _localctx = new Comma_output_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 506, SysVerilogHDLParser.RULE_comma_output_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2199;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2200;
                this.output_terminal();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.enable_terminal = function () {
        var _localctx = new Enable_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 508, SysVerilogHDLParser.RULE_enable_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2202;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.input_terminal = function () {
        var _localctx = new Input_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 510, SysVerilogHDLParser.RULE_input_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2204;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.inout_terminal = function () {
        var _localctx = new Inout_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 512, SysVerilogHDLParser.RULE_inout_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2206;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.ncontrol_terminal = function () {
        var _localctx = new Ncontrol_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 514, SysVerilogHDLParser.RULE_ncontrol_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2208;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.output_terminal = function () {
        var _localctx = new Output_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 516, SysVerilogHDLParser.RULE_output_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2210;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.pcontrol_terminal = function () {
        var _localctx = new Pcontrol_terminalContext(this._ctx, this.state);
        this.enterRule(_localctx, 518, SysVerilogHDLParser.RULE_pcontrol_terminal);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2212;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.statement_star = function () {
        var _localctx = new Statement_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 520, SysVerilogHDLParser.RULE_statement_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2217;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__0) | (1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Semicolon - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        {
                            this.state = 2214;
                            this.statement_semicolon();
                        }
                    }
                    this.state = 2219;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.statement_semicolon = function () {
        var _localctx = new Statement_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 522, SysVerilogHDLParser.RULE_statement_semicolon);
        try {
            this.state = 2226;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.T__1:
                case SysVerilogHDLParser.T__2:
                case SysVerilogHDLParser.T__3:
                case SysVerilogHDLParser.T__4:
                case SysVerilogHDLParser.T__5:
                case SysVerilogHDLParser.T__6:
                case SysVerilogHDLParser.T__7:
                case SysVerilogHDLParser.T__8:
                case SysVerilogHDLParser.T__9:
                case SysVerilogHDLParser.T__10:
                case SysVerilogHDLParser.T__26:
                case SysVerilogHDLParser.T__27:
                case SysVerilogHDLParser.Binary_number:
                case SysVerilogHDLParser.Decimal_number:
                case SysVerilogHDLParser.Fixed_point_number:
                case SysVerilogHDLParser.Hex_number:
                case SysVerilogHDLParser.Octal_number:
                case SysVerilogHDLParser.Real_exp_form:
                case SysVerilogHDLParser.Always:
                case SysVerilogHDLParser.Always_comb:
                case SysVerilogHDLParser.Always_ff:
                case SysVerilogHDLParser.And:
                case SysVerilogHDLParser.Assert:
                case SysVerilogHDLParser.Assign:
                case SysVerilogHDLParser.Automatic:
                case SysVerilogHDLParser.Begin:
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Buf:
                case SysVerilogHDLParser.Bufif0:
                case SysVerilogHDLParser.Bufif1:
                case SysVerilogHDLParser.Byte:
                case SysVerilogHDLParser.Case_keyword:
                case SysVerilogHDLParser.Casez:
                case SysVerilogHDLParser.Casex:
                case SysVerilogHDLParser.Cmos:
                case SysVerilogHDLParser.Const:
                case SysVerilogHDLParser.Deassign:
                case SysVerilogHDLParser.Disable:
                case SysVerilogHDLParser.Do:
                case SysVerilogHDLParser.Enum:
                case SysVerilogHDLParser.Event_keyword:
                case SysVerilogHDLParser.Final:
                case SysVerilogHDLParser.For:
                case SysVerilogHDLParser.Force:
                case SysVerilogHDLParser.Forever:
                case SysVerilogHDLParser.Fork:
                case SysVerilogHDLParser.Generate:
                case SysVerilogHDLParser.Genvar:
                case SysVerilogHDLParser.If:
                case SysVerilogHDLParser.Initial:
                case SysVerilogHDLParser.Inout:
                case SysVerilogHDLParser.Input:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Integer:
                case SysVerilogHDLParser.Logic:
                case SysVerilogHDLParser.Macromodule:
                case SysVerilogHDLParser.Module_keyword_only:
                case SysVerilogHDLParser.Nand:
                case SysVerilogHDLParser.Nmos:
                case SysVerilogHDLParser.NONE:
                case SysVerilogHDLParser.Nor:
                case SysVerilogHDLParser.Not:
                case SysVerilogHDLParser.Notif0:
                case SysVerilogHDLParser.Notif1:
                case SysVerilogHDLParser.Or:
                case SysVerilogHDLParser.Output:
                case SysVerilogHDLParser.Package:
                case SysVerilogHDLParser.Pmos:
                case SysVerilogHDLParser.Pullup:
                case SysVerilogHDLParser.Pulldown:
                case SysVerilogHDLParser.Rcmos:
                case SysVerilogHDLParser.Real:
                case SysVerilogHDLParser.Realtime:
                case SysVerilogHDLParser.Ref:
                case SysVerilogHDLParser.Reg:
                case SysVerilogHDLParser.Release:
                case SysVerilogHDLParser.Repeat:
                case SysVerilogHDLParser.Return:
                case SysVerilogHDLParser.Rnmos:
                case SysVerilogHDLParser.Rpmos:
                case SysVerilogHDLParser.Rtran:
                case SysVerilogHDLParser.Rtranif0:
                case SysVerilogHDLParser.Rtranif1:
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Static:
                case SysVerilogHDLParser.SVString:
                case SysVerilogHDLParser.Struct:
                case SysVerilogHDLParser.Supply0:
                case SysVerilogHDLParser.Supply1:
                case SysVerilogHDLParser.Time:
                case SysVerilogHDLParser.Tran:
                case SysVerilogHDLParser.Tranif0:
                case SysVerilogHDLParser.Tranif1:
                case SysVerilogHDLParser.Tri:
                case SysVerilogHDLParser.Tri_and:
                case SysVerilogHDLParser.Tri_or:
                case SysVerilogHDLParser.Tri_reg:
                case SysVerilogHDLParser.Tri0:
                case SysVerilogHDLParser.Tri1:
                case SysVerilogHDLParser.UnionStruct:
                case SysVerilogHDLParser.Unsigned:
                case SysVerilogHDLParser.Uwire:
                case SysVerilogHDLParser.Wait:
                case SysVerilogHDLParser.Wand:
                case SysVerilogHDLParser.While:
                case SysVerilogHDLParser.Wire:
                case SysVerilogHDLParser.Wor:
                case SysVerilogHDLParser.Xnor:
                case SysVerilogHDLParser.Xor:
                case SysVerilogHDLParser.Dollar_Identifier:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.String_literal:
                case SysVerilogHDLParser.At:
                case SysVerilogHDLParser.Dash_right_angle:
                case SysVerilogHDLParser.Hash:
                case SysVerilogHDLParser.Left_bracket:
                case SysVerilogHDLParser.Left_curly_bracket:
                case SysVerilogHDLParser.Open_parenthesis:
                case SysVerilogHDLParser.Quote:
                case SysVerilogHDLParser.Tilde:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2220;
                        this.attribute_instance_star();
                        this.state = 2221;
                        this.statement();
                        this.state = 2223;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 160, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2222;
                                    this.semicolon();
                                }
                                break;
                        }
                    }
                    break;
                case SysVerilogHDLParser.T__0:
                case SysVerilogHDLParser.Semicolon:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2225;
                        this.null_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.statement = function () {
        var _localctx = new StatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 524, SysVerilogHDLParser.RULE_statement);
        try {
            this.state = 2236;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 162, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2228;
                        this.assignment_statement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2229;
                        this.flow_control_statement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2230;
                        this.block_statement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2231;
                        this.task_call_statement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2232;
                        this.event_statement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2233;
                        this.procedural_statement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2234;
                        this.expression_statement();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2235;
                        this.subroutine_statement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.assignment_statement = function () {
        var _localctx = new Assignment_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 526, SysVerilogHDLParser.RULE_assignment_statement);
        try {
            this.state = 2244;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 163, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2238;
                        this.blocking_assignment();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2239;
                        this.nonblocking_assignment();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2240;
                        this.prefix_assignment();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2241;
                        this.postfix_assignment();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2242;
                        this.operator_assignment();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2243;
                        this.declarative_assignment();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.flow_control_statement = function () {
        var _localctx = new Flow_control_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 528, SysVerilogHDLParser.RULE_flow_control_statement);
        try {
            this.state = 2249;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Case_keyword:
                case SysVerilogHDLParser.Casez:
                case SysVerilogHDLParser.Casex:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2246;
                        this.case_statement();
                    }
                    break;
                case SysVerilogHDLParser.If:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2247;
                        this.conditional_statement();
                    }
                    break;
                case SysVerilogHDLParser.Do:
                case SysVerilogHDLParser.For:
                case SysVerilogHDLParser.Forever:
                case SysVerilogHDLParser.Repeat:
                case SysVerilogHDLParser.While:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2248;
                        this.loop_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.block_statement = function () {
        var _localctx = new Block_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 530, SysVerilogHDLParser.RULE_block_statement);
        try {
            this.state = 2253;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Fork:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2251;
                        this.par_block();
                    }
                    break;
                case SysVerilogHDLParser.Begin:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2252;
                        this.seq_block();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_call_statement = function () {
        var _localctx = new Task_call_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 532, SysVerilogHDLParser.RULE_task_call_statement);
        try {
            this.state = 2258;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2255;
                        this.task_enable();
                    }
                    break;
                case SysVerilogHDLParser.Dollar_Identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2256;
                        this.system_task_enable();
                    }
                    break;
                case SysVerilogHDLParser.Disable:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2257;
                        this.disable_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_statement = function () {
        var _localctx = new Event_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 534, SysVerilogHDLParser.RULE_event_statement);
        try {
            this.state = 2262;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Dash_right_angle:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2260;
                        this.event_trigger();
                    }
                    break;
                case SysVerilogHDLParser.Wait:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2261;
                        this.wait_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.procedural_statement = function () {
        var _localctx = new Procedural_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 536, SysVerilogHDLParser.RULE_procedural_statement);
        try {
            this.state = 2268;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Assign:
                case SysVerilogHDLParser.Deassign:
                case SysVerilogHDLParser.Force:
                case SysVerilogHDLParser.Release:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2264;
                        this.procedural_continuous_assignments();
                    }
                    break;
                case SysVerilogHDLParser.Repeat:
                case SysVerilogHDLParser.At:
                case SysVerilogHDLParser.Hash:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2265;
                        this.procedural_timing_control_statement();
                    }
                    break;
                case SysVerilogHDLParser.Assert:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2266;
                        this.procedural_assertion_statement();
                    }
                    break;
                case SysVerilogHDLParser.Disable:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2267;
                        this.property_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.expression_statement = function () {
        var _localctx = new Expression_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 538, SysVerilogHDLParser.RULE_expression_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2270;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.subroutine_statement = function () {
        var _localctx = new Subroutine_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 540, SysVerilogHDLParser.RULE_subroutine_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2272;
                this.return_statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.return_statement = function () {
        var _localctx = new Return_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 542, SysVerilogHDLParser.RULE_return_statement);
        try {
            this.state = 2277;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 169, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2274;
                        this.match(SysVerilogHDLParser.Return);
                        this.state = 2275;
                        this.expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2276;
                        this.match(SysVerilogHDLParser.Return);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.null_statement = function () {
        var _localctx = new Null_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 544, SysVerilogHDLParser.RULE_null_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2279;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.procedural_continuous_assignments = function () {
        var _localctx = new Procedural_continuous_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 546, SysVerilogHDLParser.RULE_procedural_continuous_assignments);
        try {
            this.state = 2285;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Assign:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2281;
                        this.assign_statement();
                    }
                    break;
                case SysVerilogHDLParser.Deassign:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2282;
                        this.deassign_statement();
                    }
                    break;
                case SysVerilogHDLParser.Force:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2283;
                        this.force_statement();
                    }
                    break;
                case SysVerilogHDLParser.Release:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2284;
                        this.release_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.assign_statement = function () {
        var _localctx = new Assign_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 548, SysVerilogHDLParser.RULE_assign_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2287;
                this.match(SysVerilogHDLParser.Assign);
                this.state = 2288;
                this.assignment_statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.deassign_statement = function () {
        var _localctx = new Deassign_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 550, SysVerilogHDLParser.RULE_deassign_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2290;
                this.match(SysVerilogHDLParser.Deassign);
                this.state = 2291;
                this.variable_lvalue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.force_statement = function () {
        var _localctx = new Force_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 552, SysVerilogHDLParser.RULE_force_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2293;
                this.match(SysVerilogHDLParser.Force);
                this.state = 2294;
                this.assignment_statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.release_statement = function () {
        var _localctx = new Release_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 554, SysVerilogHDLParser.RULE_release_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2296;
                this.match(SysVerilogHDLParser.Release);
                this.state = 2297;
                this.variable_lvalue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.procedural_timing_control_statement = function () {
        var _localctx = new Procedural_timing_control_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 556, SysVerilogHDLParser.RULE_procedural_timing_control_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2299;
                this.delay_or_event_control();
                this.state = 2300;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.property_statement = function () {
        var _localctx = new Property_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 558, SysVerilogHDLParser.RULE_property_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2302;
                this.disable_condition_statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.disable_condition_statement = function () {
        var _localctx = new Disable_condition_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 560, SysVerilogHDLParser.RULE_disable_condition_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2304;
                this.match(SysVerilogHDLParser.Disable);
                this.state = 2305;
                this.match(SysVerilogHDLParser.Iff);
                this.state = 2306;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2307;
                this.expression();
                this.state = 2308;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2309;
                this.property_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.property_expression = function () {
        var _localctx = new Property_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 562, SysVerilogHDLParser.RULE_property_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2311;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.procedural_assertion_statement = function () {
        var _localctx = new Procedural_assertion_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 564, SysVerilogHDLParser.RULE_procedural_assertion_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2313;
                this.assert_statement();
                this.state = 2315;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 171, this._ctx)) {
                    case 1:
                        {
                            this.state = 2314;
                            this.assert_else_statement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.assert_else_statement = function () {
        var _localctx = new Assert_else_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 566, SysVerilogHDLParser.RULE_assert_else_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2317;
                this.match(SysVerilogHDLParser.Else);
                this.state = 2318;
                this.statement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.assert_statement = function () {
        var _localctx = new Assert_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 568, SysVerilogHDLParser.RULE_assert_statement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2323;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier) {
                    {
                        this.state = 2320;
                        this.hierarchical_identifier();
                        this.state = 2321;
                        this.match(SysVerilogHDLParser.Colon);
                    }
                }
                this.state = 2325;
                this.match(SysVerilogHDLParser.Assert);
                this.state = 2326;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2327;
                this.expression();
                this.state = 2328;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.system_task_enable = function () {
        var _localctx = new System_task_enableContext(this._ctx, this.state);
        this.enterRule(_localctx, 570, SysVerilogHDLParser.RULE_system_task_enable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2330;
                this.system_task_identifier();
                this.state = 2332;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 173, this._ctx)) {
                    case 1:
                        {
                            this.state = 2331;
                            this.task_interface_assignments();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.system_task_identifier = function () {
        var _localctx = new System_task_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 572, SysVerilogHDLParser.RULE_system_task_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2334;
                this.match(SysVerilogHDLParser.Dollar_Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_interface_assignments = function () {
        var _localctx = new Task_interface_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 574, SysVerilogHDLParser.RULE_task_interface_assignments);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2336;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2338;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Dot - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                    {
                        this.state = 2337;
                        this.list_of_interface_assignments();
                    }
                }
                this.state = 2340;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.task_enable = function () {
        var _localctx = new Task_enableContext(this._ctx, this.state);
        this.enterRule(_localctx, 576, SysVerilogHDLParser.RULE_task_enable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2342;
                this.hierarchical_task_identifier();
                this.state = 2344;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 175, this._ctx)) {
                    case 1:
                        {
                            this.state = 2343;
                            this.task_interface_assignments();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_task_identifier = function () {
        var _localctx = new Hierarchical_task_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 578, SysVerilogHDLParser.RULE_hierarchical_task_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2346;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.disable_statement = function () {
        var _localctx = new Disable_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 580, SysVerilogHDLParser.RULE_disable_statement);
        try {
            this.state = 2352;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 176, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2348;
                        this.match(SysVerilogHDLParser.Disable);
                        this.state = 2349;
                        this.hierarchical_task_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2350;
                        this.match(SysVerilogHDLParser.Disable);
                        this.state = 2351;
                        this.hierarchical_block_identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_block_identifier = function () {
        var _localctx = new Hierarchical_block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 582, SysVerilogHDLParser.RULE_hierarchical_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2354;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_lvalue = function () {
        var _localctx = new Variable_lvalueContext(this._ctx, this.state);
        this.enterRule(_localctx, 584, SysVerilogHDLParser.RULE_variable_lvalue);
        try {
            this.state = 2358;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2356;
                        this.hierarchical_variable_lvalue();
                    }
                    break;
                case SysVerilogHDLParser.Left_curly_bracket:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2357;
                        this.variable_concatenation();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_variable_lvalue = function () {
        var _localctx = new Hierarchical_variable_lvalueContext(this._ctx, this.state);
        this.enterRule(_localctx, 586, SysVerilogHDLParser.RULE_hierarchical_variable_lvalue);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2360;
                this.primary_hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_concatenation = function () {
        var _localctx = new Variable_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 588, SysVerilogHDLParser.RULE_variable_concatenation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2362;
                this.match(SysVerilogHDLParser.Left_curly_bracket);
                this.state = 2363;
                this.variable_concatenation_value();
                this.state = 2364;
                this.comma_vcv_star();
                this.state = 2365;
                this.match(SysVerilogHDLParser.Right_curly_bracket);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_concatenation_value = function () {
        var _localctx = new Variable_concatenation_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 590, SysVerilogHDLParser.RULE_variable_concatenation_value);
        try {
            this.state = 2369;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2367;
                        this.primary_hierarchical_identifier();
                    }
                    break;
                case SysVerilogHDLParser.Left_curly_bracket:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2368;
                        this.variable_concatenation();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_vcv_star = function () {
        var _localctx = new Comma_vcv_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 592, SysVerilogHDLParser.RULE_comma_vcv_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2375;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2371;
                            this.match(SysVerilogHDLParser.Comma);
                            this.state = 2372;
                            this.variable_concatenation_value();
                        }
                    }
                    this.state = 2377;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.blocking_assignment = function () {
        var _localctx = new Blocking_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 594, SysVerilogHDLParser.RULE_blocking_assignment);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2378;
                this.variable_lvalue();
                this.state = 2379;
                this.match(SysVerilogHDLParser.Equal);
                this.state = 2381;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Repeat || _la === SysVerilogHDLParser.At || _la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 2380;
                        this.delay_or_event_control();
                    }
                }
                this.state = 2383;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.nonblocking_assignment = function () {
        var _localctx = new Nonblocking_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 596, SysVerilogHDLParser.RULE_nonblocking_assignment);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2385;
                this.variable_lvalue();
                this.state = 2386;
                this.match(SysVerilogHDLParser.Left_angle_equals);
                this.state = 2388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Repeat || _la === SysVerilogHDLParser.At || _la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 2387;
                        this.delay_or_event_control();
                    }
                }
                this.state = 2390;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.prefix_assignment = function () {
        var _localctx = new Prefix_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 598, SysVerilogHDLParser.RULE_prefix_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2392;
                this.unary_assign_operator();
                this.state = 2393;
                this.variable_lvalue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.postfix_assignment = function () {
        var _localctx = new Postfix_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 600, SysVerilogHDLParser.RULE_postfix_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2395;
                this.variable_lvalue();
                this.state = 2396;
                this.unary_assign_operator();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.operator_assignment = function () {
        var _localctx = new Operator_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 602, SysVerilogHDLParser.RULE_operator_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2398;
                this.variable_lvalue();
                this.state = 2399;
                this.binary_assign_operator();
                this.state = 2400;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.declarative_assignment = function () {
        var _localctx = new Declarative_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 604, SysVerilogHDLParser.RULE_declarative_assignment);
        try {
            this.state = 2408;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 182, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2402;
                        this.reg_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2403;
                        this.logic_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2404;
                        this.bits_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2405;
                        this.integer_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2406;
                        this.int_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2407;
                        this.genvar_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.delay_or_event_control = function () {
        var _localctx = new Delay_or_event_controlContext(this._ctx, this.state);
        this.enterRule(_localctx, 606, SysVerilogHDLParser.RULE_delay_or_event_control);
        try {
            this.state = 2413;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Hash:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2410;
                        this.delay_control();
                    }
                    break;
                case SysVerilogHDLParser.At:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2411;
                        this.event_control();
                    }
                    break;
                case SysVerilogHDLParser.Repeat:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2412;
                        this.repeat_event_control();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.delay_control = function () {
        var _localctx = new Delay_controlContext(this._ctx, this.state);
        this.enterRule(_localctx, 608, SysVerilogHDLParser.RULE_delay_control);
        try {
            this.state = 2427;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 184, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2415;
                        this.match(SysVerilogHDLParser.Hash);
                        this.state = 2416;
                        this.delay_value();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2417;
                        this.match(SysVerilogHDLParser.Hash);
                        this.state = 2418;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 2419;
                        this.delay_value();
                        this.state = 2420;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2422;
                        this.match(SysVerilogHDLParser.Hash);
                        this.state = 2423;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 2424;
                        this.mintypmax_expression();
                        this.state = 2425;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_control = function () {
        var _localctx = new Event_controlContext(this._ctx, this.state);
        this.enterRule(_localctx, 610, SysVerilogHDLParser.RULE_event_control);
        try {
            this.state = 2432;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 185, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2429;
                        this.event_control_identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2430;
                        this.event_control_expression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2431;
                        this.event_control_wildcard();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_control_identifier = function () {
        var _localctx = new Event_control_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 612, SysVerilogHDLParser.RULE_event_control_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2434;
                this.match(SysVerilogHDLParser.At);
                this.state = 2435;
                this.event_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_control_expression = function () {
        var _localctx = new Event_control_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 614, SysVerilogHDLParser.RULE_event_control_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2437;
                this.match(SysVerilogHDLParser.At);
                this.state = 2438;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2439;
                this.event_expression();
                this.state = 2440;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_expression = function () {
        var _localctx = new Event_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 616, SysVerilogHDLParser.RULE_event_expression);
        try {
            this.state = 2444;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 186, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2442;
                        this.single_event_expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2443;
                        this.event_expression_or();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.single_event_expression = function () {
        var _localctx = new Single_event_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 618, SysVerilogHDLParser.RULE_single_event_expression);
        try {
            this.state = 2451;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 187, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2446;
                        this.expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2447;
                        this.hierarchical_identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2448;
                        this.event_expression_edgespec();
                        this.state = 2449;
                        this.expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_expression_edgespec = function () {
        var _localctx = new Event_expression_edgespecContext(this._ctx, this.state);
        this.enterRule(_localctx, 620, SysVerilogHDLParser.RULE_event_expression_edgespec);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2453;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Negedge || _la === SysVerilogHDLParser.Posedge)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_expression_or = function () {
        var _localctx = new Event_expression_orContext(this._ctx, this.state);
        this.enterRule(_localctx, 622, SysVerilogHDLParser.RULE_event_expression_or);
        try {
            this.state = 2457;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 188, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2455;
                        this.list_of_event_expression_comma();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2456;
                        this.list_of_event_expression_or();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_event_expression_comma = function () {
        var _localctx = new List_of_event_expression_commaContext(this._ctx, this.state);
        this.enterRule(_localctx, 624, SysVerilogHDLParser.RULE_list_of_event_expression_comma);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2459;
                this.single_event_expression();
                this.state = 2460;
                this.comma_event_expression_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_event_expression_star = function () {
        var _localctx = new Comma_event_expression_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 626, SysVerilogHDLParser.RULE_comma_event_expression_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2462;
                            this.comma_event_expression();
                        }
                    }
                    this.state = 2467;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_event_expression = function () {
        var _localctx = new Comma_event_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 628, SysVerilogHDLParser.RULE_comma_event_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2468;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2469;
                this.single_event_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_event_expression_or = function () {
        var _localctx = new List_of_event_expression_orContext(this._ctx, this.state);
        this.enterRule(_localctx, 630, SysVerilogHDLParser.RULE_list_of_event_expression_or);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2471;
                this.single_event_expression();
                this.state = 2472;
                this.or_event_expression_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.or_event_expression_star = function () {
        var _localctx = new Or_event_expression_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 632, SysVerilogHDLParser.RULE_or_event_expression_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Or) {
                    {
                        {
                            this.state = 2474;
                            this.or_event_expression();
                        }
                    }
                    this.state = 2479;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.or_event_expression = function () {
        var _localctx = new Or_event_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 634, SysVerilogHDLParser.RULE_or_event_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2480;
                this.match(SysVerilogHDLParser.Or);
                this.state = 2481;
                this.single_event_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_control_wildcard = function () {
        var _localctx = new Event_control_wildcardContext(this._ctx, this.state);
        this.enterRule(_localctx, 636, SysVerilogHDLParser.RULE_event_control_wildcard);
        try {
            this.state = 2489;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 191, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2483;
                        this.match(SysVerilogHDLParser.At);
                        this.state = 2484;
                        this.match(SysVerilogHDLParser.Star);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2485;
                        this.match(SysVerilogHDLParser.At);
                        this.state = 2486;
                        this.match(SysVerilogHDLParser.Open_parenthesis);
                        this.state = 2487;
                        this.match(SysVerilogHDLParser.Star);
                        this.state = 2488;
                        this.match(SysVerilogHDLParser.Close_parenthesis);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.repeat_event_control = function () {
        var _localctx = new Repeat_event_controlContext(this._ctx, this.state);
        this.enterRule(_localctx, 638, SysVerilogHDLParser.RULE_repeat_event_control);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2491;
                this.match(SysVerilogHDLParser.Repeat);
                this.state = 2492;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2493;
                this.expression();
                this.state = 2494;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2495;
                this.event_control();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_trigger = function () {
        var _localctx = new Event_triggerContext(this._ctx, this.state);
        this.enterRule(_localctx, 640, SysVerilogHDLParser.RULE_event_trigger);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2497;
                this.match(SysVerilogHDLParser.Dash_right_angle);
                this.state = 2498;
                this.hierarchical_event_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_event_identifier = function () {
        var _localctx = new Hierarchical_event_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 642, SysVerilogHDLParser.RULE_hierarchical_event_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2500;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.event_identifier = function () {
        var _localctx = new Event_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 644, SysVerilogHDLParser.RULE_event_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2502;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.wait_statement = function () {
        var _localctx = new Wait_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 646, SysVerilogHDLParser.RULE_wait_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2504;
                this.match(SysVerilogHDLParser.Wait);
                this.state = 2505;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2506;
                this.expression();
                this.state = 2507;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2508;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_generated_instantiation = function () {
        var _localctx = new Attr_generated_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 648, SysVerilogHDLParser.RULE_attr_generated_instantiation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2510;
                this.attribute_instance_star();
                this.state = 2511;
                this.generated_instantiation();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generated_instantiation = function () {
        var _localctx = new Generated_instantiationContext(this._ctx, this.state);
        this.enterRule(_localctx, 650, SysVerilogHDLParser.RULE_generated_instantiation);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2513;
                this.match(SysVerilogHDLParser.Generate);
                this.state = 2514;
                this.generate_item_star();
                this.state = 2515;
                this.match(SysVerilogHDLParser.Endgenerate);
                this.state = 2517;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.T__0 || _la === SysVerilogHDLParser.Semicolon) {
                    {
                        this.state = 2516;
                        this.semicolon();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_item_star = function () {
        var _localctx = new Generate_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 652, SysVerilogHDLParser.RULE_generate_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2522;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__0) | (1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Always - 42)) | (1 << (SysVerilogHDLParser.Always_comb - 42)) | (1 << (SysVerilogHDLParser.Always_ff - 42)) | (1 << (SysVerilogHDLParser.And - 42)) | (1 << (SysVerilogHDLParser.Assert - 42)) | (1 << (SysVerilogHDLParser.Assign - 42)) | (1 << (SysVerilogHDLParser.Automatic - 42)) | (1 << (SysVerilogHDLParser.Begin - 42)) | (1 << (SysVerilogHDLParser.Bit - 42)) | (1 << (SysVerilogHDLParser.Buf - 42)) | (1 << (SysVerilogHDLParser.Bufif0 - 42)) | (1 << (SysVerilogHDLParser.Bufif1 - 42)) | (1 << (SysVerilogHDLParser.Byte - 42)) | (1 << (SysVerilogHDLParser.Case_keyword - 42)) | (1 << (SysVerilogHDLParser.Casez - 42)) | (1 << (SysVerilogHDLParser.Casex - 42)) | (1 << (SysVerilogHDLParser.Cmos - 42)) | (1 << (SysVerilogHDLParser.Const - 42)) | (1 << (SysVerilogHDLParser.Deassign - 42)) | (1 << (SysVerilogHDLParser.Defparam - 42)))) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & ((1 << (SysVerilogHDLParser.Disable - 74)) | (1 << (SysVerilogHDLParser.Do - 74)) | (1 << (SysVerilogHDLParser.Enum - 74)) | (1 << (SysVerilogHDLParser.Event_keyword - 74)) | (1 << (SysVerilogHDLParser.Final - 74)) | (1 << (SysVerilogHDLParser.For - 74)) | (1 << (SysVerilogHDLParser.Force - 74)) | (1 << (SysVerilogHDLParser.Forever - 74)) | (1 << (SysVerilogHDLParser.Fork - 74)) | (1 << (SysVerilogHDLParser.Function - 74)) | (1 << (SysVerilogHDLParser.Generate - 74)) | (1 << (SysVerilogHDLParser.Genvar - 74)) | (1 << (SysVerilogHDLParser.If - 74)) | (1 << (SysVerilogHDLParser.Initial - 74)))) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (SysVerilogHDLParser.Inout - 106)) | (1 << (SysVerilogHDLParser.Input - 106)) | (1 << (SysVerilogHDLParser.Int - 106)) | (1 << (SysVerilogHDLParser.Integer - 106)) | (1 << (SysVerilogHDLParser.Localparam - 106)) | (1 << (SysVerilogHDLParser.Logic - 106)) | (1 << (SysVerilogHDLParser.Macromodule - 106)) | (1 << (SysVerilogHDLParser.Module_keyword_only - 106)) | (1 << (SysVerilogHDLParser.Nand - 106)) | (1 << (SysVerilogHDLParser.Nmos - 106)) | (1 << (SysVerilogHDLParser.NONE - 106)) | (1 << (SysVerilogHDLParser.Nor - 106)) | (1 << (SysVerilogHDLParser.Not - 106)) | (1 << (SysVerilogHDLParser.Notif0 - 106)) | (1 << (SysVerilogHDLParser.Notif1 - 106)) | (1 << (SysVerilogHDLParser.Or - 106)) | (1 << (SysVerilogHDLParser.Output - 106)) | (1 << (SysVerilogHDLParser.Parameter - 106)) | (1 << (SysVerilogHDLParser.Package - 106)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (SysVerilogHDLParser.Pmos - 138)) | (1 << (SysVerilogHDLParser.Pullup - 138)) | (1 << (SysVerilogHDLParser.Pulldown - 138)) | (1 << (SysVerilogHDLParser.Rcmos - 138)) | (1 << (SysVerilogHDLParser.Real - 138)) | (1 << (SysVerilogHDLParser.Realtime - 138)) | (1 << (SysVerilogHDLParser.Ref - 138)) | (1 << (SysVerilogHDLParser.Reg - 138)) | (1 << (SysVerilogHDLParser.Release - 138)) | (1 << (SysVerilogHDLParser.Repeat - 138)) | (1 << (SysVerilogHDLParser.Return - 138)) | (1 << (SysVerilogHDLParser.Rnmos - 138)) | (1 << (SysVerilogHDLParser.Rpmos - 138)) | (1 << (SysVerilogHDLParser.Rtran - 138)) | (1 << (SysVerilogHDLParser.Rtranif0 - 138)) | (1 << (SysVerilogHDLParser.Rtranif1 - 138)) | (1 << (SysVerilogHDLParser.Signed - 138)) | (1 << (SysVerilogHDLParser.Static - 138)) | (1 << (SysVerilogHDLParser.SVString - 138)) | (1 << (SysVerilogHDLParser.Struct - 138)))) !== 0) || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & ((1 << (SysVerilogHDLParser.Supply0 - 170)) | (1 << (SysVerilogHDLParser.Supply1 - 170)) | (1 << (SysVerilogHDLParser.Task - 170)) | (1 << (SysVerilogHDLParser.Time - 170)) | (1 << (SysVerilogHDLParser.Tran - 170)) | (1 << (SysVerilogHDLParser.Tranif0 - 170)) | (1 << (SysVerilogHDLParser.Tranif1 - 170)) | (1 << (SysVerilogHDLParser.Tri - 170)) | (1 << (SysVerilogHDLParser.Tri_and - 170)) | (1 << (SysVerilogHDLParser.Tri_or - 170)) | (1 << (SysVerilogHDLParser.Tri_reg - 170)) | (1 << (SysVerilogHDLParser.Tri0 - 170)) | (1 << (SysVerilogHDLParser.Tri1 - 170)) | (1 << (SysVerilogHDLParser.UnionStruct - 170)) | (1 << (SysVerilogHDLParser.Unsigned - 170)) | (1 << (SysVerilogHDLParser.Uwire - 170)) | (1 << (SysVerilogHDLParser.Wait - 170)) | (1 << (SysVerilogHDLParser.Wand - 170)) | (1 << (SysVerilogHDLParser.While - 170)) | (1 << (SysVerilogHDLParser.Wire - 170)) | (1 << (SysVerilogHDLParser.Wor - 170)) | (1 << (SysVerilogHDLParser.Xnor - 170)) | (1 << (SysVerilogHDLParser.Xor - 170)) | (1 << (SysVerilogHDLParser.Dollar_Identifier - 170)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.String_literal - 202)) | (1 << (SysVerilogHDLParser.At - 202)) | (1 << (SysVerilogHDLParser.Dash_right_angle - 202)) | (1 << (SysVerilogHDLParser.Hash - 202)) | (1 << (SysVerilogHDLParser.Left_bracket - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 202)) | (1 << (SysVerilogHDLParser.Quote - 202)) | (1 << (SysVerilogHDLParser.Semicolon - 202)) | (1 << (SysVerilogHDLParser.Tilde - 202)))) !== 0)) {
                    {
                        {
                            this.state = 2519;
                            this.generate_item();
                        }
                    }
                    this.state = 2524;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_item = function () {
        var _localctx = new Generate_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 654, SysVerilogHDLParser.RULE_generate_item);
        try {
            this.state = 2535;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2525;
                        this.generate_conditional_statement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2526;
                        this.generate_case_statement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2527;
                        this.generate_loop_statement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2528;
                        this.generate_block();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2529;
                        this.parameter_item_semicolon();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2530;
                        this.attr_variable_item_semicolon();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2531;
                        this.subroutine_item_semicolon();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2532;
                        this.attr_construct_item();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 2533;
                        this.attr_component_item();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 2534;
                        this.null_item();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_block = function () {
        var _localctx = new Generate_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 656, SysVerilogHDLParser.RULE_generate_block);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2537;
                this.match(SysVerilogHDLParser.Begin);
                this.state = 2539;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 2538;
                        this.generate_colon_block_identifier0();
                    }
                }
                this.state = 2541;
                this.generate_item_star();
                this.state = 2542;
                this.match(SysVerilogHDLParser.End);
                this.state = 2544;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 2543;
                        this.generate_colon_block_identifier1();
                    }
                }
                this.state = 2547;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 197, this._ctx)) {
                    case 1:
                        {
                            this.state = 2546;
                            this.semicolon();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_colon_block_identifier0 = function () {
        var _localctx = new Generate_colon_block_identifier0Context(this._ctx, this.state);
        this.enterRule(_localctx, 658, SysVerilogHDLParser.RULE_generate_colon_block_identifier0);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2549;
                this.generate_colon_block_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_colon_block_identifier1 = function () {
        var _localctx = new Generate_colon_block_identifier1Context(this._ctx, this.state);
        this.enterRule(_localctx, 660, SysVerilogHDLParser.RULE_generate_colon_block_identifier1);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2551;
                this.generate_colon_block_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_colon_block_identifier = function () {
        var _localctx = new Generate_colon_block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 662, SysVerilogHDLParser.RULE_generate_colon_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2553;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 2554;
                this.generate_block_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_block_identifier = function () {
        var _localctx = new Generate_block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 664, SysVerilogHDLParser.RULE_generate_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2556;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_conditional_statement = function () {
        var _localctx = new Generate_conditional_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 666, SysVerilogHDLParser.RULE_generate_conditional_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2558;
                this.generate_if_statement();
                this.state = 2560;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 198, this._ctx)) {
                    case 1:
                        {
                            this.state = 2559;
                            this.generate_else_statement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_if_statement = function () {
        var _localctx = new Generate_if_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 668, SysVerilogHDLParser.RULE_generate_if_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2562;
                this.match(SysVerilogHDLParser.If);
                this.state = 2563;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2564;
                this.conditional_expression();
                this.state = 2565;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2566;
                this.generate_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_else_statement = function () {
        var _localctx = new Generate_else_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 670, SysVerilogHDLParser.RULE_generate_else_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2568;
                this.match(SysVerilogHDLParser.Else);
                this.state = 2569;
                this.generate_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_loop_statement = function () {
        var _localctx = new Generate_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 672, SysVerilogHDLParser.RULE_generate_loop_statement);
        try {
            this.state = 2576;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Forever:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2571;
                        this.generate_forever_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.Repeat:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2572;
                        this.generate_repeat_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.While:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2573;
                        this.generate_while_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.Do:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2574;
                        this.generate_do_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.For:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2575;
                        this.generate_for_loop_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_forever_loop_statement = function () {
        var _localctx = new Generate_forever_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 674, SysVerilogHDLParser.RULE_generate_forever_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2578;
                this.match(SysVerilogHDLParser.Forever);
                this.state = 2579;
                this.generate_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_repeat_loop_statement = function () {
        var _localctx = new Generate_repeat_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 676, SysVerilogHDLParser.RULE_generate_repeat_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2581;
                this.match(SysVerilogHDLParser.Repeat);
                this.state = 2582;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2583;
                this.loop_terminate_expression();
                this.state = 2584;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2585;
                this.generate_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_while_loop_statement = function () {
        var _localctx = new Generate_while_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 678, SysVerilogHDLParser.RULE_generate_while_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2587;
                this.match(SysVerilogHDLParser.While);
                this.state = 2588;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2589;
                this.loop_terminate_expression();
                this.state = 2590;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2591;
                this.generate_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_do_loop_statement = function () {
        var _localctx = new Generate_do_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 680, SysVerilogHDLParser.RULE_generate_do_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2593;
                this.match(SysVerilogHDLParser.Do);
                this.state = 2594;
                this.generate_item();
                this.state = 2595;
                this.match(SysVerilogHDLParser.While);
                this.state = 2596;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2597;
                this.loop_terminate_expression();
                this.state = 2598;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2599;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_for_loop_statement = function () {
        var _localctx = new Generate_for_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 682, SysVerilogHDLParser.RULE_generate_for_loop_statement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2601;
                this.match(SysVerilogHDLParser.For);
                this.state = 2602;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2603;
                this.loop_init_assignment();
                this.state = 2604;
                this.semicolon();
                this.state = 2605;
                this.loop_terminate_expression();
                this.state = 2606;
                this.semicolon();
                this.state = 2608;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.T__26 || _la === SysVerilogHDLParser.T__27 || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)))) !== 0)) {
                    {
                        this.state = 2607;
                        this.loop_step_assignment();
                    }
                }
                this.state = 2610;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2611;
                this.generate_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_case_statement = function () {
        var _localctx = new Generate_case_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 684, SysVerilogHDLParser.RULE_generate_case_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2613;
                this.any_case_keyword();
                this.state = 2614;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2615;
                this.case_switch();
                this.state = 2616;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2617;
                this.generate_case_item_star();
                this.state = 2618;
                this.match(SysVerilogHDLParser.Endcase);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_case_item_star = function () {
        var _localctx = new Generate_case_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 686, SysVerilogHDLParser.RULE_generate_case_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2623;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Default - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                    {
                        {
                            this.state = 2620;
                            this.generate_case_item();
                        }
                    }
                    this.state = 2625;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.generate_case_item = function () {
        var _localctx = new Generate_case_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 688, SysVerilogHDLParser.RULE_generate_case_item);
        var _la;
        try {
            this.state = 2635;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.T__1:
                case SysVerilogHDLParser.T__2:
                case SysVerilogHDLParser.T__3:
                case SysVerilogHDLParser.T__4:
                case SysVerilogHDLParser.T__5:
                case SysVerilogHDLParser.T__6:
                case SysVerilogHDLParser.T__7:
                case SysVerilogHDLParser.T__8:
                case SysVerilogHDLParser.T__9:
                case SysVerilogHDLParser.T__10:
                case SysVerilogHDLParser.T__26:
                case SysVerilogHDLParser.T__27:
                case SysVerilogHDLParser.Binary_number:
                case SysVerilogHDLParser.Decimal_number:
                case SysVerilogHDLParser.Fixed_point_number:
                case SysVerilogHDLParser.Hex_number:
                case SysVerilogHDLParser.Octal_number:
                case SysVerilogHDLParser.Real_exp_form:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Unsigned:
                case SysVerilogHDLParser.Dollar_Identifier:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.String_literal:
                case SysVerilogHDLParser.Left_curly_bracket:
                case SysVerilogHDLParser.Open_parenthesis:
                case SysVerilogHDLParser.Quote:
                case SysVerilogHDLParser.Tilde:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 2626;
                            this.case_item_key();
                        }
                        this.state = 2627;
                        this.match(SysVerilogHDLParser.Colon);
                        this.state = 2628;
                        this.generate_item();
                    }
                    break;
                case SysVerilogHDLParser.Default:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2630;
                        this.match(SysVerilogHDLParser.Default);
                        this.state = 2632;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.Colon) {
                            {
                                this.state = 2631;
                                this.match(SysVerilogHDLParser.Colon);
                            }
                        }
                        this.state = 2634;
                        this.generate_item();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.conditional_statement = function () {
        var _localctx = new Conditional_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 690, SysVerilogHDLParser.RULE_conditional_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2637;
                this.if_statement();
                this.state = 2639;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 204, this._ctx)) {
                    case 1:
                        {
                            this.state = 2638;
                            this.else_statement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.if_statement = function () {
        var _localctx = new If_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 692, SysVerilogHDLParser.RULE_if_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2641;
                this.match(SysVerilogHDLParser.If);
                this.state = 2642;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2643;
                this.conditional_expression();
                this.state = 2644;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2645;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.else_statement = function () {
        var _localctx = new Else_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 694, SysVerilogHDLParser.RULE_else_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2647;
                this.match(SysVerilogHDLParser.Else);
                this.state = 2648;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.conditional_expression = function () {
        var _localctx = new Conditional_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 696, SysVerilogHDLParser.RULE_conditional_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2650;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.loop_statement = function () {
        var _localctx = new Loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 698, SysVerilogHDLParser.RULE_loop_statement);
        try {
            this.state = 2657;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Forever:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2652;
                        this.forever_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.Repeat:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2653;
                        this.repeat_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.While:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2654;
                        this.while_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.Do:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2655;
                        this.do_loop_statement();
                    }
                    break;
                case SysVerilogHDLParser.For:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2656;
                        this.for_loop_statement();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.forever_loop_statement = function () {
        var _localctx = new Forever_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 700, SysVerilogHDLParser.RULE_forever_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2659;
                this.match(SysVerilogHDLParser.Forever);
                this.state = 2660;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.repeat_loop_statement = function () {
        var _localctx = new Repeat_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 702, SysVerilogHDLParser.RULE_repeat_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2662;
                this.match(SysVerilogHDLParser.Repeat);
                this.state = 2663;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2664;
                this.loop_terminate_expression();
                this.state = 2665;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2666;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.while_loop_statement = function () {
        var _localctx = new While_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 704, SysVerilogHDLParser.RULE_while_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2668;
                this.match(SysVerilogHDLParser.While);
                this.state = 2669;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2670;
                this.loop_terminate_expression();
                this.state = 2671;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2672;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.do_loop_statement = function () {
        var _localctx = new Do_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 706, SysVerilogHDLParser.RULE_do_loop_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2674;
                this.match(SysVerilogHDLParser.Do);
                this.state = 2675;
                this.statement_semicolon();
                this.state = 2676;
                this.match(SysVerilogHDLParser.While);
                this.state = 2677;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2678;
                this.loop_terminate_expression();
                this.state = 2679;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2680;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.for_loop_statement = function () {
        var _localctx = new For_loop_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 708, SysVerilogHDLParser.RULE_for_loop_statement);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2682;
                this.match(SysVerilogHDLParser.For);
                this.state = 2683;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2684;
                this.loop_init_assignment();
                this.state = 2685;
                this.semicolon();
                this.state = 2686;
                this.loop_terminate_expression();
                this.state = 2687;
                this.semicolon();
                this.state = 2689;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.T__26 || _la === SysVerilogHDLParser.T__27 || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SysVerilogHDLParser.Escaped_identifier - 202)) | (1 << (SysVerilogHDLParser.Simple_identifier - 202)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 202)))) !== 0)) {
                    {
                        this.state = 2688;
                        this.loop_step_assignment();
                    }
                }
                this.state = 2691;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2692;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.loop_init_assignment = function () {
        var _localctx = new Loop_init_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 710, SysVerilogHDLParser.RULE_loop_init_assignment);
        try {
            this.state = 2696;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Automatic:
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                case SysVerilogHDLParser.Const:
                case SysVerilogHDLParser.Genvar:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Integer:
                case SysVerilogHDLParser.Logic:
                case SysVerilogHDLParser.Reg:
                case SysVerilogHDLParser.Static:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2694;
                        this.declarative_assignment();
                    }
                    break;
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.Left_curly_bracket:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2695;
                        this.blocking_assignment();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.loop_terminate_expression = function () {
        var _localctx = new Loop_terminate_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 712, SysVerilogHDLParser.RULE_loop_terminate_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2698;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.loop_step_assignment = function () {
        var _localctx = new Loop_step_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 714, SysVerilogHDLParser.RULE_loop_step_assignment);
        try {
            this.state = 2704;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 208, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2700;
                        this.blocking_assignment();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2701;
                        this.postfix_assignment();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2702;
                        this.prefix_assignment();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2703;
                        this.operator_assignment();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.case_statement = function () {
        var _localctx = new Case_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 716, SysVerilogHDLParser.RULE_case_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2706;
                this.any_case_keyword();
                this.state = 2707;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2708;
                this.case_switch();
                this.state = 2709;
                this.match(SysVerilogHDLParser.Close_parenthesis);
                this.state = 2710;
                this.case_item_star();
                this.state = 2711;
                this.match(SysVerilogHDLParser.Endcase);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.case_item_star = function () {
        var _localctx = new Case_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 718, SysVerilogHDLParser.RULE_case_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2716;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)) | (1 << (SysVerilogHDLParser.Default - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                    {
                        {
                            this.state = 2713;
                            this.case_item();
                        }
                    }
                    this.state = 2718;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.case_item = function () {
        var _localctx = new Case_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 720, SysVerilogHDLParser.RULE_case_item);
        var _la;
        try {
            this.state = 2728;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.T__1:
                case SysVerilogHDLParser.T__2:
                case SysVerilogHDLParser.T__3:
                case SysVerilogHDLParser.T__4:
                case SysVerilogHDLParser.T__5:
                case SysVerilogHDLParser.T__6:
                case SysVerilogHDLParser.T__7:
                case SysVerilogHDLParser.T__8:
                case SysVerilogHDLParser.T__9:
                case SysVerilogHDLParser.T__10:
                case SysVerilogHDLParser.T__26:
                case SysVerilogHDLParser.T__27:
                case SysVerilogHDLParser.Binary_number:
                case SysVerilogHDLParser.Decimal_number:
                case SysVerilogHDLParser.Fixed_point_number:
                case SysVerilogHDLParser.Hex_number:
                case SysVerilogHDLParser.Octal_number:
                case SysVerilogHDLParser.Real_exp_form:
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Unsigned:
                case SysVerilogHDLParser.Dollar_Identifier:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                case SysVerilogHDLParser.String_literal:
                case SysVerilogHDLParser.Left_curly_bracket:
                case SysVerilogHDLParser.Open_parenthesis:
                case SysVerilogHDLParser.Quote:
                case SysVerilogHDLParser.Tilde:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 2719;
                            this.case_item_key();
                        }
                        this.state = 2720;
                        this.match(SysVerilogHDLParser.Colon);
                        this.state = 2721;
                        this.statement_semicolon();
                    }
                    break;
                case SysVerilogHDLParser.Default:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2723;
                        this.match(SysVerilogHDLParser.Default);
                        this.state = 2725;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SysVerilogHDLParser.Colon) {
                            {
                                this.state = 2724;
                                this.match(SysVerilogHDLParser.Colon);
                            }
                        }
                        this.state = 2727;
                        this.statement_semicolon();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.case_switch = function () {
        var _localctx = new Case_switchContext(this._ctx, this.state);
        this.enterRule(_localctx, 722, SysVerilogHDLParser.RULE_case_switch);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2730;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.case_item_key = function () {
        var _localctx = new Case_item_keyContext(this._ctx, this.state);
        this.enterRule(_localctx, 724, SysVerilogHDLParser.RULE_case_item_key);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2732;
                this.case_item_key_expression();
                this.state = 2733;
                this.comma_case_item_key_expression_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.case_item_key_expression = function () {
        var _localctx = new Case_item_key_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 726, SysVerilogHDLParser.RULE_case_item_key_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2735;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_case_item_key_expression = function () {
        var _localctx = new Comma_case_item_key_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 728, SysVerilogHDLParser.RULE_comma_case_item_key_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2737;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2738;
                this.case_item_key_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_case_item_key_expression_star = function () {
        var _localctx = new Comma_case_item_key_expression_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 730, SysVerilogHDLParser.RULE_comma_case_item_key_expression_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2743;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2740;
                            this.comma_case_item_key_expression();
                        }
                    }
                    this.state = 2745;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.expression = function () {
        var _localctx = new ExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 732, SysVerilogHDLParser.RULE_expression);
        try {
            this.state = 2753;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 213, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2746;
                        this.unary_expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2747;
                        this.unary_post_assign_expression();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2748;
                        this.unary_pre_assign_expression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2749;
                        this.binary_expression();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2750;
                        this.ternary_expression();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2751;
                        this.mintypmax_expression();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2752;
                        this.single_expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.single_expression = function () {
        var _localctx = new Single_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 734, SysVerilogHDLParser.RULE_single_expression);
        try {
            this.state = 2759;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 214, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2755;
                        this.match(SysVerilogHDLParser.String_literal);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2756;
                        this.primary();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2757;
                        this.arrayed_structured_value();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2758;
                        this.structured_value();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.primary_range = function () {
        var _localctx = new Primary_rangeContext(this._ctx, this.state);
        this.enterRule(_localctx, 736, SysVerilogHDLParser.RULE_primary_range);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2761;
                this.primary();
                this.state = 2762;
                this.dimension();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.primary = function () {
        var _localctx = new PrimaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 738, SysVerilogHDLParser.RULE_primary);
        try {
            this.state = 2775;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 215, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2764;
                        this.number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2765;
                        this.concatenation();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2766;
                        this.multiple_concatenation();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2767;
                        this.function_call();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2768;
                        this.system_function_call();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2769;
                        this.constant_function_call();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2770;
                        this.imported_function_call();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2771;
                        this.primary_imported_hierarchical_identifier();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 2772;
                        this.primary_hierarchical_identifier();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 2773;
                        this.type_cast_expression();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 2774;
                        this.parenthesis_expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.unary_expression = function () {
        var _localctx = new Unary_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 740, SysVerilogHDLParser.RULE_unary_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2777;
                this.unary_operator();
                this.state = 2778;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.unary_post_assign_expression = function () {
        var _localctx = new Unary_post_assign_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 742, SysVerilogHDLParser.RULE_unary_post_assign_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2780;
                this.single_expression();
                this.state = 2781;
                this.unary_assign_operator();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.unary_pre_assign_expression = function () {
        var _localctx = new Unary_pre_assign_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 744, SysVerilogHDLParser.RULE_unary_pre_assign_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2783;
                this.unary_assign_operator();
                this.state = 2784;
                this.single_expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.binary_expression = function () {
        var _localctx = new Binary_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 746, SysVerilogHDLParser.RULE_binary_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2786;
                this.single_expression();
                this.state = 2787;
                this.binary_operator();
                this.state = 2788;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.ternary_expression = function () {
        var _localctx = new Ternary_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 748, SysVerilogHDLParser.RULE_ternary_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2790;
                this.single_expression();
                this.state = 2791;
                this.match(SysVerilogHDLParser.Question_mark);
                this.state = 2792;
                this.expression();
                this.state = 2793;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 2794;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.mintypmax_expression = function () {
        var _localctx = new Mintypmax_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 750, SysVerilogHDLParser.RULE_mintypmax_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2796;
                this.single_expression();
                this.state = 2797;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 2798;
                this.expression();
                this.state = 2799;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 2800;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.structured_value = function () {
        var _localctx = new Structured_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 752, SysVerilogHDLParser.RULE_structured_value);
        var _la;
        try {
            this.state = 2821;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 217, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2802;
                        this.match(SysVerilogHDLParser.Quote);
                        this.state = 2803;
                        this.match(SysVerilogHDLParser.Left_curly_bracket);
                        this.state = 2804;
                        this.expression();
                        this.state = 2809;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SysVerilogHDLParser.Comma) {
                            {
                                {
                                    this.state = 2805;
                                    this.match(SysVerilogHDLParser.Comma);
                                    this.state = 2806;
                                    this.expression();
                                }
                            }
                            this.state = 2811;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2812;
                        this.match(SysVerilogHDLParser.Right_curly_bracket);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2814;
                        this.match(SysVerilogHDLParser.Quote);
                        this.state = 2815;
                        this.match(SysVerilogHDLParser.Left_curly_bracket);
                        this.state = 2816;
                        this.expression();
                        this.state = 2817;
                        this.match(SysVerilogHDLParser.Right_curly_bracket);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2819;
                        this.match(SysVerilogHDLParser.Left_curly_bracket);
                        this.state = 2820;
                        this.match(SysVerilogHDLParser.Right_curly_bracket);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.arrayed_structured_value = function () {
        var _localctx = new Arrayed_structured_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 754, SysVerilogHDLParser.RULE_arrayed_structured_value);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2823;
                this.match(SysVerilogHDLParser.Quote);
                this.state = 2824;
                this.match(SysVerilogHDLParser.Left_curly_bracket);
                this.state = 2825;
                this.arrayed_structure_item_plus();
                this.state = 2826;
                this.match(SysVerilogHDLParser.Right_curly_bracket);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.arrayed_structure_item = function () {
        var _localctx = new Arrayed_structure_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 756, SysVerilogHDLParser.RULE_arrayed_structure_item);
        try {
            this.state = 2835;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Default:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2828;
                        this.match(SysVerilogHDLParser.Default);
                        this.state = 2829;
                        this.match(SysVerilogHDLParser.Colon);
                        this.state = 2830;
                        this.expression();
                    }
                    break;
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2831;
                        this.hierarchical_identifier();
                        this.state = 2832;
                        this.match(SysVerilogHDLParser.Colon);
                        this.state = 2833;
                        this.expression();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_arrayed_structure_item = function () {
        var _localctx = new Comma_arrayed_structure_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 758, SysVerilogHDLParser.RULE_comma_arrayed_structure_item);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2837;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 2838;
                this.arrayed_structure_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_arrayed_structure_item_star = function () {
        var _localctx = new Comma_arrayed_structure_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 760, SysVerilogHDLParser.RULE_comma_arrayed_structure_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2843;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2840;
                            this.comma_arrayed_structure_item();
                        }
                    }
                    this.state = 2845;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.arrayed_structure_item_plus = function () {
        var _localctx = new Arrayed_structure_item_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 762, SysVerilogHDLParser.RULE_arrayed_structure_item_plus);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2846;
                this.arrayed_structure_item();
                this.state = 2847;
                this.comma_arrayed_structure_item_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_type_cast = function () {
        var _localctx = new Variable_type_castContext(this._ctx, this.state);
        this.enterRule(_localctx, 764, SysVerilogHDLParser.RULE_variable_type_cast);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2849;
                this.variable_type();
                this.state = 2850;
                this.match(SysVerilogHDLParser.Quote);
                this.state = 2851;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.width_type_cast = function () {
        var _localctx = new Width_type_castContext(this._ctx, this.state);
        this.enterRule(_localctx, 766, SysVerilogHDLParser.RULE_width_type_cast);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2853;
                this.number();
                this.state = 2854;
                this.match(SysVerilogHDLParser.Quote);
                this.state = 2855;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.sign_type_cast = function () {
        var _localctx = new Sign_type_castContext(this._ctx, this.state);
        this.enterRule(_localctx, 768, SysVerilogHDLParser.RULE_sign_type_cast);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2857;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2858;
                this.match(SysVerilogHDLParser.Quote);
                this.state = 2859;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.null_type_cast = function () {
        var _localctx = new Null_type_castContext(this._ctx, this.state);
        this.enterRule(_localctx, 770, SysVerilogHDLParser.RULE_null_type_cast);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2861;
                this.match(SysVerilogHDLParser.Quote);
                this.state = 2862;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_type = function () {
        var _localctx = new Variable_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 772, SysVerilogHDLParser.RULE_variable_type);
        try {
            this.state = 2866;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Int:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2864;
                        this.match(SysVerilogHDLParser.Int);
                    }
                    break;
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2865;
                        this.user_type();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.type_cast_identifier = function () {
        var _localctx = new Type_cast_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 774, SysVerilogHDLParser.RULE_type_cast_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2868;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.type_cast_expression = function () {
        var _localctx = new Type_cast_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 776, SysVerilogHDLParser.RULE_type_cast_expression);
        try {
            this.state = 2874;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Int:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2870;
                        this.variable_type_cast();
                    }
                    break;
                case SysVerilogHDLParser.Binary_number:
                case SysVerilogHDLParser.Decimal_number:
                case SysVerilogHDLParser.Fixed_point_number:
                case SysVerilogHDLParser.Hex_number:
                case SysVerilogHDLParser.Octal_number:
                case SysVerilogHDLParser.Real_exp_form:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2871;
                        this.width_type_cast();
                    }
                    break;
                case SysVerilogHDLParser.Signed:
                case SysVerilogHDLParser.Unsigned:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2872;
                        this.sign_type_cast();
                    }
                    break;
                case SysVerilogHDLParser.Quote:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2873;
                        this.null_type_cast();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_call = function () {
        var _localctx = new Function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 778, SysVerilogHDLParser.RULE_function_call);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2876;
                this.hierarchical_function_identifier();
                this.state = 2877;
                this.attribute_instance_star();
                this.state = 2878;
                this.function_interface_assignments();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_function_identifier = function () {
        var _localctx = new Hierarchical_function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 780, SysVerilogHDLParser.RULE_hierarchical_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2880;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.function_interface_assignments = function () {
        var _localctx = new Function_interface_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 782, SysVerilogHDLParser.RULE_function_interface_assignments);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2882;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2884;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SysVerilogHDLParser.T__1) | (1 << SysVerilogHDLParser.T__2) | (1 << SysVerilogHDLParser.T__3) | (1 << SysVerilogHDLParser.T__4) | (1 << SysVerilogHDLParser.T__5) | (1 << SysVerilogHDLParser.T__6) | (1 << SysVerilogHDLParser.T__7) | (1 << SysVerilogHDLParser.T__8) | (1 << SysVerilogHDLParser.T__9) | (1 << SysVerilogHDLParser.T__10) | (1 << SysVerilogHDLParser.T__26) | (1 << SysVerilogHDLParser.T__27))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Fixed_point_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)) | (1 << (SysVerilogHDLParser.Real_exp_form - 42)))) !== 0) || _la === SysVerilogHDLParser.Int || _la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (SysVerilogHDLParser.Dollar_Identifier - 201)) | (1 << (SysVerilogHDLParser.Escaped_identifier - 201)) | (1 << (SysVerilogHDLParser.Simple_identifier - 201)) | (1 << (SysVerilogHDLParser.String_literal - 201)) | (1 << (SysVerilogHDLParser.Dot - 201)) | (1 << (SysVerilogHDLParser.Left_curly_bracket - 201)) | (1 << (SysVerilogHDLParser.Open_parenthesis - 201)) | (1 << (SysVerilogHDLParser.Quote - 201)) | (1 << (SysVerilogHDLParser.Tilde - 201)))) !== 0)) {
                    {
                        this.state = 2883;
                        this.list_of_interface_assignments();
                    }
                }
                this.state = 2886;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.system_function_call = function () {
        var _localctx = new System_function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 784, SysVerilogHDLParser.RULE_system_function_call);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2888;
                this.system_function_identifier();
                this.state = 2890;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 223, this._ctx)) {
                    case 1:
                        {
                            this.state = 2889;
                            this.function_interface_assignments();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.system_function_identifier = function () {
        var _localctx = new System_function_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 786, SysVerilogHDLParser.RULE_system_function_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2892;
                this.match(SysVerilogHDLParser.Dollar_Identifier);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.constant_function_call = function () {
        var _localctx = new Constant_function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 788, SysVerilogHDLParser.RULE_constant_function_call);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2894;
                this.function_call();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.imported_function_call = function () {
        var _localctx = new Imported_function_callContext(this._ctx, this.state);
        this.enterRule(_localctx, 790, SysVerilogHDLParser.RULE_imported_function_call);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2896;
                this.imported_function_hierarchical_identifier();
                this.state = 2897;
                this.attribute_instance_star();
                this.state = 2898;
                this.function_interface_assignments();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.imported_function_hierarchical_identifier = function () {
        var _localctx = new Imported_function_hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 792, SysVerilogHDLParser.RULE_imported_function_hierarchical_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2900;
                this.imported_hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.primary_hierarchical_identifier = function () {
        var _localctx = new Primary_hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 794, SysVerilogHDLParser.RULE_primary_hierarchical_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2902;
                this.hierarchical_identifier();
                this.state = 2904;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 224, this._ctx)) {
                    case 1:
                        {
                            this.state = 2903;
                            this.dimension_plus();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.primary_imported_hierarchical_identifier = function () {
        var _localctx = new Primary_imported_hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 796, SysVerilogHDLParser.RULE_primary_imported_hierarchical_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2906;
                this.imported_hierarchical_identifier();
                this.state = 2908;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 225, this._ctx)) {
                    case 1:
                        {
                            this.state = 2907;
                            this.dimension_plus();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.imported_hierarchical_identifier = function () {
        var _localctx = new Imported_hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 798, SysVerilogHDLParser.RULE_imported_hierarchical_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2910;
                this.identifier();
                this.state = 2911;
                this.match(SysVerilogHDLParser.Double_colon);
                this.state = 2912;
                this.hierarchical_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.parenthesis_expression = function () {
        var _localctx = new Parenthesis_expressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 800, SysVerilogHDLParser.RULE_parenthesis_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2914;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 2915;
                this.expression();
                this.state = 2916;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.concatenation = function () {
        var _localctx = new ConcatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 802, SysVerilogHDLParser.RULE_concatenation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2918;
                this.match(SysVerilogHDLParser.Left_curly_bracket);
                this.state = 2919;
                this.expression();
                this.state = 2920;
                this.comma_expression_star();
                this.state = 2921;
                this.match(SysVerilogHDLParser.Right_curly_bracket);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.multiple_concatenation = function () {
        var _localctx = new Multiple_concatenationContext(this._ctx, this.state);
        this.enterRule(_localctx, 804, SysVerilogHDLParser.RULE_multiple_concatenation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2923;
                this.match(SysVerilogHDLParser.Left_curly_bracket);
                this.state = 2924;
                this.expression();
                this.state = 2925;
                this.concatenation();
                this.state = 2926;
                this.match(SysVerilogHDLParser.Right_curly_bracket);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_expression_plus = function () {
        var _localctx = new Comma_expression_plusContext(this._ctx, this.state);
        this.enterRule(_localctx, 806, SysVerilogHDLParser.RULE_comma_expression_plus);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2930;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 2928;
                            this.match(SysVerilogHDLParser.Comma);
                            this.state = 2929;
                            this.expression();
                        }
                    }
                    this.state = 2932;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === SysVerilogHDLParser.Comma);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_expression_star = function () {
        var _localctx = new Comma_expression_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 808, SysVerilogHDLParser.RULE_comma_expression_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 2934;
                            this.match(SysVerilogHDLParser.Comma);
                            this.state = 2935;
                            this.expression();
                        }
                    }
                    this.state = 2940;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.typedef_declaration = function () {
        var _localctx = new Typedef_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 810, SysVerilogHDLParser.RULE_typedef_declaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2941;
                this.match(SysVerilogHDLParser.Typedef);
                this.state = 2942;
                this.typedef_definition();
                this.state = 2943;
                this.typedef_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.typedef_identifier = function () {
        var _localctx = new Typedef_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 812, SysVerilogHDLParser.RULE_typedef_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2945;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.typedef_definition = function () {
        var _localctx = new Typedef_definitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 814, SysVerilogHDLParser.RULE_typedef_definition);
        try {
            this.state = 2950;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                case SysVerilogHDLParser.Logic:
                case SysVerilogHDLParser.NONE:
                case SysVerilogHDLParser.Reg:
                case SysVerilogHDLParser.Supply0:
                case SysVerilogHDLParser.Supply1:
                case SysVerilogHDLParser.Tri:
                case SysVerilogHDLParser.Tri_and:
                case SysVerilogHDLParser.Tri_or:
                case SysVerilogHDLParser.Tri_reg:
                case SysVerilogHDLParser.Tri0:
                case SysVerilogHDLParser.Tri1:
                case SysVerilogHDLParser.Uwire:
                case SysVerilogHDLParser.Wand:
                case SysVerilogHDLParser.Wire:
                case SysVerilogHDLParser.Wor:
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2947;
                        this.typedef_definition_type();
                    }
                    break;
                case SysVerilogHDLParser.Enum:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2948;
                        this.enumerated_type();
                    }
                    break;
                case SysVerilogHDLParser.Struct:
                case SysVerilogHDLParser.UnionStruct:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2949;
                        this.struct_type();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.typedef_definition_type = function () {
        var _localctx = new Typedef_definition_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 816, SysVerilogHDLParser.RULE_typedef_definition_type);
        try {
            this.state = 2954;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 229, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2952;
                        this.complex_type();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2953;
                        this.typedef_type();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.complex_type = function () {
        var _localctx = new Complex_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 818, SysVerilogHDLParser.RULE_complex_type);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2956;
                this.typedef_type();
                this.state = 2958;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned) {
                    {
                        this.state = 2957;
                        _la = this._input.LA(1);
                        if (!(_la === SysVerilogHDLParser.Signed || _la === SysVerilogHDLParser.Unsigned)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 2961;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Left_bracket) {
                    {
                        this.state = 2960;
                        this.dimension_plus();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.typedef_type = function () {
        var _localctx = new Typedef_typeContext(this._ctx, this.state);
        this.enterRule(_localctx, 820, SysVerilogHDLParser.RULE_typedef_type);
        try {
            this.state = 2968;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Reg:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2963;
                        this.match(SysVerilogHDLParser.Reg);
                    }
                    break;
                case SysVerilogHDLParser.Logic:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2964;
                        this.match(SysVerilogHDLParser.Logic);
                    }
                    break;
                case SysVerilogHDLParser.Bit:
                case SysVerilogHDLParser.Byte:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2965;
                        this.bits_type();
                    }
                    break;
                case SysVerilogHDLParser.NONE:
                case SysVerilogHDLParser.Supply0:
                case SysVerilogHDLParser.Supply1:
                case SysVerilogHDLParser.Tri:
                case SysVerilogHDLParser.Tri_and:
                case SysVerilogHDLParser.Tri_or:
                case SysVerilogHDLParser.Tri_reg:
                case SysVerilogHDLParser.Tri0:
                case SysVerilogHDLParser.Tri1:
                case SysVerilogHDLParser.Uwire:
                case SysVerilogHDLParser.Wand:
                case SysVerilogHDLParser.Wire:
                case SysVerilogHDLParser.Wor:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2966;
                        this.net_type();
                    }
                    break;
                case SysVerilogHDLParser.Escaped_identifier:
                case SysVerilogHDLParser.Simple_identifier:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2967;
                        this.user_type();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.par_block = function () {
        var _localctx = new Par_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 822, SysVerilogHDLParser.RULE_par_block);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2970;
                this.match(SysVerilogHDLParser.Fork);
                this.state = 2973;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 2971;
                        this.match(SysVerilogHDLParser.Colon);
                        this.state = 2972;
                        this.block_identifier();
                    }
                }
                this.state = 2975;
                this.block_item_declaration_star();
                this.state = 2976;
                this.statement_star();
                this.state = 2977;
                this.join_keyword();
                this.state = 2979;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 2978;
                        this.colon_block_identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.seq_block = function () {
        var _localctx = new Seq_blockContext(this._ctx, this.state);
        this.enterRule(_localctx, 824, SysVerilogHDLParser.RULE_seq_block);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2981;
                this.match(SysVerilogHDLParser.Begin);
                this.state = 2984;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 2982;
                        this.match(SysVerilogHDLParser.Colon);
                        this.state = 2983;
                        this.block_identifier();
                    }
                }
                this.state = 2986;
                this.block_item_declaration_star();
                this.state = 2987;
                this.statement_star();
                this.state = 2988;
                this.match(SysVerilogHDLParser.End);
                this.state = 2990;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Colon) {
                    {
                        this.state = 2989;
                        this.colon_block_identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.block_identifier = function () {
        var _localctx = new Block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 826, SysVerilogHDLParser.RULE_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2992;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.colon_block_identifier = function () {
        var _localctx = new Colon_block_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 828, SysVerilogHDLParser.RULE_colon_block_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2994;
                this.match(SysVerilogHDLParser.Colon);
                this.state = 2995;
                this.block_identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.block_item_declaration_star = function () {
        var _localctx = new Block_item_declaration_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 830, SysVerilogHDLParser.RULE_block_item_declaration_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3000;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 2997;
                                this.block_item_declaration_semicolon();
                            }
                        }
                    }
                    this.state = 3002;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.block_item_declaration_semicolon = function () {
        var _localctx = new Block_item_declaration_semicolonContext(this._ctx, this.state);
        this.enterRule(_localctx, 832, SysVerilogHDLParser.RULE_block_item_declaration_semicolon);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3003;
                this.block_item_declaration();
                this.state = 3004;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.block_item_declaration = function () {
        var _localctx = new Block_item_declarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 834, SysVerilogHDLParser.RULE_block_item_declaration);
        try {
            this.state = 3019;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 238, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3006;
                        this.reg_declaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3007;
                        this.event_declaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 3008;
                        this.logic_declaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 3009;
                        this.bits_declaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 3010;
                        this.integer_declaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 3011;
                        this.int_declaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 3012;
                        this.local_parameter_declaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 3013;
                        this.parameter_declaration();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 3014;
                        this.real_declaration();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 3015;
                        this.realtime_declaration();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 3016;
                        this.time_declaration();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 3017;
                        this.string_declaration();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 3018;
                        this.usertype_variable_declaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.join_keyword = function () {
        var _localctx = new Join_keywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 836, SysVerilogHDLParser.RULE_join_keyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3021;
                _la = this._input.LA(1);
                if (!(((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SysVerilogHDLParser.Join - 111)) | (1 << (SysVerilogHDLParser.Join_any - 111)) | (1 << (SysVerilogHDLParser.Join_none - 111)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.continuous_assign = function () {
        var _localctx = new Continuous_assignContext(this._ctx, this.state);
        this.enterRule(_localctx, 838, SysVerilogHDLParser.RULE_continuous_assign);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3023;
                this.match(SysVerilogHDLParser.Assign);
                this.state = 3025;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Open_parenthesis) {
                    {
                        this.state = 3024;
                        this.drive_strength();
                    }
                }
                this.state = 3028;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SysVerilogHDLParser.Hash) {
                    {
                        this.state = 3027;
                        this.delay();
                    }
                }
                this.state = 3030;
                this.list_of_variable_assignments();
                this.state = 3031;
                this.semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.list_of_variable_assignments = function () {
        var _localctx = new List_of_variable_assignmentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 840, SysVerilogHDLParser.RULE_list_of_variable_assignments);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3033;
                this.variable_assignment();
                this.state = 3034;
                this.comma_variable_assignment_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_variable_assignment_star = function () {
        var _localctx = new Comma_variable_assignment_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 842, SysVerilogHDLParser.RULE_comma_variable_assignment_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3039;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 3036;
                            this.comma_variable_assignment();
                        }
                    }
                    this.state = 3041;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.comma_variable_assignment = function () {
        var _localctx = new Comma_variable_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 844, SysVerilogHDLParser.RULE_comma_variable_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3042;
                this.match(SysVerilogHDLParser.Comma);
                this.state = 3043;
                this.variable_assignment();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.variable_assignment = function () {
        var _localctx = new Variable_assignmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 846, SysVerilogHDLParser.RULE_variable_assignment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3045;
                this.variable_lvalue();
                this.state = 3046;
                this.match(SysVerilogHDLParser.Equal);
                this.state = 3047;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.initial_construct = function () {
        var _localctx = new Initial_constructContext(this._ctx, this.state);
        this.enterRule(_localctx, 848, SysVerilogHDLParser.RULE_initial_construct);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3049;
                this.match(SysVerilogHDLParser.Initial);
                this.state = 3050;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.final_construct = function () {
        var _localctx = new Final_constructContext(this._ctx, this.state);
        this.enterRule(_localctx, 850, SysVerilogHDLParser.RULE_final_construct);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3052;
                this.match(SysVerilogHDLParser.Final);
                this.state = 3053;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.always_keyword = function () {
        var _localctx = new Always_keywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 852, SysVerilogHDLParser.RULE_always_keyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3055;
                _la = this._input.LA(1);
                if (!(((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (SysVerilogHDLParser.Always - 49)) | (1 << (SysVerilogHDLParser.Always_comb - 49)) | (1 << (SysVerilogHDLParser.Always_ff - 49)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.always_construct = function () {
        var _localctx = new Always_constructContext(this._ctx, this.state);
        this.enterRule(_localctx, 854, SysVerilogHDLParser.RULE_always_construct);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3057;
                this.always_keyword();
                this.state = 3058;
                this.statement_semicolon();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attribute_instance_star = function () {
        var _localctx = new Attribute_instance_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 856, SysVerilogHDLParser.RULE_attribute_instance_star);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3063;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 3060;
                                this.attribute_instance();
                            }
                        }
                    }
                    this.state = 3065;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attribute_instance = function () {
        var _localctx = new Attribute_instanceContext(this._ctx, this.state);
        this.enterRule(_localctx, 858, SysVerilogHDLParser.RULE_attribute_instance);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3066;
                this.match(SysVerilogHDLParser.Open_parenthesis);
                this.state = 3067;
                this.match(SysVerilogHDLParser.Star);
                this.state = 3068;
                this.attr_spec();
                this.state = 3069;
                this.attr_spec_star();
                this.state = 3070;
                this.match(SysVerilogHDLParser.Star);
                this.state = 3071;
                this.match(SysVerilogHDLParser.Close_parenthesis);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_spec_star = function () {
        var _localctx = new Attr_spec_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 860, SysVerilogHDLParser.RULE_attr_spec_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3077;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Comma) {
                    {
                        {
                            this.state = 3073;
                            this.match(SysVerilogHDLParser.Comma);
                            this.state = 3074;
                            this.attr_spec();
                        }
                    }
                    this.state = 3079;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_spec = function () {
        var _localctx = new Attr_specContext(this._ctx, this.state);
        this.enterRule(_localctx, 862, SysVerilogHDLParser.RULE_attr_spec);
        try {
            this.state = 3085;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 244, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3080;
                        this.attr_name();
                        this.state = 3081;
                        this.match(SysVerilogHDLParser.Equal);
                        this.state = 3082;
                        this.expression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3084;
                        this.attr_name();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.attr_name = function () {
        var _localctx = new Attr_nameContext(this._ctx, this.state);
        this.enterRule(_localctx, 864, SysVerilogHDLParser.RULE_attr_name);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3087;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.identifier = function () {
        var _localctx = new IdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 866, SysVerilogHDLParser.RULE_identifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3089;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Escaped_identifier || _la === SysVerilogHDLParser.Simple_identifier)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_identifier = function () {
        var _localctx = new Hierarchical_identifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 868, SysVerilogHDLParser.RULE_hierarchical_identifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3091;
                this.hierarchical_identifier_branch_item();
                this.state = 3092;
                this.dot_hierarchical_identifier_branch_item_star();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.dot_hierarchical_identifier_branch_item_star = function () {
        var _localctx = new Dot_hierarchical_identifier_branch_item_starContext(this._ctx, this.state);
        this.enterRule(_localctx, 870, SysVerilogHDLParser.RULE_dot_hierarchical_identifier_branch_item_star);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3097;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SysVerilogHDLParser.Dot) {
                    {
                        {
                            this.state = 3094;
                            this.dot_hierarchical_identifier_branch_item();
                        }
                    }
                    this.state = 3099;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.dot_hierarchical_identifier_branch_item = function () {
        var _localctx = new Dot_hierarchical_identifier_branch_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 872, SysVerilogHDLParser.RULE_dot_hierarchical_identifier_branch_item);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3100;
                this.match(SysVerilogHDLParser.Dot);
                this.state = 3101;
                this.hierarchical_identifier_branch_item();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.hierarchical_identifier_branch_item = function () {
        var _localctx = new Hierarchical_identifier_branch_itemContext(this._ctx, this.state);
        this.enterRule(_localctx, 874, SysVerilogHDLParser.RULE_hierarchical_identifier_branch_item);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3103;
                this.identifier();
                this.state = 3105;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 246, this._ctx)) {
                    case 1:
                        {
                            this.state = 3104;
                            this.dimension_plus();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.timescale_compiler_directive = function () {
        var _localctx = new Timescale_compiler_directiveContext(this._ctx, this.state);
        this.enterRule(_localctx, 876, SysVerilogHDLParser.RULE_timescale_compiler_directive);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3107;
                this.match(SysVerilogHDLParser.Tick_timescale);
                this.state = 3108;
                this.match(SysVerilogHDLParser.Time_literal);
                this.state = 3109;
                this.match(SysVerilogHDLParser.Forward_slash);
                this.state = 3110;
                this.match(SysVerilogHDLParser.Time_literal);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.timeunit_directive = function () {
        var _localctx = new Timeunit_directiveContext(this._ctx, this.state);
        this.enterRule(_localctx, 878, SysVerilogHDLParser.RULE_timeunit_directive);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3112;
                this.match(SysVerilogHDLParser.Timeunit);
                this.state = 3113;
                this.match(SysVerilogHDLParser.Time_literal);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.timeprecision_directive = function () {
        var _localctx = new Timeprecision_directiveContext(this._ctx, this.state);
        this.enterRule(_localctx, 880, SysVerilogHDLParser.RULE_timeprecision_directive);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3115;
                this.match(SysVerilogHDLParser.Timeprecision);
                this.state = 3116;
                this.match(SysVerilogHDLParser.Time_literal);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.default_nettype_statement = function () {
        var _localctx = new Default_nettype_statementContext(this._ctx, this.state);
        this.enterRule(_localctx, 882, SysVerilogHDLParser.RULE_default_nettype_statement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3118;
                this.match(SysVerilogHDLParser.Default_nettype);
                this.state = 3119;
                this.net_type();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.number = function () {
        var _localctx = new NumberContext(this._ctx, this.state);
        this.enterRule(_localctx, 884, SysVerilogHDLParser.RULE_number);
        try {
            this.state = 3123;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SysVerilogHDLParser.Binary_number:
                case SysVerilogHDLParser.Decimal_number:
                case SysVerilogHDLParser.Hex_number:
                case SysVerilogHDLParser.Octal_number:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 3121;
                        this.integral_number();
                    }
                    break;
                case SysVerilogHDLParser.Fixed_point_number:
                case SysVerilogHDLParser.Real_exp_form:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 3122;
                        this.real_number();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.integral_number = function () {
        var _localctx = new Integral_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 886, SysVerilogHDLParser.RULE_integral_number);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3125;
                _la = this._input.LA(1);
                if (!(((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (SysVerilogHDLParser.Binary_number - 42)) | (1 << (SysVerilogHDLParser.Decimal_number - 42)) | (1 << (SysVerilogHDLParser.Hex_number - 42)) | (1 << (SysVerilogHDLParser.Octal_number - 42)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    // @RuleVersion(0)
    SysVerilogHDLParser.prototype.real_number = function () {
        var _localctx = new Real_numberContext(this._ctx, this.state);
        this.enterRule(_localctx, 888, SysVerilogHDLParser.RULE_real_number);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 3127;
                _la = this._input.LA(1);
                if (!(_la === SysVerilogHDLParser.Fixed_point_number || _la === SysVerilogHDLParser.Real_exp_form)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    Object.defineProperty(SysVerilogHDLParser, "_ATN", {
        get: function () {
            if (!SysVerilogHDLParser.__ATN) {
                SysVerilogHDLParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(SysVerilogHDLParser._serializedATN));
            }
            return SysVerilogHDLParser.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    SysVerilogHDLParser.T__0 = 1;
    SysVerilogHDLParser.T__1 = 2;
    SysVerilogHDLParser.T__2 = 3;
    SysVerilogHDLParser.T__3 = 4;
    SysVerilogHDLParser.T__4 = 5;
    SysVerilogHDLParser.T__5 = 6;
    SysVerilogHDLParser.T__6 = 7;
    SysVerilogHDLParser.T__7 = 8;
    SysVerilogHDLParser.T__8 = 9;
    SysVerilogHDLParser.T__9 = 10;
    SysVerilogHDLParser.T__10 = 11;
    SysVerilogHDLParser.T__11 = 12;
    SysVerilogHDLParser.T__12 = 13;
    SysVerilogHDLParser.T__13 = 14;
    SysVerilogHDLParser.T__14 = 15;
    SysVerilogHDLParser.T__15 = 16;
    SysVerilogHDLParser.T__16 = 17;
    SysVerilogHDLParser.T__17 = 18;
    SysVerilogHDLParser.T__18 = 19;
    SysVerilogHDLParser.T__19 = 20;
    SysVerilogHDLParser.T__20 = 21;
    SysVerilogHDLParser.T__21 = 22;
    SysVerilogHDLParser.T__22 = 23;
    SysVerilogHDLParser.T__23 = 24;
    SysVerilogHDLParser.T__24 = 25;
    SysVerilogHDLParser.T__25 = 26;
    SysVerilogHDLParser.T__26 = 27;
    SysVerilogHDLParser.T__27 = 28;
    SysVerilogHDLParser.T__28 = 29;
    SysVerilogHDLParser.T__29 = 30;
    SysVerilogHDLParser.T__30 = 31;
    SysVerilogHDLParser.T__31 = 32;
    SysVerilogHDLParser.Carriage_return = 33;
    SysVerilogHDLParser.Forward_slash_forward_slash = 34;
    SysVerilogHDLParser.Forward_slash_star = 35;
    SysVerilogHDLParser.New_line = 36;
    SysVerilogHDLParser.Star_forward_slash = 37;
    SysVerilogHDLParser.Block_comment = 38;
    SysVerilogHDLParser.Line_directive = 39;
    SysVerilogHDLParser.One_line_comment = 40;
    SysVerilogHDLParser.WHITE_SPACE = 41;
    SysVerilogHDLParser.Binary_number = 42;
    SysVerilogHDLParser.Decimal_number = 43;
    SysVerilogHDLParser.Fixed_point_number = 44;
    SysVerilogHDLParser.Hex_number = 45;
    SysVerilogHDLParser.Octal_number = 46;
    SysVerilogHDLParser.Real_exp_form = 47;
    SysVerilogHDLParser.Unbased_unsized_literal = 48;
    SysVerilogHDLParser.Always = 49;
    SysVerilogHDLParser.Always_comb = 50;
    SysVerilogHDLParser.Always_ff = 51;
    SysVerilogHDLParser.And = 52;
    SysVerilogHDLParser.Assert = 53;
    SysVerilogHDLParser.Assign = 54;
    SysVerilogHDLParser.Automatic = 55;
    SysVerilogHDLParser.Begin = 56;
    SysVerilogHDLParser.Bit = 57;
    SysVerilogHDLParser.Buf = 58;
    SysVerilogHDLParser.Bufif0 = 59;
    SysVerilogHDLParser.Bufif1 = 60;
    SysVerilogHDLParser.Byte = 61;
    SysVerilogHDLParser.Case_keyword = 62;
    SysVerilogHDLParser.Casez = 63;
    SysVerilogHDLParser.Casex = 64;
    SysVerilogHDLParser.Cell = 65;
    SysVerilogHDLParser.Cmos = 66;
    SysVerilogHDLParser.Config = 67;
    SysVerilogHDLParser.Const = 68;
    SysVerilogHDLParser.Deassign = 69;
    SysVerilogHDLParser.Default = 70;
    SysVerilogHDLParser.Default_nettype = 71;
    SysVerilogHDLParser.Defparam = 72;
    SysVerilogHDLParser.Design = 73;
    SysVerilogHDLParser.Disable = 74;
    SysVerilogHDLParser.Do = 75;
    SysVerilogHDLParser.Edge = 76;
    SysVerilogHDLParser.Else = 77;
    SysVerilogHDLParser.End = 78;
    SysVerilogHDLParser.Endcase = 79;
    SysVerilogHDLParser.Endconfig = 80;
    SysVerilogHDLParser.Endfunction = 81;
    SysVerilogHDLParser.Endgenerate = 82;
    SysVerilogHDLParser.Endmodule = 83;
    SysVerilogHDLParser.Endpackage = 84;
    SysVerilogHDLParser.Endproperty = 85;
    SysVerilogHDLParser.Endspecify = 86;
    SysVerilogHDLParser.Endtask = 87;
    SysVerilogHDLParser.Enum = 88;
    SysVerilogHDLParser.Event_keyword = 89;
    SysVerilogHDLParser.Final = 90;
    SysVerilogHDLParser.For = 91;
    SysVerilogHDLParser.Force = 92;
    SysVerilogHDLParser.Forever = 93;
    SysVerilogHDLParser.Fork = 94;
    SysVerilogHDLParser.Function = 95;
    SysVerilogHDLParser.Generate = 96;
    SysVerilogHDLParser.Genvar = 97;
    SysVerilogHDLParser.Highz0 = 98;
    SysVerilogHDLParser.Highz1 = 99;
    SysVerilogHDLParser.If = 100;
    SysVerilogHDLParser.Iff = 101;
    SysVerilogHDLParser.Ifnone = 102;
    SysVerilogHDLParser.Import = 103;
    SysVerilogHDLParser.Incdir = 104;
    SysVerilogHDLParser.Initial = 105;
    SysVerilogHDLParser.Inout = 106;
    SysVerilogHDLParser.Input = 107;
    SysVerilogHDLParser.Instance = 108;
    SysVerilogHDLParser.Int = 109;
    SysVerilogHDLParser.Integer = 110;
    SysVerilogHDLParser.Join = 111;
    SysVerilogHDLParser.Join_any = 112;
    SysVerilogHDLParser.Join_none = 113;
    SysVerilogHDLParser.Large = 114;
    SysVerilogHDLParser.Liblist = 115;
    SysVerilogHDLParser.Library = 116;
    SysVerilogHDLParser.Localparam = 117;
    SysVerilogHDLParser.Logic = 118;
    SysVerilogHDLParser.Macromodule = 119;
    SysVerilogHDLParser.Medium = 120;
    SysVerilogHDLParser.Module_keyword_only = 121;
    SysVerilogHDLParser.Nand = 122;
    SysVerilogHDLParser.Negedge = 123;
    SysVerilogHDLParser.Nmos = 124;
    SysVerilogHDLParser.NONE = 125;
    SysVerilogHDLParser.Nor = 126;
    SysVerilogHDLParser.Not = 127;
    SysVerilogHDLParser.Notif0 = 128;
    SysVerilogHDLParser.Notif1 = 129;
    SysVerilogHDLParser.Noshowcancelled = 130;
    SysVerilogHDLParser.Or = 131;
    SysVerilogHDLParser.Output = 132;
    SysVerilogHDLParser.Parameter = 133;
    SysVerilogHDLParser.Path_pulse_dollar = 134;
    SysVerilogHDLParser.Posedge = 135;
    SysVerilogHDLParser.Package = 136;
    SysVerilogHDLParser.Packed = 137;
    SysVerilogHDLParser.Pmos = 138;
    SysVerilogHDLParser.Property = 139;
    SysVerilogHDLParser.Pull0 = 140;
    SysVerilogHDLParser.Pull1 = 141;
    SysVerilogHDLParser.Pullup = 142;
    SysVerilogHDLParser.Pulldown = 143;
    SysVerilogHDLParser.Pulsestyle_ondetect = 144;
    SysVerilogHDLParser.Pulsestyle_onevent = 145;
    SysVerilogHDLParser.Rcmos = 146;
    SysVerilogHDLParser.Real = 147;
    SysVerilogHDLParser.Realtime = 148;
    SysVerilogHDLParser.Ref = 149;
    SysVerilogHDLParser.Reg = 150;
    SysVerilogHDLParser.Release = 151;
    SysVerilogHDLParser.Repeat = 152;
    SysVerilogHDLParser.Return = 153;
    SysVerilogHDLParser.Rnmos = 154;
    SysVerilogHDLParser.Rpmos = 155;
    SysVerilogHDLParser.Rtran = 156;
    SysVerilogHDLParser.Rtranif0 = 157;
    SysVerilogHDLParser.Rtranif1 = 158;
    SysVerilogHDLParser.Scalared = 159;
    SysVerilogHDLParser.Showcancelled = 160;
    SysVerilogHDLParser.Signed = 161;
    SysVerilogHDLParser.Small = 162;
    SysVerilogHDLParser.Specify = 163;
    SysVerilogHDLParser.Specparam = 164;
    SysVerilogHDLParser.Static = 165;
    SysVerilogHDLParser.SVString = 166;
    SysVerilogHDLParser.Strong0 = 167;
    SysVerilogHDLParser.Strong1 = 168;
    SysVerilogHDLParser.Struct = 169;
    SysVerilogHDLParser.Supply0 = 170;
    SysVerilogHDLParser.Supply1 = 171;
    SysVerilogHDLParser.Task = 172;
    SysVerilogHDLParser.Tick_timescale = 173;
    SysVerilogHDLParser.Time = 174;
    SysVerilogHDLParser.Timeprecision = 175;
    SysVerilogHDLParser.Timeunit = 176;
    SysVerilogHDLParser.Tran = 177;
    SysVerilogHDLParser.Tranif0 = 178;
    SysVerilogHDLParser.Tranif1 = 179;
    SysVerilogHDLParser.Tri = 180;
    SysVerilogHDLParser.Tri_and = 181;
    SysVerilogHDLParser.Tri_or = 182;
    SysVerilogHDLParser.Tri_reg = 183;
    SysVerilogHDLParser.Tri0 = 184;
    SysVerilogHDLParser.Tri1 = 185;
    SysVerilogHDLParser.Typedef = 186;
    SysVerilogHDLParser.UnionStruct = 187;
    SysVerilogHDLParser.Unsigned = 188;
    SysVerilogHDLParser.Use = 189;
    SysVerilogHDLParser.Uwire = 190;
    SysVerilogHDLParser.Vectored = 191;
    SysVerilogHDLParser.Wait = 192;
    SysVerilogHDLParser.Wand = 193;
    SysVerilogHDLParser.Weak0 = 194;
    SysVerilogHDLParser.Weak1 = 195;
    SysVerilogHDLParser.While = 196;
    SysVerilogHDLParser.Wire = 197;
    SysVerilogHDLParser.Wor = 198;
    SysVerilogHDLParser.Xnor = 199;
    SysVerilogHDLParser.Xor = 200;
    SysVerilogHDLParser.Dollar_Identifier = 201;
    SysVerilogHDLParser.Escaped_identifier = 202;
    SysVerilogHDLParser.Simple_identifier = 203;
    SysVerilogHDLParser.String_literal = 204;
    SysVerilogHDLParser.At = 205;
    SysVerilogHDLParser.Close_parenthesis = 206;
    SysVerilogHDLParser.Colon = 207;
    SysVerilogHDLParser.Comma = 208;
    SysVerilogHDLParser.Dash_right_angle = 209;
    SysVerilogHDLParser.Dot = 210;
    SysVerilogHDLParser.Dollar = 211;
    SysVerilogHDLParser.Double_colon = 212;
    SysVerilogHDLParser.Equal = 213;
    SysVerilogHDLParser.Equals_right_angle = 214;
    SysVerilogHDLParser.Forward_slash = 215;
    SysVerilogHDLParser.Hash = 216;
    SysVerilogHDLParser.Left_angle_equals = 217;
    SysVerilogHDLParser.Left_bracket = 218;
    SysVerilogHDLParser.Left_curly_bracket = 219;
    SysVerilogHDLParser.Minus_colon = 220;
    SysVerilogHDLParser.Open_parenthesis = 221;
    SysVerilogHDLParser.Plus_colon = 222;
    SysVerilogHDLParser.Question_mark = 223;
    SysVerilogHDLParser.Quote = 224;
    SysVerilogHDLParser.Right_bracket = 225;
    SysVerilogHDLParser.Right_curly_bracket = 226;
    SysVerilogHDLParser.Semicolon = 227;
    SysVerilogHDLParser.Star = 228;
    SysVerilogHDLParser.Star_right_angle = 229;
    SysVerilogHDLParser.Tilde = 230;
    SysVerilogHDLParser.Time_literal = 231;
    SysVerilogHDLParser.Edge_control_specifier = 232;
    SysVerilogHDLParser.RULE_module_keyword = 0;
    SysVerilogHDLParser.RULE_struct_keyword = 1;
    SysVerilogHDLParser.RULE_any_case_keyword = 2;
    SysVerilogHDLParser.RULE_semicolon = 3;
    SysVerilogHDLParser.RULE_unary_operator = 4;
    SysVerilogHDLParser.RULE_binary_operator = 5;
    SysVerilogHDLParser.RULE_unary_assign_operator = 6;
    SysVerilogHDLParser.RULE_binary_assign_operator = 7;
    SysVerilogHDLParser.RULE_source_text = 8;
    SysVerilogHDLParser.RULE_description_star = 9;
    SysVerilogHDLParser.RULE_header_text = 10;
    SysVerilogHDLParser.RULE_design_attribute = 11;
    SysVerilogHDLParser.RULE_compiler_directive = 12;
    SysVerilogHDLParser.RULE_description = 13;
    SysVerilogHDLParser.RULE_module_declaration = 14;
    SysVerilogHDLParser.RULE_module_identifier = 15;
    SysVerilogHDLParser.RULE_module_interface = 16;
    SysVerilogHDLParser.RULE_module_parameter_interface = 17;
    SysVerilogHDLParser.RULE_module_port_interface = 18;
    SysVerilogHDLParser.RULE_module_item_star = 19;
    SysVerilogHDLParser.RULE_module_item = 20;
    SysVerilogHDLParser.RULE_colon_module_identifier = 21;
    SysVerilogHDLParser.RULE_package_declaration = 22;
    SysVerilogHDLParser.RULE_package_identifier = 23;
    SysVerilogHDLParser.RULE_colon_package_identifier = 24;
    SysVerilogHDLParser.RULE_package_item_star = 25;
    SysVerilogHDLParser.RULE_package_item = 26;
    SysVerilogHDLParser.RULE_import_package = 27;
    SysVerilogHDLParser.RULE_package_item_identifier = 28;
    SysVerilogHDLParser.RULE_parameter_item_semicolon = 29;
    SysVerilogHDLParser.RULE_parameter_item = 30;
    SysVerilogHDLParser.RULE_attr_port_item_semicolon = 31;
    SysVerilogHDLParser.RULE_attr_variable_item_semicolon = 32;
    SysVerilogHDLParser.RULE_variable_item = 33;
    SysVerilogHDLParser.RULE_subroutine_item_semicolon = 34;
    SysVerilogHDLParser.RULE_subroutine_item = 35;
    SysVerilogHDLParser.RULE_attr_construct_item = 36;
    SysVerilogHDLParser.RULE_construct_item = 37;
    SysVerilogHDLParser.RULE_attr_component_item = 38;
    SysVerilogHDLParser.RULE_component_item = 39;
    SysVerilogHDLParser.RULE_compiler_item = 40;
    SysVerilogHDLParser.RULE_type_item = 41;
    SysVerilogHDLParser.RULE_null_item = 42;
    SysVerilogHDLParser.RULE_list_of_interface_parameters = 43;
    SysVerilogHDLParser.RULE_list_of_parameter_declarations = 44;
    SysVerilogHDLParser.RULE_comma_parameter_declaration_star = 45;
    SysVerilogHDLParser.RULE_comma_parameter_declaration = 46;
    SysVerilogHDLParser.RULE_list_of_parameter_descriptions = 47;
    SysVerilogHDLParser.RULE_param_declaration = 48;
    SysVerilogHDLParser.RULE_param_description = 49;
    SysVerilogHDLParser.RULE_parameter_declaration = 50;
    SysVerilogHDLParser.RULE_local_parameter_declaration = 51;
    SysVerilogHDLParser.RULE_parameter_override = 52;
    SysVerilogHDLParser.RULE_list_of_tf_interface_ports = 53;
    SysVerilogHDLParser.RULE_list_of_tf_port_declarations = 54;
    SysVerilogHDLParser.RULE_list_of_tf_port_declarations_comma = 55;
    SysVerilogHDLParser.RULE_comma_attr_tf_port_declaration_star = 56;
    SysVerilogHDLParser.RULE_comma_attr_tf_port_declaration = 57;
    SysVerilogHDLParser.RULE_list_of_tf_port_declarations_semicolon = 58;
    SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon_plus = 59;
    SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon_star = 60;
    SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon = 61;
    SysVerilogHDLParser.RULE_attr_tf_port_declaration = 62;
    SysVerilogHDLParser.RULE_tf_port_declaration = 63;
    SysVerilogHDLParser.RULE_list_of_interface_ports = 64;
    SysVerilogHDLParser.RULE_list_of_port_identifiers = 65;
    SysVerilogHDLParser.RULE_comma_port_identifier_star = 66;
    SysVerilogHDLParser.RULE_comma_port_identifier = 67;
    SysVerilogHDLParser.RULE_port_identifier = 68;
    SysVerilogHDLParser.RULE_list_of_port_declarations = 69;
    SysVerilogHDLParser.RULE_list_of_port_declarations_comma = 70;
    SysVerilogHDLParser.RULE_comma_attr_port_declaration_star = 71;
    SysVerilogHDLParser.RULE_comma_attr_port_declaration = 72;
    SysVerilogHDLParser.RULE_list_of_port_declarations_semicolon = 73;
    SysVerilogHDLParser.RULE_attr_port_declaration_semicolon_plus = 74;
    SysVerilogHDLParser.RULE_attr_port_declaration_semicolon_star = 75;
    SysVerilogHDLParser.RULE_attr_port_declaration_semicolon = 76;
    SysVerilogHDLParser.RULE_attr_port_declaration = 77;
    SysVerilogHDLParser.RULE_port_declaration = 78;
    SysVerilogHDLParser.RULE_port_description = 79;
    SysVerilogHDLParser.RULE_inout_description = 80;
    SysVerilogHDLParser.RULE_input_description = 81;
    SysVerilogHDLParser.RULE_output_description = 82;
    SysVerilogHDLParser.RULE_ref_description = 83;
    SysVerilogHDLParser.RULE_tf_declaration = 84;
    SysVerilogHDLParser.RULE_inout_declaration = 85;
    SysVerilogHDLParser.RULE_input_declaration = 86;
    SysVerilogHDLParser.RULE_output_declaration = 87;
    SysVerilogHDLParser.RULE_ref_declaration = 88;
    SysVerilogHDLParser.RULE_user_type = 89;
    SysVerilogHDLParser.RULE_user_type_identifer = 90;
    SysVerilogHDLParser.RULE_dimension_plus = 91;
    SysVerilogHDLParser.RULE_dimension_star = 92;
    SysVerilogHDLParser.RULE_dimension = 93;
    SysVerilogHDLParser.RULE_range_expression = 94;
    SysVerilogHDLParser.RULE_index_expression = 95;
    SysVerilogHDLParser.RULE_sb_range = 96;
    SysVerilogHDLParser.RULE_base_increment_range = 97;
    SysVerilogHDLParser.RULE_base_decrement_range = 98;
    SysVerilogHDLParser.RULE_base_expression = 99;
    SysVerilogHDLParser.RULE_net_type = 100;
    SysVerilogHDLParser.RULE_drive_strength = 101;
    SysVerilogHDLParser.RULE_drive_strength_value_0 = 102;
    SysVerilogHDLParser.RULE_drive_strength_value_1 = 103;
    SysVerilogHDLParser.RULE_strength0 = 104;
    SysVerilogHDLParser.RULE_strength1 = 105;
    SysVerilogHDLParser.RULE_highz0 = 106;
    SysVerilogHDLParser.RULE_highz1 = 107;
    SysVerilogHDLParser.RULE_charge_strength = 108;
    SysVerilogHDLParser.RULE_charge_size = 109;
    SysVerilogHDLParser.RULE_list_of_variable_descriptions = 110;
    SysVerilogHDLParser.RULE_comma_variable_description_star = 111;
    SysVerilogHDLParser.RULE_comma_variable_description = 112;
    SysVerilogHDLParser.RULE_variable_description = 113;
    SysVerilogHDLParser.RULE_variable_identifier = 114;
    SysVerilogHDLParser.RULE_list_of_hierarchical_variable_descriptions = 115;
    SysVerilogHDLParser.RULE_comma_hierarchical_variable_description_star = 116;
    SysVerilogHDLParser.RULE_comma_hierarchical_variable_description = 117;
    SysVerilogHDLParser.RULE_hierarchical_variable_description = 118;
    SysVerilogHDLParser.RULE_hierarchical_variable_identifier = 119;
    SysVerilogHDLParser.RULE_net_declaration = 120;
    SysVerilogHDLParser.RULE_reg_declaration = 121;
    SysVerilogHDLParser.RULE_logic_declaration = 122;
    SysVerilogHDLParser.RULE_bits_type = 123;
    SysVerilogHDLParser.RULE_bits_declaration = 124;
    SysVerilogHDLParser.RULE_integer_declaration = 125;
    SysVerilogHDLParser.RULE_int_declaration = 126;
    SysVerilogHDLParser.RULE_real_declaration = 127;
    SysVerilogHDLParser.RULE_time_declaration = 128;
    SysVerilogHDLParser.RULE_realtime_declaration = 129;
    SysVerilogHDLParser.RULE_event_declaration = 130;
    SysVerilogHDLParser.RULE_genvar_declaration = 131;
    SysVerilogHDLParser.RULE_usertype_variable_declaration = 132;
    SysVerilogHDLParser.RULE_string_declaration = 133;
    SysVerilogHDLParser.RULE_struct_declaration = 134;
    SysVerilogHDLParser.RULE_enum_declaration = 135;
    SysVerilogHDLParser.RULE_function_declaration = 136;
    SysVerilogHDLParser.RULE_function_type = 137;
    SysVerilogHDLParser.RULE_function_identifier = 138;
    SysVerilogHDLParser.RULE_function_interface = 139;
    SysVerilogHDLParser.RULE_function_item_declaration_star = 140;
    SysVerilogHDLParser.RULE_function_item_declaration_semicolon = 141;
    SysVerilogHDLParser.RULE_function_item_declaration = 142;
    SysVerilogHDLParser.RULE_function_statement = 143;
    SysVerilogHDLParser.RULE_colon_function_identifier = 144;
    SysVerilogHDLParser.RULE_task_declaration = 145;
    SysVerilogHDLParser.RULE_task_identifier = 146;
    SysVerilogHDLParser.RULE_task_interface = 147;
    SysVerilogHDLParser.RULE_task_item_declaration_semicolon = 148;
    SysVerilogHDLParser.RULE_task_item_declaration = 149;
    SysVerilogHDLParser.RULE_task_item_declaration_star = 150;
    SysVerilogHDLParser.RULE_task_statement = 151;
    SysVerilogHDLParser.RULE_struct_item_semicolon = 152;
    SysVerilogHDLParser.RULE_struct_item_star = 153;
    SysVerilogHDLParser.RULE_struct_item = 154;
    SysVerilogHDLParser.RULE_struct_type = 155;
    SysVerilogHDLParser.RULE_enum_type = 156;
    SysVerilogHDLParser.RULE_list_of_enum_items = 157;
    SysVerilogHDLParser.RULE_enum_item = 158;
    SysVerilogHDLParser.RULE_enum_identifier = 159;
    SysVerilogHDLParser.RULE_comma_enum_item_star = 160;
    SysVerilogHDLParser.RULE_comma_enum_item = 161;
    SysVerilogHDLParser.RULE_enumerated_type = 162;
    SysVerilogHDLParser.RULE_module_instantiation = 163;
    SysVerilogHDLParser.RULE_parameter_interface_assignments = 164;
    SysVerilogHDLParser.RULE_list_of_interface_assignments = 165;
    SysVerilogHDLParser.RULE_list_of_ordered_interface_assignments = 166;
    SysVerilogHDLParser.RULE_comma_ordered_interface_assignment_star = 167;
    SysVerilogHDLParser.RULE_comma_ordered_interface_assignment = 168;
    SysVerilogHDLParser.RULE_ordered_interface_assignment = 169;
    SysVerilogHDLParser.RULE_list_of_named_interface_assignments = 170;
    SysVerilogHDLParser.RULE_comma_named_interface_assignment_star = 171;
    SysVerilogHDLParser.RULE_comma_named_interface_assignment = 172;
    SysVerilogHDLParser.RULE_named_interface_assignment = 173;
    SysVerilogHDLParser.RULE_list_of_module_instances = 174;
    SysVerilogHDLParser.RULE_comma_module_instance_star = 175;
    SysVerilogHDLParser.RULE_comma_module_instance = 176;
    SysVerilogHDLParser.RULE_module_instance = 177;
    SysVerilogHDLParser.RULE_module_instance_identifier = 178;
    SysVerilogHDLParser.RULE_arrayed_identifier = 179;
    SysVerilogHDLParser.RULE_simple_arrayed_identifier = 180;
    SysVerilogHDLParser.RULE_escaped_arrayed_identifier = 181;
    SysVerilogHDLParser.RULE_port_interface_assignments = 182;
    SysVerilogHDLParser.RULE_delay = 183;
    SysVerilogHDLParser.RULE_list_of_delay_values = 184;
    SysVerilogHDLParser.RULE_comma_delay_value_star = 185;
    SysVerilogHDLParser.RULE_comma_delay_value = 186;
    SysVerilogHDLParser.RULE_delay_value = 187;
    SysVerilogHDLParser.RULE_pulldown_strength = 188;
    SysVerilogHDLParser.RULE_pullup_strength = 189;
    SysVerilogHDLParser.RULE_gate_instance_identifier = 190;
    SysVerilogHDLParser.RULE_gate_instantiation = 191;
    SysVerilogHDLParser.RULE_enable_gatetype = 192;
    SysVerilogHDLParser.RULE_mos_switchtype = 193;
    SysVerilogHDLParser.RULE_cmos_switchtype = 194;
    SysVerilogHDLParser.RULE_n_output_gatetype = 195;
    SysVerilogHDLParser.RULE_n_input_gatetype = 196;
    SysVerilogHDLParser.RULE_pass_switchtype = 197;
    SysVerilogHDLParser.RULE_pass_enable_switchtype = 198;
    SysVerilogHDLParser.RULE_pulldown_instantiation = 199;
    SysVerilogHDLParser.RULE_pullup_instantiation = 200;
    SysVerilogHDLParser.RULE_enable_instantiation = 201;
    SysVerilogHDLParser.RULE_mos_instantiation = 202;
    SysVerilogHDLParser.RULE_cmos_instantiation = 203;
    SysVerilogHDLParser.RULE_n_output_instantiation = 204;
    SysVerilogHDLParser.RULE_n_input_instantiation = 205;
    SysVerilogHDLParser.RULE_pass_instantiation = 206;
    SysVerilogHDLParser.RULE_pass_enable_instantiation = 207;
    SysVerilogHDLParser.RULE_list_of_pull_gate_instance = 208;
    SysVerilogHDLParser.RULE_list_of_enable_gate_instance = 209;
    SysVerilogHDLParser.RULE_list_of_mos_switch_instance = 210;
    SysVerilogHDLParser.RULE_list_of_cmos_switch_instance = 211;
    SysVerilogHDLParser.RULE_list_of_n_input_gate_instance = 212;
    SysVerilogHDLParser.RULE_list_of_n_output_gate_instance = 213;
    SysVerilogHDLParser.RULE_list_of_pass_switch_instance = 214;
    SysVerilogHDLParser.RULE_list_of_pass_enable_switch_instance = 215;
    SysVerilogHDLParser.RULE_comma_pull_gate_instance_star = 216;
    SysVerilogHDLParser.RULE_comma_enable_gate_instance_star = 217;
    SysVerilogHDLParser.RULE_comma_mos_switch_instance_star = 218;
    SysVerilogHDLParser.RULE_comma_cmos_switch_instance_star = 219;
    SysVerilogHDLParser.RULE_comma_n_input_gate_instance_star = 220;
    SysVerilogHDLParser.RULE_comma_n_output_gate_instance_star = 221;
    SysVerilogHDLParser.RULE_comma_pass_switch_instance_star = 222;
    SysVerilogHDLParser.RULE_comma_pass_enable_switch_instance_star = 223;
    SysVerilogHDLParser.RULE_comma_pull_gate_instance = 224;
    SysVerilogHDLParser.RULE_comma_enable_gate_instance = 225;
    SysVerilogHDLParser.RULE_comma_mos_switch_instance = 226;
    SysVerilogHDLParser.RULE_comma_cmos_switch_instance = 227;
    SysVerilogHDLParser.RULE_comma_n_input_gate_instance = 228;
    SysVerilogHDLParser.RULE_comma_n_output_gate_instance = 229;
    SysVerilogHDLParser.RULE_comma_pass_switch_instance = 230;
    SysVerilogHDLParser.RULE_comma_pass_enable_switch_instance = 231;
    SysVerilogHDLParser.RULE_pull_gate_instance = 232;
    SysVerilogHDLParser.RULE_enable_gate_instance = 233;
    SysVerilogHDLParser.RULE_mos_switch_instance = 234;
    SysVerilogHDLParser.RULE_cmos_switch_instance = 235;
    SysVerilogHDLParser.RULE_n_input_gate_instance = 236;
    SysVerilogHDLParser.RULE_n_output_gate_instance = 237;
    SysVerilogHDLParser.RULE_pass_switch_instance = 238;
    SysVerilogHDLParser.RULE_pass_enable_switch_instance = 239;
    SysVerilogHDLParser.RULE_pull_gate_interface = 240;
    SysVerilogHDLParser.RULE_enable_gate_interface = 241;
    SysVerilogHDLParser.RULE_mos_switch_interface = 242;
    SysVerilogHDLParser.RULE_cmos_switch_interface = 243;
    SysVerilogHDLParser.RULE_n_input_gate_interface = 244;
    SysVerilogHDLParser.RULE_n_output_gate_interface = 245;
    SysVerilogHDLParser.RULE_pass_switch_interface = 246;
    SysVerilogHDLParser.RULE_pass_enable_switch_interface = 247;
    SysVerilogHDLParser.RULE_list_of_input_terminals = 248;
    SysVerilogHDLParser.RULE_list_of_output_terminals = 249;
    SysVerilogHDLParser.RULE_comma_input_terminal_star = 250;
    SysVerilogHDLParser.RULE_comma_output_terminal_star = 251;
    SysVerilogHDLParser.RULE_comma_input_terminal = 252;
    SysVerilogHDLParser.RULE_comma_output_terminal = 253;
    SysVerilogHDLParser.RULE_enable_terminal = 254;
    SysVerilogHDLParser.RULE_input_terminal = 255;
    SysVerilogHDLParser.RULE_inout_terminal = 256;
    SysVerilogHDLParser.RULE_ncontrol_terminal = 257;
    SysVerilogHDLParser.RULE_output_terminal = 258;
    SysVerilogHDLParser.RULE_pcontrol_terminal = 259;
    SysVerilogHDLParser.RULE_statement_star = 260;
    SysVerilogHDLParser.RULE_statement_semicolon = 261;
    SysVerilogHDLParser.RULE_statement = 262;
    SysVerilogHDLParser.RULE_assignment_statement = 263;
    SysVerilogHDLParser.RULE_flow_control_statement = 264;
    SysVerilogHDLParser.RULE_block_statement = 265;
    SysVerilogHDLParser.RULE_task_call_statement = 266;
    SysVerilogHDLParser.RULE_event_statement = 267;
    SysVerilogHDLParser.RULE_procedural_statement = 268;
    SysVerilogHDLParser.RULE_expression_statement = 269;
    SysVerilogHDLParser.RULE_subroutine_statement = 270;
    SysVerilogHDLParser.RULE_return_statement = 271;
    SysVerilogHDLParser.RULE_null_statement = 272;
    SysVerilogHDLParser.RULE_procedural_continuous_assignments = 273;
    SysVerilogHDLParser.RULE_assign_statement = 274;
    SysVerilogHDLParser.RULE_deassign_statement = 275;
    SysVerilogHDLParser.RULE_force_statement = 276;
    SysVerilogHDLParser.RULE_release_statement = 277;
    SysVerilogHDLParser.RULE_procedural_timing_control_statement = 278;
    SysVerilogHDLParser.RULE_property_statement = 279;
    SysVerilogHDLParser.RULE_disable_condition_statement = 280;
    SysVerilogHDLParser.RULE_property_expression = 281;
    SysVerilogHDLParser.RULE_procedural_assertion_statement = 282;
    SysVerilogHDLParser.RULE_assert_else_statement = 283;
    SysVerilogHDLParser.RULE_assert_statement = 284;
    SysVerilogHDLParser.RULE_system_task_enable = 285;
    SysVerilogHDLParser.RULE_system_task_identifier = 286;
    SysVerilogHDLParser.RULE_task_interface_assignments = 287;
    SysVerilogHDLParser.RULE_task_enable = 288;
    SysVerilogHDLParser.RULE_hierarchical_task_identifier = 289;
    SysVerilogHDLParser.RULE_disable_statement = 290;
    SysVerilogHDLParser.RULE_hierarchical_block_identifier = 291;
    SysVerilogHDLParser.RULE_variable_lvalue = 292;
    SysVerilogHDLParser.RULE_hierarchical_variable_lvalue = 293;
    SysVerilogHDLParser.RULE_variable_concatenation = 294;
    SysVerilogHDLParser.RULE_variable_concatenation_value = 295;
    SysVerilogHDLParser.RULE_comma_vcv_star = 296;
    SysVerilogHDLParser.RULE_blocking_assignment = 297;
    SysVerilogHDLParser.RULE_nonblocking_assignment = 298;
    SysVerilogHDLParser.RULE_prefix_assignment = 299;
    SysVerilogHDLParser.RULE_postfix_assignment = 300;
    SysVerilogHDLParser.RULE_operator_assignment = 301;
    SysVerilogHDLParser.RULE_declarative_assignment = 302;
    SysVerilogHDLParser.RULE_delay_or_event_control = 303;
    SysVerilogHDLParser.RULE_delay_control = 304;
    SysVerilogHDLParser.RULE_event_control = 305;
    SysVerilogHDLParser.RULE_event_control_identifier = 306;
    SysVerilogHDLParser.RULE_event_control_expression = 307;
    SysVerilogHDLParser.RULE_event_expression = 308;
    SysVerilogHDLParser.RULE_single_event_expression = 309;
    SysVerilogHDLParser.RULE_event_expression_edgespec = 310;
    SysVerilogHDLParser.RULE_event_expression_or = 311;
    SysVerilogHDLParser.RULE_list_of_event_expression_comma = 312;
    SysVerilogHDLParser.RULE_comma_event_expression_star = 313;
    SysVerilogHDLParser.RULE_comma_event_expression = 314;
    SysVerilogHDLParser.RULE_list_of_event_expression_or = 315;
    SysVerilogHDLParser.RULE_or_event_expression_star = 316;
    SysVerilogHDLParser.RULE_or_event_expression = 317;
    SysVerilogHDLParser.RULE_event_control_wildcard = 318;
    SysVerilogHDLParser.RULE_repeat_event_control = 319;
    SysVerilogHDLParser.RULE_event_trigger = 320;
    SysVerilogHDLParser.RULE_hierarchical_event_identifier = 321;
    SysVerilogHDLParser.RULE_event_identifier = 322;
    SysVerilogHDLParser.RULE_wait_statement = 323;
    SysVerilogHDLParser.RULE_attr_generated_instantiation = 324;
    SysVerilogHDLParser.RULE_generated_instantiation = 325;
    SysVerilogHDLParser.RULE_generate_item_star = 326;
    SysVerilogHDLParser.RULE_generate_item = 327;
    SysVerilogHDLParser.RULE_generate_block = 328;
    SysVerilogHDLParser.RULE_generate_colon_block_identifier0 = 329;
    SysVerilogHDLParser.RULE_generate_colon_block_identifier1 = 330;
    SysVerilogHDLParser.RULE_generate_colon_block_identifier = 331;
    SysVerilogHDLParser.RULE_generate_block_identifier = 332;
    SysVerilogHDLParser.RULE_generate_conditional_statement = 333;
    SysVerilogHDLParser.RULE_generate_if_statement = 334;
    SysVerilogHDLParser.RULE_generate_else_statement = 335;
    SysVerilogHDLParser.RULE_generate_loop_statement = 336;
    SysVerilogHDLParser.RULE_generate_forever_loop_statement = 337;
    SysVerilogHDLParser.RULE_generate_repeat_loop_statement = 338;
    SysVerilogHDLParser.RULE_generate_while_loop_statement = 339;
    SysVerilogHDLParser.RULE_generate_do_loop_statement = 340;
    SysVerilogHDLParser.RULE_generate_for_loop_statement = 341;
    SysVerilogHDLParser.RULE_generate_case_statement = 342;
    SysVerilogHDLParser.RULE_generate_case_item_star = 343;
    SysVerilogHDLParser.RULE_generate_case_item = 344;
    SysVerilogHDLParser.RULE_conditional_statement = 345;
    SysVerilogHDLParser.RULE_if_statement = 346;
    SysVerilogHDLParser.RULE_else_statement = 347;
    SysVerilogHDLParser.RULE_conditional_expression = 348;
    SysVerilogHDLParser.RULE_loop_statement = 349;
    SysVerilogHDLParser.RULE_forever_loop_statement = 350;
    SysVerilogHDLParser.RULE_repeat_loop_statement = 351;
    SysVerilogHDLParser.RULE_while_loop_statement = 352;
    SysVerilogHDLParser.RULE_do_loop_statement = 353;
    SysVerilogHDLParser.RULE_for_loop_statement = 354;
    SysVerilogHDLParser.RULE_loop_init_assignment = 355;
    SysVerilogHDLParser.RULE_loop_terminate_expression = 356;
    SysVerilogHDLParser.RULE_loop_step_assignment = 357;
    SysVerilogHDLParser.RULE_case_statement = 358;
    SysVerilogHDLParser.RULE_case_item_star = 359;
    SysVerilogHDLParser.RULE_case_item = 360;
    SysVerilogHDLParser.RULE_case_switch = 361;
    SysVerilogHDLParser.RULE_case_item_key = 362;
    SysVerilogHDLParser.RULE_case_item_key_expression = 363;
    SysVerilogHDLParser.RULE_comma_case_item_key_expression = 364;
    SysVerilogHDLParser.RULE_comma_case_item_key_expression_star = 365;
    SysVerilogHDLParser.RULE_expression = 366;
    SysVerilogHDLParser.RULE_single_expression = 367;
    SysVerilogHDLParser.RULE_primary_range = 368;
    SysVerilogHDLParser.RULE_primary = 369;
    SysVerilogHDLParser.RULE_unary_expression = 370;
    SysVerilogHDLParser.RULE_unary_post_assign_expression = 371;
    SysVerilogHDLParser.RULE_unary_pre_assign_expression = 372;
    SysVerilogHDLParser.RULE_binary_expression = 373;
    SysVerilogHDLParser.RULE_ternary_expression = 374;
    SysVerilogHDLParser.RULE_mintypmax_expression = 375;
    SysVerilogHDLParser.RULE_structured_value = 376;
    SysVerilogHDLParser.RULE_arrayed_structured_value = 377;
    SysVerilogHDLParser.RULE_arrayed_structure_item = 378;
    SysVerilogHDLParser.RULE_comma_arrayed_structure_item = 379;
    SysVerilogHDLParser.RULE_comma_arrayed_structure_item_star = 380;
    SysVerilogHDLParser.RULE_arrayed_structure_item_plus = 381;
    SysVerilogHDLParser.RULE_variable_type_cast = 382;
    SysVerilogHDLParser.RULE_width_type_cast = 383;
    SysVerilogHDLParser.RULE_sign_type_cast = 384;
    SysVerilogHDLParser.RULE_null_type_cast = 385;
    SysVerilogHDLParser.RULE_variable_type = 386;
    SysVerilogHDLParser.RULE_type_cast_identifier = 387;
    SysVerilogHDLParser.RULE_type_cast_expression = 388;
    SysVerilogHDLParser.RULE_function_call = 389;
    SysVerilogHDLParser.RULE_hierarchical_function_identifier = 390;
    SysVerilogHDLParser.RULE_function_interface_assignments = 391;
    SysVerilogHDLParser.RULE_system_function_call = 392;
    SysVerilogHDLParser.RULE_system_function_identifier = 393;
    SysVerilogHDLParser.RULE_constant_function_call = 394;
    SysVerilogHDLParser.RULE_imported_function_call = 395;
    SysVerilogHDLParser.RULE_imported_function_hierarchical_identifier = 396;
    SysVerilogHDLParser.RULE_primary_hierarchical_identifier = 397;
    SysVerilogHDLParser.RULE_primary_imported_hierarchical_identifier = 398;
    SysVerilogHDLParser.RULE_imported_hierarchical_identifier = 399;
    SysVerilogHDLParser.RULE_parenthesis_expression = 400;
    SysVerilogHDLParser.RULE_concatenation = 401;
    SysVerilogHDLParser.RULE_multiple_concatenation = 402;
    SysVerilogHDLParser.RULE_comma_expression_plus = 403;
    SysVerilogHDLParser.RULE_comma_expression_star = 404;
    SysVerilogHDLParser.RULE_typedef_declaration = 405;
    SysVerilogHDLParser.RULE_typedef_identifier = 406;
    SysVerilogHDLParser.RULE_typedef_definition = 407;
    SysVerilogHDLParser.RULE_typedef_definition_type = 408;
    SysVerilogHDLParser.RULE_complex_type = 409;
    SysVerilogHDLParser.RULE_typedef_type = 410;
    SysVerilogHDLParser.RULE_par_block = 411;
    SysVerilogHDLParser.RULE_seq_block = 412;
    SysVerilogHDLParser.RULE_block_identifier = 413;
    SysVerilogHDLParser.RULE_colon_block_identifier = 414;
    SysVerilogHDLParser.RULE_block_item_declaration_star = 415;
    SysVerilogHDLParser.RULE_block_item_declaration_semicolon = 416;
    SysVerilogHDLParser.RULE_block_item_declaration = 417;
    SysVerilogHDLParser.RULE_join_keyword = 418;
    SysVerilogHDLParser.RULE_continuous_assign = 419;
    SysVerilogHDLParser.RULE_list_of_variable_assignments = 420;
    SysVerilogHDLParser.RULE_comma_variable_assignment_star = 421;
    SysVerilogHDLParser.RULE_comma_variable_assignment = 422;
    SysVerilogHDLParser.RULE_variable_assignment = 423;
    SysVerilogHDLParser.RULE_initial_construct = 424;
    SysVerilogHDLParser.RULE_final_construct = 425;
    SysVerilogHDLParser.RULE_always_keyword = 426;
    SysVerilogHDLParser.RULE_always_construct = 427;
    SysVerilogHDLParser.RULE_attribute_instance_star = 428;
    SysVerilogHDLParser.RULE_attribute_instance = 429;
    SysVerilogHDLParser.RULE_attr_spec_star = 430;
    SysVerilogHDLParser.RULE_attr_spec = 431;
    SysVerilogHDLParser.RULE_attr_name = 432;
    SysVerilogHDLParser.RULE_identifier = 433;
    SysVerilogHDLParser.RULE_hierarchical_identifier = 434;
    SysVerilogHDLParser.RULE_dot_hierarchical_identifier_branch_item_star = 435;
    SysVerilogHDLParser.RULE_dot_hierarchical_identifier_branch_item = 436;
    SysVerilogHDLParser.RULE_hierarchical_identifier_branch_item = 437;
    SysVerilogHDLParser.RULE_timescale_compiler_directive = 438;
    SysVerilogHDLParser.RULE_timeunit_directive = 439;
    SysVerilogHDLParser.RULE_timeprecision_directive = 440;
    SysVerilogHDLParser.RULE_default_nettype_statement = 441;
    SysVerilogHDLParser.RULE_number = 442;
    SysVerilogHDLParser.RULE_integral_number = 443;
    SysVerilogHDLParser.RULE_real_number = 444;
    // tslint:disable:no-trailing-whitespace
    SysVerilogHDLParser.ruleNames = [
        "module_keyword", "struct_keyword", "any_case_keyword", "semicolon", "unary_operator",
        "binary_operator", "unary_assign_operator", "binary_assign_operator",
        "source_text", "description_star", "header_text", "design_attribute",
        "compiler_directive", "description", "module_declaration", "module_identifier",
        "module_interface", "module_parameter_interface", "module_port_interface",
        "module_item_star", "module_item", "colon_module_identifier", "package_declaration",
        "package_identifier", "colon_package_identifier", "package_item_star",
        "package_item", "import_package", "package_item_identifier", "parameter_item_semicolon",
        "parameter_item", "attr_port_item_semicolon", "attr_variable_item_semicolon",
        "variable_item", "subroutine_item_semicolon", "subroutine_item", "attr_construct_item",
        "construct_item", "attr_component_item", "component_item", "compiler_item",
        "type_item", "null_item", "list_of_interface_parameters", "list_of_parameter_declarations",
        "comma_parameter_declaration_star", "comma_parameter_declaration", "list_of_parameter_descriptions",
        "param_declaration", "param_description", "parameter_declaration", "local_parameter_declaration",
        "parameter_override", "list_of_tf_interface_ports", "list_of_tf_port_declarations",
        "list_of_tf_port_declarations_comma", "comma_attr_tf_port_declaration_star",
        "comma_attr_tf_port_declaration", "list_of_tf_port_declarations_semicolon",
        "attr_tf_port_declaration_semicolon_plus", "attr_tf_port_declaration_semicolon_star",
        "attr_tf_port_declaration_semicolon", "attr_tf_port_declaration", "tf_port_declaration",
        "list_of_interface_ports", "list_of_port_identifiers", "comma_port_identifier_star",
        "comma_port_identifier", "port_identifier", "list_of_port_declarations",
        "list_of_port_declarations_comma", "comma_attr_port_declaration_star",
        "comma_attr_port_declaration", "list_of_port_declarations_semicolon",
        "attr_port_declaration_semicolon_plus", "attr_port_declaration_semicolon_star",
        "attr_port_declaration_semicolon", "attr_port_declaration", "port_declaration",
        "port_description", "inout_description", "input_description", "output_description",
        "ref_description", "tf_declaration", "inout_declaration", "input_declaration",
        "output_declaration", "ref_declaration", "user_type", "user_type_identifer",
        "dimension_plus", "dimension_star", "dimension", "range_expression", "index_expression",
        "sb_range", "base_increment_range", "base_decrement_range", "base_expression",
        "net_type", "drive_strength", "drive_strength_value_0", "drive_strength_value_1",
        "strength0", "strength1", "highz0", "highz1", "charge_strength", "charge_size",
        "list_of_variable_descriptions", "comma_variable_description_star", "comma_variable_description",
        "variable_description", "variable_identifier", "list_of_hierarchical_variable_descriptions",
        "comma_hierarchical_variable_description_star", "comma_hierarchical_variable_description",
        "hierarchical_variable_description", "hierarchical_variable_identifier",
        "net_declaration", "reg_declaration", "logic_declaration", "bits_type",
        "bits_declaration", "integer_declaration", "int_declaration", "real_declaration",
        "time_declaration", "realtime_declaration", "event_declaration", "genvar_declaration",
        "usertype_variable_declaration", "string_declaration", "struct_declaration",
        "enum_declaration", "function_declaration", "function_type", "function_identifier",
        "function_interface", "function_item_declaration_star", "function_item_declaration_semicolon",
        "function_item_declaration", "function_statement", "colon_function_identifier",
        "task_declaration", "task_identifier", "task_interface", "task_item_declaration_semicolon",
        "task_item_declaration", "task_item_declaration_star", "task_statement",
        "struct_item_semicolon", "struct_item_star", "struct_item", "struct_type",
        "enum_type", "list_of_enum_items", "enum_item", "enum_identifier", "comma_enum_item_star",
        "comma_enum_item", "enumerated_type", "module_instantiation", "parameter_interface_assignments",
        "list_of_interface_assignments", "list_of_ordered_interface_assignments",
        "comma_ordered_interface_assignment_star", "comma_ordered_interface_assignment",
        "ordered_interface_assignment", "list_of_named_interface_assignments",
        "comma_named_interface_assignment_star", "comma_named_interface_assignment",
        "named_interface_assignment", "list_of_module_instances", "comma_module_instance_star",
        "comma_module_instance", "module_instance", "module_instance_identifier",
        "arrayed_identifier", "simple_arrayed_identifier", "escaped_arrayed_identifier",
        "port_interface_assignments", "delay", "list_of_delay_values", "comma_delay_value_star",
        "comma_delay_value", "delay_value", "pulldown_strength", "pullup_strength",
        "gate_instance_identifier", "gate_instantiation", "enable_gatetype", "mos_switchtype",
        "cmos_switchtype", "n_output_gatetype", "n_input_gatetype", "pass_switchtype",
        "pass_enable_switchtype", "pulldown_instantiation", "pullup_instantiation",
        "enable_instantiation", "mos_instantiation", "cmos_instantiation", "n_output_instantiation",
        "n_input_instantiation", "pass_instantiation", "pass_enable_instantiation",
        "list_of_pull_gate_instance", "list_of_enable_gate_instance", "list_of_mos_switch_instance",
        "list_of_cmos_switch_instance", "list_of_n_input_gate_instance", "list_of_n_output_gate_instance",
        "list_of_pass_switch_instance", "list_of_pass_enable_switch_instance",
        "comma_pull_gate_instance_star", "comma_enable_gate_instance_star", "comma_mos_switch_instance_star",
        "comma_cmos_switch_instance_star", "comma_n_input_gate_instance_star",
        "comma_n_output_gate_instance_star", "comma_pass_switch_instance_star",
        "comma_pass_enable_switch_instance_star", "comma_pull_gate_instance",
        "comma_enable_gate_instance", "comma_mos_switch_instance", "comma_cmos_switch_instance",
        "comma_n_input_gate_instance", "comma_n_output_gate_instance", "comma_pass_switch_instance",
        "comma_pass_enable_switch_instance", "pull_gate_instance", "enable_gate_instance",
        "mos_switch_instance", "cmos_switch_instance", "n_input_gate_instance",
        "n_output_gate_instance", "pass_switch_instance", "pass_enable_switch_instance",
        "pull_gate_interface", "enable_gate_interface", "mos_switch_interface",
        "cmos_switch_interface", "n_input_gate_interface", "n_output_gate_interface",
        "pass_switch_interface", "pass_enable_switch_interface", "list_of_input_terminals",
        "list_of_output_terminals", "comma_input_terminal_star", "comma_output_terminal_star",
        "comma_input_terminal", "comma_output_terminal", "enable_terminal", "input_terminal",
        "inout_terminal", "ncontrol_terminal", "output_terminal", "pcontrol_terminal",
        "statement_star", "statement_semicolon", "statement", "assignment_statement",
        "flow_control_statement", "block_statement", "task_call_statement", "event_statement",
        "procedural_statement", "expression_statement", "subroutine_statement",
        "return_statement", "null_statement", "procedural_continuous_assignments",
        "assign_statement", "deassign_statement", "force_statement", "release_statement",
        "procedural_timing_control_statement", "property_statement", "disable_condition_statement",
        "property_expression", "procedural_assertion_statement", "assert_else_statement",
        "assert_statement", "system_task_enable", "system_task_identifier", "task_interface_assignments",
        "task_enable", "hierarchical_task_identifier", "disable_statement", "hierarchical_block_identifier",
        "variable_lvalue", "hierarchical_variable_lvalue", "variable_concatenation",
        "variable_concatenation_value", "comma_vcv_star", "blocking_assignment",
        "nonblocking_assignment", "prefix_assignment", "postfix_assignment", "operator_assignment",
        "declarative_assignment", "delay_or_event_control", "delay_control", "event_control",
        "event_control_identifier", "event_control_expression", "event_expression",
        "single_event_expression", "event_expression_edgespec", "event_expression_or",
        "list_of_event_expression_comma", "comma_event_expression_star", "comma_event_expression",
        "list_of_event_expression_or", "or_event_expression_star", "or_event_expression",
        "event_control_wildcard", "repeat_event_control", "event_trigger", "hierarchical_event_identifier",
        "event_identifier", "wait_statement", "attr_generated_instantiation",
        "generated_instantiation", "generate_item_star", "generate_item", "generate_block",
        "generate_colon_block_identifier0", "generate_colon_block_identifier1",
        "generate_colon_block_identifier", "generate_block_identifier", "generate_conditional_statement",
        "generate_if_statement", "generate_else_statement", "generate_loop_statement",
        "generate_forever_loop_statement", "generate_repeat_loop_statement", "generate_while_loop_statement",
        "generate_do_loop_statement", "generate_for_loop_statement", "generate_case_statement",
        "generate_case_item_star", "generate_case_item", "conditional_statement",
        "if_statement", "else_statement", "conditional_expression", "loop_statement",
        "forever_loop_statement", "repeat_loop_statement", "while_loop_statement",
        "do_loop_statement", "for_loop_statement", "loop_init_assignment", "loop_terminate_expression",
        "loop_step_assignment", "case_statement", "case_item_star", "case_item",
        "case_switch", "case_item_key", "case_item_key_expression", "comma_case_item_key_expression",
        "comma_case_item_key_expression_star", "expression", "single_expression",
        "primary_range", "primary", "unary_expression", "unary_post_assign_expression",
        "unary_pre_assign_expression", "binary_expression", "ternary_expression",
        "mintypmax_expression", "structured_value", "arrayed_structured_value",
        "arrayed_structure_item", "comma_arrayed_structure_item", "comma_arrayed_structure_item_star",
        "arrayed_structure_item_plus", "variable_type_cast", "width_type_cast",
        "sign_type_cast", "null_type_cast", "variable_type", "type_cast_identifier",
        "type_cast_expression", "function_call", "hierarchical_function_identifier",
        "function_interface_assignments", "system_function_call", "system_function_identifier",
        "constant_function_call", "imported_function_call", "imported_function_hierarchical_identifier",
        "primary_hierarchical_identifier", "primary_imported_hierarchical_identifier",
        "imported_hierarchical_identifier", "parenthesis_expression", "concatenation",
        "multiple_concatenation", "comma_expression_plus", "comma_expression_star",
        "typedef_declaration", "typedef_identifier", "typedef_definition", "typedef_definition_type",
        "complex_type", "typedef_type", "par_block", "seq_block", "block_identifier",
        "colon_block_identifier", "block_item_declaration_star", "block_item_declaration_semicolon",
        "block_item_declaration", "join_keyword", "continuous_assign", "list_of_variable_assignments",
        "comma_variable_assignment_star", "comma_variable_assignment", "variable_assignment",
        "initial_construct", "final_construct", "always_keyword", "always_construct",
        "attribute_instance_star", "attribute_instance", "attr_spec_star", "attr_spec",
        "attr_name", "identifier", "hierarchical_identifier", "dot_hierarchical_identifier_branch_item_star",
        "dot_hierarchical_identifier_branch_item", "hierarchical_identifier_branch_item",
        "timescale_compiler_directive", "timeunit_directive", "timeprecision_directive",
        "default_nettype_statement", "number", "integral_number", "real_number",
    ];
    SysVerilogHDLParser._LITERAL_NAMES = [
        undefined, "';;'", "'+'", "'-'", "'!'", "'&'", "'~&'", "'|'", "'~|'",
        "'^'", "'~^'", "'^~'", "'%'", "'=='", "'!='", "'==='", "'!=='", "'&&'",
        "'||'", "'**'", "'<'", "'>'", "'>='", "'>>'", "'<<'", "'>>>'", "'<<<'",
        "'++'", "'--'", "'+='", "'-='", "'&='", "'|='", "'\r'", "'//'", "'/*'",
        "'\n'", "'*/'", undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, "'always'",
        "'always_comb'", "'always_ff'", "'and'", "'assert'", "'assign'", "'automatic'",
        "'begin'", "'bit'", "'buf'", "'bufif0'", "'bufif1'", "'byte'", "'case'",
        "'casez'", "'casex'", "'cell'", "'cmos'", "'config'", "'const'", "'deassign'",
        "'default'", "'`default_nettype'", "'defparam'", "'design'", "'disable'",
        "'do'", "'edge'", "'else'", "'end'", "'endcase'", "'endconfig'", "'endfunction'",
        "'endgenerate'", "'endmodule'", "'endpackage'", "'endproperty'", "'endspecify'",
        "'endtask'", "'enum'", "'event'", "'final'", "'for'", "'force'", "'forever'",
        "'fork'", "'function'", "'generate'", "'genvar'", "'highz0'", "'highz1'",
        "'if'", "'iff'", "'ifnone'", "'import'", "'-incdir'", "'initial'", "'inout'",
        "'input'", "'instance'", "'int'", "'integer'", "'join'", "'join_any'",
        "'join_none'", "'large'", "'liblist'", "'`library'", "'localparam'", "'logic'",
        "'macromodule'", "'medium'", "'module'", "'nand'", "'negedge'", "'nmos'",
        "'none'", "'nor'", "'not'", "'notif0'", "'notif1'", "'noshowcancelled'",
        "'or '", "'output'", "'parameter'", "'PATHPULSE$'", "'posedge'", "'package'",
        "'packed'", "'pmos'", "'property'", "'pull0'", "'pull1'", "'pullup'",
        "'pulldown'", "'pulsestyle_ondetect'", "'pulsestyle_onevent'", "'rcmos'",
        "'real'", "'realtime'", "'ref'", "'reg'", "'release'", "'repeat'", "'return'",
        "'rnmos'", "'rpmos'", "'rtran'", "'rtranif0'", "'rtranif1'", "'scalared'",
        "'showcancelled'", "'signed'", "'small'", "'specify'", "'specparam'",
        "'static'", "'string'", "'strong0'", "'strong1'", "'struct'", "'supply0'",
        "'supply1'", "'task'", "'`timescale'", "'time'", "'timeprecision'", "'timeunit'",
        "'tran'", "'tranif0'", "'tranif1'", "'tri'", "'triand'", "'trior'", "'trireg'",
        "'tri0'", "'tri1'", "'typedef'", "'union'", "'unsigned'", "'use'", "'uwire'",
        "'vectored'", "'wait'", "'wand'", "'weak0'", "'weak1'", "'while'", "'wire'",
        "'wor'", "'xnor'", "'xor'", undefined, undefined, undefined, undefined,
        "'@'", "')'", "':'", "','", "'->'", "'.'", "'$'", "'::'", "'='", "'=>'",
        "'/'", "'#'", "'<='", "'['", "'{'", "'-:'", "'('", "'+:'", "'?'", "'''",
        "']'", "'}'", "';'", "'*'", "'*>'", "'~'",
    ];
    SysVerilogHDLParser._SYMBOLIC_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, "Carriage_return",
        "Forward_slash_forward_slash", "Forward_slash_star", "New_line", "Star_forward_slash",
        "Block_comment", "Line_directive", "One_line_comment", "WHITE_SPACE",
        "Binary_number", "Decimal_number", "Fixed_point_number", "Hex_number",
        "Octal_number", "Real_exp_form", "Unbased_unsized_literal", "Always",
        "Always_comb", "Always_ff", "And", "Assert", "Assign", "Automatic", "Begin",
        "Bit", "Buf", "Bufif0", "Bufif1", "Byte", "Case_keyword", "Casez", "Casex",
        "Cell", "Cmos", "Config", "Const", "Deassign", "Default", "Default_nettype",
        "Defparam", "Design", "Disable", "Do", "Edge", "Else", "End", "Endcase",
        "Endconfig", "Endfunction", "Endgenerate", "Endmodule", "Endpackage",
        "Endproperty", "Endspecify", "Endtask", "Enum", "Event_keyword", "Final",
        "For", "Force", "Forever", "Fork", "Function", "Generate", "Genvar", "Highz0",
        "Highz1", "If", "Iff", "Ifnone", "Import", "Incdir", "Initial", "Inout",
        "Input", "Instance", "Int", "Integer", "Join", "Join_any", "Join_none",
        "Large", "Liblist", "Library", "Localparam", "Logic", "Macromodule", "Medium",
        "Module_keyword_only", "Nand", "Negedge", "Nmos", "NONE", "Nor", "Not",
        "Notif0", "Notif1", "Noshowcancelled", "Or", "Output", "Parameter", "Path_pulse_dollar",
        "Posedge", "Package", "Packed", "Pmos", "Property", "Pull0", "Pull1",
        "Pullup", "Pulldown", "Pulsestyle_ondetect", "Pulsestyle_onevent", "Rcmos",
        "Real", "Realtime", "Ref", "Reg", "Release", "Repeat", "Return", "Rnmos",
        "Rpmos", "Rtran", "Rtranif0", "Rtranif1", "Scalared", "Showcancelled",
        "Signed", "Small", "Specify", "Specparam", "Static", "SVString", "Strong0",
        "Strong1", "Struct", "Supply0", "Supply1", "Task", "Tick_timescale", "Time",
        "Timeprecision", "Timeunit", "Tran", "Tranif0", "Tranif1", "Tri", "Tri_and",
        "Tri_or", "Tri_reg", "Tri0", "Tri1", "Typedef", "UnionStruct", "Unsigned",
        "Use", "Uwire", "Vectored", "Wait", "Wand", "Weak0", "Weak1", "While",
        "Wire", "Wor", "Xnor", "Xor", "Dollar_Identifier", "Escaped_identifier",
        "Simple_identifier", "String_literal", "At", "Close_parenthesis", "Colon",
        "Comma", "Dash_right_angle", "Dot", "Dollar", "Double_colon", "Equal",
        "Equals_right_angle", "Forward_slash", "Hash", "Left_angle_equals", "Left_bracket",
        "Left_curly_bracket", "Minus_colon", "Open_parenthesis", "Plus_colon",
        "Question_mark", "Quote", "Right_bracket", "Right_curly_bracket", "Semicolon",
        "Star", "Star_right_angle", "Tilde", "Time_literal", "Edge_control_specifier",
    ];
    SysVerilogHDLParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(SysVerilogHDLParser._LITERAL_NAMES, SysVerilogHDLParser._SYMBOLIC_NAMES, []);
    SysVerilogHDLParser._serializedATNSegments = 6;
    SysVerilogHDLParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\xEA\u0C3C\x04" +
        "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
        "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
        "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
        "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
        "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
        "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
        "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
        "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
        "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
        "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
        "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
        "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
        "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
        "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
        "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
        "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
        "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
        "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
        "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
        "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
        "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
        "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
        "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
        "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
        "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
        "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
        "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
        "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
        "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
        "\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
        "\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
        "\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
        "\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
        "\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
        "\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
        "\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
        "\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
        "\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
        "\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
        "\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
        "\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
        "\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
        "\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
        "\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
        "\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
        "\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
        "\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
        "\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
        "\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
        "\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
        "\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
        "\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
        "\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
        "\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
        "\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
        "\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
        "\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
        "\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
        "\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
        "\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
        "\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
        "\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
        "\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
        "\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
        "\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
        "\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
        "\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
        "\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
        "\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
        "\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
        "\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
        "\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
        "\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
        "\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
        "\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
        "\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
        "\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
        "\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
        "\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
        "\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
        "\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
        "\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
        "\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
        "\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
        "\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
        "\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
        "\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
        "\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
        "\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
        "\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x03" +
        "\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
        "\x05\x05\x05\u0387\n\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
        "\t\x03\t\x03\n\x03\n\x03\n\x03\v\x07\v\u0395\n\v\f\v\x0E\v\u0398\v\v\x03" +
        "\f\x03\f\x03\f\x05\f\u039D\n\f\x03\r\x03\r\x03\x0E\x03\x0E\x05\x0E\u03A3" +
        "\n\x0E\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u03A8\n\x0F\x03\x0F\x03\x0F\x05" +
        "\x0F\u03AC\n\x0F\x03\x0F\x03\x0F\x05\x0F\u03B0\n\x0F\x03\x0F\x03\x0F\x05" +
        "\x0F\u03B4\n\x0F\x03\x0F\x03\x0F\x05\x0F\u03B8\n\x0F\x05\x0F\u03BA\n\x0F" +
        "\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10" +
        "\u03C4\n\x10\x03\x11\x03\x11\x03\x12\x05\x12\u03C9\n\x12\x03\x12\x05\x12" +
        "\u03CC\n\x12\x03\x13\x03\x13\x03\x13\x05\x13\u03D1\n\x13\x03\x13\x03\x13" +
        "\x03\x14\x03\x14\x05\x14\u03D7\n\x14\x03\x14\x03\x14\x03\x15\x07\x15\u03DC" +
        "\n\x15\f\x15\x0E\x15\u03DF\v\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16" +
        "\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u03EB\n\x16\x03\x17\x03" +
        "\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05" +
        "\x18\u03F7\n\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x07\x1B" +
        "\u03FF\n\x1B\f\x1B\x0E\x1B\u0402\v\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
        "\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u040B\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03" +
        "\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05" +
        "\x1D\u0419\n\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03" +
        " \x05 \u0423\n \x03!\x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03#\x03#" +
        "\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x05" +
        "#\u043C\n#\x03$\x03$\x05$\u0440\n$\x03%\x03%\x05%\u0444\n%\x03&\x03&\x03" +
        "&\x03\'\x03\'\x03\'\x03\'\x05\'\u044D\n\'\x03(\x03(\x03(\x03)\x03)\x05" +
        ")\u0454\n)\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x05*\u045D\n*\x03+\x03+" +
        "\x03+\x03+\x05+\u0463\n+\x03,\x03,\x03-\x03-\x05-\u0469\n-\x03.\x03.\x03" +
        ".\x03/\x07/\u046F\n/\f/\x0E/\u0472\v/\x030\x030\x030\x031\x031\x032\x05" +
        "2\u047A\n2\x032\x052\u047D\n2\x032\x032\x033\x033\x033\x033\x033\x033" +
        "\x033\x033\x033\x053\u048A\n3\x034\x034\x034\x035\x035\x035\x036\x036" +
        "\x036\x037\x037\x057\u0497\n7\x038\x038\x058\u049B\n8\x039\x039\x039\x03" +
        ":\x07:\u04A1\n:\f:\x0E:\u04A4\v:\x03;\x03;\x03;\x03<\x03<\x03=\x06=\u04AC" +
        "\n=\r=\x0E=\u04AD\x03>\x07>\u04B1\n>\f>\x0E>\u04B4\v>\x03?\x03?\x03?\x03" +
        "@\x03@\x03@\x03A\x03A\x03A\x03A\x03A\x05A\u04C1\nA\x03B\x03B\x05B\u04C5" +
        "\nB\x03C\x03C\x03C\x05C\u04CA\nC\x03D\x07D\u04CD\nD\fD\x0ED\u04D0\vD\x03" +
        "E\x03E\x03E\x03F\x03F\x03G\x03G\x05G\u04D9\nG\x03H\x03H\x03H\x03I\x07" +
        "I\u04DF\nI\fI\x0EI\u04E2\vI\x03J\x03J\x03J\x03K\x03K\x03L\x06L\u04EA\n" +
        "L\rL\x0EL\u04EB\x03M\x07M\u04EF\nM\fM\x0EM\u04F2\vM\x03N\x03N\x03N\x03" +
        "O\x03O\x03O\x03P\x03P\x03P\x03P\x05P\u04FE\nP\x03Q\x05Q\u0501\nQ\x03Q" +
        "\x05Q\u0504\nQ\x03Q\x03Q\x03R\x03R\x05R\u050A\nR\x03S\x03S\x03S\x03S\x03" +
        "S\x03S\x03S\x03S\x03S\x03S\x03S\x05S\u0517\nS\x03T\x03T\x03T\x03T\x03" +
        "T\x03T\x03T\x03T\x05T\u0521\nT\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03" +
        "U\x05U\u052B\nU\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03" +
        "V\x05V\u0538\nV\x03W\x03W\x03W\x03X\x03X\x03X\x03Y\x03Y\x03Y\x03Z\x03" +
        "Z\x03Z\x03[\x03[\x03\\\x03\\\x03]\x06]\u054B\n]\r]\x0E]\u054C\x03^\x07" +
        "^\u0550\n^\f^\x0E^\u0553\v^\x03_\x03_\x03_\x03_\x03`\x03`\x03`\x03`\x05" +
        "`\u055D\n`\x03a\x03a\x03a\x05a\u0562\na\x03b\x03b\x03b\x03b\x03c\x03c" +
        "\x03c\x03c\x03d\x03d\x03d\x03d\x03e\x03e\x03f\x03f\x03g\x03g\x03g\x03" +
        "g\x03g\x03g\x03h\x03h\x03h\x03h\x05h\u057E\nh\x03i\x03i\x03i\x03i\x05" +
        "i\u0584\ni\x03j\x03j\x03k\x03k\x03l\x03l\x03m\x03m\x03n\x03n\x03n\x03" +
        "n\x03o\x03o\x03p\x03p\x03p\x03q\x07q\u0598\nq\fq\x0Eq\u059B\vq\x03r\x03" +
        "r\x03r\x03s\x03s\x05s\u05A2\ns\x03s\x03s\x05s\u05A6\ns\x03t\x03t\x03u" +
        "\x03u\x03u\x03v\x07v\u05AE\nv\fv\x0Ev\u05B1\vv\x03w\x03w\x03w\x03x\x03" +
        "x\x05x\u05B8\nx\x03x\x03x\x05x\u05BC\nx\x03y\x03y\x03z\x03z\x05z\u05C2" +
        "\nz\x03z\x05z\u05C5\nz\x03z\x05z\u05C8\nz\x03z\x05z\u05CB\nz\x03z\x05" +
        "z\u05CE\nz\x03z\x05z\u05D1\nz\x03z\x05z\u05D4\nz\x03z\x03z\x03{\x03{\x05" +
        "{\u05DA\n{\x03{\x05{\u05DD\n{\x03{\x03{\x03|\x03|\x05|\u05E3\n|\x03|\x05" +
        "|\u05E6\n|\x03|\x03|\x03}\x03}\x03~\x03~\x05~\u05EE\n~\x03~\x05~\u05F1" +
        "\n~\x03~\x03~\x03\x7F\x05\x7F\u05F6\n\x7F\x03\x7F\x03\x7F\x05\x7F\u05FA" +
        "\n\x7F\x03\x7F\x03\x7F\x03\x80\x05\x80\u05FF\n\x80\x03\x80\x03\x80\x05" +
        "\x80\u0603\n\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03\x81\x03\x82\x03\x82" +
        "\x03\x82\x03\x83\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x85\x03\x85" +
        "\x03\x85\x03\x86\x05\x86\u0617\n\x86\x03\x86\x03\x86\x05\x86\u061B\n\x86" +
        "\x03\x86\x03\x86\x03\x87\x03\x87\x03\x87\x03\x88\x03\x88\x03\x88\x03\x89" +
        "\x03\x89\x03\x89\x03\x8A\x03\x8A\x05\x8A\u062A\n\x8A\x03\x8A\x05\x8A\u062D" +
        "\n\x8A\x03\x8A\x05\x8A\u0630\n\x8A\x03\x8A\x05\x8A\u0633\n\x8A\x03\x8A" +
        "\x03\x8A\x05\x8A\u0637\n\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05" +
        "\x8A\u063E\n\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B" +
        "\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u064A\n\x8B\x03\x8C\x03\x8C\x03\x8D\x03" +
        "\x8D\x05\x8D\u0650\n\x8D\x03\x8D\x03\x8D\x03\x8E\x07\x8E\u0655\n\x8E\f" +
        "\x8E\x0E\x8E\u0658\v\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x90\x03\x90\x05\x90" +
        "\u065F\n\x90\x03\x91\x03\x91\x03\x92\x03\x92\x03\x92\x03\x93\x03\x93\x05" +
        "\x93\u0668\n\x93\x03\x93\x03\x93\x05\x93\u066C\n\x93\x03\x93\x03\x93\x03" +
        "\x93\x03\x93\x03\x93\x03\x94\x03\x94\x03\x95\x03\x95\x05\x95\u0677\n\x95" +
        "\x03\x95\x03\x95\x03\x96\x03\x96\x03\x96\x03\x97\x03\x97\x05\x97\u0680" +
        "\n\x97\x03\x98\x07\x98\u0683\n\x98\f\x98\x0E\x98\u0686\v\x98\x03\x99\x03" +
        "\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9B\x07\x9B\u068E\n\x9B\f\x9B\x0E\x9B" +
        "\u0691\v\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u0699" +
        "\n\x9C\x03\x9D\x03\x9D\x05\x9D\u069D\n\x9D\x03\x9D\x03\x9D\x03\x9D\x03" +
        "\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u06A7\n\x9E\x03\x9F\x03\x9F" +
        "\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0\u06B1\n\xA0\x03" +
        "\xA1\x03\xA1\x03\xA2\x07\xA2\u06B6\n\xA2\f\xA2\x0E\xA2\u06B9\v\xA2\x03" +
        "\xA3\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x05\xA4\u06C0\n\xA4\x03\xA4\x05\xA4" +
        "\u06C3\n\xA4\x03\xA4\x05\xA4\u06C6\n\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4" +
        "\x03\xA5\x03\xA5\x05\xA5\u06CE\n\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA6\x03" +
        "\xA6\x03\xA6\x05\xA6\u06D6\n\xA6\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x05\xA7" +
        "\u06DC\n\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA9\x07\xA9\u06E2\n\xA9\f\xA9" +
        "\x0E\xA9\u06E5\v\xA9\x03\xAA\x03\xAA\x05\xAA\u06E9\n\xAA\x03\xAB\x03\xAB" +
        "\x03\xAC\x03\xAC\x03\xAC\x03\xAD\x07\xAD\u06F1\n\xAD\f\xAD\x0E\xAD\u06F4" +
        "\v\xAD\x03\xAE\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF" +
        "\u06FD\n\xAF\x03\xAF\x05\xAF\u0700\n\xAF\x03\xAF\x03\xAF\x05\xAF\u0704" +
        "\n\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB1\x07\xB1\u070A\n\xB1\f\xB1\x0E\xB1" +
        "\u070D\v\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB3\x03\xB3\x05\xB3\u0714\n\xB3" +
        "\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x05\xB5\u071A\n\xB5\x03\xB6\x03\xB6\x05" +
        "\xB6\u071E\n\xB6\x03\xB7\x03\xB7\x05\xB7\u0722\n\xB7\x03\xB8\x03\xB8\x05" +
        "\xB8\u0726\n\xB8\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9" +
        "\x03\xB9\x03\xB9\x05\xB9\u0731\n\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBB\x07" +
        "\xBB\u0737\n\xBB\f\xBB\x0E\xBB\u073A\v\xBB\x03\xBC\x03\xBC\x03\xBC\x03" +
        "\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03" +
        "\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x05" +
        "\xBE\u0751\n\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
        "\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
        "\x05\xBF\u0763\n\xBF\x03\xC0\x03\xC0\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03" +
        "\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u0770\n\xC1\x03\xC2\x03\xC2" +
        "\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x03\xC7" +
        "\x03\xC7\x03\xC8\x03\xC8\x03\xC9\x03\xC9\x05\xC9\u0782\n\xC9\x03\xC9\x03" +
        "\xC9\x03\xC9\x03\xCA\x03\xCA\x05\xCA\u0789\n\xCA\x03\xCA\x03\xCA\x03\xCA" +
        "\x03\xCB\x03\xCB\x05\xCB\u0790\n\xCB\x03\xCB\x05\xCB\u0793\n\xCB\x03\xCB" +
        "\x03\xCB\x03\xCB\x03\xCC\x03\xCC\x05\xCC\u079A\n\xCC\x03\xCC\x03\xCC\x03" +
        "\xCC\x03\xCD\x03\xCD\x05\xCD\u07A1\n\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCE" +
        "\x03\xCE\x05\xCE\u07A8\n\xCE\x03\xCE\x05\xCE\u07AB\n\xCE\x03\xCE\x03\xCE" +
        "\x03\xCE\x03\xCF\x03\xCF\x05\xCF\u07B2\n\xCF\x03\xCF\x05\xCF\u07B5\n\xCF" +
        "\x03\xCF\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD1\x03\xD1" +
        "\x05\xD1\u07C0\n\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD2\x03\xD2\x03\xD2\x03" +
        "\xD3\x03\xD3\x03\xD3\x03\xD4\x03\xD4\x03\xD4\x03\xD5\x03\xD5\x03\xD5\x03" +
        "\xD6\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD8\x03\xD8\x03\xD8\x03" +
        "\xD9\x03\xD9\x03\xD9\x03\xDA\x07\xDA\u07DE\n\xDA\f\xDA\x0E\xDA\u07E1\v" +
        "\xDA\x03\xDB\x07\xDB\u07E4\n\xDB\f\xDB\x0E\xDB\u07E7\v\xDB\x03\xDC\x07" +
        "\xDC\u07EA\n\xDC\f\xDC\x0E\xDC\u07ED\v\xDC\x03\xDD\x07\xDD\u07F0\n\xDD" +
        "\f\xDD\x0E\xDD\u07F3\v\xDD\x03\xDE\x07\xDE\u07F6\n\xDE\f\xDE\x0E\xDE\u07F9" +
        "\v\xDE\x03\xDF\x07\xDF\u07FC\n\xDF\f\xDF\x0E\xDF\u07FF\v\xDF\x03\xE0\x07" +
        "\xE0\u0802\n\xE0\f\xE0\x0E\xE0\u0805\v\xE0\x03\xE1\x07\xE1\u0808\n\xE1" +
        "\f\xE1\x0E\xE1\u080B\v\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE3\x03\xE3\x03" +
        "\xE3\x03\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x03" +
        "\xE6\x03\xE7\x03\xE7\x03\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE9\x03\xE9\x03" +
        "\xE9\x03\xEA\x05\xEA\u0826\n\xEA\x03\xEA\x03\xEA\x03\xEB\x05\xEB\u082B" +
        "\n\xEB\x03\xEB\x03\xEB\x03\xEC\x05\xEC\u0830\n\xEC\x03\xEC\x03\xEC\x03" +
        "\xED\x05\xED\u0835\n\xED\x03\xED\x03\xED\x03\xEE\x05\xEE\u083A\n\xEE\x03" +
        "\xEE\x03\xEE\x03\xEF\x05\xEF\u083F\n\xEF\x03\xEF\x03\xEF\x03\xF0\x05\xF0" +
        "\u0844\n\xF0\x03\xF0\x03\xF0\x03\xF1\x05\xF1\u0849\n\xF1\x03\xF1\x03\xF1" +
        "\x03\xF2\x03\xF2\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3" +
        "\x03\xF3\x03\xF3\x03\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4" +
        "\x03\xF4\x03\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5" +
        "\x03\xF5\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6" +
        "\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF8\x03\xF8\x03\xF8" +
        "\x03\xF8\x03\xF8\x03\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9" +
        "\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFB\x03\xFB\x03\xFB\x03\xFC" +
        "\x07\xFC\u088C\n\xFC\f\xFC\x0E\xFC\u088F\v\xFC\x03\xFD\x07\xFD\u0892\n" +
        "\xFD\f\xFD\x0E\xFD\u0895\v\xFD\x03\xFE\x03\xFE\x03\xFE\x03\xFF\x03\xFF" +
        "\x03\xFF\x03\u0100\x03\u0100\x03\u0101\x03\u0101\x03\u0102\x03\u0102\x03" +
        "\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0105\x03\u0105\x03\u0106\x07" +
        "\u0106\u08AA\n\u0106\f\u0106\x0E\u0106\u08AD\v\u0106\x03\u0107\x03\u0107" +
        "\x03\u0107\x05\u0107\u08B2\n\u0107\x03\u0107\x05\u0107\u08B5\n\u0107\x03" +
        "\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03" +
        "\u0108\x05\u0108\u08BF\n\u0108\x03\u0109\x03\u0109\x03\u0109\x03\u0109" +
        "\x03\u0109\x03\u0109\x05\u0109\u08C7\n\u0109\x03\u010A\x03\u010A\x03\u010A" +
        "\x05\u010A\u08CC\n\u010A\x03\u010B\x03\u010B\x05\u010B\u08D0\n\u010B\x03" +
        "\u010C\x03\u010C\x03\u010C\x05\u010C\u08D5\n\u010C\x03\u010D\x03\u010D" +
        "\x05\u010D\u08D9\n\u010D\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x05\u010E" +
        "\u08DF\n\u010E\x03\u010F\x03\u010F\x03\u0110\x03\u0110\x03\u0111\x03\u0111" +
        "\x03\u0111\x05\u0111\u08E8\n\u0111\x03\u0112\x03\u0112\x03\u0113\x03\u0113" +
        "\x03\u0113\x03\u0113\x05\u0113\u08F0\n\u0113\x03\u0114\x03\u0114\x03\u0114" +
        "\x03\u0115\x03\u0115\x03\u0115\x03\u0116\x03\u0116\x03\u0116\x03\u0117" +
        "\x03\u0117\x03\u0117\x03\u0118\x03\u0118\x03\u0118\x03\u0119\x03\u0119" +
        "\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
        "\x03\u011B\x03\u011B\x03\u011C\x03\u011C\x05\u011C\u090E\n\u011C\x03\u011D" +
        "\x03\u011D\x03\u011D\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u0916\n\u011E" +
        "\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011F\x03\u011F" +
        "\x05\u011F\u091F\n\u011F\x03\u0120\x03\u0120\x03\u0121\x03\u0121\x05\u0121" +
        "\u0925\n\u0121\x03\u0121\x03\u0121\x03\u0122\x03\u0122\x05\u0122\u092B" +
        "\n\u0122\x03\u0123\x03\u0123\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x05" +
        "\u0124\u0933\n\u0124\x03\u0125\x03\u0125\x03\u0126\x03\u0126\x05\u0126" +
        "\u0939\n\u0126\x03\u0127\x03\u0127\x03\u0128\x03\u0128\x03\u0128\x03\u0128" +
        "\x03\u0128\x03\u0129\x03\u0129\x05\u0129\u0944\n\u0129\x03\u012A\x03\u012A" +
        "\x07\u012A\u0948\n\u012A\f\u012A\x0E\u012A\u094B\v\u012A\x03\u012B\x03" +
        "\u012B\x03\u012B\x05\u012B\u0950\n\u012B\x03\u012B\x03\u012B\x03\u012C";
    SysVerilogHDLParser._serializedATNSegment1 = "\x03\u012C\x03\u012C\x05\u012C\u0957\n\u012C\x03\u012C\x03\u012C\x03\u012D" +
        "\x03\u012D\x03\u012D\x03\u012E\x03\u012E\x03\u012E\x03\u012F\x03\u012F" +
        "\x03\u012F\x03\u012F\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130" +
        "\x03\u0130\x05\u0130\u096B\n\u0130\x03\u0131\x03\u0131\x03\u0131\x05\u0131" +
        "\u0970\n\u0131\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132" +
        "\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132" +
        "\u097E\n\u0132\x03\u0133\x03\u0133\x03\u0133\x05\u0133\u0983\n\u0133\x03" +
        "\u0134\x03\u0134\x03\u0134\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03" +
        "\u0135\x03\u0136\x03\u0136\x05\u0136\u098F\n\u0136\x03\u0137\x03\u0137" +
        "\x03\u0137\x03\u0137\x03\u0137\x05\u0137\u0996\n\u0137\x03\u0138\x03\u0138" +
        "\x03\u0139\x03\u0139\x05\u0139\u099C\n\u0139\x03\u013A\x03\u013A\x03\u013A" +
        "\x03\u013B\x07\u013B\u09A2\n\u013B\f\u013B\x0E\u013B\u09A5\v\u013B\x03" +
        "\u013C\x03\u013C\x03\u013C\x03\u013D\x03\u013D\x03\u013D\x03\u013E\x07" +
        "\u013E\u09AE\n\u013E\f\u013E\x0E\u013E\u09B1\v\u013E\x03\u013F\x03\u013F" +
        "\x03\u013F\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140" +
        "\x05\u0140\u09BC\n\u0140\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0141" +
        "\x03\u0141\x03\u0142\x03\u0142\x03\u0142\x03\u0143\x03\u0143\x03\u0144" +
        "\x03\u0144\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145" +
        "\x03\u0146\x03\u0146\x03\u0146\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
        "\x05\u0147\u09D8\n\u0147\x03\u0148\x07\u0148\u09DB\n\u0148\f\u0148\x0E" +
        "\u0148\u09DE\v\u0148\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
        "\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u09EA\n\u0149" +
        "\x03\u014A\x03\u014A\x05\u014A\u09EE\n\u014A\x03\u014A\x03\u014A\x03\u014A" +
        "\x05\u014A\u09F3\n\u014A\x03\u014A\x05\u014A\u09F6\n\u014A\x03\u014B\x03" +
        "\u014B\x03\u014C\x03\u014C\x03\u014D\x03\u014D\x03\u014D\x03\u014E\x03" +
        "\u014E\x03\u014F\x03\u014F\x05\u014F\u0A03\n\u014F\x03\u0150\x03\u0150" +
        "\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0151\x03\u0151\x03\u0151" +
        "\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x05\u0152\u0A13\n\u0152" +
        "\x03\u0153\x03\u0153\x03\u0153\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
        "\x03\u0154\x03\u0154\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155" +
        "\x03\u0155\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
        "\x03\u0156\x03\u0156\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157" +
        "\x03\u0157\x03\u0157\x05\u0157\u0A33\n\u0157\x03\u0157\x03\u0157\x03\u0157" +
        "\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
        "\x03\u0159\x07\u0159\u0A40\n\u0159\f\u0159\x0E\u0159\u0A43\v\u0159\x03" +
        "\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x05\u015A\u0A4B" +
        "\n\u015A\x03\u015A\x05\u015A\u0A4E\n\u015A\x03\u015B\x03\u015B\x05\u015B" +
        "\u0A52\n\u015B\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C" +
        "\x03\u015D\x03\u015D\x03\u015D\x03\u015E\x03\u015E\x03\u015F\x03\u015F" +
        "\x03\u015F\x03\u015F\x03\u015F\x05\u015F\u0A64\n\u015F\x03\u0160\x03\u0160" +
        "\x03\u0160\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
        "\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0163" +
        "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
        "\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
        "\x05\u0164\u0A84\n\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0165\x03\u0165" +
        "\x05\u0165\u0A8B\n\u0165\x03\u0166\x03\u0166\x03\u0167\x03\u0167\x03\u0167" +
        "\x03\u0167\x05\u0167\u0A93\n\u0167\x03\u0168\x03\u0168\x03\u0168\x03\u0168" +
        "\x03\u0168\x03\u0168\x03\u0168\x03\u0169\x07\u0169\u0A9D\n\u0169\f\u0169" +
        "\x0E\u0169\u0AA0\v\u0169\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016A" +
        "\x03\u016A\x05\u016A\u0AA8\n\u016A\x03\u016A\x05\u016A\u0AAB\n\u016A\x03" +
        "\u016B\x03\u016B\x03\u016C\x03\u016C\x03\u016C\x03\u016D\x03\u016D\x03" +
        "\u016E\x03\u016E\x03\u016E\x03\u016F\x07\u016F\u0AB8\n\u016F\f\u016F\x0E" +
        "\u016F\u0ABB\v\u016F\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170" +
        "\x03\u0170\x03\u0170\x05\u0170\u0AC4\n\u0170\x03\u0171\x03\u0171\x03\u0171" +
        "\x03\u0171\x05\u0171\u0ACA\n\u0171\x03\u0172\x03\u0172\x03\u0172\x03\u0173" +
        "\x03\u0173\x03\u0173\x03\u0173\x03\u0173\x03\u0173\x03\u0173\x03\u0173" +
        "\x03\u0173\x03\u0173\x03\u0173\x05\u0173\u0ADA\n\u0173\x03\u0174\x03\u0174" +
        "\x03\u0174\x03\u0175\x03\u0175\x03\u0175\x03\u0176\x03\u0176\x03\u0176" +
        "\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x03\u0178\x03\u0178\x03\u0178" +
        "\x03\u0178\x03\u0178\x03\u0178\x03\u0179\x03\u0179\x03\u0179\x03\u0179" +
        "\x03\u0179\x03\u0179\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A" +
        "\x07\u017A\u0AFA\n\u017A\f\u017A\x0E\u017A\u0AFD\v\u017A\x03\u017A\x03" +
        "\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03" +
        "\u017A\x05\u017A\u0B08\n\u017A\x03\u017B\x03\u017B\x03\u017B\x03\u017B" +
        "\x03\u017B\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
        "\x03\u017C\x05\u017C\u0B16\n\u017C\x03\u017D\x03\u017D\x03\u017D\x03\u017E" +
        "\x07\u017E\u0B1C\n\u017E\f\u017E\x0E\u017E\u0B1F\v\u017E\x03\u017F\x03" +
        "\u017F\x03\u017F\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0181\x03" +
        "\u0181\x03\u0181\x03\u0181\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03" +
        "\u0183\x03\u0183\x03\u0183\x03\u0184\x03\u0184\x05\u0184\u0B35\n\u0184" +
        "\x03\u0185\x03\u0185\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x05\u0186" +
        "\u0B3D\n\u0186\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0188\x03\u0188" +
        "\x03\u0189\x03\u0189\x05\u0189\u0B47\n\u0189\x03\u0189\x03\u0189\x03\u018A" +
        "\x03\u018A\x05\u018A\u0B4D\n\u018A\x03\u018B\x03\u018B\x03\u018C\x03\u018C" +
        "\x03\u018D\x03\u018D\x03\u018D\x03\u018D\x03\u018E\x03\u018E\x03\u018F" +
        "\x03\u018F\x05\u018F\u0B5B\n\u018F\x03\u0190\x03\u0190\x05\u0190\u0B5F" +
        "\n\u0190\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0192\x03\u0192\x03" +
        "\u0192\x03\u0192\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03" +
        "\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0195\x03\u0195\x06" +
        "\u0195\u0B75\n\u0195\r\u0195\x0E\u0195\u0B76\x03\u0196\x03\u0196\x07\u0196" +
        "\u0B7B\n\u0196\f\u0196\x0E\u0196\u0B7E\v\u0196\x03\u0197\x03\u0197\x03" +
        "\u0197\x03\u0197\x03\u0198\x03\u0198\x03\u0199\x03\u0199\x03\u0199\x05" +
        "\u0199\u0B89\n\u0199\x03\u019A\x03\u019A\x05\u019A\u0B8D\n\u019A\x03\u019B" +
        "\x03\u019B\x05\u019B\u0B91\n\u019B\x03\u019B\x05\u019B\u0B94\n\u019B\x03" +
        "\u019C\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x05\u019C\u0B9B\n\u019C" +
        "\x03\u019D\x03\u019D\x03\u019D\x05\u019D\u0BA0\n\u019D\x03\u019D\x03\u019D" +
        "\x03\u019D\x03\u019D\x05\u019D\u0BA6\n\u019D\x03\u019E\x03\u019E\x03\u019E" +
        "\x05\u019E\u0BAB\n\u019E\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x05\u019E" +
        "\u0BB1\n\u019E\x03\u019F\x03\u019F\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A1" +
        "\x07\u01A1\u0BB9\n\u01A1\f\u01A1\x0E\u01A1\u0BBC\v\u01A1\x03\u01A2\x03" +
        "\u01A2\x03\u01A2\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03" +
        "\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03" +
        "\u01A3\x05\u01A3\u0BCE\n\u01A3\x03\u01A4\x03\u01A4\x03\u01A5\x03\u01A5" +
        "\x05\u01A5\u0BD4\n\u01A5\x03\u01A5\x05\u01A5\u0BD7\n\u01A5\x03\u01A5\x03" +
        "\u01A5\x03\u01A5\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A7\x07\u01A7\u0BE0" +
        "\n\u01A7\f\u01A7\x0E\u01A7\u0BE3\v\u01A7\x03\u01A8\x03\u01A8\x03\u01A8" +
        "\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01AA\x03\u01AA\x03\u01AA" +
        "\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AC\x03\u01AC\x03\u01AD\x03\u01AD" +
        "\x03\u01AD\x03\u01AE\x07\u01AE\u0BF8\n\u01AE\f\u01AE\x0E\u01AE\u0BFB\v" +
        "\u01AE\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF\x03" +
        "\u01AF\x03\u01B0\x03\u01B0\x07\u01B0\u0C06\n\u01B0\f\u01B0\x0E\u01B0\u0C09" +
        "\v\u01B0\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u0C10" +
        "\n\u01B1\x03\u01B2\x03\u01B2\x03\u01B3\x03\u01B3\x03\u01B4\x03\u01B4\x03" +
        "\u01B4\x03\u01B5\x07\u01B5\u0C1A\n\u01B5\f\u01B5\x0E\u01B5\u0C1D\v\u01B5" +
        "\x03\u01B6\x03\u01B6\x03\u01B6\x03\u01B7\x03\u01B7\x05\u01B7\u0C24\n\u01B7" +
        "\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B9\x03\u01B9" +
        "\x03\u01B9\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BB\x03\u01BB\x03\u01BB" +
        "\x03\u01BC\x03\u01BC\x05\u01BC\u0C36\n\u01BC\x03\u01BD\x03\u01BD\x03\u01BE" +
        "\x03\u01BE\x03\u01BE\x02\x02\x02\u01BF\x02\x02\x04\x02\x06\x02\b\x02\n" +
        "\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C" +
        "\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026" +
        "\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02" +
        "R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02" +
        "n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02" +
        "\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02" +
        "\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02" +
        "\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02" +
        "\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02" +
        "\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02" +
        "\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02" +
        "\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102" +
        "\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110" +
        "\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E" +
        "\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C" +
        "\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A" +
        "\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148" +
        "\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156" +
        "\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164" +
        "\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172" +
        "\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180" +
        "\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E" +
        "\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C" +
        "\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA" +
        "\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8" +
        "\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6" +
        "\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4" +
        "\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2" +
        "\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0" +
        "\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE" +
        "\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C" +
        "\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A" +
        "\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228" +
        "\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236" +
        "\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244" +
        "\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252" +
        "\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260" +
        "\x02\u0262\x02\u0264\x02\u0266\x02\u0268\x02\u026A\x02\u026C\x02\u026E" +
        "\x02\u0270\x02\u0272\x02\u0274\x02\u0276\x02\u0278\x02\u027A\x02\u027C" +
        "\x02\u027E\x02\u0280\x02\u0282\x02\u0284\x02\u0286\x02\u0288\x02\u028A" +
        "\x02\u028C\x02\u028E\x02\u0290\x02\u0292\x02\u0294\x02\u0296\x02\u0298" +
        "\x02\u029A\x02\u029C\x02\u029E\x02\u02A0\x02\u02A2\x02\u02A4\x02\u02A6" +
        "\x02\u02A8\x02\u02AA\x02\u02AC\x02\u02AE\x02\u02B0\x02\u02B2\x02\u02B4" +
        "\x02\u02B6\x02\u02B8\x02\u02BA\x02\u02BC\x02\u02BE\x02\u02C0\x02\u02C2" +
        "\x02\u02C4\x02\u02C6\x02\u02C8\x02\u02CA\x02\u02CC\x02\u02CE\x02\u02D0" +
        "\x02\u02D2\x02\u02D4\x02\u02D6\x02\u02D8\x02\u02DA\x02\u02DC\x02\u02DE" +
        "\x02\u02E0\x02\u02E2\x02\u02E4\x02\u02E6\x02\u02E8\x02\u02EA\x02\u02EC" +
        "\x02\u02EE\x02\u02F0\x02\u02F2\x02\u02F4\x02\u02F6\x02\u02F8\x02\u02FA" +
        "\x02\u02FC\x02\u02FE\x02\u0300\x02\u0302\x02\u0304\x02\u0306\x02\u0308" +
        "\x02\u030A\x02\u030C\x02\u030E\x02\u0310\x02\u0312\x02\u0314\x02\u0316" +
        "\x02\u0318\x02\u031A\x02\u031C\x02\u031E\x02\u0320\x02\u0322\x02\u0324" +
        "\x02\u0326\x02\u0328\x02\u032A\x02\u032C\x02\u032E\x02\u0330\x02\u0332" +
        "\x02\u0334\x02\u0336\x02\u0338\x02\u033A\x02\u033C\x02\u033E\x02\u0340" +
        "\x02\u0342\x02\u0344\x02\u0346\x02\u0348\x02\u034A\x02\u034C\x02\u034E" +
        "\x02\u0350\x02\u0352\x02\u0354\x02\u0356\x02\u0358\x02\u035A\x02\u035C" +
        "\x02\u035E\x02\u0360\x02\u0362\x02\u0364\x02\u0366\x02\u0368\x02\u036A" +
        "\x02\u036C\x02\u036E\x02\u0370\x02\u0372\x02\u0374\x02\u0376\x02\u0378" +
        "\x02\u037A\x02\x02\x1E\x04\x02yy{{\x04\x02\xAB\xAB\xBD\xBD\x03\x02@B\x04" +
        "\x02\x04\r\xE8\xE8\t\x02\x04\x05\x07\x07\t\t\v\x1C\xD9\xD9\xDB\xDB\xE6" +
        "\xE6\x03\x02\x1D\x1E\x03\x02\x1F\"\x04\x02\xA3\xA3\xBE\xBE\b\x02\x7F\x7F" +
        "\xAC\xAD\xB6\xBB\xC0\xC0\xC3\xC3\xC7\xC8\x06\x02\x8E\x8E\xA9\xA9\xAC\xAC" +
        "\xC4\xC4\x06\x02\x8F\x8F\xAA\xAA\xAD\xAD\xC5\xC5\x05\x02ttzz\xA4\xA4\x04" +
        "\x02\xA1\xA1\xC1\xC1\x04\x02;;??\x05\x0299FF\xA7\xA7\x04\x02=>\x82\x83" +
        "\x05\x02~~\x8C\x8C\x9C\x9D\x04\x02DD\x94\x94\x04\x02<<\x81\x81\x07\x02" +
        "66||\x80\x80\x85\x85\xC9\xCA\x04\x02\x9E\x9E\xB3\xB3\x04\x02\x9F\xA0\xB4" +
        "\xB5\x04\x02}}\x89\x89\x03\x02qs\x03\x0235\x03\x02\xCC\xCD\x04\x02,-/" +
        "0\x04\x02..11\x02\u0C2C\x02\u037C\x03\x02\x02\x02\x04\u037E\x03\x02\x02" +
        "\x02\x06\u0380\x03\x02\x02\x02\b\u0386\x03\x02\x02\x02\n\u0388\x03\x02" +
        "\x02\x02\f\u038A\x03\x02\x02\x02\x0E\u038C\x03\x02\x02\x02\x10\u038E\x03" +
        "\x02\x02\x02\x12\u0390\x03\x02\x02\x02\x14\u0396\x03\x02\x02\x02\x16\u039C" +
        "\x03\x02\x02\x02\x18\u039E\x03\x02\x02\x02\x1A\u03A2\x03\x02\x02\x02\x1C" +
        "\u03B9\x03\x02\x02\x02\x1E\u03BB\x03\x02\x02\x02 \u03C5\x03\x02\x02\x02" +
        "\"\u03C8\x03\x02\x02\x02$\u03CD\x03\x02\x02\x02&\u03D4\x03\x02\x02\x02" +
        "(\u03DD\x03\x02\x02\x02*\u03EA\x03\x02\x02\x02,\u03EC\x03\x02\x02\x02" +
        ".\u03EF\x03\x02\x02\x020\u03F8\x03\x02\x02\x022\u03FA\x03\x02\x02\x02" +
        "4\u0400\x03\x02\x02\x026\u040A\x03\x02\x02\x028\u0418\x03\x02\x02\x02" +
        ":\u041A\x03\x02\x02\x02<\u041C\x03\x02\x02\x02>\u0422\x03\x02\x02\x02" +
        "@\u0424\x03\x02\x02\x02B\u0428\x03\x02\x02\x02D\u043B\x03\x02\x02\x02" +
        "F\u043D\x03\x02\x02\x02H\u0443\x03\x02\x02\x02J\u0445\x03\x02\x02\x02" +
        "L\u044C\x03\x02\x02\x02N\u044E\x03\x02\x02\x02P\u0453\x03\x02\x02\x02" +
        "R\u045C\x03\x02\x02\x02T\u0462\x03\x02\x02\x02V\u0464\x03\x02\x02\x02" +
        "X\u0468\x03\x02\x02\x02Z\u046A\x03\x02\x02\x02\\\u0470\x03\x02\x02\x02" +
        "^\u0473\x03\x02\x02\x02`\u0476\x03\x02\x02\x02b\u0479\x03\x02\x02\x02" +
        "d\u0489\x03\x02\x02\x02f\u048B\x03\x02\x02\x02h\u048E\x03\x02\x02\x02" +
        "j\u0491\x03\x02\x02\x02l\u0496\x03\x02\x02\x02n\u049A\x03\x02\x02\x02" +
        "p\u049C\x03\x02\x02\x02r\u04A2\x03\x02\x02\x02t\u04A5\x03\x02\x02\x02" +
        "v\u04A8\x03\x02\x02\x02x\u04AB\x03\x02\x02\x02z\u04B2\x03\x02\x02\x02" +
        "|\u04B5\x03\x02\x02\x02~\u04B8\x03\x02\x02\x02\x80\u04C0\x03\x02\x02\x02" +
        "\x82\u04C4\x03\x02\x02\x02\x84\u04C6\x03\x02\x02\x02\x86\u04CE\x03\x02" +
        "\x02\x02\x88\u04D1\x03\x02\x02\x02\x8A\u04D4\x03\x02\x02\x02\x8C\u04D8" +
        "\x03\x02\x02\x02\x8E\u04DA\x03\x02\x02\x02\x90\u04E0\x03\x02\x02\x02\x92" +
        "\u04E3\x03\x02\x02\x02\x94\u04E6\x03\x02\x02\x02\x96\u04E9\x03\x02\x02" +
        "\x02\x98\u04F0\x03\x02\x02\x02\x9A\u04F3\x03\x02\x02\x02\x9C\u04F6\x03" +
        "\x02\x02\x02\x9E\u04FD\x03\x02\x02\x02\xA0\u0500\x03\x02\x02\x02\xA2\u0509" +
        "\x03\x02\x02\x02\xA4\u0516\x03\x02\x02\x02\xA6\u0520\x03\x02\x02\x02\xA8" +
        "\u052A\x03\x02\x02\x02\xAA\u0537\x03\x02\x02\x02\xAC\u0539\x03\x02\x02" +
        "\x02\xAE\u053C\x03\x02\x02\x02\xB0\u053F\x03\x02\x02\x02\xB2\u0542\x03" +
        "\x02\x02\x02\xB4\u0545\x03\x02\x02\x02\xB6\u0547\x03\x02\x02\x02\xB8\u054A" +
        "\x03\x02\x02\x02\xBA\u0551\x03\x02\x02\x02\xBC\u0554\x03\x02\x02\x02\xBE" +
        "\u055C\x03\x02\x02\x02\xC0\u0561\x03\x02\x02\x02\xC2\u0563\x03\x02\x02" +
        "\x02\xC4\u0567\x03\x02\x02\x02\xC6\u056B\x03\x02\x02\x02\xC8\u056F\x03" +
        "\x02\x02\x02\xCA\u0571\x03\x02\x02\x02\xCC\u0573\x03\x02\x02\x02\xCE\u057D" +
        "\x03\x02\x02\x02\xD0\u0583\x03\x02\x02\x02\xD2\u0585\x03\x02\x02\x02\xD4" +
        "\u0587\x03\x02\x02\x02\xD6\u0589\x03\x02\x02\x02\xD8\u058B\x03\x02\x02" +
        "\x02\xDA\u058D\x03\x02\x02\x02\xDC\u0591\x03\x02\x02\x02\xDE\u0593\x03" +
        "\x02\x02\x02\xE0\u0599\x03\x02\x02\x02\xE2\u059C\x03\x02\x02\x02\xE4\u059F" +
        "\x03\x02\x02\x02\xE6\u05A7\x03\x02\x02\x02\xE8\u05A9\x03\x02\x02\x02\xEA" +
        "\u05AF\x03\x02\x02\x02\xEC\u05B2\x03\x02\x02\x02\xEE\u05B5\x03\x02\x02" +
        "\x02\xF0\u05BD\x03\x02\x02\x02\xF2\u05BF\x03\x02\x02\x02\xF4\u05D7\x03" +
        "\x02\x02\x02\xF6\u05E0\x03\x02\x02\x02\xF8\u05E9\x03\x02\x02\x02\xFA\u05EB" +
        "\x03\x02\x02\x02\xFC\u05F5\x03\x02\x02\x02\xFE\u05FE\x03\x02\x02\x02\u0100" +
        "\u0606\x03\x02\x02\x02\u0102\u0609\x03\x02\x02\x02\u0104\u060C\x03\x02" +
        "\x02\x02\u0106\u060F\x03\x02\x02\x02\u0108\u0612\x03\x02\x02\x02\u010A" +
        "\u0616\x03\x02\x02\x02\u010C\u061E\x03\x02\x02\x02\u010E\u0621\x03\x02" +
        "\x02\x02\u0110\u0624\x03\x02\x02\x02\u0112\u0627\x03\x02\x02\x02\u0114" +
        "\u0649\x03\x02\x02\x02\u0116\u064B\x03\x02\x02\x02\u0118\u064D\x03\x02" +
        "\x02\x02\u011A\u0656\x03\x02\x02\x02\u011C\u0659\x03\x02\x02\x02\u011E" +
        "\u065E\x03\x02\x02\x02\u0120\u0660\x03\x02\x02\x02\u0122\u0662\x03\x02" +
        "\x02\x02\u0124\u0665\x03\x02\x02\x02\u0126\u0672\x03\x02\x02\x02\u0128" +
        "\u0674\x03\x02\x02\x02\u012A\u067A\x03\x02\x02\x02\u012C\u067F\x03\x02" +
        "\x02\x02\u012E\u0684\x03\x02\x02\x02\u0130\u0687\x03\x02\x02\x02\u0132" +
        "\u0689\x03\x02\x02\x02\u0134\u068F\x03\x02\x02\x02\u0136\u0698\x03\x02" +
        "\x02\x02\u0138\u069A\x03\x02\x02\x02\u013A\u06A6\x03\x02\x02\x02\u013C" +
        "\u06A8\x03\x02\x02\x02\u013E\u06B0\x03\x02\x02\x02\u0140\u06B2\x03\x02" +
        "\x02\x02\u0142\u06B7\x03\x02\x02\x02\u0144\u06BA\x03\x02\x02\x02\u0146" +
        "\u06BD\x03\x02\x02\x02\u0148\u06CB\x03\x02\x02\x02\u014A\u06D2\x03\x02" +
        "\x02\x02\u014C\u06DB\x03\x02\x02\x02\u014E\u06DD\x03\x02\x02\x02\u0150" +
        "\u06E3\x03\x02\x02\x02\u0152\u06E6\x03\x02\x02\x02\u0154\u06EA\x03\x02" +
        "\x02\x02\u0156\u06EC\x03\x02\x02\x02\u0158\u06F2\x03\x02\x02\x02\u015A" +
        "\u06F5\x03\x02\x02\x02\u015C\u0703\x03\x02\x02\x02\u015E\u0705\x03\x02" +
        "\x02\x02\u0160\u070B\x03\x02\x02\x02\u0162\u070E\x03\x02\x02\x02\u0164" +
        "\u0711\x03\x02\x02\x02\u0166\u0715\x03\x02\x02\x02\u0168\u0719\x03\x02" +
        "\x02\x02\u016A\u071B\x03\x02\x02\x02\u016C\u071F\x03\x02\x02\x02\u016E" +
        "\u0723\x03\x02\x02\x02\u0170\u0730\x03\x02\x02\x02\u0172\u0732\x03\x02" +
        "\x02\x02\u0174\u0738\x03\x02\x02\x02\u0176\u073B\x03\x02\x02\x02\u0178" +
        "\u073E\x03\x02\x02\x02\u017A\u0750\x03\x02\x02\x02\u017C\u0762\x03\x02" +
        "\x02\x02\u017E\u0764\x03\x02\x02\x02\u0180\u076F\x03\x02\x02\x02\u0182" +
        "\u0771\x03\x02\x02\x02\u0184\u0773\x03\x02\x02\x02\u0186\u0775\x03\x02" +
        "\x02\x02\u0188\u0777\x03\x02\x02\x02\u018A\u0779\x03\x02\x02\x02\u018C" +
        "\u077B\x03\x02\x02\x02\u018E\u077D\x03\x02\x02\x02\u0190\u077F\x03\x02" +
        "\x02\x02\u0192\u0786\x03\x02\x02\x02\u0194\u078D\x03\x02\x02\x02\u0196" +
        "\u0797\x03\x02\x02\x02\u0198\u079E\x03\x02\x02\x02\u019A\u07A5\x03\x02" +
        "\x02\x02\u019C\u07AF\x03\x02\x02\x02\u019E\u07B9\x03\x02\x02\x02\u01A0" +
        "\u07BD\x03\x02\x02\x02\u01A2\u07C4\x03\x02\x02\x02\u01A4\u07C7\x03\x02" +
        "\x02\x02\u01A6\u07CA\x03\x02\x02\x02\u01A8\u07CD\x03\x02\x02\x02\u01AA" +
        "\u07D0\x03\x02\x02\x02\u01AC\u07D3\x03\x02\x02\x02\u01AE\u07D6\x03\x02" +
        "\x02\x02\u01B0\u07D9\x03\x02\x02\x02\u01B2\u07DF\x03\x02\x02\x02\u01B4" +
        "\u07E5\x03\x02\x02\x02\u01B6\u07EB\x03\x02\x02\x02\u01B8\u07F1\x03\x02" +
        "\x02\x02\u01BA\u07F7\x03\x02\x02\x02\u01BC\u07FD\x03\x02\x02\x02\u01BE" +
        "\u0803\x03\x02\x02\x02\u01C0\u0809\x03\x02\x02\x02\u01C2\u080C\x03\x02" +
        "\x02\x02\u01C4\u080F\x03\x02\x02\x02\u01C6\u0812\x03\x02\x02\x02\u01C8" +
        "\u0815\x03\x02\x02\x02\u01CA\u0818\x03\x02\x02\x02\u01CC\u081B\x03\x02" +
        "\x02\x02\u01CE\u081E\x03\x02\x02\x02\u01D0\u0821\x03\x02\x02\x02\u01D2" +
        "\u0825\x03\x02\x02\x02\u01D4\u082A\x03\x02\x02\x02\u01D6\u082F\x03\x02" +
        "\x02\x02\u01D8\u0834\x03\x02\x02\x02\u01DA\u0839\x03\x02\x02\x02\u01DC" +
        "\u083E\x03\x02\x02\x02\u01DE\u0843\x03\x02\x02\x02\u01E0\u0848\x03\x02" +
        "\x02\x02\u01E2\u084C\x03\x02\x02\x02\u01E4\u0850\x03\x02\x02\x02\u01E6" +
        "\u0858\x03\x02\x02\x02\u01E8\u0860\x03\x02\x02\x02\u01EA\u086A\x03\x02" +
        "\x02\x02\u01EC\u0870\x03\x02\x02\x02\u01EE\u0876\x03\x02\x02\x02\u01F0" +
        "\u087C\x03\x02\x02\x02\u01F2\u0884\x03\x02\x02\x02\u01F4\u0887\x03\x02" +
        "\x02\x02\u01F6\u088D\x03\x02\x02\x02\u01F8\u0893\x03\x02\x02\x02\u01FA" +
        "\u0896\x03\x02\x02\x02\u01FC\u0899\x03\x02\x02\x02\u01FE\u089C\x03\x02" +
        "\x02\x02\u0200\u089E\x03\x02\x02\x02\u0202\u08A0\x03\x02\x02\x02\u0204" +
        "\u08A2\x03\x02\x02\x02\u0206\u08A4\x03\x02\x02\x02\u0208\u08A6\x03\x02" +
        "\x02\x02\u020A\u08AB\x03\x02\x02\x02\u020C\u08B4\x03\x02\x02\x02\u020E" +
        "\u08BE\x03\x02\x02\x02\u0210\u08C6\x03\x02\x02\x02\u0212\u08CB\x03\x02" +
        "\x02\x02\u0214\u08CF\x03\x02\x02\x02\u0216\u08D4\x03\x02\x02\x02\u0218" +
        "\u08D8\x03\x02\x02\x02\u021A\u08DE\x03\x02\x02\x02\u021C\u08E0\x03\x02" +
        "\x02\x02\u021E\u08E2\x03\x02\x02\x02\u0220\u08E7\x03\x02\x02\x02\u0222" +
        "\u08E9\x03\x02\x02\x02\u0224\u08EF\x03\x02\x02\x02\u0226\u08F1\x03\x02" +
        "\x02\x02\u0228\u08F4\x03\x02\x02\x02\u022A\u08F7\x03\x02\x02\x02\u022C" +
        "\u08FA\x03\x02\x02\x02\u022E\u08FD\x03\x02\x02\x02\u0230\u0900\x03\x02" +
        "\x02\x02\u0232\u0902\x03\x02\x02\x02\u0234\u0909\x03\x02\x02\x02\u0236" +
        "\u090B\x03\x02\x02\x02\u0238\u090F\x03\x02\x02\x02\u023A\u0915\x03\x02" +
        "\x02\x02\u023C\u091C\x03\x02\x02\x02\u023E\u0920\x03\x02\x02\x02\u0240" +
        "\u0922\x03\x02\x02\x02\u0242\u0928\x03\x02\x02\x02\u0244\u092C\x03\x02" +
        "\x02\x02\u0246\u0932\x03\x02\x02\x02\u0248\u0934\x03\x02\x02\x02\u024A" +
        "\u0938\x03\x02\x02\x02\u024C\u093A\x03\x02\x02\x02\u024E\u093C\x03\x02" +
        "\x02\x02\u0250\u0943\x03\x02\x02\x02\u0252\u0949\x03\x02\x02\x02\u0254" +
        "\u094C\x03\x02\x02\x02\u0256\u0953\x03\x02\x02\x02\u0258\u095A\x03\x02" +
        "\x02\x02\u025A\u095D\x03\x02\x02\x02\u025C\u0960\x03\x02\x02\x02\u025E" +
        "\u096A\x03\x02\x02\x02\u0260\u096F\x03\x02\x02\x02\u0262\u097D\x03\x02" +
        "\x02\x02\u0264\u0982\x03\x02\x02\x02\u0266\u0984\x03\x02\x02\x02\u0268" +
        "\u0987\x03\x02\x02\x02\u026A\u098E\x03\x02\x02\x02\u026C\u0995\x03\x02" +
        "\x02\x02\u026E\u0997\x03\x02\x02\x02\u0270\u099B\x03\x02\x02\x02\u0272" +
        "\u099D\x03\x02\x02\x02\u0274\u09A3\x03\x02\x02\x02\u0276\u09A6\x03\x02" +
        "\x02\x02\u0278\u09A9\x03\x02\x02\x02\u027A\u09AF\x03\x02\x02\x02\u027C" +
        "\u09B2\x03\x02\x02\x02\u027E\u09BB\x03\x02\x02\x02\u0280\u09BD\x03\x02" +
        "\x02\x02\u0282\u09C3\x03\x02\x02\x02\u0284\u09C6\x03\x02\x02\x02\u0286" +
        "\u09C8\x03\x02\x02\x02\u0288\u09CA\x03\x02\x02\x02\u028A\u09D0\x03\x02" +
        "\x02\x02\u028C\u09D3\x03\x02\x02\x02\u028E\u09DC\x03\x02\x02\x02\u0290" +
        "\u09E9\x03\x02\x02\x02\u0292\u09EB\x03\x02\x02\x02\u0294\u09F7\x03\x02" +
        "\x02\x02\u0296\u09F9\x03\x02\x02\x02\u0298\u09FB\x03\x02\x02\x02\u029A" +
        "\u09FE\x03\x02\x02\x02\u029C\u0A00\x03\x02\x02\x02\u029E\u0A04\x03\x02" +
        "\x02\x02\u02A0\u0A0A\x03\x02\x02\x02\u02A2\u0A12\x03\x02\x02\x02\u02A4" +
        "\u0A14\x03\x02\x02\x02\u02A6\u0A17\x03\x02\x02\x02\u02A8\u0A1D\x03\x02" +
        "\x02\x02\u02AA\u0A23\x03\x02\x02\x02\u02AC\u0A2B\x03\x02\x02\x02\u02AE" +
        "\u0A37\x03\x02\x02\x02\u02B0\u0A41\x03\x02\x02\x02\u02B2\u0A4D\x03\x02" +
        "\x02\x02\u02B4\u0A4F\x03\x02\x02\x02\u02B6\u0A53\x03\x02\x02\x02\u02B8" +
        "\u0A59\x03\x02\x02\x02\u02BA\u0A5C\x03\x02\x02\x02\u02BC\u0A63\x03\x02" +
        "\x02\x02\u02BE\u0A65\x03\x02\x02\x02\u02C0\u0A68\x03\x02\x02\x02\u02C2" +
        "\u0A6E\x03\x02\x02\x02\u02C4\u0A74\x03\x02\x02\x02\u02C6\u0A7C\x03\x02" +
        "\x02\x02\u02C8\u0A8A\x03\x02\x02\x02\u02CA\u0A8C\x03\x02\x02\x02\u02CC" +
        "\u0A92\x03\x02\x02\x02\u02CE\u0A94\x03\x02\x02\x02\u02D0\u0A9E\x03\x02" +
        "\x02\x02\u02D2\u0AAA\x03\x02\x02\x02\u02D4\u0AAC\x03\x02\x02\x02\u02D6" +
        "\u0AAE\x03\x02\x02\x02\u02D8\u0AB1\x03\x02\x02\x02\u02DA\u0AB3\x03\x02" +
        "\x02\x02\u02DC\u0AB9\x03\x02\x02\x02\u02DE\u0AC3\x03\x02\x02\x02\u02E0" +
        "\u0AC9\x03\x02\x02\x02\u02E2\u0ACB\x03\x02\x02\x02\u02E4\u0AD9\x03\x02" +
        "\x02\x02\u02E6\u0ADB\x03\x02\x02\x02\u02E8\u0ADE\x03\x02\x02\x02\u02EA" +
        "\u0AE1\x03\x02\x02\x02\u02EC\u0AE4\x03\x02\x02\x02\u02EE\u0AE8\x03\x02" +
        "\x02\x02\u02F0\u0AEE\x03\x02\x02\x02\u02F2\u0B07\x03\x02\x02\x02\u02F4" +
        "\u0B09\x03\x02\x02\x02\u02F6\u0B15\x03\x02\x02\x02\u02F8\u0B17\x03\x02" +
        "\x02\x02\u02FA\u0B1D\x03\x02\x02\x02\u02FC\u0B20\x03\x02\x02\x02\u02FE" +
        "\u0B23\x03\x02\x02\x02\u0300\u0B27\x03\x02\x02\x02\u0302\u0B2B\x03\x02" +
        "\x02\x02\u0304\u0B2F\x03\x02\x02\x02\u0306\u0B34\x03\x02\x02\x02\u0308" +
        "\u0B36\x03\x02\x02\x02\u030A\u0B3C\x03\x02\x02\x02\u030C\u0B3E\x03\x02";
    SysVerilogHDLParser._serializedATNSegment2 = "\x02\x02\u030E\u0B42\x03\x02\x02\x02\u0310\u0B44\x03\x02\x02\x02\u0312" +
        "\u0B4A\x03\x02\x02\x02\u0314\u0B4E\x03\x02\x02\x02\u0316\u0B50\x03\x02" +
        "\x02\x02\u0318\u0B52\x03\x02\x02\x02\u031A\u0B56\x03\x02\x02\x02\u031C" +
        "\u0B58\x03\x02\x02\x02\u031E\u0B5C\x03\x02\x02\x02\u0320\u0B60\x03\x02" +
        "\x02\x02\u0322\u0B64\x03\x02\x02\x02\u0324\u0B68\x03\x02\x02\x02\u0326" +
        "\u0B6D\x03\x02\x02\x02\u0328\u0B74\x03\x02\x02\x02\u032A\u0B7C\x03\x02" +
        "\x02\x02\u032C\u0B7F\x03\x02\x02\x02\u032E\u0B83\x03\x02\x02\x02\u0330" +
        "\u0B88\x03\x02\x02\x02\u0332\u0B8C\x03\x02\x02\x02\u0334\u0B8E\x03\x02" +
        "\x02\x02\u0336\u0B9A\x03\x02\x02\x02\u0338\u0B9C\x03\x02\x02\x02\u033A" +
        "\u0BA7\x03\x02\x02\x02\u033C\u0BB2\x03\x02\x02\x02\u033E\u0BB4\x03\x02" +
        "\x02\x02\u0340\u0BBA\x03\x02\x02\x02\u0342\u0BBD\x03\x02\x02\x02\u0344" +
        "\u0BCD\x03\x02\x02\x02\u0346\u0BCF\x03\x02\x02\x02\u0348\u0BD1\x03\x02" +
        "\x02\x02\u034A\u0BDB\x03\x02\x02\x02\u034C\u0BE1\x03\x02\x02\x02\u034E" +
        "\u0BE4\x03\x02\x02\x02\u0350\u0BE7\x03\x02\x02\x02\u0352\u0BEB\x03\x02" +
        "\x02\x02\u0354\u0BEE\x03\x02\x02\x02\u0356\u0BF1\x03\x02\x02\x02\u0358" +
        "\u0BF3\x03\x02\x02\x02\u035A\u0BF9\x03\x02\x02\x02\u035C\u0BFC\x03\x02" +
        "\x02\x02\u035E\u0C07\x03\x02\x02\x02\u0360\u0C0F\x03\x02\x02\x02\u0362" +
        "\u0C11\x03\x02\x02\x02\u0364\u0C13\x03\x02\x02\x02\u0366\u0C15\x03\x02" +
        "\x02\x02\u0368\u0C1B\x03\x02\x02\x02\u036A\u0C1E\x03\x02\x02\x02\u036C" +
        "\u0C21\x03\x02\x02\x02\u036E\u0C25\x03\x02\x02\x02\u0370\u0C2A\x03\x02" +
        "\x02\x02\u0372\u0C2D\x03\x02\x02\x02\u0374\u0C30\x03\x02\x02\x02\u0376" +
        "\u0C35\x03\x02\x02\x02\u0378\u0C37\x03\x02\x02\x02\u037A\u0C39\x03\x02" +
        "\x02\x02\u037C\u037D\t\x02\x02\x02\u037D\x03\x03\x02\x02\x02\u037E\u037F" +
        "\t\x03\x02\x02\u037F\x05\x03\x02\x02\x02\u0380\u0381\t\x04\x02\x02\u0381" +
        "\x07\x03\x02\x02\x02\u0382\u0387\x07\xE5\x02\x02\u0383\u0387\x07\x03\x02" +
        "\x02\u0384\u0385\x07\xE5\x02\x02\u0385\u0387\x07\xE5\x02\x02\u0386\u0382" +
        "\x03\x02\x02\x02\u0386\u0383\x03\x02\x02\x02\u0386\u0384\x03\x02\x02\x02" +
        "\u0387\t\x03\x02\x02\x02\u0388\u0389\t\x05\x02\x02\u0389\v\x03\x02\x02" +
        "\x02\u038A\u038B\t\x06\x02\x02\u038B\r\x03\x02\x02\x02\u038C\u038D\t\x07" +
        "\x02\x02\u038D\x0F\x03\x02\x02\x02\u038E\u038F\t\b\x02\x02\u038F\x11\x03" +
        "\x02\x02\x02\u0390\u0391\x05\x14\v\x02\u0391\u0392\x07\x02\x02\x03\u0392" +
        "\x13\x03\x02\x02\x02\u0393\u0395\x05\x1C\x0F\x02\u0394\u0393\x03\x02\x02" +
        "\x02\u0395\u0398\x03\x02\x02\x02\u0396\u0394\x03\x02\x02\x02\u0396\u0397" +
        "\x03\x02\x02\x02\u0397\x15\x03\x02\x02\x02\u0398\u0396\x03\x02\x02\x02" +
        "\u0399\u039D\x05\x1A\x0E\x02\u039A\u039D\x05\x18\r\x02\u039B\u039D\x05" +
        "8\x1D\x02\u039C\u0399\x03\x02\x02\x02\u039C\u039A\x03\x02\x02\x02\u039C" +
        "\u039B\x03\x02\x02\x02\u039D\x17\x03\x02\x02\x02\u039E\u039F\x05\u035C" +
        "\u01AF\x02\u039F\x19\x03\x02\x02\x02\u03A0\u03A3\x05\u036E\u01B8\x02\u03A1" +
        "\u03A3\x05\u0374\u01BB\x02\u03A2\u03A0\x03\x02\x02\x02\u03A2\u03A1\x03" +
        "\x02\x02\x02\u03A3\x1B\x03\x02\x02\x02\u03A4\u03BA\x05\x16\f\x02\u03A5" +
        "\u03A7\x05.\x18\x02\u03A6\u03A8\x05\b\x05\x02\u03A7\u03A6\x03\x02\x02" +
        "\x02\u03A7\u03A8\x03\x02\x02\x02\u03A8\u03BA\x03\x02\x02\x02\u03A9\u03AB" +
        "\x05\x1E\x10\x02\u03AA\u03AC\x05\b\x05\x02\u03AB\u03AA\x03\x02\x02\x02" +
        "\u03AB\u03AC\x03\x02\x02\x02\u03AC\u03BA\x03\x02\x02\x02\u03AD\u03AF\x05" +
        "\u0112\x8A\x02\u03AE\u03B0\x05\b\x05\x02\u03AF\u03AE\x03\x02\x02\x02\u03AF" +
        "\u03B0\x03\x02\x02\x02\u03B0\u03BA\x03\x02\x02\x02\u03B1\u03B3\x05\u0110" +
        "\x89\x02\u03B2\u03B4\x05\b\x05\x02\u03B3\u03B2\x03\x02\x02\x02\u03B3\u03B4" +
        "\x03\x02\x02\x02\u03B4\u03BA\x03\x02\x02\x02\u03B5\u03B7\x05\u032C\u0197" +
        "\x02\u03B6\u03B8\x05\b\x05\x02\u03B7\u03B6\x03\x02\x02\x02\u03B7\u03B8" +
        "\x03\x02\x02\x02\u03B8\u03BA\x03\x02\x02\x02\u03B9\u03A4\x03\x02\x02\x02" +
        "\u03B9\u03A5\x03\x02\x02\x02\u03B9\u03A9\x03\x02\x02\x02\u03B9\u03AD\x03" +
        "\x02\x02\x02\u03B9\u03B1\x03\x02\x02\x02\u03B9\u03B5\x03\x02\x02\x02\u03BA" +
        "\x1D\x03\x02\x02\x02\u03BB\u03BC\x05\u035A\u01AE\x02\u03BC\u03BD\x05\x02" +
        "\x02\x02\u03BD\u03BE\x05 \x11\x02\u03BE\u03BF\x05\"\x12\x02\u03BF\u03C0" +
        "\x05\b\x05\x02\u03C0\u03C1\x05(\x15\x02\u03C1\u03C3\x07U\x02\x02\u03C2" +
        "\u03C4\x05,\x17\x02\u03C3\u03C2\x03\x02\x02\x02\u03C3\u03C4\x03\x02\x02" +
        "\x02\u03C4\x1F\x03\x02\x02\x02\u03C5\u03C6\x05\u0364\u01B3\x02\u03C6!" +
        "\x03\x02\x02\x02\u03C7\u03C9\x05$\x13\x02\u03C8\u03C7\x03\x02\x02\x02" +
        "\u03C8\u03C9\x03\x02\x02\x02\u03C9\u03CB\x03\x02\x02\x02\u03CA\u03CC\x05" +
        "&\x14\x02\u03CB\u03CA\x03\x02\x02\x02\u03CB\u03CC\x03\x02\x02\x02\u03CC" +
        "#\x03\x02\x02\x02\u03CD\u03CE\x07\xDA\x02\x02\u03CE\u03D0\x07\xDF\x02" +
        "\x02\u03CF\u03D1\x05X-\x02\u03D0\u03CF\x03\x02\x02\x02\u03D0\u03D1\x03" +
        "\x02\x02\x02\u03D1\u03D2\x03\x02\x02\x02\u03D2\u03D3\x07\xD0\x02\x02\u03D3" +
        "%\x03\x02\x02\x02\u03D4\u03D6\x07\xDF\x02\x02\u03D5\u03D7\x05\x82B\x02" +
        "\u03D6\u03D5\x03\x02\x02\x02\u03D6\u03D7\x03\x02\x02\x02\u03D7\u03D8\x03" +
        "\x02\x02\x02\u03D8\u03D9\x07\xD0\x02\x02\u03D9\'\x03\x02\x02\x02\u03DA" +
        "\u03DC\x05*\x16\x02\u03DB\u03DA\x03\x02\x02\x02\u03DC\u03DF\x03\x02\x02" +
        "\x02\u03DD\u03DB\x03\x02\x02\x02\u03DD\u03DE\x03\x02\x02\x02\u03DE)\x03" +
        "\x02\x02\x02\u03DF\u03DD\x03\x02\x02\x02\u03E0\u03EB\x058\x1D\x02\u03E1" +
        "\u03EB\x05<\x1F\x02\u03E2\u03EB\x05@!\x02\u03E3\u03EB\x05B\"\x02\u03E4" +
        "\u03EB\x05F$\x02\u03E5\u03EB\x05J&\x02\u03E6\u03EB\x05\u028A\u0146\x02" +
        "\u03E7\u03EB\x05N(\x02\u03E8\u03EB\x05R*\x02\u03E9\u03EB\x05T+\x02\u03EA" +
        "\u03E0\x03\x02\x02\x02\u03EA\u03E1\x03\x02\x02\x02\u03EA\u03E2\x03\x02" +
        "\x02\x02\u03EA\u03E3\x03\x02\x02\x02\u03EA\u03E4\x03\x02\x02\x02\u03EA" +
        "\u03E5\x03\x02\x02\x02\u03EA\u03E6\x03\x02\x02\x02\u03EA\u03E7\x03\x02" +
        "\x02\x02\u03EA\u03E8\x03\x02\x02\x02\u03EA\u03E9\x03\x02\x02\x02\u03EB" +
        "+\x03\x02\x02\x02\u03EC\u03ED\x07\xD1\x02\x02\u03ED\u03EE\x05 \x11\x02" +
        "\u03EE-\x03\x02\x02\x02\u03EF\u03F0\x05\u035A\u01AE\x02\u03F0\u03F1\x07" +
        "\x8A\x02\x02\u03F1\u03F2\x050\x19\x02\u03F2\u03F3\x05\b\x05\x02\u03F3" +
        "\u03F4\x054\x1B\x02\u03F4\u03F6\x07V\x02\x02\u03F5\u03F7\x052\x1A\x02" +
        "\u03F6\u03F5\x03\x02\x02\x02\u03F6\u03F7\x03\x02\x02\x02\u03F7/\x03\x02" +
        "\x02\x02\u03F8\u03F9\x05\u0364\u01B3\x02\u03F91\x03\x02\x02\x02\u03FA" +
        "\u03FB\x07\xD1\x02\x02\u03FB\u03FC\x050\x19\x02\u03FC3\x03\x02\x02\x02" +
        "\u03FD\u03FF\x056\x1C\x02\u03FE\u03FD\x03\x02\x02\x02\u03FF\u0402\x03" +
        "\x02\x02\x02\u0400\u03FE\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0401" +
        "5\x03\x02\x02\x02\u0402\u0400\x03\x02\x02\x02\u0403\u040B\x058\x1D\x02" +
        "\u0404\u040B\x05<\x1F\x02\u0405\u040B\x05B\"\x02\u0406\u040B\x05F$\x02" +
        "\u0407\u040B\x05N(\x02\u0408\u040B\x05R*\x02\u0409\u040B\x05T+\x02\u040A" +
        "\u0403\x03\x02\x02\x02\u040A\u0404\x03\x02\x02\x02\u040A\u0405\x03\x02" +
        "\x02\x02\u040A\u0406\x03\x02\x02\x02\u040A\u0407\x03\x02\x02\x02\u040A" +
        "\u0408\x03\x02\x02\x02\u040A\u0409\x03\x02\x02\x02\u040B7\x03\x02\x02" +
        "\x02\u040C\u040D\x07i\x02\x02\u040D\u040E\x050\x19\x02\u040E\u040F\x07" +
        "\xD6\x02\x02\u040F\u0410\x07\xE6\x02\x02\u0410\u0411\x05\b\x05\x02\u0411" +
        "\u0419\x03\x02\x02\x02\u0412\u0413\x07i\x02\x02\u0413\u0414\x050\x19\x02" +
        "\u0414\u0415\x07\xD6\x02\x02\u0415\u0416\x05:\x1E\x02\u0416\u0417\x05" +
        "\b\x05\x02\u0417\u0419\x03\x02\x02\x02\u0418\u040C\x03\x02\x02\x02\u0418" +
        "\u0412\x03\x02\x02\x02\u04199\x03\x02\x02\x02\u041A\u041B\x05\u0364\u01B3" +
        "\x02\u041B;\x03\x02\x02\x02\u041C\u041D\x05> \x02\u041D\u041E\x05\b\x05" +
        "\x02\u041E=\x03\x02\x02\x02\u041F\u0423\x05f4\x02\u0420\u0423\x05h5\x02" +
        "\u0421\u0423\x05j6\x02\u0422\u041F\x03\x02\x02\x02\u0422\u0420\x03\x02" +
        "\x02\x02\u0422\u0421\x03\x02\x02\x02\u0423?\x03\x02\x02\x02\u0424\u0425" +
        "\x05\u035A\u01AE\x02\u0425\u0426\x05\x9EP\x02\u0426\u0427\x05\b\x05\x02" +
        "\u0427A\x03\x02\x02\x02\u0428\u0429\x05\u035A\u01AE\x02\u0429\u042A\x05" +
        "D#\x02\u042A\u042B\x05\b\x05\x02\u042BC\x03\x02\x02\x02\u042C\u043C\x05" +
        "\xF2z\x02\u042D\u043C\x05\xF4{\x02\u042E\u043C\x05\xF6|\x02\u042F\u043C" +
        "\x05\xFA~\x02\u0430\u043C\x05\xFC\x7F\x02\u0431\u043C\x05\xFE\x80\x02" +
        "\u0432\u043C\x05\u0100\x81\x02\u0433\u043C\x05\u0102\x82\x02\u0434\u043C" +
        "\x05\u0104\x83\x02\u0435\u043C\x05\u0106\x84\x02\u0436\u043C\x05\u0108" +
        "\x85\x02\u0437\u043C\x05\u010A\x86\x02\u0438\u043C\x05\u010C\x87\x02\u0439" +
        "\u043C\x05\u010E\x88\x02\u043A\u043C\x05\u0110\x89\x02\u043B\u042C\x03" +
        "\x02\x02\x02\u043B\u042D\x03\x02\x02\x02\u043B\u042E\x03\x02\x02\x02\u043B" +
        "\u042F\x03\x02\x02\x02\u043B\u0430\x03\x02\x02\x02\u043B\u0431\x03\x02" +
        "\x02\x02\u043B\u0432\x03\x02\x02\x02\u043B\u0433\x03\x02\x02\x02\u043B" +
        "\u0434\x03\x02\x02\x02\u043B\u0435\x03\x02\x02\x02\u043B\u0436\x03\x02" +
        "\x02\x02\u043B\u0437\x03\x02\x02\x02\u043B\u0438\x03\x02\x02\x02\u043B" +
        "\u0439\x03\x02\x02\x02\u043B\u043A\x03\x02\x02\x02\u043CE\x03\x02\x02" +
        "\x02\u043D\u043F\x05H%\x02\u043E\u0440\x05\b\x05\x02\u043F\u043E\x03\x02" +
        "\x02\x02\u043F\u0440\x03\x02\x02\x02\u0440G\x03\x02\x02\x02\u0441\u0444" +
        "\x05\u0124\x93\x02\u0442\u0444\x05\u0112\x8A\x02\u0443\u0441\x03\x02\x02" +
        "\x02\u0443\u0442\x03\x02\x02\x02\u0444I\x03\x02\x02\x02\u0445\u0446\x05" +
        "\u035A\u01AE\x02\u0446\u0447\x05L\'\x02\u0447K\x03\x02\x02\x02\u0448\u044D" +
        "\x05\u0348\u01A5\x02\u0449\u044D\x05\u0352\u01AA\x02\u044A\u044D\x05\u0354" +
        "\u01AB\x02\u044B\u044D\x05\u0358\u01AD\x02\u044C\u0448\x03\x02\x02\x02" +
        "\u044C\u0449\x03\x02\x02\x02\u044C\u044A\x03\x02\x02\x02\u044C\u044B\x03" +
        "\x02\x02\x02\u044DM\x03\x02\x02\x02\u044E\u044F\x05\u035A\u01AE\x02\u044F" +
        "\u0450\x05P)\x02\u0450O\x03\x02\x02\x02\u0451\u0454\x05\u0148\xA5\x02" +
        "\u0452\u0454\x05\u0180\xC1\x02\u0453\u0451\x03\x02\x02\x02\u0453\u0452" +
        "\x03\x02\x02\x02\u0454Q\x03\x02\x02\x02\u0455\u045D\x05\u036E\u01B8\x02" +
        "\u0456\u0457\x05\u0370\u01B9\x02\u0457\u0458\x05\b\x05\x02\u0458\u045D" +
        "\x03\x02\x02\x02\u0459\u045A\x05\u0372\u01BA\x02\u045A\u045B\x05\b\x05" +
        "\x02\u045B\u045D\x03\x02\x02\x02\u045C\u0455\x03\x02\x02\x02\u045C\u0456" +
        "\x03\x02\x02\x02\u045C\u0459\x03\x02\x02\x02\u045DS\x03\x02\x02\x02\u045E" +
        "\u0463\x05\u0374\u01BB\x02\u045F\u0460\x05\u032C\u0197\x02\u0460\u0461" +
        "\x05\b\x05\x02\u0461\u0463\x03\x02\x02\x02\u0462\u045E\x03\x02\x02\x02" +
        "\u0462\u045F\x03\x02\x02\x02\u0463U\x03\x02\x02\x02\u0464\u0465\x05\b" +
        "\x05\x02\u0465W\x03\x02\x02\x02\u0466\u0469\x05Z.\x02\u0467\u0469\x05" +
        "`1\x02\u0468\u0466\x03\x02\x02\x02\u0468\u0467\x03\x02\x02\x02\u0469Y" +
        "\x03\x02\x02\x02\u046A\u046B\x05f4\x02\u046B\u046C\x05\\/\x02\u046C[\x03" +
        "\x02\x02\x02\u046D\u046F\x05^0\x02\u046E\u046D\x03\x02\x02\x02\u046F\u0472" +
        "\x03\x02\x02\x02\u0470\u046E\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02" +
        "\u0471]\x03\x02\x02\x02\u0472\u0470\x03\x02\x02\x02\u0473\u0474\x07\xD2" +
        "\x02\x02\u0474\u0475\x05f4\x02\u0475_\x03\x02\x02\x02\u0476\u0477\x05" +
        "\xDEp\x02\u0477a\x03\x02\x02\x02\u0478\u047A\t\t\x02\x02\u0479\u0478\x03" +
        "\x02\x02\x02\u0479\u047A\x03\x02\x02\x02\u047A\u047C\x03\x02\x02\x02\u047B" +
        "\u047D\x05\xB8]\x02\u047C\u047B\x03\x02\x02\x02\u047C\u047D\x03\x02\x02" +
        "\x02\u047D\u047E\x03\x02\x02\x02\u047E\u047F\x05\xE8u\x02\u047Fc\x03\x02" +
        "\x02\x02\u0480\u048A\x05b2\x02\u0481\u048A\x05\xF6|\x02\u0482\u048A\x05" +
        "\xFC\x7F\x02\u0483\u048A\x05\xFE\x80\x02\u0484\u048A\x05\u0100\x81\x02" +
        "\u0485\u048A\x05\u0102\x82\x02\u0486\u048A\x05\u0104\x83\x02\u0487\u048A" +
        "\x05\u010A\x86\x02\u0488\u048A\x05\u010C\x87\x02\u0489\u0480\x03\x02\x02" +
        "\x02\u0489\u0481\x03\x02\x02\x02\u0489\u0482\x03\x02\x02\x02\u0489\u0483" +
        "\x03\x02\x02\x02\u0489\u0484\x03\x02\x02\x02\u0489\u0485\x03\x02\x02\x02" +
        "\u0489\u0486\x03\x02\x02\x02\u0489\u0487\x03\x02\x02\x02\u0489\u0488\x03" +
        "\x02\x02\x02\u048Ae\x03\x02\x02\x02\u048B\u048C\x07\x87\x02\x02\u048C" +
        "\u048D\x05d3\x02\u048Dg\x03\x02\x02\x02\u048E\u048F\x07w\x02\x02\u048F" +
        "\u0490\x05d3\x02\u0490i\x03\x02\x02\x02\u0491\u0492\x07J\x02\x02\u0492" +
        "\u0493\x05d3\x02\u0493k\x03\x02\x02\x02\u0494\u0497\x05\x84C\x02\u0495" +
        "\u0497\x05n8\x02\u0496\u0494\x03\x02\x02\x02\u0496\u0495\x03\x02\x02\x02" +
        "\u0497m\x03\x02\x02\x02\u0498\u049B\x05p9\x02\u0499\u049B\x05v<\x02\u049A" +
        "\u0498\x03\x02\x02\x02\u049A\u0499\x03\x02\x02\x02\u049Bo\x03\x02\x02" +
        "\x02\u049C\u049D\x05~@\x02\u049D\u049E\x05r:\x02\u049Eq\x03\x02\x02\x02" +
        "\u049F\u04A1\x05t;\x02\u04A0\u049F\x03\x02\x02\x02\u04A1\u04A4\x03\x02" +
        "\x02\x02\u04A2\u04A0\x03\x02\x02\x02\u04A2\u04A3\x03\x02\x02\x02\u04A3" +
        "s\x03\x02\x02\x02\u04A4\u04A2\x03\x02\x02\x02\u04A5\u04A6\x07\xD2\x02" +
        "\x02\u04A6\u04A7\x05~@\x02\u04A7u\x03\x02\x02\x02\u04A8\u04A9\x05x=\x02" +
        "\u04A9w\x03\x02\x02\x02\u04AA\u04AC\x05|?\x02\u04AB\u04AA\x03\x02\x02" +
        "\x02\u04AC\u04AD\x03\x02\x02\x02\u04AD\u04AB\x03\x02\x02\x02\u04AD\u04AE" +
        "\x03\x02\x02\x02\u04AEy\x03\x02\x02\x02\u04AF\u04B1\x05|?\x02\u04B0\u04AF" +
        "\x03\x02\x02\x02\u04B1\u04B4\x03\x02\x02\x02\u04B2\u04B0\x03\x02\x02\x02" +
        "\u04B2\u04B3\x03\x02\x02\x02\u04B3{\x03\x02\x02\x02\u04B4\u04B2\x03\x02" +
        "\x02\x02\u04B5\u04B6\x05~@\x02\u04B6\u04B7\x05\b\x05\x02\u04B7}\x03\x02" +
        "\x02\x02\u04B8\u04B9\x05\u035A\u01AE\x02\u04B9\u04BA\x05\x80A\x02\u04BA" +
        "\x7F\x03\x02\x02\x02\u04BB\u04C1\x05\xACW\x02\u04BC\u04C1\x05\xAEX\x02" +
        "\u04BD\u04C1\x05\xB0Y\x02\u04BE\u04C1\x05\xB2Z\x02\u04BF\u04C1\x05\xAA" +
        "V\x02\u04C0\u04BB\x03\x02\x02\x02\u04C0\u04BC\x03\x02\x02\x02\u04C0\u04BD" +
        "\x03\x02\x02\x02\u04C0\u04BE\x03\x02\x02\x02\u04C0\u04BF\x03\x02\x02\x02" +
        "\u04C1\x81\x03\x02\x02\x02\u04C2\u04C5\x05\x84C\x02\u04C3\u04C5\x05\x8C" +
        "G\x02\u04C4\u04C2\x03\x02\x02\x02\u04C4\u04C3\x03\x02\x02\x02\u04C5\x83" +
        "\x03\x02\x02\x02\u04C6\u04C7\x05\x8AF\x02\u04C7\u04C9\x05\x86D\x02\u04C8" +
        "\u04CA\x07\xD2\x02\x02\u04C9\u04C8\x03\x02\x02\x02\u04C9\u04CA\x03\x02" +
        "\x02\x02\u04CA\x85\x03\x02\x02\x02\u04CB\u04CD\x05\x88E\x02\u04CC\u04CB" +
        "\x03\x02\x02\x02\u04CD\u04D0\x03\x02\x02\x02\u04CE\u04CC\x03\x02\x02\x02" +
        "\u04CE\u04CF\x03\x02\x02\x02\u04CF\x87\x03\x02\x02\x02\u04D0\u04CE\x03" +
        "\x02\x02\x02\u04D1\u04D2\x07\xD2\x02\x02\u04D2\u04D3\x05\x8AF\x02\u04D3" +
        "\x89\x03\x02\x02\x02\u04D4\u04D5\x05\u0364\u01B3\x02\u04D5\x8B\x03\x02" +
        "\x02\x02\u04D6\u04D9\x05\x8EH\x02\u04D7\u04D9\x05\x94K\x02\u04D8\u04D6" +
        "\x03\x02\x02\x02\u04D8\u04D7\x03\x02\x02\x02\u04D9\x8D\x03\x02\x02\x02" +
        "\u04DA\u04DB\x05\x9CO\x02\u04DB\u04DC\x05\x90I\x02\u04DC\x8F\x03\x02\x02" +
        "\x02\u04DD\u04DF\x05\x92J\x02\u04DE\u04DD\x03\x02\x02\x02\u04DF\u04E2" +
        "\x03\x02\x02\x02\u04E0\u04DE\x03\x02\x02\x02\u04E0\u04E1\x03\x02\x02\x02" +
        "\u04E1\x91\x03\x02\x02\x02\u04E2\u04E0\x03\x02\x02\x02\u04E3\u04E4\x07" +
        "\xD2\x02\x02\u04E4\u04E5\x05\x9CO\x02\u04E5\x93\x03\x02\x02\x02\u04E6" +
        "\u04E7\x05\x96L\x02\u04E7\x95\x03\x02\x02\x02\u04E8\u04EA\x05\x9AN\x02" +
        "\u04E9\u04E8\x03\x02\x02\x02\u04EA\u04EB\x03\x02\x02\x02\u04EB\u04E9\x03" +
        "\x02\x02\x02\u04EB\u04EC\x03\x02\x02\x02\u04EC\x97\x03\x02\x02\x02\u04ED" +
        "\u04EF\x05\x9AN\x02\u04EE\u04ED\x03\x02\x02\x02\u04EF\u04F2\x03\x02\x02" +
        "\x02\u04F0\u04EE\x03\x02\x02\x02\u04F0\u04F1\x03\x02\x02\x02\u04F1\x99" +
        "\x03\x02\x02\x02\u04F2\u04F0\x03\x02\x02\x02\u04F3\u04F4\x05\x9CO\x02" +
        "\u04F4\u04F5\x05\b\x05\x02\u04F5\x9B\x03\x02\x02\x02\u04F6\u04F7\x05\u035A" +
        "\u01AE\x02\u04F7\u04F8\x05\x9EP\x02\u04F8\x9D\x03\x02\x02\x02\u04F9\u04FE" +
        "\x05\xACW\x02\u04FA\u04FE\x05\xAEX\x02\u04FB\u04FE\x05\xB0Y\x02\u04FC" +
        "\u04FE\x05\xB2Z\x02\u04FD\u04F9\x03\x02\x02\x02\u04FD\u04FA\x03\x02\x02" +
        "\x02\u04FD\u04FB\x03\x02\x02\x02\u04FD\u04FC\x03\x02\x02\x02\u04FE\x9F" +
        "\x03\x02\x02\x02\u04FF\u0501\t\t\x02\x02\u0500\u04FF\x03\x02\x02\x02\u0500" +
        "\u0501\x03\x02\x02\x02\u0501\u0503\x03\x02\x02\x02\u0502\u0504\x05\xB8" +
        "]\x02\u0503\u0502\x03\x02\x02\x02\u0503\u0504\x03\x02\x02\x02\u0504\u0505" +
        "\x03\x02\x02\x02\u0505\u0506\x05\xDEp\x02\u0506\xA1\x03\x02\x02\x02\u0507" +
        "\u050A\x05\xA0Q\x02\u0508\u050A\x05\xF2z\x02\u0509\u0507\x03\x02\x02\x02" +
        "\u0509\u0508\x03\x02\x02\x02\u050A\xA3\x03\x02\x02\x02\u050B\u0517\x05" +
        "\xA0Q\x02\u050C\u0517\x05\xF2z\x02\u050D\u0517\x05\xF4{\x02\u050E\u0517" +
        "\x05\xF6|\x02\u050F\u0517\x05\xFA~\x02\u0510\u0517\x05\xFE\x80\x02\u0511" +
        "\u0517\x05\xFC\x7F\x02\u0512\u0517\x05\u0100\x81\x02\u0513\u0517\x05\u0102" +
        "\x82\x02\u0514\u0517\x05\u010A\x86\x02\u0515\u0517\x05\u010C\x87\x02\u0516" +
        "\u050B\x03\x02\x02\x02\u0516\u050C\x03\x02\x02\x02\u0516\u050D\x03\x02" +
        "\x02\x02\u0516\u050E\x03\x02\x02\x02\u0516\u050F\x03\x02\x02\x02\u0516" +
        "\u0510\x03\x02\x02\x02\u0516\u0511\x03\x02\x02\x02\u0516\u0512\x03\x02" +
        "\x02\x02\u0516\u0513\x03\x02\x02\x02\u0516\u0514\x03\x02\x02\x02\u0516" +
        "\u0515\x03\x02\x02\x02\u0517\xA5\x03\x02\x02\x02\u0518\u0521\x05\xA0Q" +
        "\x02\u0519\u0521\x05\xF2z\x02\u051A\u0521\x05\xF4{\x02\u051B\u0521\x05" +
        "\xF6|\x02\u051C\u0521\x05\xFC\x7F\x02\u051D\u0521\x05\u0102\x82\x02\u051E" +
        "\u0521\x05\u010A\x86\x02\u051F\u0521\x05\u010C\x87\x02\u0520\u0518\x03" +
        "\x02\x02\x02\u0520\u0519\x03\x02\x02\x02\u0520\u051A\x03\x02\x02\x02\u0520" +
        "\u051B\x03\x02\x02\x02\u0520\u051C\x03\x02\x02\x02\u0520\u051D\x03\x02" +
        "\x02\x02\u0520\u051E\x03\x02\x02\x02\u0520\u051F\x03\x02\x02\x02\u0521" +
        "\xA7\x03\x02\x02\x02\u0522\u052B\x05\xA0Q\x02\u0523\u052B\x05\xF2z\x02" +
        "\u0524\u052B\x05\xF4{\x02\u0525\u052B\x05\xF6|\x02\u0526\u052B\x05\xFC" +
        "\x7F\x02\u0527\u052B\x05\u0102\x82\x02\u0528\u052B\x05\u010A\x86\x02\u0529" +
        "\u052B\x05\u010C\x87\x02\u052A\u0522\x03\x02\x02\x02\u052A\u0523\x03\x02" +
        "\x02\x02\u052A\u0524\x03\x02\x02\x02\u052A\u0525\x03\x02\x02\x02\u052A" +
        "\u0526\x03\x02\x02\x02\u052A\u0527\x03\x02\x02\x02\u052A\u0528\x03\x02" +
        "\x02\x02\u052A\u0529\x03\x02\x02\x02\u052B\xA9\x03\x02\x02\x02\u052C\u0538" +
        "\x05\xA0Q\x02\u052D\u0538\x05\u0100\x81\x02\u052E\u0538\x05\xF2z\x02\u052F" +
        "\u0538\x05\xF4{\x02\u0530\u0538\x05\xF6|\x02\u0531\u0538\x05\xFA~\x02" +
        "\u0532\u0538\x05\xFE\x80\x02\u0533\u0538\x05\xFC\x7F\x02\u0534\u0538\x05" +
        "\u0102\x82\x02\u0535\u0538\x05\u010A\x86\x02\u0536\u0538\x05\u010C\x87" +
        "\x02\u0537\u052C\x03\x02\x02\x02\u0537\u052D\x03\x02\x02\x02\u0537\u052E" +
        "\x03\x02\x02\x02\u0537\u052F\x03\x02\x02\x02\u0537\u0530\x03\x02\x02\x02" +
        "\u0537\u0531\x03\x02\x02\x02\u0537\u0532\x03\x02\x02\x02\u0537\u0533\x03" +
        "\x02\x02\x02\u0537\u0534\x03\x02\x02\x02\u0537\u0535\x03\x02\x02\x02\u0537" +
        "\u0536\x03\x02\x02\x02\u0538\xAB\x03\x02\x02\x02\u0539\u053A\x07l\x02" +
        "\x02\u053A\u053B\x05\xA2R\x02\u053B\xAD\x03\x02\x02\x02\u053C\u053D\x07" +
        "m\x02\x02\u053D\u053E\x05\xA4S\x02\u053E\xAF\x03\x02\x02\x02\u053F\u0540" +
        "\x07\x86\x02\x02\u0540\u0541\x05\xA6T\x02\u0541\xB1\x03\x02\x02\x02\u0542" +
        "\u0543\x07\x97\x02\x02\u0543\u0544\x05\xA8U\x02\u0544\xB3\x03\x02\x02" +
        "\x02\u0545\u0546\x05\xB6\\\x02\u0546\xB5\x03\x02\x02\x02\u0547\u0548\x05" +
        "\u0364\u01B3\x02\u0548\xB7\x03\x02\x02\x02\u0549\u054B\x05\xBC_\x02\u054A" +
        "\u0549\x03\x02\x02\x02\u054B\u054C\x03\x02\x02\x02\u054C\u054A\x03\x02" +
        "\x02\x02\u054C\u054D\x03\x02\x02\x02\u054D\xB9\x03\x02\x02\x02\u054E\u0550" +
        "\x05\xBC_\x02\u054F\u054E\x03\x02\x02\x02\u0550\u0553\x03\x02\x02\x02" +
        "\u0551\u054F\x03\x02\x02\x02\u0551\u0552\x03\x02\x02\x02\u0552\xBB\x03" +
        "\x02\x02\x02\u0553\u0551\x03\x02\x02\x02\u0554\u0555\x07\xDC\x02\x02\u0555" +
        "\u0556\x05\xBE`\x02\u0556\u0557\x07\xE3\x02\x02\u0557\xBD\x03\x02\x02" +
        "\x02\u0558\u055D\x05\xC0a\x02\u0559\u055D\x05\xC2b\x02\u055A\u055D\x05" +
        "\xC4c\x02\u055B\u055D\x05\xC6d\x02\u055C\u0558\x03\x02\x02\x02\u055C\u0559" +
        "\x03\x02\x02\x02\u055C\u055A\x03\x02\x02\x02\u055C\u055B\x03\x02\x02\x02" +
        "\u055D\xBF\x03\x02\x02\x02\u055E\u0562\x05\u02DE\u0170\x02\u055F\u0562" +
        "\x07\xD5\x02\x02\u0560\u0562\x07\xE6\x02\x02\u0561\u055E\x03\x02\x02\x02" +
        "\u0561\u055F\x03\x02\x02\x02\u0561\u0560\x03\x02\x02\x02\u0562\xC1\x03" +
        "\x02\x02\x02\u0563\u0564\x05\xC8e\x02\u0564\u0565\x07\xD1\x02\x02\u0565" +
        "\u0566\x05\u02DE\u0170\x02\u0566\xC3\x03\x02\x02\x02\u0567\u0568\x05\xC8" +
        "e\x02\u0568\u0569\x07\xE0\x02\x02\u0569\u056A\x05\u02DE\u0170\x02\u056A" +
        "\xC5\x03\x02\x02\x02\u056B\u056C\x05\xC8e\x02\u056C\u056D\x07\xDE\x02" +
        "\x02\u056D\u056E\x05\u02DE\u0170\x02\u056E\xC7\x03\x02\x02\x02\u056F\u0570" +
        "\x05\u02DE\u0170\x02\u0570\xC9\x03\x02\x02\x02\u0571\u0572\t\n\x02\x02" +
        "\u0572\xCB\x03\x02\x02\x02\u0573\u0574\x07\xDF\x02\x02\u0574\u0575\x05" +
        "\xCEh\x02\u0575\u0576\x07\xD2\x02\x02\u0576\u0577\x05\xD0i\x02\u0577\u0578" +
        "\x07\xD0\x02\x02\u0578\xCD\x03\x02\x02\x02\u0579\u057E\x05\xD2j\x02\u057A" +
        "\u057E\x05\xD4k\x02\u057B\u057E\x05\xD6l\x02\u057C\u057E\x05\xD8m\x02" +
        "\u057D\u0579\x03\x02\x02\x02\u057D\u057A\x03\x02\x02\x02\u057D\u057B\x03" +
        "\x02\x02\x02\u057D\u057C\x03\x02\x02\x02\u057E\xCF\x03\x02\x02\x02\u057F" +
        "\u0584\x05\xD2j\x02\u0580\u0584\x05\xD4k\x02\u0581\u0584\x05\xD6l\x02" +
        "\u0582\u0584\x05\xD8m\x02\u0583\u057F\x03\x02\x02\x02\u0583\u0580\x03" +
        "\x02\x02\x02\u0583\u0581\x03\x02\x02\x02\u0583\u0582\x03\x02\x02\x02\u0584" +
        "\xD1\x03\x02\x02\x02\u0585\u0586\t\v\x02\x02\u0586\xD3\x03\x02\x02\x02" +
        "\u0587\u0588\t\f\x02\x02\u0588\xD5\x03\x02\x02\x02\u0589\u058A\x07d\x02" +
        "\x02\u058A\xD7\x03\x02\x02\x02\u058B\u058C\x07e\x02\x02\u058C\xD9\x03" +
        "\x02\x02\x02\u058D\u058E\x07\xDF\x02\x02\u058E\u058F\x05\xDCo\x02\u058F" +
        "\u0590\x07\xD0\x02\x02\u0590\xDB\x03\x02\x02\x02\u0591\u0592\t\r\x02\x02" +
        "\u0592\xDD\x03\x02\x02\x02\u0593\u0594\x05\xE4s\x02\u0594\u0595\x05\xE0" +
        "q\x02\u0595\xDF\x03\x02\x02\x02\u0596\u0598\x05\xE2r\x02\u0597\u0596\x03" +
        "\x02\x02\x02\u0598\u059B\x03\x02\x02\x02\u0599\u0597\x03\x02\x02\x02\u0599" +
        "\u059A\x03\x02\x02\x02\u059A\xE1\x03\x02\x02\x02\u059B\u0599\x03\x02\x02" +
        "\x02\u059C\u059D\x07\xD2\x02\x02\u059D\u059E\x05\xE4s\x02\u059E\xE3\x03" +
        "\x02\x02\x02\u059F\u05A1\x05\xE6t\x02\u05A0\u05A2\x05\xB8]\x02\u05A1\u05A0" +
        "\x03\x02\x02\x02\u05A1\u05A2\x03\x02\x02\x02\u05A2\u05A5\x03\x02\x02\x02" +
        "\u05A3\u05A4\x07\xD7\x02\x02\u05A4\u05A6\x05\u02DE\u0170\x02\u05A5\u05A3" +
        "\x03\x02\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6\xE5\x03\x02\x02\x02" +
        "\u05A7\u05A8\x05\u0364\u01B3\x02\u05A8\xE7\x03\x02\x02\x02\u05A9\u05AA" +
        "\x05\xEEx\x02\u05AA\u05AB\x05\xEAv\x02\u05AB\xE9\x03\x02\x02\x02\u05AC" +
        "\u05AE\x05\xECw\x02\u05AD\u05AC\x03\x02\x02\x02\u05AE\u05B1\x03\x02\x02" +
        "\x02\u05AF\u05AD\x03\x02\x02\x02\u05AF\u05B0\x03\x02\x02\x02\u05B0\xEB" +
        "\x03\x02\x02\x02\u05B1\u05AF\x03\x02\x02\x02\u05B2\u05B3\x07\xD2\x02\x02" +
        "\u05B3\u05B4\x05\xEEx\x02\u05B4\xED\x03\x02\x02\x02\u05B5\u05B7\x05\xF0" +
        "y\x02\u05B6\u05B8\x05\xB8]\x02\u05B7\u05B6\x03\x02\x02\x02\u05B7\u05B8" +
        "\x03\x02\x02\x02\u05B8\u05BB\x03\x02\x02\x02\u05B9\u05BA\x07\xD7\x02\x02" +
        "\u05BA\u05BC\x05\u02DE\u0170\x02\u05BB\u05B9\x03\x02\x02\x02\u05BB\u05BC" +
        "\x03\x02\x02\x02\u05BC\xEF\x03\x02\x02\x02\u05BD\u05BE\x05\u0366\u01B4" +
        "\x02\u05BE\xF1\x03\x02\x02\x02\u05BF\u05C1\x05\xCAf\x02\u05C0\u05C2\x05" +
        "\xB4[\x02\u05C1\u05C0\x03\x02\x02\x02\u05C1\u05C2\x03\x02\x02\x02\u05C2" +
        "\u05C4\x03\x02\x02\x02\u05C3\u05C5\x05\xCCg\x02\u05C4\u05C3\x03\x02\x02" +
        "\x02\u05C4\u05C5\x03\x02\x02\x02\u05C5\u05C7\x03\x02\x02\x02\u05C6\u05C8" +
        "\x05\xDAn\x02\u05C7\u05C6\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02" +
        "\u05C8\u05CA\x03\x02\x02\x02\u05C9\u05CB\t\x0E\x02\x02\u05CA\u05C9\x03" +
        "\x02\x02\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB\u05CD\x03\x02\x02\x02\u05CC" +
        "\u05CE\t\t\x02\x02\u05CD\u05CC\x03\x02\x02\x02\u05CD\u05CE\x03\x02\x02" +
        "\x02\u05CE\u05D0\x03\x02\x02\x02\u05CF\u05D1\x05\xB8]\x02\u05D0\u05CF" +
        "\x03\x02\x02\x02\u05D0\u05D1\x03\x02\x02\x02\u05D1\u05D3\x03\x02\x02\x02" +
        "\u05D2\u05D4\x05\u0170\xB9\x02\u05D3\u05D2\x03\x02\x02\x02\u05D3\u05D4" +
        "\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02\x02\u05D5\u05D6\x05\xDEp\x02" +
        "\u05D6\xF3\x03\x02\x02\x02\u05D7\u05D9\x07\x98\x02\x02\u05D8\u05DA\t\t" +
        "\x02\x02\u05D9\u05D8\x03\x02\x02\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA" +
        "\u05DC\x03\x02\x02\x02\u05DB\u05DD\x05\xB8]\x02\u05DC\u05DB\x03\x02\x02" +
        "\x02\u05DC\u05DD\x03\x02\x02\x02\u05DD\u05DE\x03\x02\x02\x02\u05DE\u05DF" +
        "\x05\xDEp\x02\u05DF\xF5\x03\x02\x02\x02\u05E0\u05E2\x07x\x02\x02\u05E1" +
        "\u05E3\t\t\x02\x02\u05E2\u05E1\x03\x02\x02\x02\u05E2\u05E3\x03\x02\x02" +
        "\x02\u05E3\u05E5\x03\x02\x02\x02";
    SysVerilogHDLParser._serializedATNSegment3 = "\u05E4\u05E6\x05\xB8]\x02\u05E5\u05E4\x03\x02\x02\x02\u05E5\u05E6\x03" +
        "\x02\x02\x02\u05E6\u05E7\x03\x02\x02\x02\u05E7\u05E8\x05\xDEp\x02\u05E8" +
        "\xF7\x03\x02\x02\x02\u05E9\u05EA\t\x0F\x02\x02\u05EA\xF9\x03\x02\x02\x02" +
        "\u05EB\u05ED\x05\xF8}\x02\u05EC\u05EE\t\t\x02\x02\u05ED\u05EC\x03\x02" +
        "\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05F0\x03\x02\x02\x02\u05EF" +
        "\u05F1\x05\xB8]\x02\u05F0\u05EF\x03\x02\x02\x02\u05F0\u05F1\x03\x02\x02" +
        "\x02\u05F1\u05F2\x03\x02\x02\x02\u05F2\u05F3\x05\xDEp\x02\u05F3\xFB\x03" +
        "\x02\x02\x02\u05F4\u05F6\x079\x02\x02\u05F5\u05F4\x03\x02\x02\x02\u05F5" +
        "\u05F6\x03\x02\x02\x02\u05F6\u05F7\x03\x02\x02\x02\u05F7\u05F9\x07p\x02" +
        "\x02\u05F8\u05FA\t\t\x02\x02\u05F9\u05F8\x03\x02\x02\x02\u05F9\u05FA\x03" +
        "\x02\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FB\u05FC\x05\xDEp\x02\u05FC" +
        "\xFD\x03\x02\x02\x02\u05FD\u05FF\t\x10\x02\x02\u05FE\u05FD\x03\x02\x02" +
        "\x02\u05FE\u05FF\x03\x02\x02\x02\u05FF\u0600\x03\x02\x02\x02\u0600\u0602" +
        "\x07o\x02\x02\u0601\u0603\t\t\x02\x02\u0602\u0601\x03\x02\x02\x02\u0602" +
        "\u0603\x03\x02\x02\x02\u0603\u0604\x03\x02\x02\x02\u0604\u0605\x05\xDE" +
        "p\x02\u0605\xFF\x03\x02\x02\x02\u0606\u0607\x07\x95\x02\x02\u0607\u0608" +
        "\x05\xDEp\x02\u0608\u0101\x03\x02\x02\x02\u0609\u060A\x07\xB0\x02\x02" +
        "\u060A\u060B\x05\xDEp\x02\u060B\u0103\x03\x02\x02\x02\u060C\u060D\x07" +
        "\x96\x02\x02\u060D\u060E\x05\xDEp\x02\u060E\u0105\x03\x02\x02\x02\u060F" +
        "\u0610\x07[\x02\x02\u0610\u0611\x05\xDEp\x02\u0611\u0107\x03\x02\x02\x02" +
        "\u0612\u0613\x07c\x02\x02\u0613\u0614\x05\xDEp\x02\u0614\u0109\x03\x02" +
        "\x02\x02\u0615\u0617\x079\x02\x02\u0616\u0615\x03\x02\x02\x02\u0616\u0617" +
        "\x03\x02\x02\x02\u0617\u0618\x03\x02\x02\x02\u0618\u061A\x05\xB4[\x02" +
        "\u0619\u061B\x05\xBC_\x02\u061A\u0619\x03\x02\x02\x02\u061A\u061B\x03" +
        "\x02\x02\x02\u061B\u061C\x03\x02\x02\x02\u061C\u061D\x05\xDEp\x02\u061D" +
        "\u010B\x03\x02\x02\x02\u061E\u061F\x07\xA8\x02\x02\u061F\u0620\x05\xDE" +
        "p\x02\u0620\u010D\x03\x02\x02\x02\u0621\u0622\x05\u0138\x9D\x02\u0622" +
        "\u0623\x05\xDEp\x02\u0623\u010F\x03\x02\x02\x02\u0624\u0625\x05\u0146" +
        "\xA4\x02\u0625\u0626\x05\xDEp\x02\u0626\u0111\x03\x02\x02\x02\u0627\u0629" +
        "\x07a\x02\x02\u0628\u062A\x079\x02\x02\u0629\u0628\x03\x02\x02\x02\u0629" +
        "\u062A\x03\x02\x02\x02\u062A\u062C\x03\x02\x02\x02\u062B\u062D\t\t\x02" +
        "\x02\u062C\u062B\x03\x02\x02\x02\u062C\u062D\x03\x02\x02\x02\u062D\u062F" +
        "\x03\x02\x02\x02\u062E\u0630\x05\u0114\x8B\x02\u062F\u062E\x03\x02\x02" +
        "\x02\u062F\u0630\x03\x02\x02\x02\u0630\u0632\x03\x02\x02\x02\u0631\u0633" +
        "\x05\xBC_\x02\u0632\u0631\x03\x02\x02\x02\u0632\u0633\x03\x02\x02\x02" +
        "\u0633\u0634\x03\x02\x02\x02\u0634\u0636\x05\u0116\x8C\x02\u0635\u0637" +
        "\x05\u0118\x8D\x02\u0636\u0635\x03\x02\x02\x02\u0636\u0637\x03\x02\x02" +
        "\x02\u0637\u0638\x03\x02\x02\x02\u0638\u0639\x05\b\x05\x02\u0639\u063A" +
        "\x05\u011A\x8E\x02\u063A\u063B\x05\u0120\x91\x02\u063B\u063D\x07S\x02" +
        "\x02\u063C\u063E\x05\u0122\x92\x02\u063D\u063C\x03\x02\x02\x02\u063D\u063E" +
        "\x03\x02\x02\x02\u063E\u0113\x03\x02\x02\x02\u063F\u064A\x07x\x02\x02" +
        "\u0640\u064A\x07p\x02\x02\u0641\u064A\x07o\x02\x02\u0642\u064A\x07\x95" +
        "\x02\x02\u0643\u064A\x07\x96\x02\x02\u0644\u064A\x07\xB0\x02\x02\u0645" +
        "\u064A\x07\x98\x02\x02\u0646\u064A\x07\xA8\x02\x02\u0647\u064A\x05\xF8" +
        "}\x02\u0648\u064A\x05\xB4[\x02\u0649\u063F\x03\x02\x02\x02\u0649\u0640" +
        "\x03\x02\x02\x02\u0649\u0641\x03\x02\x02\x02\u0649\u0642\x03\x02\x02\x02" +
        "\u0649\u0643\x03\x02\x02\x02\u0649\u0644\x03\x02\x02\x02\u0649\u0645\x03" +
        "\x02\x02\x02\u0649\u0646\x03\x02\x02\x02\u0649\u0647\x03\x02\x02\x02\u0649" +
        "\u0648\x03\x02\x02\x02\u064A\u0115\x03\x02\x02\x02\u064B\u064C\x05\u0364" +
        "\u01B3\x02\u064C\u0117\x03\x02\x02\x02\u064D\u064F\x07\xDF\x02\x02\u064E" +
        "\u0650\x05l7\x02\u064F\u064E\x03\x02\x02\x02\u064F\u0650\x03\x02\x02\x02" +
        "\u0650\u0651\x03\x02\x02\x02\u0651\u0652\x07\xD0\x02\x02\u0652\u0119\x03" +
        "\x02\x02\x02\u0653\u0655\x05\u011C\x8F\x02\u0654\u0653\x03\x02\x02\x02" +
        "\u0655\u0658\x03\x02\x02\x02\u0656\u0654\x03\x02\x02\x02\u0656\u0657\x03" +
        "\x02\x02\x02\u0657\u011B\x03\x02\x02\x02\u0658\u0656\x03\x02\x02\x02\u0659" +
        "\u065A\x05\u011E\x90\x02\u065A\u065B\x05\b\x05\x02\u065B\u011D\x03\x02" +
        "\x02\x02\u065C\u065F\x05\u0344\u01A3\x02\u065D\u065F\x05\x9EP\x02\u065E" +
        "\u065C\x03\x02\x02\x02\u065E\u065D\x03\x02\x02\x02\u065F\u011F\x03\x02" +
        "\x02\x02\u0660\u0661\x05\u020A\u0106\x02\u0661\u0121\x03\x02\x02\x02\u0662" +
        "\u0663\x07\xD1\x02\x02\u0663\u0664\x05\u0116\x8C\x02\u0664\u0123\x03\x02" +
        "\x02\x02\u0665\u0667\x07\xAE\x02\x02\u0666\u0668\x079\x02\x02\u0667\u0666" +
        "\x03\x02\x02\x02\u0667\u0668\x03\x02\x02\x02\u0668\u0669\x03\x02\x02\x02" +
        "\u0669\u066B\x05\u0126\x94\x02\u066A\u066C\x05\u0128\x95\x02\u066B\u066A" +
        "\x03\x02\x02\x02\u066B\u066C\x03\x02\x02\x02\u066C\u066D\x03\x02\x02\x02" +
        "\u066D\u066E\x05\b\x05\x02\u066E\u066F\x05\u012E\x98\x02\u066F\u0670\x05" +
        "\u0130\x99\x02\u0670\u0671\x07Y\x02\x02\u0671\u0125\x03\x02\x02\x02\u0672" +
        "\u0673\x05\u0364\u01B3\x02\u0673\u0127\x03\x02\x02\x02\u0674\u0676\x07" +
        "\xDF\x02\x02\u0675\u0677\x05l7\x02\u0676\u0675\x03\x02\x02\x02\u0676\u0677" +
        "\x03\x02\x02\x02\u0677\u0678\x03\x02\x02\x02\u0678\u0679\x07\xD0\x02\x02" +
        "\u0679\u0129\x03\x02\x02\x02\u067A\u067B\x05\u012C\x97\x02\u067B\u067C" +
        "\x05\b\x05\x02\u067C\u012B\x03\x02\x02\x02\u067D\u0680\x05\u0344\u01A3" +
        "\x02\u067E\u0680\x05\x9EP\x02\u067F\u067D\x03\x02\x02\x02\u067F\u067E" +
        "\x03\x02\x02\x02\u0680\u012D\x03\x02\x02\x02\u0681\u0683\x05\u012A\x96" +
        "\x02\u0682\u0681\x03\x02\x02\x02\u0683\u0686\x03\x02\x02\x02\u0684\u0682" +
        "\x03\x02\x02\x02\u0684\u0685\x03\x02\x02\x02\u0685\u012F\x03\x02\x02\x02" +
        "\u0686\u0684\x03\x02\x02\x02\u0687\u0688\x05\u020A\u0106\x02\u0688\u0131" +
        "\x03\x02\x02\x02\u0689\u068A\x05\u0136\x9C\x02\u068A\u068B\x05\b\x05\x02" +
        "\u068B\u0133\x03\x02\x02\x02\u068C\u068E\x05\u0132\x9A\x02\u068D\u068C" +
        "\x03\x02\x02\x02\u068E\u0691\x03\x02\x02\x02\u068F\u068D\x03\x02\x02\x02" +
        "\u068F\u0690\x03\x02\x02\x02\u0690\u0135\x03\x02\x02\x02\u0691\u068F\x03" +
        "\x02\x02\x02\u0692\u0699\x05\xF6|\x02\u0693\u0699\x05\xFA~\x02\u0694\u0699" +
        "\x05\xFE\x80\x02\u0695\u0699\x05\xFC\x7F\x02\u0696\u0699\x05\u010A\x86" +
        "\x02\u0697\u0699\x05\u0102\x82\x02\u0698\u0692\x03\x02\x02\x02\u0698\u0693" +
        "\x03\x02\x02\x02\u0698\u0694\x03\x02\x02\x02\u0698\u0695\x03\x02\x02\x02" +
        "\u0698\u0696\x03\x02\x02\x02\u0698\u0697\x03\x02\x02\x02\u0699\u0137\x03" +
        "\x02\x02\x02\u069A\u069C\x05\x04\x03\x02\u069B\u069D\x07\x8B\x02\x02\u069C" +
        "\u069B\x03\x02\x02\x02\u069C\u069D\x03\x02\x02\x02\u069D\u069E\x03\x02" +
        "\x02\x02\u069E\u069F\x07\xDD\x02\x02\u069F\u06A0\x05\u0134\x9B\x02\u06A0" +
        "\u06A1\x07\xE4\x02\x02\u06A1\u0139\x03\x02\x02\x02\u06A2\u06A7\x07p\x02" +
        "\x02\u06A3\u06A7\x07x\x02\x02\u06A4\u06A7\x05\xF8}\x02\u06A5\u06A7\x07" +
        "o\x02\x02\u06A6\u06A2\x03\x02\x02\x02\u06A6\u06A3\x03\x02\x02\x02\u06A6" +
        "\u06A4\x03\x02\x02\x02\u06A6\u06A5\x03\x02\x02\x02\u06A7\u013B\x03\x02" +
        "\x02\x02\u06A8\u06A9\x05\u013E\xA0\x02\u06A9\u06AA\x05\u0142\xA2\x02\u06AA" +
        "\u013D\x03\x02\x02\x02\u06AB\u06B1\x05\u0140\xA1\x02\u06AC\u06AD\x05\u0140" +
        "\xA1\x02\u06AD\u06AE\x07\xD7\x02\x02\u06AE\u06AF\x05\u02DE\u0170\x02\u06AF" +
        "\u06B1\x03\x02\x02\x02\u06B0\u06AB\x03\x02\x02\x02\u06B0\u06AC\x03\x02" +
        "\x02\x02\u06B1\u013F\x03\x02\x02\x02\u06B2\u06B3\x05\u0364\u01B3\x02\u06B3" +
        "\u0141\x03\x02\x02\x02\u06B4\u06B6\x05\u0144\xA3\x02\u06B5\u06B4\x03\x02" +
        "\x02\x02\u06B6\u06B9\x03\x02\x02\x02\u06B7\u06B5\x03\x02\x02\x02\u06B7" +
        "\u06B8\x03\x02\x02\x02\u06B8\u0143\x03\x02\x02\x02\u06B9\u06B7\x03\x02" +
        "\x02\x02\u06BA\u06BB\x07\xD2\x02\x02\u06BB\u06BC\x05\u013E\xA0\x02\u06BC" +
        "\u0145\x03\x02\x02\x02\u06BD\u06BF\x07Z\x02\x02\u06BE\u06C0\x05\u013A" +
        "\x9E\x02\u06BF\u06BE\x03\x02\x02\x02\u06BF\u06C0\x03\x02\x02\x02\u06C0" +
        "\u06C2\x03\x02\x02\x02\u06C1\u06C3\t\t\x02\x02\u06C2\u06C1\x03\x02\x02" +
        "\x02\u06C2\u06C3\x03\x02\x02\x02\u06C3\u06C5\x03\x02\x02\x02\u06C4\u06C6" +
        "\x05\xBC_\x02\u06C5\u06C4\x03\x02\x02\x02\u06C5\u06C6\x03\x02\x02\x02" +
        "\u06C6\u06C7\x03\x02\x02\x02\u06C7\u06C8\x07\xDD\x02\x02\u06C8\u06C9\x05" +
        "\u013C\x9F\x02\u06C9\u06CA\x07\xE4\x02\x02\u06CA\u0147\x03\x02\x02\x02" +
        "\u06CB\u06CD\x05 \x11\x02\u06CC\u06CE\x05\u014A\xA6\x02\u06CD\u06CC\x03" +
        "\x02\x02\x02\u06CD\u06CE\x03\x02\x02\x02\u06CE\u06CF\x03\x02\x02\x02\u06CF" +
        "\u06D0\x05\u015E\xB0\x02\u06D0\u06D1\x05\b\x05\x02\u06D1\u0149\x03\x02" +
        "\x02\x02\u06D2\u06D3\x07\xDA\x02\x02\u06D3\u06D5\x07\xDF\x02\x02\u06D4" +
        "\u06D6\x05\u014C\xA7\x02\u06D5\u06D4\x03\x02\x02\x02\u06D5\u06D6\x03\x02" +
        "\x02\x02\u06D6\u06D7\x03\x02\x02\x02\u06D7\u06D8\x07\xD0\x02\x02\u06D8" +
        "\u014B\x03\x02\x02\x02\u06D9\u06DC\x05\u014E\xA8\x02\u06DA\u06DC\x05\u0156" +
        "\xAC\x02\u06DB\u06D9\x03\x02\x02\x02\u06DB\u06DA\x03\x02\x02\x02\u06DC" +
        "\u014D\x03\x02\x02\x02\u06DD\u06DE\x05\u0154\xAB\x02\u06DE\u06DF\x05\u0150" +
        "\xA9\x02\u06DF\u014F\x03\x02\x02\x02\u06E0\u06E2\x05\u0152\xAA\x02\u06E1" +
        "\u06E0\x03\x02\x02\x02\u06E2\u06E5\x03\x02\x02\x02\u06E3\u06E1\x03\x02" +
        "\x02\x02\u06E3\u06E4\x03\x02\x02\x02\u06E4\u0151\x03\x02\x02\x02\u06E5" +
        "\u06E3\x03\x02\x02\x02\u06E6\u06E8\x07\xD2\x02\x02\u06E7\u06E9\x05\u0154" +
        "\xAB\x02\u06E8\u06E7\x03\x02\x02\x02\u06E8\u06E9\x03\x02\x02\x02\u06E9" +
        "\u0153\x03\x02\x02\x02\u06EA\u06EB\x05\u02DE\u0170\x02\u06EB\u0155\x03" +
        "\x02\x02\x02\u06EC\u06ED\x05\u015C\xAF\x02\u06ED\u06EE\x05\u0158\xAD\x02" +
        "\u06EE\u0157\x03\x02\x02\x02\u06EF\u06F1\x05\u015A\xAE\x02\u06F0\u06EF" +
        "\x03\x02\x02\x02\u06F1\u06F4\x03\x02\x02\x02\u06F2\u06F0\x03\x02\x02\x02" +
        "\u06F2\u06F3\x03\x02\x02\x02\u06F3\u0159\x03\x02\x02\x02\u06F4\u06F2\x03" +
        "\x02\x02\x02\u06F5\u06F6\x07\xD2\x02\x02\u06F6\u06F7\x05\u015C\xAF\x02" +
        "\u06F7\u015B\x03\x02\x02\x02\u06F8\u06F9\x07\xD4\x02\x02\u06F9\u06FF\x05" +
        "\u0364\u01B3\x02\u06FA\u06FC\x07\xDF\x02\x02\u06FB\u06FD\x05\u02DE\u0170" +
        "\x02\u06FC\u06FB\x03\x02\x02\x02\u06FC\u06FD\x03\x02\x02\x02\u06FD\u06FE" +
        "\x03\x02\x02\x02\u06FE\u0700\x07\xD0\x02\x02\u06FF\u06FA\x03\x02\x02\x02" +
        "\u06FF\u0700\x03\x02\x02\x02\u0700\u0704\x03\x02\x02\x02\u0701\u0702\x07" +
        "\xD4\x02\x02\u0702\u0704\x07\xE6\x02\x02\u0703\u06F8\x03\x02\x02\x02\u0703" +
        "\u0701\x03\x02\x02\x02\u0704\u015D\x03\x02\x02\x02\u0705\u0706\x05\u0164" +
        "\xB3\x02\u0706\u0707\x05\u0160\xB1\x02\u0707\u015F\x03\x02\x02\x02\u0708" +
        "\u070A\x05\u0162\xB2\x02\u0709\u0708\x03\x02\x02\x02\u070A\u070D\x03\x02" +
        "\x02\x02\u070B\u0709\x03\x02\x02\x02\u070B\u070C\x03\x02\x02\x02\u070C" +
        "\u0161\x03\x02\x02\x02\u070D\u070B\x03\x02\x02\x02\u070E\u070F\x07\xD2" +
        "\x02\x02\u070F\u0710\x05\u0164\xB3\x02\u0710\u0163\x03\x02\x02\x02\u0711" +
        "\u0713\x05\u0166\xB4\x02\u0712\u0714\x05\u016E\xB8\x02\u0713\u0712\x03" +
        "\x02\x02\x02\u0713\u0714\x03\x02\x02\x02\u0714\u0165\x03\x02\x02\x02\u0715" +
        "\u0716\x05\u0168\xB5\x02\u0716\u0167\x03\x02\x02\x02\u0717\u071A\x05\u016A" +
        "\xB6\x02\u0718\u071A\x05\u016C\xB7\x02\u0719\u0717\x03\x02\x02\x02\u0719" +
        "\u0718\x03\x02\x02\x02\u071A\u0169\x03\x02\x02\x02\u071B\u071D\x07\xCD" +
        "\x02\x02\u071C\u071E\x05\xBC_\x02\u071D\u071C\x03\x02\x02\x02\u071D\u071E" +
        "\x03\x02\x02\x02\u071E\u016B\x03\x02\x02\x02\u071F\u0721\x07\xCC\x02\x02" +
        "\u0720\u0722\x05\xBC_\x02\u0721\u0720\x03\x02\x02\x02\u0721\u0722\x03" +
        "\x02\x02\x02\u0722\u016D\x03\x02\x02\x02\u0723\u0725\x07\xDF\x02\x02\u0724" +
        "\u0726\x05\u014C\xA7\x02\u0725\u0724\x03\x02\x02\x02\u0725\u0726\x03\x02" +
        "\x02\x02\u0726\u0727\x03\x02\x02\x02\u0727\u0728\x07\xD0\x02\x02\u0728" +
        "\u016F\x03\x02\x02\x02\u0729\u072A\x07\xDA\x02\x02\u072A\u0731\x05\u0178" +
        "\xBD\x02\u072B\u072C\x07\xDA\x02\x02\u072C\u072D\x07\xDF\x02\x02\u072D" +
        "\u072E\x05\u0172\xBA\x02\u072E\u072F\x07\xD0\x02\x02\u072F\u0731\x03\x02" +
        "\x02\x02\u0730\u0729\x03\x02\x02\x02\u0730\u072B\x03\x02\x02\x02\u0731" +
        "\u0171\x03\x02\x02\x02\u0732\u0733\x05\u0178\xBD\x02\u0733\u0734\x05\u0174" +
        "\xBB\x02\u0734\u0173\x03\x02\x02\x02\u0735\u0737\x05\u0176\xBC\x02\u0736" +
        "\u0735\x03\x02\x02\x02\u0737\u073A\x03\x02\x02\x02\u0738\u0736\x03\x02" +
        "\x02\x02\u0738\u0739\x03\x02\x02\x02\u0739\u0175\x03\x02\x02\x02\u073A" +
        "\u0738\x03\x02\x02\x02\u073B\u073C\x07\xD2\x02\x02\u073C\u073D\x05\u0178" +
        "\xBD\x02\u073D\u0177\x03\x02\x02\x02\u073E\u073F\x05\u02DE\u0170\x02\u073F" +
        "\u0179\x03\x02\x02\x02\u0740\u0741\x07\xDF\x02\x02\u0741\u0742\x05\xD2" +
        "j\x02\u0742\u0743\x07\xD2\x02\x02\u0743\u0744\x05\xD4k\x02\u0744\u0745" +
        "\x07\xD0\x02\x02\u0745\u0751\x03\x02\x02\x02\u0746\u0747\x07\xDF\x02\x02" +
        "\u0747\u0748\x05\xD4k\x02\u0748\u0749\x07\xD2\x02\x02\u0749\u074A\x05" +
        "\xD2j\x02\u074A\u074B\x07\xD0\x02\x02\u074B\u0751\x03\x02\x02\x02\u074C" +
        "\u074D\x07\xDF\x02\x02\u074D\u074E\x05\xD2j\x02\u074E\u074F\x07\xD0\x02" +
        "\x02\u074F\u0751\x03\x02\x02\x02\u0750\u0740\x03\x02\x02\x02\u0750\u0746" +
        "\x03\x02\x02\x02\u0750\u074C\x03\x02\x02\x02\u0751\u017B\x03\x02\x02\x02" +
        "\u0752\u0753\x07\xDF\x02\x02\u0753\u0754\x05\xD2j\x02\u0754\u0755\x07" +
        "\xD2\x02\x02\u0755\u0756\x05\xD4k\x02\u0756\u0757\x07\xD0\x02\x02\u0757" +
        "\u0763\x03\x02\x02\x02\u0758\u0759\x07\xDF\x02\x02\u0759\u075A\x05\xD4" +
        "k\x02\u075A\u075B\x07\xD2\x02\x02\u075B\u075C\x05\xD2j\x02\u075C\u075D" +
        "\x07\xD0\x02\x02\u075D\u0763\x03\x02\x02\x02\u075E\u075F\x07\xDF\x02\x02" +
        "\u075F\u0760\x05\xD4k\x02\u0760\u0761\x07\xD0\x02\x02\u0761\u0763\x03" +
        "\x02\x02\x02\u0762\u0752\x03\x02\x02\x02\u0762\u0758\x03\x02\x02\x02\u0762" +
        "\u075E\x03\x02\x02\x02\u0763\u017D\x03\x02\x02\x02\u0764\u0765\x05\u0168" +
        "\xB5\x02\u0765\u017F\x03\x02\x02\x02\u0766\u0770\x05\u0198\xCD\x02\u0767" +
        "\u0770\x05\u0196\xCC\x02\u0768\u0770\x05\u019E\xD0\x02\u0769\u0770\x05" +
        "\u0190\xC9\x02\u076A\u0770\x05\u0192\xCA\x02\u076B\u0770\x05\u0194\xCB" +
        "\x02\u076C\u0770\x05\u019C\xCF\x02\u076D\u0770\x05\u019A\xCE\x02\u076E" +
        "\u0770\x05\u01A0\xD1\x02\u076F\u0766\x03\x02\x02\x02\u076F\u0767\x03\x02" +
        "\x02\x02\u076F\u0768\x03\x02\x02\x02\u076F\u0769\x03\x02\x02\x02\u076F" +
        "\u076A\x03\x02\x02\x02\u076F\u076B\x03\x02\x02\x02\u076F\u076C\x03\x02" +
        "\x02\x02\u076F\u076D\x03\x02\x02\x02\u076F\u076E\x03\x02\x02\x02\u0770" +
        "\u0181\x03\x02\x02\x02\u0771\u0772\t\x11\x02\x02\u0772\u0183\x03\x02\x02" +
        "\x02\u0773\u0774\t\x12\x02\x02\u0774\u0185\x03\x02\x02\x02\u0775\u0776" +
        "\t\x13\x02\x02\u0776\u0187\x03\x02\x02\x02\u0777\u0778\t\x14\x02\x02\u0778" +
        "\u0189\x03\x02\x02\x02\u0779\u077A\t\x15\x02\x02\u077A\u018B\x03\x02\x02" +
        "\x02\u077B\u077C\t\x16\x02\x02\u077C\u018D\x03\x02\x02\x02\u077D\u077E" +
        "\t\x17\x02\x02\u077E\u018F\x03\x02\x02\x02\u077F\u0781\x07\x91\x02\x02" +
        "\u0780\u0782\x05\u017A\xBE\x02\u0781\u0780\x03\x02\x02\x02\u0781\u0782" +
        "\x03\x02\x02\x02\u0782\u0783\x03\x02\x02\x02\u0783\u0784\x05\u01A2\xD2" +
        "\x02\u0784\u0785\x05\b\x05\x02\u0785\u0191\x03\x02\x02\x02\u0786\u0788" +
        "\x07\x90\x02\x02\u0787\u0789\x05\u017C\xBF\x02\u0788\u0787\x03\x02\x02" +
        "\x02\u0788\u0789\x03\x02\x02\x02\u0789\u078A\x03\x02\x02\x02\u078A\u078B" +
        "\x05\u01A2\xD2\x02\u078B\u078C\x05\b\x05\x02\u078C\u0193\x03\x02\x02\x02" +
        "\u078D\u078F\x05\u0182\xC2\x02\u078E\u0790\x05\xCCg\x02\u078F\u078E\x03" +
        "\x02\x02\x02\u078F\u0790\x03\x02\x02\x02\u0790\u0792\x03\x02\x02\x02\u0791" +
        "\u0793\x05\u0170\xB9\x02\u0792\u0791\x03\x02\x02\x02\u0792\u0793\x03\x02" +
        "\x02\x02\u0793\u0794\x03\x02\x02\x02\u0794\u0795\x05\u01A4\xD3\x02\u0795" +
        "\u0796\x05\b\x05\x02\u0796\u0195\x03\x02\x02\x02\u0797\u0799\x05\u0184" +
        "\xC3\x02\u0798\u079A\x05\u0170\xB9\x02\u0799\u0798\x03\x02\x02\x02\u0799" +
        "\u079A\x03\x02\x02\x02\u079A\u079B\x03\x02\x02\x02\u079B\u079C\x05\u01A6" +
        "\xD4\x02\u079C\u079D\x05\b\x05\x02\u079D\u0197\x03\x02\x02\x02\u079E\u07A0" +
        "\x05\u0186\xC4\x02\u079F\u07A1\x05\u0170\xB9\x02\u07A0\u079F\x03\x02\x02" +
        "\x02\u07A0\u07A1\x03\x02\x02\x02\u07A1\u07A2\x03\x02\x02\x02\u07A2\u07A3" +
        "\x05\u01A8\xD5\x02\u07A3\u07A4\x05\b\x05\x02\u07A4\u0199\x03\x02\x02\x02" +
        "\u07A5\u07A7\x05\u0188\xC5\x02\u07A6\u07A8\x05\xCCg\x02\u07A7\u07A6\x03" +
        "\x02\x02\x02\u07A7\u07A8\x03\x02\x02\x02\u07A8\u07AA\x03\x02\x02\x02\u07A9" +
        "\u07AB\x05\u0170\xB9\x02\u07AA\u07A9\x03\x02\x02\x02\u07AA\u07AB\x03\x02" +
        "\x02\x02\u07AB\u07AC\x03\x02\x02\x02\u07AC\u07AD\x05\u01AC\xD7\x02\u07AD" +
        "\u07AE\x05\b\x05\x02\u07AE\u019B\x03\x02\x02\x02\u07AF\u07B1\x05\u018A" +
        "\xC6\x02\u07B0\u07B2\x05\xCCg\x02\u07B1\u07B0\x03\x02\x02\x02\u07B1\u07B2" +
        "\x03\x02\x02\x02\u07B2\u07B4\x03\x02\x02\x02\u07B3\u07B5\x05\u0170\xB9" +
        "\x02\u07B4\u07B3\x03\x02\x02\x02\u07B4\u07B5\x03\x02\x02\x02\u07B5\u07B6" +
        "\x03\x02\x02\x02\u07B6\u07B7\x05\u01AA\xD6\x02\u07B7\u07B8\x05\b\x05\x02" +
        "\u07B8\u019D\x03\x02\x02\x02\u07B9\u07BA\x05\u018C\xC7\x02\u07BA\u07BB" +
        "\x05\u01AE\xD8\x02\u07BB\u07BC\x05\b\x05\x02\u07BC\u019F\x03\x02\x02\x02" +
        "\u07BD\u07BF\x05\u018E\xC8\x02\u07BE\u07C0\x05\u0170\xB9\x02\u07BF\u07BE" +
        "\x03\x02\x02\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0\u07C1\x03\x02\x02\x02" +
        "\u07C1\u07C2\x05\u01B0\xD9\x02\u07C2\u07C3\x05\b\x05\x02\u07C3\u01A1\x03" +
        "\x02\x02\x02\u07C4\u07C5\x05\u01D2\xEA\x02\u07C5\u07C6\x05\u01B2\xDA\x02" +
        "\u07C6\u01A3\x03\x02\x02\x02\u07C7\u07C8\x05\u01D4\xEB\x02\u07C8\u07C9" +
        "\x05\u01B4\xDB\x02\u07C9\u01A5\x03\x02\x02\x02\u07CA\u07CB\x05\u01D6\xEC" +
        "\x02\u07CB\u07CC\x05\u01B6\xDC\x02\u07CC\u01A7\x03\x02\x02\x02\u07CD\u07CE" +
        "\x05\u01D8\xED\x02\u07CE\u07CF\x05\u01B8\xDD\x02\u07CF\u01A9\x03\x02\x02" +
        "\x02\u07D0\u07D1\x05\u01DA\xEE\x02\u07D1\u07D2\x05\u01BA\xDE\x02\u07D2" +
        "\u01AB\x03\x02\x02\x02\u07D3\u07D4\x05\u01DC\xEF\x02\u07D4\u07D5\x05\u01BC" +
        "\xDF\x02\u07D5\u01AD\x03\x02\x02\x02\u07D6\u07D7\x05\u01DE\xF0\x02\u07D7" +
        "\u07D8\x05\u01BE\xE0\x02\u07D8\u01AF\x03\x02\x02\x02\u07D9\u07DA\x05\u01E0" +
        "\xF1\x02\u07DA\u07DB\x05\u01C0\xE1\x02\u07DB\u01B1\x03\x02\x02\x02\u07DC" +
        "\u07DE\x05\u01C2\xE2\x02\u07DD\u07DC\x03\x02\x02\x02\u07DE\u07E1\x03\x02" +
        "\x02\x02\u07DF\u07DD\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02\u07E0" +
        "\u01B3\x03\x02\x02\x02\u07E1\u07DF\x03\x02\x02\x02\u07E2\u07E4\x05\u01C4" +
        "\xE3\x02\u07E3\u07E2\x03\x02\x02\x02\u07E4\u07E7\x03\x02\x02\x02\u07E5" +
        "\u07E3\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6\u01B5\x03\x02" +
        "\x02\x02\u07E7\u07E5\x03\x02\x02\x02\u07E8\u07EA\x05\u01C6\xE4\x02\u07E9" +
        "\u07E8\x03\x02\x02\x02\u07EA\u07ED\x03\x02\x02\x02\u07EB\u07E9\x03\x02" +
        "\x02\x02\u07EB\u07EC\x03\x02\x02\x02\u07EC\u01B7\x03\x02\x02\x02\u07ED" +
        "\u07EB\x03\x02\x02\x02\u07EE\u07F0\x05\u01C8\xE5\x02\u07EF\u07EE\x03\x02" +
        "\x02\x02\u07F0\u07F3\x03\x02\x02\x02\u07F1\u07EF\x03\x02\x02\x02\u07F1" +
        "\u07F2\x03\x02\x02\x02\u07F2\u01B9\x03\x02\x02\x02\u07F3\u07F1\x03\x02" +
        "\x02\x02\u07F4\u07F6\x05\u01CA\xE6\x02\u07F5\u07F4\x03\x02\x02\x02\u07F6" +
        "\u07F9\x03\x02\x02\x02\u07F7\u07F5\x03\x02\x02\x02\u07F7\u07F8\x03\x02" +
        "\x02\x02\u07F8\u01BB\x03\x02\x02\x02\u07F9\u07F7\x03\x02\x02\x02\u07FA" +
        "\u07FC\x05\u01CC\xE7\x02\u07FB\u07FA\x03\x02\x02\x02\u07FC\u07FF\x03\x02" +
        "\x02\x02\u07FD\u07FB\x03\x02\x02\x02\u07FD\u07FE\x03\x02\x02\x02\u07FE" +
        "\u01BD\x03\x02\x02\x02\u07FF\u07FD\x03\x02\x02\x02\u0800\u0802\x05\u01CE" +
        "\xE8\x02\u0801\u0800\x03\x02\x02\x02\u0802\u0805\x03\x02\x02\x02\u0803" +
        "\u0801\x03\x02\x02\x02\u0803\u0804\x03\x02\x02\x02\u0804\u01BF\x03\x02" +
        "\x02\x02\u0805\u0803\x03\x02\x02\x02\u0806\u0808\x05\u01D0\xE9\x02\u0807" +
        "\u0806\x03\x02\x02\x02\u0808\u080B\x03\x02\x02\x02\u0809\u0807\x03\x02" +
        "\x02\x02\u0809\u080A\x03\x02\x02\x02\u080A\u01C1\x03\x02\x02\x02\u080B" +
        "\u0809\x03\x02\x02\x02\u080C\u080D\x07\xD2\x02\x02\u080D\u080E\x05\u01D2" +
        "\xEA\x02\u080E\u01C3\x03\x02\x02\x02\u080F\u0810\x07\xD2\x02\x02\u0810" +
        "\u0811\x05\u01D4\xEB\x02\u0811\u01C5\x03\x02\x02\x02\u0812\u0813\x07\xD2" +
        "\x02\x02\u0813\u0814\x05\u01D6\xEC\x02\u0814\u01C7\x03\x02\x02\x02\u0815" +
        "\u0816\x07\xD2\x02\x02\u0816\u0817\x05\u01D8\xED\x02\u0817\u01C9\x03\x02" +
        "\x02\x02\u0818\u0819\x07\xD2\x02\x02\u0819\u081A\x05\u01DA\xEE\x02\u081A" +
        "\u01CB\x03\x02\x02\x02\u081B\u081C\x07\xD2\x02\x02\u081C\u081D\x05\u01DC" +
        "\xEF\x02\u081D\u01CD\x03\x02\x02\x02\u081E\u081F\x07\xD2\x02\x02\u081F" +
        "\u0820\x05\u01DE\xF0\x02\u0820\u01CF\x03\x02\x02\x02\u0821\u0822\x07\xD2" +
        "\x02\x02\u0822\u0823\x05\u01E0\xF1\x02\u0823\u01D1\x03\x02\x02\x02\u0824" +
        "\u0826\x05\u017E\xC0\x02\u0825\u0824\x03\x02\x02\x02\u0825\u0826\x03\x02" +
        "\x02\x02\u0826\u0827\x03\x02\x02\x02\u0827\u0828\x05\u01E2\xF2\x02\u0828" +
        "\u01D3\x03\x02\x02\x02\u0829\u082B\x05\u017E\xC0\x02\u082A\u0829\x03\x02" +
        "\x02\x02\u082A\u082B\x03\x02\x02\x02\u082B\u082C\x03\x02\x02\x02\u082C" +
        "\u082D\x05\u01E4\xF3\x02\u082D\u01D5\x03\x02\x02\x02\u082E\u0830\x05\u017E" +
        "\xC0\x02\u082F\u082E\x03\x02\x02\x02\u082F\u0830\x03\x02\x02\x02\u0830" +
        "\u0831\x03\x02\x02\x02\u0831\u0832\x05\u01E6\xF4\x02\u0832\u01D7\x03\x02" +
        "\x02\x02\u0833\u0835\x05\u017E\xC0\x02\u0834\u0833\x03\x02\x02\x02\u0834" +
        "\u0835\x03\x02\x02\x02\u0835\u0836\x03\x02\x02\x02\u0836\u0837\x05\u01E8" +
        "\xF5\x02\u0837\u01D9\x03\x02\x02\x02\u0838\u083A\x05\u017E\xC0\x02\u0839" +
        "\u0838\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u083B\x03\x02" +
        "\x02\x02\u083B\u083C\x05\u01EA\xF6\x02\u083C\u01DB\x03\x02\x02\x02\u083D" +
        "\u083F\x05\u017E\xC0\x02\u083E\u083D\x03\x02\x02\x02\u083E\u083F\x03\x02" +
        "\x02\x02\u083F\u0840\x03\x02\x02\x02\u0840\u0841\x05\u01EC\xF7\x02\u0841" +
        "\u01DD\x03\x02\x02\x02\u0842\u0844\x05\u017E\xC0\x02\u0843\u0842\x03\x02" +
        "\x02\x02\u0843\u0844\x03\x02\x02\x02\u0844\u0845\x03\x02\x02\x02\u0845" +
        "\u0846\x05\u01EE\xF8\x02\u0846\u01DF\x03\x02\x02\x02\u0847\u0849\x05\u017E" +
        "\xC0\x02\u0848\u0847\x03\x02\x02\x02\u0848\u0849\x03\x02\x02\x02\u0849" +
        "\u084A\x03\x02\x02\x02\u084A\u084B\x05\u01F0\xF9\x02\u084B\u01E1\x03\x02" +
        "\x02\x02\u084C\u084D\x07\xDF\x02\x02\u084D\u084E\x05\u0206\u0104\x02\u084E" +
        "\u084F\x07\xD0\x02\x02\u084F\u01E3\x03\x02\x02\x02\u0850\u0851\x07\xDF" +
        "\x02\x02\u0851\u0852\x05\u0206\u0104\x02\u0852\u0853\x07\xD2\x02\x02\u0853" +
        "\u0854\x05\u0200\u0101\x02\u0854\u0855\x07\xD2\x02\x02\u0855\u0856\x05" +
        "\u01FE\u0100\x02\u0856\u0857\x07\xD0\x02\x02\u0857\u01E5\x03\x02\x02\x02" +
        "\u0858\u0859\x07\xDF\x02\x02\u0859\u085A\x05\u0206\u0104\x02\u085A\u085B" +
        "\x07\xD2\x02\x02\u085B\u085C\x05\u0200\u0101\x02\u085C\u085D\x07\xD2\x02" +
        "\x02\u085D\u085E\x05\u01FE\u0100\x02\u085E\u085F\x07\xD0\x02\x02\u085F" +
        "\u01E7\x03\x02\x02\x02\u0860\u0861\x07\xDF\x02\x02\u0861\u0862\x05\u0206" +
        "\u0104\x02\u0862\u0863\x07\xD2\x02\x02\u0863\u0864\x05\u0200\u0101\x02" +
        "\u0864\u0865\x07\xD2\x02\x02\u0865\u0866\x05\u0204\u0103\x02\u0866\u0867" +
        "\x07\xD2\x02\x02\u0867\u0868\x05\u0208\u0105\x02\u0868\u0869\x07\xD0\x02" +
        "\x02\u0869\u01E9\x03\x02\x02\x02\u086A\u086B\x07\xDF\x02\x02\u086B\u086C" +
        "\x05\u0206\u0104\x02\u086C\u086D\x07\xD2\x02\x02\u086D\u086E\x05\u01F2" +
        "\xFA\x02\u086E\u086F\x07\xD0\x02\x02\u086F\u01EB\x03\x02\x02\x02\u0870" +
        "\u0871\x07\xDF\x02\x02\u0871\u0872\x05\u01F4\xFB\x02\u0872\u0873\x07\xD2" +
        "\x02\x02\u0873\u0874\x05\u0200\u0101\x02\u0874\u0875\x07\xD0\x02\x02\u0875" +
        "\u01ED\x03\x02\x02\x02\u0876\u0877\x07\xDF\x02\x02\u0877\u0878\x05\u0202" +
        "\u0102\x02\u0878\u0879\x07\xD2\x02\x02\u0879\u087A\x05\u0202\u0102\x02" +
        "\u087A\u087B\x07\xD0\x02\x02\u087B\u01EF\x03\x02\x02\x02\u087C\u087D\x07" +
        "\xDF\x02\x02\u087D\u087E\x05\u0202\u0102\x02\u087E\u087F\x07\xD2\x02\x02" +
        "\u087F\u0880\x05\u0202\u0102\x02\u0880\u0881\x07\xD2\x02\x02\u0881\u0882" +
        "\x05\u01FE\u0100\x02\u0882\u0883\x07\xD0\x02\x02\u0883\u01F1\x03\x02\x02" +
        "\x02\u0884\u0885\x05\u0200\u0101\x02\u0885\u0886\x05\u01F6\xFC\x02\u0886" +
        "\u01F3\x03\x02\x02\x02\u0887\u0888\x05\u0206\u0104\x02\u0888\u0889\x05" +
        "\u01F8\xFD\x02\u0889\u01F5\x03\x02\x02\x02\u088A\u088C\x05\u01FA\xFE\x02" +
        "\u088B\u088A\x03\x02\x02\x02\u088C\u088F\x03\x02\x02\x02\u088D\u088B\x03" +
        "\x02\x02\x02\u088D\u088E\x03\x02\x02\x02\u088E\u01F7\x03\x02\x02\x02\u088F" +
        "\u088D\x03\x02\x02\x02\u0890\u0892\x05\u01FC\xFF\x02\u0891\u0890\x03\x02" +
        "\x02\x02\u0892\u0895\x03\x02\x02\x02\u0893\u0891\x03\x02\x02\x02\u0893" +
        "\u0894\x03\x02\x02\x02\u0894\u01F9\x03\x02\x02\x02\u0895\u0893\x03\x02" +
        "\x02\x02\u0896\u0897\x07\xD2\x02\x02\u0897\u0898\x05\u0200\u0101\x02\u0898" +
        "\u01FB\x03\x02\x02\x02\u0899\u089A\x07\xD2\x02\x02\u089A\u089B\x05\u0206" +
        "\u0104\x02\u089B\u01FD\x03\x02\x02\x02\u089C\u089D\x05\u02DE\u0170\x02" +
        "\u089D\u01FF\x03\x02\x02\x02\u089E\u089F\x05\u02DE\u0170\x02\u089F\u0201" +
        "\x03\x02\x02\x02\u08A0\u08A1\x05\u02DE\u0170\x02\u08A1\u0203\x03\x02\x02" +
        "\x02\u08A2\u08A3\x05\u02DE\u0170\x02\u08A3\u0205\x03\x02\x02\x02\u08A4" +
        "\u08A5\x05\u02DE\u0170\x02\u08A5\u0207\x03\x02\x02\x02\u08A6\u08A7\x05" +
        "\u02DE\u0170\x02\u08A7\u0209\x03\x02\x02\x02\u08A8\u08AA\x05\u020C\u0107" +
        "\x02\u08A9\u08A8\x03\x02\x02\x02\u08AA\u08AD\x03\x02\x02\x02\u08AB\u08A9" +
        "\x03\x02\x02\x02\u08AB\u08AC\x03\x02\x02\x02\u08AC\u020B\x03\x02\x02\x02" +
        "\u08AD\u08AB\x03\x02\x02\x02\u08AE\u08AF\x05\u035A\u01AE\x02\u08AF\u08B1" +
        "\x05\u020E\u0108\x02\u08B0\u08B2\x05\b\x05\x02\u08B1\u08B0\x03\x02\x02" +
        "\x02\u08B1\u08B2\x03\x02\x02\x02\u08B2\u08B5\x03\x02\x02\x02\u08B3\u08B5" +
        "\x05\u0222\u0112\x02\u08B4\u08AE\x03\x02\x02\x02\u08B4\u08B3\x03\x02\x02" +
        "\x02\u08B5\u020D\x03\x02\x02\x02\u08B6\u08BF\x05\u0210\u0109\x02\u08B7" +
        "\u08BF\x05\u0212\u010A\x02\u08B8\u08BF\x05\u0214\u010B\x02\u08B9\u08BF";
    SysVerilogHDLParser._serializedATNSegment4 = "\x05\u0216\u010C\x02\u08BA\u08BF\x05\u0218\u010D\x02\u08BB\u08BF\x05\u021A" +
        "\u010E\x02\u08BC\u08BF\x05\u021C\u010F\x02\u08BD\u08BF\x05\u021E\u0110" +
        "\x02\u08BE\u08B6\x03\x02\x02\x02\u08BE\u08B7\x03\x02\x02\x02\u08BE\u08B8" +
        "\x03\x02\x02\x02\u08BE\u08B9\x03\x02\x02\x02\u08BE\u08BA\x03\x02\x02\x02" +
        "\u08BE\u08BB\x03\x02\x02\x02\u08BE\u08BC\x03\x02\x02\x02\u08BE\u08BD\x03" +
        "\x02\x02\x02\u08BF\u020F\x03\x02\x02\x02\u08C0\u08C7\x05\u0254\u012B\x02" +
        "\u08C1\u08C7\x05\u0256\u012C\x02\u08C2\u08C7\x05\u0258\u012D\x02\u08C3" +
        "\u08C7\x05\u025A\u012E\x02\u08C4\u08C7\x05\u025C\u012F\x02\u08C5\u08C7" +
        "\x05\u025E\u0130\x02\u08C6\u08C0\x03\x02\x02\x02\u08C6\u08C1\x03\x02\x02" +
        "\x02\u08C6\u08C2\x03\x02\x02\x02\u08C6\u08C3\x03\x02\x02\x02\u08C6\u08C4" +
        "\x03\x02\x02\x02\u08C6\u08C5\x03\x02\x02\x02\u08C7\u0211\x03\x02\x02\x02" +
        "\u08C8\u08CC\x05\u02CE\u0168\x02\u08C9\u08CC\x05\u02B4\u015B\x02\u08CA" +
        "\u08CC\x05\u02BC\u015F\x02\u08CB\u08C8\x03\x02\x02\x02\u08CB\u08C9\x03" +
        "\x02\x02\x02\u08CB\u08CA\x03\x02\x02\x02\u08CC\u0213\x03\x02\x02\x02\u08CD" +
        "\u08D0\x05\u0338\u019D\x02\u08CE\u08D0\x05\u033A\u019E\x02\u08CF\u08CD" +
        "\x03\x02\x02\x02\u08CF\u08CE\x03\x02\x02\x02\u08D0\u0215\x03\x02\x02\x02" +
        "\u08D1\u08D5\x05\u0242\u0122\x02\u08D2\u08D5\x05\u023C\u011F\x02\u08D3" +
        "\u08D5\x05\u0246\u0124\x02\u08D4\u08D1\x03\x02\x02\x02\u08D4\u08D2\x03" +
        "\x02\x02\x02\u08D4\u08D3\x03\x02\x02\x02\u08D5\u0217\x03\x02\x02\x02\u08D6" +
        "\u08D9\x05\u0282\u0142\x02\u08D7\u08D9\x05\u0288\u0145\x02\u08D8\u08D6" +
        "\x03\x02\x02\x02\u08D8\u08D7\x03\x02\x02\x02\u08D9\u0219\x03\x02\x02\x02" +
        "\u08DA\u08DF\x05\u0224\u0113\x02\u08DB\u08DF\x05\u022E\u0118\x02\u08DC" +
        "\u08DF\x05\u0236\u011C\x02\u08DD\u08DF\x05\u0230\u0119\x02\u08DE\u08DA" +
        "\x03\x02\x02\x02\u08DE\u08DB\x03\x02\x02\x02\u08DE\u08DC\x03\x02\x02\x02" +
        "\u08DE\u08DD\x03\x02\x02\x02\u08DF\u021B\x03\x02\x02\x02\u08E0\u08E1\x05" +
        "\u02DE\u0170\x02\u08E1\u021D\x03\x02\x02\x02\u08E2\u08E3\x05\u0220\u0111" +
        "\x02\u08E3\u021F\x03\x02\x02\x02\u08E4\u08E5\x07\x9B\x02\x02\u08E5\u08E8" +
        "\x05\u02DE\u0170\x02\u08E6\u08E8\x07\x9B\x02\x02\u08E7\u08E4\x03\x02\x02" +
        "\x02\u08E7\u08E6\x03\x02\x02\x02\u08E8\u0221\x03\x02\x02\x02\u08E9\u08EA" +
        "\x05\b\x05\x02\u08EA\u0223\x03\x02\x02\x02\u08EB\u08F0\x05\u0226\u0114" +
        "\x02\u08EC\u08F0\x05\u0228\u0115\x02\u08ED\u08F0\x05\u022A\u0116\x02\u08EE" +
        "\u08F0\x05\u022C\u0117\x02\u08EF\u08EB\x03\x02\x02\x02\u08EF\u08EC\x03" +
        "\x02\x02\x02\u08EF\u08ED\x03\x02\x02\x02\u08EF\u08EE\x03\x02\x02\x02\u08F0" +
        "\u0225\x03\x02\x02\x02\u08F1\u08F2\x078\x02\x02\u08F2\u08F3\x05\u0210" +
        "\u0109\x02\u08F3\u0227\x03\x02\x02\x02\u08F4\u08F5\x07G\x02\x02\u08F5" +
        "\u08F6\x05\u024A\u0126\x02\u08F6\u0229\x03\x02\x02\x02\u08F7\u08F8\x07" +
        "^\x02\x02\u08F8\u08F9\x05\u0210\u0109\x02\u08F9\u022B\x03\x02\x02\x02" +
        "\u08FA\u08FB\x07\x99\x02\x02\u08FB\u08FC\x05\u024A\u0126\x02\u08FC\u022D" +
        "\x03\x02\x02\x02\u08FD\u08FE\x05\u0260\u0131\x02\u08FE\u08FF\x05\u020C" +
        "\u0107\x02\u08FF\u022F\x03\x02\x02\x02\u0900\u0901\x05\u0232\u011A\x02" +
        "\u0901\u0231\x03\x02\x02\x02\u0902\u0903\x07L\x02\x02\u0903\u0904\x07" +
        "g\x02\x02\u0904\u0905\x07\xDF\x02\x02\u0905\u0906\x05\u02DE\u0170\x02" +
        "\u0906\u0907\x07\xD0\x02\x02\u0907\u0908\x05\u0234\u011B\x02\u0908\u0233" +
        "\x03\x02\x02\x02\u0909\u090A\x05\u02DE\u0170\x02\u090A\u0235\x03\x02\x02" +
        "\x02\u090B\u090D\x05\u023A\u011E\x02\u090C\u090E\x05\u0238\u011D\x02\u090D" +
        "\u090C\x03\x02\x02\x02\u090D\u090E\x03\x02\x02\x02\u090E\u0237\x03\x02" +
        "\x02\x02\u090F\u0910\x07O\x02\x02\u0910\u0911\x05\u020E\u0108\x02\u0911" +
        "\u0239\x03\x02\x02\x02\u0912\u0913\x05\u0366\u01B4\x02\u0913\u0914\x07" +
        "\xD1\x02\x02\u0914\u0916\x03\x02\x02\x02\u0915\u0912\x03\x02\x02\x02\u0915" +
        "\u0916\x03\x02\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917\u0918\x077\x02" +
        "\x02\u0918\u0919\x07\xDF\x02\x02\u0919\u091A\x05\u02DE\u0170\x02\u091A" +
        "\u091B\x07\xD0\x02\x02\u091B\u023B\x03\x02\x02\x02\u091C\u091E\x05\u023E" +
        "\u0120\x02\u091D\u091F\x05\u0240\u0121\x02\u091E\u091D\x03\x02\x02\x02" +
        "\u091E\u091F\x03\x02\x02\x02\u091F\u023D\x03\x02\x02\x02\u0920\u0921\x07" +
        "\xCB\x02\x02\u0921\u023F\x03\x02\x02\x02\u0922\u0924\x07\xDF\x02\x02\u0923" +
        "\u0925\x05\u014C\xA7\x02\u0924\u0923\x03\x02\x02\x02\u0924\u0925\x03\x02" +
        "\x02\x02\u0925\u0926\x03\x02\x02\x02\u0926\u0927\x07\xD0\x02\x02\u0927" +
        "\u0241\x03\x02\x02\x02\u0928\u092A\x05\u0244\u0123\x02\u0929\u092B\x05" +
        "\u0240\u0121\x02\u092A\u0929\x03\x02\x02\x02\u092A\u092B\x03\x02\x02\x02" +
        "\u092B\u0243\x03\x02\x02\x02\u092C\u092D\x05\u0366\u01B4\x02\u092D\u0245" +
        "\x03\x02\x02\x02\u092E\u092F\x07L\x02\x02\u092F\u0933\x05\u0244\u0123" +
        "\x02\u0930\u0931\x07L\x02\x02\u0931\u0933\x05\u0248\u0125\x02\u0932\u092E" +
        "\x03\x02\x02\x02\u0932\u0930\x03\x02\x02\x02\u0933\u0247\x03\x02\x02\x02" +
        "\u0934\u0935\x05\u0366\u01B4\x02\u0935\u0249\x03\x02\x02\x02\u0936\u0939" +
        "\x05\u024C\u0127\x02\u0937\u0939\x05\u024E\u0128\x02\u0938\u0936\x03\x02" +
        "\x02\x02\u0938\u0937\x03\x02\x02\x02\u0939\u024B\x03\x02\x02\x02\u093A" +
        "\u093B\x05\u031C\u018F\x02\u093B\u024D\x03\x02\x02\x02\u093C\u093D\x07" +
        "\xDD\x02\x02\u093D\u093E\x05\u0250\u0129\x02\u093E\u093F\x05\u0252\u012A" +
        "\x02\u093F\u0940\x07\xE4\x02\x02\u0940\u024F\x03\x02\x02\x02\u0941\u0944" +
        "\x05\u031C\u018F\x02\u0942\u0944\x05\u024E\u0128\x02\u0943\u0941\x03\x02" +
        "\x02\x02\u0943\u0942\x03\x02\x02\x02\u0944\u0251\x03\x02\x02\x02\u0945" +
        "\u0946\x07\xD2\x02\x02\u0946\u0948\x05\u0250\u0129\x02\u0947\u0945\x03" +
        "\x02\x02\x02\u0948\u094B\x03\x02\x02\x02\u0949\u0947\x03\x02\x02\x02\u0949" +
        "\u094A\x03\x02\x02\x02\u094A\u0253\x03\x02\x02\x02\u094B\u0949\x03\x02" +
        "\x02\x02\u094C\u094D\x05\u024A\u0126\x02\u094D\u094F\x07\xD7\x02\x02\u094E" +
        "\u0950\x05\u0260\u0131\x02\u094F\u094E\x03\x02\x02\x02\u094F\u0950\x03" +
        "\x02\x02\x02\u0950\u0951\x03\x02\x02\x02\u0951\u0952\x05\u02DE\u0170\x02" +
        "\u0952\u0255\x03\x02\x02\x02\u0953\u0954\x05\u024A\u0126\x02\u0954\u0956" +
        "\x07\xDB\x02\x02\u0955\u0957\x05\u0260\u0131\x02\u0956\u0955\x03\x02\x02" +
        "\x02\u0956\u0957\x03\x02\x02\x02\u0957\u0958\x03\x02\x02\x02\u0958\u0959" +
        "\x05\u02DE\u0170\x02\u0959\u0257\x03\x02\x02\x02\u095A\u095B\x05\x0E\b" +
        "\x02\u095B\u095C\x05\u024A\u0126\x02\u095C\u0259\x03\x02\x02\x02\u095D" +
        "\u095E\x05\u024A\u0126\x02\u095E\u095F\x05\x0E\b\x02\u095F\u025B\x03\x02" +
        "\x02\x02\u0960\u0961\x05\u024A\u0126\x02\u0961\u0962\x05\x10\t\x02\u0962" +
        "\u0963\x05\u02DE\u0170\x02\u0963\u025D\x03\x02\x02\x02\u0964\u096B\x05" +
        "\xF4{\x02\u0965\u096B\x05\xF6|\x02\u0966\u096B\x05\xFA~\x02\u0967\u096B" +
        "\x05\xFC\x7F\x02\u0968\u096B\x05\xFE\x80\x02\u0969\u096B\x05\u0108\x85" +
        "\x02\u096A\u0964\x03\x02\x02\x02\u096A\u0965\x03\x02\x02\x02\u096A\u0966" +
        "\x03\x02\x02\x02\u096A\u0967\x03\x02\x02\x02\u096A\u0968\x03\x02\x02\x02" +
        "\u096A\u0969\x03\x02\x02\x02\u096B\u025F\x03\x02\x02\x02\u096C\u0970\x05" +
        "\u0262\u0132\x02\u096D\u0970\x05\u0264\u0133\x02\u096E\u0970\x05\u0280" +
        "\u0141\x02\u096F\u096C\x03\x02\x02\x02\u096F\u096D\x03\x02\x02\x02\u096F" +
        "\u096E\x03\x02\x02\x02\u0970\u0261\x03\x02\x02\x02\u0971\u0972\x07\xDA" +
        "\x02\x02\u0972\u097E\x05\u0178\xBD\x02\u0973\u0974\x07\xDA\x02\x02\u0974" +
        "\u0975\x07\xDF\x02\x02\u0975\u0976\x05\u0178\xBD\x02\u0976\u0977\x07\xD0" +
        "\x02\x02\u0977\u097E\x03\x02\x02\x02\u0978\u0979\x07\xDA\x02\x02\u0979" +
        "\u097A\x07\xDF\x02\x02\u097A\u097B\x05\u02F0\u0179\x02\u097B\u097C\x07" +
        "\xD0\x02\x02\u097C\u097E\x03\x02\x02\x02\u097D\u0971\x03\x02\x02\x02\u097D" +
        "\u0973\x03\x02\x02\x02\u097D\u0978\x03\x02\x02\x02\u097E\u0263\x03\x02" +
        "\x02\x02\u097F\u0983\x05\u0266\u0134\x02\u0980\u0983\x05\u0268\u0135\x02" +
        "\u0981\u0983\x05\u027E\u0140\x02\u0982\u097F\x03\x02\x02\x02\u0982\u0980" +
        "\x03\x02\x02\x02\u0982\u0981\x03\x02\x02\x02\u0983\u0265\x03\x02\x02\x02" +
        "\u0984\u0985\x07\xCF\x02\x02\u0985\u0986\x05\u0286\u0144\x02\u0986\u0267" +
        "\x03\x02\x02\x02\u0987\u0988\x07\xCF\x02\x02\u0988\u0989\x07\xDF\x02\x02" +
        "\u0989\u098A\x05\u026A\u0136\x02\u098A\u098B\x07\xD0\x02\x02\u098B\u0269" +
        "\x03\x02\x02\x02\u098C\u098F\x05\u026C\u0137\x02\u098D\u098F\x05\u0270" +
        "\u0139\x02\u098E\u098C\x03\x02\x02\x02\u098E\u098D\x03\x02\x02\x02\u098F" +
        "\u026B\x03\x02\x02\x02\u0990\u0996\x05\u02DE\u0170\x02\u0991\u0996\x05" +
        "\u0366\u01B4\x02\u0992\u0993\x05\u026E\u0138\x02\u0993\u0994\x05\u02DE" +
        "\u0170\x02\u0994\u0996\x03\x02\x02\x02\u0995\u0990\x03\x02\x02\x02\u0995" +
        "\u0991\x03\x02\x02\x02\u0995\u0992\x03\x02\x02\x02\u0996\u026D\x03\x02" +
        "\x02\x02\u0997\u0998\t\x18\x02\x02\u0998\u026F\x03\x02\x02\x02\u0999\u099C" +
        "\x05\u0272\u013A\x02\u099A\u099C\x05\u0278\u013D\x02\u099B\u0999\x03\x02" +
        "\x02\x02\u099B\u099A\x03\x02\x02\x02\u099C\u0271\x03\x02\x02\x02\u099D" +
        "\u099E\x05\u026C\u0137\x02\u099E\u099F\x05\u0274\u013B\x02\u099F\u0273" +
        "\x03\x02\x02\x02\u09A0\u09A2\x05\u0276\u013C\x02\u09A1\u09A0\x03\x02\x02" +
        "\x02\u09A2\u09A5\x03\x02\x02\x02\u09A3\u09A1\x03\x02\x02\x02\u09A3\u09A4" +
        "\x03\x02\x02\x02\u09A4\u0275\x03\x02\x02\x02\u09A5\u09A3\x03\x02\x02\x02" +
        "\u09A6\u09A7\x07\xD2\x02\x02\u09A7\u09A8\x05\u026C\u0137\x02\u09A8\u0277" +
        "\x03\x02\x02\x02\u09A9\u09AA\x05\u026C\u0137\x02\u09AA\u09AB\x05\u027A" +
        "\u013E\x02\u09AB\u0279\x03\x02\x02\x02\u09AC\u09AE\x05\u027C\u013F\x02" +
        "\u09AD\u09AC\x03\x02\x02\x02\u09AE\u09B1\x03\x02\x02\x02\u09AF\u09AD\x03" +
        "\x02\x02\x02\u09AF\u09B0\x03\x02\x02\x02\u09B0\u027B\x03\x02\x02\x02\u09B1" +
        "\u09AF\x03\x02\x02\x02\u09B2\u09B3\x07\x85\x02\x02\u09B3\u09B4\x05\u026C" +
        "\u0137\x02\u09B4\u027D\x03\x02\x02\x02\u09B5\u09B6\x07\xCF\x02\x02\u09B6" +
        "\u09BC\x07\xE6\x02\x02\u09B7\u09B8\x07\xCF\x02\x02\u09B8\u09B9\x07\xDF" +
        "\x02\x02\u09B9\u09BA\x07\xE6\x02\x02\u09BA\u09BC\x07\xD0\x02\x02\u09BB" +
        "\u09B5\x03\x02\x02\x02\u09BB\u09B7\x03\x02\x02\x02\u09BC\u027F\x03\x02" +
        "\x02\x02\u09BD\u09BE\x07\x9A\x02\x02\u09BE\u09BF\x07\xDF\x02\x02\u09BF" +
        "\u09C0\x05\u02DE\u0170\x02\u09C0\u09C1\x07\xD0\x02\x02\u09C1\u09C2\x05" +
        "\u0264\u0133\x02\u09C2\u0281\x03\x02\x02\x02\u09C3\u09C4\x07\xD3\x02\x02" +
        "\u09C4\u09C5\x05\u0284\u0143\x02\u09C5\u0283\x03\x02\x02\x02\u09C6\u09C7" +
        "\x05\u0366\u01B4\x02\u09C7\u0285\x03\x02\x02\x02\u09C8\u09C9\x05\u0364" +
        "\u01B3\x02\u09C9\u0287\x03\x02\x02\x02\u09CA\u09CB\x07\xC2\x02\x02\u09CB" +
        "\u09CC\x07\xDF\x02\x02\u09CC\u09CD\x05\u02DE\u0170\x02\u09CD\u09CE\x07" +
        "\xD0\x02\x02\u09CE\u09CF\x05\u020C\u0107\x02\u09CF\u0289\x03\x02\x02\x02" +
        "\u09D0\u09D1\x05\u035A\u01AE\x02\u09D1\u09D2\x05\u028C\u0147\x02\u09D2" +
        "\u028B\x03\x02\x02\x02\u09D3\u09D4\x07b\x02\x02\u09D4\u09D5\x05\u028E" +
        "\u0148\x02\u09D5\u09D7\x07T\x02\x02\u09D6\u09D8\x05\b\x05\x02\u09D7\u09D6" +
        "\x03\x02\x02\x02\u09D7\u09D8\x03\x02\x02\x02\u09D8\u028D\x03\x02\x02\x02" +
        "\u09D9\u09DB\x05\u0290\u0149\x02\u09DA\u09D9\x03\x02\x02\x02\u09DB\u09DE" +
        "\x03\x02\x02\x02\u09DC\u09DA\x03\x02\x02\x02\u09DC\u09DD\x03\x02\x02\x02" +
        "\u09DD\u028F\x03\x02\x02\x02\u09DE\u09DC\x03\x02\x02\x02\u09DF\u09EA\x05" +
        "\u029C\u014F\x02\u09E0\u09EA\x05\u02AE\u0158\x02\u09E1\u09EA\x05\u02A2" +
        "\u0152\x02\u09E2\u09EA\x05\u0292\u014A\x02\u09E3\u09EA\x05<\x1F\x02\u09E4" +
        "\u09EA\x05B\"\x02\u09E5\u09EA\x05F$\x02\u09E6\u09EA\x05J&\x02\u09E7\u09EA" +
        "\x05N(\x02\u09E8\u09EA\x05V,\x02\u09E9\u09DF\x03\x02\x02\x02\u09E9\u09E0" +
        "\x03\x02\x02\x02\u09E9\u09E1\x03\x02\x02\x02\u09E9\u09E2\x03\x02\x02\x02" +
        "\u09E9\u09E3\x03\x02\x02\x02\u09E9\u09E4\x03\x02\x02\x02\u09E9\u09E5\x03" +
        "\x02\x02\x02\u09E9\u09E6\x03\x02\x02\x02\u09E9\u09E7\x03\x02\x02\x02\u09E9" +
        "\u09E8\x03\x02\x02\x02\u09EA\u0291\x03\x02\x02\x02\u09EB\u09ED\x07:\x02" +
        "\x02\u09EC\u09EE\x05\u0294\u014B\x02\u09ED\u09EC\x03\x02\x02\x02\u09ED" +
        "\u09EE\x03\x02\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09F0\x05\u028E" +
        "\u0148\x02\u09F0\u09F2\x07P\x02\x02\u09F1\u09F3\x05\u0296\u014C\x02\u09F2" +
        "\u09F1\x03\x02\x02\x02\u09F2\u09F3\x03\x02\x02\x02\u09F3\u09F5\x03\x02" +
        "\x02\x02\u09F4\u09F6\x05\b\x05\x02\u09F5\u09F4\x03\x02\x02\x02\u09F5\u09F6" +
        "\x03\x02\x02\x02\u09F6\u0293\x03\x02\x02\x02\u09F7\u09F8\x05\u0298\u014D" +
        "\x02\u09F8\u0295\x03\x02\x02\x02\u09F9\u09FA\x05\u0298\u014D\x02\u09FA" +
        "\u0297\x03\x02\x02\x02\u09FB\u09FC\x07\xD1\x02\x02\u09FC\u09FD\x05\u029A" +
        "\u014E\x02\u09FD\u0299\x03\x02\x02\x02\u09FE\u09FF\x05\u0364\u01B3\x02" +
        "\u09FF\u029B\x03\x02\x02\x02\u0A00\u0A02\x05\u029E\u0150\x02\u0A01\u0A03" +
        "\x05\u02A0\u0151\x02\u0A02\u0A01\x03\x02\x02\x02\u0A02\u0A03\x03\x02\x02" +
        "\x02\u0A03\u029D\x03\x02\x02\x02\u0A04\u0A05\x07f\x02\x02\u0A05\u0A06" +
        "\x07\xDF\x02\x02\u0A06\u0A07\x05\u02BA\u015E\x02\u0A07\u0A08\x07\xD0\x02" +
        "\x02\u0A08\u0A09\x05\u0290\u0149\x02\u0A09\u029F\x03\x02\x02\x02\u0A0A" +
        "\u0A0B\x07O\x02\x02\u0A0B\u0A0C\x05\u0290\u0149\x02\u0A0C\u02A1\x03\x02" +
        "\x02\x02\u0A0D\u0A13\x05\u02A4\u0153\x02\u0A0E\u0A13\x05\u02A6\u0154\x02" +
        "\u0A0F\u0A13\x05\u02A8\u0155\x02\u0A10\u0A13\x05\u02AA\u0156\x02\u0A11" +
        "\u0A13\x05\u02AC\u0157\x02\u0A12\u0A0D\x03\x02\x02\x02\u0A12\u0A0E\x03" +
        "\x02\x02\x02\u0A12\u0A0F\x03\x02\x02\x02\u0A12\u0A10\x03\x02\x02\x02\u0A12" +
        "\u0A11\x03\x02\x02\x02\u0A13\u02A3\x03\x02\x02\x02\u0A14\u0A15\x07_\x02" +
        "\x02\u0A15\u0A16\x05\u0290\u0149\x02\u0A16\u02A5\x03\x02\x02\x02\u0A17" +
        "\u0A18\x07\x9A\x02\x02\u0A18\u0A19\x07\xDF\x02\x02\u0A19\u0A1A\x05\u02CA" +
        "\u0166\x02\u0A1A\u0A1B\x07\xD0\x02\x02\u0A1B\u0A1C\x05\u0290\u0149\x02" +
        "\u0A1C\u02A7\x03\x02\x02\x02\u0A1D\u0A1E\x07\xC6\x02\x02\u0A1E\u0A1F\x07" +
        "\xDF\x02\x02\u0A1F\u0A20\x05\u02CA\u0166\x02\u0A20\u0A21\x07\xD0\x02\x02" +
        "\u0A21\u0A22\x05\u0290\u0149\x02\u0A22\u02A9\x03\x02\x02\x02\u0A23\u0A24" +
        "\x07M\x02\x02\u0A24\u0A25\x05\u0290\u0149\x02\u0A25\u0A26\x07\xC6\x02" +
        "\x02\u0A26\u0A27\x07\xDF\x02\x02\u0A27\u0A28\x05\u02CA\u0166\x02\u0A28" +
        "\u0A29\x07\xD0\x02\x02\u0A29\u0A2A\x05\b\x05\x02\u0A2A\u02AB\x03\x02\x02" +
        "\x02\u0A2B\u0A2C\x07]\x02\x02\u0A2C\u0A2D\x07\xDF\x02\x02\u0A2D\u0A2E" +
        "\x05\u02C8\u0165\x02\u0A2E\u0A2F\x05\b\x05\x02\u0A2F\u0A30\x05\u02CA\u0166" +
        "\x02\u0A30\u0A32\x05\b\x05\x02\u0A31\u0A33\x05\u02CC\u0167\x02\u0A32\u0A31" +
        "\x03\x02\x02\x02\u0A32\u0A33\x03\x02\x02\x02\u0A33\u0A34\x03\x02\x02\x02" +
        "\u0A34\u0A35\x07\xD0\x02\x02\u0A35\u0A36\x05\u0290\u0149\x02\u0A36\u02AD" +
        "\x03\x02\x02\x02\u0A37\u0A38\x05\x06\x04\x02\u0A38\u0A39\x07\xDF\x02\x02" +
        "\u0A39\u0A3A\x05\u02D4\u016B\x02\u0A3A\u0A3B\x07\xD0\x02\x02\u0A3B\u0A3C" +
        "\x05\u02B0\u0159\x02\u0A3C\u0A3D\x07Q\x02\x02\u0A3D\u02AF\x03\x02\x02" +
        "\x02\u0A3E\u0A40\x05\u02B2\u015A\x02\u0A3F\u0A3E\x03\x02\x02\x02\u0A40" +
        "\u0A43\x03\x02\x02\x02\u0A41\u0A3F\x03\x02\x02\x02\u0A41\u0A42\x03\x02" +
        "\x02\x02\u0A42\u02B1\x03\x02\x02\x02\u0A43\u0A41\x03\x02\x02\x02\u0A44" +
        "\u0A45\x05\u02D6\u016C\x02\u0A45\u0A46\x07\xD1\x02\x02\u0A46\u0A47\x05" +
        "\u0290\u0149\x02\u0A47\u0A4E\x03\x02\x02\x02\u0A48\u0A4A\x07H\x02\x02" +
        "\u0A49\u0A4B\x07\xD1\x02\x02\u0A4A\u0A49\x03\x02\x02\x02\u0A4A\u0A4B\x03" +
        "\x02\x02\x02\u0A4B\u0A4C\x03\x02\x02\x02\u0A4C\u0A4E\x05\u0290\u0149\x02" +
        "\u0A4D\u0A44\x03\x02\x02\x02\u0A4D\u0A48\x03\x02\x02\x02\u0A4E\u02B3\x03" +
        "\x02\x02\x02\u0A4F\u0A51\x05\u02B6\u015C\x02\u0A50\u0A52\x05\u02B8\u015D" +
        "\x02\u0A51\u0A50\x03\x02\x02\x02\u0A51\u0A52\x03\x02\x02\x02\u0A52\u02B5" +
        "\x03\x02\x02\x02\u0A53\u0A54\x07f\x02\x02\u0A54\u0A55\x07\xDF\x02\x02" +
        "\u0A55\u0A56\x05\u02BA\u015E\x02\u0A56\u0A57\x07\xD0\x02\x02\u0A57\u0A58" +
        "\x05\u020C\u0107\x02\u0A58\u02B7\x03\x02\x02\x02\u0A59\u0A5A\x07O\x02" +
        "\x02\u0A5A\u0A5B\x05\u020C\u0107\x02\u0A5B\u02B9\x03\x02\x02\x02\u0A5C" +
        "\u0A5D\x05\u02DE\u0170\x02\u0A5D\u02BB\x03\x02\x02\x02\u0A5E\u0A64\x05" +
        "\u02BE\u0160\x02\u0A5F\u0A64\x05\u02C0\u0161\x02\u0A60\u0A64\x05\u02C2" +
        "\u0162\x02\u0A61\u0A64\x05\u02C4\u0163\x02\u0A62\u0A64\x05\u02C6\u0164" +
        "\x02\u0A63\u0A5E\x03\x02\x02\x02\u0A63\u0A5F\x03\x02\x02\x02\u0A63\u0A60" +
        "\x03\x02\x02\x02\u0A63\u0A61\x03\x02\x02\x02\u0A63\u0A62\x03\x02\x02\x02" +
        "\u0A64\u02BD\x03\x02\x02\x02\u0A65\u0A66\x07_\x02\x02\u0A66\u0A67\x05" +
        "\u020C\u0107\x02\u0A67\u02BF\x03\x02\x02\x02\u0A68\u0A69\x07\x9A\x02\x02" +
        "\u0A69\u0A6A\x07\xDF\x02\x02\u0A6A\u0A6B\x05\u02CA\u0166\x02\u0A6B\u0A6C" +
        "\x07\xD0\x02\x02\u0A6C\u0A6D\x05\u020C\u0107\x02\u0A6D\u02C1\x03\x02\x02" +
        "\x02\u0A6E\u0A6F\x07\xC6\x02\x02\u0A6F\u0A70\x07\xDF\x02\x02\u0A70\u0A71" +
        "\x05\u02CA\u0166\x02\u0A71\u0A72\x07\xD0\x02\x02\u0A72\u0A73\x05\u020C" +
        "\u0107\x02\u0A73\u02C3\x03\x02\x02\x02\u0A74\u0A75\x07M\x02\x02\u0A75" +
        "\u0A76\x05\u020C\u0107\x02\u0A76\u0A77\x07\xC6\x02\x02\u0A77\u0A78\x07" +
        "\xDF\x02\x02\u0A78\u0A79\x05\u02CA\u0166\x02\u0A79\u0A7A\x07\xD0\x02\x02" +
        "\u0A7A\u0A7B\x05\b\x05\x02\u0A7B\u02C5\x03\x02\x02\x02\u0A7C\u0A7D\x07" +
        "]\x02\x02\u0A7D\u0A7E\x07\xDF\x02\x02\u0A7E\u0A7F\x05\u02C8\u0165\x02" +
        "\u0A7F\u0A80\x05\b\x05\x02\u0A80\u0A81\x05\u02CA\u0166\x02\u0A81\u0A83" +
        "\x05\b\x05\x02\u0A82\u0A84\x05\u02CC\u0167\x02\u0A83\u0A82\x03\x02\x02" +
        "\x02\u0A83\u0A84\x03\x02\x02\x02\u0A84\u0A85\x03\x02\x02\x02\u0A85\u0A86" +
        "\x07\xD0\x02\x02\u0A86\u0A87\x05\u020C\u0107\x02\u0A87\u02C7\x03\x02\x02" +
        "\x02\u0A88\u0A8B\x05\u025E\u0130\x02\u0A89\u0A8B\x05\u0254\u012B\x02\u0A8A" +
        "\u0A88\x03\x02\x02\x02\u0A8A\u0A89\x03\x02\x02\x02\u0A8B\u02C9\x03\x02" +
        "\x02\x02\u0A8C\u0A8D\x05\u02DE\u0170\x02\u0A8D\u02CB\x03\x02\x02\x02\u0A8E" +
        "\u0A93\x05\u0254\u012B\x02\u0A8F\u0A93\x05\u025A\u012E\x02\u0A90\u0A93" +
        "\x05\u0258\u012D\x02\u0A91\u0A93\x05\u025C\u012F\x02\u0A92\u0A8E\x03\x02" +
        "\x02\x02\u0A92\u0A8F\x03\x02\x02\x02\u0A92\u0A90\x03\x02\x02\x02\u0A92" +
        "\u0A91\x03\x02\x02\x02\u0A93\u02CD\x03\x02\x02\x02\u0A94\u0A95\x05\x06" +
        "\x04\x02\u0A95\u0A96\x07\xDF\x02\x02\u0A96\u0A97\x05\u02D4\u016B\x02\u0A97" +
        "\u0A98\x07\xD0\x02\x02\u0A98\u0A99\x05\u02D0\u0169\x02\u0A99\u0A9A\x07" +
        "Q\x02\x02\u0A9A\u02CF\x03\x02\x02\x02\u0A9B\u0A9D\x05\u02D2\u016A\x02" +
        "\u0A9C\u0A9B\x03\x02\x02\x02\u0A9D\u0AA0\x03\x02\x02\x02\u0A9E\u0A9C\x03" +
        "\x02\x02\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F\u02D1\x03\x02\x02\x02\u0AA0" +
        "\u0A9E\x03\x02\x02\x02\u0AA1\u0AA2\x05\u02D6\u016C\x02\u0AA2\u0AA3\x07" +
        "\xD1\x02\x02\u0AA3\u0AA4\x05\u020C\u0107\x02\u0AA4\u0AAB\x03\x02\x02\x02" +
        "\u0AA5\u0AA7\x07H\x02\x02\u0AA6\u0AA8\x07\xD1\x02\x02\u0AA7\u0AA6\x03" +
        "\x02\x02\x02\u0AA7\u0AA8\x03\x02\x02\x02\u0AA8\u0AA9\x03\x02\x02\x02\u0AA9" +
        "\u0AAB\x05\u020C\u0107\x02\u0AAA\u0AA1\x03\x02\x02\x02\u0AAA\u0AA5\x03" +
        "\x02\x02\x02\u0AAB\u02D3\x03\x02\x02\x02\u0AAC\u0AAD\x05\u02DE\u0170\x02" +
        "\u0AAD\u02D5\x03\x02\x02\x02\u0AAE\u0AAF\x05\u02D8\u016D\x02\u0AAF\u0AB0" +
        "\x05\u02DC\u016F\x02\u0AB0\u02D7\x03\x02\x02\x02\u0AB1\u0AB2\x05\u02DE" +
        "\u0170\x02\u0AB2\u02D9\x03\x02\x02\x02\u0AB3\u0AB4\x07\xD2\x02\x02\u0AB4" +
        "\u0AB5\x05\u02D8\u016D\x02\u0AB5\u02DB\x03\x02\x02\x02\u0AB6\u0AB8\x05" +
        "\u02DA\u016E\x02\u0AB7\u0AB6\x03\x02\x02\x02\u0AB8\u0ABB\x03\x02\x02\x02" +
        "\u0AB9\u0AB7\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02\x02\x02\u0ABA\u02DD\x03" +
        "\x02\x02\x02\u0ABB\u0AB9\x03\x02\x02\x02\u0ABC\u0AC4\x05\u02E6\u0174\x02" +
        "\u0ABD\u0AC4\x05\u02E8\u0175\x02\u0ABE\u0AC4\x05\u02EA\u0176\x02\u0ABF" +
        "\u0AC4\x05\u02EC\u0177\x02\u0AC0\u0AC4\x05\u02EE\u0178\x02\u0AC1\u0AC4" +
        "\x05\u02F0\u0179\x02\u0AC2\u0AC4\x05\u02E0\u0171\x02\u0AC3\u0ABC\x03\x02" +
        "\x02\x02\u0AC3\u0ABD\x03\x02\x02\x02\u0AC3\u0ABE\x03\x02\x02\x02\u0AC3" +
        "\u0ABF\x03\x02\x02\x02\u0AC3\u0AC0\x03\x02\x02\x02\u0AC3\u0AC1\x03\x02" +
        "\x02\x02\u0AC3\u0AC2\x03\x02\x02\x02\u0AC4\u02DF\x03\x02\x02\x02\u0AC5" +
        "\u0ACA\x07\xCE\x02\x02\u0AC6\u0ACA\x05\u02E4\u0173\x02\u0AC7\u0ACA\x05" +
        "\u02F4\u017B\x02\u0AC8\u0ACA\x05\u02F2\u017A\x02\u0AC9\u0AC5\x03\x02\x02" +
        "\x02\u0AC9\u0AC6\x03\x02\x02\x02\u0AC9\u0AC7\x03\x02\x02\x02\u0AC9\u0AC8" +
        "\x03\x02\x02\x02\u0ACA\u02E1\x03\x02\x02\x02\u0ACB\u0ACC\x05\u02E4\u0173" +
        "\x02\u0ACC\u0ACD\x05\xBC_\x02\u0ACD\u02E3\x03\x02\x02\x02\u0ACE\u0ADA" +
        "\x05\u0376\u01BC\x02\u0ACF\u0ADA\x05\u0324\u0193\x02\u0AD0\u0ADA\x05\u0326" +
        "\u0194\x02\u0AD1\u0ADA\x05\u030C\u0187\x02\u0AD2\u0ADA\x05\u0312\u018A" +
        "\x02\u0AD3\u0ADA\x05\u0316\u018C\x02\u0AD4\u0ADA\x05\u0318\u018D\x02\u0AD5" +
        "\u0ADA\x05\u031E\u0190\x02\u0AD6\u0ADA\x05\u031C\u018F\x02\u0AD7\u0ADA" +
        "\x05\u030A\u0186\x02\u0AD8\u0ADA\x05\u0322\u0192\x02\u0AD9\u0ACE\x03\x02" +
        "\x02\x02\u0AD9\u0ACF\x03\x02\x02\x02\u0AD9\u0AD0\x03\x02\x02\x02\u0AD9" +
        "\u0AD1\x03\x02\x02\x02\u0AD9\u0AD2\x03\x02\x02\x02\u0AD9\u0AD3\x03\x02" +
        "\x02\x02\u0AD9\u0AD4\x03\x02\x02\x02\u0AD9\u0AD5\x03\x02\x02\x02\u0AD9" +
        "\u0AD6\x03\x02\x02\x02\u0AD9\u0AD7\x03\x02\x02\x02\u0AD9\u0AD8\x03\x02" +
        "\x02\x02\u0ADA\u02E5\x03\x02\x02\x02\u0ADB\u0ADC\x05\n\x06\x02\u0ADC\u0ADD" +
        "\x05\u02DE\u0170\x02\u0ADD\u02E7\x03\x02\x02\x02\u0ADE\u0ADF\x05\u02E0" +
        "\u0171\x02\u0ADF\u0AE0\x05\x0E\b\x02\u0AE0\u02E9\x03\x02\x02\x02\u0AE1" +
        "\u0AE2\x05\x0E\b\x02\u0AE2\u0AE3\x05\u02E0\u0171\x02\u0AE3\u02EB\x03\x02" +
        "\x02\x02\u0AE4\u0AE5\x05\u02E0\u0171\x02\u0AE5\u0AE6\x05\f\x07\x02\u0AE6" +
        "\u0AE7\x05\u02DE\u0170\x02\u0AE7\u02ED\x03\x02\x02\x02\u0AE8\u0AE9\x05" +
        "\u02E0\u0171\x02\u0AE9\u0AEA\x07\xE1\x02\x02\u0AEA\u0AEB\x05\u02DE\u0170" +
        "\x02\u0AEB\u0AEC\x07\xD1\x02\x02\u0AEC\u0AED\x05\u02DE\u0170\x02\u0AED" +
        "\u02EF\x03\x02\x02\x02\u0AEE\u0AEF\x05\u02E0\u0171\x02\u0AEF\u0AF0\x07" +
        "\xD1\x02\x02\u0AF0\u0AF1\x05\u02DE\u0170\x02\u0AF1\u0AF2\x07\xD1\x02\x02" +
        "\u0AF2\u0AF3\x05\u02DE\u0170\x02\u0AF3\u02F1\x03\x02\x02\x02\u0AF4\u0AF5" +
        "\x07\xE2\x02\x02\u0AF5\u0AF6\x07\xDD\x02\x02\u0AF6\u0AFB\x05\u02DE\u0170" +
        "\x02\u0AF7\u0AF8\x07\xD2\x02\x02\u0AF8\u0AFA\x05\u02DE\u0170\x02\u0AF9" +
        "\u0AF7\x03\x02\x02\x02\u0AFA\u0AFD\x03\x02\x02\x02\u0AFB\u0AF9\x03\x02" +
        "\x02\x02\u0AFB\u0AFC\x03\x02\x02\x02\u0AFC\u0AFE\x03\x02\x02\x02\u0AFD" +
        "\u0AFB\x03\x02\x02\x02\u0AFE\u0AFF\x07\xE4\x02\x02\u0AFF\u0B08\x03\x02" +
        "\x02\x02\u0B00\u0B01\x07\xE2\x02\x02\u0B01\u0B02\x07\xDD\x02\x02\u0B02" +
        "\u0B03\x05\u02DE\u0170\x02\u0B03\u0B04\x07\xE4\x02\x02\u0B04\u0B08\x03" +
        "\x02\x02\x02\u0B05\u0B06\x07\xDD\x02\x02\u0B06\u0B08\x07\xE4\x02\x02\u0B07" +
        "\u0AF4\x03\x02\x02\x02\u0B07\u0B00\x03\x02\x02\x02\u0B07\u0B05\x03\x02" +
        "\x02\x02\u0B08\u02F3\x03\x02\x02\x02\u0B09\u0B0A\x07\xE2\x02\x02\u0B0A" +
        "\u0B0B\x07\xDD\x02\x02\u0B0B\u0B0C\x05\u02FC\u017F\x02\u0B0C\u0B0D\x07" +
        "\xE4\x02\x02\u0B0D\u02F5\x03\x02\x02\x02\u0B0E\u0B0F\x07H\x02\x02\u0B0F" +
        "\u0B10\x07\xD1\x02\x02\u0B10\u0B16\x05\u02DE\u0170\x02\u0B11\u0B12\x05" +
        "\u0366\u01B4\x02\u0B12\u0B13\x07\xD1\x02\x02\u0B13\u0B14\x05\u02DE\u0170" +
        "\x02\u0B14\u0B16\x03\x02\x02\x02\u0B15\u0B0E\x03\x02\x02\x02\u0B15\u0B11" +
        "\x03\x02\x02\x02\u0B16\u02F7\x03\x02\x02\x02\u0B17\u0B18\x07\xD2\x02\x02" +
        "\u0B18\u0B19\x05\u02F6\u017C\x02\u0B19\u02F9\x03\x02\x02\x02\u0B1A\u0B1C" +
        "\x05\u02F8\u017D\x02\u0B1B\u0B1A\x03\x02\x02\x02\u0B1C\u0B1F\x03\x02\x02" +
        "\x02\u0B1D\u0B1B\x03\x02\x02\x02\u0B1D\u0B1E\x03\x02\x02\x02\u0B1E\u02FB" +
        "\x03\x02\x02\x02\u0B1F\u0B1D\x03\x02\x02\x02\u0B20\u0B21\x05\u02F6\u017C" +
        "\x02\u0B21\u0B22\x05\u02FA\u017E\x02\u0B22\u02FD\x03\x02\x02\x02\u0B23" +
        "\u0B24\x05\u0306\u0184\x02\u0B24\u0B25\x07\xE2\x02\x02\u0B25\u0B26\x05" +
        "\u02DE\u0170\x02\u0B26\u02FF\x03\x02\x02\x02\u0B27\u0B28\x05\u0376\u01BC" +
        "\x02\u0B28\u0B29\x07\xE2\x02\x02\u0B29\u0B2A\x05\u02DE\u0170\x02\u0B2A" +
        "\u0301\x03\x02\x02\x02\u0B2B\u0B2C\t\t\x02\x02\u0B2C\u0B2D\x07\xE2\x02" +
        "\x02\u0B2D\u0B2E\x05\u02DE\u0170\x02\u0B2E\u0303\x03\x02\x02\x02\u0B2F" +
        "\u0B30\x07\xE2\x02\x02\u0B30\u0B31\x05\u02DE\u0170\x02\u0B31\u0305\x03" +
        "\x02\x02\x02\u0B32\u0B35\x07o\x02\x02\u0B33\u0B35\x05\xB4[\x02\u0B34\u0B32" +
        "\x03\x02\x02\x02\u0B34\u0B33\x03\x02\x02\x02\u0B35\u0307\x03\x02\x02\x02" +
        "\u0B36\u0B37\x05\u0364\u01B3\x02\u0B37\u0309\x03\x02\x02\x02\u0B38\u0B3D" +
        "\x05\u02FE\u0180\x02\u0B39\u0B3D\x05\u0300\u0181\x02\u0B3A\u0B3D\x05\u0302" +
        "\u0182\x02\u0B3B\u0B3D\x05\u0304\u0183\x02\u0B3C\u0B38\x03\x02\x02\x02" +
        "\u0B3C\u0B39\x03\x02\x02\x02\u0B3C\u0B3A\x03\x02\x02\x02\u0B3C\u0B3B\x03" +
        "\x02\x02\x02\u0B3D\u030B\x03\x02\x02\x02\u0B3E\u0B3F\x05\u030E\u0188\x02" +
        "\u0B3F\u0B40\x05\u035A\u01AE\x02\u0B40\u0B41\x05\u0310\u0189\x02\u0B41" +
        "\u030D\x03\x02\x02\x02\u0B42\u0B43\x05\u0366\u01B4\x02\u0B43\u030F\x03" +
        "\x02\x02\x02\u0B44\u0B46\x07\xDF\x02\x02\u0B45\u0B47\x05\u014C\xA7\x02" +
        "\u0B46\u0B45\x03\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47\u0B48\x03" +
        "\x02\x02\x02\u0B48\u0B49\x07\xD0\x02\x02\u0B49\u0311\x03\x02\x02\x02\u0B4A" +
        "\u0B4C\x05\u0314\u018B\x02\u0B4B\u0B4D\x05\u0310\u0189\x02\u0B4C\u0B4B" +
        "\x03\x02\x02\x02\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\u0313\x03\x02\x02\x02" +
        "\u0B4E\u0B4F\x07\xCB\x02\x02\u0B4F\u0315\x03\x02\x02\x02\u0B50\u0B51\x05" +
        "\u030C\u0187\x02\u0B51\u0317\x03\x02\x02\x02\u0B52\u0B53\x05\u031A\u018E" +
        "\x02\u0B53\u0B54\x05\u035A\u01AE\x02\u0B54\u0B55\x05\u0310\u0189\x02\u0B55" +
        "\u0319\x03\x02\x02\x02\u0B56\u0B57\x05\u0320\u0191\x02\u0B57\u031B\x03" +
        "\x02\x02\x02\u0B58\u0B5A\x05\u0366\u01B4\x02\u0B59\u0B5B\x05\xB8]\x02" +
        "\u0B5A\u0B59\x03\x02\x02\x02\u0B5A\u0B5B\x03\x02\x02\x02\u0B5B\u031D\x03" +
        "\x02\x02\x02\u0B5C\u0B5E\x05\u0320\u0191\x02\u0B5D\u0B5F\x05\xB8]\x02" +
        "\u0B5E\u0B5D\x03\x02\x02\x02\u0B5E\u0B5F\x03\x02\x02\x02\u0B5F\u031F\x03" +
        "\x02\x02\x02\u0B60\u0B61\x05\u0364\u01B3\x02\u0B61\u0B62\x07\xD6\x02\x02" +
        "\u0B62\u0B63\x05\u0366\u01B4\x02\u0B63\u0321\x03\x02\x02\x02\u0B64\u0B65" +
        "\x07\xDF\x02\x02\u0B65\u0B66\x05\u02DE\u0170\x02\u0B66\u0B67\x07\xD0\x02" +
        "\x02\u0B67\u0323\x03\x02\x02\x02\u0B68\u0B69\x07\xDD\x02\x02\u0B69\u0B6A" +
        "\x05\u02DE\u0170\x02\u0B6A\u0B6B\x05\u032A\u0196\x02\u0B6B\u0B6C\x07\xE4" +
        "\x02\x02\u0B6C\u0325\x03\x02\x02\x02\u0B6D\u0B6E\x07\xDD\x02\x02\u0B6E" +
        "\u0B6F\x05\u02DE\u0170\x02\u0B6F\u0B70\x05\u0324\u0193\x02\u0B70\u0B71" +
        "\x07\xE4\x02\x02\u0B71\u0327\x03\x02\x02\x02\u0B72\u0B73\x07\xD2\x02\x02" +
        "\u0B73\u0B75\x05\u02DE\u0170\x02\u0B74\u0B72\x03\x02\x02\x02\u0B75\u0B76" +
        "\x03\x02\x02\x02\u0B76\u0B74\x03\x02\x02\x02\u0B76\u0B77\x03\x02\x02\x02" +
        "\u0B77\u0329\x03\x02\x02\x02\u0B78\u0B79\x07\xD2\x02\x02\u0B79\u0B7B\x05" +
        "\u02DE\u0170\x02\u0B7A\u0B78\x03\x02\x02\x02\u0B7B\u0B7E\x03\x02\x02\x02" +
        "\u0B7C\u0B7A\x03\x02\x02\x02\u0B7C\u0B7D\x03\x02\x02\x02\u0B7D\u032B\x03" +
        "\x02";
    SysVerilogHDLParser._serializedATNSegment5 = "\x02\x02\u0B7E\u0B7C\x03\x02\x02\x02\u0B7F\u0B80\x07\xBC\x02\x02\u0B80" +
        "\u0B81\x05\u0330\u0199\x02\u0B81\u0B82\x05\u032E\u0198\x02\u0B82\u032D" +
        "\x03\x02\x02\x02\u0B83\u0B84\x05\u0364\u01B3\x02\u0B84\u032F\x03\x02\x02" +
        "\x02\u0B85\u0B89\x05\u0332\u019A\x02\u0B86\u0B89\x05\u0146\xA4\x02\u0B87" +
        "\u0B89\x05\u0138\x9D\x02\u0B88\u0B85\x03\x02\x02\x02\u0B88\u0B86\x03\x02" +
        "\x02\x02\u0B88\u0B87\x03\x02\x02\x02\u0B89\u0331\x03\x02\x02\x02\u0B8A" +
        "\u0B8D\x05\u0334\u019B\x02\u0B8B\u0B8D\x05\u0336\u019C\x02\u0B8C\u0B8A" +
        "\x03\x02\x02\x02\u0B8C\u0B8B\x03\x02\x02\x02\u0B8D\u0333\x03\x02\x02\x02" +
        "\u0B8E\u0B90\x05\u0336\u019C\x02\u0B8F\u0B91\t\t\x02\x02\u0B90\u0B8F\x03" +
        "\x02\x02\x02\u0B90\u0B91\x03\x02\x02\x02\u0B91\u0B93\x03\x02\x02\x02\u0B92" +
        "\u0B94\x05\xB8]\x02\u0B93\u0B92\x03\x02\x02\x02\u0B93\u0B94\x03\x02\x02" +
        "\x02\u0B94\u0335\x03\x02\x02\x02\u0B95\u0B9B\x07\x98\x02\x02\u0B96\u0B9B" +
        "\x07x\x02\x02\u0B97\u0B9B\x05\xF8}\x02\u0B98\u0B9B\x05\xCAf\x02\u0B99" +
        "\u0B9B\x05\xB4[\x02\u0B9A\u0B95\x03\x02\x02\x02\u0B9A\u0B96\x03\x02\x02" +
        "\x02\u0B9A\u0B97\x03\x02\x02\x02\u0B9A\u0B98\x03\x02\x02\x02\u0B9A\u0B99" +
        "\x03\x02\x02\x02\u0B9B\u0337\x03\x02\x02\x02\u0B9C\u0B9F\x07`\x02\x02" +
        "\u0B9D\u0B9E\x07\xD1\x02\x02\u0B9E\u0BA0\x05\u033C\u019F\x02\u0B9F\u0B9D" +
        "\x03\x02\x02\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0BA1\x03\x02\x02\x02" +
        "\u0BA1\u0BA2\x05\u0340\u01A1\x02\u0BA2\u0BA3\x05\u020A\u0106\x02\u0BA3" +
        "\u0BA5\x05\u0346\u01A4\x02\u0BA4\u0BA6\x05\u033E\u01A0\x02\u0BA5\u0BA4" +
        "\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02\x02\x02\u0BA6\u0339\x03\x02\x02\x02" +
        "\u0BA7\u0BAA\x07:\x02\x02\u0BA8\u0BA9\x07\xD1\x02\x02\u0BA9\u0BAB\x05" +
        "\u033C\u019F\x02\u0BAA\u0BA8\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02\x02\x02" +
        "\u0BAB\u0BAC\x03\x02\x02\x02\u0BAC\u0BAD\x05\u0340\u01A1\x02\u0BAD\u0BAE" +
        "\x05\u020A\u0106\x02\u0BAE\u0BB0\x07P\x02\x02\u0BAF\u0BB1\x05\u033E\u01A0" +
        "\x02\u0BB0\u0BAF\x03\x02\x02\x02\u0BB0\u0BB1\x03\x02\x02\x02\u0BB1\u033B" +
        "\x03\x02\x02\x02\u0BB2\u0BB3\x05\u0364\u01B3\x02\u0BB3\u033D\x03\x02\x02" +
        "\x02\u0BB4\u0BB5\x07\xD1\x02\x02\u0BB5\u0BB6\x05\u033C\u019F\x02\u0BB6" +
        "\u033F\x03\x02\x02\x02\u0BB7\u0BB9\x05\u0342\u01A2\x02\u0BB8\u0BB7\x03" +
        "\x02\x02\x02\u0BB9\u0BBC\x03\x02\x02\x02\u0BBA\u0BB8\x03\x02\x02\x02\u0BBA" +
        "\u0BBB\x03\x02\x02\x02\u0BBB\u0341\x03\x02\x02\x02\u0BBC\u0BBA\x03\x02" +
        "\x02\x02\u0BBD\u0BBE\x05\u0344\u01A3\x02\u0BBE\u0BBF\x05\b\x05\x02\u0BBF" +
        "\u0343\x03\x02\x02\x02\u0BC0\u0BCE\x05\xF4{\x02\u0BC1\u0BCE\x05\u0106" +
        "\x84\x02\u0BC2\u0BCE\x05\xF6|\x02\u0BC3\u0BCE\x05\xFA~\x02\u0BC4\u0BCE" +
        "\x05\xFC\x7F\x02\u0BC5\u0BCE\x05\xFE\x80\x02\u0BC6\u0BCE\x05h5\x02\u0BC7" +
        "\u0BCE\x05f4\x02\u0BC8\u0BCE\x05\u0100\x81\x02\u0BC9\u0BCE\x05\u0104\x83" +
        "\x02\u0BCA\u0BCE\x05\u0102\x82\x02\u0BCB\u0BCE\x05\u010C\x87\x02\u0BCC" +
        "\u0BCE\x05\u010A\x86\x02\u0BCD\u0BC0\x03\x02\x02\x02\u0BCD\u0BC1\x03\x02" +
        "\x02\x02\u0BCD\u0BC2\x03\x02\x02\x02\u0BCD\u0BC3\x03\x02\x02\x02\u0BCD" +
        "\u0BC4\x03\x02\x02\x02\u0BCD\u0BC5\x03\x02\x02\x02\u0BCD\u0BC6\x03\x02" +
        "\x02\x02\u0BCD\u0BC7\x03\x02\x02\x02\u0BCD\u0BC8\x03\x02\x02\x02\u0BCD" +
        "\u0BC9\x03\x02\x02\x02\u0BCD\u0BCA\x03\x02\x02\x02\u0BCD\u0BCB\x03\x02" +
        "\x02\x02\u0BCD\u0BCC\x03\x02\x02\x02\u0BCE\u0345\x03\x02\x02\x02\u0BCF" +
        "\u0BD0\t\x19\x02\x02\u0BD0\u0347\x03\x02\x02\x02\u0BD1\u0BD3\x078\x02" +
        "\x02\u0BD2\u0BD4\x05\xCCg\x02\u0BD3\u0BD2\x03\x02\x02\x02\u0BD3\u0BD4" +
        "\x03\x02\x02\x02\u0BD4\u0BD6\x03\x02\x02\x02\u0BD5\u0BD7\x05\u0170\xB9" +
        "\x02\u0BD6\u0BD5\x03\x02\x02\x02\u0BD6\u0BD7\x03\x02\x02\x02\u0BD7\u0BD8" +
        "\x03\x02\x02\x02\u0BD8\u0BD9\x05\u034A\u01A6\x02\u0BD9\u0BDA\x05\b\x05" +
        "\x02\u0BDA\u0349\x03\x02\x02\x02\u0BDB\u0BDC\x05\u0350\u01A9\x02\u0BDC" +
        "\u0BDD\x05\u034C\u01A7\x02\u0BDD\u034B\x03\x02\x02\x02\u0BDE\u0BE0\x05" +
        "\u034E\u01A8\x02\u0BDF\u0BDE\x03\x02\x02\x02\u0BE0\u0BE3\x03\x02\x02\x02" +
        "\u0BE1\u0BDF\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\u034D\x03" +
        "\x02\x02\x02\u0BE3\u0BE1\x03\x02\x02\x02\u0BE4\u0BE5\x07\xD2\x02\x02\u0BE5" +
        "\u0BE6\x05\u0350\u01A9\x02\u0BE6\u034F\x03\x02\x02\x02\u0BE7\u0BE8\x05" +
        "\u024A\u0126\x02\u0BE8\u0BE9\x07\xD7\x02\x02\u0BE9\u0BEA\x05\u02DE\u0170" +
        "\x02\u0BEA\u0351\x03\x02\x02\x02\u0BEB\u0BEC\x07k\x02\x02\u0BEC\u0BED" +
        "\x05\u020C\u0107\x02\u0BED\u0353\x03\x02\x02\x02\u0BEE\u0BEF\x07\\\x02" +
        "\x02\u0BEF\u0BF0\x05\u020C\u0107\x02\u0BF0\u0355\x03\x02\x02\x02\u0BF1" +
        "\u0BF2\t\x1A\x02\x02\u0BF2\u0357\x03\x02\x02\x02\u0BF3\u0BF4\x05\u0356" +
        "\u01AC\x02\u0BF4\u0BF5\x05\u020C\u0107\x02\u0BF5\u0359\x03\x02\x02\x02" +
        "\u0BF6\u0BF8\x05\u035C\u01AF\x02\u0BF7\u0BF6\x03\x02\x02\x02\u0BF8\u0BFB" +
        "\x03\x02\x02\x02\u0BF9\u0BF7\x03\x02\x02\x02\u0BF9\u0BFA\x03\x02\x02\x02" +
        "\u0BFA\u035B\x03\x02\x02\x02\u0BFB\u0BF9\x03\x02\x02\x02\u0BFC\u0BFD\x07" +
        "\xDF\x02\x02\u0BFD\u0BFE\x07\xE6\x02\x02\u0BFE\u0BFF\x05\u0360\u01B1\x02" +
        "\u0BFF\u0C00\x05\u035E\u01B0\x02\u0C00\u0C01\x07\xE6\x02\x02\u0C01\u0C02" +
        "\x07\xD0\x02\x02\u0C02\u035D\x03\x02\x02\x02\u0C03\u0C04\x07\xD2\x02\x02" +
        "\u0C04\u0C06\x05\u0360\u01B1\x02\u0C05\u0C03\x03\x02\x02\x02\u0C06\u0C09" +
        "\x03\x02\x02\x02\u0C07\u0C05\x03\x02\x02\x02\u0C07\u0C08\x03\x02\x02\x02" +
        "\u0C08\u035F\x03\x02\x02\x02\u0C09\u0C07\x03\x02\x02\x02\u0C0A\u0C0B\x05" +
        "\u0362\u01B2\x02\u0C0B\u0C0C\x07\xD7\x02\x02\u0C0C\u0C0D\x05\u02DE\u0170" +
        "\x02\u0C0D\u0C10\x03\x02\x02\x02\u0C0E\u0C10\x05\u0362\u01B2\x02\u0C0F" +
        "\u0C0A\x03\x02\x02\x02\u0C0F\u0C0E\x03\x02\x02\x02\u0C10\u0361\x03\x02" +
        "\x02\x02\u0C11\u0C12\x05\u0364\u01B3\x02\u0C12\u0363\x03\x02\x02\x02\u0C13" +
        "\u0C14\t\x1B\x02\x02\u0C14\u0365\x03\x02\x02\x02\u0C15\u0C16\x05\u036C" +
        "\u01B7\x02\u0C16\u0C17\x05\u0368\u01B5\x02\u0C17\u0367\x03\x02\x02\x02" +
        "\u0C18\u0C1A\x05\u036A\u01B6\x02\u0C19\u0C18\x03\x02\x02\x02\u0C1A\u0C1D" +
        "\x03\x02\x02\x02\u0C1B\u0C19\x03\x02\x02\x02\u0C1B\u0C1C\x03\x02\x02\x02" +
        "\u0C1C\u0369\x03\x02\x02\x02\u0C1D\u0C1B\x03\x02\x02\x02\u0C1E\u0C1F\x07" +
        "\xD4\x02\x02\u0C1F\u0C20\x05\u036C\u01B7\x02\u0C20\u036B\x03\x02\x02\x02" +
        "\u0C21\u0C23\x05\u0364\u01B3\x02\u0C22\u0C24\x05\xB8]\x02\u0C23\u0C22" +
        "\x03\x02\x02\x02\u0C23\u0C24\x03\x02\x02\x02\u0C24\u036D\x03\x02\x02\x02" +
        "\u0C25\u0C26\x07\xAF\x02\x02\u0C26\u0C27\x07\xE9\x02\x02\u0C27\u0C28\x07" +
        "\xD9\x02\x02\u0C28\u0C29\x07\xE9\x02\x02\u0C29\u036F\x03\x02\x02\x02\u0C2A" +
        "\u0C2B\x07\xB2\x02\x02\u0C2B\u0C2C\x07\xE9\x02\x02\u0C2C\u0371\x03\x02" +
        "\x02\x02\u0C2D\u0C2E\x07\xB1\x02\x02\u0C2E\u0C2F\x07\xE9\x02\x02\u0C2F" +
        "\u0373\x03\x02\x02\x02\u0C30\u0C31\x07I\x02\x02\u0C31\u0C32\x05\xCAf\x02" +
        "\u0C32\u0375\x03\x02\x02\x02\u0C33\u0C36\x05\u0378\u01BD\x02\u0C34\u0C36" +
        "\x05\u037A\u01BE\x02\u0C35\u0C33\x03\x02\x02\x02\u0C35\u0C34\x03\x02\x02" +
        "\x02\u0C36\u0377\x03\x02\x02\x02\u0C37\u0C38\t\x1C\x02\x02\u0C38\u0379" +
        "\x03\x02\x02\x02\u0C39\u0C3A\t\x1D\x02\x02\u0C3A\u037B\x03\x02\x02\x02" +
        "\xFA\u0386\u0396\u039C\u03A2\u03A7\u03AB\u03AF\u03B3\u03B7\u03B9\u03C3" +
        "\u03C8\u03CB\u03D0\u03D6\u03DD\u03EA\u03F6\u0400\u040A\u0418\u0422\u043B" +
        "\u043F\u0443\u044C\u0453\u045C\u0462\u0468\u0470\u0479\u047C\u0489\u0496" +
        "\u049A\u04A2\u04AD\u04B2\u04C0\u04C4\u04C9\u04CE\u04D8\u04E0\u04EB\u04F0" +
        "\u04FD\u0500\u0503\u0509\u0516\u0520\u052A\u0537\u054C\u0551\u055C\u0561" +
        "\u057D\u0583\u0599\u05A1\u05A5\u05AF\u05B7\u05BB\u05C1\u05C4\u05C7\u05CA" +
        "\u05CD\u05D0\u05D3\u05D9\u05DC\u05E2\u05E5\u05ED\u05F0\u05F5\u05F9\u05FE" +
        "\u0602\u0616\u061A\u0629\u062C\u062F\u0632\u0636\u063D\u0649\u064F\u0656" +
        "\u065E\u0667\u066B\u0676\u067F\u0684\u068F\u0698\u069C\u06A6\u06B0\u06B7" +
        "\u06BF\u06C2\u06C5\u06CD\u06D5\u06DB\u06E3\u06E8\u06F2\u06FC\u06FF\u0703" +
        "\u070B\u0713\u0719\u071D\u0721\u0725\u0730\u0738\u0750\u0762\u076F\u0781" +
        "\u0788\u078F\u0792\u0799\u07A0\u07A7\u07AA\u07B1\u07B4\u07BF\u07DF\u07E5" +
        "\u07EB\u07F1\u07F7\u07FD\u0803\u0809\u0825\u082A\u082F\u0834\u0839\u083E" +
        "\u0843\u0848\u088D\u0893\u08AB\u08B1\u08B4\u08BE\u08C6\u08CB\u08CF\u08D4" +
        "\u08D8\u08DE\u08E7\u08EF\u090D\u0915\u091E\u0924\u092A\u0932\u0938\u0943" +
        "\u0949\u094F\u0956\u096A\u096F\u097D\u0982\u098E\u0995\u099B\u09A3\u09AF" +
        "\u09BB\u09D7\u09DC\u09E9\u09ED\u09F2\u09F5\u0A02\u0A12\u0A32\u0A41\u0A4A" +
        "\u0A4D\u0A51\u0A63\u0A83\u0A8A\u0A92\u0A9E\u0AA7\u0AAA\u0AB9\u0AC3\u0AC9" +
        "\u0AD9\u0AFB\u0B07\u0B15\u0B1D\u0B34\u0B3C\u0B46\u0B4C\u0B5A\u0B5E\u0B76" +
        "\u0B7C\u0B88\u0B8C\u0B90\u0B93\u0B9A\u0B9F\u0BA5\u0BAA\u0BB0\u0BBA\u0BCD" +
        "\u0BD3\u0BD6\u0BE1\u0BF9\u0C07\u0C0F\u0C1B\u0C23\u0C35";
    SysVerilogHDLParser._serializedATN = Utils.join([
        SysVerilogHDLParser._serializedATNSegment0,
        SysVerilogHDLParser._serializedATNSegment1,
        SysVerilogHDLParser._serializedATNSegment2,
        SysVerilogHDLParser._serializedATNSegment3,
        SysVerilogHDLParser._serializedATNSegment4,
        SysVerilogHDLParser._serializedATNSegment5,
    ], "");
    return SysVerilogHDLParser;
}(Parser_1.Parser));
exports.SysVerilogHDLParser = SysVerilogHDLParser;
var Module_keywordContext = /** @class */ (function (_super) {
    __extends(Module_keywordContext, _super);
    function Module_keywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_keywordContext.prototype.Module_keyword_only = function () { return this.tryGetToken(SysVerilogHDLParser.Module_keyword_only, 0); };
    Module_keywordContext.prototype.Macromodule = function () { return this.tryGetToken(SysVerilogHDLParser.Macromodule, 0); };
    Object.defineProperty(Module_keywordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_keyword; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_keywordContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_keyword) {
            listener.enterModule_keyword(this);
        }
    };
    // @Override
    Module_keywordContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_keyword) {
            listener.exitModule_keyword(this);
        }
    };
    // @Override
    Module_keywordContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_keyword) {
            return visitor.visitModule_keyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_keywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_keywordContext = Module_keywordContext;
var Struct_keywordContext = /** @class */ (function (_super) {
    __extends(Struct_keywordContext, _super);
    function Struct_keywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Struct_keywordContext.prototype.Struct = function () { return this.tryGetToken(SysVerilogHDLParser.Struct, 0); };
    Struct_keywordContext.prototype.UnionStruct = function () { return this.tryGetToken(SysVerilogHDLParser.UnionStruct, 0); };
    Object.defineProperty(Struct_keywordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_struct_keyword; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Struct_keywordContext.prototype.enterRule = function (listener) {
        if (listener.enterStruct_keyword) {
            listener.enterStruct_keyword(this);
        }
    };
    // @Override
    Struct_keywordContext.prototype.exitRule = function (listener) {
        if (listener.exitStruct_keyword) {
            listener.exitStruct_keyword(this);
        }
    };
    // @Override
    Struct_keywordContext.prototype.accept = function (visitor) {
        if (visitor.visitStruct_keyword) {
            return visitor.visitStruct_keyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Struct_keywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Struct_keywordContext = Struct_keywordContext;
var Any_case_keywordContext = /** @class */ (function (_super) {
    __extends(Any_case_keywordContext, _super);
    function Any_case_keywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Any_case_keywordContext.prototype.Case_keyword = function () { return this.tryGetToken(SysVerilogHDLParser.Case_keyword, 0); };
    Any_case_keywordContext.prototype.Casez = function () { return this.tryGetToken(SysVerilogHDLParser.Casez, 0); };
    Any_case_keywordContext.prototype.Casex = function () { return this.tryGetToken(SysVerilogHDLParser.Casex, 0); };
    Object.defineProperty(Any_case_keywordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_any_case_keyword; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Any_case_keywordContext.prototype.enterRule = function (listener) {
        if (listener.enterAny_case_keyword) {
            listener.enterAny_case_keyword(this);
        }
    };
    // @Override
    Any_case_keywordContext.prototype.exitRule = function (listener) {
        if (listener.exitAny_case_keyword) {
            listener.exitAny_case_keyword(this);
        }
    };
    // @Override
    Any_case_keywordContext.prototype.accept = function (visitor) {
        if (visitor.visitAny_case_keyword) {
            return visitor.visitAny_case_keyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Any_case_keywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Any_case_keywordContext = Any_case_keywordContext;
var SemicolonContext = /** @class */ (function (_super) {
    __extends(SemicolonContext, _super);
    function SemicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SemicolonContext.prototype.Semicolon = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Semicolon);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Semicolon, i);
        }
    };
    Object.defineProperty(SemicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    SemicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterSemicolon) {
            listener.enterSemicolon(this);
        }
    };
    // @Override
    SemicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitSemicolon) {
            listener.exitSemicolon(this);
        }
    };
    // @Override
    SemicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitSemicolon) {
            return visitor.visitSemicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return SemicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SemicolonContext = SemicolonContext;
var Unary_operatorContext = /** @class */ (function (_super) {
    __extends(Unary_operatorContext, _super);
    function Unary_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Unary_operatorContext.prototype.Tilde = function () { return this.getToken(SysVerilogHDLParser.Tilde, 0); };
    Object.defineProperty(Unary_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_unary_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Unary_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterUnary_operator) {
            listener.enterUnary_operator(this);
        }
    };
    // @Override
    Unary_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitUnary_operator) {
            listener.exitUnary_operator(this);
        }
    };
    // @Override
    Unary_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitUnary_operator) {
            return visitor.visitUnary_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Unary_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Unary_operatorContext = Unary_operatorContext;
var Binary_operatorContext = /** @class */ (function (_super) {
    __extends(Binary_operatorContext, _super);
    function Binary_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Binary_operatorContext.prototype.Star = function () { return this.tryGetToken(SysVerilogHDLParser.Star, 0); };
    Binary_operatorContext.prototype.Forward_slash = function () { return this.tryGetToken(SysVerilogHDLParser.Forward_slash, 0); };
    Binary_operatorContext.prototype.Left_angle_equals = function () { return this.tryGetToken(SysVerilogHDLParser.Left_angle_equals, 0); };
    Object.defineProperty(Binary_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_binary_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Binary_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterBinary_operator) {
            listener.enterBinary_operator(this);
        }
    };
    // @Override
    Binary_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitBinary_operator) {
            listener.exitBinary_operator(this);
        }
    };
    // @Override
    Binary_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitBinary_operator) {
            return visitor.visitBinary_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Binary_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Binary_operatorContext = Binary_operatorContext;
var Unary_assign_operatorContext = /** @class */ (function (_super) {
    __extends(Unary_assign_operatorContext, _super);
    function Unary_assign_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Unary_assign_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_unary_assign_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Unary_assign_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterUnary_assign_operator) {
            listener.enterUnary_assign_operator(this);
        }
    };
    // @Override
    Unary_assign_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitUnary_assign_operator) {
            listener.exitUnary_assign_operator(this);
        }
    };
    // @Override
    Unary_assign_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitUnary_assign_operator) {
            return visitor.visitUnary_assign_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Unary_assign_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Unary_assign_operatorContext = Unary_assign_operatorContext;
var Binary_assign_operatorContext = /** @class */ (function (_super) {
    __extends(Binary_assign_operatorContext, _super);
    function Binary_assign_operatorContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(Binary_assign_operatorContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_binary_assign_operator; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Binary_assign_operatorContext.prototype.enterRule = function (listener) {
        if (listener.enterBinary_assign_operator) {
            listener.enterBinary_assign_operator(this);
        }
    };
    // @Override
    Binary_assign_operatorContext.prototype.exitRule = function (listener) {
        if (listener.exitBinary_assign_operator) {
            listener.exitBinary_assign_operator(this);
        }
    };
    // @Override
    Binary_assign_operatorContext.prototype.accept = function (visitor) {
        if (visitor.visitBinary_assign_operator) {
            return visitor.visitBinary_assign_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Binary_assign_operatorContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Binary_assign_operatorContext = Binary_assign_operatorContext;
var Source_textContext = /** @class */ (function (_super) {
    __extends(Source_textContext, _super);
    function Source_textContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Source_textContext.prototype.description_star = function () {
        return this.getRuleContext(0, Description_starContext);
    };
    Source_textContext.prototype.EOF = function () { return this.getToken(SysVerilogHDLParser.EOF, 0); };
    Object.defineProperty(Source_textContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_source_text; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Source_textContext.prototype.enterRule = function (listener) {
        if (listener.enterSource_text) {
            listener.enterSource_text(this);
        }
    };
    // @Override
    Source_textContext.prototype.exitRule = function (listener) {
        if (listener.exitSource_text) {
            listener.exitSource_text(this);
        }
    };
    // @Override
    Source_textContext.prototype.accept = function (visitor) {
        if (visitor.visitSource_text) {
            return visitor.visitSource_text(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Source_textContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Source_textContext = Source_textContext;
var Description_starContext = /** @class */ (function (_super) {
    __extends(Description_starContext, _super);
    function Description_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Description_starContext.prototype.description = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DescriptionContext);
        }
        else {
            return this.getRuleContext(i, DescriptionContext);
        }
    };
    Object.defineProperty(Description_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_description_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Description_starContext.prototype.enterRule = function (listener) {
        if (listener.enterDescription_star) {
            listener.enterDescription_star(this);
        }
    };
    // @Override
    Description_starContext.prototype.exitRule = function (listener) {
        if (listener.exitDescription_star) {
            listener.exitDescription_star(this);
        }
    };
    // @Override
    Description_starContext.prototype.accept = function (visitor) {
        if (visitor.visitDescription_star) {
            return visitor.visitDescription_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Description_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Description_starContext = Description_starContext;
var Header_textContext = /** @class */ (function (_super) {
    __extends(Header_textContext, _super);
    function Header_textContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Header_textContext.prototype.compiler_directive = function () {
        return this.tryGetRuleContext(0, Compiler_directiveContext);
    };
    Header_textContext.prototype.design_attribute = function () {
        return this.tryGetRuleContext(0, Design_attributeContext);
    };
    Header_textContext.prototype.import_package = function () {
        return this.tryGetRuleContext(0, Import_packageContext);
    };
    Object.defineProperty(Header_textContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_header_text; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Header_textContext.prototype.enterRule = function (listener) {
        if (listener.enterHeader_text) {
            listener.enterHeader_text(this);
        }
    };
    // @Override
    Header_textContext.prototype.exitRule = function (listener) {
        if (listener.exitHeader_text) {
            listener.exitHeader_text(this);
        }
    };
    // @Override
    Header_textContext.prototype.accept = function (visitor) {
        if (visitor.visitHeader_text) {
            return visitor.visitHeader_text(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Header_textContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Header_textContext = Header_textContext;
var Design_attributeContext = /** @class */ (function (_super) {
    __extends(Design_attributeContext, _super);
    function Design_attributeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Design_attributeContext.prototype.attribute_instance = function () {
        return this.getRuleContext(0, Attribute_instanceContext);
    };
    Object.defineProperty(Design_attributeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_design_attribute; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Design_attributeContext.prototype.enterRule = function (listener) {
        if (listener.enterDesign_attribute) {
            listener.enterDesign_attribute(this);
        }
    };
    // @Override
    Design_attributeContext.prototype.exitRule = function (listener) {
        if (listener.exitDesign_attribute) {
            listener.exitDesign_attribute(this);
        }
    };
    // @Override
    Design_attributeContext.prototype.accept = function (visitor) {
        if (visitor.visitDesign_attribute) {
            return visitor.visitDesign_attribute(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Design_attributeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Design_attributeContext = Design_attributeContext;
var Compiler_directiveContext = /** @class */ (function (_super) {
    __extends(Compiler_directiveContext, _super);
    function Compiler_directiveContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Compiler_directiveContext.prototype.timescale_compiler_directive = function () {
        return this.tryGetRuleContext(0, Timescale_compiler_directiveContext);
    };
    Compiler_directiveContext.prototype.default_nettype_statement = function () {
        return this.tryGetRuleContext(0, Default_nettype_statementContext);
    };
    Object.defineProperty(Compiler_directiveContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_compiler_directive; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Compiler_directiveContext.prototype.enterRule = function (listener) {
        if (listener.enterCompiler_directive) {
            listener.enterCompiler_directive(this);
        }
    };
    // @Override
    Compiler_directiveContext.prototype.exitRule = function (listener) {
        if (listener.exitCompiler_directive) {
            listener.exitCompiler_directive(this);
        }
    };
    // @Override
    Compiler_directiveContext.prototype.accept = function (visitor) {
        if (visitor.visitCompiler_directive) {
            return visitor.visitCompiler_directive(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Compiler_directiveContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Compiler_directiveContext = Compiler_directiveContext;
var DescriptionContext = /** @class */ (function (_super) {
    __extends(DescriptionContext, _super);
    function DescriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DescriptionContext.prototype.header_text = function () {
        return this.tryGetRuleContext(0, Header_textContext);
    };
    DescriptionContext.prototype.package_declaration = function () {
        return this.tryGetRuleContext(0, Package_declarationContext);
    };
    DescriptionContext.prototype.semicolon = function () {
        return this.tryGetRuleContext(0, SemicolonContext);
    };
    DescriptionContext.prototype.module_declaration = function () {
        return this.tryGetRuleContext(0, Module_declarationContext);
    };
    DescriptionContext.prototype.function_declaration = function () {
        return this.tryGetRuleContext(0, Function_declarationContext);
    };
    DescriptionContext.prototype.enum_declaration = function () {
        return this.tryGetRuleContext(0, Enum_declarationContext);
    };
    DescriptionContext.prototype.typedef_declaration = function () {
        return this.tryGetRuleContext(0, Typedef_declarationContext);
    };
    Object.defineProperty(DescriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DescriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterDescription) {
            listener.enterDescription(this);
        }
    };
    // @Override
    DescriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitDescription) {
            listener.exitDescription(this);
        }
    };
    // @Override
    DescriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitDescription) {
            return visitor.visitDescription(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DescriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DescriptionContext = DescriptionContext;
var Module_declarationContext = /** @class */ (function (_super) {
    __extends(Module_declarationContext, _super);
    function Module_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_declarationContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Module_declarationContext.prototype.module_keyword = function () {
        return this.getRuleContext(0, Module_keywordContext);
    };
    Module_declarationContext.prototype.module_identifier = function () {
        return this.getRuleContext(0, Module_identifierContext);
    };
    Module_declarationContext.prototype.module_interface = function () {
        return this.getRuleContext(0, Module_interfaceContext);
    };
    Module_declarationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Module_declarationContext.prototype.module_item_star = function () {
        return this.getRuleContext(0, Module_item_starContext);
    };
    Module_declarationContext.prototype.Endmodule = function () { return this.getToken(SysVerilogHDLParser.Endmodule, 0); };
    Module_declarationContext.prototype.colon_module_identifier = function () {
        return this.tryGetRuleContext(0, Colon_module_identifierContext);
    };
    Object.defineProperty(Module_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_declaration) {
            listener.enterModule_declaration(this);
        }
    };
    // @Override
    Module_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_declaration) {
            listener.exitModule_declaration(this);
        }
    };
    // @Override
    Module_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_declaration) {
            return visitor.visitModule_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_declarationContext = Module_declarationContext;
var Module_identifierContext = /** @class */ (function (_super) {
    __extends(Module_identifierContext, _super);
    function Module_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Module_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_identifier) {
            listener.enterModule_identifier(this);
        }
    };
    // @Override
    Module_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_identifier) {
            listener.exitModule_identifier(this);
        }
    };
    // @Override
    Module_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_identifier) {
            return visitor.visitModule_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_identifierContext = Module_identifierContext;
var Module_interfaceContext = /** @class */ (function (_super) {
    __extends(Module_interfaceContext, _super);
    function Module_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_interfaceContext.prototype.module_parameter_interface = function () {
        return this.tryGetRuleContext(0, Module_parameter_interfaceContext);
    };
    Module_interfaceContext.prototype.module_port_interface = function () {
        return this.tryGetRuleContext(0, Module_port_interfaceContext);
    };
    Object.defineProperty(Module_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_interface) {
            listener.enterModule_interface(this);
        }
    };
    // @Override
    Module_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_interface) {
            listener.exitModule_interface(this);
        }
    };
    // @Override
    Module_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_interface) {
            return visitor.visitModule_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_interfaceContext = Module_interfaceContext;
var Module_parameter_interfaceContext = /** @class */ (function (_super) {
    __extends(Module_parameter_interfaceContext, _super);
    function Module_parameter_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_parameter_interfaceContext.prototype.Hash = function () { return this.getToken(SysVerilogHDLParser.Hash, 0); };
    Module_parameter_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Module_parameter_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Module_parameter_interfaceContext.prototype.list_of_interface_parameters = function () {
        return this.tryGetRuleContext(0, List_of_interface_parametersContext);
    };
    Object.defineProperty(Module_parameter_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_parameter_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_parameter_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_parameter_interface) {
            listener.enterModule_parameter_interface(this);
        }
    };
    // @Override
    Module_parameter_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_parameter_interface) {
            listener.exitModule_parameter_interface(this);
        }
    };
    // @Override
    Module_parameter_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_parameter_interface) {
            return visitor.visitModule_parameter_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_parameter_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_parameter_interfaceContext = Module_parameter_interfaceContext;
var Module_port_interfaceContext = /** @class */ (function (_super) {
    __extends(Module_port_interfaceContext, _super);
    function Module_port_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_port_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Module_port_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Module_port_interfaceContext.prototype.list_of_interface_ports = function () {
        return this.tryGetRuleContext(0, List_of_interface_portsContext);
    };
    Object.defineProperty(Module_port_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_port_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_port_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_port_interface) {
            listener.enterModule_port_interface(this);
        }
    };
    // @Override
    Module_port_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_port_interface) {
            listener.exitModule_port_interface(this);
        }
    };
    // @Override
    Module_port_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_port_interface) {
            return visitor.visitModule_port_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_port_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_port_interfaceContext = Module_port_interfaceContext;
var Module_item_starContext = /** @class */ (function (_super) {
    __extends(Module_item_starContext, _super);
    function Module_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_item_starContext.prototype.module_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Module_itemContext);
        }
        else {
            return this.getRuleContext(i, Module_itemContext);
        }
    };
    Object.defineProperty(Module_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_item_star) {
            listener.enterModule_item_star(this);
        }
    };
    // @Override
    Module_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_item_star) {
            listener.exitModule_item_star(this);
        }
    };
    // @Override
    Module_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_item_star) {
            return visitor.visitModule_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_item_starContext = Module_item_starContext;
var Module_itemContext = /** @class */ (function (_super) {
    __extends(Module_itemContext, _super);
    function Module_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_itemContext.prototype.import_package = function () {
        return this.tryGetRuleContext(0, Import_packageContext);
    };
    Module_itemContext.prototype.parameter_item_semicolon = function () {
        return this.tryGetRuleContext(0, Parameter_item_semicolonContext);
    };
    Module_itemContext.prototype.attr_port_item_semicolon = function () {
        return this.tryGetRuleContext(0, Attr_port_item_semicolonContext);
    };
    Module_itemContext.prototype.attr_variable_item_semicolon = function () {
        return this.tryGetRuleContext(0, Attr_variable_item_semicolonContext);
    };
    Module_itemContext.prototype.subroutine_item_semicolon = function () {
        return this.tryGetRuleContext(0, Subroutine_item_semicolonContext);
    };
    Module_itemContext.prototype.attr_construct_item = function () {
        return this.tryGetRuleContext(0, Attr_construct_itemContext);
    };
    Module_itemContext.prototype.attr_generated_instantiation = function () {
        return this.tryGetRuleContext(0, Attr_generated_instantiationContext);
    };
    Module_itemContext.prototype.attr_component_item = function () {
        return this.tryGetRuleContext(0, Attr_component_itemContext);
    };
    Module_itemContext.prototype.compiler_item = function () {
        return this.tryGetRuleContext(0, Compiler_itemContext);
    };
    Module_itemContext.prototype.type_item = function () {
        return this.tryGetRuleContext(0, Type_itemContext);
    };
    Object.defineProperty(Module_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_item) {
            listener.enterModule_item(this);
        }
    };
    // @Override
    Module_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_item) {
            listener.exitModule_item(this);
        }
    };
    // @Override
    Module_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_item) {
            return visitor.visitModule_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_itemContext = Module_itemContext;
var Colon_module_identifierContext = /** @class */ (function (_super) {
    __extends(Colon_module_identifierContext, _super);
    function Colon_module_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Colon_module_identifierContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Colon_module_identifierContext.prototype.module_identifier = function () {
        return this.getRuleContext(0, Module_identifierContext);
    };
    Object.defineProperty(Colon_module_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_colon_module_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Colon_module_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterColon_module_identifier) {
            listener.enterColon_module_identifier(this);
        }
    };
    // @Override
    Colon_module_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitColon_module_identifier) {
            listener.exitColon_module_identifier(this);
        }
    };
    // @Override
    Colon_module_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitColon_module_identifier) {
            return visitor.visitColon_module_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Colon_module_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Colon_module_identifierContext = Colon_module_identifierContext;
var Package_declarationContext = /** @class */ (function (_super) {
    __extends(Package_declarationContext, _super);
    function Package_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Package_declarationContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Package_declarationContext.prototype.Package = function () { return this.getToken(SysVerilogHDLParser.Package, 0); };
    Package_declarationContext.prototype.package_identifier = function () {
        return this.getRuleContext(0, Package_identifierContext);
    };
    Package_declarationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Package_declarationContext.prototype.package_item_star = function () {
        return this.getRuleContext(0, Package_item_starContext);
    };
    Package_declarationContext.prototype.Endpackage = function () { return this.getToken(SysVerilogHDLParser.Endpackage, 0); };
    Package_declarationContext.prototype.colon_package_identifier = function () {
        return this.tryGetRuleContext(0, Colon_package_identifierContext);
    };
    Object.defineProperty(Package_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_package_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Package_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterPackage_declaration) {
            listener.enterPackage_declaration(this);
        }
    };
    // @Override
    Package_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitPackage_declaration) {
            listener.exitPackage_declaration(this);
        }
    };
    // @Override
    Package_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitPackage_declaration) {
            return visitor.visitPackage_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Package_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Package_declarationContext = Package_declarationContext;
var Package_identifierContext = /** @class */ (function (_super) {
    __extends(Package_identifierContext, _super);
    function Package_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Package_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Package_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_package_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Package_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterPackage_identifier) {
            listener.enterPackage_identifier(this);
        }
    };
    // @Override
    Package_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitPackage_identifier) {
            listener.exitPackage_identifier(this);
        }
    };
    // @Override
    Package_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitPackage_identifier) {
            return visitor.visitPackage_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Package_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Package_identifierContext = Package_identifierContext;
var Colon_package_identifierContext = /** @class */ (function (_super) {
    __extends(Colon_package_identifierContext, _super);
    function Colon_package_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Colon_package_identifierContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Colon_package_identifierContext.prototype.package_identifier = function () {
        return this.getRuleContext(0, Package_identifierContext);
    };
    Object.defineProperty(Colon_package_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_colon_package_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Colon_package_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterColon_package_identifier) {
            listener.enterColon_package_identifier(this);
        }
    };
    // @Override
    Colon_package_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitColon_package_identifier) {
            listener.exitColon_package_identifier(this);
        }
    };
    // @Override
    Colon_package_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitColon_package_identifier) {
            return visitor.visitColon_package_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Colon_package_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Colon_package_identifierContext = Colon_package_identifierContext;
var Package_item_starContext = /** @class */ (function (_super) {
    __extends(Package_item_starContext, _super);
    function Package_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Package_item_starContext.prototype.package_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Package_itemContext);
        }
        else {
            return this.getRuleContext(i, Package_itemContext);
        }
    };
    Object.defineProperty(Package_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_package_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Package_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterPackage_item_star) {
            listener.enterPackage_item_star(this);
        }
    };
    // @Override
    Package_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitPackage_item_star) {
            listener.exitPackage_item_star(this);
        }
    };
    // @Override
    Package_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitPackage_item_star) {
            return visitor.visitPackage_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Package_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Package_item_starContext = Package_item_starContext;
var Package_itemContext = /** @class */ (function (_super) {
    __extends(Package_itemContext, _super);
    function Package_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Package_itemContext.prototype.import_package = function () {
        return this.tryGetRuleContext(0, Import_packageContext);
    };
    Package_itemContext.prototype.parameter_item_semicolon = function () {
        return this.tryGetRuleContext(0, Parameter_item_semicolonContext);
    };
    Package_itemContext.prototype.attr_variable_item_semicolon = function () {
        return this.tryGetRuleContext(0, Attr_variable_item_semicolonContext);
    };
    Package_itemContext.prototype.subroutine_item_semicolon = function () {
        return this.tryGetRuleContext(0, Subroutine_item_semicolonContext);
    };
    Package_itemContext.prototype.attr_component_item = function () {
        return this.tryGetRuleContext(0, Attr_component_itemContext);
    };
    Package_itemContext.prototype.compiler_item = function () {
        return this.tryGetRuleContext(0, Compiler_itemContext);
    };
    Package_itemContext.prototype.type_item = function () {
        return this.tryGetRuleContext(0, Type_itemContext);
    };
    Object.defineProperty(Package_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_package_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Package_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterPackage_item) {
            listener.enterPackage_item(this);
        }
    };
    // @Override
    Package_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitPackage_item) {
            listener.exitPackage_item(this);
        }
    };
    // @Override
    Package_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitPackage_item) {
            return visitor.visitPackage_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Package_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Package_itemContext = Package_itemContext;
var Import_packageContext = /** @class */ (function (_super) {
    __extends(Import_packageContext, _super);
    function Import_packageContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Import_packageContext.prototype.Import = function () { return this.getToken(SysVerilogHDLParser.Import, 0); };
    Import_packageContext.prototype.package_identifier = function () {
        return this.getRuleContext(0, Package_identifierContext);
    };
    Import_packageContext.prototype.Double_colon = function () { return this.getToken(SysVerilogHDLParser.Double_colon, 0); };
    Import_packageContext.prototype.Star = function () { return this.tryGetToken(SysVerilogHDLParser.Star, 0); };
    Import_packageContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Import_packageContext.prototype.package_item_identifier = function () {
        return this.tryGetRuleContext(0, Package_item_identifierContext);
    };
    Object.defineProperty(Import_packageContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_import_package; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Import_packageContext.prototype.enterRule = function (listener) {
        if (listener.enterImport_package) {
            listener.enterImport_package(this);
        }
    };
    // @Override
    Import_packageContext.prototype.exitRule = function (listener) {
        if (listener.exitImport_package) {
            listener.exitImport_package(this);
        }
    };
    // @Override
    Import_packageContext.prototype.accept = function (visitor) {
        if (visitor.visitImport_package) {
            return visitor.visitImport_package(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Import_packageContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Import_packageContext = Import_packageContext;
var Package_item_identifierContext = /** @class */ (function (_super) {
    __extends(Package_item_identifierContext, _super);
    function Package_item_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Package_item_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Package_item_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_package_item_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Package_item_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterPackage_item_identifier) {
            listener.enterPackage_item_identifier(this);
        }
    };
    // @Override
    Package_item_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitPackage_item_identifier) {
            listener.exitPackage_item_identifier(this);
        }
    };
    // @Override
    Package_item_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitPackage_item_identifier) {
            return visitor.visitPackage_item_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Package_item_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Package_item_identifierContext = Package_item_identifierContext;
var Parameter_item_semicolonContext = /** @class */ (function (_super) {
    __extends(Parameter_item_semicolonContext, _super);
    function Parameter_item_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_item_semicolonContext.prototype.parameter_item = function () {
        return this.getRuleContext(0, Parameter_itemContext);
    };
    Parameter_item_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Parameter_item_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_parameter_item_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_item_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_item_semicolon) {
            listener.enterParameter_item_semicolon(this);
        }
    };
    // @Override
    Parameter_item_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_item_semicolon) {
            listener.exitParameter_item_semicolon(this);
        }
    };
    // @Override
    Parameter_item_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_item_semicolon) {
            return visitor.visitParameter_item_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_item_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_item_semicolonContext = Parameter_item_semicolonContext;
var Parameter_itemContext = /** @class */ (function (_super) {
    __extends(Parameter_itemContext, _super);
    function Parameter_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_itemContext.prototype.parameter_declaration = function () {
        return this.tryGetRuleContext(0, Parameter_declarationContext);
    };
    Parameter_itemContext.prototype.local_parameter_declaration = function () {
        return this.tryGetRuleContext(0, Local_parameter_declarationContext);
    };
    Parameter_itemContext.prototype.parameter_override = function () {
        return this.tryGetRuleContext(0, Parameter_overrideContext);
    };
    Object.defineProperty(Parameter_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_parameter_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_item) {
            listener.enterParameter_item(this);
        }
    };
    // @Override
    Parameter_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_item) {
            listener.exitParameter_item(this);
        }
    };
    // @Override
    Parameter_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_item) {
            return visitor.visitParameter_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_itemContext = Parameter_itemContext;
var Attr_port_item_semicolonContext = /** @class */ (function (_super) {
    __extends(Attr_port_item_semicolonContext, _super);
    function Attr_port_item_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_port_item_semicolonContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Attr_port_item_semicolonContext.prototype.port_declaration = function () {
        return this.getRuleContext(0, Port_declarationContext);
    };
    Attr_port_item_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Attr_port_item_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_port_item_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_port_item_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_port_item_semicolon) {
            listener.enterAttr_port_item_semicolon(this);
        }
    };
    // @Override
    Attr_port_item_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_port_item_semicolon) {
            listener.exitAttr_port_item_semicolon(this);
        }
    };
    // @Override
    Attr_port_item_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_port_item_semicolon) {
            return visitor.visitAttr_port_item_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_port_item_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_port_item_semicolonContext = Attr_port_item_semicolonContext;
var Attr_variable_item_semicolonContext = /** @class */ (function (_super) {
    __extends(Attr_variable_item_semicolonContext, _super);
    function Attr_variable_item_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_variable_item_semicolonContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Attr_variable_item_semicolonContext.prototype.variable_item = function () {
        return this.getRuleContext(0, Variable_itemContext);
    };
    Attr_variable_item_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Attr_variable_item_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_variable_item_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_variable_item_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_variable_item_semicolon) {
            listener.enterAttr_variable_item_semicolon(this);
        }
    };
    // @Override
    Attr_variable_item_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_variable_item_semicolon) {
            listener.exitAttr_variable_item_semicolon(this);
        }
    };
    // @Override
    Attr_variable_item_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_variable_item_semicolon) {
            return visitor.visitAttr_variable_item_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_variable_item_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_variable_item_semicolonContext = Attr_variable_item_semicolonContext;
var Variable_itemContext = /** @class */ (function (_super) {
    __extends(Variable_itemContext, _super);
    function Variable_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_itemContext.prototype.net_declaration = function () {
        return this.tryGetRuleContext(0, Net_declarationContext);
    };
    Variable_itemContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Variable_itemContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Variable_itemContext.prototype.bits_declaration = function () {
        return this.tryGetRuleContext(0, Bits_declarationContext);
    };
    Variable_itemContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Variable_itemContext.prototype.int_declaration = function () {
        return this.tryGetRuleContext(0, Int_declarationContext);
    };
    Variable_itemContext.prototype.real_declaration = function () {
        return this.tryGetRuleContext(0, Real_declarationContext);
    };
    Variable_itemContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Variable_itemContext.prototype.realtime_declaration = function () {
        return this.tryGetRuleContext(0, Realtime_declarationContext);
    };
    Variable_itemContext.prototype.event_declaration = function () {
        return this.tryGetRuleContext(0, Event_declarationContext);
    };
    Variable_itemContext.prototype.genvar_declaration = function () {
        return this.tryGetRuleContext(0, Genvar_declarationContext);
    };
    Variable_itemContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Variable_itemContext.prototype.string_declaration = function () {
        return this.tryGetRuleContext(0, String_declarationContext);
    };
    Variable_itemContext.prototype.struct_declaration = function () {
        return this.tryGetRuleContext(0, Struct_declarationContext);
    };
    Variable_itemContext.prototype.enum_declaration = function () {
        return this.tryGetRuleContext(0, Enum_declarationContext);
    };
    Object.defineProperty(Variable_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_item) {
            listener.enterVariable_item(this);
        }
    };
    // @Override
    Variable_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_item) {
            listener.exitVariable_item(this);
        }
    };
    // @Override
    Variable_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_item) {
            return visitor.visitVariable_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_itemContext = Variable_itemContext;
var Subroutine_item_semicolonContext = /** @class */ (function (_super) {
    __extends(Subroutine_item_semicolonContext, _super);
    function Subroutine_item_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Subroutine_item_semicolonContext.prototype.subroutine_item = function () {
        return this.getRuleContext(0, Subroutine_itemContext);
    };
    Subroutine_item_semicolonContext.prototype.semicolon = function () {
        return this.tryGetRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Subroutine_item_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_subroutine_item_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Subroutine_item_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterSubroutine_item_semicolon) {
            listener.enterSubroutine_item_semicolon(this);
        }
    };
    // @Override
    Subroutine_item_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitSubroutine_item_semicolon) {
            listener.exitSubroutine_item_semicolon(this);
        }
    };
    // @Override
    Subroutine_item_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitSubroutine_item_semicolon) {
            return visitor.visitSubroutine_item_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Subroutine_item_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Subroutine_item_semicolonContext = Subroutine_item_semicolonContext;
var Subroutine_itemContext = /** @class */ (function (_super) {
    __extends(Subroutine_itemContext, _super);
    function Subroutine_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Subroutine_itemContext.prototype.task_declaration = function () {
        return this.tryGetRuleContext(0, Task_declarationContext);
    };
    Subroutine_itemContext.prototype.function_declaration = function () {
        return this.tryGetRuleContext(0, Function_declarationContext);
    };
    Object.defineProperty(Subroutine_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_subroutine_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Subroutine_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterSubroutine_item) {
            listener.enterSubroutine_item(this);
        }
    };
    // @Override
    Subroutine_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitSubroutine_item) {
            listener.exitSubroutine_item(this);
        }
    };
    // @Override
    Subroutine_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitSubroutine_item) {
            return visitor.visitSubroutine_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Subroutine_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Subroutine_itemContext = Subroutine_itemContext;
var Attr_construct_itemContext = /** @class */ (function (_super) {
    __extends(Attr_construct_itemContext, _super);
    function Attr_construct_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_construct_itemContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Attr_construct_itemContext.prototype.construct_item = function () {
        return this.getRuleContext(0, Construct_itemContext);
    };
    Object.defineProperty(Attr_construct_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_construct_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_construct_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_construct_item) {
            listener.enterAttr_construct_item(this);
        }
    };
    // @Override
    Attr_construct_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_construct_item) {
            listener.exitAttr_construct_item(this);
        }
    };
    // @Override
    Attr_construct_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_construct_item) {
            return visitor.visitAttr_construct_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_construct_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_construct_itemContext = Attr_construct_itemContext;
var Construct_itemContext = /** @class */ (function (_super) {
    __extends(Construct_itemContext, _super);
    function Construct_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Construct_itemContext.prototype.continuous_assign = function () {
        return this.tryGetRuleContext(0, Continuous_assignContext);
    };
    Construct_itemContext.prototype.initial_construct = function () {
        return this.tryGetRuleContext(0, Initial_constructContext);
    };
    Construct_itemContext.prototype.final_construct = function () {
        return this.tryGetRuleContext(0, Final_constructContext);
    };
    Construct_itemContext.prototype.always_construct = function () {
        return this.tryGetRuleContext(0, Always_constructContext);
    };
    Object.defineProperty(Construct_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_construct_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Construct_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterConstruct_item) {
            listener.enterConstruct_item(this);
        }
    };
    // @Override
    Construct_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitConstruct_item) {
            listener.exitConstruct_item(this);
        }
    };
    // @Override
    Construct_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitConstruct_item) {
            return visitor.visitConstruct_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Construct_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Construct_itemContext = Construct_itemContext;
var Attr_component_itemContext = /** @class */ (function (_super) {
    __extends(Attr_component_itemContext, _super);
    function Attr_component_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_component_itemContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Attr_component_itemContext.prototype.component_item = function () {
        return this.getRuleContext(0, Component_itemContext);
    };
    Object.defineProperty(Attr_component_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_component_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_component_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_component_item) {
            listener.enterAttr_component_item(this);
        }
    };
    // @Override
    Attr_component_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_component_item) {
            listener.exitAttr_component_item(this);
        }
    };
    // @Override
    Attr_component_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_component_item) {
            return visitor.visitAttr_component_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_component_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_component_itemContext = Attr_component_itemContext;
var Component_itemContext = /** @class */ (function (_super) {
    __extends(Component_itemContext, _super);
    function Component_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Component_itemContext.prototype.module_instantiation = function () {
        return this.tryGetRuleContext(0, Module_instantiationContext);
    };
    Component_itemContext.prototype.gate_instantiation = function () {
        return this.tryGetRuleContext(0, Gate_instantiationContext);
    };
    Object.defineProperty(Component_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_component_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Component_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterComponent_item) {
            listener.enterComponent_item(this);
        }
    };
    // @Override
    Component_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitComponent_item) {
            listener.exitComponent_item(this);
        }
    };
    // @Override
    Component_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitComponent_item) {
            return visitor.visitComponent_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Component_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Component_itemContext = Component_itemContext;
var Compiler_itemContext = /** @class */ (function (_super) {
    __extends(Compiler_itemContext, _super);
    function Compiler_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Compiler_itemContext.prototype.timescale_compiler_directive = function () {
        return this.tryGetRuleContext(0, Timescale_compiler_directiveContext);
    };
    Compiler_itemContext.prototype.timeunit_directive = function () {
        return this.tryGetRuleContext(0, Timeunit_directiveContext);
    };
    Compiler_itemContext.prototype.semicolon = function () {
        return this.tryGetRuleContext(0, SemicolonContext);
    };
    Compiler_itemContext.prototype.timeprecision_directive = function () {
        return this.tryGetRuleContext(0, Timeprecision_directiveContext);
    };
    Object.defineProperty(Compiler_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_compiler_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Compiler_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterCompiler_item) {
            listener.enterCompiler_item(this);
        }
    };
    // @Override
    Compiler_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitCompiler_item) {
            listener.exitCompiler_item(this);
        }
    };
    // @Override
    Compiler_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitCompiler_item) {
            return visitor.visitCompiler_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Compiler_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Compiler_itemContext = Compiler_itemContext;
var Type_itemContext = /** @class */ (function (_super) {
    __extends(Type_itemContext, _super);
    function Type_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Type_itemContext.prototype.default_nettype_statement = function () {
        return this.tryGetRuleContext(0, Default_nettype_statementContext);
    };
    Type_itemContext.prototype.typedef_declaration = function () {
        return this.tryGetRuleContext(0, Typedef_declarationContext);
    };
    Type_itemContext.prototype.semicolon = function () {
        return this.tryGetRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Type_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_type_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Type_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterType_item) {
            listener.enterType_item(this);
        }
    };
    // @Override
    Type_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitType_item) {
            listener.exitType_item(this);
        }
    };
    // @Override
    Type_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitType_item) {
            return visitor.visitType_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Type_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Type_itemContext = Type_itemContext;
var Null_itemContext = /** @class */ (function (_super) {
    __extends(Null_itemContext, _super);
    function Null_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Null_itemContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Null_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_null_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Null_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterNull_item) {
            listener.enterNull_item(this);
        }
    };
    // @Override
    Null_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitNull_item) {
            listener.exitNull_item(this);
        }
    };
    // @Override
    Null_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitNull_item) {
            return visitor.visitNull_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Null_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Null_itemContext = Null_itemContext;
var List_of_interface_parametersContext = /** @class */ (function (_super) {
    __extends(List_of_interface_parametersContext, _super);
    function List_of_interface_parametersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_interface_parametersContext.prototype.list_of_parameter_declarations = function () {
        return this.tryGetRuleContext(0, List_of_parameter_declarationsContext);
    };
    List_of_interface_parametersContext.prototype.list_of_parameter_descriptions = function () {
        return this.tryGetRuleContext(0, List_of_parameter_descriptionsContext);
    };
    Object.defineProperty(List_of_interface_parametersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_interface_parameters; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_interface_parametersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_interface_parameters) {
            listener.enterList_of_interface_parameters(this);
        }
    };
    // @Override
    List_of_interface_parametersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_interface_parameters) {
            listener.exitList_of_interface_parameters(this);
        }
    };
    // @Override
    List_of_interface_parametersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_interface_parameters) {
            return visitor.visitList_of_interface_parameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_interface_parametersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_interface_parametersContext = List_of_interface_parametersContext;
var List_of_parameter_declarationsContext = /** @class */ (function (_super) {
    __extends(List_of_parameter_declarationsContext, _super);
    function List_of_parameter_declarationsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_parameter_declarationsContext.prototype.parameter_declaration = function () {
        return this.getRuleContext(0, Parameter_declarationContext);
    };
    List_of_parameter_declarationsContext.prototype.comma_parameter_declaration_star = function () {
        return this.getRuleContext(0, Comma_parameter_declaration_starContext);
    };
    Object.defineProperty(List_of_parameter_declarationsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_parameter_declarations; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_parameter_declarationsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_parameter_declarations) {
            listener.enterList_of_parameter_declarations(this);
        }
    };
    // @Override
    List_of_parameter_declarationsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_parameter_declarations) {
            listener.exitList_of_parameter_declarations(this);
        }
    };
    // @Override
    List_of_parameter_declarationsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_parameter_declarations) {
            return visitor.visitList_of_parameter_declarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_parameter_declarationsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_parameter_declarationsContext = List_of_parameter_declarationsContext;
var Comma_parameter_declaration_starContext = /** @class */ (function (_super) {
    __extends(Comma_parameter_declaration_starContext, _super);
    function Comma_parameter_declaration_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_parameter_declaration_starContext.prototype.comma_parameter_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_parameter_declarationContext);
        }
        else {
            return this.getRuleContext(i, Comma_parameter_declarationContext);
        }
    };
    Object.defineProperty(Comma_parameter_declaration_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_parameter_declaration_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_parameter_declaration_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_parameter_declaration_star) {
            listener.enterComma_parameter_declaration_star(this);
        }
    };
    // @Override
    Comma_parameter_declaration_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_parameter_declaration_star) {
            listener.exitComma_parameter_declaration_star(this);
        }
    };
    // @Override
    Comma_parameter_declaration_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_parameter_declaration_star) {
            return visitor.visitComma_parameter_declaration_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_parameter_declaration_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_parameter_declaration_starContext = Comma_parameter_declaration_starContext;
var Comma_parameter_declarationContext = /** @class */ (function (_super) {
    __extends(Comma_parameter_declarationContext, _super);
    function Comma_parameter_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_parameter_declarationContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_parameter_declarationContext.prototype.parameter_declaration = function () {
        return this.getRuleContext(0, Parameter_declarationContext);
    };
    Object.defineProperty(Comma_parameter_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_parameter_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_parameter_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_parameter_declaration) {
            listener.enterComma_parameter_declaration(this);
        }
    };
    // @Override
    Comma_parameter_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_parameter_declaration) {
            listener.exitComma_parameter_declaration(this);
        }
    };
    // @Override
    Comma_parameter_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_parameter_declaration) {
            return visitor.visitComma_parameter_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_parameter_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_parameter_declarationContext = Comma_parameter_declarationContext;
var List_of_parameter_descriptionsContext = /** @class */ (function (_super) {
    __extends(List_of_parameter_descriptionsContext, _super);
    function List_of_parameter_descriptionsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_parameter_descriptionsContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(List_of_parameter_descriptionsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_parameter_descriptions; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_parameter_descriptionsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_parameter_descriptions) {
            listener.enterList_of_parameter_descriptions(this);
        }
    };
    // @Override
    List_of_parameter_descriptionsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_parameter_descriptions) {
            listener.exitList_of_parameter_descriptions(this);
        }
    };
    // @Override
    List_of_parameter_descriptionsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_parameter_descriptions) {
            return visitor.visitList_of_parameter_descriptions(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_parameter_descriptionsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_parameter_descriptionsContext = List_of_parameter_descriptionsContext;
var Param_declarationContext = /** @class */ (function (_super) {
    __extends(Param_declarationContext, _super);
    function Param_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Param_declarationContext.prototype.list_of_hierarchical_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_hierarchical_variable_descriptionsContext);
    };
    Param_declarationContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Param_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Param_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Param_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_param_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Param_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterParam_declaration) {
            listener.enterParam_declaration(this);
        }
    };
    // @Override
    Param_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitParam_declaration) {
            listener.exitParam_declaration(this);
        }
    };
    // @Override
    Param_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitParam_declaration) {
            return visitor.visitParam_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Param_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Param_declarationContext = Param_declarationContext;
var Param_descriptionContext = /** @class */ (function (_super) {
    __extends(Param_descriptionContext, _super);
    function Param_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Param_descriptionContext.prototype.param_declaration = function () {
        return this.tryGetRuleContext(0, Param_declarationContext);
    };
    Param_descriptionContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Param_descriptionContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Param_descriptionContext.prototype.int_declaration = function () {
        return this.tryGetRuleContext(0, Int_declarationContext);
    };
    Param_descriptionContext.prototype.real_declaration = function () {
        return this.tryGetRuleContext(0, Real_declarationContext);
    };
    Param_descriptionContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Param_descriptionContext.prototype.realtime_declaration = function () {
        return this.tryGetRuleContext(0, Realtime_declarationContext);
    };
    Param_descriptionContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Param_descriptionContext.prototype.string_declaration = function () {
        return this.tryGetRuleContext(0, String_declarationContext);
    };
    Object.defineProperty(Param_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_param_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Param_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterParam_description) {
            listener.enterParam_description(this);
        }
    };
    // @Override
    Param_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitParam_description) {
            listener.exitParam_description(this);
        }
    };
    // @Override
    Param_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitParam_description) {
            return visitor.visitParam_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Param_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Param_descriptionContext = Param_descriptionContext;
var Parameter_declarationContext = /** @class */ (function (_super) {
    __extends(Parameter_declarationContext, _super);
    function Parameter_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_declarationContext.prototype.Parameter = function () { return this.getToken(SysVerilogHDLParser.Parameter, 0); };
    Parameter_declarationContext.prototype.param_description = function () {
        return this.getRuleContext(0, Param_descriptionContext);
    };
    Object.defineProperty(Parameter_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_parameter_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_declaration) {
            listener.enterParameter_declaration(this);
        }
    };
    // @Override
    Parameter_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_declaration) {
            listener.exitParameter_declaration(this);
        }
    };
    // @Override
    Parameter_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_declaration) {
            return visitor.visitParameter_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_declarationContext = Parameter_declarationContext;
var Local_parameter_declarationContext = /** @class */ (function (_super) {
    __extends(Local_parameter_declarationContext, _super);
    function Local_parameter_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Local_parameter_declarationContext.prototype.Localparam = function () { return this.getToken(SysVerilogHDLParser.Localparam, 0); };
    Local_parameter_declarationContext.prototype.param_description = function () {
        return this.getRuleContext(0, Param_descriptionContext);
    };
    Object.defineProperty(Local_parameter_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_local_parameter_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Local_parameter_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterLocal_parameter_declaration) {
            listener.enterLocal_parameter_declaration(this);
        }
    };
    // @Override
    Local_parameter_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitLocal_parameter_declaration) {
            listener.exitLocal_parameter_declaration(this);
        }
    };
    // @Override
    Local_parameter_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitLocal_parameter_declaration) {
            return visitor.visitLocal_parameter_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Local_parameter_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Local_parameter_declarationContext = Local_parameter_declarationContext;
var Parameter_overrideContext = /** @class */ (function (_super) {
    __extends(Parameter_overrideContext, _super);
    function Parameter_overrideContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_overrideContext.prototype.Defparam = function () { return this.getToken(SysVerilogHDLParser.Defparam, 0); };
    Parameter_overrideContext.prototype.param_description = function () {
        return this.getRuleContext(0, Param_descriptionContext);
    };
    Object.defineProperty(Parameter_overrideContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_parameter_override; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_overrideContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_override) {
            listener.enterParameter_override(this);
        }
    };
    // @Override
    Parameter_overrideContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_override) {
            listener.exitParameter_override(this);
        }
    };
    // @Override
    Parameter_overrideContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_override) {
            return visitor.visitParameter_override(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_overrideContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_overrideContext = Parameter_overrideContext;
var List_of_tf_interface_portsContext = /** @class */ (function (_super) {
    __extends(List_of_tf_interface_portsContext, _super);
    function List_of_tf_interface_portsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_tf_interface_portsContext.prototype.list_of_port_identifiers = function () {
        return this.tryGetRuleContext(0, List_of_port_identifiersContext);
    };
    List_of_tf_interface_portsContext.prototype.list_of_tf_port_declarations = function () {
        return this.tryGetRuleContext(0, List_of_tf_port_declarationsContext);
    };
    Object.defineProperty(List_of_tf_interface_portsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_tf_interface_ports; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_tf_interface_portsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_tf_interface_ports) {
            listener.enterList_of_tf_interface_ports(this);
        }
    };
    // @Override
    List_of_tf_interface_portsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_tf_interface_ports) {
            listener.exitList_of_tf_interface_ports(this);
        }
    };
    // @Override
    List_of_tf_interface_portsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_tf_interface_ports) {
            return visitor.visitList_of_tf_interface_ports(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_tf_interface_portsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_tf_interface_portsContext = List_of_tf_interface_portsContext;
var List_of_tf_port_declarationsContext = /** @class */ (function (_super) {
    __extends(List_of_tf_port_declarationsContext, _super);
    function List_of_tf_port_declarationsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_tf_port_declarationsContext.prototype.list_of_tf_port_declarations_comma = function () {
        return this.tryGetRuleContext(0, List_of_tf_port_declarations_commaContext);
    };
    List_of_tf_port_declarationsContext.prototype.list_of_tf_port_declarations_semicolon = function () {
        return this.tryGetRuleContext(0, List_of_tf_port_declarations_semicolonContext);
    };
    Object.defineProperty(List_of_tf_port_declarationsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_tf_port_declarations; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_tf_port_declarationsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_tf_port_declarations) {
            listener.enterList_of_tf_port_declarations(this);
        }
    };
    // @Override
    List_of_tf_port_declarationsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_tf_port_declarations) {
            listener.exitList_of_tf_port_declarations(this);
        }
    };
    // @Override
    List_of_tf_port_declarationsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_tf_port_declarations) {
            return visitor.visitList_of_tf_port_declarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_tf_port_declarationsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_tf_port_declarationsContext = List_of_tf_port_declarationsContext;
var List_of_tf_port_declarations_commaContext = /** @class */ (function (_super) {
    __extends(List_of_tf_port_declarations_commaContext, _super);
    function List_of_tf_port_declarations_commaContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_tf_port_declarations_commaContext.prototype.attr_tf_port_declaration = function () {
        return this.getRuleContext(0, Attr_tf_port_declarationContext);
    };
    List_of_tf_port_declarations_commaContext.prototype.comma_attr_tf_port_declaration_star = function () {
        return this.getRuleContext(0, Comma_attr_tf_port_declaration_starContext);
    };
    Object.defineProperty(List_of_tf_port_declarations_commaContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_tf_port_declarations_comma; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_tf_port_declarations_commaContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_tf_port_declarations_comma) {
            listener.enterList_of_tf_port_declarations_comma(this);
        }
    };
    // @Override
    List_of_tf_port_declarations_commaContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_tf_port_declarations_comma) {
            listener.exitList_of_tf_port_declarations_comma(this);
        }
    };
    // @Override
    List_of_tf_port_declarations_commaContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_tf_port_declarations_comma) {
            return visitor.visitList_of_tf_port_declarations_comma(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_tf_port_declarations_commaContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_tf_port_declarations_commaContext = List_of_tf_port_declarations_commaContext;
var Comma_attr_tf_port_declaration_starContext = /** @class */ (function (_super) {
    __extends(Comma_attr_tf_port_declaration_starContext, _super);
    function Comma_attr_tf_port_declaration_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_attr_tf_port_declaration_starContext.prototype.comma_attr_tf_port_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_attr_tf_port_declarationContext);
        }
        else {
            return this.getRuleContext(i, Comma_attr_tf_port_declarationContext);
        }
    };
    Object.defineProperty(Comma_attr_tf_port_declaration_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_attr_tf_port_declaration_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_attr_tf_port_declaration_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_attr_tf_port_declaration_star) {
            listener.enterComma_attr_tf_port_declaration_star(this);
        }
    };
    // @Override
    Comma_attr_tf_port_declaration_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_attr_tf_port_declaration_star) {
            listener.exitComma_attr_tf_port_declaration_star(this);
        }
    };
    // @Override
    Comma_attr_tf_port_declaration_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_attr_tf_port_declaration_star) {
            return visitor.visitComma_attr_tf_port_declaration_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_attr_tf_port_declaration_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_attr_tf_port_declaration_starContext = Comma_attr_tf_port_declaration_starContext;
var Comma_attr_tf_port_declarationContext = /** @class */ (function (_super) {
    __extends(Comma_attr_tf_port_declarationContext, _super);
    function Comma_attr_tf_port_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_attr_tf_port_declarationContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_attr_tf_port_declarationContext.prototype.attr_tf_port_declaration = function () {
        return this.getRuleContext(0, Attr_tf_port_declarationContext);
    };
    Object.defineProperty(Comma_attr_tf_port_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_attr_tf_port_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_attr_tf_port_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_attr_tf_port_declaration) {
            listener.enterComma_attr_tf_port_declaration(this);
        }
    };
    // @Override
    Comma_attr_tf_port_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_attr_tf_port_declaration) {
            listener.exitComma_attr_tf_port_declaration(this);
        }
    };
    // @Override
    Comma_attr_tf_port_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_attr_tf_port_declaration) {
            return visitor.visitComma_attr_tf_port_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_attr_tf_port_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_attr_tf_port_declarationContext = Comma_attr_tf_port_declarationContext;
var List_of_tf_port_declarations_semicolonContext = /** @class */ (function (_super) {
    __extends(List_of_tf_port_declarations_semicolonContext, _super);
    function List_of_tf_port_declarations_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_tf_port_declarations_semicolonContext.prototype.attr_tf_port_declaration_semicolon_plus = function () {
        return this.getRuleContext(0, Attr_tf_port_declaration_semicolon_plusContext);
    };
    Object.defineProperty(List_of_tf_port_declarations_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_tf_port_declarations_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_tf_port_declarations_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_tf_port_declarations_semicolon) {
            listener.enterList_of_tf_port_declarations_semicolon(this);
        }
    };
    // @Override
    List_of_tf_port_declarations_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_tf_port_declarations_semicolon) {
            listener.exitList_of_tf_port_declarations_semicolon(this);
        }
    };
    // @Override
    List_of_tf_port_declarations_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_tf_port_declarations_semicolon) {
            return visitor.visitList_of_tf_port_declarations_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_tf_port_declarations_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_tf_port_declarations_semicolonContext = List_of_tf_port_declarations_semicolonContext;
var Attr_tf_port_declaration_semicolon_plusContext = /** @class */ (function (_super) {
    __extends(Attr_tf_port_declaration_semicolon_plusContext, _super);
    function Attr_tf_port_declaration_semicolon_plusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_tf_port_declaration_semicolon_plusContext.prototype.attr_tf_port_declaration_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attr_tf_port_declaration_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Attr_tf_port_declaration_semicolonContext);
        }
    };
    Object.defineProperty(Attr_tf_port_declaration_semicolon_plusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon_plus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_tf_port_declaration_semicolon_plusContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_tf_port_declaration_semicolon_plus) {
            listener.enterAttr_tf_port_declaration_semicolon_plus(this);
        }
    };
    // @Override
    Attr_tf_port_declaration_semicolon_plusContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_tf_port_declaration_semicolon_plus) {
            listener.exitAttr_tf_port_declaration_semicolon_plus(this);
        }
    };
    // @Override
    Attr_tf_port_declaration_semicolon_plusContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_tf_port_declaration_semicolon_plus) {
            return visitor.visitAttr_tf_port_declaration_semicolon_plus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_tf_port_declaration_semicolon_plusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_tf_port_declaration_semicolon_plusContext = Attr_tf_port_declaration_semicolon_plusContext;
var Attr_tf_port_declaration_semicolon_starContext = /** @class */ (function (_super) {
    __extends(Attr_tf_port_declaration_semicolon_starContext, _super);
    function Attr_tf_port_declaration_semicolon_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_tf_port_declaration_semicolon_starContext.prototype.attr_tf_port_declaration_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attr_tf_port_declaration_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Attr_tf_port_declaration_semicolonContext);
        }
    };
    Object.defineProperty(Attr_tf_port_declaration_semicolon_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_tf_port_declaration_semicolon_starContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_tf_port_declaration_semicolon_star) {
            listener.enterAttr_tf_port_declaration_semicolon_star(this);
        }
    };
    // @Override
    Attr_tf_port_declaration_semicolon_starContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_tf_port_declaration_semicolon_star) {
            listener.exitAttr_tf_port_declaration_semicolon_star(this);
        }
    };
    // @Override
    Attr_tf_port_declaration_semicolon_starContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_tf_port_declaration_semicolon_star) {
            return visitor.visitAttr_tf_port_declaration_semicolon_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_tf_port_declaration_semicolon_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_tf_port_declaration_semicolon_starContext = Attr_tf_port_declaration_semicolon_starContext;
var Attr_tf_port_declaration_semicolonContext = /** @class */ (function (_super) {
    __extends(Attr_tf_port_declaration_semicolonContext, _super);
    function Attr_tf_port_declaration_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_tf_port_declaration_semicolonContext.prototype.attr_tf_port_declaration = function () {
        return this.getRuleContext(0, Attr_tf_port_declarationContext);
    };
    Attr_tf_port_declaration_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Attr_tf_port_declaration_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_tf_port_declaration_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_tf_port_declaration_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_tf_port_declaration_semicolon) {
            listener.enterAttr_tf_port_declaration_semicolon(this);
        }
    };
    // @Override
    Attr_tf_port_declaration_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_tf_port_declaration_semicolon) {
            listener.exitAttr_tf_port_declaration_semicolon(this);
        }
    };
    // @Override
    Attr_tf_port_declaration_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_tf_port_declaration_semicolon) {
            return visitor.visitAttr_tf_port_declaration_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_tf_port_declaration_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_tf_port_declaration_semicolonContext = Attr_tf_port_declaration_semicolonContext;
var Attr_tf_port_declarationContext = /** @class */ (function (_super) {
    __extends(Attr_tf_port_declarationContext, _super);
    function Attr_tf_port_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_tf_port_declarationContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Attr_tf_port_declarationContext.prototype.tf_port_declaration = function () {
        return this.getRuleContext(0, Tf_port_declarationContext);
    };
    Object.defineProperty(Attr_tf_port_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_tf_port_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_tf_port_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_tf_port_declaration) {
            listener.enterAttr_tf_port_declaration(this);
        }
    };
    // @Override
    Attr_tf_port_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_tf_port_declaration) {
            listener.exitAttr_tf_port_declaration(this);
        }
    };
    // @Override
    Attr_tf_port_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_tf_port_declaration) {
            return visitor.visitAttr_tf_port_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_tf_port_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_tf_port_declarationContext = Attr_tf_port_declarationContext;
var Tf_port_declarationContext = /** @class */ (function (_super) {
    __extends(Tf_port_declarationContext, _super);
    function Tf_port_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tf_port_declarationContext.prototype.inout_declaration = function () {
        return this.tryGetRuleContext(0, Inout_declarationContext);
    };
    Tf_port_declarationContext.prototype.input_declaration = function () {
        return this.tryGetRuleContext(0, Input_declarationContext);
    };
    Tf_port_declarationContext.prototype.output_declaration = function () {
        return this.tryGetRuleContext(0, Output_declarationContext);
    };
    Tf_port_declarationContext.prototype.ref_declaration = function () {
        return this.tryGetRuleContext(0, Ref_declarationContext);
    };
    Tf_port_declarationContext.prototype.tf_declaration = function () {
        return this.tryGetRuleContext(0, Tf_declarationContext);
    };
    Object.defineProperty(Tf_port_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_tf_port_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tf_port_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTf_port_declaration) {
            listener.enterTf_port_declaration(this);
        }
    };
    // @Override
    Tf_port_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTf_port_declaration) {
            listener.exitTf_port_declaration(this);
        }
    };
    // @Override
    Tf_port_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTf_port_declaration) {
            return visitor.visitTf_port_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tf_port_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tf_port_declarationContext = Tf_port_declarationContext;
var List_of_interface_portsContext = /** @class */ (function (_super) {
    __extends(List_of_interface_portsContext, _super);
    function List_of_interface_portsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_interface_portsContext.prototype.list_of_port_identifiers = function () {
        return this.tryGetRuleContext(0, List_of_port_identifiersContext);
    };
    List_of_interface_portsContext.prototype.list_of_port_declarations = function () {
        return this.tryGetRuleContext(0, List_of_port_declarationsContext);
    };
    Object.defineProperty(List_of_interface_portsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_interface_ports; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_interface_portsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_interface_ports) {
            listener.enterList_of_interface_ports(this);
        }
    };
    // @Override
    List_of_interface_portsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_interface_ports) {
            listener.exitList_of_interface_ports(this);
        }
    };
    // @Override
    List_of_interface_portsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_interface_ports) {
            return visitor.visitList_of_interface_ports(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_interface_portsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_interface_portsContext = List_of_interface_portsContext;
var List_of_port_identifiersContext = /** @class */ (function (_super) {
    __extends(List_of_port_identifiersContext, _super);
    function List_of_port_identifiersContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_port_identifiersContext.prototype.port_identifier = function () {
        return this.getRuleContext(0, Port_identifierContext);
    };
    List_of_port_identifiersContext.prototype.comma_port_identifier_star = function () {
        return this.getRuleContext(0, Comma_port_identifier_starContext);
    };
    List_of_port_identifiersContext.prototype.Comma = function () { return this.tryGetToken(SysVerilogHDLParser.Comma, 0); };
    Object.defineProperty(List_of_port_identifiersContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_port_identifiers; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_port_identifiersContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_port_identifiers) {
            listener.enterList_of_port_identifiers(this);
        }
    };
    // @Override
    List_of_port_identifiersContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_port_identifiers) {
            listener.exitList_of_port_identifiers(this);
        }
    };
    // @Override
    List_of_port_identifiersContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_port_identifiers) {
            return visitor.visitList_of_port_identifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_port_identifiersContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_port_identifiersContext = List_of_port_identifiersContext;
var Comma_port_identifier_starContext = /** @class */ (function (_super) {
    __extends(Comma_port_identifier_starContext, _super);
    function Comma_port_identifier_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_port_identifier_starContext.prototype.comma_port_identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_port_identifierContext);
        }
        else {
            return this.getRuleContext(i, Comma_port_identifierContext);
        }
    };
    Object.defineProperty(Comma_port_identifier_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_port_identifier_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_port_identifier_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_port_identifier_star) {
            listener.enterComma_port_identifier_star(this);
        }
    };
    // @Override
    Comma_port_identifier_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_port_identifier_star) {
            listener.exitComma_port_identifier_star(this);
        }
    };
    // @Override
    Comma_port_identifier_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_port_identifier_star) {
            return visitor.visitComma_port_identifier_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_port_identifier_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_port_identifier_starContext = Comma_port_identifier_starContext;
var Comma_port_identifierContext = /** @class */ (function (_super) {
    __extends(Comma_port_identifierContext, _super);
    function Comma_port_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_port_identifierContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_port_identifierContext.prototype.port_identifier = function () {
        return this.getRuleContext(0, Port_identifierContext);
    };
    Object.defineProperty(Comma_port_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_port_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_port_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_port_identifier) {
            listener.enterComma_port_identifier(this);
        }
    };
    // @Override
    Comma_port_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_port_identifier) {
            listener.exitComma_port_identifier(this);
        }
    };
    // @Override
    Comma_port_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_port_identifier) {
            return visitor.visitComma_port_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_port_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_port_identifierContext = Comma_port_identifierContext;
var Port_identifierContext = /** @class */ (function (_super) {
    __extends(Port_identifierContext, _super);
    function Port_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Port_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_port_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_identifier) {
            listener.enterPort_identifier(this);
        }
    };
    // @Override
    Port_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_identifier) {
            listener.exitPort_identifier(this);
        }
    };
    // @Override
    Port_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_identifier) {
            return visitor.visitPort_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_identifierContext = Port_identifierContext;
var List_of_port_declarationsContext = /** @class */ (function (_super) {
    __extends(List_of_port_declarationsContext, _super);
    function List_of_port_declarationsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_port_declarationsContext.prototype.list_of_port_declarations_comma = function () {
        return this.tryGetRuleContext(0, List_of_port_declarations_commaContext);
    };
    List_of_port_declarationsContext.prototype.list_of_port_declarations_semicolon = function () {
        return this.tryGetRuleContext(0, List_of_port_declarations_semicolonContext);
    };
    Object.defineProperty(List_of_port_declarationsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_port_declarations; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_port_declarationsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_port_declarations) {
            listener.enterList_of_port_declarations(this);
        }
    };
    // @Override
    List_of_port_declarationsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_port_declarations) {
            listener.exitList_of_port_declarations(this);
        }
    };
    // @Override
    List_of_port_declarationsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_port_declarations) {
            return visitor.visitList_of_port_declarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_port_declarationsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_port_declarationsContext = List_of_port_declarationsContext;
var List_of_port_declarations_commaContext = /** @class */ (function (_super) {
    __extends(List_of_port_declarations_commaContext, _super);
    function List_of_port_declarations_commaContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_port_declarations_commaContext.prototype.attr_port_declaration = function () {
        return this.getRuleContext(0, Attr_port_declarationContext);
    };
    List_of_port_declarations_commaContext.prototype.comma_attr_port_declaration_star = function () {
        return this.getRuleContext(0, Comma_attr_port_declaration_starContext);
    };
    Object.defineProperty(List_of_port_declarations_commaContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_port_declarations_comma; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_port_declarations_commaContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_port_declarations_comma) {
            listener.enterList_of_port_declarations_comma(this);
        }
    };
    // @Override
    List_of_port_declarations_commaContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_port_declarations_comma) {
            listener.exitList_of_port_declarations_comma(this);
        }
    };
    // @Override
    List_of_port_declarations_commaContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_port_declarations_comma) {
            return visitor.visitList_of_port_declarations_comma(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_port_declarations_commaContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_port_declarations_commaContext = List_of_port_declarations_commaContext;
var Comma_attr_port_declaration_starContext = /** @class */ (function (_super) {
    __extends(Comma_attr_port_declaration_starContext, _super);
    function Comma_attr_port_declaration_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_attr_port_declaration_starContext.prototype.comma_attr_port_declaration = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_attr_port_declarationContext);
        }
        else {
            return this.getRuleContext(i, Comma_attr_port_declarationContext);
        }
    };
    Object.defineProperty(Comma_attr_port_declaration_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_attr_port_declaration_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_attr_port_declaration_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_attr_port_declaration_star) {
            listener.enterComma_attr_port_declaration_star(this);
        }
    };
    // @Override
    Comma_attr_port_declaration_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_attr_port_declaration_star) {
            listener.exitComma_attr_port_declaration_star(this);
        }
    };
    // @Override
    Comma_attr_port_declaration_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_attr_port_declaration_star) {
            return visitor.visitComma_attr_port_declaration_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_attr_port_declaration_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_attr_port_declaration_starContext = Comma_attr_port_declaration_starContext;
var Comma_attr_port_declarationContext = /** @class */ (function (_super) {
    __extends(Comma_attr_port_declarationContext, _super);
    function Comma_attr_port_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_attr_port_declarationContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_attr_port_declarationContext.prototype.attr_port_declaration = function () {
        return this.getRuleContext(0, Attr_port_declarationContext);
    };
    Object.defineProperty(Comma_attr_port_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_attr_port_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_attr_port_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_attr_port_declaration) {
            listener.enterComma_attr_port_declaration(this);
        }
    };
    // @Override
    Comma_attr_port_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_attr_port_declaration) {
            listener.exitComma_attr_port_declaration(this);
        }
    };
    // @Override
    Comma_attr_port_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_attr_port_declaration) {
            return visitor.visitComma_attr_port_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_attr_port_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_attr_port_declarationContext = Comma_attr_port_declarationContext;
var List_of_port_declarations_semicolonContext = /** @class */ (function (_super) {
    __extends(List_of_port_declarations_semicolonContext, _super);
    function List_of_port_declarations_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_port_declarations_semicolonContext.prototype.attr_port_declaration_semicolon_plus = function () {
        return this.getRuleContext(0, Attr_port_declaration_semicolon_plusContext);
    };
    Object.defineProperty(List_of_port_declarations_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_port_declarations_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_port_declarations_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_port_declarations_semicolon) {
            listener.enterList_of_port_declarations_semicolon(this);
        }
    };
    // @Override
    List_of_port_declarations_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_port_declarations_semicolon) {
            listener.exitList_of_port_declarations_semicolon(this);
        }
    };
    // @Override
    List_of_port_declarations_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_port_declarations_semicolon) {
            return visitor.visitList_of_port_declarations_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_port_declarations_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_port_declarations_semicolonContext = List_of_port_declarations_semicolonContext;
var Attr_port_declaration_semicolon_plusContext = /** @class */ (function (_super) {
    __extends(Attr_port_declaration_semicolon_plusContext, _super);
    function Attr_port_declaration_semicolon_plusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_port_declaration_semicolon_plusContext.prototype.attr_port_declaration_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attr_port_declaration_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Attr_port_declaration_semicolonContext);
        }
    };
    Object.defineProperty(Attr_port_declaration_semicolon_plusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_port_declaration_semicolon_plus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_port_declaration_semicolon_plusContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_port_declaration_semicolon_plus) {
            listener.enterAttr_port_declaration_semicolon_plus(this);
        }
    };
    // @Override
    Attr_port_declaration_semicolon_plusContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_port_declaration_semicolon_plus) {
            listener.exitAttr_port_declaration_semicolon_plus(this);
        }
    };
    // @Override
    Attr_port_declaration_semicolon_plusContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_port_declaration_semicolon_plus) {
            return visitor.visitAttr_port_declaration_semicolon_plus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_port_declaration_semicolon_plusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_port_declaration_semicolon_plusContext = Attr_port_declaration_semicolon_plusContext;
var Attr_port_declaration_semicolon_starContext = /** @class */ (function (_super) {
    __extends(Attr_port_declaration_semicolon_starContext, _super);
    function Attr_port_declaration_semicolon_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_port_declaration_semicolon_starContext.prototype.attr_port_declaration_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attr_port_declaration_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Attr_port_declaration_semicolonContext);
        }
    };
    Object.defineProperty(Attr_port_declaration_semicolon_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_port_declaration_semicolon_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_port_declaration_semicolon_starContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_port_declaration_semicolon_star) {
            listener.enterAttr_port_declaration_semicolon_star(this);
        }
    };
    // @Override
    Attr_port_declaration_semicolon_starContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_port_declaration_semicolon_star) {
            listener.exitAttr_port_declaration_semicolon_star(this);
        }
    };
    // @Override
    Attr_port_declaration_semicolon_starContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_port_declaration_semicolon_star) {
            return visitor.visitAttr_port_declaration_semicolon_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_port_declaration_semicolon_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_port_declaration_semicolon_starContext = Attr_port_declaration_semicolon_starContext;
var Attr_port_declaration_semicolonContext = /** @class */ (function (_super) {
    __extends(Attr_port_declaration_semicolonContext, _super);
    function Attr_port_declaration_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_port_declaration_semicolonContext.prototype.attr_port_declaration = function () {
        return this.getRuleContext(0, Attr_port_declarationContext);
    };
    Attr_port_declaration_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Attr_port_declaration_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_port_declaration_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_port_declaration_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_port_declaration_semicolon) {
            listener.enterAttr_port_declaration_semicolon(this);
        }
    };
    // @Override
    Attr_port_declaration_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_port_declaration_semicolon) {
            listener.exitAttr_port_declaration_semicolon(this);
        }
    };
    // @Override
    Attr_port_declaration_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_port_declaration_semicolon) {
            return visitor.visitAttr_port_declaration_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_port_declaration_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_port_declaration_semicolonContext = Attr_port_declaration_semicolonContext;
var Attr_port_declarationContext = /** @class */ (function (_super) {
    __extends(Attr_port_declarationContext, _super);
    function Attr_port_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_port_declarationContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Attr_port_declarationContext.prototype.port_declaration = function () {
        return this.getRuleContext(0, Port_declarationContext);
    };
    Object.defineProperty(Attr_port_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_port_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_port_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_port_declaration) {
            listener.enterAttr_port_declaration(this);
        }
    };
    // @Override
    Attr_port_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_port_declaration) {
            listener.exitAttr_port_declaration(this);
        }
    };
    // @Override
    Attr_port_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_port_declaration) {
            return visitor.visitAttr_port_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_port_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_port_declarationContext = Attr_port_declarationContext;
var Port_declarationContext = /** @class */ (function (_super) {
    __extends(Port_declarationContext, _super);
    function Port_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_declarationContext.prototype.inout_declaration = function () {
        return this.tryGetRuleContext(0, Inout_declarationContext);
    };
    Port_declarationContext.prototype.input_declaration = function () {
        return this.tryGetRuleContext(0, Input_declarationContext);
    };
    Port_declarationContext.prototype.output_declaration = function () {
        return this.tryGetRuleContext(0, Output_declarationContext);
    };
    Port_declarationContext.prototype.ref_declaration = function () {
        return this.tryGetRuleContext(0, Ref_declarationContext);
    };
    Object.defineProperty(Port_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_port_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_declaration) {
            listener.enterPort_declaration(this);
        }
    };
    // @Override
    Port_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_declaration) {
            listener.exitPort_declaration(this);
        }
    };
    // @Override
    Port_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_declaration) {
            return visitor.visitPort_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_declarationContext = Port_declarationContext;
var Port_descriptionContext = /** @class */ (function (_super) {
    __extends(Port_descriptionContext, _super);
    function Port_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_descriptionContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Port_descriptionContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Port_descriptionContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Port_descriptionContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Port_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_port_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_description) {
            listener.enterPort_description(this);
        }
    };
    // @Override
    Port_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_description) {
            listener.exitPort_description(this);
        }
    };
    // @Override
    Port_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_description) {
            return visitor.visitPort_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_descriptionContext = Port_descriptionContext;
var Inout_descriptionContext = /** @class */ (function (_super) {
    __extends(Inout_descriptionContext, _super);
    function Inout_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inout_descriptionContext.prototype.port_description = function () {
        return this.tryGetRuleContext(0, Port_descriptionContext);
    };
    Inout_descriptionContext.prototype.net_declaration = function () {
        return this.tryGetRuleContext(0, Net_declarationContext);
    };
    Object.defineProperty(Inout_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_inout_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inout_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterInout_description) {
            listener.enterInout_description(this);
        }
    };
    // @Override
    Inout_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitInout_description) {
            listener.exitInout_description(this);
        }
    };
    // @Override
    Inout_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitInout_description) {
            return visitor.visitInout_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inout_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inout_descriptionContext = Inout_descriptionContext;
var Input_descriptionContext = /** @class */ (function (_super) {
    __extends(Input_descriptionContext, _super);
    function Input_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Input_descriptionContext.prototype.port_description = function () {
        return this.tryGetRuleContext(0, Port_descriptionContext);
    };
    Input_descriptionContext.prototype.net_declaration = function () {
        return this.tryGetRuleContext(0, Net_declarationContext);
    };
    Input_descriptionContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Input_descriptionContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Input_descriptionContext.prototype.bits_declaration = function () {
        return this.tryGetRuleContext(0, Bits_declarationContext);
    };
    Input_descriptionContext.prototype.int_declaration = function () {
        return this.tryGetRuleContext(0, Int_declarationContext);
    };
    Input_descriptionContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Input_descriptionContext.prototype.real_declaration = function () {
        return this.tryGetRuleContext(0, Real_declarationContext);
    };
    Input_descriptionContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Input_descriptionContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Input_descriptionContext.prototype.string_declaration = function () {
        return this.tryGetRuleContext(0, String_declarationContext);
    };
    Object.defineProperty(Input_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_input_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Input_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterInput_description) {
            listener.enterInput_description(this);
        }
    };
    // @Override
    Input_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitInput_description) {
            listener.exitInput_description(this);
        }
    };
    // @Override
    Input_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitInput_description) {
            return visitor.visitInput_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Input_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Input_descriptionContext = Input_descriptionContext;
var Output_descriptionContext = /** @class */ (function (_super) {
    __extends(Output_descriptionContext, _super);
    function Output_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Output_descriptionContext.prototype.port_description = function () {
        return this.tryGetRuleContext(0, Port_descriptionContext);
    };
    Output_descriptionContext.prototype.net_declaration = function () {
        return this.tryGetRuleContext(0, Net_declarationContext);
    };
    Output_descriptionContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Output_descriptionContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Output_descriptionContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Output_descriptionContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Output_descriptionContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Output_descriptionContext.prototype.string_declaration = function () {
        return this.tryGetRuleContext(0, String_declarationContext);
    };
    Object.defineProperty(Output_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_output_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_description) {
            listener.enterOutput_description(this);
        }
    };
    // @Override
    Output_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_description) {
            listener.exitOutput_description(this);
        }
    };
    // @Override
    Output_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_description) {
            return visitor.visitOutput_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_descriptionContext = Output_descriptionContext;
var Ref_descriptionContext = /** @class */ (function (_super) {
    __extends(Ref_descriptionContext, _super);
    function Ref_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ref_descriptionContext.prototype.port_description = function () {
        return this.tryGetRuleContext(0, Port_descriptionContext);
    };
    Ref_descriptionContext.prototype.net_declaration = function () {
        return this.tryGetRuleContext(0, Net_declarationContext);
    };
    Ref_descriptionContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Ref_descriptionContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Ref_descriptionContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Ref_descriptionContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Ref_descriptionContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Ref_descriptionContext.prototype.string_declaration = function () {
        return this.tryGetRuleContext(0, String_declarationContext);
    };
    Object.defineProperty(Ref_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_ref_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ref_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterRef_description) {
            listener.enterRef_description(this);
        }
    };
    // @Override
    Ref_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitRef_description) {
            listener.exitRef_description(this);
        }
    };
    // @Override
    Ref_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitRef_description) {
            return visitor.visitRef_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ref_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ref_descriptionContext = Ref_descriptionContext;
var Tf_declarationContext = /** @class */ (function (_super) {
    __extends(Tf_declarationContext, _super);
    function Tf_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Tf_declarationContext.prototype.port_description = function () {
        return this.tryGetRuleContext(0, Port_descriptionContext);
    };
    Tf_declarationContext.prototype.real_declaration = function () {
        return this.tryGetRuleContext(0, Real_declarationContext);
    };
    Tf_declarationContext.prototype.net_declaration = function () {
        return this.tryGetRuleContext(0, Net_declarationContext);
    };
    Tf_declarationContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Tf_declarationContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Tf_declarationContext.prototype.bits_declaration = function () {
        return this.tryGetRuleContext(0, Bits_declarationContext);
    };
    Tf_declarationContext.prototype.int_declaration = function () {
        return this.tryGetRuleContext(0, Int_declarationContext);
    };
    Tf_declarationContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Tf_declarationContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Tf_declarationContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Tf_declarationContext.prototype.string_declaration = function () {
        return this.tryGetRuleContext(0, String_declarationContext);
    };
    Object.defineProperty(Tf_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_tf_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Tf_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTf_declaration) {
            listener.enterTf_declaration(this);
        }
    };
    // @Override
    Tf_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTf_declaration) {
            listener.exitTf_declaration(this);
        }
    };
    // @Override
    Tf_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTf_declaration) {
            return visitor.visitTf_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Tf_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Tf_declarationContext = Tf_declarationContext;
var Inout_declarationContext = /** @class */ (function (_super) {
    __extends(Inout_declarationContext, _super);
    function Inout_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inout_declarationContext.prototype.Inout = function () { return this.getToken(SysVerilogHDLParser.Inout, 0); };
    Inout_declarationContext.prototype.inout_description = function () {
        return this.getRuleContext(0, Inout_descriptionContext);
    };
    Object.defineProperty(Inout_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_inout_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inout_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInout_declaration) {
            listener.enterInout_declaration(this);
        }
    };
    // @Override
    Inout_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInout_declaration) {
            listener.exitInout_declaration(this);
        }
    };
    // @Override
    Inout_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInout_declaration) {
            return visitor.visitInout_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inout_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inout_declarationContext = Inout_declarationContext;
var Input_declarationContext = /** @class */ (function (_super) {
    __extends(Input_declarationContext, _super);
    function Input_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Input_declarationContext.prototype.Input = function () { return this.getToken(SysVerilogHDLParser.Input, 0); };
    Input_declarationContext.prototype.input_description = function () {
        return this.getRuleContext(0, Input_descriptionContext);
    };
    Object.defineProperty(Input_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_input_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Input_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInput_declaration) {
            listener.enterInput_declaration(this);
        }
    };
    // @Override
    Input_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInput_declaration) {
            listener.exitInput_declaration(this);
        }
    };
    // @Override
    Input_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInput_declaration) {
            return visitor.visitInput_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Input_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Input_declarationContext = Input_declarationContext;
var Output_declarationContext = /** @class */ (function (_super) {
    __extends(Output_declarationContext, _super);
    function Output_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Output_declarationContext.prototype.Output = function () { return this.getToken(SysVerilogHDLParser.Output, 0); };
    Output_declarationContext.prototype.output_description = function () {
        return this.getRuleContext(0, Output_descriptionContext);
    };
    Object.defineProperty(Output_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_output_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_declaration) {
            listener.enterOutput_declaration(this);
        }
    };
    // @Override
    Output_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_declaration) {
            listener.exitOutput_declaration(this);
        }
    };
    // @Override
    Output_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_declaration) {
            return visitor.visitOutput_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_declarationContext = Output_declarationContext;
var Ref_declarationContext = /** @class */ (function (_super) {
    __extends(Ref_declarationContext, _super);
    function Ref_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ref_declarationContext.prototype.Ref = function () { return this.getToken(SysVerilogHDLParser.Ref, 0); };
    Ref_declarationContext.prototype.ref_description = function () {
        return this.getRuleContext(0, Ref_descriptionContext);
    };
    Object.defineProperty(Ref_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_ref_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ref_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterRef_declaration) {
            listener.enterRef_declaration(this);
        }
    };
    // @Override
    Ref_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitRef_declaration) {
            listener.exitRef_declaration(this);
        }
    };
    // @Override
    Ref_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitRef_declaration) {
            return visitor.visitRef_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ref_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ref_declarationContext = Ref_declarationContext;
var User_typeContext = /** @class */ (function (_super) {
    __extends(User_typeContext, _super);
    function User_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    User_typeContext.prototype.user_type_identifer = function () {
        return this.getRuleContext(0, User_type_identiferContext);
    };
    Object.defineProperty(User_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_user_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    User_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterUser_type) {
            listener.enterUser_type(this);
        }
    };
    // @Override
    User_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitUser_type) {
            listener.exitUser_type(this);
        }
    };
    // @Override
    User_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitUser_type) {
            return visitor.visitUser_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return User_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.User_typeContext = User_typeContext;
var User_type_identiferContext = /** @class */ (function (_super) {
    __extends(User_type_identiferContext, _super);
    function User_type_identiferContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    User_type_identiferContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(User_type_identiferContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_user_type_identifer; },
        enumerable: true,
        configurable: true
    });
    // @Override
    User_type_identiferContext.prototype.enterRule = function (listener) {
        if (listener.enterUser_type_identifer) {
            listener.enterUser_type_identifer(this);
        }
    };
    // @Override
    User_type_identiferContext.prototype.exitRule = function (listener) {
        if (listener.exitUser_type_identifer) {
            listener.exitUser_type_identifer(this);
        }
    };
    // @Override
    User_type_identiferContext.prototype.accept = function (visitor) {
        if (visitor.visitUser_type_identifer) {
            return visitor.visitUser_type_identifer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return User_type_identiferContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.User_type_identiferContext = User_type_identiferContext;
var Dimension_plusContext = /** @class */ (function (_super) {
    __extends(Dimension_plusContext, _super);
    function Dimension_plusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Dimension_plusContext.prototype.dimension = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimensionContext);
        }
        else {
            return this.getRuleContext(i, DimensionContext);
        }
    };
    Object.defineProperty(Dimension_plusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_dimension_plus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Dimension_plusContext.prototype.enterRule = function (listener) {
        if (listener.enterDimension_plus) {
            listener.enterDimension_plus(this);
        }
    };
    // @Override
    Dimension_plusContext.prototype.exitRule = function (listener) {
        if (listener.exitDimension_plus) {
            listener.exitDimension_plus(this);
        }
    };
    // @Override
    Dimension_plusContext.prototype.accept = function (visitor) {
        if (visitor.visitDimension_plus) {
            return visitor.visitDimension_plus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Dimension_plusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Dimension_plusContext = Dimension_plusContext;
var Dimension_starContext = /** @class */ (function (_super) {
    __extends(Dimension_starContext, _super);
    function Dimension_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Dimension_starContext.prototype.dimension = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DimensionContext);
        }
        else {
            return this.getRuleContext(i, DimensionContext);
        }
    };
    Object.defineProperty(Dimension_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_dimension_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Dimension_starContext.prototype.enterRule = function (listener) {
        if (listener.enterDimension_star) {
            listener.enterDimension_star(this);
        }
    };
    // @Override
    Dimension_starContext.prototype.exitRule = function (listener) {
        if (listener.exitDimension_star) {
            listener.exitDimension_star(this);
        }
    };
    // @Override
    Dimension_starContext.prototype.accept = function (visitor) {
        if (visitor.visitDimension_star) {
            return visitor.visitDimension_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Dimension_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Dimension_starContext = Dimension_starContext;
var DimensionContext = /** @class */ (function (_super) {
    __extends(DimensionContext, _super);
    function DimensionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DimensionContext.prototype.Left_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_bracket, 0); };
    DimensionContext.prototype.range_expression = function () {
        return this.getRuleContext(0, Range_expressionContext);
    };
    DimensionContext.prototype.Right_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_bracket, 0); };
    Object.defineProperty(DimensionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_dimension; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DimensionContext.prototype.enterRule = function (listener) {
        if (listener.enterDimension) {
            listener.enterDimension(this);
        }
    };
    // @Override
    DimensionContext.prototype.exitRule = function (listener) {
        if (listener.exitDimension) {
            listener.exitDimension(this);
        }
    };
    // @Override
    DimensionContext.prototype.accept = function (visitor) {
        if (visitor.visitDimension) {
            return visitor.visitDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DimensionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DimensionContext = DimensionContext;
var Range_expressionContext = /** @class */ (function (_super) {
    __extends(Range_expressionContext, _super);
    function Range_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Range_expressionContext.prototype.index_expression = function () {
        return this.tryGetRuleContext(0, Index_expressionContext);
    };
    Range_expressionContext.prototype.sb_range = function () {
        return this.tryGetRuleContext(0, Sb_rangeContext);
    };
    Range_expressionContext.prototype.base_increment_range = function () {
        return this.tryGetRuleContext(0, Base_increment_rangeContext);
    };
    Range_expressionContext.prototype.base_decrement_range = function () {
        return this.tryGetRuleContext(0, Base_decrement_rangeContext);
    };
    Object.defineProperty(Range_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_range_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Range_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterRange_expression) {
            listener.enterRange_expression(this);
        }
    };
    // @Override
    Range_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitRange_expression) {
            listener.exitRange_expression(this);
        }
    };
    // @Override
    Range_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitRange_expression) {
            return visitor.visitRange_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Range_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Range_expressionContext = Range_expressionContext;
var Index_expressionContext = /** @class */ (function (_super) {
    __extends(Index_expressionContext, _super);
    function Index_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Index_expressionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Index_expressionContext.prototype.Dollar = function () { return this.tryGetToken(SysVerilogHDLParser.Dollar, 0); };
    Index_expressionContext.prototype.Star = function () { return this.tryGetToken(SysVerilogHDLParser.Star, 0); };
    Object.defineProperty(Index_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_index_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Index_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterIndex_expression) {
            listener.enterIndex_expression(this);
        }
    };
    // @Override
    Index_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitIndex_expression) {
            listener.exitIndex_expression(this);
        }
    };
    // @Override
    Index_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitIndex_expression) {
            return visitor.visitIndex_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Index_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Index_expressionContext = Index_expressionContext;
var Sb_rangeContext = /** @class */ (function (_super) {
    __extends(Sb_rangeContext, _super);
    function Sb_rangeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Sb_rangeContext.prototype.base_expression = function () {
        return this.getRuleContext(0, Base_expressionContext);
    };
    Sb_rangeContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Sb_rangeContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Sb_rangeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_sb_range; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Sb_rangeContext.prototype.enterRule = function (listener) {
        if (listener.enterSb_range) {
            listener.enterSb_range(this);
        }
    };
    // @Override
    Sb_rangeContext.prototype.exitRule = function (listener) {
        if (listener.exitSb_range) {
            listener.exitSb_range(this);
        }
    };
    // @Override
    Sb_rangeContext.prototype.accept = function (visitor) {
        if (visitor.visitSb_range) {
            return visitor.visitSb_range(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Sb_rangeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Sb_rangeContext = Sb_rangeContext;
var Base_increment_rangeContext = /** @class */ (function (_super) {
    __extends(Base_increment_rangeContext, _super);
    function Base_increment_rangeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Base_increment_rangeContext.prototype.base_expression = function () {
        return this.getRuleContext(0, Base_expressionContext);
    };
    Base_increment_rangeContext.prototype.Plus_colon = function () { return this.getToken(SysVerilogHDLParser.Plus_colon, 0); };
    Base_increment_rangeContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Base_increment_rangeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_base_increment_range; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Base_increment_rangeContext.prototype.enterRule = function (listener) {
        if (listener.enterBase_increment_range) {
            listener.enterBase_increment_range(this);
        }
    };
    // @Override
    Base_increment_rangeContext.prototype.exitRule = function (listener) {
        if (listener.exitBase_increment_range) {
            listener.exitBase_increment_range(this);
        }
    };
    // @Override
    Base_increment_rangeContext.prototype.accept = function (visitor) {
        if (visitor.visitBase_increment_range) {
            return visitor.visitBase_increment_range(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Base_increment_rangeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Base_increment_rangeContext = Base_increment_rangeContext;
var Base_decrement_rangeContext = /** @class */ (function (_super) {
    __extends(Base_decrement_rangeContext, _super);
    function Base_decrement_rangeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Base_decrement_rangeContext.prototype.base_expression = function () {
        return this.getRuleContext(0, Base_expressionContext);
    };
    Base_decrement_rangeContext.prototype.Minus_colon = function () { return this.getToken(SysVerilogHDLParser.Minus_colon, 0); };
    Base_decrement_rangeContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Base_decrement_rangeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_base_decrement_range; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Base_decrement_rangeContext.prototype.enterRule = function (listener) {
        if (listener.enterBase_decrement_range) {
            listener.enterBase_decrement_range(this);
        }
    };
    // @Override
    Base_decrement_rangeContext.prototype.exitRule = function (listener) {
        if (listener.exitBase_decrement_range) {
            listener.exitBase_decrement_range(this);
        }
    };
    // @Override
    Base_decrement_rangeContext.prototype.accept = function (visitor) {
        if (visitor.visitBase_decrement_range) {
            return visitor.visitBase_decrement_range(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Base_decrement_rangeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Base_decrement_rangeContext = Base_decrement_rangeContext;
var Base_expressionContext = /** @class */ (function (_super) {
    __extends(Base_expressionContext, _super);
    function Base_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Base_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Base_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_base_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Base_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterBase_expression) {
            listener.enterBase_expression(this);
        }
    };
    // @Override
    Base_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitBase_expression) {
            listener.exitBase_expression(this);
        }
    };
    // @Override
    Base_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitBase_expression) {
            return visitor.visitBase_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Base_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Base_expressionContext = Base_expressionContext;
var Net_typeContext = /** @class */ (function (_super) {
    __extends(Net_typeContext, _super);
    function Net_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_typeContext.prototype.Supply0 = function () { return this.tryGetToken(SysVerilogHDLParser.Supply0, 0); };
    Net_typeContext.prototype.Supply1 = function () { return this.tryGetToken(SysVerilogHDLParser.Supply1, 0); };
    Net_typeContext.prototype.Tri = function () { return this.tryGetToken(SysVerilogHDLParser.Tri, 0); };
    Net_typeContext.prototype.Tri_and = function () { return this.tryGetToken(SysVerilogHDLParser.Tri_and, 0); };
    Net_typeContext.prototype.Tri_or = function () { return this.tryGetToken(SysVerilogHDLParser.Tri_or, 0); };
    Net_typeContext.prototype.Tri_reg = function () { return this.tryGetToken(SysVerilogHDLParser.Tri_reg, 0); };
    Net_typeContext.prototype.Tri0 = function () { return this.tryGetToken(SysVerilogHDLParser.Tri0, 0); };
    Net_typeContext.prototype.Tri1 = function () { return this.tryGetToken(SysVerilogHDLParser.Tri1, 0); };
    Net_typeContext.prototype.Uwire = function () { return this.tryGetToken(SysVerilogHDLParser.Uwire, 0); };
    Net_typeContext.prototype.Wire = function () { return this.tryGetToken(SysVerilogHDLParser.Wire, 0); };
    Net_typeContext.prototype.Wand = function () { return this.tryGetToken(SysVerilogHDLParser.Wand, 0); };
    Net_typeContext.prototype.Wor = function () { return this.tryGetToken(SysVerilogHDLParser.Wor, 0); };
    Net_typeContext.prototype.NONE = function () { return this.tryGetToken(SysVerilogHDLParser.NONE, 0); };
    Object.defineProperty(Net_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_net_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_type) {
            listener.enterNet_type(this);
        }
    };
    // @Override
    Net_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_type) {
            listener.exitNet_type(this);
        }
    };
    // @Override
    Net_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_type) {
            return visitor.visitNet_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_typeContext = Net_typeContext;
var Drive_strengthContext = /** @class */ (function (_super) {
    __extends(Drive_strengthContext, _super);
    function Drive_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Drive_strengthContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Drive_strengthContext.prototype.drive_strength_value_0 = function () {
        return this.getRuleContext(0, Drive_strength_value_0Context);
    };
    Drive_strengthContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Drive_strengthContext.prototype.drive_strength_value_1 = function () {
        return this.getRuleContext(0, Drive_strength_value_1Context);
    };
    Drive_strengthContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Drive_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_drive_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Drive_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterDrive_strength) {
            listener.enterDrive_strength(this);
        }
    };
    // @Override
    Drive_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitDrive_strength) {
            listener.exitDrive_strength(this);
        }
    };
    // @Override
    Drive_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitDrive_strength) {
            return visitor.visitDrive_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Drive_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Drive_strengthContext = Drive_strengthContext;
var Drive_strength_value_0Context = /** @class */ (function (_super) {
    __extends(Drive_strength_value_0Context, _super);
    function Drive_strength_value_0Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Drive_strength_value_0Context.prototype.strength0 = function () {
        return this.tryGetRuleContext(0, Strength0Context);
    };
    Drive_strength_value_0Context.prototype.strength1 = function () {
        return this.tryGetRuleContext(0, Strength1Context);
    };
    Drive_strength_value_0Context.prototype.highz0 = function () {
        return this.tryGetRuleContext(0, Highz0Context);
    };
    Drive_strength_value_0Context.prototype.highz1 = function () {
        return this.tryGetRuleContext(0, Highz1Context);
    };
    Object.defineProperty(Drive_strength_value_0Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_drive_strength_value_0; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Drive_strength_value_0Context.prototype.enterRule = function (listener) {
        if (listener.enterDrive_strength_value_0) {
            listener.enterDrive_strength_value_0(this);
        }
    };
    // @Override
    Drive_strength_value_0Context.prototype.exitRule = function (listener) {
        if (listener.exitDrive_strength_value_0) {
            listener.exitDrive_strength_value_0(this);
        }
    };
    // @Override
    Drive_strength_value_0Context.prototype.accept = function (visitor) {
        if (visitor.visitDrive_strength_value_0) {
            return visitor.visitDrive_strength_value_0(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Drive_strength_value_0Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Drive_strength_value_0Context = Drive_strength_value_0Context;
var Drive_strength_value_1Context = /** @class */ (function (_super) {
    __extends(Drive_strength_value_1Context, _super);
    function Drive_strength_value_1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Drive_strength_value_1Context.prototype.strength0 = function () {
        return this.tryGetRuleContext(0, Strength0Context);
    };
    Drive_strength_value_1Context.prototype.strength1 = function () {
        return this.tryGetRuleContext(0, Strength1Context);
    };
    Drive_strength_value_1Context.prototype.highz0 = function () {
        return this.tryGetRuleContext(0, Highz0Context);
    };
    Drive_strength_value_1Context.prototype.highz1 = function () {
        return this.tryGetRuleContext(0, Highz1Context);
    };
    Object.defineProperty(Drive_strength_value_1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_drive_strength_value_1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Drive_strength_value_1Context.prototype.enterRule = function (listener) {
        if (listener.enterDrive_strength_value_1) {
            listener.enterDrive_strength_value_1(this);
        }
    };
    // @Override
    Drive_strength_value_1Context.prototype.exitRule = function (listener) {
        if (listener.exitDrive_strength_value_1) {
            listener.exitDrive_strength_value_1(this);
        }
    };
    // @Override
    Drive_strength_value_1Context.prototype.accept = function (visitor) {
        if (visitor.visitDrive_strength_value_1) {
            return visitor.visitDrive_strength_value_1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Drive_strength_value_1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Drive_strength_value_1Context = Drive_strength_value_1Context;
var Strength0Context = /** @class */ (function (_super) {
    __extends(Strength0Context, _super);
    function Strength0Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Strength0Context.prototype.Supply0 = function () { return this.tryGetToken(SysVerilogHDLParser.Supply0, 0); };
    Strength0Context.prototype.Strong0 = function () { return this.tryGetToken(SysVerilogHDLParser.Strong0, 0); };
    Strength0Context.prototype.Pull0 = function () { return this.tryGetToken(SysVerilogHDLParser.Pull0, 0); };
    Strength0Context.prototype.Weak0 = function () { return this.tryGetToken(SysVerilogHDLParser.Weak0, 0); };
    Object.defineProperty(Strength0Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_strength0; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Strength0Context.prototype.enterRule = function (listener) {
        if (listener.enterStrength0) {
            listener.enterStrength0(this);
        }
    };
    // @Override
    Strength0Context.prototype.exitRule = function (listener) {
        if (listener.exitStrength0) {
            listener.exitStrength0(this);
        }
    };
    // @Override
    Strength0Context.prototype.accept = function (visitor) {
        if (visitor.visitStrength0) {
            return visitor.visitStrength0(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Strength0Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Strength0Context = Strength0Context;
var Strength1Context = /** @class */ (function (_super) {
    __extends(Strength1Context, _super);
    function Strength1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Strength1Context.prototype.Supply1 = function () { return this.tryGetToken(SysVerilogHDLParser.Supply1, 0); };
    Strength1Context.prototype.Strong1 = function () { return this.tryGetToken(SysVerilogHDLParser.Strong1, 0); };
    Strength1Context.prototype.Pull1 = function () { return this.tryGetToken(SysVerilogHDLParser.Pull1, 0); };
    Strength1Context.prototype.Weak1 = function () { return this.tryGetToken(SysVerilogHDLParser.Weak1, 0); };
    Object.defineProperty(Strength1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_strength1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Strength1Context.prototype.enterRule = function (listener) {
        if (listener.enterStrength1) {
            listener.enterStrength1(this);
        }
    };
    // @Override
    Strength1Context.prototype.exitRule = function (listener) {
        if (listener.exitStrength1) {
            listener.exitStrength1(this);
        }
    };
    // @Override
    Strength1Context.prototype.accept = function (visitor) {
        if (visitor.visitStrength1) {
            return visitor.visitStrength1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Strength1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Strength1Context = Strength1Context;
var Highz0Context = /** @class */ (function (_super) {
    __extends(Highz0Context, _super);
    function Highz0Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Highz0Context.prototype.Highz0 = function () { return this.getToken(SysVerilogHDLParser.Highz0, 0); };
    Object.defineProperty(Highz0Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_highz0; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Highz0Context.prototype.enterRule = function (listener) {
        if (listener.enterHighz0) {
            listener.enterHighz0(this);
        }
    };
    // @Override
    Highz0Context.prototype.exitRule = function (listener) {
        if (listener.exitHighz0) {
            listener.exitHighz0(this);
        }
    };
    // @Override
    Highz0Context.prototype.accept = function (visitor) {
        if (visitor.visitHighz0) {
            return visitor.visitHighz0(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Highz0Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Highz0Context = Highz0Context;
var Highz1Context = /** @class */ (function (_super) {
    __extends(Highz1Context, _super);
    function Highz1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Highz1Context.prototype.Highz1 = function () { return this.getToken(SysVerilogHDLParser.Highz1, 0); };
    Object.defineProperty(Highz1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_highz1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Highz1Context.prototype.enterRule = function (listener) {
        if (listener.enterHighz1) {
            listener.enterHighz1(this);
        }
    };
    // @Override
    Highz1Context.prototype.exitRule = function (listener) {
        if (listener.exitHighz1) {
            listener.exitHighz1(this);
        }
    };
    // @Override
    Highz1Context.prototype.accept = function (visitor) {
        if (visitor.visitHighz1) {
            return visitor.visitHighz1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Highz1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Highz1Context = Highz1Context;
var Charge_strengthContext = /** @class */ (function (_super) {
    __extends(Charge_strengthContext, _super);
    function Charge_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Charge_strengthContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Charge_strengthContext.prototype.charge_size = function () {
        return this.getRuleContext(0, Charge_sizeContext);
    };
    Charge_strengthContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Charge_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_charge_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Charge_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterCharge_strength) {
            listener.enterCharge_strength(this);
        }
    };
    // @Override
    Charge_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitCharge_strength) {
            listener.exitCharge_strength(this);
        }
    };
    // @Override
    Charge_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitCharge_strength) {
            return visitor.visitCharge_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Charge_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Charge_strengthContext = Charge_strengthContext;
var Charge_sizeContext = /** @class */ (function (_super) {
    __extends(Charge_sizeContext, _super);
    function Charge_sizeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Charge_sizeContext.prototype.Small = function () { return this.tryGetToken(SysVerilogHDLParser.Small, 0); };
    Charge_sizeContext.prototype.Medium = function () { return this.tryGetToken(SysVerilogHDLParser.Medium, 0); };
    Charge_sizeContext.prototype.Large = function () { return this.tryGetToken(SysVerilogHDLParser.Large, 0); };
    Object.defineProperty(Charge_sizeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_charge_size; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Charge_sizeContext.prototype.enterRule = function (listener) {
        if (listener.enterCharge_size) {
            listener.enterCharge_size(this);
        }
    };
    // @Override
    Charge_sizeContext.prototype.exitRule = function (listener) {
        if (listener.exitCharge_size) {
            listener.exitCharge_size(this);
        }
    };
    // @Override
    Charge_sizeContext.prototype.accept = function (visitor) {
        if (visitor.visitCharge_size) {
            return visitor.visitCharge_size(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Charge_sizeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Charge_sizeContext = Charge_sizeContext;
var List_of_variable_descriptionsContext = /** @class */ (function (_super) {
    __extends(List_of_variable_descriptionsContext, _super);
    function List_of_variable_descriptionsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_variable_descriptionsContext.prototype.variable_description = function () {
        return this.getRuleContext(0, Variable_descriptionContext);
    };
    List_of_variable_descriptionsContext.prototype.comma_variable_description_star = function () {
        return this.getRuleContext(0, Comma_variable_description_starContext);
    };
    Object.defineProperty(List_of_variable_descriptionsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_variable_descriptions; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_variable_descriptionsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_variable_descriptions) {
            listener.enterList_of_variable_descriptions(this);
        }
    };
    // @Override
    List_of_variable_descriptionsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_variable_descriptions) {
            listener.exitList_of_variable_descriptions(this);
        }
    };
    // @Override
    List_of_variable_descriptionsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_variable_descriptions) {
            return visitor.visitList_of_variable_descriptions(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_variable_descriptionsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_variable_descriptionsContext = List_of_variable_descriptionsContext;
var Comma_variable_description_starContext = /** @class */ (function (_super) {
    __extends(Comma_variable_description_starContext, _super);
    function Comma_variable_description_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_variable_description_starContext.prototype.comma_variable_description = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_variable_descriptionContext);
        }
        else {
            return this.getRuleContext(i, Comma_variable_descriptionContext);
        }
    };
    Object.defineProperty(Comma_variable_description_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_variable_description_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_variable_description_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_variable_description_star) {
            listener.enterComma_variable_description_star(this);
        }
    };
    // @Override
    Comma_variable_description_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_variable_description_star) {
            listener.exitComma_variable_description_star(this);
        }
    };
    // @Override
    Comma_variable_description_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_variable_description_star) {
            return visitor.visitComma_variable_description_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_variable_description_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_variable_description_starContext = Comma_variable_description_starContext;
var Comma_variable_descriptionContext = /** @class */ (function (_super) {
    __extends(Comma_variable_descriptionContext, _super);
    function Comma_variable_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_variable_descriptionContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_variable_descriptionContext.prototype.variable_description = function () {
        return this.getRuleContext(0, Variable_descriptionContext);
    };
    Object.defineProperty(Comma_variable_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_variable_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_variable_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_variable_description) {
            listener.enterComma_variable_description(this);
        }
    };
    // @Override
    Comma_variable_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_variable_description) {
            listener.exitComma_variable_description(this);
        }
    };
    // @Override
    Comma_variable_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_variable_description) {
            return visitor.visitComma_variable_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_variable_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_variable_descriptionContext = Comma_variable_descriptionContext;
var Variable_descriptionContext = /** @class */ (function (_super) {
    __extends(Variable_descriptionContext, _super);
    function Variable_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_descriptionContext.prototype.variable_identifier = function () {
        return this.getRuleContext(0, Variable_identifierContext);
    };
    Variable_descriptionContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Variable_descriptionContext.prototype.Equal = function () { return this.tryGetToken(SysVerilogHDLParser.Equal, 0); };
    Variable_descriptionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Variable_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_description) {
            listener.enterVariable_description(this);
        }
    };
    // @Override
    Variable_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_description) {
            listener.exitVariable_description(this);
        }
    };
    // @Override
    Variable_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_description) {
            return visitor.visitVariable_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_descriptionContext = Variable_descriptionContext;
var Variable_identifierContext = /** @class */ (function (_super) {
    __extends(Variable_identifierContext, _super);
    function Variable_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Variable_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_identifier) {
            listener.enterVariable_identifier(this);
        }
    };
    // @Override
    Variable_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_identifier) {
            listener.exitVariable_identifier(this);
        }
    };
    // @Override
    Variable_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_identifier) {
            return visitor.visitVariable_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_identifierContext = Variable_identifierContext;
var List_of_hierarchical_variable_descriptionsContext = /** @class */ (function (_super) {
    __extends(List_of_hierarchical_variable_descriptionsContext, _super);
    function List_of_hierarchical_variable_descriptionsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_hierarchical_variable_descriptionsContext.prototype.hierarchical_variable_description = function () {
        return this.getRuleContext(0, Hierarchical_variable_descriptionContext);
    };
    List_of_hierarchical_variable_descriptionsContext.prototype.comma_hierarchical_variable_description_star = function () {
        return this.getRuleContext(0, Comma_hierarchical_variable_description_starContext);
    };
    Object.defineProperty(List_of_hierarchical_variable_descriptionsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_hierarchical_variable_descriptions; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_hierarchical_variable_descriptionsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_hierarchical_variable_descriptions) {
            listener.enterList_of_hierarchical_variable_descriptions(this);
        }
    };
    // @Override
    List_of_hierarchical_variable_descriptionsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_hierarchical_variable_descriptions) {
            listener.exitList_of_hierarchical_variable_descriptions(this);
        }
    };
    // @Override
    List_of_hierarchical_variable_descriptionsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_hierarchical_variable_descriptions) {
            return visitor.visitList_of_hierarchical_variable_descriptions(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_hierarchical_variable_descriptionsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_hierarchical_variable_descriptionsContext = List_of_hierarchical_variable_descriptionsContext;
var Comma_hierarchical_variable_description_starContext = /** @class */ (function (_super) {
    __extends(Comma_hierarchical_variable_description_starContext, _super);
    function Comma_hierarchical_variable_description_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_hierarchical_variable_description_starContext.prototype.comma_hierarchical_variable_description = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_hierarchical_variable_descriptionContext);
        }
        else {
            return this.getRuleContext(i, Comma_hierarchical_variable_descriptionContext);
        }
    };
    Object.defineProperty(Comma_hierarchical_variable_description_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_hierarchical_variable_description_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_hierarchical_variable_description_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_hierarchical_variable_description_star) {
            listener.enterComma_hierarchical_variable_description_star(this);
        }
    };
    // @Override
    Comma_hierarchical_variable_description_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_hierarchical_variable_description_star) {
            listener.exitComma_hierarchical_variable_description_star(this);
        }
    };
    // @Override
    Comma_hierarchical_variable_description_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_hierarchical_variable_description_star) {
            return visitor.visitComma_hierarchical_variable_description_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_hierarchical_variable_description_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_hierarchical_variable_description_starContext = Comma_hierarchical_variable_description_starContext;
var Comma_hierarchical_variable_descriptionContext = /** @class */ (function (_super) {
    __extends(Comma_hierarchical_variable_descriptionContext, _super);
    function Comma_hierarchical_variable_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_hierarchical_variable_descriptionContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_hierarchical_variable_descriptionContext.prototype.hierarchical_variable_description = function () {
        return this.getRuleContext(0, Hierarchical_variable_descriptionContext);
    };
    Object.defineProperty(Comma_hierarchical_variable_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_hierarchical_variable_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_hierarchical_variable_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_hierarchical_variable_description) {
            listener.enterComma_hierarchical_variable_description(this);
        }
    };
    // @Override
    Comma_hierarchical_variable_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_hierarchical_variable_description) {
            listener.exitComma_hierarchical_variable_description(this);
        }
    };
    // @Override
    Comma_hierarchical_variable_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_hierarchical_variable_description) {
            return visitor.visitComma_hierarchical_variable_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_hierarchical_variable_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_hierarchical_variable_descriptionContext = Comma_hierarchical_variable_descriptionContext;
var Hierarchical_variable_descriptionContext = /** @class */ (function (_super) {
    __extends(Hierarchical_variable_descriptionContext, _super);
    function Hierarchical_variable_descriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_variable_descriptionContext.prototype.hierarchical_variable_identifier = function () {
        return this.getRuleContext(0, Hierarchical_variable_identifierContext);
    };
    Hierarchical_variable_descriptionContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Hierarchical_variable_descriptionContext.prototype.Equal = function () { return this.tryGetToken(SysVerilogHDLParser.Equal, 0); };
    Hierarchical_variable_descriptionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Hierarchical_variable_descriptionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_variable_description; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_variable_descriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_variable_description) {
            listener.enterHierarchical_variable_description(this);
        }
    };
    // @Override
    Hierarchical_variable_descriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_variable_description) {
            listener.exitHierarchical_variable_description(this);
        }
    };
    // @Override
    Hierarchical_variable_descriptionContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_variable_description) {
            return visitor.visitHierarchical_variable_description(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_variable_descriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_variable_descriptionContext = Hierarchical_variable_descriptionContext;
var Hierarchical_variable_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_variable_identifierContext, _super);
    function Hierarchical_variable_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_variable_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_variable_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_variable_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_variable_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_variable_identifier) {
            listener.enterHierarchical_variable_identifier(this);
        }
    };
    // @Override
    Hierarchical_variable_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_variable_identifier) {
            listener.exitHierarchical_variable_identifier(this);
        }
    };
    // @Override
    Hierarchical_variable_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_variable_identifier) {
            return visitor.visitHierarchical_variable_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_variable_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_variable_identifierContext = Hierarchical_variable_identifierContext;
var Net_declarationContext = /** @class */ (function (_super) {
    __extends(Net_declarationContext, _super);
    function Net_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Net_declarationContext.prototype.net_type = function () {
        return this.getRuleContext(0, Net_typeContext);
    };
    Net_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Net_declarationContext.prototype.user_type = function () {
        return this.tryGetRuleContext(0, User_typeContext);
    };
    Net_declarationContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    Net_declarationContext.prototype.charge_strength = function () {
        return this.tryGetRuleContext(0, Charge_strengthContext);
    };
    Net_declarationContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Net_declarationContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Net_declarationContext.prototype.Vectored = function () { return this.tryGetToken(SysVerilogHDLParser.Vectored, 0); };
    Net_declarationContext.prototype.Scalared = function () { return this.tryGetToken(SysVerilogHDLParser.Scalared, 0); };
    Net_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Net_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Net_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_net_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Net_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterNet_declaration) {
            listener.enterNet_declaration(this);
        }
    };
    // @Override
    Net_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitNet_declaration) {
            listener.exitNet_declaration(this);
        }
    };
    // @Override
    Net_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitNet_declaration) {
            return visitor.visitNet_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Net_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Net_declarationContext = Net_declarationContext;
var Reg_declarationContext = /** @class */ (function (_super) {
    __extends(Reg_declarationContext, _super);
    function Reg_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Reg_declarationContext.prototype.Reg = function () { return this.getToken(SysVerilogHDLParser.Reg, 0); };
    Reg_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Reg_declarationContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Reg_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Reg_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Reg_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_reg_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Reg_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterReg_declaration) {
            listener.enterReg_declaration(this);
        }
    };
    // @Override
    Reg_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitReg_declaration) {
            listener.exitReg_declaration(this);
        }
    };
    // @Override
    Reg_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitReg_declaration) {
            return visitor.visitReg_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Reg_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Reg_declarationContext = Reg_declarationContext;
var Logic_declarationContext = /** @class */ (function (_super) {
    __extends(Logic_declarationContext, _super);
    function Logic_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Logic_declarationContext.prototype.Logic = function () { return this.getToken(SysVerilogHDLParser.Logic, 0); };
    Logic_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Logic_declarationContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Logic_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Logic_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Logic_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_logic_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Logic_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterLogic_declaration) {
            listener.enterLogic_declaration(this);
        }
    };
    // @Override
    Logic_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitLogic_declaration) {
            listener.exitLogic_declaration(this);
        }
    };
    // @Override
    Logic_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitLogic_declaration) {
            return visitor.visitLogic_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Logic_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Logic_declarationContext = Logic_declarationContext;
var Bits_typeContext = /** @class */ (function (_super) {
    __extends(Bits_typeContext, _super);
    function Bits_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Bits_typeContext.prototype.Bit = function () { return this.tryGetToken(SysVerilogHDLParser.Bit, 0); };
    Bits_typeContext.prototype.Byte = function () { return this.tryGetToken(SysVerilogHDLParser.Byte, 0); };
    Object.defineProperty(Bits_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_bits_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Bits_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterBits_type) {
            listener.enterBits_type(this);
        }
    };
    // @Override
    Bits_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitBits_type) {
            listener.exitBits_type(this);
        }
    };
    // @Override
    Bits_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitBits_type) {
            return visitor.visitBits_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Bits_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Bits_typeContext = Bits_typeContext;
var Bits_declarationContext = /** @class */ (function (_super) {
    __extends(Bits_declarationContext, _super);
    function Bits_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Bits_declarationContext.prototype.bits_type = function () {
        return this.getRuleContext(0, Bits_typeContext);
    };
    Bits_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Bits_declarationContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Bits_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Bits_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Bits_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_bits_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Bits_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterBits_declaration) {
            listener.enterBits_declaration(this);
        }
    };
    // @Override
    Bits_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitBits_declaration) {
            listener.exitBits_declaration(this);
        }
    };
    // @Override
    Bits_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitBits_declaration) {
            return visitor.visitBits_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Bits_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Bits_declarationContext = Bits_declarationContext;
var Integer_declarationContext = /** @class */ (function (_super) {
    __extends(Integer_declarationContext, _super);
    function Integer_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Integer_declarationContext.prototype.Integer = function () { return this.getToken(SysVerilogHDLParser.Integer, 0); };
    Integer_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Integer_declarationContext.prototype.Automatic = function () { return this.tryGetToken(SysVerilogHDLParser.Automatic, 0); };
    Integer_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Integer_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Integer_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_integer_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Integer_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInteger_declaration) {
            listener.enterInteger_declaration(this);
        }
    };
    // @Override
    Integer_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInteger_declaration) {
            listener.exitInteger_declaration(this);
        }
    };
    // @Override
    Integer_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInteger_declaration) {
            return visitor.visitInteger_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Integer_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Integer_declarationContext = Integer_declarationContext;
var Int_declarationContext = /** @class */ (function (_super) {
    __extends(Int_declarationContext, _super);
    function Int_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Int_declarationContext.prototype.Int = function () { return this.getToken(SysVerilogHDLParser.Int, 0); };
    Int_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Int_declarationContext.prototype.Automatic = function () { return this.tryGetToken(SysVerilogHDLParser.Automatic, 0); };
    Int_declarationContext.prototype.Static = function () { return this.tryGetToken(SysVerilogHDLParser.Static, 0); };
    Int_declarationContext.prototype.Const = function () { return this.tryGetToken(SysVerilogHDLParser.Const, 0); };
    Int_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Int_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Int_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_int_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Int_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterInt_declaration) {
            listener.enterInt_declaration(this);
        }
    };
    // @Override
    Int_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitInt_declaration) {
            listener.exitInt_declaration(this);
        }
    };
    // @Override
    Int_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitInt_declaration) {
            return visitor.visitInt_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Int_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Int_declarationContext = Int_declarationContext;
var Real_declarationContext = /** @class */ (function (_super) {
    __extends(Real_declarationContext, _super);
    function Real_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Real_declarationContext.prototype.Real = function () { return this.getToken(SysVerilogHDLParser.Real, 0); };
    Real_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(Real_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_real_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Real_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterReal_declaration) {
            listener.enterReal_declaration(this);
        }
    };
    // @Override
    Real_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitReal_declaration) {
            listener.exitReal_declaration(this);
        }
    };
    // @Override
    Real_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitReal_declaration) {
            return visitor.visitReal_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Real_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Real_declarationContext = Real_declarationContext;
var Time_declarationContext = /** @class */ (function (_super) {
    __extends(Time_declarationContext, _super);
    function Time_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Time_declarationContext.prototype.Time = function () { return this.getToken(SysVerilogHDLParser.Time, 0); };
    Time_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(Time_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_time_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Time_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTime_declaration) {
            listener.enterTime_declaration(this);
        }
    };
    // @Override
    Time_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTime_declaration) {
            listener.exitTime_declaration(this);
        }
    };
    // @Override
    Time_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTime_declaration) {
            return visitor.visitTime_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Time_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Time_declarationContext = Time_declarationContext;
var Realtime_declarationContext = /** @class */ (function (_super) {
    __extends(Realtime_declarationContext, _super);
    function Realtime_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Realtime_declarationContext.prototype.Realtime = function () { return this.getToken(SysVerilogHDLParser.Realtime, 0); };
    Realtime_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(Realtime_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_realtime_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Realtime_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterRealtime_declaration) {
            listener.enterRealtime_declaration(this);
        }
    };
    // @Override
    Realtime_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitRealtime_declaration) {
            listener.exitRealtime_declaration(this);
        }
    };
    // @Override
    Realtime_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitRealtime_declaration) {
            return visitor.visitRealtime_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Realtime_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Realtime_declarationContext = Realtime_declarationContext;
var Event_declarationContext = /** @class */ (function (_super) {
    __extends(Event_declarationContext, _super);
    function Event_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_declarationContext.prototype.Event_keyword = function () { return this.getToken(SysVerilogHDLParser.Event_keyword, 0); };
    Event_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(Event_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_declaration) {
            listener.enterEvent_declaration(this);
        }
    };
    // @Override
    Event_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_declaration) {
            listener.exitEvent_declaration(this);
        }
    };
    // @Override
    Event_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_declaration) {
            return visitor.visitEvent_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_declarationContext = Event_declarationContext;
var Genvar_declarationContext = /** @class */ (function (_super) {
    __extends(Genvar_declarationContext, _super);
    function Genvar_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Genvar_declarationContext.prototype.Genvar = function () { return this.getToken(SysVerilogHDLParser.Genvar, 0); };
    Genvar_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(Genvar_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_genvar_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Genvar_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterGenvar_declaration) {
            listener.enterGenvar_declaration(this);
        }
    };
    // @Override
    Genvar_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitGenvar_declaration) {
            listener.exitGenvar_declaration(this);
        }
    };
    // @Override
    Genvar_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitGenvar_declaration) {
            return visitor.visitGenvar_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Genvar_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Genvar_declarationContext = Genvar_declarationContext;
var Usertype_variable_declarationContext = /** @class */ (function (_super) {
    __extends(Usertype_variable_declarationContext, _super);
    function Usertype_variable_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Usertype_variable_declarationContext.prototype.user_type = function () {
        return this.getRuleContext(0, User_typeContext);
    };
    Usertype_variable_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Usertype_variable_declarationContext.prototype.Automatic = function () { return this.tryGetToken(SysVerilogHDLParser.Automatic, 0); };
    Usertype_variable_declarationContext.prototype.dimension = function () {
        return this.tryGetRuleContext(0, DimensionContext);
    };
    Object.defineProperty(Usertype_variable_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_usertype_variable_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Usertype_variable_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterUsertype_variable_declaration) {
            listener.enterUsertype_variable_declaration(this);
        }
    };
    // @Override
    Usertype_variable_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitUsertype_variable_declaration) {
            listener.exitUsertype_variable_declaration(this);
        }
    };
    // @Override
    Usertype_variable_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitUsertype_variable_declaration) {
            return visitor.visitUsertype_variable_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Usertype_variable_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Usertype_variable_declarationContext = Usertype_variable_declarationContext;
var String_declarationContext = /** @class */ (function (_super) {
    __extends(String_declarationContext, _super);
    function String_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    String_declarationContext.prototype.SVString = function () { return this.getToken(SysVerilogHDLParser.SVString, 0); };
    String_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(String_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_string_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    String_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterString_declaration) {
            listener.enterString_declaration(this);
        }
    };
    // @Override
    String_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitString_declaration) {
            listener.exitString_declaration(this);
        }
    };
    // @Override
    String_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitString_declaration) {
            return visitor.visitString_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return String_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.String_declarationContext = String_declarationContext;
var Struct_declarationContext = /** @class */ (function (_super) {
    __extends(Struct_declarationContext, _super);
    function Struct_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Struct_declarationContext.prototype.struct_type = function () {
        return this.getRuleContext(0, Struct_typeContext);
    };
    Struct_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(Struct_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_struct_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Struct_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterStruct_declaration) {
            listener.enterStruct_declaration(this);
        }
    };
    // @Override
    Struct_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitStruct_declaration) {
            listener.exitStruct_declaration(this);
        }
    };
    // @Override
    Struct_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitStruct_declaration) {
            return visitor.visitStruct_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Struct_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Struct_declarationContext = Struct_declarationContext;
var Enum_declarationContext = /** @class */ (function (_super) {
    __extends(Enum_declarationContext, _super);
    function Enum_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enum_declarationContext.prototype.enumerated_type = function () {
        return this.getRuleContext(0, Enumerated_typeContext);
    };
    Enum_declarationContext.prototype.list_of_variable_descriptions = function () {
        return this.getRuleContext(0, List_of_variable_descriptionsContext);
    };
    Object.defineProperty(Enum_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enum_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enum_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterEnum_declaration) {
            listener.enterEnum_declaration(this);
        }
    };
    // @Override
    Enum_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitEnum_declaration) {
            listener.exitEnum_declaration(this);
        }
    };
    // @Override
    Enum_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitEnum_declaration) {
            return visitor.visitEnum_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enum_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enum_declarationContext = Enum_declarationContext;
var Function_declarationContext = /** @class */ (function (_super) {
    __extends(Function_declarationContext, _super);
    function Function_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_declarationContext.prototype.Function = function () { return this.getToken(SysVerilogHDLParser.Function, 0); };
    Function_declarationContext.prototype.function_identifier = function () {
        return this.getRuleContext(0, Function_identifierContext);
    };
    Function_declarationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Function_declarationContext.prototype.function_item_declaration_star = function () {
        return this.getRuleContext(0, Function_item_declaration_starContext);
    };
    Function_declarationContext.prototype.function_statement = function () {
        return this.getRuleContext(0, Function_statementContext);
    };
    Function_declarationContext.prototype.Endfunction = function () { return this.getToken(SysVerilogHDLParser.Endfunction, 0); };
    Function_declarationContext.prototype.Automatic = function () { return this.tryGetToken(SysVerilogHDLParser.Automatic, 0); };
    Function_declarationContext.prototype.function_type = function () {
        return this.tryGetRuleContext(0, Function_typeContext);
    };
    Function_declarationContext.prototype.dimension = function () {
        return this.tryGetRuleContext(0, DimensionContext);
    };
    Function_declarationContext.prototype.function_interface = function () {
        return this.tryGetRuleContext(0, Function_interfaceContext);
    };
    Function_declarationContext.prototype.colon_function_identifier = function () {
        return this.tryGetRuleContext(0, Colon_function_identifierContext);
    };
    Function_declarationContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Function_declarationContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Function_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_declaration) {
            listener.enterFunction_declaration(this);
        }
    };
    // @Override
    Function_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_declaration) {
            listener.exitFunction_declaration(this);
        }
    };
    // @Override
    Function_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_declaration) {
            return visitor.visitFunction_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_declarationContext = Function_declarationContext;
var Function_typeContext = /** @class */ (function (_super) {
    __extends(Function_typeContext, _super);
    function Function_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_typeContext.prototype.Logic = function () { return this.tryGetToken(SysVerilogHDLParser.Logic, 0); };
    Function_typeContext.prototype.Integer = function () { return this.tryGetToken(SysVerilogHDLParser.Integer, 0); };
    Function_typeContext.prototype.Int = function () { return this.tryGetToken(SysVerilogHDLParser.Int, 0); };
    Function_typeContext.prototype.Real = function () { return this.tryGetToken(SysVerilogHDLParser.Real, 0); };
    Function_typeContext.prototype.Realtime = function () { return this.tryGetToken(SysVerilogHDLParser.Realtime, 0); };
    Function_typeContext.prototype.Time = function () { return this.tryGetToken(SysVerilogHDLParser.Time, 0); };
    Function_typeContext.prototype.Reg = function () { return this.tryGetToken(SysVerilogHDLParser.Reg, 0); };
    Function_typeContext.prototype.SVString = function () { return this.tryGetToken(SysVerilogHDLParser.SVString, 0); };
    Function_typeContext.prototype.bits_type = function () {
        return this.tryGetRuleContext(0, Bits_typeContext);
    };
    Function_typeContext.prototype.user_type = function () {
        return this.tryGetRuleContext(0, User_typeContext);
    };
    Object.defineProperty(Function_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_type) {
            listener.enterFunction_type(this);
        }
    };
    // @Override
    Function_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_type) {
            listener.exitFunction_type(this);
        }
    };
    // @Override
    Function_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_type) {
            return visitor.visitFunction_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_typeContext = Function_typeContext;
var Function_identifierContext = /** @class */ (function (_super) {
    __extends(Function_identifierContext, _super);
    function Function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_identifier) {
            listener.enterFunction_identifier(this);
        }
    };
    // @Override
    Function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_identifier) {
            listener.exitFunction_identifier(this);
        }
    };
    // @Override
    Function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_identifier) {
            return visitor.visitFunction_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_identifierContext = Function_identifierContext;
var Function_interfaceContext = /** @class */ (function (_super) {
    __extends(Function_interfaceContext, _super);
    function Function_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Function_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Function_interfaceContext.prototype.list_of_tf_interface_ports = function () {
        return this.tryGetRuleContext(0, List_of_tf_interface_portsContext);
    };
    Object.defineProperty(Function_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_interface) {
            listener.enterFunction_interface(this);
        }
    };
    // @Override
    Function_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_interface) {
            listener.exitFunction_interface(this);
        }
    };
    // @Override
    Function_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_interface) {
            return visitor.visitFunction_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_interfaceContext = Function_interfaceContext;
var Function_item_declaration_starContext = /** @class */ (function (_super) {
    __extends(Function_item_declaration_starContext, _super);
    function Function_item_declaration_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_item_declaration_starContext.prototype.function_item_declaration_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Function_item_declaration_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Function_item_declaration_semicolonContext);
        }
    };
    Object.defineProperty(Function_item_declaration_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_item_declaration_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_item_declaration_starContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_item_declaration_star) {
            listener.enterFunction_item_declaration_star(this);
        }
    };
    // @Override
    Function_item_declaration_starContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_item_declaration_star) {
            listener.exitFunction_item_declaration_star(this);
        }
    };
    // @Override
    Function_item_declaration_starContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_item_declaration_star) {
            return visitor.visitFunction_item_declaration_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_item_declaration_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_item_declaration_starContext = Function_item_declaration_starContext;
var Function_item_declaration_semicolonContext = /** @class */ (function (_super) {
    __extends(Function_item_declaration_semicolonContext, _super);
    function Function_item_declaration_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_item_declaration_semicolonContext.prototype.function_item_declaration = function () {
        return this.getRuleContext(0, Function_item_declarationContext);
    };
    Function_item_declaration_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Function_item_declaration_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_item_declaration_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_item_declaration_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_item_declaration_semicolon) {
            listener.enterFunction_item_declaration_semicolon(this);
        }
    };
    // @Override
    Function_item_declaration_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_item_declaration_semicolon) {
            listener.exitFunction_item_declaration_semicolon(this);
        }
    };
    // @Override
    Function_item_declaration_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_item_declaration_semicolon) {
            return visitor.visitFunction_item_declaration_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_item_declaration_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_item_declaration_semicolonContext = Function_item_declaration_semicolonContext;
var Function_item_declarationContext = /** @class */ (function (_super) {
    __extends(Function_item_declarationContext, _super);
    function Function_item_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_item_declarationContext.prototype.block_item_declaration = function () {
        return this.tryGetRuleContext(0, Block_item_declarationContext);
    };
    Function_item_declarationContext.prototype.port_declaration = function () {
        return this.tryGetRuleContext(0, Port_declarationContext);
    };
    Object.defineProperty(Function_item_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_item_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_item_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_item_declaration) {
            listener.enterFunction_item_declaration(this);
        }
    };
    // @Override
    Function_item_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_item_declaration) {
            listener.exitFunction_item_declaration(this);
        }
    };
    // @Override
    Function_item_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_item_declaration) {
            return visitor.visitFunction_item_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_item_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_item_declarationContext = Function_item_declarationContext;
var Function_statementContext = /** @class */ (function (_super) {
    __extends(Function_statementContext, _super);
    function Function_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_statementContext.prototype.statement_star = function () {
        return this.getRuleContext(0, Statement_starContext);
    };
    Object.defineProperty(Function_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_statement) {
            listener.enterFunction_statement(this);
        }
    };
    // @Override
    Function_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_statement) {
            listener.exitFunction_statement(this);
        }
    };
    // @Override
    Function_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_statement) {
            return visitor.visitFunction_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_statementContext = Function_statementContext;
var Colon_function_identifierContext = /** @class */ (function (_super) {
    __extends(Colon_function_identifierContext, _super);
    function Colon_function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Colon_function_identifierContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Colon_function_identifierContext.prototype.function_identifier = function () {
        return this.getRuleContext(0, Function_identifierContext);
    };
    Object.defineProperty(Colon_function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_colon_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Colon_function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterColon_function_identifier) {
            listener.enterColon_function_identifier(this);
        }
    };
    // @Override
    Colon_function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitColon_function_identifier) {
            listener.exitColon_function_identifier(this);
        }
    };
    // @Override
    Colon_function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitColon_function_identifier) {
            return visitor.visitColon_function_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Colon_function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Colon_function_identifierContext = Colon_function_identifierContext;
var Task_declarationContext = /** @class */ (function (_super) {
    __extends(Task_declarationContext, _super);
    function Task_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_declarationContext.prototype.Task = function () { return this.getToken(SysVerilogHDLParser.Task, 0); };
    Task_declarationContext.prototype.task_identifier = function () {
        return this.getRuleContext(0, Task_identifierContext);
    };
    Task_declarationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Task_declarationContext.prototype.task_item_declaration_star = function () {
        return this.getRuleContext(0, Task_item_declaration_starContext);
    };
    Task_declarationContext.prototype.task_statement = function () {
        return this.getRuleContext(0, Task_statementContext);
    };
    Task_declarationContext.prototype.Endtask = function () { return this.getToken(SysVerilogHDLParser.Endtask, 0); };
    Task_declarationContext.prototype.Automatic = function () { return this.tryGetToken(SysVerilogHDLParser.Automatic, 0); };
    Task_declarationContext.prototype.task_interface = function () {
        return this.tryGetRuleContext(0, Task_interfaceContext);
    };
    Object.defineProperty(Task_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_declaration) {
            listener.enterTask_declaration(this);
        }
    };
    // @Override
    Task_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_declaration) {
            listener.exitTask_declaration(this);
        }
    };
    // @Override
    Task_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_declaration) {
            return visitor.visitTask_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_declarationContext = Task_declarationContext;
var Task_identifierContext = /** @class */ (function (_super) {
    __extends(Task_identifierContext, _super);
    function Task_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Task_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_identifier) {
            listener.enterTask_identifier(this);
        }
    };
    // @Override
    Task_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_identifier) {
            listener.exitTask_identifier(this);
        }
    };
    // @Override
    Task_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_identifier) {
            return visitor.visitTask_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_identifierContext = Task_identifierContext;
var Task_interfaceContext = /** @class */ (function (_super) {
    __extends(Task_interfaceContext, _super);
    function Task_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Task_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Task_interfaceContext.prototype.list_of_tf_interface_ports = function () {
        return this.tryGetRuleContext(0, List_of_tf_interface_portsContext);
    };
    Object.defineProperty(Task_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_interface) {
            listener.enterTask_interface(this);
        }
    };
    // @Override
    Task_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_interface) {
            listener.exitTask_interface(this);
        }
    };
    // @Override
    Task_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_interface) {
            return visitor.visitTask_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_interfaceContext = Task_interfaceContext;
var Task_item_declaration_semicolonContext = /** @class */ (function (_super) {
    __extends(Task_item_declaration_semicolonContext, _super);
    function Task_item_declaration_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_item_declaration_semicolonContext.prototype.task_item_declaration = function () {
        return this.getRuleContext(0, Task_item_declarationContext);
    };
    Task_item_declaration_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Task_item_declaration_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_item_declaration_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_item_declaration_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_item_declaration_semicolon) {
            listener.enterTask_item_declaration_semicolon(this);
        }
    };
    // @Override
    Task_item_declaration_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_item_declaration_semicolon) {
            listener.exitTask_item_declaration_semicolon(this);
        }
    };
    // @Override
    Task_item_declaration_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_item_declaration_semicolon) {
            return visitor.visitTask_item_declaration_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_item_declaration_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_item_declaration_semicolonContext = Task_item_declaration_semicolonContext;
var Task_item_declarationContext = /** @class */ (function (_super) {
    __extends(Task_item_declarationContext, _super);
    function Task_item_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_item_declarationContext.prototype.block_item_declaration = function () {
        return this.tryGetRuleContext(0, Block_item_declarationContext);
    };
    Task_item_declarationContext.prototype.port_declaration = function () {
        return this.tryGetRuleContext(0, Port_declarationContext);
    };
    Object.defineProperty(Task_item_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_item_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_item_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_item_declaration) {
            listener.enterTask_item_declaration(this);
        }
    };
    // @Override
    Task_item_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_item_declaration) {
            listener.exitTask_item_declaration(this);
        }
    };
    // @Override
    Task_item_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_item_declaration) {
            return visitor.visitTask_item_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_item_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_item_declarationContext = Task_item_declarationContext;
var Task_item_declaration_starContext = /** @class */ (function (_super) {
    __extends(Task_item_declaration_starContext, _super);
    function Task_item_declaration_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_item_declaration_starContext.prototype.task_item_declaration_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Task_item_declaration_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Task_item_declaration_semicolonContext);
        }
    };
    Object.defineProperty(Task_item_declaration_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_item_declaration_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_item_declaration_starContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_item_declaration_star) {
            listener.enterTask_item_declaration_star(this);
        }
    };
    // @Override
    Task_item_declaration_starContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_item_declaration_star) {
            listener.exitTask_item_declaration_star(this);
        }
    };
    // @Override
    Task_item_declaration_starContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_item_declaration_star) {
            return visitor.visitTask_item_declaration_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_item_declaration_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_item_declaration_starContext = Task_item_declaration_starContext;
var Task_statementContext = /** @class */ (function (_super) {
    __extends(Task_statementContext, _super);
    function Task_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_statementContext.prototype.statement_star = function () {
        return this.getRuleContext(0, Statement_starContext);
    };
    Object.defineProperty(Task_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_statement) {
            listener.enterTask_statement(this);
        }
    };
    // @Override
    Task_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_statement) {
            listener.exitTask_statement(this);
        }
    };
    // @Override
    Task_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_statement) {
            return visitor.visitTask_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_statementContext = Task_statementContext;
var Struct_item_semicolonContext = /** @class */ (function (_super) {
    __extends(Struct_item_semicolonContext, _super);
    function Struct_item_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Struct_item_semicolonContext.prototype.struct_item = function () {
        return this.getRuleContext(0, Struct_itemContext);
    };
    Struct_item_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Struct_item_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_struct_item_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Struct_item_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterStruct_item_semicolon) {
            listener.enterStruct_item_semicolon(this);
        }
    };
    // @Override
    Struct_item_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitStruct_item_semicolon) {
            listener.exitStruct_item_semicolon(this);
        }
    };
    // @Override
    Struct_item_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitStruct_item_semicolon) {
            return visitor.visitStruct_item_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Struct_item_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Struct_item_semicolonContext = Struct_item_semicolonContext;
var Struct_item_starContext = /** @class */ (function (_super) {
    __extends(Struct_item_starContext, _super);
    function Struct_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Struct_item_starContext.prototype.struct_item_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Struct_item_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Struct_item_semicolonContext);
        }
    };
    Object.defineProperty(Struct_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_struct_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Struct_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterStruct_item_star) {
            listener.enterStruct_item_star(this);
        }
    };
    // @Override
    Struct_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitStruct_item_star) {
            listener.exitStruct_item_star(this);
        }
    };
    // @Override
    Struct_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitStruct_item_star) {
            return visitor.visitStruct_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Struct_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Struct_item_starContext = Struct_item_starContext;
var Struct_itemContext = /** @class */ (function (_super) {
    __extends(Struct_itemContext, _super);
    function Struct_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Struct_itemContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Struct_itemContext.prototype.bits_declaration = function () {
        return this.tryGetRuleContext(0, Bits_declarationContext);
    };
    Struct_itemContext.prototype.int_declaration = function () {
        return this.tryGetRuleContext(0, Int_declarationContext);
    };
    Struct_itemContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Struct_itemContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Struct_itemContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Object.defineProperty(Struct_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_struct_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Struct_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterStruct_item) {
            listener.enterStruct_item(this);
        }
    };
    // @Override
    Struct_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitStruct_item) {
            listener.exitStruct_item(this);
        }
    };
    // @Override
    Struct_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitStruct_item) {
            return visitor.visitStruct_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Struct_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Struct_itemContext = Struct_itemContext;
var Struct_typeContext = /** @class */ (function (_super) {
    __extends(Struct_typeContext, _super);
    function Struct_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Struct_typeContext.prototype.struct_keyword = function () {
        return this.getRuleContext(0, Struct_keywordContext);
    };
    Struct_typeContext.prototype.Left_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_curly_bracket, 0); };
    Struct_typeContext.prototype.struct_item_star = function () {
        return this.getRuleContext(0, Struct_item_starContext);
    };
    Struct_typeContext.prototype.Right_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_curly_bracket, 0); };
    Struct_typeContext.prototype.Packed = function () { return this.tryGetToken(SysVerilogHDLParser.Packed, 0); };
    Object.defineProperty(Struct_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_struct_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Struct_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterStruct_type) {
            listener.enterStruct_type(this);
        }
    };
    // @Override
    Struct_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitStruct_type) {
            listener.exitStruct_type(this);
        }
    };
    // @Override
    Struct_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitStruct_type) {
            return visitor.visitStruct_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Struct_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Struct_typeContext = Struct_typeContext;
var Enum_typeContext = /** @class */ (function (_super) {
    __extends(Enum_typeContext, _super);
    function Enum_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enum_typeContext.prototype.Integer = function () { return this.tryGetToken(SysVerilogHDLParser.Integer, 0); };
    Enum_typeContext.prototype.Logic = function () { return this.tryGetToken(SysVerilogHDLParser.Logic, 0); };
    Enum_typeContext.prototype.bits_type = function () {
        return this.tryGetRuleContext(0, Bits_typeContext);
    };
    Enum_typeContext.prototype.Int = function () { return this.tryGetToken(SysVerilogHDLParser.Int, 0); };
    Object.defineProperty(Enum_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enum_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enum_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterEnum_type) {
            listener.enterEnum_type(this);
        }
    };
    // @Override
    Enum_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitEnum_type) {
            listener.exitEnum_type(this);
        }
    };
    // @Override
    Enum_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitEnum_type) {
            return visitor.visitEnum_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enum_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enum_typeContext = Enum_typeContext;
var List_of_enum_itemsContext = /** @class */ (function (_super) {
    __extends(List_of_enum_itemsContext, _super);
    function List_of_enum_itemsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_enum_itemsContext.prototype.enum_item = function () {
        return this.getRuleContext(0, Enum_itemContext);
    };
    List_of_enum_itemsContext.prototype.comma_enum_item_star = function () {
        return this.getRuleContext(0, Comma_enum_item_starContext);
    };
    Object.defineProperty(List_of_enum_itemsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_enum_items; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_enum_itemsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_enum_items) {
            listener.enterList_of_enum_items(this);
        }
    };
    // @Override
    List_of_enum_itemsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_enum_items) {
            listener.exitList_of_enum_items(this);
        }
    };
    // @Override
    List_of_enum_itemsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_enum_items) {
            return visitor.visitList_of_enum_items(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_enum_itemsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_enum_itemsContext = List_of_enum_itemsContext;
var Enum_itemContext = /** @class */ (function (_super) {
    __extends(Enum_itemContext, _super);
    function Enum_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enum_itemContext.prototype.enum_identifier = function () {
        return this.getRuleContext(0, Enum_identifierContext);
    };
    Enum_itemContext.prototype.Equal = function () { return this.tryGetToken(SysVerilogHDLParser.Equal, 0); };
    Enum_itemContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Enum_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enum_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enum_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterEnum_item) {
            listener.enterEnum_item(this);
        }
    };
    // @Override
    Enum_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitEnum_item) {
            listener.exitEnum_item(this);
        }
    };
    // @Override
    Enum_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitEnum_item) {
            return visitor.visitEnum_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enum_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enum_itemContext = Enum_itemContext;
var Enum_identifierContext = /** @class */ (function (_super) {
    __extends(Enum_identifierContext, _super);
    function Enum_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enum_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Enum_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enum_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enum_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEnum_identifier) {
            listener.enterEnum_identifier(this);
        }
    };
    // @Override
    Enum_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEnum_identifier) {
            listener.exitEnum_identifier(this);
        }
    };
    // @Override
    Enum_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEnum_identifier) {
            return visitor.visitEnum_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enum_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enum_identifierContext = Enum_identifierContext;
var Comma_enum_item_starContext = /** @class */ (function (_super) {
    __extends(Comma_enum_item_starContext, _super);
    function Comma_enum_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_enum_item_starContext.prototype.comma_enum_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_enum_itemContext);
        }
        else {
            return this.getRuleContext(i, Comma_enum_itemContext);
        }
    };
    Object.defineProperty(Comma_enum_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_enum_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_enum_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_enum_item_star) {
            listener.enterComma_enum_item_star(this);
        }
    };
    // @Override
    Comma_enum_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_enum_item_star) {
            listener.exitComma_enum_item_star(this);
        }
    };
    // @Override
    Comma_enum_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_enum_item_star) {
            return visitor.visitComma_enum_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_enum_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_enum_item_starContext = Comma_enum_item_starContext;
var Comma_enum_itemContext = /** @class */ (function (_super) {
    __extends(Comma_enum_itemContext, _super);
    function Comma_enum_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_enum_itemContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_enum_itemContext.prototype.enum_item = function () {
        return this.getRuleContext(0, Enum_itemContext);
    };
    Object.defineProperty(Comma_enum_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_enum_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_enum_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_enum_item) {
            listener.enterComma_enum_item(this);
        }
    };
    // @Override
    Comma_enum_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_enum_item) {
            listener.exitComma_enum_item(this);
        }
    };
    // @Override
    Comma_enum_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_enum_item) {
            return visitor.visitComma_enum_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_enum_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_enum_itemContext = Comma_enum_itemContext;
var Enumerated_typeContext = /** @class */ (function (_super) {
    __extends(Enumerated_typeContext, _super);
    function Enumerated_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enumerated_typeContext.prototype.Enum = function () { return this.getToken(SysVerilogHDLParser.Enum, 0); };
    Enumerated_typeContext.prototype.Left_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_curly_bracket, 0); };
    Enumerated_typeContext.prototype.list_of_enum_items = function () {
        return this.getRuleContext(0, List_of_enum_itemsContext);
    };
    Enumerated_typeContext.prototype.Right_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_curly_bracket, 0); };
    Enumerated_typeContext.prototype.enum_type = function () {
        return this.tryGetRuleContext(0, Enum_typeContext);
    };
    Enumerated_typeContext.prototype.dimension = function () {
        return this.tryGetRuleContext(0, DimensionContext);
    };
    Enumerated_typeContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Enumerated_typeContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Enumerated_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enumerated_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enumerated_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterEnumerated_type) {
            listener.enterEnumerated_type(this);
        }
    };
    // @Override
    Enumerated_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitEnumerated_type) {
            listener.exitEnumerated_type(this);
        }
    };
    // @Override
    Enumerated_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitEnumerated_type) {
            return visitor.visitEnumerated_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enumerated_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enumerated_typeContext = Enumerated_typeContext;
var Module_instantiationContext = /** @class */ (function (_super) {
    __extends(Module_instantiationContext, _super);
    function Module_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_instantiationContext.prototype.module_identifier = function () {
        return this.getRuleContext(0, Module_identifierContext);
    };
    Module_instantiationContext.prototype.list_of_module_instances = function () {
        return this.getRuleContext(0, List_of_module_instancesContext);
    };
    Module_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Module_instantiationContext.prototype.parameter_interface_assignments = function () {
        return this.tryGetRuleContext(0, Parameter_interface_assignmentsContext);
    };
    Object.defineProperty(Module_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_instantiation) {
            listener.enterModule_instantiation(this);
        }
    };
    // @Override
    Module_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_instantiation) {
            listener.exitModule_instantiation(this);
        }
    };
    // @Override
    Module_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_instantiation) {
            return visitor.visitModule_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_instantiationContext = Module_instantiationContext;
var Parameter_interface_assignmentsContext = /** @class */ (function (_super) {
    __extends(Parameter_interface_assignmentsContext, _super);
    function Parameter_interface_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parameter_interface_assignmentsContext.prototype.Hash = function () { return this.getToken(SysVerilogHDLParser.Hash, 0); };
    Parameter_interface_assignmentsContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Parameter_interface_assignmentsContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Parameter_interface_assignmentsContext.prototype.list_of_interface_assignments = function () {
        return this.tryGetRuleContext(0, List_of_interface_assignmentsContext);
    };
    Object.defineProperty(Parameter_interface_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_parameter_interface_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parameter_interface_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterParameter_interface_assignments) {
            listener.enterParameter_interface_assignments(this);
        }
    };
    // @Override
    Parameter_interface_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitParameter_interface_assignments) {
            listener.exitParameter_interface_assignments(this);
        }
    };
    // @Override
    Parameter_interface_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitParameter_interface_assignments) {
            return visitor.visitParameter_interface_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parameter_interface_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parameter_interface_assignmentsContext = Parameter_interface_assignmentsContext;
var List_of_interface_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_interface_assignmentsContext, _super);
    function List_of_interface_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_interface_assignmentsContext.prototype.list_of_ordered_interface_assignments = function () {
        return this.tryGetRuleContext(0, List_of_ordered_interface_assignmentsContext);
    };
    List_of_interface_assignmentsContext.prototype.list_of_named_interface_assignments = function () {
        return this.tryGetRuleContext(0, List_of_named_interface_assignmentsContext);
    };
    Object.defineProperty(List_of_interface_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_interface_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_interface_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_interface_assignments) {
            listener.enterList_of_interface_assignments(this);
        }
    };
    // @Override
    List_of_interface_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_interface_assignments) {
            listener.exitList_of_interface_assignments(this);
        }
    };
    // @Override
    List_of_interface_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_interface_assignments) {
            return visitor.visitList_of_interface_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_interface_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_interface_assignmentsContext = List_of_interface_assignmentsContext;
var List_of_ordered_interface_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_ordered_interface_assignmentsContext, _super);
    function List_of_ordered_interface_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_ordered_interface_assignmentsContext.prototype.ordered_interface_assignment = function () {
        return this.getRuleContext(0, Ordered_interface_assignmentContext);
    };
    List_of_ordered_interface_assignmentsContext.prototype.comma_ordered_interface_assignment_star = function () {
        return this.getRuleContext(0, Comma_ordered_interface_assignment_starContext);
    };
    Object.defineProperty(List_of_ordered_interface_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_ordered_interface_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_ordered_interface_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_ordered_interface_assignments) {
            listener.enterList_of_ordered_interface_assignments(this);
        }
    };
    // @Override
    List_of_ordered_interface_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_ordered_interface_assignments) {
            listener.exitList_of_ordered_interface_assignments(this);
        }
    };
    // @Override
    List_of_ordered_interface_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_ordered_interface_assignments) {
            return visitor.visitList_of_ordered_interface_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_ordered_interface_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_ordered_interface_assignmentsContext = List_of_ordered_interface_assignmentsContext;
var Comma_ordered_interface_assignment_starContext = /** @class */ (function (_super) {
    __extends(Comma_ordered_interface_assignment_starContext, _super);
    function Comma_ordered_interface_assignment_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_ordered_interface_assignment_starContext.prototype.comma_ordered_interface_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_ordered_interface_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Comma_ordered_interface_assignmentContext);
        }
    };
    Object.defineProperty(Comma_ordered_interface_assignment_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_ordered_interface_assignment_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_ordered_interface_assignment_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_ordered_interface_assignment_star) {
            listener.enterComma_ordered_interface_assignment_star(this);
        }
    };
    // @Override
    Comma_ordered_interface_assignment_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_ordered_interface_assignment_star) {
            listener.exitComma_ordered_interface_assignment_star(this);
        }
    };
    // @Override
    Comma_ordered_interface_assignment_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_ordered_interface_assignment_star) {
            return visitor.visitComma_ordered_interface_assignment_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_ordered_interface_assignment_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_ordered_interface_assignment_starContext = Comma_ordered_interface_assignment_starContext;
var Comma_ordered_interface_assignmentContext = /** @class */ (function (_super) {
    __extends(Comma_ordered_interface_assignmentContext, _super);
    function Comma_ordered_interface_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_ordered_interface_assignmentContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_ordered_interface_assignmentContext.prototype.ordered_interface_assignment = function () {
        return this.tryGetRuleContext(0, Ordered_interface_assignmentContext);
    };
    Object.defineProperty(Comma_ordered_interface_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_ordered_interface_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_ordered_interface_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_ordered_interface_assignment) {
            listener.enterComma_ordered_interface_assignment(this);
        }
    };
    // @Override
    Comma_ordered_interface_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_ordered_interface_assignment) {
            listener.exitComma_ordered_interface_assignment(this);
        }
    };
    // @Override
    Comma_ordered_interface_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_ordered_interface_assignment) {
            return visitor.visitComma_ordered_interface_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_ordered_interface_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_ordered_interface_assignmentContext = Comma_ordered_interface_assignmentContext;
var Ordered_interface_assignmentContext = /** @class */ (function (_super) {
    __extends(Ordered_interface_assignmentContext, _super);
    function Ordered_interface_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ordered_interface_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Ordered_interface_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_ordered_interface_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ordered_interface_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterOrdered_interface_assignment) {
            listener.enterOrdered_interface_assignment(this);
        }
    };
    // @Override
    Ordered_interface_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitOrdered_interface_assignment) {
            listener.exitOrdered_interface_assignment(this);
        }
    };
    // @Override
    Ordered_interface_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitOrdered_interface_assignment) {
            return visitor.visitOrdered_interface_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ordered_interface_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ordered_interface_assignmentContext = Ordered_interface_assignmentContext;
var List_of_named_interface_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_named_interface_assignmentsContext, _super);
    function List_of_named_interface_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_named_interface_assignmentsContext.prototype.named_interface_assignment = function () {
        return this.getRuleContext(0, Named_interface_assignmentContext);
    };
    List_of_named_interface_assignmentsContext.prototype.comma_named_interface_assignment_star = function () {
        return this.getRuleContext(0, Comma_named_interface_assignment_starContext);
    };
    Object.defineProperty(List_of_named_interface_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_named_interface_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_named_interface_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_named_interface_assignments) {
            listener.enterList_of_named_interface_assignments(this);
        }
    };
    // @Override
    List_of_named_interface_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_named_interface_assignments) {
            listener.exitList_of_named_interface_assignments(this);
        }
    };
    // @Override
    List_of_named_interface_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_named_interface_assignments) {
            return visitor.visitList_of_named_interface_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_named_interface_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_named_interface_assignmentsContext = List_of_named_interface_assignmentsContext;
var Comma_named_interface_assignment_starContext = /** @class */ (function (_super) {
    __extends(Comma_named_interface_assignment_starContext, _super);
    function Comma_named_interface_assignment_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_named_interface_assignment_starContext.prototype.comma_named_interface_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_named_interface_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Comma_named_interface_assignmentContext);
        }
    };
    Object.defineProperty(Comma_named_interface_assignment_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_named_interface_assignment_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_named_interface_assignment_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_named_interface_assignment_star) {
            listener.enterComma_named_interface_assignment_star(this);
        }
    };
    // @Override
    Comma_named_interface_assignment_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_named_interface_assignment_star) {
            listener.exitComma_named_interface_assignment_star(this);
        }
    };
    // @Override
    Comma_named_interface_assignment_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_named_interface_assignment_star) {
            return visitor.visitComma_named_interface_assignment_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_named_interface_assignment_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_named_interface_assignment_starContext = Comma_named_interface_assignment_starContext;
var Comma_named_interface_assignmentContext = /** @class */ (function (_super) {
    __extends(Comma_named_interface_assignmentContext, _super);
    function Comma_named_interface_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_named_interface_assignmentContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_named_interface_assignmentContext.prototype.named_interface_assignment = function () {
        return this.getRuleContext(0, Named_interface_assignmentContext);
    };
    Object.defineProperty(Comma_named_interface_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_named_interface_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_named_interface_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_named_interface_assignment) {
            listener.enterComma_named_interface_assignment(this);
        }
    };
    // @Override
    Comma_named_interface_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_named_interface_assignment) {
            listener.exitComma_named_interface_assignment(this);
        }
    };
    // @Override
    Comma_named_interface_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_named_interface_assignment) {
            return visitor.visitComma_named_interface_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_named_interface_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_named_interface_assignmentContext = Comma_named_interface_assignmentContext;
var Named_interface_assignmentContext = /** @class */ (function (_super) {
    __extends(Named_interface_assignmentContext, _super);
    function Named_interface_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Named_interface_assignmentContext.prototype.Dot = function () { return this.getToken(SysVerilogHDLParser.Dot, 0); };
    Named_interface_assignmentContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    Named_interface_assignmentContext.prototype.Open_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Named_interface_assignmentContext.prototype.Close_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Named_interface_assignmentContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Named_interface_assignmentContext.prototype.Star = function () { return this.tryGetToken(SysVerilogHDLParser.Star, 0); };
    Object.defineProperty(Named_interface_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_named_interface_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Named_interface_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterNamed_interface_assignment) {
            listener.enterNamed_interface_assignment(this);
        }
    };
    // @Override
    Named_interface_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitNamed_interface_assignment) {
            listener.exitNamed_interface_assignment(this);
        }
    };
    // @Override
    Named_interface_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitNamed_interface_assignment) {
            return visitor.visitNamed_interface_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Named_interface_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Named_interface_assignmentContext = Named_interface_assignmentContext;
var List_of_module_instancesContext = /** @class */ (function (_super) {
    __extends(List_of_module_instancesContext, _super);
    function List_of_module_instancesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_module_instancesContext.prototype.module_instance = function () {
        return this.getRuleContext(0, Module_instanceContext);
    };
    List_of_module_instancesContext.prototype.comma_module_instance_star = function () {
        return this.getRuleContext(0, Comma_module_instance_starContext);
    };
    Object.defineProperty(List_of_module_instancesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_module_instances; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_module_instancesContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_module_instances) {
            listener.enterList_of_module_instances(this);
        }
    };
    // @Override
    List_of_module_instancesContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_module_instances) {
            listener.exitList_of_module_instances(this);
        }
    };
    // @Override
    List_of_module_instancesContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_module_instances) {
            return visitor.visitList_of_module_instances(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_module_instancesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_module_instancesContext = List_of_module_instancesContext;
var Comma_module_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_module_instance_starContext, _super);
    function Comma_module_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_module_instance_starContext.prototype.comma_module_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_module_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_module_instanceContext);
        }
    };
    Object.defineProperty(Comma_module_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_module_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_module_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_module_instance_star) {
            listener.enterComma_module_instance_star(this);
        }
    };
    // @Override
    Comma_module_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_module_instance_star) {
            listener.exitComma_module_instance_star(this);
        }
    };
    // @Override
    Comma_module_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_module_instance_star) {
            return visitor.visitComma_module_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_module_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_module_instance_starContext = Comma_module_instance_starContext;
var Comma_module_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_module_instanceContext, _super);
    function Comma_module_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_module_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_module_instanceContext.prototype.module_instance = function () {
        return this.getRuleContext(0, Module_instanceContext);
    };
    Object.defineProperty(Comma_module_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_module_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_module_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_module_instance) {
            listener.enterComma_module_instance(this);
        }
    };
    // @Override
    Comma_module_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_module_instance) {
            listener.exitComma_module_instance(this);
        }
    };
    // @Override
    Comma_module_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_module_instance) {
            return visitor.visitComma_module_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_module_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_module_instanceContext = Comma_module_instanceContext;
var Module_instanceContext = /** @class */ (function (_super) {
    __extends(Module_instanceContext, _super);
    function Module_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_instanceContext.prototype.module_instance_identifier = function () {
        return this.getRuleContext(0, Module_instance_identifierContext);
    };
    Module_instanceContext.prototype.port_interface_assignments = function () {
        return this.tryGetRuleContext(0, Port_interface_assignmentsContext);
    };
    Object.defineProperty(Module_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_instance) {
            listener.enterModule_instance(this);
        }
    };
    // @Override
    Module_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_instance) {
            listener.exitModule_instance(this);
        }
    };
    // @Override
    Module_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_instance) {
            return visitor.visitModule_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_instanceContext = Module_instanceContext;
var Module_instance_identifierContext = /** @class */ (function (_super) {
    __extends(Module_instance_identifierContext, _super);
    function Module_instance_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Module_instance_identifierContext.prototype.arrayed_identifier = function () {
        return this.getRuleContext(0, Arrayed_identifierContext);
    };
    Object.defineProperty(Module_instance_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_module_instance_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Module_instance_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterModule_instance_identifier) {
            listener.enterModule_instance_identifier(this);
        }
    };
    // @Override
    Module_instance_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitModule_instance_identifier) {
            listener.exitModule_instance_identifier(this);
        }
    };
    // @Override
    Module_instance_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitModule_instance_identifier) {
            return visitor.visitModule_instance_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Module_instance_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Module_instance_identifierContext = Module_instance_identifierContext;
var Arrayed_identifierContext = /** @class */ (function (_super) {
    __extends(Arrayed_identifierContext, _super);
    function Arrayed_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Arrayed_identifierContext.prototype.simple_arrayed_identifier = function () {
        return this.tryGetRuleContext(0, Simple_arrayed_identifierContext);
    };
    Arrayed_identifierContext.prototype.escaped_arrayed_identifier = function () {
        return this.tryGetRuleContext(0, Escaped_arrayed_identifierContext);
    };
    Object.defineProperty(Arrayed_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_arrayed_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Arrayed_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayed_identifier) {
            listener.enterArrayed_identifier(this);
        }
    };
    // @Override
    Arrayed_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayed_identifier) {
            listener.exitArrayed_identifier(this);
        }
    };
    // @Override
    Arrayed_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayed_identifier) {
            return visitor.visitArrayed_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Arrayed_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Arrayed_identifierContext = Arrayed_identifierContext;
var Simple_arrayed_identifierContext = /** @class */ (function (_super) {
    __extends(Simple_arrayed_identifierContext, _super);
    function Simple_arrayed_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Simple_arrayed_identifierContext.prototype.Simple_identifier = function () { return this.getToken(SysVerilogHDLParser.Simple_identifier, 0); };
    Simple_arrayed_identifierContext.prototype.dimension = function () {
        return this.tryGetRuleContext(0, DimensionContext);
    };
    Object.defineProperty(Simple_arrayed_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_simple_arrayed_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Simple_arrayed_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSimple_arrayed_identifier) {
            listener.enterSimple_arrayed_identifier(this);
        }
    };
    // @Override
    Simple_arrayed_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSimple_arrayed_identifier) {
            listener.exitSimple_arrayed_identifier(this);
        }
    };
    // @Override
    Simple_arrayed_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSimple_arrayed_identifier) {
            return visitor.visitSimple_arrayed_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Simple_arrayed_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Simple_arrayed_identifierContext = Simple_arrayed_identifierContext;
var Escaped_arrayed_identifierContext = /** @class */ (function (_super) {
    __extends(Escaped_arrayed_identifierContext, _super);
    function Escaped_arrayed_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Escaped_arrayed_identifierContext.prototype.Escaped_identifier = function () { return this.getToken(SysVerilogHDLParser.Escaped_identifier, 0); };
    Escaped_arrayed_identifierContext.prototype.dimension = function () {
        return this.tryGetRuleContext(0, DimensionContext);
    };
    Object.defineProperty(Escaped_arrayed_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_escaped_arrayed_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Escaped_arrayed_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEscaped_arrayed_identifier) {
            listener.enterEscaped_arrayed_identifier(this);
        }
    };
    // @Override
    Escaped_arrayed_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEscaped_arrayed_identifier) {
            listener.exitEscaped_arrayed_identifier(this);
        }
    };
    // @Override
    Escaped_arrayed_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEscaped_arrayed_identifier) {
            return visitor.visitEscaped_arrayed_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Escaped_arrayed_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Escaped_arrayed_identifierContext = Escaped_arrayed_identifierContext;
var Port_interface_assignmentsContext = /** @class */ (function (_super) {
    __extends(Port_interface_assignmentsContext, _super);
    function Port_interface_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Port_interface_assignmentsContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Port_interface_assignmentsContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Port_interface_assignmentsContext.prototype.list_of_interface_assignments = function () {
        return this.tryGetRuleContext(0, List_of_interface_assignmentsContext);
    };
    Object.defineProperty(Port_interface_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_port_interface_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Port_interface_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterPort_interface_assignments) {
            listener.enterPort_interface_assignments(this);
        }
    };
    // @Override
    Port_interface_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitPort_interface_assignments) {
            listener.exitPort_interface_assignments(this);
        }
    };
    // @Override
    Port_interface_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitPort_interface_assignments) {
            return visitor.visitPort_interface_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Port_interface_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Port_interface_assignmentsContext = Port_interface_assignmentsContext;
var DelayContext = /** @class */ (function (_super) {
    __extends(DelayContext, _super);
    function DelayContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DelayContext.prototype.Hash = function () { return this.getToken(SysVerilogHDLParser.Hash, 0); };
    DelayContext.prototype.delay_value = function () {
        return this.tryGetRuleContext(0, Delay_valueContext);
    };
    DelayContext.prototype.Open_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    DelayContext.prototype.list_of_delay_values = function () {
        return this.tryGetRuleContext(0, List_of_delay_valuesContext);
    };
    DelayContext.prototype.Close_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(DelayContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_delay; },
        enumerable: true,
        configurable: true
    });
    // @Override
    DelayContext.prototype.enterRule = function (listener) {
        if (listener.enterDelay) {
            listener.enterDelay(this);
        }
    };
    // @Override
    DelayContext.prototype.exitRule = function (listener) {
        if (listener.exitDelay) {
            listener.exitDelay(this);
        }
    };
    // @Override
    DelayContext.prototype.accept = function (visitor) {
        if (visitor.visitDelay) {
            return visitor.visitDelay(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return DelayContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DelayContext = DelayContext;
var List_of_delay_valuesContext = /** @class */ (function (_super) {
    __extends(List_of_delay_valuesContext, _super);
    function List_of_delay_valuesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_delay_valuesContext.prototype.delay_value = function () {
        return this.getRuleContext(0, Delay_valueContext);
    };
    List_of_delay_valuesContext.prototype.comma_delay_value_star = function () {
        return this.getRuleContext(0, Comma_delay_value_starContext);
    };
    Object.defineProperty(List_of_delay_valuesContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_delay_values; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_delay_valuesContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_delay_values) {
            listener.enterList_of_delay_values(this);
        }
    };
    // @Override
    List_of_delay_valuesContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_delay_values) {
            listener.exitList_of_delay_values(this);
        }
    };
    // @Override
    List_of_delay_valuesContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_delay_values) {
            return visitor.visitList_of_delay_values(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_delay_valuesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_delay_valuesContext = List_of_delay_valuesContext;
var Comma_delay_value_starContext = /** @class */ (function (_super) {
    __extends(Comma_delay_value_starContext, _super);
    function Comma_delay_value_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_delay_value_starContext.prototype.comma_delay_value = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_delay_valueContext);
        }
        else {
            return this.getRuleContext(i, Comma_delay_valueContext);
        }
    };
    Object.defineProperty(Comma_delay_value_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_delay_value_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_delay_value_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_delay_value_star) {
            listener.enterComma_delay_value_star(this);
        }
    };
    // @Override
    Comma_delay_value_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_delay_value_star) {
            listener.exitComma_delay_value_star(this);
        }
    };
    // @Override
    Comma_delay_value_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_delay_value_star) {
            return visitor.visitComma_delay_value_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_delay_value_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_delay_value_starContext = Comma_delay_value_starContext;
var Comma_delay_valueContext = /** @class */ (function (_super) {
    __extends(Comma_delay_valueContext, _super);
    function Comma_delay_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_delay_valueContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_delay_valueContext.prototype.delay_value = function () {
        return this.getRuleContext(0, Delay_valueContext);
    };
    Object.defineProperty(Comma_delay_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_delay_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_delay_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_delay_value) {
            listener.enterComma_delay_value(this);
        }
    };
    // @Override
    Comma_delay_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_delay_value) {
            listener.exitComma_delay_value(this);
        }
    };
    // @Override
    Comma_delay_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_delay_value) {
            return visitor.visitComma_delay_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_delay_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_delay_valueContext = Comma_delay_valueContext;
var Delay_valueContext = /** @class */ (function (_super) {
    __extends(Delay_valueContext, _super);
    function Delay_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay_valueContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Delay_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_delay_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterDelay_value) {
            listener.enterDelay_value(this);
        }
    };
    // @Override
    Delay_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitDelay_value) {
            listener.exitDelay_value(this);
        }
    };
    // @Override
    Delay_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitDelay_value) {
            return visitor.visitDelay_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay_valueContext = Delay_valueContext;
var Pulldown_strengthContext = /** @class */ (function (_super) {
    __extends(Pulldown_strengthContext, _super);
    function Pulldown_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pulldown_strengthContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Pulldown_strengthContext.prototype.strength0 = function () {
        return this.getRuleContext(0, Strength0Context);
    };
    Pulldown_strengthContext.prototype.Comma = function () { return this.tryGetToken(SysVerilogHDLParser.Comma, 0); };
    Pulldown_strengthContext.prototype.strength1 = function () {
        return this.tryGetRuleContext(0, Strength1Context);
    };
    Pulldown_strengthContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Pulldown_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pulldown_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pulldown_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterPulldown_strength) {
            listener.enterPulldown_strength(this);
        }
    };
    // @Override
    Pulldown_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitPulldown_strength) {
            listener.exitPulldown_strength(this);
        }
    };
    // @Override
    Pulldown_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitPulldown_strength) {
            return visitor.visitPulldown_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pulldown_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pulldown_strengthContext = Pulldown_strengthContext;
var Pullup_strengthContext = /** @class */ (function (_super) {
    __extends(Pullup_strengthContext, _super);
    function Pullup_strengthContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pullup_strengthContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Pullup_strengthContext.prototype.strength0 = function () {
        return this.tryGetRuleContext(0, Strength0Context);
    };
    Pullup_strengthContext.prototype.Comma = function () { return this.tryGetToken(SysVerilogHDLParser.Comma, 0); };
    Pullup_strengthContext.prototype.strength1 = function () {
        return this.getRuleContext(0, Strength1Context);
    };
    Pullup_strengthContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Pullup_strengthContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pullup_strength; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pullup_strengthContext.prototype.enterRule = function (listener) {
        if (listener.enterPullup_strength) {
            listener.enterPullup_strength(this);
        }
    };
    // @Override
    Pullup_strengthContext.prototype.exitRule = function (listener) {
        if (listener.exitPullup_strength) {
            listener.exitPullup_strength(this);
        }
    };
    // @Override
    Pullup_strengthContext.prototype.accept = function (visitor) {
        if (visitor.visitPullup_strength) {
            return visitor.visitPullup_strength(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pullup_strengthContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pullup_strengthContext = Pullup_strengthContext;
var Gate_instance_identifierContext = /** @class */ (function (_super) {
    __extends(Gate_instance_identifierContext, _super);
    function Gate_instance_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Gate_instance_identifierContext.prototype.arrayed_identifier = function () {
        return this.getRuleContext(0, Arrayed_identifierContext);
    };
    Object.defineProperty(Gate_instance_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_gate_instance_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Gate_instance_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterGate_instance_identifier) {
            listener.enterGate_instance_identifier(this);
        }
    };
    // @Override
    Gate_instance_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitGate_instance_identifier) {
            listener.exitGate_instance_identifier(this);
        }
    };
    // @Override
    Gate_instance_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitGate_instance_identifier) {
            return visitor.visitGate_instance_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Gate_instance_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Gate_instance_identifierContext = Gate_instance_identifierContext;
var Gate_instantiationContext = /** @class */ (function (_super) {
    __extends(Gate_instantiationContext, _super);
    function Gate_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Gate_instantiationContext.prototype.cmos_instantiation = function () {
        return this.tryGetRuleContext(0, Cmos_instantiationContext);
    };
    Gate_instantiationContext.prototype.mos_instantiation = function () {
        return this.tryGetRuleContext(0, Mos_instantiationContext);
    };
    Gate_instantiationContext.prototype.pass_instantiation = function () {
        return this.tryGetRuleContext(0, Pass_instantiationContext);
    };
    Gate_instantiationContext.prototype.pulldown_instantiation = function () {
        return this.tryGetRuleContext(0, Pulldown_instantiationContext);
    };
    Gate_instantiationContext.prototype.pullup_instantiation = function () {
        return this.tryGetRuleContext(0, Pullup_instantiationContext);
    };
    Gate_instantiationContext.prototype.enable_instantiation = function () {
        return this.tryGetRuleContext(0, Enable_instantiationContext);
    };
    Gate_instantiationContext.prototype.n_input_instantiation = function () {
        return this.tryGetRuleContext(0, N_input_instantiationContext);
    };
    Gate_instantiationContext.prototype.n_output_instantiation = function () {
        return this.tryGetRuleContext(0, N_output_instantiationContext);
    };
    Gate_instantiationContext.prototype.pass_enable_instantiation = function () {
        return this.tryGetRuleContext(0, Pass_enable_instantiationContext);
    };
    Object.defineProperty(Gate_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_gate_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Gate_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterGate_instantiation) {
            listener.enterGate_instantiation(this);
        }
    };
    // @Override
    Gate_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitGate_instantiation) {
            listener.exitGate_instantiation(this);
        }
    };
    // @Override
    Gate_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitGate_instantiation) {
            return visitor.visitGate_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Gate_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Gate_instantiationContext = Gate_instantiationContext;
var Enable_gatetypeContext = /** @class */ (function (_super) {
    __extends(Enable_gatetypeContext, _super);
    function Enable_gatetypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enable_gatetypeContext.prototype.Bufif0 = function () { return this.tryGetToken(SysVerilogHDLParser.Bufif0, 0); };
    Enable_gatetypeContext.prototype.Bufif1 = function () { return this.tryGetToken(SysVerilogHDLParser.Bufif1, 0); };
    Enable_gatetypeContext.prototype.Notif0 = function () { return this.tryGetToken(SysVerilogHDLParser.Notif0, 0); };
    Enable_gatetypeContext.prototype.Notif1 = function () { return this.tryGetToken(SysVerilogHDLParser.Notif1, 0); };
    Object.defineProperty(Enable_gatetypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enable_gatetype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_gatetypeContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_gatetype) {
            listener.enterEnable_gatetype(this);
        }
    };
    // @Override
    Enable_gatetypeContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_gatetype) {
            listener.exitEnable_gatetype(this);
        }
    };
    // @Override
    Enable_gatetypeContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_gatetype) {
            return visitor.visitEnable_gatetype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_gatetypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_gatetypeContext = Enable_gatetypeContext;
var Mos_switchtypeContext = /** @class */ (function (_super) {
    __extends(Mos_switchtypeContext, _super);
    function Mos_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Mos_switchtypeContext.prototype.Nmos = function () { return this.tryGetToken(SysVerilogHDLParser.Nmos, 0); };
    Mos_switchtypeContext.prototype.Pmos = function () { return this.tryGetToken(SysVerilogHDLParser.Pmos, 0); };
    Mos_switchtypeContext.prototype.Rnmos = function () { return this.tryGetToken(SysVerilogHDLParser.Rnmos, 0); };
    Mos_switchtypeContext.prototype.Rpmos = function () { return this.tryGetToken(SysVerilogHDLParser.Rpmos, 0); };
    Object.defineProperty(Mos_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_mos_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mos_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterMos_switchtype) {
            listener.enterMos_switchtype(this);
        }
    };
    // @Override
    Mos_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitMos_switchtype) {
            listener.exitMos_switchtype(this);
        }
    };
    // @Override
    Mos_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitMos_switchtype) {
            return visitor.visitMos_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mos_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mos_switchtypeContext = Mos_switchtypeContext;
var Cmos_switchtypeContext = /** @class */ (function (_super) {
    __extends(Cmos_switchtypeContext, _super);
    function Cmos_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Cmos_switchtypeContext.prototype.Cmos = function () { return this.tryGetToken(SysVerilogHDLParser.Cmos, 0); };
    Cmos_switchtypeContext.prototype.Rcmos = function () { return this.tryGetToken(SysVerilogHDLParser.Rcmos, 0); };
    Object.defineProperty(Cmos_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_cmos_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cmos_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterCmos_switchtype) {
            listener.enterCmos_switchtype(this);
        }
    };
    // @Override
    Cmos_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitCmos_switchtype) {
            listener.exitCmos_switchtype(this);
        }
    };
    // @Override
    Cmos_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitCmos_switchtype) {
            return visitor.visitCmos_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cmos_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cmos_switchtypeContext = Cmos_switchtypeContext;
var N_output_gatetypeContext = /** @class */ (function (_super) {
    __extends(N_output_gatetypeContext, _super);
    function N_output_gatetypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_output_gatetypeContext.prototype.Buf = function () { return this.tryGetToken(SysVerilogHDLParser.Buf, 0); };
    N_output_gatetypeContext.prototype.Not = function () { return this.tryGetToken(SysVerilogHDLParser.Not, 0); };
    Object.defineProperty(N_output_gatetypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_output_gatetype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_output_gatetypeContext.prototype.enterRule = function (listener) {
        if (listener.enterN_output_gatetype) {
            listener.enterN_output_gatetype(this);
        }
    };
    // @Override
    N_output_gatetypeContext.prototype.exitRule = function (listener) {
        if (listener.exitN_output_gatetype) {
            listener.exitN_output_gatetype(this);
        }
    };
    // @Override
    N_output_gatetypeContext.prototype.accept = function (visitor) {
        if (visitor.visitN_output_gatetype) {
            return visitor.visitN_output_gatetype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_output_gatetypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_output_gatetypeContext = N_output_gatetypeContext;
var N_input_gatetypeContext = /** @class */ (function (_super) {
    __extends(N_input_gatetypeContext, _super);
    function N_input_gatetypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_input_gatetypeContext.prototype.And = function () { return this.tryGetToken(SysVerilogHDLParser.And, 0); };
    N_input_gatetypeContext.prototype.Nand = function () { return this.tryGetToken(SysVerilogHDLParser.Nand, 0); };
    N_input_gatetypeContext.prototype.Or = function () { return this.tryGetToken(SysVerilogHDLParser.Or, 0); };
    N_input_gatetypeContext.prototype.Nor = function () { return this.tryGetToken(SysVerilogHDLParser.Nor, 0); };
    N_input_gatetypeContext.prototype.Xor = function () { return this.tryGetToken(SysVerilogHDLParser.Xor, 0); };
    N_input_gatetypeContext.prototype.Xnor = function () { return this.tryGetToken(SysVerilogHDLParser.Xnor, 0); };
    Object.defineProperty(N_input_gatetypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_input_gatetype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_input_gatetypeContext.prototype.enterRule = function (listener) {
        if (listener.enterN_input_gatetype) {
            listener.enterN_input_gatetype(this);
        }
    };
    // @Override
    N_input_gatetypeContext.prototype.exitRule = function (listener) {
        if (listener.exitN_input_gatetype) {
            listener.exitN_input_gatetype(this);
        }
    };
    // @Override
    N_input_gatetypeContext.prototype.accept = function (visitor) {
        if (visitor.visitN_input_gatetype) {
            return visitor.visitN_input_gatetype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_input_gatetypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_input_gatetypeContext = N_input_gatetypeContext;
var Pass_switchtypeContext = /** @class */ (function (_super) {
    __extends(Pass_switchtypeContext, _super);
    function Pass_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_switchtypeContext.prototype.Tran = function () { return this.tryGetToken(SysVerilogHDLParser.Tran, 0); };
    Pass_switchtypeContext.prototype.Rtran = function () { return this.tryGetToken(SysVerilogHDLParser.Rtran, 0); };
    Object.defineProperty(Pass_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_switchtype) {
            listener.enterPass_switchtype(this);
        }
    };
    // @Override
    Pass_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_switchtype) {
            listener.exitPass_switchtype(this);
        }
    };
    // @Override
    Pass_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_switchtype) {
            return visitor.visitPass_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_switchtypeContext = Pass_switchtypeContext;
var Pass_enable_switchtypeContext = /** @class */ (function (_super) {
    __extends(Pass_enable_switchtypeContext, _super);
    function Pass_enable_switchtypeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_enable_switchtypeContext.prototype.Tranif0 = function () { return this.tryGetToken(SysVerilogHDLParser.Tranif0, 0); };
    Pass_enable_switchtypeContext.prototype.Tranif1 = function () { return this.tryGetToken(SysVerilogHDLParser.Tranif1, 0); };
    Pass_enable_switchtypeContext.prototype.Rtranif1 = function () { return this.tryGetToken(SysVerilogHDLParser.Rtranif1, 0); };
    Pass_enable_switchtypeContext.prototype.Rtranif0 = function () { return this.tryGetToken(SysVerilogHDLParser.Rtranif0, 0); };
    Object.defineProperty(Pass_enable_switchtypeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_enable_switchtype; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_enable_switchtypeContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_enable_switchtype) {
            listener.enterPass_enable_switchtype(this);
        }
    };
    // @Override
    Pass_enable_switchtypeContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_enable_switchtype) {
            listener.exitPass_enable_switchtype(this);
        }
    };
    // @Override
    Pass_enable_switchtypeContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_enable_switchtype) {
            return visitor.visitPass_enable_switchtype(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_enable_switchtypeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_enable_switchtypeContext = Pass_enable_switchtypeContext;
var Pulldown_instantiationContext = /** @class */ (function (_super) {
    __extends(Pulldown_instantiationContext, _super);
    function Pulldown_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pulldown_instantiationContext.prototype.Pulldown = function () { return this.getToken(SysVerilogHDLParser.Pulldown, 0); };
    Pulldown_instantiationContext.prototype.list_of_pull_gate_instance = function () {
        return this.getRuleContext(0, List_of_pull_gate_instanceContext);
    };
    Pulldown_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Pulldown_instantiationContext.prototype.pulldown_strength = function () {
        return this.tryGetRuleContext(0, Pulldown_strengthContext);
    };
    Object.defineProperty(Pulldown_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pulldown_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pulldown_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterPulldown_instantiation) {
            listener.enterPulldown_instantiation(this);
        }
    };
    // @Override
    Pulldown_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitPulldown_instantiation) {
            listener.exitPulldown_instantiation(this);
        }
    };
    // @Override
    Pulldown_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitPulldown_instantiation) {
            return visitor.visitPulldown_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pulldown_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pulldown_instantiationContext = Pulldown_instantiationContext;
var Pullup_instantiationContext = /** @class */ (function (_super) {
    __extends(Pullup_instantiationContext, _super);
    function Pullup_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pullup_instantiationContext.prototype.Pullup = function () { return this.getToken(SysVerilogHDLParser.Pullup, 0); };
    Pullup_instantiationContext.prototype.list_of_pull_gate_instance = function () {
        return this.getRuleContext(0, List_of_pull_gate_instanceContext);
    };
    Pullup_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Pullup_instantiationContext.prototype.pullup_strength = function () {
        return this.tryGetRuleContext(0, Pullup_strengthContext);
    };
    Object.defineProperty(Pullup_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pullup_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pullup_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterPullup_instantiation) {
            listener.enterPullup_instantiation(this);
        }
    };
    // @Override
    Pullup_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitPullup_instantiation) {
            listener.exitPullup_instantiation(this);
        }
    };
    // @Override
    Pullup_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitPullup_instantiation) {
            return visitor.visitPullup_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pullup_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pullup_instantiationContext = Pullup_instantiationContext;
var Enable_instantiationContext = /** @class */ (function (_super) {
    __extends(Enable_instantiationContext, _super);
    function Enable_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enable_instantiationContext.prototype.enable_gatetype = function () {
        return this.getRuleContext(0, Enable_gatetypeContext);
    };
    Enable_instantiationContext.prototype.list_of_enable_gate_instance = function () {
        return this.getRuleContext(0, List_of_enable_gate_instanceContext);
    };
    Enable_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Enable_instantiationContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    Enable_instantiationContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Object.defineProperty(Enable_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enable_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_instantiation) {
            listener.enterEnable_instantiation(this);
        }
    };
    // @Override
    Enable_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_instantiation) {
            listener.exitEnable_instantiation(this);
        }
    };
    // @Override
    Enable_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_instantiation) {
            return visitor.visitEnable_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_instantiationContext = Enable_instantiationContext;
var Mos_instantiationContext = /** @class */ (function (_super) {
    __extends(Mos_instantiationContext, _super);
    function Mos_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Mos_instantiationContext.prototype.mos_switchtype = function () {
        return this.getRuleContext(0, Mos_switchtypeContext);
    };
    Mos_instantiationContext.prototype.list_of_mos_switch_instance = function () {
        return this.getRuleContext(0, List_of_mos_switch_instanceContext);
    };
    Mos_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Mos_instantiationContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Object.defineProperty(Mos_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_mos_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mos_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterMos_instantiation) {
            listener.enterMos_instantiation(this);
        }
    };
    // @Override
    Mos_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitMos_instantiation) {
            listener.exitMos_instantiation(this);
        }
    };
    // @Override
    Mos_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitMos_instantiation) {
            return visitor.visitMos_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mos_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mos_instantiationContext = Mos_instantiationContext;
var Cmos_instantiationContext = /** @class */ (function (_super) {
    __extends(Cmos_instantiationContext, _super);
    function Cmos_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Cmos_instantiationContext.prototype.cmos_switchtype = function () {
        return this.getRuleContext(0, Cmos_switchtypeContext);
    };
    Cmos_instantiationContext.prototype.list_of_cmos_switch_instance = function () {
        return this.getRuleContext(0, List_of_cmos_switch_instanceContext);
    };
    Cmos_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Cmos_instantiationContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Object.defineProperty(Cmos_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_cmos_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cmos_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterCmos_instantiation) {
            listener.enterCmos_instantiation(this);
        }
    };
    // @Override
    Cmos_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitCmos_instantiation) {
            listener.exitCmos_instantiation(this);
        }
    };
    // @Override
    Cmos_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitCmos_instantiation) {
            return visitor.visitCmos_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cmos_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cmos_instantiationContext = Cmos_instantiationContext;
var N_output_instantiationContext = /** @class */ (function (_super) {
    __extends(N_output_instantiationContext, _super);
    function N_output_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_output_instantiationContext.prototype.n_output_gatetype = function () {
        return this.getRuleContext(0, N_output_gatetypeContext);
    };
    N_output_instantiationContext.prototype.list_of_n_output_gate_instance = function () {
        return this.getRuleContext(0, List_of_n_output_gate_instanceContext);
    };
    N_output_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    N_output_instantiationContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    N_output_instantiationContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Object.defineProperty(N_output_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_output_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_output_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterN_output_instantiation) {
            listener.enterN_output_instantiation(this);
        }
    };
    // @Override
    N_output_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitN_output_instantiation) {
            listener.exitN_output_instantiation(this);
        }
    };
    // @Override
    N_output_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitN_output_instantiation) {
            return visitor.visitN_output_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_output_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_output_instantiationContext = N_output_instantiationContext;
var N_input_instantiationContext = /** @class */ (function (_super) {
    __extends(N_input_instantiationContext, _super);
    function N_input_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_input_instantiationContext.prototype.n_input_gatetype = function () {
        return this.getRuleContext(0, N_input_gatetypeContext);
    };
    N_input_instantiationContext.prototype.list_of_n_input_gate_instance = function () {
        return this.getRuleContext(0, List_of_n_input_gate_instanceContext);
    };
    N_input_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    N_input_instantiationContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    N_input_instantiationContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Object.defineProperty(N_input_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_input_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_input_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterN_input_instantiation) {
            listener.enterN_input_instantiation(this);
        }
    };
    // @Override
    N_input_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitN_input_instantiation) {
            listener.exitN_input_instantiation(this);
        }
    };
    // @Override
    N_input_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitN_input_instantiation) {
            return visitor.visitN_input_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_input_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_input_instantiationContext = N_input_instantiationContext;
var Pass_instantiationContext = /** @class */ (function (_super) {
    __extends(Pass_instantiationContext, _super);
    function Pass_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_instantiationContext.prototype.pass_switchtype = function () {
        return this.getRuleContext(0, Pass_switchtypeContext);
    };
    Pass_instantiationContext.prototype.list_of_pass_switch_instance = function () {
        return this.getRuleContext(0, List_of_pass_switch_instanceContext);
    };
    Pass_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Pass_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_instantiation) {
            listener.enterPass_instantiation(this);
        }
    };
    // @Override
    Pass_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_instantiation) {
            listener.exitPass_instantiation(this);
        }
    };
    // @Override
    Pass_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_instantiation) {
            return visitor.visitPass_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_instantiationContext = Pass_instantiationContext;
var Pass_enable_instantiationContext = /** @class */ (function (_super) {
    __extends(Pass_enable_instantiationContext, _super);
    function Pass_enable_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_enable_instantiationContext.prototype.pass_enable_switchtype = function () {
        return this.getRuleContext(0, Pass_enable_switchtypeContext);
    };
    Pass_enable_instantiationContext.prototype.list_of_pass_enable_switch_instance = function () {
        return this.getRuleContext(0, List_of_pass_enable_switch_instanceContext);
    };
    Pass_enable_instantiationContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Pass_enable_instantiationContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Object.defineProperty(Pass_enable_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_enable_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_enable_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_enable_instantiation) {
            listener.enterPass_enable_instantiation(this);
        }
    };
    // @Override
    Pass_enable_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_enable_instantiation) {
            listener.exitPass_enable_instantiation(this);
        }
    };
    // @Override
    Pass_enable_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_enable_instantiation) {
            return visitor.visitPass_enable_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_enable_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_enable_instantiationContext = Pass_enable_instantiationContext;
var List_of_pull_gate_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_pull_gate_instanceContext, _super);
    function List_of_pull_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_pull_gate_instanceContext.prototype.pull_gate_instance = function () {
        return this.getRuleContext(0, Pull_gate_instanceContext);
    };
    List_of_pull_gate_instanceContext.prototype.comma_pull_gate_instance_star = function () {
        return this.getRuleContext(0, Comma_pull_gate_instance_starContext);
    };
    Object.defineProperty(List_of_pull_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_pull_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_pull_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_pull_gate_instance) {
            listener.enterList_of_pull_gate_instance(this);
        }
    };
    // @Override
    List_of_pull_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_pull_gate_instance) {
            listener.exitList_of_pull_gate_instance(this);
        }
    };
    // @Override
    List_of_pull_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_pull_gate_instance) {
            return visitor.visitList_of_pull_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_pull_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_pull_gate_instanceContext = List_of_pull_gate_instanceContext;
var List_of_enable_gate_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_enable_gate_instanceContext, _super);
    function List_of_enable_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_enable_gate_instanceContext.prototype.enable_gate_instance = function () {
        return this.getRuleContext(0, Enable_gate_instanceContext);
    };
    List_of_enable_gate_instanceContext.prototype.comma_enable_gate_instance_star = function () {
        return this.getRuleContext(0, Comma_enable_gate_instance_starContext);
    };
    Object.defineProperty(List_of_enable_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_enable_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_enable_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_enable_gate_instance) {
            listener.enterList_of_enable_gate_instance(this);
        }
    };
    // @Override
    List_of_enable_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_enable_gate_instance) {
            listener.exitList_of_enable_gate_instance(this);
        }
    };
    // @Override
    List_of_enable_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_enable_gate_instance) {
            return visitor.visitList_of_enable_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_enable_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_enable_gate_instanceContext = List_of_enable_gate_instanceContext;
var List_of_mos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_mos_switch_instanceContext, _super);
    function List_of_mos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_mos_switch_instanceContext.prototype.mos_switch_instance = function () {
        return this.getRuleContext(0, Mos_switch_instanceContext);
    };
    List_of_mos_switch_instanceContext.prototype.comma_mos_switch_instance_star = function () {
        return this.getRuleContext(0, Comma_mos_switch_instance_starContext);
    };
    Object.defineProperty(List_of_mos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_mos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_mos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_mos_switch_instance) {
            listener.enterList_of_mos_switch_instance(this);
        }
    };
    // @Override
    List_of_mos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_mos_switch_instance) {
            listener.exitList_of_mos_switch_instance(this);
        }
    };
    // @Override
    List_of_mos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_mos_switch_instance) {
            return visitor.visitList_of_mos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_mos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_mos_switch_instanceContext = List_of_mos_switch_instanceContext;
var List_of_cmos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_cmos_switch_instanceContext, _super);
    function List_of_cmos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_cmos_switch_instanceContext.prototype.cmos_switch_instance = function () {
        return this.getRuleContext(0, Cmos_switch_instanceContext);
    };
    List_of_cmos_switch_instanceContext.prototype.comma_cmos_switch_instance_star = function () {
        return this.getRuleContext(0, Comma_cmos_switch_instance_starContext);
    };
    Object.defineProperty(List_of_cmos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_cmos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_cmos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_cmos_switch_instance) {
            listener.enterList_of_cmos_switch_instance(this);
        }
    };
    // @Override
    List_of_cmos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_cmos_switch_instance) {
            listener.exitList_of_cmos_switch_instance(this);
        }
    };
    // @Override
    List_of_cmos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_cmos_switch_instance) {
            return visitor.visitList_of_cmos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_cmos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_cmos_switch_instanceContext = List_of_cmos_switch_instanceContext;
var List_of_n_input_gate_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_n_input_gate_instanceContext, _super);
    function List_of_n_input_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_n_input_gate_instanceContext.prototype.n_input_gate_instance = function () {
        return this.getRuleContext(0, N_input_gate_instanceContext);
    };
    List_of_n_input_gate_instanceContext.prototype.comma_n_input_gate_instance_star = function () {
        return this.getRuleContext(0, Comma_n_input_gate_instance_starContext);
    };
    Object.defineProperty(List_of_n_input_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_n_input_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_n_input_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_n_input_gate_instance) {
            listener.enterList_of_n_input_gate_instance(this);
        }
    };
    // @Override
    List_of_n_input_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_n_input_gate_instance) {
            listener.exitList_of_n_input_gate_instance(this);
        }
    };
    // @Override
    List_of_n_input_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_n_input_gate_instance) {
            return visitor.visitList_of_n_input_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_n_input_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_n_input_gate_instanceContext = List_of_n_input_gate_instanceContext;
var List_of_n_output_gate_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_n_output_gate_instanceContext, _super);
    function List_of_n_output_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_n_output_gate_instanceContext.prototype.n_output_gate_instance = function () {
        return this.getRuleContext(0, N_output_gate_instanceContext);
    };
    List_of_n_output_gate_instanceContext.prototype.comma_n_output_gate_instance_star = function () {
        return this.getRuleContext(0, Comma_n_output_gate_instance_starContext);
    };
    Object.defineProperty(List_of_n_output_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_n_output_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_n_output_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_n_output_gate_instance) {
            listener.enterList_of_n_output_gate_instance(this);
        }
    };
    // @Override
    List_of_n_output_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_n_output_gate_instance) {
            listener.exitList_of_n_output_gate_instance(this);
        }
    };
    // @Override
    List_of_n_output_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_n_output_gate_instance) {
            return visitor.visitList_of_n_output_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_n_output_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_n_output_gate_instanceContext = List_of_n_output_gate_instanceContext;
var List_of_pass_switch_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_pass_switch_instanceContext, _super);
    function List_of_pass_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_pass_switch_instanceContext.prototype.pass_switch_instance = function () {
        return this.getRuleContext(0, Pass_switch_instanceContext);
    };
    List_of_pass_switch_instanceContext.prototype.comma_pass_switch_instance_star = function () {
        return this.getRuleContext(0, Comma_pass_switch_instance_starContext);
    };
    Object.defineProperty(List_of_pass_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_pass_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_pass_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_pass_switch_instance) {
            listener.enterList_of_pass_switch_instance(this);
        }
    };
    // @Override
    List_of_pass_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_pass_switch_instance) {
            listener.exitList_of_pass_switch_instance(this);
        }
    };
    // @Override
    List_of_pass_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_pass_switch_instance) {
            return visitor.visitList_of_pass_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_pass_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_pass_switch_instanceContext = List_of_pass_switch_instanceContext;
var List_of_pass_enable_switch_instanceContext = /** @class */ (function (_super) {
    __extends(List_of_pass_enable_switch_instanceContext, _super);
    function List_of_pass_enable_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_pass_enable_switch_instanceContext.prototype.pass_enable_switch_instance = function () {
        return this.getRuleContext(0, Pass_enable_switch_instanceContext);
    };
    List_of_pass_enable_switch_instanceContext.prototype.comma_pass_enable_switch_instance_star = function () {
        return this.getRuleContext(0, Comma_pass_enable_switch_instance_starContext);
    };
    Object.defineProperty(List_of_pass_enable_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_pass_enable_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_pass_enable_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_pass_enable_switch_instance) {
            listener.enterList_of_pass_enable_switch_instance(this);
        }
    };
    // @Override
    List_of_pass_enable_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_pass_enable_switch_instance) {
            listener.exitList_of_pass_enable_switch_instance(this);
        }
    };
    // @Override
    List_of_pass_enable_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_pass_enable_switch_instance) {
            return visitor.visitList_of_pass_enable_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_pass_enable_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_pass_enable_switch_instanceContext = List_of_pass_enable_switch_instanceContext;
var Comma_pull_gate_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_pull_gate_instance_starContext, _super);
    function Comma_pull_gate_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_pull_gate_instance_starContext.prototype.comma_pull_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_pull_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_pull_gate_instanceContext);
        }
    };
    Object.defineProperty(Comma_pull_gate_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_pull_gate_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_pull_gate_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_pull_gate_instance_star) {
            listener.enterComma_pull_gate_instance_star(this);
        }
    };
    // @Override
    Comma_pull_gate_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_pull_gate_instance_star) {
            listener.exitComma_pull_gate_instance_star(this);
        }
    };
    // @Override
    Comma_pull_gate_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_pull_gate_instance_star) {
            return visitor.visitComma_pull_gate_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_pull_gate_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_pull_gate_instance_starContext = Comma_pull_gate_instance_starContext;
var Comma_enable_gate_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_enable_gate_instance_starContext, _super);
    function Comma_enable_gate_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_enable_gate_instance_starContext.prototype.comma_enable_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_enable_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_enable_gate_instanceContext);
        }
    };
    Object.defineProperty(Comma_enable_gate_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_enable_gate_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_enable_gate_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_enable_gate_instance_star) {
            listener.enterComma_enable_gate_instance_star(this);
        }
    };
    // @Override
    Comma_enable_gate_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_enable_gate_instance_star) {
            listener.exitComma_enable_gate_instance_star(this);
        }
    };
    // @Override
    Comma_enable_gate_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_enable_gate_instance_star) {
            return visitor.visitComma_enable_gate_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_enable_gate_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_enable_gate_instance_starContext = Comma_enable_gate_instance_starContext;
var Comma_mos_switch_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_mos_switch_instance_starContext, _super);
    function Comma_mos_switch_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_mos_switch_instance_starContext.prototype.comma_mos_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_mos_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_mos_switch_instanceContext);
        }
    };
    Object.defineProperty(Comma_mos_switch_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_mos_switch_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_mos_switch_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_mos_switch_instance_star) {
            listener.enterComma_mos_switch_instance_star(this);
        }
    };
    // @Override
    Comma_mos_switch_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_mos_switch_instance_star) {
            listener.exitComma_mos_switch_instance_star(this);
        }
    };
    // @Override
    Comma_mos_switch_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_mos_switch_instance_star) {
            return visitor.visitComma_mos_switch_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_mos_switch_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_mos_switch_instance_starContext = Comma_mos_switch_instance_starContext;
var Comma_cmos_switch_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_cmos_switch_instance_starContext, _super);
    function Comma_cmos_switch_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_cmos_switch_instance_starContext.prototype.comma_cmos_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_cmos_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_cmos_switch_instanceContext);
        }
    };
    Object.defineProperty(Comma_cmos_switch_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_cmos_switch_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_cmos_switch_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_cmos_switch_instance_star) {
            listener.enterComma_cmos_switch_instance_star(this);
        }
    };
    // @Override
    Comma_cmos_switch_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_cmos_switch_instance_star) {
            listener.exitComma_cmos_switch_instance_star(this);
        }
    };
    // @Override
    Comma_cmos_switch_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_cmos_switch_instance_star) {
            return visitor.visitComma_cmos_switch_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_cmos_switch_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_cmos_switch_instance_starContext = Comma_cmos_switch_instance_starContext;
var Comma_n_input_gate_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_n_input_gate_instance_starContext, _super);
    function Comma_n_input_gate_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_n_input_gate_instance_starContext.prototype.comma_n_input_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_n_input_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_n_input_gate_instanceContext);
        }
    };
    Object.defineProperty(Comma_n_input_gate_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_n_input_gate_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_n_input_gate_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_n_input_gate_instance_star) {
            listener.enterComma_n_input_gate_instance_star(this);
        }
    };
    // @Override
    Comma_n_input_gate_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_n_input_gate_instance_star) {
            listener.exitComma_n_input_gate_instance_star(this);
        }
    };
    // @Override
    Comma_n_input_gate_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_n_input_gate_instance_star) {
            return visitor.visitComma_n_input_gate_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_n_input_gate_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_n_input_gate_instance_starContext = Comma_n_input_gate_instance_starContext;
var Comma_n_output_gate_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_n_output_gate_instance_starContext, _super);
    function Comma_n_output_gate_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_n_output_gate_instance_starContext.prototype.comma_n_output_gate_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_n_output_gate_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_n_output_gate_instanceContext);
        }
    };
    Object.defineProperty(Comma_n_output_gate_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_n_output_gate_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_n_output_gate_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_n_output_gate_instance_star) {
            listener.enterComma_n_output_gate_instance_star(this);
        }
    };
    // @Override
    Comma_n_output_gate_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_n_output_gate_instance_star) {
            listener.exitComma_n_output_gate_instance_star(this);
        }
    };
    // @Override
    Comma_n_output_gate_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_n_output_gate_instance_star) {
            return visitor.visitComma_n_output_gate_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_n_output_gate_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_n_output_gate_instance_starContext = Comma_n_output_gate_instance_starContext;
var Comma_pass_switch_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_pass_switch_instance_starContext, _super);
    function Comma_pass_switch_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_pass_switch_instance_starContext.prototype.comma_pass_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_pass_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_pass_switch_instanceContext);
        }
    };
    Object.defineProperty(Comma_pass_switch_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_pass_switch_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_pass_switch_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_pass_switch_instance_star) {
            listener.enterComma_pass_switch_instance_star(this);
        }
    };
    // @Override
    Comma_pass_switch_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_pass_switch_instance_star) {
            listener.exitComma_pass_switch_instance_star(this);
        }
    };
    // @Override
    Comma_pass_switch_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_pass_switch_instance_star) {
            return visitor.visitComma_pass_switch_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_pass_switch_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_pass_switch_instance_starContext = Comma_pass_switch_instance_starContext;
var Comma_pass_enable_switch_instance_starContext = /** @class */ (function (_super) {
    __extends(Comma_pass_enable_switch_instance_starContext, _super);
    function Comma_pass_enable_switch_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_pass_enable_switch_instance_starContext.prototype.comma_pass_enable_switch_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_pass_enable_switch_instanceContext);
        }
        else {
            return this.getRuleContext(i, Comma_pass_enable_switch_instanceContext);
        }
    };
    Object.defineProperty(Comma_pass_enable_switch_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_pass_enable_switch_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_pass_enable_switch_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_pass_enable_switch_instance_star) {
            listener.enterComma_pass_enable_switch_instance_star(this);
        }
    };
    // @Override
    Comma_pass_enable_switch_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_pass_enable_switch_instance_star) {
            listener.exitComma_pass_enable_switch_instance_star(this);
        }
    };
    // @Override
    Comma_pass_enable_switch_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_pass_enable_switch_instance_star) {
            return visitor.visitComma_pass_enable_switch_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_pass_enable_switch_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_pass_enable_switch_instance_starContext = Comma_pass_enable_switch_instance_starContext;
var Comma_pull_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_pull_gate_instanceContext, _super);
    function Comma_pull_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_pull_gate_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_pull_gate_instanceContext.prototype.pull_gate_instance = function () {
        return this.getRuleContext(0, Pull_gate_instanceContext);
    };
    Object.defineProperty(Comma_pull_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_pull_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_pull_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_pull_gate_instance) {
            listener.enterComma_pull_gate_instance(this);
        }
    };
    // @Override
    Comma_pull_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_pull_gate_instance) {
            listener.exitComma_pull_gate_instance(this);
        }
    };
    // @Override
    Comma_pull_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_pull_gate_instance) {
            return visitor.visitComma_pull_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_pull_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_pull_gate_instanceContext = Comma_pull_gate_instanceContext;
var Comma_enable_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_enable_gate_instanceContext, _super);
    function Comma_enable_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_enable_gate_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_enable_gate_instanceContext.prototype.enable_gate_instance = function () {
        return this.getRuleContext(0, Enable_gate_instanceContext);
    };
    Object.defineProperty(Comma_enable_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_enable_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_enable_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_enable_gate_instance) {
            listener.enterComma_enable_gate_instance(this);
        }
    };
    // @Override
    Comma_enable_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_enable_gate_instance) {
            listener.exitComma_enable_gate_instance(this);
        }
    };
    // @Override
    Comma_enable_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_enable_gate_instance) {
            return visitor.visitComma_enable_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_enable_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_enable_gate_instanceContext = Comma_enable_gate_instanceContext;
var Comma_mos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_mos_switch_instanceContext, _super);
    function Comma_mos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_mos_switch_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_mos_switch_instanceContext.prototype.mos_switch_instance = function () {
        return this.getRuleContext(0, Mos_switch_instanceContext);
    };
    Object.defineProperty(Comma_mos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_mos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_mos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_mos_switch_instance) {
            listener.enterComma_mos_switch_instance(this);
        }
    };
    // @Override
    Comma_mos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_mos_switch_instance) {
            listener.exitComma_mos_switch_instance(this);
        }
    };
    // @Override
    Comma_mos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_mos_switch_instance) {
            return visitor.visitComma_mos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_mos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_mos_switch_instanceContext = Comma_mos_switch_instanceContext;
var Comma_cmos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_cmos_switch_instanceContext, _super);
    function Comma_cmos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_cmos_switch_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_cmos_switch_instanceContext.prototype.cmos_switch_instance = function () {
        return this.getRuleContext(0, Cmos_switch_instanceContext);
    };
    Object.defineProperty(Comma_cmos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_cmos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_cmos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_cmos_switch_instance) {
            listener.enterComma_cmos_switch_instance(this);
        }
    };
    // @Override
    Comma_cmos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_cmos_switch_instance) {
            listener.exitComma_cmos_switch_instance(this);
        }
    };
    // @Override
    Comma_cmos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_cmos_switch_instance) {
            return visitor.visitComma_cmos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_cmos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_cmos_switch_instanceContext = Comma_cmos_switch_instanceContext;
var Comma_n_input_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_n_input_gate_instanceContext, _super);
    function Comma_n_input_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_n_input_gate_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_n_input_gate_instanceContext.prototype.n_input_gate_instance = function () {
        return this.getRuleContext(0, N_input_gate_instanceContext);
    };
    Object.defineProperty(Comma_n_input_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_n_input_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_n_input_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_n_input_gate_instance) {
            listener.enterComma_n_input_gate_instance(this);
        }
    };
    // @Override
    Comma_n_input_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_n_input_gate_instance) {
            listener.exitComma_n_input_gate_instance(this);
        }
    };
    // @Override
    Comma_n_input_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_n_input_gate_instance) {
            return visitor.visitComma_n_input_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_n_input_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_n_input_gate_instanceContext = Comma_n_input_gate_instanceContext;
var Comma_n_output_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_n_output_gate_instanceContext, _super);
    function Comma_n_output_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_n_output_gate_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_n_output_gate_instanceContext.prototype.n_output_gate_instance = function () {
        return this.getRuleContext(0, N_output_gate_instanceContext);
    };
    Object.defineProperty(Comma_n_output_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_n_output_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_n_output_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_n_output_gate_instance) {
            listener.enterComma_n_output_gate_instance(this);
        }
    };
    // @Override
    Comma_n_output_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_n_output_gate_instance) {
            listener.exitComma_n_output_gate_instance(this);
        }
    };
    // @Override
    Comma_n_output_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_n_output_gate_instance) {
            return visitor.visitComma_n_output_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_n_output_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_n_output_gate_instanceContext = Comma_n_output_gate_instanceContext;
var Comma_pass_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_pass_switch_instanceContext, _super);
    function Comma_pass_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_pass_switch_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_pass_switch_instanceContext.prototype.pass_switch_instance = function () {
        return this.getRuleContext(0, Pass_switch_instanceContext);
    };
    Object.defineProperty(Comma_pass_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_pass_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_pass_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_pass_switch_instance) {
            listener.enterComma_pass_switch_instance(this);
        }
    };
    // @Override
    Comma_pass_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_pass_switch_instance) {
            listener.exitComma_pass_switch_instance(this);
        }
    };
    // @Override
    Comma_pass_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_pass_switch_instance) {
            return visitor.visitComma_pass_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_pass_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_pass_switch_instanceContext = Comma_pass_switch_instanceContext;
var Comma_pass_enable_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Comma_pass_enable_switch_instanceContext, _super);
    function Comma_pass_enable_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_pass_enable_switch_instanceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_pass_enable_switch_instanceContext.prototype.pass_enable_switch_instance = function () {
        return this.getRuleContext(0, Pass_enable_switch_instanceContext);
    };
    Object.defineProperty(Comma_pass_enable_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_pass_enable_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_pass_enable_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_pass_enable_switch_instance) {
            listener.enterComma_pass_enable_switch_instance(this);
        }
    };
    // @Override
    Comma_pass_enable_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_pass_enable_switch_instance) {
            listener.exitComma_pass_enable_switch_instance(this);
        }
    };
    // @Override
    Comma_pass_enable_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_pass_enable_switch_instance) {
            return visitor.visitComma_pass_enable_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_pass_enable_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_pass_enable_switch_instanceContext = Comma_pass_enable_switch_instanceContext;
var Pull_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Pull_gate_instanceContext, _super);
    function Pull_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pull_gate_instanceContext.prototype.pull_gate_interface = function () {
        return this.getRuleContext(0, Pull_gate_interfaceContext);
    };
    Pull_gate_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(Pull_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pull_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pull_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterPull_gate_instance) {
            listener.enterPull_gate_instance(this);
        }
    };
    // @Override
    Pull_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitPull_gate_instance) {
            listener.exitPull_gate_instance(this);
        }
    };
    // @Override
    Pull_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitPull_gate_instance) {
            return visitor.visitPull_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pull_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pull_gate_instanceContext = Pull_gate_instanceContext;
var Enable_gate_instanceContext = /** @class */ (function (_super) {
    __extends(Enable_gate_instanceContext, _super);
    function Enable_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enable_gate_instanceContext.prototype.enable_gate_interface = function () {
        return this.getRuleContext(0, Enable_gate_interfaceContext);
    };
    Enable_gate_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(Enable_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enable_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_gate_instance) {
            listener.enterEnable_gate_instance(this);
        }
    };
    // @Override
    Enable_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_gate_instance) {
            listener.exitEnable_gate_instance(this);
        }
    };
    // @Override
    Enable_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_gate_instance) {
            return visitor.visitEnable_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_gate_instanceContext = Enable_gate_instanceContext;
var Mos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Mos_switch_instanceContext, _super);
    function Mos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Mos_switch_instanceContext.prototype.mos_switch_interface = function () {
        return this.getRuleContext(0, Mos_switch_interfaceContext);
    };
    Mos_switch_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(Mos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_mos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterMos_switch_instance) {
            listener.enterMos_switch_instance(this);
        }
    };
    // @Override
    Mos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitMos_switch_instance) {
            listener.exitMos_switch_instance(this);
        }
    };
    // @Override
    Mos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitMos_switch_instance) {
            return visitor.visitMos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mos_switch_instanceContext = Mos_switch_instanceContext;
var Cmos_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Cmos_switch_instanceContext, _super);
    function Cmos_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Cmos_switch_instanceContext.prototype.cmos_switch_interface = function () {
        return this.getRuleContext(0, Cmos_switch_interfaceContext);
    };
    Cmos_switch_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(Cmos_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_cmos_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cmos_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterCmos_switch_instance) {
            listener.enterCmos_switch_instance(this);
        }
    };
    // @Override
    Cmos_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitCmos_switch_instance) {
            listener.exitCmos_switch_instance(this);
        }
    };
    // @Override
    Cmos_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitCmos_switch_instance) {
            return visitor.visitCmos_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cmos_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cmos_switch_instanceContext = Cmos_switch_instanceContext;
var N_input_gate_instanceContext = /** @class */ (function (_super) {
    __extends(N_input_gate_instanceContext, _super);
    function N_input_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_input_gate_instanceContext.prototype.n_input_gate_interface = function () {
        return this.getRuleContext(0, N_input_gate_interfaceContext);
    };
    N_input_gate_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(N_input_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_input_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_input_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterN_input_gate_instance) {
            listener.enterN_input_gate_instance(this);
        }
    };
    // @Override
    N_input_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitN_input_gate_instance) {
            listener.exitN_input_gate_instance(this);
        }
    };
    // @Override
    N_input_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitN_input_gate_instance) {
            return visitor.visitN_input_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_input_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_input_gate_instanceContext = N_input_gate_instanceContext;
var N_output_gate_instanceContext = /** @class */ (function (_super) {
    __extends(N_output_gate_instanceContext, _super);
    function N_output_gate_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_output_gate_instanceContext.prototype.n_output_gate_interface = function () {
        return this.getRuleContext(0, N_output_gate_interfaceContext);
    };
    N_output_gate_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(N_output_gate_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_output_gate_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_output_gate_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterN_output_gate_instance) {
            listener.enterN_output_gate_instance(this);
        }
    };
    // @Override
    N_output_gate_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitN_output_gate_instance) {
            listener.exitN_output_gate_instance(this);
        }
    };
    // @Override
    N_output_gate_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitN_output_gate_instance) {
            return visitor.visitN_output_gate_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_output_gate_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_output_gate_instanceContext = N_output_gate_instanceContext;
var Pass_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Pass_switch_instanceContext, _super);
    function Pass_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_switch_instanceContext.prototype.pass_switch_interface = function () {
        return this.getRuleContext(0, Pass_switch_interfaceContext);
    };
    Pass_switch_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(Pass_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_switch_instance) {
            listener.enterPass_switch_instance(this);
        }
    };
    // @Override
    Pass_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_switch_instance) {
            listener.exitPass_switch_instance(this);
        }
    };
    // @Override
    Pass_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_switch_instance) {
            return visitor.visitPass_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_switch_instanceContext = Pass_switch_instanceContext;
var Pass_enable_switch_instanceContext = /** @class */ (function (_super) {
    __extends(Pass_enable_switch_instanceContext, _super);
    function Pass_enable_switch_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_enable_switch_instanceContext.prototype.pass_enable_switch_interface = function () {
        return this.getRuleContext(0, Pass_enable_switch_interfaceContext);
    };
    Pass_enable_switch_instanceContext.prototype.gate_instance_identifier = function () {
        return this.tryGetRuleContext(0, Gate_instance_identifierContext);
    };
    Object.defineProperty(Pass_enable_switch_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_enable_switch_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_enable_switch_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_enable_switch_instance) {
            listener.enterPass_enable_switch_instance(this);
        }
    };
    // @Override
    Pass_enable_switch_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_enable_switch_instance) {
            listener.exitPass_enable_switch_instance(this);
        }
    };
    // @Override
    Pass_enable_switch_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_enable_switch_instance) {
            return visitor.visitPass_enable_switch_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_enable_switch_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_enable_switch_instanceContext = Pass_enable_switch_instanceContext;
var Pull_gate_interfaceContext = /** @class */ (function (_super) {
    __extends(Pull_gate_interfaceContext, _super);
    function Pull_gate_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pull_gate_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Pull_gate_interfaceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Pull_gate_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Pull_gate_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pull_gate_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pull_gate_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterPull_gate_interface) {
            listener.enterPull_gate_interface(this);
        }
    };
    // @Override
    Pull_gate_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitPull_gate_interface) {
            listener.exitPull_gate_interface(this);
        }
    };
    // @Override
    Pull_gate_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitPull_gate_interface) {
            return visitor.visitPull_gate_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pull_gate_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pull_gate_interfaceContext = Pull_gate_interfaceContext;
var Enable_gate_interfaceContext = /** @class */ (function (_super) {
    __extends(Enable_gate_interfaceContext, _super);
    function Enable_gate_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enable_gate_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Enable_gate_interfaceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Enable_gate_interfaceContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Enable_gate_interfaceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    Enable_gate_interfaceContext.prototype.enable_terminal = function () {
        return this.getRuleContext(0, Enable_terminalContext);
    };
    Enable_gate_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Enable_gate_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enable_gate_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_gate_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_gate_interface) {
            listener.enterEnable_gate_interface(this);
        }
    };
    // @Override
    Enable_gate_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_gate_interface) {
            listener.exitEnable_gate_interface(this);
        }
    };
    // @Override
    Enable_gate_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_gate_interface) {
            return visitor.visitEnable_gate_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_gate_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_gate_interfaceContext = Enable_gate_interfaceContext;
var Mos_switch_interfaceContext = /** @class */ (function (_super) {
    __extends(Mos_switch_interfaceContext, _super);
    function Mos_switch_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Mos_switch_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Mos_switch_interfaceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Mos_switch_interfaceContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Mos_switch_interfaceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    Mos_switch_interfaceContext.prototype.enable_terminal = function () {
        return this.getRuleContext(0, Enable_terminalContext);
    };
    Mos_switch_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Mos_switch_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_mos_switch_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mos_switch_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterMos_switch_interface) {
            listener.enterMos_switch_interface(this);
        }
    };
    // @Override
    Mos_switch_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitMos_switch_interface) {
            listener.exitMos_switch_interface(this);
        }
    };
    // @Override
    Mos_switch_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitMos_switch_interface) {
            return visitor.visitMos_switch_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mos_switch_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mos_switch_interfaceContext = Mos_switch_interfaceContext;
var Cmos_switch_interfaceContext = /** @class */ (function (_super) {
    __extends(Cmos_switch_interfaceContext, _super);
    function Cmos_switch_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Cmos_switch_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Cmos_switch_interfaceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Cmos_switch_interfaceContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Cmos_switch_interfaceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    Cmos_switch_interfaceContext.prototype.ncontrol_terminal = function () {
        return this.getRuleContext(0, Ncontrol_terminalContext);
    };
    Cmos_switch_interfaceContext.prototype.pcontrol_terminal = function () {
        return this.getRuleContext(0, Pcontrol_terminalContext);
    };
    Cmos_switch_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Cmos_switch_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_cmos_switch_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Cmos_switch_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterCmos_switch_interface) {
            listener.enterCmos_switch_interface(this);
        }
    };
    // @Override
    Cmos_switch_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitCmos_switch_interface) {
            listener.exitCmos_switch_interface(this);
        }
    };
    // @Override
    Cmos_switch_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitCmos_switch_interface) {
            return visitor.visitCmos_switch_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Cmos_switch_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Cmos_switch_interfaceContext = Cmos_switch_interfaceContext;
var N_input_gate_interfaceContext = /** @class */ (function (_super) {
    __extends(N_input_gate_interfaceContext, _super);
    function N_input_gate_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_input_gate_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    N_input_gate_interfaceContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    N_input_gate_interfaceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    N_input_gate_interfaceContext.prototype.list_of_input_terminals = function () {
        return this.getRuleContext(0, List_of_input_terminalsContext);
    };
    N_input_gate_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(N_input_gate_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_input_gate_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_input_gate_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterN_input_gate_interface) {
            listener.enterN_input_gate_interface(this);
        }
    };
    // @Override
    N_input_gate_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitN_input_gate_interface) {
            listener.exitN_input_gate_interface(this);
        }
    };
    // @Override
    N_input_gate_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitN_input_gate_interface) {
            return visitor.visitN_input_gate_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_input_gate_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_input_gate_interfaceContext = N_input_gate_interfaceContext;
var N_output_gate_interfaceContext = /** @class */ (function (_super) {
    __extends(N_output_gate_interfaceContext, _super);
    function N_output_gate_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    N_output_gate_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    N_output_gate_interfaceContext.prototype.list_of_output_terminals = function () {
        return this.getRuleContext(0, List_of_output_terminalsContext);
    };
    N_output_gate_interfaceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    N_output_gate_interfaceContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    N_output_gate_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(N_output_gate_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_n_output_gate_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    N_output_gate_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterN_output_gate_interface) {
            listener.enterN_output_gate_interface(this);
        }
    };
    // @Override
    N_output_gate_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitN_output_gate_interface) {
            listener.exitN_output_gate_interface(this);
        }
    };
    // @Override
    N_output_gate_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitN_output_gate_interface) {
            return visitor.visitN_output_gate_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return N_output_gate_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.N_output_gate_interfaceContext = N_output_gate_interfaceContext;
var Pass_switch_interfaceContext = /** @class */ (function (_super) {
    __extends(Pass_switch_interfaceContext, _super);
    function Pass_switch_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_switch_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Pass_switch_interfaceContext.prototype.inout_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Inout_terminalContext);
        }
        else {
            return this.getRuleContext(i, Inout_terminalContext);
        }
    };
    Pass_switch_interfaceContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Pass_switch_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Pass_switch_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_switch_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_switch_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_switch_interface) {
            listener.enterPass_switch_interface(this);
        }
    };
    // @Override
    Pass_switch_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_switch_interface) {
            listener.exitPass_switch_interface(this);
        }
    };
    // @Override
    Pass_switch_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_switch_interface) {
            return visitor.visitPass_switch_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_switch_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_switch_interfaceContext = Pass_switch_interfaceContext;
var Pass_enable_switch_interfaceContext = /** @class */ (function (_super) {
    __extends(Pass_enable_switch_interfaceContext, _super);
    function Pass_enable_switch_interfaceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pass_enable_switch_interfaceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Pass_enable_switch_interfaceContext.prototype.inout_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Inout_terminalContext);
        }
        else {
            return this.getRuleContext(i, Inout_terminalContext);
        }
    };
    Pass_enable_switch_interfaceContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Pass_enable_switch_interfaceContext.prototype.enable_terminal = function () {
        return this.getRuleContext(0, Enable_terminalContext);
    };
    Pass_enable_switch_interfaceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Pass_enable_switch_interfaceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pass_enable_switch_interface; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pass_enable_switch_interfaceContext.prototype.enterRule = function (listener) {
        if (listener.enterPass_enable_switch_interface) {
            listener.enterPass_enable_switch_interface(this);
        }
    };
    // @Override
    Pass_enable_switch_interfaceContext.prototype.exitRule = function (listener) {
        if (listener.exitPass_enable_switch_interface) {
            listener.exitPass_enable_switch_interface(this);
        }
    };
    // @Override
    Pass_enable_switch_interfaceContext.prototype.accept = function (visitor) {
        if (visitor.visitPass_enable_switch_interface) {
            return visitor.visitPass_enable_switch_interface(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pass_enable_switch_interfaceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pass_enable_switch_interfaceContext = Pass_enable_switch_interfaceContext;
var List_of_input_terminalsContext = /** @class */ (function (_super) {
    __extends(List_of_input_terminalsContext, _super);
    function List_of_input_terminalsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_input_terminalsContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    List_of_input_terminalsContext.prototype.comma_input_terminal_star = function () {
        return this.getRuleContext(0, Comma_input_terminal_starContext);
    };
    Object.defineProperty(List_of_input_terminalsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_input_terminals; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_input_terminalsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_input_terminals) {
            listener.enterList_of_input_terminals(this);
        }
    };
    // @Override
    List_of_input_terminalsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_input_terminals) {
            listener.exitList_of_input_terminals(this);
        }
    };
    // @Override
    List_of_input_terminalsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_input_terminals) {
            return visitor.visitList_of_input_terminals(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_input_terminalsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_input_terminalsContext = List_of_input_terminalsContext;
var List_of_output_terminalsContext = /** @class */ (function (_super) {
    __extends(List_of_output_terminalsContext, _super);
    function List_of_output_terminalsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_output_terminalsContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    List_of_output_terminalsContext.prototype.comma_output_terminal_star = function () {
        return this.getRuleContext(0, Comma_output_terminal_starContext);
    };
    Object.defineProperty(List_of_output_terminalsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_output_terminals; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_output_terminalsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_output_terminals) {
            listener.enterList_of_output_terminals(this);
        }
    };
    // @Override
    List_of_output_terminalsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_output_terminals) {
            listener.exitList_of_output_terminals(this);
        }
    };
    // @Override
    List_of_output_terminalsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_output_terminals) {
            return visitor.visitList_of_output_terminals(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_output_terminalsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_output_terminalsContext = List_of_output_terminalsContext;
var Comma_input_terminal_starContext = /** @class */ (function (_super) {
    __extends(Comma_input_terminal_starContext, _super);
    function Comma_input_terminal_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_input_terminal_starContext.prototype.comma_input_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_input_terminalContext);
        }
        else {
            return this.getRuleContext(i, Comma_input_terminalContext);
        }
    };
    Object.defineProperty(Comma_input_terminal_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_input_terminal_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_input_terminal_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_input_terminal_star) {
            listener.enterComma_input_terminal_star(this);
        }
    };
    // @Override
    Comma_input_terminal_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_input_terminal_star) {
            listener.exitComma_input_terminal_star(this);
        }
    };
    // @Override
    Comma_input_terminal_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_input_terminal_star) {
            return visitor.visitComma_input_terminal_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_input_terminal_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_input_terminal_starContext = Comma_input_terminal_starContext;
var Comma_output_terminal_starContext = /** @class */ (function (_super) {
    __extends(Comma_output_terminal_starContext, _super);
    function Comma_output_terminal_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_output_terminal_starContext.prototype.comma_output_terminal = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_output_terminalContext);
        }
        else {
            return this.getRuleContext(i, Comma_output_terminalContext);
        }
    };
    Object.defineProperty(Comma_output_terminal_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_output_terminal_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_output_terminal_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_output_terminal_star) {
            listener.enterComma_output_terminal_star(this);
        }
    };
    // @Override
    Comma_output_terminal_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_output_terminal_star) {
            listener.exitComma_output_terminal_star(this);
        }
    };
    // @Override
    Comma_output_terminal_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_output_terminal_star) {
            return visitor.visitComma_output_terminal_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_output_terminal_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_output_terminal_starContext = Comma_output_terminal_starContext;
var Comma_input_terminalContext = /** @class */ (function (_super) {
    __extends(Comma_input_terminalContext, _super);
    function Comma_input_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_input_terminalContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_input_terminalContext.prototype.input_terminal = function () {
        return this.getRuleContext(0, Input_terminalContext);
    };
    Object.defineProperty(Comma_input_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_input_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_input_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_input_terminal) {
            listener.enterComma_input_terminal(this);
        }
    };
    // @Override
    Comma_input_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_input_terminal) {
            listener.exitComma_input_terminal(this);
        }
    };
    // @Override
    Comma_input_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_input_terminal) {
            return visitor.visitComma_input_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_input_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_input_terminalContext = Comma_input_terminalContext;
var Comma_output_terminalContext = /** @class */ (function (_super) {
    __extends(Comma_output_terminalContext, _super);
    function Comma_output_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_output_terminalContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_output_terminalContext.prototype.output_terminal = function () {
        return this.getRuleContext(0, Output_terminalContext);
    };
    Object.defineProperty(Comma_output_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_output_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_output_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_output_terminal) {
            listener.enterComma_output_terminal(this);
        }
    };
    // @Override
    Comma_output_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_output_terminal) {
            listener.exitComma_output_terminal(this);
        }
    };
    // @Override
    Comma_output_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_output_terminal) {
            return visitor.visitComma_output_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_output_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_output_terminalContext = Comma_output_terminalContext;
var Enable_terminalContext = /** @class */ (function (_super) {
    __extends(Enable_terminalContext, _super);
    function Enable_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Enable_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Enable_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_enable_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Enable_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterEnable_terminal) {
            listener.enterEnable_terminal(this);
        }
    };
    // @Override
    Enable_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitEnable_terminal) {
            listener.exitEnable_terminal(this);
        }
    };
    // @Override
    Enable_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitEnable_terminal) {
            return visitor.visitEnable_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Enable_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Enable_terminalContext = Enable_terminalContext;
var Input_terminalContext = /** @class */ (function (_super) {
    __extends(Input_terminalContext, _super);
    function Input_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Input_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Input_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_input_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Input_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterInput_terminal) {
            listener.enterInput_terminal(this);
        }
    };
    // @Override
    Input_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitInput_terminal) {
            listener.exitInput_terminal(this);
        }
    };
    // @Override
    Input_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitInput_terminal) {
            return visitor.visitInput_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Input_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Input_terminalContext = Input_terminalContext;
var Inout_terminalContext = /** @class */ (function (_super) {
    __extends(Inout_terminalContext, _super);
    function Inout_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Inout_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Inout_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_inout_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Inout_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterInout_terminal) {
            listener.enterInout_terminal(this);
        }
    };
    // @Override
    Inout_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitInout_terminal) {
            listener.exitInout_terminal(this);
        }
    };
    // @Override
    Inout_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitInout_terminal) {
            return visitor.visitInout_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Inout_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Inout_terminalContext = Inout_terminalContext;
var Ncontrol_terminalContext = /** @class */ (function (_super) {
    __extends(Ncontrol_terminalContext, _super);
    function Ncontrol_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ncontrol_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Ncontrol_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_ncontrol_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ncontrol_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterNcontrol_terminal) {
            listener.enterNcontrol_terminal(this);
        }
    };
    // @Override
    Ncontrol_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitNcontrol_terminal) {
            listener.exitNcontrol_terminal(this);
        }
    };
    // @Override
    Ncontrol_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitNcontrol_terminal) {
            return visitor.visitNcontrol_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ncontrol_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ncontrol_terminalContext = Ncontrol_terminalContext;
var Output_terminalContext = /** @class */ (function (_super) {
    __extends(Output_terminalContext, _super);
    function Output_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Output_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Output_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_output_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Output_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterOutput_terminal) {
            listener.enterOutput_terminal(this);
        }
    };
    // @Override
    Output_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitOutput_terminal) {
            listener.exitOutput_terminal(this);
        }
    };
    // @Override
    Output_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitOutput_terminal) {
            return visitor.visitOutput_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Output_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Output_terminalContext = Output_terminalContext;
var Pcontrol_terminalContext = /** @class */ (function (_super) {
    __extends(Pcontrol_terminalContext, _super);
    function Pcontrol_terminalContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Pcontrol_terminalContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Pcontrol_terminalContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_pcontrol_terminal; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Pcontrol_terminalContext.prototype.enterRule = function (listener) {
        if (listener.enterPcontrol_terminal) {
            listener.enterPcontrol_terminal(this);
        }
    };
    // @Override
    Pcontrol_terminalContext.prototype.exitRule = function (listener) {
        if (listener.exitPcontrol_terminal) {
            listener.exitPcontrol_terminal(this);
        }
    };
    // @Override
    Pcontrol_terminalContext.prototype.accept = function (visitor) {
        if (visitor.visitPcontrol_terminal) {
            return visitor.visitPcontrol_terminal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Pcontrol_terminalContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Pcontrol_terminalContext = Pcontrol_terminalContext;
var Statement_starContext = /** @class */ (function (_super) {
    __extends(Statement_starContext, _super);
    function Statement_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Statement_starContext.prototype.statement_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Statement_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Statement_semicolonContext);
        }
    };
    Object.defineProperty(Statement_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_statement_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Statement_starContext.prototype.enterRule = function (listener) {
        if (listener.enterStatement_star) {
            listener.enterStatement_star(this);
        }
    };
    // @Override
    Statement_starContext.prototype.exitRule = function (listener) {
        if (listener.exitStatement_star) {
            listener.exitStatement_star(this);
        }
    };
    // @Override
    Statement_starContext.prototype.accept = function (visitor) {
        if (visitor.visitStatement_star) {
            return visitor.visitStatement_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Statement_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Statement_starContext = Statement_starContext;
var Statement_semicolonContext = /** @class */ (function (_super) {
    __extends(Statement_semicolonContext, _super);
    function Statement_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Statement_semicolonContext.prototype.attribute_instance_star = function () {
        return this.tryGetRuleContext(0, Attribute_instance_starContext);
    };
    Statement_semicolonContext.prototype.statement = function () {
        return this.tryGetRuleContext(0, StatementContext);
    };
    Statement_semicolonContext.prototype.semicolon = function () {
        return this.tryGetRuleContext(0, SemicolonContext);
    };
    Statement_semicolonContext.prototype.null_statement = function () {
        return this.tryGetRuleContext(0, Null_statementContext);
    };
    Object.defineProperty(Statement_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_statement_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Statement_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterStatement_semicolon) {
            listener.enterStatement_semicolon(this);
        }
    };
    // @Override
    Statement_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitStatement_semicolon) {
            listener.exitStatement_semicolon(this);
        }
    };
    // @Override
    Statement_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitStatement_semicolon) {
            return visitor.visitStatement_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Statement_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Statement_semicolonContext = Statement_semicolonContext;
var StatementContext = /** @class */ (function (_super) {
    __extends(StatementContext, _super);
    function StatementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StatementContext.prototype.assignment_statement = function () {
        return this.tryGetRuleContext(0, Assignment_statementContext);
    };
    StatementContext.prototype.flow_control_statement = function () {
        return this.tryGetRuleContext(0, Flow_control_statementContext);
    };
    StatementContext.prototype.block_statement = function () {
        return this.tryGetRuleContext(0, Block_statementContext);
    };
    StatementContext.prototype.task_call_statement = function () {
        return this.tryGetRuleContext(0, Task_call_statementContext);
    };
    StatementContext.prototype.event_statement = function () {
        return this.tryGetRuleContext(0, Event_statementContext);
    };
    StatementContext.prototype.procedural_statement = function () {
        return this.tryGetRuleContext(0, Procedural_statementContext);
    };
    StatementContext.prototype.expression_statement = function () {
        return this.tryGetRuleContext(0, Expression_statementContext);
    };
    StatementContext.prototype.subroutine_statement = function () {
        return this.tryGetRuleContext(0, Subroutine_statementContext);
    };
    Object.defineProperty(StatementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    StatementContext.prototype.enterRule = function (listener) {
        if (listener.enterStatement) {
            listener.enterStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.exitRule = function (listener) {
        if (listener.exitStatement) {
            listener.exitStatement(this);
        }
    };
    // @Override
    StatementContext.prototype.accept = function (visitor) {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return StatementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StatementContext = StatementContext;
var Assignment_statementContext = /** @class */ (function (_super) {
    __extends(Assignment_statementContext, _super);
    function Assignment_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Assignment_statementContext.prototype.blocking_assignment = function () {
        return this.tryGetRuleContext(0, Blocking_assignmentContext);
    };
    Assignment_statementContext.prototype.nonblocking_assignment = function () {
        return this.tryGetRuleContext(0, Nonblocking_assignmentContext);
    };
    Assignment_statementContext.prototype.prefix_assignment = function () {
        return this.tryGetRuleContext(0, Prefix_assignmentContext);
    };
    Assignment_statementContext.prototype.postfix_assignment = function () {
        return this.tryGetRuleContext(0, Postfix_assignmentContext);
    };
    Assignment_statementContext.prototype.operator_assignment = function () {
        return this.tryGetRuleContext(0, Operator_assignmentContext);
    };
    Assignment_statementContext.prototype.declarative_assignment = function () {
        return this.tryGetRuleContext(0, Declarative_assignmentContext);
    };
    Object.defineProperty(Assignment_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_assignment_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Assignment_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterAssignment_statement) {
            listener.enterAssignment_statement(this);
        }
    };
    // @Override
    Assignment_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitAssignment_statement) {
            listener.exitAssignment_statement(this);
        }
    };
    // @Override
    Assignment_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitAssignment_statement) {
            return visitor.visitAssignment_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Assignment_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Assignment_statementContext = Assignment_statementContext;
var Flow_control_statementContext = /** @class */ (function (_super) {
    __extends(Flow_control_statementContext, _super);
    function Flow_control_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Flow_control_statementContext.prototype.case_statement = function () {
        return this.tryGetRuleContext(0, Case_statementContext);
    };
    Flow_control_statementContext.prototype.conditional_statement = function () {
        return this.tryGetRuleContext(0, Conditional_statementContext);
    };
    Flow_control_statementContext.prototype.loop_statement = function () {
        return this.tryGetRuleContext(0, Loop_statementContext);
    };
    Object.defineProperty(Flow_control_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_flow_control_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Flow_control_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFlow_control_statement) {
            listener.enterFlow_control_statement(this);
        }
    };
    // @Override
    Flow_control_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFlow_control_statement) {
            listener.exitFlow_control_statement(this);
        }
    };
    // @Override
    Flow_control_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFlow_control_statement) {
            return visitor.visitFlow_control_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Flow_control_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Flow_control_statementContext = Flow_control_statementContext;
var Block_statementContext = /** @class */ (function (_super) {
    __extends(Block_statementContext, _super);
    function Block_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_statementContext.prototype.par_block = function () {
        return this.tryGetRuleContext(0, Par_blockContext);
    };
    Block_statementContext.prototype.seq_block = function () {
        return this.tryGetRuleContext(0, Seq_blockContext);
    };
    Object.defineProperty(Block_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_block_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_statement) {
            listener.enterBlock_statement(this);
        }
    };
    // @Override
    Block_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_statement) {
            listener.exitBlock_statement(this);
        }
    };
    // @Override
    Block_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_statement) {
            return visitor.visitBlock_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_statementContext = Block_statementContext;
var Task_call_statementContext = /** @class */ (function (_super) {
    __extends(Task_call_statementContext, _super);
    function Task_call_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_call_statementContext.prototype.task_enable = function () {
        return this.tryGetRuleContext(0, Task_enableContext);
    };
    Task_call_statementContext.prototype.system_task_enable = function () {
        return this.tryGetRuleContext(0, System_task_enableContext);
    };
    Task_call_statementContext.prototype.disable_statement = function () {
        return this.tryGetRuleContext(0, Disable_statementContext);
    };
    Object.defineProperty(Task_call_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_call_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_call_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_call_statement) {
            listener.enterTask_call_statement(this);
        }
    };
    // @Override
    Task_call_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_call_statement) {
            listener.exitTask_call_statement(this);
        }
    };
    // @Override
    Task_call_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_call_statement) {
            return visitor.visitTask_call_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_call_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_call_statementContext = Task_call_statementContext;
var Event_statementContext = /** @class */ (function (_super) {
    __extends(Event_statementContext, _super);
    function Event_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_statementContext.prototype.event_trigger = function () {
        return this.tryGetRuleContext(0, Event_triggerContext);
    };
    Event_statementContext.prototype.wait_statement = function () {
        return this.tryGetRuleContext(0, Wait_statementContext);
    };
    Object.defineProperty(Event_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_statement) {
            listener.enterEvent_statement(this);
        }
    };
    // @Override
    Event_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_statement) {
            listener.exitEvent_statement(this);
        }
    };
    // @Override
    Event_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_statement) {
            return visitor.visitEvent_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_statementContext = Event_statementContext;
var Procedural_statementContext = /** @class */ (function (_super) {
    __extends(Procedural_statementContext, _super);
    function Procedural_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Procedural_statementContext.prototype.procedural_continuous_assignments = function () {
        return this.tryGetRuleContext(0, Procedural_continuous_assignmentsContext);
    };
    Procedural_statementContext.prototype.procedural_timing_control_statement = function () {
        return this.tryGetRuleContext(0, Procedural_timing_control_statementContext);
    };
    Procedural_statementContext.prototype.procedural_assertion_statement = function () {
        return this.tryGetRuleContext(0, Procedural_assertion_statementContext);
    };
    Procedural_statementContext.prototype.property_statement = function () {
        return this.tryGetRuleContext(0, Property_statementContext);
    };
    Object.defineProperty(Procedural_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_procedural_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Procedural_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedural_statement) {
            listener.enterProcedural_statement(this);
        }
    };
    // @Override
    Procedural_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedural_statement) {
            listener.exitProcedural_statement(this);
        }
    };
    // @Override
    Procedural_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedural_statement) {
            return visitor.visitProcedural_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Procedural_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Procedural_statementContext = Procedural_statementContext;
var Expression_statementContext = /** @class */ (function (_super) {
    __extends(Expression_statementContext, _super);
    function Expression_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Expression_statementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Expression_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_expression_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Expression_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterExpression_statement) {
            listener.enterExpression_statement(this);
        }
    };
    // @Override
    Expression_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitExpression_statement) {
            listener.exitExpression_statement(this);
        }
    };
    // @Override
    Expression_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitExpression_statement) {
            return visitor.visitExpression_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Expression_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Expression_statementContext = Expression_statementContext;
var Subroutine_statementContext = /** @class */ (function (_super) {
    __extends(Subroutine_statementContext, _super);
    function Subroutine_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Subroutine_statementContext.prototype.return_statement = function () {
        return this.getRuleContext(0, Return_statementContext);
    };
    Object.defineProperty(Subroutine_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_subroutine_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Subroutine_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterSubroutine_statement) {
            listener.enterSubroutine_statement(this);
        }
    };
    // @Override
    Subroutine_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitSubroutine_statement) {
            listener.exitSubroutine_statement(this);
        }
    };
    // @Override
    Subroutine_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitSubroutine_statement) {
            return visitor.visitSubroutine_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Subroutine_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Subroutine_statementContext = Subroutine_statementContext;
var Return_statementContext = /** @class */ (function (_super) {
    __extends(Return_statementContext, _super);
    function Return_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Return_statementContext.prototype.Return = function () { return this.getToken(SysVerilogHDLParser.Return, 0); };
    Return_statementContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Return_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_return_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Return_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterReturn_statement) {
            listener.enterReturn_statement(this);
        }
    };
    // @Override
    Return_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitReturn_statement) {
            listener.exitReturn_statement(this);
        }
    };
    // @Override
    Return_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitReturn_statement) {
            return visitor.visitReturn_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Return_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Return_statementContext = Return_statementContext;
var Null_statementContext = /** @class */ (function (_super) {
    __extends(Null_statementContext, _super);
    function Null_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Null_statementContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Null_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_null_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Null_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterNull_statement) {
            listener.enterNull_statement(this);
        }
    };
    // @Override
    Null_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitNull_statement) {
            listener.exitNull_statement(this);
        }
    };
    // @Override
    Null_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitNull_statement) {
            return visitor.visitNull_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Null_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Null_statementContext = Null_statementContext;
var Procedural_continuous_assignmentsContext = /** @class */ (function (_super) {
    __extends(Procedural_continuous_assignmentsContext, _super);
    function Procedural_continuous_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Procedural_continuous_assignmentsContext.prototype.assign_statement = function () {
        return this.tryGetRuleContext(0, Assign_statementContext);
    };
    Procedural_continuous_assignmentsContext.prototype.deassign_statement = function () {
        return this.tryGetRuleContext(0, Deassign_statementContext);
    };
    Procedural_continuous_assignmentsContext.prototype.force_statement = function () {
        return this.tryGetRuleContext(0, Force_statementContext);
    };
    Procedural_continuous_assignmentsContext.prototype.release_statement = function () {
        return this.tryGetRuleContext(0, Release_statementContext);
    };
    Object.defineProperty(Procedural_continuous_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_procedural_continuous_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Procedural_continuous_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedural_continuous_assignments) {
            listener.enterProcedural_continuous_assignments(this);
        }
    };
    // @Override
    Procedural_continuous_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedural_continuous_assignments) {
            listener.exitProcedural_continuous_assignments(this);
        }
    };
    // @Override
    Procedural_continuous_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedural_continuous_assignments) {
            return visitor.visitProcedural_continuous_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Procedural_continuous_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Procedural_continuous_assignmentsContext = Procedural_continuous_assignmentsContext;
var Assign_statementContext = /** @class */ (function (_super) {
    __extends(Assign_statementContext, _super);
    function Assign_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Assign_statementContext.prototype.Assign = function () { return this.getToken(SysVerilogHDLParser.Assign, 0); };
    Assign_statementContext.prototype.assignment_statement = function () {
        return this.getRuleContext(0, Assignment_statementContext);
    };
    Object.defineProperty(Assign_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_assign_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Assign_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterAssign_statement) {
            listener.enterAssign_statement(this);
        }
    };
    // @Override
    Assign_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitAssign_statement) {
            listener.exitAssign_statement(this);
        }
    };
    // @Override
    Assign_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitAssign_statement) {
            return visitor.visitAssign_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Assign_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Assign_statementContext = Assign_statementContext;
var Deassign_statementContext = /** @class */ (function (_super) {
    __extends(Deassign_statementContext, _super);
    function Deassign_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Deassign_statementContext.prototype.Deassign = function () { return this.getToken(SysVerilogHDLParser.Deassign, 0); };
    Deassign_statementContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Object.defineProperty(Deassign_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_deassign_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Deassign_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterDeassign_statement) {
            listener.enterDeassign_statement(this);
        }
    };
    // @Override
    Deassign_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitDeassign_statement) {
            listener.exitDeassign_statement(this);
        }
    };
    // @Override
    Deassign_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitDeassign_statement) {
            return visitor.visitDeassign_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Deassign_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Deassign_statementContext = Deassign_statementContext;
var Force_statementContext = /** @class */ (function (_super) {
    __extends(Force_statementContext, _super);
    function Force_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Force_statementContext.prototype.Force = function () { return this.getToken(SysVerilogHDLParser.Force, 0); };
    Force_statementContext.prototype.assignment_statement = function () {
        return this.getRuleContext(0, Assignment_statementContext);
    };
    Object.defineProperty(Force_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_force_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Force_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterForce_statement) {
            listener.enterForce_statement(this);
        }
    };
    // @Override
    Force_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitForce_statement) {
            listener.exitForce_statement(this);
        }
    };
    // @Override
    Force_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitForce_statement) {
            return visitor.visitForce_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Force_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Force_statementContext = Force_statementContext;
var Release_statementContext = /** @class */ (function (_super) {
    __extends(Release_statementContext, _super);
    function Release_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Release_statementContext.prototype.Release = function () { return this.getToken(SysVerilogHDLParser.Release, 0); };
    Release_statementContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Object.defineProperty(Release_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_release_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Release_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterRelease_statement) {
            listener.enterRelease_statement(this);
        }
    };
    // @Override
    Release_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitRelease_statement) {
            listener.exitRelease_statement(this);
        }
    };
    // @Override
    Release_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitRelease_statement) {
            return visitor.visitRelease_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Release_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Release_statementContext = Release_statementContext;
var Procedural_timing_control_statementContext = /** @class */ (function (_super) {
    __extends(Procedural_timing_control_statementContext, _super);
    function Procedural_timing_control_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Procedural_timing_control_statementContext.prototype.delay_or_event_control = function () {
        return this.getRuleContext(0, Delay_or_event_controlContext);
    };
    Procedural_timing_control_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Procedural_timing_control_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_procedural_timing_control_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Procedural_timing_control_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedural_timing_control_statement) {
            listener.enterProcedural_timing_control_statement(this);
        }
    };
    // @Override
    Procedural_timing_control_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedural_timing_control_statement) {
            listener.exitProcedural_timing_control_statement(this);
        }
    };
    // @Override
    Procedural_timing_control_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedural_timing_control_statement) {
            return visitor.visitProcedural_timing_control_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Procedural_timing_control_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Procedural_timing_control_statementContext = Procedural_timing_control_statementContext;
var Property_statementContext = /** @class */ (function (_super) {
    __extends(Property_statementContext, _super);
    function Property_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Property_statementContext.prototype.disable_condition_statement = function () {
        return this.getRuleContext(0, Disable_condition_statementContext);
    };
    Object.defineProperty(Property_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_property_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Property_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterProperty_statement) {
            listener.enterProperty_statement(this);
        }
    };
    // @Override
    Property_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitProperty_statement) {
            listener.exitProperty_statement(this);
        }
    };
    // @Override
    Property_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitProperty_statement) {
            return visitor.visitProperty_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Property_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Property_statementContext = Property_statementContext;
var Disable_condition_statementContext = /** @class */ (function (_super) {
    __extends(Disable_condition_statementContext, _super);
    function Disable_condition_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Disable_condition_statementContext.prototype.Disable = function () { return this.getToken(SysVerilogHDLParser.Disable, 0); };
    Disable_condition_statementContext.prototype.Iff = function () { return this.getToken(SysVerilogHDLParser.Iff, 0); };
    Disable_condition_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Disable_condition_statementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Disable_condition_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Disable_condition_statementContext.prototype.property_expression = function () {
        return this.getRuleContext(0, Property_expressionContext);
    };
    Object.defineProperty(Disable_condition_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_disable_condition_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Disable_condition_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterDisable_condition_statement) {
            listener.enterDisable_condition_statement(this);
        }
    };
    // @Override
    Disable_condition_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitDisable_condition_statement) {
            listener.exitDisable_condition_statement(this);
        }
    };
    // @Override
    Disable_condition_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitDisable_condition_statement) {
            return visitor.visitDisable_condition_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Disable_condition_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Disable_condition_statementContext = Disable_condition_statementContext;
var Property_expressionContext = /** @class */ (function (_super) {
    __extends(Property_expressionContext, _super);
    function Property_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Property_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Property_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_property_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Property_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterProperty_expression) {
            listener.enterProperty_expression(this);
        }
    };
    // @Override
    Property_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitProperty_expression) {
            listener.exitProperty_expression(this);
        }
    };
    // @Override
    Property_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitProperty_expression) {
            return visitor.visitProperty_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Property_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Property_expressionContext = Property_expressionContext;
var Procedural_assertion_statementContext = /** @class */ (function (_super) {
    __extends(Procedural_assertion_statementContext, _super);
    function Procedural_assertion_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Procedural_assertion_statementContext.prototype.assert_statement = function () {
        return this.getRuleContext(0, Assert_statementContext);
    };
    Procedural_assertion_statementContext.prototype.assert_else_statement = function () {
        return this.tryGetRuleContext(0, Assert_else_statementContext);
    };
    Object.defineProperty(Procedural_assertion_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_procedural_assertion_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Procedural_assertion_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterProcedural_assertion_statement) {
            listener.enterProcedural_assertion_statement(this);
        }
    };
    // @Override
    Procedural_assertion_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitProcedural_assertion_statement) {
            listener.exitProcedural_assertion_statement(this);
        }
    };
    // @Override
    Procedural_assertion_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitProcedural_assertion_statement) {
            return visitor.visitProcedural_assertion_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Procedural_assertion_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Procedural_assertion_statementContext = Procedural_assertion_statementContext;
var Assert_else_statementContext = /** @class */ (function (_super) {
    __extends(Assert_else_statementContext, _super);
    function Assert_else_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Assert_else_statementContext.prototype.Else = function () { return this.getToken(SysVerilogHDLParser.Else, 0); };
    Assert_else_statementContext.prototype.statement = function () {
        return this.getRuleContext(0, StatementContext);
    };
    Object.defineProperty(Assert_else_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_assert_else_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Assert_else_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterAssert_else_statement) {
            listener.enterAssert_else_statement(this);
        }
    };
    // @Override
    Assert_else_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitAssert_else_statement) {
            listener.exitAssert_else_statement(this);
        }
    };
    // @Override
    Assert_else_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitAssert_else_statement) {
            return visitor.visitAssert_else_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Assert_else_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Assert_else_statementContext = Assert_else_statementContext;
var Assert_statementContext = /** @class */ (function (_super) {
    __extends(Assert_statementContext, _super);
    function Assert_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Assert_statementContext.prototype.Assert = function () { return this.getToken(SysVerilogHDLParser.Assert, 0); };
    Assert_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Assert_statementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Assert_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Assert_statementContext.prototype.hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_identifierContext);
    };
    Assert_statementContext.prototype.Colon = function () { return this.tryGetToken(SysVerilogHDLParser.Colon, 0); };
    Object.defineProperty(Assert_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_assert_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Assert_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterAssert_statement) {
            listener.enterAssert_statement(this);
        }
    };
    // @Override
    Assert_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitAssert_statement) {
            listener.exitAssert_statement(this);
        }
    };
    // @Override
    Assert_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitAssert_statement) {
            return visitor.visitAssert_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Assert_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Assert_statementContext = Assert_statementContext;
var System_task_enableContext = /** @class */ (function (_super) {
    __extends(System_task_enableContext, _super);
    function System_task_enableContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_task_enableContext.prototype.system_task_identifier = function () {
        return this.getRuleContext(0, System_task_identifierContext);
    };
    System_task_enableContext.prototype.task_interface_assignments = function () {
        return this.tryGetRuleContext(0, Task_interface_assignmentsContext);
    };
    Object.defineProperty(System_task_enableContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_system_task_enable; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_task_enableContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_task_enable) {
            listener.enterSystem_task_enable(this);
        }
    };
    // @Override
    System_task_enableContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_task_enable) {
            listener.exitSystem_task_enable(this);
        }
    };
    // @Override
    System_task_enableContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_task_enable) {
            return visitor.visitSystem_task_enable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_task_enableContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_task_enableContext = System_task_enableContext;
var System_task_identifierContext = /** @class */ (function (_super) {
    __extends(System_task_identifierContext, _super);
    function System_task_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_task_identifierContext.prototype.Dollar_Identifier = function () { return this.getToken(SysVerilogHDLParser.Dollar_Identifier, 0); };
    Object.defineProperty(System_task_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_system_task_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_task_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_task_identifier) {
            listener.enterSystem_task_identifier(this);
        }
    };
    // @Override
    System_task_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_task_identifier) {
            listener.exitSystem_task_identifier(this);
        }
    };
    // @Override
    System_task_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_task_identifier) {
            return visitor.visitSystem_task_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_task_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_task_identifierContext = System_task_identifierContext;
var Task_interface_assignmentsContext = /** @class */ (function (_super) {
    __extends(Task_interface_assignmentsContext, _super);
    function Task_interface_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_interface_assignmentsContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Task_interface_assignmentsContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Task_interface_assignmentsContext.prototype.list_of_interface_assignments = function () {
        return this.tryGetRuleContext(0, List_of_interface_assignmentsContext);
    };
    Object.defineProperty(Task_interface_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_interface_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_interface_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_interface_assignments) {
            listener.enterTask_interface_assignments(this);
        }
    };
    // @Override
    Task_interface_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_interface_assignments) {
            listener.exitTask_interface_assignments(this);
        }
    };
    // @Override
    Task_interface_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_interface_assignments) {
            return visitor.visitTask_interface_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_interface_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_interface_assignmentsContext = Task_interface_assignmentsContext;
var Task_enableContext = /** @class */ (function (_super) {
    __extends(Task_enableContext, _super);
    function Task_enableContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Task_enableContext.prototype.hierarchical_task_identifier = function () {
        return this.getRuleContext(0, Hierarchical_task_identifierContext);
    };
    Task_enableContext.prototype.task_interface_assignments = function () {
        return this.tryGetRuleContext(0, Task_interface_assignmentsContext);
    };
    Object.defineProperty(Task_enableContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_task_enable; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Task_enableContext.prototype.enterRule = function (listener) {
        if (listener.enterTask_enable) {
            listener.enterTask_enable(this);
        }
    };
    // @Override
    Task_enableContext.prototype.exitRule = function (listener) {
        if (listener.exitTask_enable) {
            listener.exitTask_enable(this);
        }
    };
    // @Override
    Task_enableContext.prototype.accept = function (visitor) {
        if (visitor.visitTask_enable) {
            return visitor.visitTask_enable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Task_enableContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Task_enableContext = Task_enableContext;
var Hierarchical_task_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_task_identifierContext, _super);
    function Hierarchical_task_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_task_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_task_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_task_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_task_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_task_identifier) {
            listener.enterHierarchical_task_identifier(this);
        }
    };
    // @Override
    Hierarchical_task_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_task_identifier) {
            listener.exitHierarchical_task_identifier(this);
        }
    };
    // @Override
    Hierarchical_task_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_task_identifier) {
            return visitor.visitHierarchical_task_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_task_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_task_identifierContext = Hierarchical_task_identifierContext;
var Disable_statementContext = /** @class */ (function (_super) {
    __extends(Disable_statementContext, _super);
    function Disable_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Disable_statementContext.prototype.Disable = function () { return this.getToken(SysVerilogHDLParser.Disable, 0); };
    Disable_statementContext.prototype.hierarchical_task_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_task_identifierContext);
    };
    Disable_statementContext.prototype.hierarchical_block_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_block_identifierContext);
    };
    Object.defineProperty(Disable_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_disable_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Disable_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterDisable_statement) {
            listener.enterDisable_statement(this);
        }
    };
    // @Override
    Disable_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitDisable_statement) {
            listener.exitDisable_statement(this);
        }
    };
    // @Override
    Disable_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitDisable_statement) {
            return visitor.visitDisable_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Disable_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Disable_statementContext = Disable_statementContext;
var Hierarchical_block_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_block_identifierContext, _super);
    function Hierarchical_block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_block_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_block_identifier) {
            listener.enterHierarchical_block_identifier(this);
        }
    };
    // @Override
    Hierarchical_block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_block_identifier) {
            listener.exitHierarchical_block_identifier(this);
        }
    };
    // @Override
    Hierarchical_block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_block_identifier) {
            return visitor.visitHierarchical_block_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_block_identifierContext = Hierarchical_block_identifierContext;
var Variable_lvalueContext = /** @class */ (function (_super) {
    __extends(Variable_lvalueContext, _super);
    function Variable_lvalueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_lvalueContext.prototype.hierarchical_variable_lvalue = function () {
        return this.tryGetRuleContext(0, Hierarchical_variable_lvalueContext);
    };
    Variable_lvalueContext.prototype.variable_concatenation = function () {
        return this.tryGetRuleContext(0, Variable_concatenationContext);
    };
    Object.defineProperty(Variable_lvalueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_lvalue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_lvalueContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_lvalue) {
            listener.enterVariable_lvalue(this);
        }
    };
    // @Override
    Variable_lvalueContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_lvalue) {
            listener.exitVariable_lvalue(this);
        }
    };
    // @Override
    Variable_lvalueContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_lvalue) {
            return visitor.visitVariable_lvalue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_lvalueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_lvalueContext = Variable_lvalueContext;
var Hierarchical_variable_lvalueContext = /** @class */ (function (_super) {
    __extends(Hierarchical_variable_lvalueContext, _super);
    function Hierarchical_variable_lvalueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_variable_lvalueContext.prototype.primary_hierarchical_identifier = function () {
        return this.getRuleContext(0, Primary_hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_variable_lvalueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_variable_lvalue; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_variable_lvalueContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_variable_lvalue) {
            listener.enterHierarchical_variable_lvalue(this);
        }
    };
    // @Override
    Hierarchical_variable_lvalueContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_variable_lvalue) {
            listener.exitHierarchical_variable_lvalue(this);
        }
    };
    // @Override
    Hierarchical_variable_lvalueContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_variable_lvalue) {
            return visitor.visitHierarchical_variable_lvalue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_variable_lvalueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_variable_lvalueContext = Hierarchical_variable_lvalueContext;
var Variable_concatenationContext = /** @class */ (function (_super) {
    __extends(Variable_concatenationContext, _super);
    function Variable_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_concatenationContext.prototype.Left_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_curly_bracket, 0); };
    Variable_concatenationContext.prototype.variable_concatenation_value = function () {
        return this.getRuleContext(0, Variable_concatenation_valueContext);
    };
    Variable_concatenationContext.prototype.comma_vcv_star = function () {
        return this.getRuleContext(0, Comma_vcv_starContext);
    };
    Variable_concatenationContext.prototype.Right_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_curly_bracket, 0); };
    Object.defineProperty(Variable_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_concatenation) {
            listener.enterVariable_concatenation(this);
        }
    };
    // @Override
    Variable_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_concatenation) {
            listener.exitVariable_concatenation(this);
        }
    };
    // @Override
    Variable_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_concatenation) {
            return visitor.visitVariable_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_concatenationContext = Variable_concatenationContext;
var Variable_concatenation_valueContext = /** @class */ (function (_super) {
    __extends(Variable_concatenation_valueContext, _super);
    function Variable_concatenation_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_concatenation_valueContext.prototype.primary_hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Primary_hierarchical_identifierContext);
    };
    Variable_concatenation_valueContext.prototype.variable_concatenation = function () {
        return this.tryGetRuleContext(0, Variable_concatenationContext);
    };
    Object.defineProperty(Variable_concatenation_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_concatenation_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_concatenation_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_concatenation_value) {
            listener.enterVariable_concatenation_value(this);
        }
    };
    // @Override
    Variable_concatenation_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_concatenation_value) {
            listener.exitVariable_concatenation_value(this);
        }
    };
    // @Override
    Variable_concatenation_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_concatenation_value) {
            return visitor.visitVariable_concatenation_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_concatenation_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_concatenation_valueContext = Variable_concatenation_valueContext;
var Comma_vcv_starContext = /** @class */ (function (_super) {
    __extends(Comma_vcv_starContext, _super);
    function Comma_vcv_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_vcv_starContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Comma_vcv_starContext.prototype.variable_concatenation_value = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Variable_concatenation_valueContext);
        }
        else {
            return this.getRuleContext(i, Variable_concatenation_valueContext);
        }
    };
    Object.defineProperty(Comma_vcv_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_vcv_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_vcv_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_vcv_star) {
            listener.enterComma_vcv_star(this);
        }
    };
    // @Override
    Comma_vcv_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_vcv_star) {
            listener.exitComma_vcv_star(this);
        }
    };
    // @Override
    Comma_vcv_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_vcv_star) {
            return visitor.visitComma_vcv_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_vcv_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_vcv_starContext = Comma_vcv_starContext;
var Blocking_assignmentContext = /** @class */ (function (_super) {
    __extends(Blocking_assignmentContext, _super);
    function Blocking_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Blocking_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Blocking_assignmentContext.prototype.Equal = function () { return this.getToken(SysVerilogHDLParser.Equal, 0); };
    Blocking_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Blocking_assignmentContext.prototype.delay_or_event_control = function () {
        return this.tryGetRuleContext(0, Delay_or_event_controlContext);
    };
    Object.defineProperty(Blocking_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_blocking_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Blocking_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterBlocking_assignment) {
            listener.enterBlocking_assignment(this);
        }
    };
    // @Override
    Blocking_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitBlocking_assignment) {
            listener.exitBlocking_assignment(this);
        }
    };
    // @Override
    Blocking_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitBlocking_assignment) {
            return visitor.visitBlocking_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Blocking_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Blocking_assignmentContext = Blocking_assignmentContext;
var Nonblocking_assignmentContext = /** @class */ (function (_super) {
    __extends(Nonblocking_assignmentContext, _super);
    function Nonblocking_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Nonblocking_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Nonblocking_assignmentContext.prototype.Left_angle_equals = function () { return this.getToken(SysVerilogHDLParser.Left_angle_equals, 0); };
    Nonblocking_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Nonblocking_assignmentContext.prototype.delay_or_event_control = function () {
        return this.tryGetRuleContext(0, Delay_or_event_controlContext);
    };
    Object.defineProperty(Nonblocking_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_nonblocking_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Nonblocking_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterNonblocking_assignment) {
            listener.enterNonblocking_assignment(this);
        }
    };
    // @Override
    Nonblocking_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitNonblocking_assignment) {
            listener.exitNonblocking_assignment(this);
        }
    };
    // @Override
    Nonblocking_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitNonblocking_assignment) {
            return visitor.visitNonblocking_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Nonblocking_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Nonblocking_assignmentContext = Nonblocking_assignmentContext;
var Prefix_assignmentContext = /** @class */ (function (_super) {
    __extends(Prefix_assignmentContext, _super);
    function Prefix_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Prefix_assignmentContext.prototype.unary_assign_operator = function () {
        return this.getRuleContext(0, Unary_assign_operatorContext);
    };
    Prefix_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Object.defineProperty(Prefix_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_prefix_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Prefix_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterPrefix_assignment) {
            listener.enterPrefix_assignment(this);
        }
    };
    // @Override
    Prefix_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitPrefix_assignment) {
            listener.exitPrefix_assignment(this);
        }
    };
    // @Override
    Prefix_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitPrefix_assignment) {
            return visitor.visitPrefix_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Prefix_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Prefix_assignmentContext = Prefix_assignmentContext;
var Postfix_assignmentContext = /** @class */ (function (_super) {
    __extends(Postfix_assignmentContext, _super);
    function Postfix_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Postfix_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Postfix_assignmentContext.prototype.unary_assign_operator = function () {
        return this.getRuleContext(0, Unary_assign_operatorContext);
    };
    Object.defineProperty(Postfix_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_postfix_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Postfix_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterPostfix_assignment) {
            listener.enterPostfix_assignment(this);
        }
    };
    // @Override
    Postfix_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitPostfix_assignment) {
            listener.exitPostfix_assignment(this);
        }
    };
    // @Override
    Postfix_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitPostfix_assignment) {
            return visitor.visitPostfix_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Postfix_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Postfix_assignmentContext = Postfix_assignmentContext;
var Operator_assignmentContext = /** @class */ (function (_super) {
    __extends(Operator_assignmentContext, _super);
    function Operator_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Operator_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Operator_assignmentContext.prototype.binary_assign_operator = function () {
        return this.getRuleContext(0, Binary_assign_operatorContext);
    };
    Operator_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Operator_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_operator_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Operator_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterOperator_assignment) {
            listener.enterOperator_assignment(this);
        }
    };
    // @Override
    Operator_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitOperator_assignment) {
            listener.exitOperator_assignment(this);
        }
    };
    // @Override
    Operator_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitOperator_assignment) {
            return visitor.visitOperator_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Operator_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Operator_assignmentContext = Operator_assignmentContext;
var Declarative_assignmentContext = /** @class */ (function (_super) {
    __extends(Declarative_assignmentContext, _super);
    function Declarative_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Declarative_assignmentContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Declarative_assignmentContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Declarative_assignmentContext.prototype.bits_declaration = function () {
        return this.tryGetRuleContext(0, Bits_declarationContext);
    };
    Declarative_assignmentContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Declarative_assignmentContext.prototype.int_declaration = function () {
        return this.tryGetRuleContext(0, Int_declarationContext);
    };
    Declarative_assignmentContext.prototype.genvar_declaration = function () {
        return this.tryGetRuleContext(0, Genvar_declarationContext);
    };
    Object.defineProperty(Declarative_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_declarative_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Declarative_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterDeclarative_assignment) {
            listener.enterDeclarative_assignment(this);
        }
    };
    // @Override
    Declarative_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitDeclarative_assignment) {
            listener.exitDeclarative_assignment(this);
        }
    };
    // @Override
    Declarative_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitDeclarative_assignment) {
            return visitor.visitDeclarative_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Declarative_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Declarative_assignmentContext = Declarative_assignmentContext;
var Delay_or_event_controlContext = /** @class */ (function (_super) {
    __extends(Delay_or_event_controlContext, _super);
    function Delay_or_event_controlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay_or_event_controlContext.prototype.delay_control = function () {
        return this.tryGetRuleContext(0, Delay_controlContext);
    };
    Delay_or_event_controlContext.prototype.event_control = function () {
        return this.tryGetRuleContext(0, Event_controlContext);
    };
    Delay_or_event_controlContext.prototype.repeat_event_control = function () {
        return this.tryGetRuleContext(0, Repeat_event_controlContext);
    };
    Object.defineProperty(Delay_or_event_controlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_delay_or_event_control; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay_or_event_controlContext.prototype.enterRule = function (listener) {
        if (listener.enterDelay_or_event_control) {
            listener.enterDelay_or_event_control(this);
        }
    };
    // @Override
    Delay_or_event_controlContext.prototype.exitRule = function (listener) {
        if (listener.exitDelay_or_event_control) {
            listener.exitDelay_or_event_control(this);
        }
    };
    // @Override
    Delay_or_event_controlContext.prototype.accept = function (visitor) {
        if (visitor.visitDelay_or_event_control) {
            return visitor.visitDelay_or_event_control(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay_or_event_controlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay_or_event_controlContext = Delay_or_event_controlContext;
var Delay_controlContext = /** @class */ (function (_super) {
    __extends(Delay_controlContext, _super);
    function Delay_controlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Delay_controlContext.prototype.Hash = function () { return this.getToken(SysVerilogHDLParser.Hash, 0); };
    Delay_controlContext.prototype.delay_value = function () {
        return this.tryGetRuleContext(0, Delay_valueContext);
    };
    Delay_controlContext.prototype.Open_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Delay_controlContext.prototype.Close_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Delay_controlContext.prototype.mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Mintypmax_expressionContext);
    };
    Object.defineProperty(Delay_controlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_delay_control; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Delay_controlContext.prototype.enterRule = function (listener) {
        if (listener.enterDelay_control) {
            listener.enterDelay_control(this);
        }
    };
    // @Override
    Delay_controlContext.prototype.exitRule = function (listener) {
        if (listener.exitDelay_control) {
            listener.exitDelay_control(this);
        }
    };
    // @Override
    Delay_controlContext.prototype.accept = function (visitor) {
        if (visitor.visitDelay_control) {
            return visitor.visitDelay_control(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Delay_controlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Delay_controlContext = Delay_controlContext;
var Event_controlContext = /** @class */ (function (_super) {
    __extends(Event_controlContext, _super);
    function Event_controlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_controlContext.prototype.event_control_identifier = function () {
        return this.tryGetRuleContext(0, Event_control_identifierContext);
    };
    Event_controlContext.prototype.event_control_expression = function () {
        return this.tryGetRuleContext(0, Event_control_expressionContext);
    };
    Event_controlContext.prototype.event_control_wildcard = function () {
        return this.tryGetRuleContext(0, Event_control_wildcardContext);
    };
    Object.defineProperty(Event_controlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_control; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_controlContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_control) {
            listener.enterEvent_control(this);
        }
    };
    // @Override
    Event_controlContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_control) {
            listener.exitEvent_control(this);
        }
    };
    // @Override
    Event_controlContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_control) {
            return visitor.visitEvent_control(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_controlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_controlContext = Event_controlContext;
var Event_control_identifierContext = /** @class */ (function (_super) {
    __extends(Event_control_identifierContext, _super);
    function Event_control_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_control_identifierContext.prototype.At = function () { return this.getToken(SysVerilogHDLParser.At, 0); };
    Event_control_identifierContext.prototype.event_identifier = function () {
        return this.getRuleContext(0, Event_identifierContext);
    };
    Object.defineProperty(Event_control_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_control_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_control_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_control_identifier) {
            listener.enterEvent_control_identifier(this);
        }
    };
    // @Override
    Event_control_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_control_identifier) {
            listener.exitEvent_control_identifier(this);
        }
    };
    // @Override
    Event_control_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_control_identifier) {
            return visitor.visitEvent_control_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_control_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_control_identifierContext = Event_control_identifierContext;
var Event_control_expressionContext = /** @class */ (function (_super) {
    __extends(Event_control_expressionContext, _super);
    function Event_control_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_control_expressionContext.prototype.At = function () { return this.getToken(SysVerilogHDLParser.At, 0); };
    Event_control_expressionContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Event_control_expressionContext.prototype.event_expression = function () {
        return this.getRuleContext(0, Event_expressionContext);
    };
    Event_control_expressionContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Event_control_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_control_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_control_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_control_expression) {
            listener.enterEvent_control_expression(this);
        }
    };
    // @Override
    Event_control_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_control_expression) {
            listener.exitEvent_control_expression(this);
        }
    };
    // @Override
    Event_control_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_control_expression) {
            return visitor.visitEvent_control_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_control_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_control_expressionContext = Event_control_expressionContext;
var Event_expressionContext = /** @class */ (function (_super) {
    __extends(Event_expressionContext, _super);
    function Event_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_expressionContext.prototype.single_event_expression = function () {
        return this.tryGetRuleContext(0, Single_event_expressionContext);
    };
    Event_expressionContext.prototype.event_expression_or = function () {
        return this.tryGetRuleContext(0, Event_expression_orContext);
    };
    Object.defineProperty(Event_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_expression) {
            listener.enterEvent_expression(this);
        }
    };
    // @Override
    Event_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_expression) {
            listener.exitEvent_expression(this);
        }
    };
    // @Override
    Event_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_expression) {
            return visitor.visitEvent_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_expressionContext = Event_expressionContext;
var Single_event_expressionContext = /** @class */ (function (_super) {
    __extends(Single_event_expressionContext, _super);
    function Single_event_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Single_event_expressionContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Single_event_expressionContext.prototype.hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_identifierContext);
    };
    Single_event_expressionContext.prototype.event_expression_edgespec = function () {
        return this.tryGetRuleContext(0, Event_expression_edgespecContext);
    };
    Object.defineProperty(Single_event_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_single_event_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Single_event_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterSingle_event_expression) {
            listener.enterSingle_event_expression(this);
        }
    };
    // @Override
    Single_event_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitSingle_event_expression) {
            listener.exitSingle_event_expression(this);
        }
    };
    // @Override
    Single_event_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitSingle_event_expression) {
            return visitor.visitSingle_event_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Single_event_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Single_event_expressionContext = Single_event_expressionContext;
var Event_expression_edgespecContext = /** @class */ (function (_super) {
    __extends(Event_expression_edgespecContext, _super);
    function Event_expression_edgespecContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_expression_edgespecContext.prototype.Posedge = function () { return this.tryGetToken(SysVerilogHDLParser.Posedge, 0); };
    Event_expression_edgespecContext.prototype.Negedge = function () { return this.tryGetToken(SysVerilogHDLParser.Negedge, 0); };
    Object.defineProperty(Event_expression_edgespecContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_expression_edgespec; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_expression_edgespecContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_expression_edgespec) {
            listener.enterEvent_expression_edgespec(this);
        }
    };
    // @Override
    Event_expression_edgespecContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_expression_edgespec) {
            listener.exitEvent_expression_edgespec(this);
        }
    };
    // @Override
    Event_expression_edgespecContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_expression_edgespec) {
            return visitor.visitEvent_expression_edgespec(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_expression_edgespecContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_expression_edgespecContext = Event_expression_edgespecContext;
var Event_expression_orContext = /** @class */ (function (_super) {
    __extends(Event_expression_orContext, _super);
    function Event_expression_orContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_expression_orContext.prototype.list_of_event_expression_comma = function () {
        return this.tryGetRuleContext(0, List_of_event_expression_commaContext);
    };
    Event_expression_orContext.prototype.list_of_event_expression_or = function () {
        return this.tryGetRuleContext(0, List_of_event_expression_orContext);
    };
    Object.defineProperty(Event_expression_orContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_expression_or; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_expression_orContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_expression_or) {
            listener.enterEvent_expression_or(this);
        }
    };
    // @Override
    Event_expression_orContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_expression_or) {
            listener.exitEvent_expression_or(this);
        }
    };
    // @Override
    Event_expression_orContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_expression_or) {
            return visitor.visitEvent_expression_or(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_expression_orContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_expression_orContext = Event_expression_orContext;
var List_of_event_expression_commaContext = /** @class */ (function (_super) {
    __extends(List_of_event_expression_commaContext, _super);
    function List_of_event_expression_commaContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_event_expression_commaContext.prototype.single_event_expression = function () {
        return this.getRuleContext(0, Single_event_expressionContext);
    };
    List_of_event_expression_commaContext.prototype.comma_event_expression_star = function () {
        return this.getRuleContext(0, Comma_event_expression_starContext);
    };
    Object.defineProperty(List_of_event_expression_commaContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_event_expression_comma; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_event_expression_commaContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_event_expression_comma) {
            listener.enterList_of_event_expression_comma(this);
        }
    };
    // @Override
    List_of_event_expression_commaContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_event_expression_comma) {
            listener.exitList_of_event_expression_comma(this);
        }
    };
    // @Override
    List_of_event_expression_commaContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_event_expression_comma) {
            return visitor.visitList_of_event_expression_comma(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_event_expression_commaContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_event_expression_commaContext = List_of_event_expression_commaContext;
var Comma_event_expression_starContext = /** @class */ (function (_super) {
    __extends(Comma_event_expression_starContext, _super);
    function Comma_event_expression_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_event_expression_starContext.prototype.comma_event_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_event_expressionContext);
        }
        else {
            return this.getRuleContext(i, Comma_event_expressionContext);
        }
    };
    Object.defineProperty(Comma_event_expression_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_event_expression_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_event_expression_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_event_expression_star) {
            listener.enterComma_event_expression_star(this);
        }
    };
    // @Override
    Comma_event_expression_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_event_expression_star) {
            listener.exitComma_event_expression_star(this);
        }
    };
    // @Override
    Comma_event_expression_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_event_expression_star) {
            return visitor.visitComma_event_expression_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_event_expression_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_event_expression_starContext = Comma_event_expression_starContext;
var Comma_event_expressionContext = /** @class */ (function (_super) {
    __extends(Comma_event_expressionContext, _super);
    function Comma_event_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_event_expressionContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_event_expressionContext.prototype.single_event_expression = function () {
        return this.getRuleContext(0, Single_event_expressionContext);
    };
    Object.defineProperty(Comma_event_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_event_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_event_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_event_expression) {
            listener.enterComma_event_expression(this);
        }
    };
    // @Override
    Comma_event_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_event_expression) {
            listener.exitComma_event_expression(this);
        }
    };
    // @Override
    Comma_event_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_event_expression) {
            return visitor.visitComma_event_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_event_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_event_expressionContext = Comma_event_expressionContext;
var List_of_event_expression_orContext = /** @class */ (function (_super) {
    __extends(List_of_event_expression_orContext, _super);
    function List_of_event_expression_orContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_event_expression_orContext.prototype.single_event_expression = function () {
        return this.getRuleContext(0, Single_event_expressionContext);
    };
    List_of_event_expression_orContext.prototype.or_event_expression_star = function () {
        return this.getRuleContext(0, Or_event_expression_starContext);
    };
    Object.defineProperty(List_of_event_expression_orContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_event_expression_or; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_event_expression_orContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_event_expression_or) {
            listener.enterList_of_event_expression_or(this);
        }
    };
    // @Override
    List_of_event_expression_orContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_event_expression_or) {
            listener.exitList_of_event_expression_or(this);
        }
    };
    // @Override
    List_of_event_expression_orContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_event_expression_or) {
            return visitor.visitList_of_event_expression_or(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_event_expression_orContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_event_expression_orContext = List_of_event_expression_orContext;
var Or_event_expression_starContext = /** @class */ (function (_super) {
    __extends(Or_event_expression_starContext, _super);
    function Or_event_expression_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Or_event_expression_starContext.prototype.or_event_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Or_event_expressionContext);
        }
        else {
            return this.getRuleContext(i, Or_event_expressionContext);
        }
    };
    Object.defineProperty(Or_event_expression_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_or_event_expression_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Or_event_expression_starContext.prototype.enterRule = function (listener) {
        if (listener.enterOr_event_expression_star) {
            listener.enterOr_event_expression_star(this);
        }
    };
    // @Override
    Or_event_expression_starContext.prototype.exitRule = function (listener) {
        if (listener.exitOr_event_expression_star) {
            listener.exitOr_event_expression_star(this);
        }
    };
    // @Override
    Or_event_expression_starContext.prototype.accept = function (visitor) {
        if (visitor.visitOr_event_expression_star) {
            return visitor.visitOr_event_expression_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Or_event_expression_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Or_event_expression_starContext = Or_event_expression_starContext;
var Or_event_expressionContext = /** @class */ (function (_super) {
    __extends(Or_event_expressionContext, _super);
    function Or_event_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Or_event_expressionContext.prototype.Or = function () { return this.getToken(SysVerilogHDLParser.Or, 0); };
    Or_event_expressionContext.prototype.single_event_expression = function () {
        return this.getRuleContext(0, Single_event_expressionContext);
    };
    Object.defineProperty(Or_event_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_or_event_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Or_event_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterOr_event_expression) {
            listener.enterOr_event_expression(this);
        }
    };
    // @Override
    Or_event_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitOr_event_expression) {
            listener.exitOr_event_expression(this);
        }
    };
    // @Override
    Or_event_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitOr_event_expression) {
            return visitor.visitOr_event_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Or_event_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Or_event_expressionContext = Or_event_expressionContext;
var Event_control_wildcardContext = /** @class */ (function (_super) {
    __extends(Event_control_wildcardContext, _super);
    function Event_control_wildcardContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_control_wildcardContext.prototype.At = function () { return this.getToken(SysVerilogHDLParser.At, 0); };
    Event_control_wildcardContext.prototype.Star = function () { return this.getToken(SysVerilogHDLParser.Star, 0); };
    Event_control_wildcardContext.prototype.Open_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Event_control_wildcardContext.prototype.Close_parenthesis = function () { return this.tryGetToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Event_control_wildcardContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_control_wildcard; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_control_wildcardContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_control_wildcard) {
            listener.enterEvent_control_wildcard(this);
        }
    };
    // @Override
    Event_control_wildcardContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_control_wildcard) {
            listener.exitEvent_control_wildcard(this);
        }
    };
    // @Override
    Event_control_wildcardContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_control_wildcard) {
            return visitor.visitEvent_control_wildcard(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_control_wildcardContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_control_wildcardContext = Event_control_wildcardContext;
var Repeat_event_controlContext = /** @class */ (function (_super) {
    __extends(Repeat_event_controlContext, _super);
    function Repeat_event_controlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Repeat_event_controlContext.prototype.Repeat = function () { return this.getToken(SysVerilogHDLParser.Repeat, 0); };
    Repeat_event_controlContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Repeat_event_controlContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Repeat_event_controlContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Repeat_event_controlContext.prototype.event_control = function () {
        return this.getRuleContext(0, Event_controlContext);
    };
    Object.defineProperty(Repeat_event_controlContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_repeat_event_control; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Repeat_event_controlContext.prototype.enterRule = function (listener) {
        if (listener.enterRepeat_event_control) {
            listener.enterRepeat_event_control(this);
        }
    };
    // @Override
    Repeat_event_controlContext.prototype.exitRule = function (listener) {
        if (listener.exitRepeat_event_control) {
            listener.exitRepeat_event_control(this);
        }
    };
    // @Override
    Repeat_event_controlContext.prototype.accept = function (visitor) {
        if (visitor.visitRepeat_event_control) {
            return visitor.visitRepeat_event_control(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Repeat_event_controlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Repeat_event_controlContext = Repeat_event_controlContext;
var Event_triggerContext = /** @class */ (function (_super) {
    __extends(Event_triggerContext, _super);
    function Event_triggerContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_triggerContext.prototype.Dash_right_angle = function () { return this.getToken(SysVerilogHDLParser.Dash_right_angle, 0); };
    Event_triggerContext.prototype.hierarchical_event_identifier = function () {
        return this.getRuleContext(0, Hierarchical_event_identifierContext);
    };
    Object.defineProperty(Event_triggerContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_trigger; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_triggerContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_trigger) {
            listener.enterEvent_trigger(this);
        }
    };
    // @Override
    Event_triggerContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_trigger) {
            listener.exitEvent_trigger(this);
        }
    };
    // @Override
    Event_triggerContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_trigger) {
            return visitor.visitEvent_trigger(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_triggerContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_triggerContext = Event_triggerContext;
var Hierarchical_event_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_event_identifierContext, _super);
    function Hierarchical_event_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_event_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_event_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_event_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_event_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_event_identifier) {
            listener.enterHierarchical_event_identifier(this);
        }
    };
    // @Override
    Hierarchical_event_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_event_identifier) {
            listener.exitHierarchical_event_identifier(this);
        }
    };
    // @Override
    Hierarchical_event_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_event_identifier) {
            return visitor.visitHierarchical_event_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_event_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_event_identifierContext = Hierarchical_event_identifierContext;
var Event_identifierContext = /** @class */ (function (_super) {
    __extends(Event_identifierContext, _super);
    function Event_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Event_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Event_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_event_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Event_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterEvent_identifier) {
            listener.enterEvent_identifier(this);
        }
    };
    // @Override
    Event_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitEvent_identifier) {
            listener.exitEvent_identifier(this);
        }
    };
    // @Override
    Event_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitEvent_identifier) {
            return visitor.visitEvent_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Event_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Event_identifierContext = Event_identifierContext;
var Wait_statementContext = /** @class */ (function (_super) {
    __extends(Wait_statementContext, _super);
    function Wait_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Wait_statementContext.prototype.Wait = function () { return this.getToken(SysVerilogHDLParser.Wait, 0); };
    Wait_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Wait_statementContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Wait_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Wait_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Wait_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_wait_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Wait_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterWait_statement) {
            listener.enterWait_statement(this);
        }
    };
    // @Override
    Wait_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitWait_statement) {
            listener.exitWait_statement(this);
        }
    };
    // @Override
    Wait_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitWait_statement) {
            return visitor.visitWait_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Wait_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Wait_statementContext = Wait_statementContext;
var Attr_generated_instantiationContext = /** @class */ (function (_super) {
    __extends(Attr_generated_instantiationContext, _super);
    function Attr_generated_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_generated_instantiationContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Attr_generated_instantiationContext.prototype.generated_instantiation = function () {
        return this.getRuleContext(0, Generated_instantiationContext);
    };
    Object.defineProperty(Attr_generated_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_generated_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_generated_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_generated_instantiation) {
            listener.enterAttr_generated_instantiation(this);
        }
    };
    // @Override
    Attr_generated_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_generated_instantiation) {
            listener.exitAttr_generated_instantiation(this);
        }
    };
    // @Override
    Attr_generated_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_generated_instantiation) {
            return visitor.visitAttr_generated_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_generated_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_generated_instantiationContext = Attr_generated_instantiationContext;
var Generated_instantiationContext = /** @class */ (function (_super) {
    __extends(Generated_instantiationContext, _super);
    function Generated_instantiationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generated_instantiationContext.prototype.Generate = function () { return this.getToken(SysVerilogHDLParser.Generate, 0); };
    Generated_instantiationContext.prototype.generate_item_star = function () {
        return this.getRuleContext(0, Generate_item_starContext);
    };
    Generated_instantiationContext.prototype.Endgenerate = function () { return this.getToken(SysVerilogHDLParser.Endgenerate, 0); };
    Generated_instantiationContext.prototype.semicolon = function () {
        return this.tryGetRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Generated_instantiationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generated_instantiation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generated_instantiationContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerated_instantiation) {
            listener.enterGenerated_instantiation(this);
        }
    };
    // @Override
    Generated_instantiationContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerated_instantiation) {
            listener.exitGenerated_instantiation(this);
        }
    };
    // @Override
    Generated_instantiationContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerated_instantiation) {
            return visitor.visitGenerated_instantiation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generated_instantiationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generated_instantiationContext = Generated_instantiationContext;
var Generate_item_starContext = /** @class */ (function (_super) {
    __extends(Generate_item_starContext, _super);
    function Generate_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_item_starContext.prototype.generate_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Generate_itemContext);
        }
        else {
            return this.getRuleContext(i, Generate_itemContext);
        }
    };
    Object.defineProperty(Generate_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_item_star) {
            listener.enterGenerate_item_star(this);
        }
    };
    // @Override
    Generate_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_item_star) {
            listener.exitGenerate_item_star(this);
        }
    };
    // @Override
    Generate_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_item_star) {
            return visitor.visitGenerate_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_item_starContext = Generate_item_starContext;
var Generate_itemContext = /** @class */ (function (_super) {
    __extends(Generate_itemContext, _super);
    function Generate_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_itemContext.prototype.generate_conditional_statement = function () {
        return this.tryGetRuleContext(0, Generate_conditional_statementContext);
    };
    Generate_itemContext.prototype.generate_case_statement = function () {
        return this.tryGetRuleContext(0, Generate_case_statementContext);
    };
    Generate_itemContext.prototype.generate_loop_statement = function () {
        return this.tryGetRuleContext(0, Generate_loop_statementContext);
    };
    Generate_itemContext.prototype.generate_block = function () {
        return this.tryGetRuleContext(0, Generate_blockContext);
    };
    Generate_itemContext.prototype.parameter_item_semicolon = function () {
        return this.tryGetRuleContext(0, Parameter_item_semicolonContext);
    };
    Generate_itemContext.prototype.attr_variable_item_semicolon = function () {
        return this.tryGetRuleContext(0, Attr_variable_item_semicolonContext);
    };
    Generate_itemContext.prototype.subroutine_item_semicolon = function () {
        return this.tryGetRuleContext(0, Subroutine_item_semicolonContext);
    };
    Generate_itemContext.prototype.attr_construct_item = function () {
        return this.tryGetRuleContext(0, Attr_construct_itemContext);
    };
    Generate_itemContext.prototype.attr_component_item = function () {
        return this.tryGetRuleContext(0, Attr_component_itemContext);
    };
    Generate_itemContext.prototype.null_item = function () {
        return this.tryGetRuleContext(0, Null_itemContext);
    };
    Object.defineProperty(Generate_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_item) {
            listener.enterGenerate_item(this);
        }
    };
    // @Override
    Generate_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_item) {
            listener.exitGenerate_item(this);
        }
    };
    // @Override
    Generate_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_item) {
            return visitor.visitGenerate_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_itemContext = Generate_itemContext;
var Generate_blockContext = /** @class */ (function (_super) {
    __extends(Generate_blockContext, _super);
    function Generate_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_blockContext.prototype.Begin = function () { return this.getToken(SysVerilogHDLParser.Begin, 0); };
    Generate_blockContext.prototype.generate_item_star = function () {
        return this.getRuleContext(0, Generate_item_starContext);
    };
    Generate_blockContext.prototype.End = function () { return this.getToken(SysVerilogHDLParser.End, 0); };
    Generate_blockContext.prototype.generate_colon_block_identifier0 = function () {
        return this.tryGetRuleContext(0, Generate_colon_block_identifier0Context);
    };
    Generate_blockContext.prototype.generate_colon_block_identifier1 = function () {
        return this.tryGetRuleContext(0, Generate_colon_block_identifier1Context);
    };
    Generate_blockContext.prototype.semicolon = function () {
        return this.tryGetRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Generate_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_block) {
            listener.enterGenerate_block(this);
        }
    };
    // @Override
    Generate_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_block) {
            listener.exitGenerate_block(this);
        }
    };
    // @Override
    Generate_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_block) {
            return visitor.visitGenerate_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_blockContext = Generate_blockContext;
var Generate_colon_block_identifier0Context = /** @class */ (function (_super) {
    __extends(Generate_colon_block_identifier0Context, _super);
    function Generate_colon_block_identifier0Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_colon_block_identifier0Context.prototype.generate_colon_block_identifier = function () {
        return this.getRuleContext(0, Generate_colon_block_identifierContext);
    };
    Object.defineProperty(Generate_colon_block_identifier0Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_colon_block_identifier0; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_colon_block_identifier0Context.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_colon_block_identifier0) {
            listener.enterGenerate_colon_block_identifier0(this);
        }
    };
    // @Override
    Generate_colon_block_identifier0Context.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_colon_block_identifier0) {
            listener.exitGenerate_colon_block_identifier0(this);
        }
    };
    // @Override
    Generate_colon_block_identifier0Context.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_colon_block_identifier0) {
            return visitor.visitGenerate_colon_block_identifier0(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_colon_block_identifier0Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_colon_block_identifier0Context = Generate_colon_block_identifier0Context;
var Generate_colon_block_identifier1Context = /** @class */ (function (_super) {
    __extends(Generate_colon_block_identifier1Context, _super);
    function Generate_colon_block_identifier1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_colon_block_identifier1Context.prototype.generate_colon_block_identifier = function () {
        return this.getRuleContext(0, Generate_colon_block_identifierContext);
    };
    Object.defineProperty(Generate_colon_block_identifier1Context.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_colon_block_identifier1; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_colon_block_identifier1Context.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_colon_block_identifier1) {
            listener.enterGenerate_colon_block_identifier1(this);
        }
    };
    // @Override
    Generate_colon_block_identifier1Context.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_colon_block_identifier1) {
            listener.exitGenerate_colon_block_identifier1(this);
        }
    };
    // @Override
    Generate_colon_block_identifier1Context.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_colon_block_identifier1) {
            return visitor.visitGenerate_colon_block_identifier1(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_colon_block_identifier1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_colon_block_identifier1Context = Generate_colon_block_identifier1Context;
var Generate_colon_block_identifierContext = /** @class */ (function (_super) {
    __extends(Generate_colon_block_identifierContext, _super);
    function Generate_colon_block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_colon_block_identifierContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Generate_colon_block_identifierContext.prototype.generate_block_identifier = function () {
        return this.getRuleContext(0, Generate_block_identifierContext);
    };
    Object.defineProperty(Generate_colon_block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_colon_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_colon_block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_colon_block_identifier) {
            listener.enterGenerate_colon_block_identifier(this);
        }
    };
    // @Override
    Generate_colon_block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_colon_block_identifier) {
            listener.exitGenerate_colon_block_identifier(this);
        }
    };
    // @Override
    Generate_colon_block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_colon_block_identifier) {
            return visitor.visitGenerate_colon_block_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_colon_block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_colon_block_identifierContext = Generate_colon_block_identifierContext;
var Generate_block_identifierContext = /** @class */ (function (_super) {
    __extends(Generate_block_identifierContext, _super);
    function Generate_block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_block_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Generate_block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_block_identifier) {
            listener.enterGenerate_block_identifier(this);
        }
    };
    // @Override
    Generate_block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_block_identifier) {
            listener.exitGenerate_block_identifier(this);
        }
    };
    // @Override
    Generate_block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_block_identifier) {
            return visitor.visitGenerate_block_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_block_identifierContext = Generate_block_identifierContext;
var Generate_conditional_statementContext = /** @class */ (function (_super) {
    __extends(Generate_conditional_statementContext, _super);
    function Generate_conditional_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_conditional_statementContext.prototype.generate_if_statement = function () {
        return this.getRuleContext(0, Generate_if_statementContext);
    };
    Generate_conditional_statementContext.prototype.generate_else_statement = function () {
        return this.tryGetRuleContext(0, Generate_else_statementContext);
    };
    Object.defineProperty(Generate_conditional_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_conditional_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_conditional_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_conditional_statement) {
            listener.enterGenerate_conditional_statement(this);
        }
    };
    // @Override
    Generate_conditional_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_conditional_statement) {
            listener.exitGenerate_conditional_statement(this);
        }
    };
    // @Override
    Generate_conditional_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_conditional_statement) {
            return visitor.visitGenerate_conditional_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_conditional_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_conditional_statementContext = Generate_conditional_statementContext;
var Generate_if_statementContext = /** @class */ (function (_super) {
    __extends(Generate_if_statementContext, _super);
    function Generate_if_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_if_statementContext.prototype.If = function () { return this.getToken(SysVerilogHDLParser.If, 0); };
    Generate_if_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Generate_if_statementContext.prototype.conditional_expression = function () {
        return this.getRuleContext(0, Conditional_expressionContext);
    };
    Generate_if_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Generate_if_statementContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Object.defineProperty(Generate_if_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_if_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_if_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_if_statement) {
            listener.enterGenerate_if_statement(this);
        }
    };
    // @Override
    Generate_if_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_if_statement) {
            listener.exitGenerate_if_statement(this);
        }
    };
    // @Override
    Generate_if_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_if_statement) {
            return visitor.visitGenerate_if_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_if_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_if_statementContext = Generate_if_statementContext;
var Generate_else_statementContext = /** @class */ (function (_super) {
    __extends(Generate_else_statementContext, _super);
    function Generate_else_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_else_statementContext.prototype.Else = function () { return this.getToken(SysVerilogHDLParser.Else, 0); };
    Generate_else_statementContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Object.defineProperty(Generate_else_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_else_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_else_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_else_statement) {
            listener.enterGenerate_else_statement(this);
        }
    };
    // @Override
    Generate_else_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_else_statement) {
            listener.exitGenerate_else_statement(this);
        }
    };
    // @Override
    Generate_else_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_else_statement) {
            return visitor.visitGenerate_else_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_else_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_else_statementContext = Generate_else_statementContext;
var Generate_loop_statementContext = /** @class */ (function (_super) {
    __extends(Generate_loop_statementContext, _super);
    function Generate_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_loop_statementContext.prototype.generate_forever_loop_statement = function () {
        return this.tryGetRuleContext(0, Generate_forever_loop_statementContext);
    };
    Generate_loop_statementContext.prototype.generate_repeat_loop_statement = function () {
        return this.tryGetRuleContext(0, Generate_repeat_loop_statementContext);
    };
    Generate_loop_statementContext.prototype.generate_while_loop_statement = function () {
        return this.tryGetRuleContext(0, Generate_while_loop_statementContext);
    };
    Generate_loop_statementContext.prototype.generate_do_loop_statement = function () {
        return this.tryGetRuleContext(0, Generate_do_loop_statementContext);
    };
    Generate_loop_statementContext.prototype.generate_for_loop_statement = function () {
        return this.tryGetRuleContext(0, Generate_for_loop_statementContext);
    };
    Object.defineProperty(Generate_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_loop_statement) {
            listener.enterGenerate_loop_statement(this);
        }
    };
    // @Override
    Generate_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_loop_statement) {
            listener.exitGenerate_loop_statement(this);
        }
    };
    // @Override
    Generate_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_loop_statement) {
            return visitor.visitGenerate_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_loop_statementContext = Generate_loop_statementContext;
var Generate_forever_loop_statementContext = /** @class */ (function (_super) {
    __extends(Generate_forever_loop_statementContext, _super);
    function Generate_forever_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_forever_loop_statementContext.prototype.Forever = function () { return this.getToken(SysVerilogHDLParser.Forever, 0); };
    Generate_forever_loop_statementContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Object.defineProperty(Generate_forever_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_forever_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_forever_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_forever_loop_statement) {
            listener.enterGenerate_forever_loop_statement(this);
        }
    };
    // @Override
    Generate_forever_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_forever_loop_statement) {
            listener.exitGenerate_forever_loop_statement(this);
        }
    };
    // @Override
    Generate_forever_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_forever_loop_statement) {
            return visitor.visitGenerate_forever_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_forever_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_forever_loop_statementContext = Generate_forever_loop_statementContext;
var Generate_repeat_loop_statementContext = /** @class */ (function (_super) {
    __extends(Generate_repeat_loop_statementContext, _super);
    function Generate_repeat_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_repeat_loop_statementContext.prototype.Repeat = function () { return this.getToken(SysVerilogHDLParser.Repeat, 0); };
    Generate_repeat_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Generate_repeat_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    Generate_repeat_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Generate_repeat_loop_statementContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Object.defineProperty(Generate_repeat_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_repeat_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_repeat_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_repeat_loop_statement) {
            listener.enterGenerate_repeat_loop_statement(this);
        }
    };
    // @Override
    Generate_repeat_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_repeat_loop_statement) {
            listener.exitGenerate_repeat_loop_statement(this);
        }
    };
    // @Override
    Generate_repeat_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_repeat_loop_statement) {
            return visitor.visitGenerate_repeat_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_repeat_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_repeat_loop_statementContext = Generate_repeat_loop_statementContext;
var Generate_while_loop_statementContext = /** @class */ (function (_super) {
    __extends(Generate_while_loop_statementContext, _super);
    function Generate_while_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_while_loop_statementContext.prototype.While = function () { return this.getToken(SysVerilogHDLParser.While, 0); };
    Generate_while_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Generate_while_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    Generate_while_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Generate_while_loop_statementContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Object.defineProperty(Generate_while_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_while_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_while_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_while_loop_statement) {
            listener.enterGenerate_while_loop_statement(this);
        }
    };
    // @Override
    Generate_while_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_while_loop_statement) {
            listener.exitGenerate_while_loop_statement(this);
        }
    };
    // @Override
    Generate_while_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_while_loop_statement) {
            return visitor.visitGenerate_while_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_while_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_while_loop_statementContext = Generate_while_loop_statementContext;
var Generate_do_loop_statementContext = /** @class */ (function (_super) {
    __extends(Generate_do_loop_statementContext, _super);
    function Generate_do_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_do_loop_statementContext.prototype.Do = function () { return this.getToken(SysVerilogHDLParser.Do, 0); };
    Generate_do_loop_statementContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Generate_do_loop_statementContext.prototype.While = function () { return this.getToken(SysVerilogHDLParser.While, 0); };
    Generate_do_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Generate_do_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    Generate_do_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Generate_do_loop_statementContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Generate_do_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_do_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_do_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_do_loop_statement) {
            listener.enterGenerate_do_loop_statement(this);
        }
    };
    // @Override
    Generate_do_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_do_loop_statement) {
            listener.exitGenerate_do_loop_statement(this);
        }
    };
    // @Override
    Generate_do_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_do_loop_statement) {
            return visitor.visitGenerate_do_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_do_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_do_loop_statementContext = Generate_do_loop_statementContext;
var Generate_for_loop_statementContext = /** @class */ (function (_super) {
    __extends(Generate_for_loop_statementContext, _super);
    function Generate_for_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_for_loop_statementContext.prototype.For = function () { return this.getToken(SysVerilogHDLParser.For, 0); };
    Generate_for_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Generate_for_loop_statementContext.prototype.loop_init_assignment = function () {
        return this.getRuleContext(0, Loop_init_assignmentContext);
    };
    Generate_for_loop_statementContext.prototype.semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SemicolonContext);
        }
        else {
            return this.getRuleContext(i, SemicolonContext);
        }
    };
    Generate_for_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    Generate_for_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Generate_for_loop_statementContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Generate_for_loop_statementContext.prototype.loop_step_assignment = function () {
        return this.tryGetRuleContext(0, Loop_step_assignmentContext);
    };
    Object.defineProperty(Generate_for_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_for_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_for_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_for_loop_statement) {
            listener.enterGenerate_for_loop_statement(this);
        }
    };
    // @Override
    Generate_for_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_for_loop_statement) {
            listener.exitGenerate_for_loop_statement(this);
        }
    };
    // @Override
    Generate_for_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_for_loop_statement) {
            return visitor.visitGenerate_for_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_for_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_for_loop_statementContext = Generate_for_loop_statementContext;
var Generate_case_statementContext = /** @class */ (function (_super) {
    __extends(Generate_case_statementContext, _super);
    function Generate_case_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_case_statementContext.prototype.any_case_keyword = function () {
        return this.getRuleContext(0, Any_case_keywordContext);
    };
    Generate_case_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Generate_case_statementContext.prototype.case_switch = function () {
        return this.getRuleContext(0, Case_switchContext);
    };
    Generate_case_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Generate_case_statementContext.prototype.generate_case_item_star = function () {
        return this.getRuleContext(0, Generate_case_item_starContext);
    };
    Generate_case_statementContext.prototype.Endcase = function () { return this.getToken(SysVerilogHDLParser.Endcase, 0); };
    Object.defineProperty(Generate_case_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_case_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_case_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_case_statement) {
            listener.enterGenerate_case_statement(this);
        }
    };
    // @Override
    Generate_case_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_case_statement) {
            listener.exitGenerate_case_statement(this);
        }
    };
    // @Override
    Generate_case_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_case_statement) {
            return visitor.visitGenerate_case_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_case_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_case_statementContext = Generate_case_statementContext;
var Generate_case_item_starContext = /** @class */ (function (_super) {
    __extends(Generate_case_item_starContext, _super);
    function Generate_case_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_case_item_starContext.prototype.generate_case_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Generate_case_itemContext);
        }
        else {
            return this.getRuleContext(i, Generate_case_itemContext);
        }
    };
    Object.defineProperty(Generate_case_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_case_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_case_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_case_item_star) {
            listener.enterGenerate_case_item_star(this);
        }
    };
    // @Override
    Generate_case_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_case_item_star) {
            listener.exitGenerate_case_item_star(this);
        }
    };
    // @Override
    Generate_case_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_case_item_star) {
            return visitor.visitGenerate_case_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_case_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_case_item_starContext = Generate_case_item_starContext;
var Generate_case_itemContext = /** @class */ (function (_super) {
    __extends(Generate_case_itemContext, _super);
    function Generate_case_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Generate_case_itemContext.prototype.Colon = function () { return this.tryGetToken(SysVerilogHDLParser.Colon, 0); };
    Generate_case_itemContext.prototype.generate_item = function () {
        return this.getRuleContext(0, Generate_itemContext);
    };
    Generate_case_itemContext.prototype.case_item_key = function () {
        return this.tryGetRuleContext(0, Case_item_keyContext);
    };
    Generate_case_itemContext.prototype.Default = function () { return this.tryGetToken(SysVerilogHDLParser.Default, 0); };
    Object.defineProperty(Generate_case_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_generate_case_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Generate_case_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterGenerate_case_item) {
            listener.enterGenerate_case_item(this);
        }
    };
    // @Override
    Generate_case_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitGenerate_case_item) {
            listener.exitGenerate_case_item(this);
        }
    };
    // @Override
    Generate_case_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitGenerate_case_item) {
            return visitor.visitGenerate_case_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Generate_case_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Generate_case_itemContext = Generate_case_itemContext;
var Conditional_statementContext = /** @class */ (function (_super) {
    __extends(Conditional_statementContext, _super);
    function Conditional_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Conditional_statementContext.prototype.if_statement = function () {
        return this.getRuleContext(0, If_statementContext);
    };
    Conditional_statementContext.prototype.else_statement = function () {
        return this.tryGetRuleContext(0, Else_statementContext);
    };
    Object.defineProperty(Conditional_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_conditional_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Conditional_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterConditional_statement) {
            listener.enterConditional_statement(this);
        }
    };
    // @Override
    Conditional_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitConditional_statement) {
            listener.exitConditional_statement(this);
        }
    };
    // @Override
    Conditional_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitConditional_statement) {
            return visitor.visitConditional_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Conditional_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Conditional_statementContext = Conditional_statementContext;
var If_statementContext = /** @class */ (function (_super) {
    __extends(If_statementContext, _super);
    function If_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    If_statementContext.prototype.If = function () { return this.getToken(SysVerilogHDLParser.If, 0); };
    If_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    If_statementContext.prototype.conditional_expression = function () {
        return this.getRuleContext(0, Conditional_expressionContext);
    };
    If_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    If_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(If_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_if_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    If_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterIf_statement) {
            listener.enterIf_statement(this);
        }
    };
    // @Override
    If_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitIf_statement) {
            listener.exitIf_statement(this);
        }
    };
    // @Override
    If_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitIf_statement) {
            return visitor.visitIf_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return If_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.If_statementContext = If_statementContext;
var Else_statementContext = /** @class */ (function (_super) {
    __extends(Else_statementContext, _super);
    function Else_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Else_statementContext.prototype.Else = function () { return this.getToken(SysVerilogHDLParser.Else, 0); };
    Else_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Else_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_else_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Else_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterElse_statement) {
            listener.enterElse_statement(this);
        }
    };
    // @Override
    Else_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitElse_statement) {
            listener.exitElse_statement(this);
        }
    };
    // @Override
    Else_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitElse_statement) {
            return visitor.visitElse_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Else_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Else_statementContext = Else_statementContext;
var Conditional_expressionContext = /** @class */ (function (_super) {
    __extends(Conditional_expressionContext, _super);
    function Conditional_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Conditional_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Conditional_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_conditional_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Conditional_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterConditional_expression) {
            listener.enterConditional_expression(this);
        }
    };
    // @Override
    Conditional_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitConditional_expression) {
            listener.exitConditional_expression(this);
        }
    };
    // @Override
    Conditional_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitConditional_expression) {
            return visitor.visitConditional_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Conditional_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Conditional_expressionContext = Conditional_expressionContext;
var Loop_statementContext = /** @class */ (function (_super) {
    __extends(Loop_statementContext, _super);
    function Loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Loop_statementContext.prototype.forever_loop_statement = function () {
        return this.tryGetRuleContext(0, Forever_loop_statementContext);
    };
    Loop_statementContext.prototype.repeat_loop_statement = function () {
        return this.tryGetRuleContext(0, Repeat_loop_statementContext);
    };
    Loop_statementContext.prototype.while_loop_statement = function () {
        return this.tryGetRuleContext(0, While_loop_statementContext);
    };
    Loop_statementContext.prototype.do_loop_statement = function () {
        return this.tryGetRuleContext(0, Do_loop_statementContext);
    };
    Loop_statementContext.prototype.for_loop_statement = function () {
        return this.tryGetRuleContext(0, For_loop_statementContext);
    };
    Object.defineProperty(Loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterLoop_statement) {
            listener.enterLoop_statement(this);
        }
    };
    // @Override
    Loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitLoop_statement) {
            listener.exitLoop_statement(this);
        }
    };
    // @Override
    Loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitLoop_statement) {
            return visitor.visitLoop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Loop_statementContext = Loop_statementContext;
var Forever_loop_statementContext = /** @class */ (function (_super) {
    __extends(Forever_loop_statementContext, _super);
    function Forever_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Forever_loop_statementContext.prototype.Forever = function () { return this.getToken(SysVerilogHDLParser.Forever, 0); };
    Forever_loop_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Forever_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_forever_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Forever_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterForever_loop_statement) {
            listener.enterForever_loop_statement(this);
        }
    };
    // @Override
    Forever_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitForever_loop_statement) {
            listener.exitForever_loop_statement(this);
        }
    };
    // @Override
    Forever_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitForever_loop_statement) {
            return visitor.visitForever_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Forever_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Forever_loop_statementContext = Forever_loop_statementContext;
var Repeat_loop_statementContext = /** @class */ (function (_super) {
    __extends(Repeat_loop_statementContext, _super);
    function Repeat_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Repeat_loop_statementContext.prototype.Repeat = function () { return this.getToken(SysVerilogHDLParser.Repeat, 0); };
    Repeat_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Repeat_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    Repeat_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Repeat_loop_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Repeat_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_repeat_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Repeat_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterRepeat_loop_statement) {
            listener.enterRepeat_loop_statement(this);
        }
    };
    // @Override
    Repeat_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitRepeat_loop_statement) {
            listener.exitRepeat_loop_statement(this);
        }
    };
    // @Override
    Repeat_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitRepeat_loop_statement) {
            return visitor.visitRepeat_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Repeat_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Repeat_loop_statementContext = Repeat_loop_statementContext;
var While_loop_statementContext = /** @class */ (function (_super) {
    __extends(While_loop_statementContext, _super);
    function While_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    While_loop_statementContext.prototype.While = function () { return this.getToken(SysVerilogHDLParser.While, 0); };
    While_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    While_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    While_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    While_loop_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(While_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_while_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    While_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterWhile_loop_statement) {
            listener.enterWhile_loop_statement(this);
        }
    };
    // @Override
    While_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitWhile_loop_statement) {
            listener.exitWhile_loop_statement(this);
        }
    };
    // @Override
    While_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitWhile_loop_statement) {
            return visitor.visitWhile_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return While_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.While_loop_statementContext = While_loop_statementContext;
var Do_loop_statementContext = /** @class */ (function (_super) {
    __extends(Do_loop_statementContext, _super);
    function Do_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Do_loop_statementContext.prototype.Do = function () { return this.getToken(SysVerilogHDLParser.Do, 0); };
    Do_loop_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Do_loop_statementContext.prototype.While = function () { return this.getToken(SysVerilogHDLParser.While, 0); };
    Do_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Do_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    Do_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Do_loop_statementContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Do_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_do_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Do_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterDo_loop_statement) {
            listener.enterDo_loop_statement(this);
        }
    };
    // @Override
    Do_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitDo_loop_statement) {
            listener.exitDo_loop_statement(this);
        }
    };
    // @Override
    Do_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitDo_loop_statement) {
            return visitor.visitDo_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Do_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Do_loop_statementContext = Do_loop_statementContext;
var For_loop_statementContext = /** @class */ (function (_super) {
    __extends(For_loop_statementContext, _super);
    function For_loop_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    For_loop_statementContext.prototype.For = function () { return this.getToken(SysVerilogHDLParser.For, 0); };
    For_loop_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    For_loop_statementContext.prototype.loop_init_assignment = function () {
        return this.getRuleContext(0, Loop_init_assignmentContext);
    };
    For_loop_statementContext.prototype.semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(SemicolonContext);
        }
        else {
            return this.getRuleContext(i, SemicolonContext);
        }
    };
    For_loop_statementContext.prototype.loop_terminate_expression = function () {
        return this.getRuleContext(0, Loop_terminate_expressionContext);
    };
    For_loop_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    For_loop_statementContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    For_loop_statementContext.prototype.loop_step_assignment = function () {
        return this.tryGetRuleContext(0, Loop_step_assignmentContext);
    };
    Object.defineProperty(For_loop_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_for_loop_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    For_loop_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterFor_loop_statement) {
            listener.enterFor_loop_statement(this);
        }
    };
    // @Override
    For_loop_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitFor_loop_statement) {
            listener.exitFor_loop_statement(this);
        }
    };
    // @Override
    For_loop_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitFor_loop_statement) {
            return visitor.visitFor_loop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return For_loop_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.For_loop_statementContext = For_loop_statementContext;
var Loop_init_assignmentContext = /** @class */ (function (_super) {
    __extends(Loop_init_assignmentContext, _super);
    function Loop_init_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Loop_init_assignmentContext.prototype.declarative_assignment = function () {
        return this.tryGetRuleContext(0, Declarative_assignmentContext);
    };
    Loop_init_assignmentContext.prototype.blocking_assignment = function () {
        return this.tryGetRuleContext(0, Blocking_assignmentContext);
    };
    Object.defineProperty(Loop_init_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_loop_init_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Loop_init_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterLoop_init_assignment) {
            listener.enterLoop_init_assignment(this);
        }
    };
    // @Override
    Loop_init_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitLoop_init_assignment) {
            listener.exitLoop_init_assignment(this);
        }
    };
    // @Override
    Loop_init_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitLoop_init_assignment) {
            return visitor.visitLoop_init_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Loop_init_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Loop_init_assignmentContext = Loop_init_assignmentContext;
var Loop_terminate_expressionContext = /** @class */ (function (_super) {
    __extends(Loop_terminate_expressionContext, _super);
    function Loop_terminate_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Loop_terminate_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Loop_terminate_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_loop_terminate_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Loop_terminate_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterLoop_terminate_expression) {
            listener.enterLoop_terminate_expression(this);
        }
    };
    // @Override
    Loop_terminate_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitLoop_terminate_expression) {
            listener.exitLoop_terminate_expression(this);
        }
    };
    // @Override
    Loop_terminate_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitLoop_terminate_expression) {
            return visitor.visitLoop_terminate_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Loop_terminate_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Loop_terminate_expressionContext = Loop_terminate_expressionContext;
var Loop_step_assignmentContext = /** @class */ (function (_super) {
    __extends(Loop_step_assignmentContext, _super);
    function Loop_step_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Loop_step_assignmentContext.prototype.blocking_assignment = function () {
        return this.tryGetRuleContext(0, Blocking_assignmentContext);
    };
    Loop_step_assignmentContext.prototype.postfix_assignment = function () {
        return this.tryGetRuleContext(0, Postfix_assignmentContext);
    };
    Loop_step_assignmentContext.prototype.prefix_assignment = function () {
        return this.tryGetRuleContext(0, Prefix_assignmentContext);
    };
    Loop_step_assignmentContext.prototype.operator_assignment = function () {
        return this.tryGetRuleContext(0, Operator_assignmentContext);
    };
    Object.defineProperty(Loop_step_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_loop_step_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Loop_step_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterLoop_step_assignment) {
            listener.enterLoop_step_assignment(this);
        }
    };
    // @Override
    Loop_step_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitLoop_step_assignment) {
            listener.exitLoop_step_assignment(this);
        }
    };
    // @Override
    Loop_step_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitLoop_step_assignment) {
            return visitor.visitLoop_step_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Loop_step_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Loop_step_assignmentContext = Loop_step_assignmentContext;
var Case_statementContext = /** @class */ (function (_super) {
    __extends(Case_statementContext, _super);
    function Case_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_statementContext.prototype.any_case_keyword = function () {
        return this.getRuleContext(0, Any_case_keywordContext);
    };
    Case_statementContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Case_statementContext.prototype.case_switch = function () {
        return this.getRuleContext(0, Case_switchContext);
    };
    Case_statementContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Case_statementContext.prototype.case_item_star = function () {
        return this.getRuleContext(0, Case_item_starContext);
    };
    Case_statementContext.prototype.Endcase = function () { return this.getToken(SysVerilogHDLParser.Endcase, 0); };
    Object.defineProperty(Case_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_case_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_statement) {
            listener.enterCase_statement(this);
        }
    };
    // @Override
    Case_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_statement) {
            listener.exitCase_statement(this);
        }
    };
    // @Override
    Case_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_statement) {
            return visitor.visitCase_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_statementContext = Case_statementContext;
var Case_item_starContext = /** @class */ (function (_super) {
    __extends(Case_item_starContext, _super);
    function Case_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_item_starContext.prototype.case_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Case_itemContext);
        }
        else {
            return this.getRuleContext(i, Case_itemContext);
        }
    };
    Object.defineProperty(Case_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_case_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_item_star) {
            listener.enterCase_item_star(this);
        }
    };
    // @Override
    Case_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_item_star) {
            listener.exitCase_item_star(this);
        }
    };
    // @Override
    Case_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_item_star) {
            return visitor.visitCase_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_item_starContext = Case_item_starContext;
var Case_itemContext = /** @class */ (function (_super) {
    __extends(Case_itemContext, _super);
    function Case_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_itemContext.prototype.Colon = function () { return this.tryGetToken(SysVerilogHDLParser.Colon, 0); };
    Case_itemContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Case_itemContext.prototype.case_item_key = function () {
        return this.tryGetRuleContext(0, Case_item_keyContext);
    };
    Case_itemContext.prototype.Default = function () { return this.tryGetToken(SysVerilogHDLParser.Default, 0); };
    Object.defineProperty(Case_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_case_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_item) {
            listener.enterCase_item(this);
        }
    };
    // @Override
    Case_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_item) {
            listener.exitCase_item(this);
        }
    };
    // @Override
    Case_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_item) {
            return visitor.visitCase_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_itemContext = Case_itemContext;
var Case_switchContext = /** @class */ (function (_super) {
    __extends(Case_switchContext, _super);
    function Case_switchContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_switchContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Case_switchContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_case_switch; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_switchContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_switch) {
            listener.enterCase_switch(this);
        }
    };
    // @Override
    Case_switchContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_switch) {
            listener.exitCase_switch(this);
        }
    };
    // @Override
    Case_switchContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_switch) {
            return visitor.visitCase_switch(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_switchContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_switchContext = Case_switchContext;
var Case_item_keyContext = /** @class */ (function (_super) {
    __extends(Case_item_keyContext, _super);
    function Case_item_keyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_item_keyContext.prototype.case_item_key_expression = function () {
        return this.getRuleContext(0, Case_item_key_expressionContext);
    };
    Case_item_keyContext.prototype.comma_case_item_key_expression_star = function () {
        return this.getRuleContext(0, Comma_case_item_key_expression_starContext);
    };
    Object.defineProperty(Case_item_keyContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_case_item_key; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_item_keyContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_item_key) {
            listener.enterCase_item_key(this);
        }
    };
    // @Override
    Case_item_keyContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_item_key) {
            listener.exitCase_item_key(this);
        }
    };
    // @Override
    Case_item_keyContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_item_key) {
            return visitor.visitCase_item_key(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_item_keyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_item_keyContext = Case_item_keyContext;
var Case_item_key_expressionContext = /** @class */ (function (_super) {
    __extends(Case_item_key_expressionContext, _super);
    function Case_item_key_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Case_item_key_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Case_item_key_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_case_item_key_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Case_item_key_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterCase_item_key_expression) {
            listener.enterCase_item_key_expression(this);
        }
    };
    // @Override
    Case_item_key_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitCase_item_key_expression) {
            listener.exitCase_item_key_expression(this);
        }
    };
    // @Override
    Case_item_key_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitCase_item_key_expression) {
            return visitor.visitCase_item_key_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Case_item_key_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Case_item_key_expressionContext = Case_item_key_expressionContext;
var Comma_case_item_key_expressionContext = /** @class */ (function (_super) {
    __extends(Comma_case_item_key_expressionContext, _super);
    function Comma_case_item_key_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_case_item_key_expressionContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_case_item_key_expressionContext.prototype.case_item_key_expression = function () {
        return this.getRuleContext(0, Case_item_key_expressionContext);
    };
    Object.defineProperty(Comma_case_item_key_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_case_item_key_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_case_item_key_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_case_item_key_expression) {
            listener.enterComma_case_item_key_expression(this);
        }
    };
    // @Override
    Comma_case_item_key_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_case_item_key_expression) {
            listener.exitComma_case_item_key_expression(this);
        }
    };
    // @Override
    Comma_case_item_key_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_case_item_key_expression) {
            return visitor.visitComma_case_item_key_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_case_item_key_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_case_item_key_expressionContext = Comma_case_item_key_expressionContext;
var Comma_case_item_key_expression_starContext = /** @class */ (function (_super) {
    __extends(Comma_case_item_key_expression_starContext, _super);
    function Comma_case_item_key_expression_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_case_item_key_expression_starContext.prototype.comma_case_item_key_expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_case_item_key_expressionContext);
        }
        else {
            return this.getRuleContext(i, Comma_case_item_key_expressionContext);
        }
    };
    Object.defineProperty(Comma_case_item_key_expression_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_case_item_key_expression_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_case_item_key_expression_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_case_item_key_expression_star) {
            listener.enterComma_case_item_key_expression_star(this);
        }
    };
    // @Override
    Comma_case_item_key_expression_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_case_item_key_expression_star) {
            listener.exitComma_case_item_key_expression_star(this);
        }
    };
    // @Override
    Comma_case_item_key_expression_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_case_item_key_expression_star) {
            return visitor.visitComma_case_item_key_expression_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_case_item_key_expression_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_case_item_key_expression_starContext = Comma_case_item_key_expression_starContext;
var ExpressionContext = /** @class */ (function (_super) {
    __extends(ExpressionContext, _super);
    function ExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExpressionContext.prototype.unary_expression = function () {
        return this.tryGetRuleContext(0, Unary_expressionContext);
    };
    ExpressionContext.prototype.unary_post_assign_expression = function () {
        return this.tryGetRuleContext(0, Unary_post_assign_expressionContext);
    };
    ExpressionContext.prototype.unary_pre_assign_expression = function () {
        return this.tryGetRuleContext(0, Unary_pre_assign_expressionContext);
    };
    ExpressionContext.prototype.binary_expression = function () {
        return this.tryGetRuleContext(0, Binary_expressionContext);
    };
    ExpressionContext.prototype.ternary_expression = function () {
        return this.tryGetRuleContext(0, Ternary_expressionContext);
    };
    ExpressionContext.prototype.mintypmax_expression = function () {
        return this.tryGetRuleContext(0, Mintypmax_expressionContext);
    };
    ExpressionContext.prototype.single_expression = function () {
        return this.tryGetRuleContext(0, Single_expressionContext);
    };
    Object.defineProperty(ExpressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterExpression) {
            listener.enterExpression(this);
        }
    };
    // @Override
    ExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitExpression) {
            listener.exitExpression(this);
        }
    };
    // @Override
    ExpressionContext.prototype.accept = function (visitor) {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExpressionContext = ExpressionContext;
var Single_expressionContext = /** @class */ (function (_super) {
    __extends(Single_expressionContext, _super);
    function Single_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Single_expressionContext.prototype.String_literal = function () { return this.tryGetToken(SysVerilogHDLParser.String_literal, 0); };
    Single_expressionContext.prototype.primary = function () {
        return this.tryGetRuleContext(0, PrimaryContext);
    };
    Single_expressionContext.prototype.arrayed_structured_value = function () {
        return this.tryGetRuleContext(0, Arrayed_structured_valueContext);
    };
    Single_expressionContext.prototype.structured_value = function () {
        return this.tryGetRuleContext(0, Structured_valueContext);
    };
    Object.defineProperty(Single_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_single_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Single_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterSingle_expression) {
            listener.enterSingle_expression(this);
        }
    };
    // @Override
    Single_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitSingle_expression) {
            listener.exitSingle_expression(this);
        }
    };
    // @Override
    Single_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitSingle_expression) {
            return visitor.visitSingle_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Single_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Single_expressionContext = Single_expressionContext;
var Primary_rangeContext = /** @class */ (function (_super) {
    __extends(Primary_rangeContext, _super);
    function Primary_rangeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Primary_rangeContext.prototype.primary = function () {
        return this.getRuleContext(0, PrimaryContext);
    };
    Primary_rangeContext.prototype.dimension = function () {
        return this.getRuleContext(0, DimensionContext);
    };
    Object.defineProperty(Primary_rangeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_primary_range; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Primary_rangeContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimary_range) {
            listener.enterPrimary_range(this);
        }
    };
    // @Override
    Primary_rangeContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimary_range) {
            listener.exitPrimary_range(this);
        }
    };
    // @Override
    Primary_rangeContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimary_range) {
            return visitor.visitPrimary_range(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Primary_rangeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Primary_rangeContext = Primary_rangeContext;
var PrimaryContext = /** @class */ (function (_super) {
    __extends(PrimaryContext, _super);
    function PrimaryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimaryContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    PrimaryContext.prototype.concatenation = function () {
        return this.tryGetRuleContext(0, ConcatenationContext);
    };
    PrimaryContext.prototype.multiple_concatenation = function () {
        return this.tryGetRuleContext(0, Multiple_concatenationContext);
    };
    PrimaryContext.prototype.function_call = function () {
        return this.tryGetRuleContext(0, Function_callContext);
    };
    PrimaryContext.prototype.system_function_call = function () {
        return this.tryGetRuleContext(0, System_function_callContext);
    };
    PrimaryContext.prototype.constant_function_call = function () {
        return this.tryGetRuleContext(0, Constant_function_callContext);
    };
    PrimaryContext.prototype.imported_function_call = function () {
        return this.tryGetRuleContext(0, Imported_function_callContext);
    };
    PrimaryContext.prototype.primary_imported_hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Primary_imported_hierarchical_identifierContext);
    };
    PrimaryContext.prototype.primary_hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Primary_hierarchical_identifierContext);
    };
    PrimaryContext.prototype.type_cast_expression = function () {
        return this.tryGetRuleContext(0, Type_cast_expressionContext);
    };
    PrimaryContext.prototype.parenthesis_expression = function () {
        return this.tryGetRuleContext(0, Parenthesis_expressionContext);
    };
    Object.defineProperty(PrimaryContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_primary; },
        enumerable: true,
        configurable: true
    });
    // @Override
    PrimaryContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimary) {
            listener.enterPrimary(this);
        }
    };
    // @Override
    PrimaryContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimary) {
            listener.exitPrimary(this);
        }
    };
    // @Override
    PrimaryContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimary) {
            return visitor.visitPrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return PrimaryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimaryContext = PrimaryContext;
var Unary_expressionContext = /** @class */ (function (_super) {
    __extends(Unary_expressionContext, _super);
    function Unary_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Unary_expressionContext.prototype.unary_operator = function () {
        return this.getRuleContext(0, Unary_operatorContext);
    };
    Unary_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Unary_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_unary_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Unary_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterUnary_expression) {
            listener.enterUnary_expression(this);
        }
    };
    // @Override
    Unary_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitUnary_expression) {
            listener.exitUnary_expression(this);
        }
    };
    // @Override
    Unary_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitUnary_expression) {
            return visitor.visitUnary_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Unary_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Unary_expressionContext = Unary_expressionContext;
var Unary_post_assign_expressionContext = /** @class */ (function (_super) {
    __extends(Unary_post_assign_expressionContext, _super);
    function Unary_post_assign_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Unary_post_assign_expressionContext.prototype.single_expression = function () {
        return this.getRuleContext(0, Single_expressionContext);
    };
    Unary_post_assign_expressionContext.prototype.unary_assign_operator = function () {
        return this.getRuleContext(0, Unary_assign_operatorContext);
    };
    Object.defineProperty(Unary_post_assign_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_unary_post_assign_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Unary_post_assign_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterUnary_post_assign_expression) {
            listener.enterUnary_post_assign_expression(this);
        }
    };
    // @Override
    Unary_post_assign_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitUnary_post_assign_expression) {
            listener.exitUnary_post_assign_expression(this);
        }
    };
    // @Override
    Unary_post_assign_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitUnary_post_assign_expression) {
            return visitor.visitUnary_post_assign_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Unary_post_assign_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Unary_post_assign_expressionContext = Unary_post_assign_expressionContext;
var Unary_pre_assign_expressionContext = /** @class */ (function (_super) {
    __extends(Unary_pre_assign_expressionContext, _super);
    function Unary_pre_assign_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Unary_pre_assign_expressionContext.prototype.unary_assign_operator = function () {
        return this.getRuleContext(0, Unary_assign_operatorContext);
    };
    Unary_pre_assign_expressionContext.prototype.single_expression = function () {
        return this.getRuleContext(0, Single_expressionContext);
    };
    Object.defineProperty(Unary_pre_assign_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_unary_pre_assign_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Unary_pre_assign_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterUnary_pre_assign_expression) {
            listener.enterUnary_pre_assign_expression(this);
        }
    };
    // @Override
    Unary_pre_assign_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitUnary_pre_assign_expression) {
            listener.exitUnary_pre_assign_expression(this);
        }
    };
    // @Override
    Unary_pre_assign_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitUnary_pre_assign_expression) {
            return visitor.visitUnary_pre_assign_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Unary_pre_assign_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Unary_pre_assign_expressionContext = Unary_pre_assign_expressionContext;
var Binary_expressionContext = /** @class */ (function (_super) {
    __extends(Binary_expressionContext, _super);
    function Binary_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Binary_expressionContext.prototype.single_expression = function () {
        return this.getRuleContext(0, Single_expressionContext);
    };
    Binary_expressionContext.prototype.binary_operator = function () {
        return this.getRuleContext(0, Binary_operatorContext);
    };
    Binary_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Binary_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_binary_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Binary_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterBinary_expression) {
            listener.enterBinary_expression(this);
        }
    };
    // @Override
    Binary_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitBinary_expression) {
            listener.exitBinary_expression(this);
        }
    };
    // @Override
    Binary_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitBinary_expression) {
            return visitor.visitBinary_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Binary_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Binary_expressionContext = Binary_expressionContext;
var Ternary_expressionContext = /** @class */ (function (_super) {
    __extends(Ternary_expressionContext, _super);
    function Ternary_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Ternary_expressionContext.prototype.single_expression = function () {
        return this.getRuleContext(0, Single_expressionContext);
    };
    Ternary_expressionContext.prototype.Question_mark = function () { return this.getToken(SysVerilogHDLParser.Question_mark, 0); };
    Ternary_expressionContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Ternary_expressionContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Object.defineProperty(Ternary_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_ternary_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Ternary_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterTernary_expression) {
            listener.enterTernary_expression(this);
        }
    };
    // @Override
    Ternary_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitTernary_expression) {
            listener.exitTernary_expression(this);
        }
    };
    // @Override
    Ternary_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitTernary_expression) {
            return visitor.visitTernary_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Ternary_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Ternary_expressionContext = Ternary_expressionContext;
var Mintypmax_expressionContext = /** @class */ (function (_super) {
    __extends(Mintypmax_expressionContext, _super);
    function Mintypmax_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Mintypmax_expressionContext.prototype.single_expression = function () {
        return this.getRuleContext(0, Single_expressionContext);
    };
    Mintypmax_expressionContext.prototype.Colon = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Colon);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Colon, i);
        }
    };
    Mintypmax_expressionContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(Mintypmax_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_mintypmax_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Mintypmax_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterMintypmax_expression) {
            listener.enterMintypmax_expression(this);
        }
    };
    // @Override
    Mintypmax_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitMintypmax_expression) {
            listener.exitMintypmax_expression(this);
        }
    };
    // @Override
    Mintypmax_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitMintypmax_expression) {
            return visitor.visitMintypmax_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Mintypmax_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Mintypmax_expressionContext = Mintypmax_expressionContext;
var Structured_valueContext = /** @class */ (function (_super) {
    __extends(Structured_valueContext, _super);
    function Structured_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Structured_valueContext.prototype.Quote = function () { return this.tryGetToken(SysVerilogHDLParser.Quote, 0); };
    Structured_valueContext.prototype.Left_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_curly_bracket, 0); };
    Structured_valueContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Structured_valueContext.prototype.Right_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_curly_bracket, 0); };
    Structured_valueContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Object.defineProperty(Structured_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_structured_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Structured_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterStructured_value) {
            listener.enterStructured_value(this);
        }
    };
    // @Override
    Structured_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitStructured_value) {
            listener.exitStructured_value(this);
        }
    };
    // @Override
    Structured_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitStructured_value) {
            return visitor.visitStructured_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Structured_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Structured_valueContext = Structured_valueContext;
var Arrayed_structured_valueContext = /** @class */ (function (_super) {
    __extends(Arrayed_structured_valueContext, _super);
    function Arrayed_structured_valueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Arrayed_structured_valueContext.prototype.Quote = function () { return this.getToken(SysVerilogHDLParser.Quote, 0); };
    Arrayed_structured_valueContext.prototype.Left_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_curly_bracket, 0); };
    Arrayed_structured_valueContext.prototype.arrayed_structure_item_plus = function () {
        return this.getRuleContext(0, Arrayed_structure_item_plusContext);
    };
    Arrayed_structured_valueContext.prototype.Right_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_curly_bracket, 0); };
    Object.defineProperty(Arrayed_structured_valueContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_arrayed_structured_value; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Arrayed_structured_valueContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayed_structured_value) {
            listener.enterArrayed_structured_value(this);
        }
    };
    // @Override
    Arrayed_structured_valueContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayed_structured_value) {
            listener.exitArrayed_structured_value(this);
        }
    };
    // @Override
    Arrayed_structured_valueContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayed_structured_value) {
            return visitor.visitArrayed_structured_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Arrayed_structured_valueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Arrayed_structured_valueContext = Arrayed_structured_valueContext;
var Arrayed_structure_itemContext = /** @class */ (function (_super) {
    __extends(Arrayed_structure_itemContext, _super);
    function Arrayed_structure_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Arrayed_structure_itemContext.prototype.Default = function () { return this.tryGetToken(SysVerilogHDLParser.Default, 0); };
    Arrayed_structure_itemContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Arrayed_structure_itemContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Arrayed_structure_itemContext.prototype.hierarchical_identifier = function () {
        return this.tryGetRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Arrayed_structure_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_arrayed_structure_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Arrayed_structure_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayed_structure_item) {
            listener.enterArrayed_structure_item(this);
        }
    };
    // @Override
    Arrayed_structure_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayed_structure_item) {
            listener.exitArrayed_structure_item(this);
        }
    };
    // @Override
    Arrayed_structure_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayed_structure_item) {
            return visitor.visitArrayed_structure_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Arrayed_structure_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Arrayed_structure_itemContext = Arrayed_structure_itemContext;
var Comma_arrayed_structure_itemContext = /** @class */ (function (_super) {
    __extends(Comma_arrayed_structure_itemContext, _super);
    function Comma_arrayed_structure_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_arrayed_structure_itemContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_arrayed_structure_itemContext.prototype.arrayed_structure_item = function () {
        return this.getRuleContext(0, Arrayed_structure_itemContext);
    };
    Object.defineProperty(Comma_arrayed_structure_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_arrayed_structure_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_arrayed_structure_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_arrayed_structure_item) {
            listener.enterComma_arrayed_structure_item(this);
        }
    };
    // @Override
    Comma_arrayed_structure_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_arrayed_structure_item) {
            listener.exitComma_arrayed_structure_item(this);
        }
    };
    // @Override
    Comma_arrayed_structure_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_arrayed_structure_item) {
            return visitor.visitComma_arrayed_structure_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_arrayed_structure_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_arrayed_structure_itemContext = Comma_arrayed_structure_itemContext;
var Comma_arrayed_structure_item_starContext = /** @class */ (function (_super) {
    __extends(Comma_arrayed_structure_item_starContext, _super);
    function Comma_arrayed_structure_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_arrayed_structure_item_starContext.prototype.comma_arrayed_structure_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_arrayed_structure_itemContext);
        }
        else {
            return this.getRuleContext(i, Comma_arrayed_structure_itemContext);
        }
    };
    Object.defineProperty(Comma_arrayed_structure_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_arrayed_structure_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_arrayed_structure_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_arrayed_structure_item_star) {
            listener.enterComma_arrayed_structure_item_star(this);
        }
    };
    // @Override
    Comma_arrayed_structure_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_arrayed_structure_item_star) {
            listener.exitComma_arrayed_structure_item_star(this);
        }
    };
    // @Override
    Comma_arrayed_structure_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_arrayed_structure_item_star) {
            return visitor.visitComma_arrayed_structure_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_arrayed_structure_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_arrayed_structure_item_starContext = Comma_arrayed_structure_item_starContext;
var Arrayed_structure_item_plusContext = /** @class */ (function (_super) {
    __extends(Arrayed_structure_item_plusContext, _super);
    function Arrayed_structure_item_plusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Arrayed_structure_item_plusContext.prototype.arrayed_structure_item = function () {
        return this.getRuleContext(0, Arrayed_structure_itemContext);
    };
    Arrayed_structure_item_plusContext.prototype.comma_arrayed_structure_item_star = function () {
        return this.getRuleContext(0, Comma_arrayed_structure_item_starContext);
    };
    Object.defineProperty(Arrayed_structure_item_plusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_arrayed_structure_item_plus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Arrayed_structure_item_plusContext.prototype.enterRule = function (listener) {
        if (listener.enterArrayed_structure_item_plus) {
            listener.enterArrayed_structure_item_plus(this);
        }
    };
    // @Override
    Arrayed_structure_item_plusContext.prototype.exitRule = function (listener) {
        if (listener.exitArrayed_structure_item_plus) {
            listener.exitArrayed_structure_item_plus(this);
        }
    };
    // @Override
    Arrayed_structure_item_plusContext.prototype.accept = function (visitor) {
        if (visitor.visitArrayed_structure_item_plus) {
            return visitor.visitArrayed_structure_item_plus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Arrayed_structure_item_plusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Arrayed_structure_item_plusContext = Arrayed_structure_item_plusContext;
var Variable_type_castContext = /** @class */ (function (_super) {
    __extends(Variable_type_castContext, _super);
    function Variable_type_castContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_type_castContext.prototype.variable_type = function () {
        return this.getRuleContext(0, Variable_typeContext);
    };
    Variable_type_castContext.prototype.Quote = function () { return this.getToken(SysVerilogHDLParser.Quote, 0); };
    Variable_type_castContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Variable_type_castContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_type_cast; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_type_castContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_type_cast) {
            listener.enterVariable_type_cast(this);
        }
    };
    // @Override
    Variable_type_castContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_type_cast) {
            listener.exitVariable_type_cast(this);
        }
    };
    // @Override
    Variable_type_castContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_type_cast) {
            return visitor.visitVariable_type_cast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_type_castContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_type_castContext = Variable_type_castContext;
var Width_type_castContext = /** @class */ (function (_super) {
    __extends(Width_type_castContext, _super);
    function Width_type_castContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Width_type_castContext.prototype.number = function () {
        return this.getRuleContext(0, NumberContext);
    };
    Width_type_castContext.prototype.Quote = function () { return this.getToken(SysVerilogHDLParser.Quote, 0); };
    Width_type_castContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Width_type_castContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_width_type_cast; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Width_type_castContext.prototype.enterRule = function (listener) {
        if (listener.enterWidth_type_cast) {
            listener.enterWidth_type_cast(this);
        }
    };
    // @Override
    Width_type_castContext.prototype.exitRule = function (listener) {
        if (listener.exitWidth_type_cast) {
            listener.exitWidth_type_cast(this);
        }
    };
    // @Override
    Width_type_castContext.prototype.accept = function (visitor) {
        if (visitor.visitWidth_type_cast) {
            return visitor.visitWidth_type_cast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Width_type_castContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Width_type_castContext = Width_type_castContext;
var Sign_type_castContext = /** @class */ (function (_super) {
    __extends(Sign_type_castContext, _super);
    function Sign_type_castContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Sign_type_castContext.prototype.Quote = function () { return this.getToken(SysVerilogHDLParser.Quote, 0); };
    Sign_type_castContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Sign_type_castContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Sign_type_castContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Sign_type_castContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_sign_type_cast; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Sign_type_castContext.prototype.enterRule = function (listener) {
        if (listener.enterSign_type_cast) {
            listener.enterSign_type_cast(this);
        }
    };
    // @Override
    Sign_type_castContext.prototype.exitRule = function (listener) {
        if (listener.exitSign_type_cast) {
            listener.exitSign_type_cast(this);
        }
    };
    // @Override
    Sign_type_castContext.prototype.accept = function (visitor) {
        if (visitor.visitSign_type_cast) {
            return visitor.visitSign_type_cast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Sign_type_castContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Sign_type_castContext = Sign_type_castContext;
var Null_type_castContext = /** @class */ (function (_super) {
    __extends(Null_type_castContext, _super);
    function Null_type_castContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Null_type_castContext.prototype.Quote = function () { return this.getToken(SysVerilogHDLParser.Quote, 0); };
    Null_type_castContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Null_type_castContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_null_type_cast; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Null_type_castContext.prototype.enterRule = function (listener) {
        if (listener.enterNull_type_cast) {
            listener.enterNull_type_cast(this);
        }
    };
    // @Override
    Null_type_castContext.prototype.exitRule = function (listener) {
        if (listener.exitNull_type_cast) {
            listener.exitNull_type_cast(this);
        }
    };
    // @Override
    Null_type_castContext.prototype.accept = function (visitor) {
        if (visitor.visitNull_type_cast) {
            return visitor.visitNull_type_cast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Null_type_castContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Null_type_castContext = Null_type_castContext;
var Variable_typeContext = /** @class */ (function (_super) {
    __extends(Variable_typeContext, _super);
    function Variable_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_typeContext.prototype.Int = function () { return this.tryGetToken(SysVerilogHDLParser.Int, 0); };
    Variable_typeContext.prototype.user_type = function () {
        return this.tryGetRuleContext(0, User_typeContext);
    };
    Object.defineProperty(Variable_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_type) {
            listener.enterVariable_type(this);
        }
    };
    // @Override
    Variable_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_type) {
            listener.exitVariable_type(this);
        }
    };
    // @Override
    Variable_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_type) {
            return visitor.visitVariable_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_typeContext = Variable_typeContext;
var Type_cast_identifierContext = /** @class */ (function (_super) {
    __extends(Type_cast_identifierContext, _super);
    function Type_cast_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Type_cast_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Type_cast_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_type_cast_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Type_cast_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterType_cast_identifier) {
            listener.enterType_cast_identifier(this);
        }
    };
    // @Override
    Type_cast_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitType_cast_identifier) {
            listener.exitType_cast_identifier(this);
        }
    };
    // @Override
    Type_cast_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitType_cast_identifier) {
            return visitor.visitType_cast_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Type_cast_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Type_cast_identifierContext = Type_cast_identifierContext;
var Type_cast_expressionContext = /** @class */ (function (_super) {
    __extends(Type_cast_expressionContext, _super);
    function Type_cast_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Type_cast_expressionContext.prototype.variable_type_cast = function () {
        return this.tryGetRuleContext(0, Variable_type_castContext);
    };
    Type_cast_expressionContext.prototype.width_type_cast = function () {
        return this.tryGetRuleContext(0, Width_type_castContext);
    };
    Type_cast_expressionContext.prototype.sign_type_cast = function () {
        return this.tryGetRuleContext(0, Sign_type_castContext);
    };
    Type_cast_expressionContext.prototype.null_type_cast = function () {
        return this.tryGetRuleContext(0, Null_type_castContext);
    };
    Object.defineProperty(Type_cast_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_type_cast_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Type_cast_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterType_cast_expression) {
            listener.enterType_cast_expression(this);
        }
    };
    // @Override
    Type_cast_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitType_cast_expression) {
            listener.exitType_cast_expression(this);
        }
    };
    // @Override
    Type_cast_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitType_cast_expression) {
            return visitor.visitType_cast_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Type_cast_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Type_cast_expressionContext = Type_cast_expressionContext;
var Function_callContext = /** @class */ (function (_super) {
    __extends(Function_callContext, _super);
    function Function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_callContext.prototype.hierarchical_function_identifier = function () {
        return this.getRuleContext(0, Hierarchical_function_identifierContext);
    };
    Function_callContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Function_callContext.prototype.function_interface_assignments = function () {
        return this.getRuleContext(0, Function_interface_assignmentsContext);
    };
    Object.defineProperty(Function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_call) {
            listener.enterFunction_call(this);
        }
    };
    // @Override
    Function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_call) {
            listener.exitFunction_call(this);
        }
    };
    // @Override
    Function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_call) {
            return visitor.visitFunction_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_callContext = Function_callContext;
var Hierarchical_function_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_function_identifierContext, _super);
    function Hierarchical_function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_function_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Hierarchical_function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_function_identifier) {
            listener.enterHierarchical_function_identifier(this);
        }
    };
    // @Override
    Hierarchical_function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_function_identifier) {
            listener.exitHierarchical_function_identifier(this);
        }
    };
    // @Override
    Hierarchical_function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_function_identifier) {
            return visitor.visitHierarchical_function_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_function_identifierContext = Hierarchical_function_identifierContext;
var Function_interface_assignmentsContext = /** @class */ (function (_super) {
    __extends(Function_interface_assignmentsContext, _super);
    function Function_interface_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Function_interface_assignmentsContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Function_interface_assignmentsContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Function_interface_assignmentsContext.prototype.list_of_interface_assignments = function () {
        return this.tryGetRuleContext(0, List_of_interface_assignmentsContext);
    };
    Object.defineProperty(Function_interface_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_function_interface_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Function_interface_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterFunction_interface_assignments) {
            listener.enterFunction_interface_assignments(this);
        }
    };
    // @Override
    Function_interface_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitFunction_interface_assignments) {
            listener.exitFunction_interface_assignments(this);
        }
    };
    // @Override
    Function_interface_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitFunction_interface_assignments) {
            return visitor.visitFunction_interface_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Function_interface_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Function_interface_assignmentsContext = Function_interface_assignmentsContext;
var System_function_callContext = /** @class */ (function (_super) {
    __extends(System_function_callContext, _super);
    function System_function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_function_callContext.prototype.system_function_identifier = function () {
        return this.getRuleContext(0, System_function_identifierContext);
    };
    System_function_callContext.prototype.function_interface_assignments = function () {
        return this.tryGetRuleContext(0, Function_interface_assignmentsContext);
    };
    Object.defineProperty(System_function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_system_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_function_call) {
            listener.enterSystem_function_call(this);
        }
    };
    // @Override
    System_function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_function_call) {
            listener.exitSystem_function_call(this);
        }
    };
    // @Override
    System_function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_function_call) {
            return visitor.visitSystem_function_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_function_callContext = System_function_callContext;
var System_function_identifierContext = /** @class */ (function (_super) {
    __extends(System_function_identifierContext, _super);
    function System_function_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    System_function_identifierContext.prototype.Dollar_Identifier = function () { return this.getToken(SysVerilogHDLParser.Dollar_Identifier, 0); };
    Object.defineProperty(System_function_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_system_function_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    System_function_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterSystem_function_identifier) {
            listener.enterSystem_function_identifier(this);
        }
    };
    // @Override
    System_function_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitSystem_function_identifier) {
            listener.exitSystem_function_identifier(this);
        }
    };
    // @Override
    System_function_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitSystem_function_identifier) {
            return visitor.visitSystem_function_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return System_function_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.System_function_identifierContext = System_function_identifierContext;
var Constant_function_callContext = /** @class */ (function (_super) {
    __extends(Constant_function_callContext, _super);
    function Constant_function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Constant_function_callContext.prototype.function_call = function () {
        return this.getRuleContext(0, Function_callContext);
    };
    Object.defineProperty(Constant_function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_constant_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Constant_function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterConstant_function_call) {
            listener.enterConstant_function_call(this);
        }
    };
    // @Override
    Constant_function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitConstant_function_call) {
            listener.exitConstant_function_call(this);
        }
    };
    // @Override
    Constant_function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitConstant_function_call) {
            return visitor.visitConstant_function_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Constant_function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Constant_function_callContext = Constant_function_callContext;
var Imported_function_callContext = /** @class */ (function (_super) {
    __extends(Imported_function_callContext, _super);
    function Imported_function_callContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Imported_function_callContext.prototype.imported_function_hierarchical_identifier = function () {
        return this.getRuleContext(0, Imported_function_hierarchical_identifierContext);
    };
    Imported_function_callContext.prototype.attribute_instance_star = function () {
        return this.getRuleContext(0, Attribute_instance_starContext);
    };
    Imported_function_callContext.prototype.function_interface_assignments = function () {
        return this.getRuleContext(0, Function_interface_assignmentsContext);
    };
    Object.defineProperty(Imported_function_callContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_imported_function_call; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Imported_function_callContext.prototype.enterRule = function (listener) {
        if (listener.enterImported_function_call) {
            listener.enterImported_function_call(this);
        }
    };
    // @Override
    Imported_function_callContext.prototype.exitRule = function (listener) {
        if (listener.exitImported_function_call) {
            listener.exitImported_function_call(this);
        }
    };
    // @Override
    Imported_function_callContext.prototype.accept = function (visitor) {
        if (visitor.visitImported_function_call) {
            return visitor.visitImported_function_call(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Imported_function_callContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Imported_function_callContext = Imported_function_callContext;
var Imported_function_hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Imported_function_hierarchical_identifierContext, _super);
    function Imported_function_hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Imported_function_hierarchical_identifierContext.prototype.imported_hierarchical_identifier = function () {
        return this.getRuleContext(0, Imported_hierarchical_identifierContext);
    };
    Object.defineProperty(Imported_function_hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_imported_function_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Imported_function_hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterImported_function_hierarchical_identifier) {
            listener.enterImported_function_hierarchical_identifier(this);
        }
    };
    // @Override
    Imported_function_hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitImported_function_hierarchical_identifier) {
            listener.exitImported_function_hierarchical_identifier(this);
        }
    };
    // @Override
    Imported_function_hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitImported_function_hierarchical_identifier) {
            return visitor.visitImported_function_hierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Imported_function_hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Imported_function_hierarchical_identifierContext = Imported_function_hierarchical_identifierContext;
var Primary_hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Primary_hierarchical_identifierContext, _super);
    function Primary_hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Primary_hierarchical_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Primary_hierarchical_identifierContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Object.defineProperty(Primary_hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_primary_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Primary_hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimary_hierarchical_identifier) {
            listener.enterPrimary_hierarchical_identifier(this);
        }
    };
    // @Override
    Primary_hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimary_hierarchical_identifier) {
            listener.exitPrimary_hierarchical_identifier(this);
        }
    };
    // @Override
    Primary_hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimary_hierarchical_identifier) {
            return visitor.visitPrimary_hierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Primary_hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Primary_hierarchical_identifierContext = Primary_hierarchical_identifierContext;
var Primary_imported_hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Primary_imported_hierarchical_identifierContext, _super);
    function Primary_imported_hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Primary_imported_hierarchical_identifierContext.prototype.imported_hierarchical_identifier = function () {
        return this.getRuleContext(0, Imported_hierarchical_identifierContext);
    };
    Primary_imported_hierarchical_identifierContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Object.defineProperty(Primary_imported_hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_primary_imported_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Primary_imported_hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimary_imported_hierarchical_identifier) {
            listener.enterPrimary_imported_hierarchical_identifier(this);
        }
    };
    // @Override
    Primary_imported_hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimary_imported_hierarchical_identifier) {
            listener.exitPrimary_imported_hierarchical_identifier(this);
        }
    };
    // @Override
    Primary_imported_hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitPrimary_imported_hierarchical_identifier) {
            return visitor.visitPrimary_imported_hierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Primary_imported_hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Primary_imported_hierarchical_identifierContext = Primary_imported_hierarchical_identifierContext;
var Imported_hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Imported_hierarchical_identifierContext, _super);
    function Imported_hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Imported_hierarchical_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Imported_hierarchical_identifierContext.prototype.Double_colon = function () { return this.getToken(SysVerilogHDLParser.Double_colon, 0); };
    Imported_hierarchical_identifierContext.prototype.hierarchical_identifier = function () {
        return this.getRuleContext(0, Hierarchical_identifierContext);
    };
    Object.defineProperty(Imported_hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_imported_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Imported_hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterImported_hierarchical_identifier) {
            listener.enterImported_hierarchical_identifier(this);
        }
    };
    // @Override
    Imported_hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitImported_hierarchical_identifier) {
            listener.exitImported_hierarchical_identifier(this);
        }
    };
    // @Override
    Imported_hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitImported_hierarchical_identifier) {
            return visitor.visitImported_hierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Imported_hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Imported_hierarchical_identifierContext = Imported_hierarchical_identifierContext;
var Parenthesis_expressionContext = /** @class */ (function (_super) {
    __extends(Parenthesis_expressionContext, _super);
    function Parenthesis_expressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Parenthesis_expressionContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Parenthesis_expressionContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Parenthesis_expressionContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Parenthesis_expressionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_parenthesis_expression; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Parenthesis_expressionContext.prototype.enterRule = function (listener) {
        if (listener.enterParenthesis_expression) {
            listener.enterParenthesis_expression(this);
        }
    };
    // @Override
    Parenthesis_expressionContext.prototype.exitRule = function (listener) {
        if (listener.exitParenthesis_expression) {
            listener.exitParenthesis_expression(this);
        }
    };
    // @Override
    Parenthesis_expressionContext.prototype.accept = function (visitor) {
        if (visitor.visitParenthesis_expression) {
            return visitor.visitParenthesis_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Parenthesis_expressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Parenthesis_expressionContext = Parenthesis_expressionContext;
var ConcatenationContext = /** @class */ (function (_super) {
    __extends(ConcatenationContext, _super);
    function ConcatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ConcatenationContext.prototype.Left_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_curly_bracket, 0); };
    ConcatenationContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    ConcatenationContext.prototype.comma_expression_star = function () {
        return this.getRuleContext(0, Comma_expression_starContext);
    };
    ConcatenationContext.prototype.Right_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_curly_bracket, 0); };
    Object.defineProperty(ConcatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    ConcatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterConcatenation) {
            listener.enterConcatenation(this);
        }
    };
    // @Override
    ConcatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitConcatenation) {
            listener.exitConcatenation(this);
        }
    };
    // @Override
    ConcatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return ConcatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ConcatenationContext = ConcatenationContext;
var Multiple_concatenationContext = /** @class */ (function (_super) {
    __extends(Multiple_concatenationContext, _super);
    function Multiple_concatenationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Multiple_concatenationContext.prototype.Left_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Left_curly_bracket, 0); };
    Multiple_concatenationContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Multiple_concatenationContext.prototype.concatenation = function () {
        return this.getRuleContext(0, ConcatenationContext);
    };
    Multiple_concatenationContext.prototype.Right_curly_bracket = function () { return this.getToken(SysVerilogHDLParser.Right_curly_bracket, 0); };
    Object.defineProperty(Multiple_concatenationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_multiple_concatenation; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Multiple_concatenationContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiple_concatenation) {
            listener.enterMultiple_concatenation(this);
        }
    };
    // @Override
    Multiple_concatenationContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiple_concatenation) {
            listener.exitMultiple_concatenation(this);
        }
    };
    // @Override
    Multiple_concatenationContext.prototype.accept = function (visitor) {
        if (visitor.visitMultiple_concatenation) {
            return visitor.visitMultiple_concatenation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Multiple_concatenationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Multiple_concatenationContext = Multiple_concatenationContext;
var Comma_expression_plusContext = /** @class */ (function (_super) {
    __extends(Comma_expression_plusContext, _super);
    function Comma_expression_plusContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_expression_plusContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Comma_expression_plusContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(Comma_expression_plusContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_expression_plus; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_expression_plusContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_expression_plus) {
            listener.enterComma_expression_plus(this);
        }
    };
    // @Override
    Comma_expression_plusContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_expression_plus) {
            listener.exitComma_expression_plus(this);
        }
    };
    // @Override
    Comma_expression_plusContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_expression_plus) {
            return visitor.visitComma_expression_plus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_expression_plusContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_expression_plusContext = Comma_expression_plusContext;
var Comma_expression_starContext = /** @class */ (function (_super) {
    __extends(Comma_expression_starContext, _super);
    function Comma_expression_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_expression_starContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Comma_expression_starContext.prototype.expression = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    };
    Object.defineProperty(Comma_expression_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_expression_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_expression_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_expression_star) {
            listener.enterComma_expression_star(this);
        }
    };
    // @Override
    Comma_expression_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_expression_star) {
            listener.exitComma_expression_star(this);
        }
    };
    // @Override
    Comma_expression_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_expression_star) {
            return visitor.visitComma_expression_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_expression_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_expression_starContext = Comma_expression_starContext;
var Typedef_declarationContext = /** @class */ (function (_super) {
    __extends(Typedef_declarationContext, _super);
    function Typedef_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Typedef_declarationContext.prototype.Typedef = function () { return this.getToken(SysVerilogHDLParser.Typedef, 0); };
    Typedef_declarationContext.prototype.typedef_definition = function () {
        return this.getRuleContext(0, Typedef_definitionContext);
    };
    Typedef_declarationContext.prototype.typedef_identifier = function () {
        return this.getRuleContext(0, Typedef_identifierContext);
    };
    Object.defineProperty(Typedef_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_typedef_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Typedef_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterTypedef_declaration) {
            listener.enterTypedef_declaration(this);
        }
    };
    // @Override
    Typedef_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitTypedef_declaration) {
            listener.exitTypedef_declaration(this);
        }
    };
    // @Override
    Typedef_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitTypedef_declaration) {
            return visitor.visitTypedef_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Typedef_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Typedef_declarationContext = Typedef_declarationContext;
var Typedef_identifierContext = /** @class */ (function (_super) {
    __extends(Typedef_identifierContext, _super);
    function Typedef_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Typedef_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Typedef_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_typedef_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Typedef_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTypedef_identifier) {
            listener.enterTypedef_identifier(this);
        }
    };
    // @Override
    Typedef_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTypedef_identifier) {
            listener.exitTypedef_identifier(this);
        }
    };
    // @Override
    Typedef_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitTypedef_identifier) {
            return visitor.visitTypedef_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Typedef_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Typedef_identifierContext = Typedef_identifierContext;
var Typedef_definitionContext = /** @class */ (function (_super) {
    __extends(Typedef_definitionContext, _super);
    function Typedef_definitionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Typedef_definitionContext.prototype.typedef_definition_type = function () {
        return this.tryGetRuleContext(0, Typedef_definition_typeContext);
    };
    Typedef_definitionContext.prototype.enumerated_type = function () {
        return this.tryGetRuleContext(0, Enumerated_typeContext);
    };
    Typedef_definitionContext.prototype.struct_type = function () {
        return this.tryGetRuleContext(0, Struct_typeContext);
    };
    Object.defineProperty(Typedef_definitionContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_typedef_definition; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Typedef_definitionContext.prototype.enterRule = function (listener) {
        if (listener.enterTypedef_definition) {
            listener.enterTypedef_definition(this);
        }
    };
    // @Override
    Typedef_definitionContext.prototype.exitRule = function (listener) {
        if (listener.exitTypedef_definition) {
            listener.exitTypedef_definition(this);
        }
    };
    // @Override
    Typedef_definitionContext.prototype.accept = function (visitor) {
        if (visitor.visitTypedef_definition) {
            return visitor.visitTypedef_definition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Typedef_definitionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Typedef_definitionContext = Typedef_definitionContext;
var Typedef_definition_typeContext = /** @class */ (function (_super) {
    __extends(Typedef_definition_typeContext, _super);
    function Typedef_definition_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Typedef_definition_typeContext.prototype.complex_type = function () {
        return this.tryGetRuleContext(0, Complex_typeContext);
    };
    Typedef_definition_typeContext.prototype.typedef_type = function () {
        return this.tryGetRuleContext(0, Typedef_typeContext);
    };
    Object.defineProperty(Typedef_definition_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_typedef_definition_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Typedef_definition_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterTypedef_definition_type) {
            listener.enterTypedef_definition_type(this);
        }
    };
    // @Override
    Typedef_definition_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitTypedef_definition_type) {
            listener.exitTypedef_definition_type(this);
        }
    };
    // @Override
    Typedef_definition_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitTypedef_definition_type) {
            return visitor.visitTypedef_definition_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Typedef_definition_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Typedef_definition_typeContext = Typedef_definition_typeContext;
var Complex_typeContext = /** @class */ (function (_super) {
    __extends(Complex_typeContext, _super);
    function Complex_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Complex_typeContext.prototype.typedef_type = function () {
        return this.getRuleContext(0, Typedef_typeContext);
    };
    Complex_typeContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Complex_typeContext.prototype.Signed = function () { return this.tryGetToken(SysVerilogHDLParser.Signed, 0); };
    Complex_typeContext.prototype.Unsigned = function () { return this.tryGetToken(SysVerilogHDLParser.Unsigned, 0); };
    Object.defineProperty(Complex_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_complex_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Complex_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterComplex_type) {
            listener.enterComplex_type(this);
        }
    };
    // @Override
    Complex_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitComplex_type) {
            listener.exitComplex_type(this);
        }
    };
    // @Override
    Complex_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitComplex_type) {
            return visitor.visitComplex_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Complex_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Complex_typeContext = Complex_typeContext;
var Typedef_typeContext = /** @class */ (function (_super) {
    __extends(Typedef_typeContext, _super);
    function Typedef_typeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Typedef_typeContext.prototype.Reg = function () { return this.tryGetToken(SysVerilogHDLParser.Reg, 0); };
    Typedef_typeContext.prototype.Logic = function () { return this.tryGetToken(SysVerilogHDLParser.Logic, 0); };
    Typedef_typeContext.prototype.bits_type = function () {
        return this.tryGetRuleContext(0, Bits_typeContext);
    };
    Typedef_typeContext.prototype.net_type = function () {
        return this.tryGetRuleContext(0, Net_typeContext);
    };
    Typedef_typeContext.prototype.user_type = function () {
        return this.tryGetRuleContext(0, User_typeContext);
    };
    Object.defineProperty(Typedef_typeContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_typedef_type; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Typedef_typeContext.prototype.enterRule = function (listener) {
        if (listener.enterTypedef_type) {
            listener.enterTypedef_type(this);
        }
    };
    // @Override
    Typedef_typeContext.prototype.exitRule = function (listener) {
        if (listener.exitTypedef_type) {
            listener.exitTypedef_type(this);
        }
    };
    // @Override
    Typedef_typeContext.prototype.accept = function (visitor) {
        if (visitor.visitTypedef_type) {
            return visitor.visitTypedef_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Typedef_typeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Typedef_typeContext = Typedef_typeContext;
var Par_blockContext = /** @class */ (function (_super) {
    __extends(Par_blockContext, _super);
    function Par_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Par_blockContext.prototype.Fork = function () { return this.getToken(SysVerilogHDLParser.Fork, 0); };
    Par_blockContext.prototype.block_item_declaration_star = function () {
        return this.getRuleContext(0, Block_item_declaration_starContext);
    };
    Par_blockContext.prototype.statement_star = function () {
        return this.getRuleContext(0, Statement_starContext);
    };
    Par_blockContext.prototype.join_keyword = function () {
        return this.getRuleContext(0, Join_keywordContext);
    };
    Par_blockContext.prototype.Colon = function () { return this.tryGetToken(SysVerilogHDLParser.Colon, 0); };
    Par_blockContext.prototype.block_identifier = function () {
        return this.tryGetRuleContext(0, Block_identifierContext);
    };
    Par_blockContext.prototype.colon_block_identifier = function () {
        return this.tryGetRuleContext(0, Colon_block_identifierContext);
    };
    Object.defineProperty(Par_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_par_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Par_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterPar_block) {
            listener.enterPar_block(this);
        }
    };
    // @Override
    Par_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitPar_block) {
            listener.exitPar_block(this);
        }
    };
    // @Override
    Par_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitPar_block) {
            return visitor.visitPar_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Par_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Par_blockContext = Par_blockContext;
var Seq_blockContext = /** @class */ (function (_super) {
    __extends(Seq_blockContext, _super);
    function Seq_blockContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Seq_blockContext.prototype.Begin = function () { return this.getToken(SysVerilogHDLParser.Begin, 0); };
    Seq_blockContext.prototype.block_item_declaration_star = function () {
        return this.getRuleContext(0, Block_item_declaration_starContext);
    };
    Seq_blockContext.prototype.statement_star = function () {
        return this.getRuleContext(0, Statement_starContext);
    };
    Seq_blockContext.prototype.End = function () { return this.getToken(SysVerilogHDLParser.End, 0); };
    Seq_blockContext.prototype.Colon = function () { return this.tryGetToken(SysVerilogHDLParser.Colon, 0); };
    Seq_blockContext.prototype.block_identifier = function () {
        return this.tryGetRuleContext(0, Block_identifierContext);
    };
    Seq_blockContext.prototype.colon_block_identifier = function () {
        return this.tryGetRuleContext(0, Colon_block_identifierContext);
    };
    Object.defineProperty(Seq_blockContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_seq_block; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Seq_blockContext.prototype.enterRule = function (listener) {
        if (listener.enterSeq_block) {
            listener.enterSeq_block(this);
        }
    };
    // @Override
    Seq_blockContext.prototype.exitRule = function (listener) {
        if (listener.exitSeq_block) {
            listener.exitSeq_block(this);
        }
    };
    // @Override
    Seq_blockContext.prototype.accept = function (visitor) {
        if (visitor.visitSeq_block) {
            return visitor.visitSeq_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Seq_blockContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Seq_blockContext = Seq_blockContext;
var Block_identifierContext = /** @class */ (function (_super) {
    __extends(Block_identifierContext, _super);
    function Block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_identifierContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_identifier) {
            listener.enterBlock_identifier(this);
        }
    };
    // @Override
    Block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_identifier) {
            listener.exitBlock_identifier(this);
        }
    };
    // @Override
    Block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_identifier) {
            return visitor.visitBlock_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_identifierContext = Block_identifierContext;
var Colon_block_identifierContext = /** @class */ (function (_super) {
    __extends(Colon_block_identifierContext, _super);
    function Colon_block_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Colon_block_identifierContext.prototype.Colon = function () { return this.getToken(SysVerilogHDLParser.Colon, 0); };
    Colon_block_identifierContext.prototype.block_identifier = function () {
        return this.getRuleContext(0, Block_identifierContext);
    };
    Object.defineProperty(Colon_block_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_colon_block_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Colon_block_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterColon_block_identifier) {
            listener.enterColon_block_identifier(this);
        }
    };
    // @Override
    Colon_block_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitColon_block_identifier) {
            listener.exitColon_block_identifier(this);
        }
    };
    // @Override
    Colon_block_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitColon_block_identifier) {
            return visitor.visitColon_block_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Colon_block_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Colon_block_identifierContext = Colon_block_identifierContext;
var Block_item_declaration_starContext = /** @class */ (function (_super) {
    __extends(Block_item_declaration_starContext, _super);
    function Block_item_declaration_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_item_declaration_starContext.prototype.block_item_declaration_semicolon = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Block_item_declaration_semicolonContext);
        }
        else {
            return this.getRuleContext(i, Block_item_declaration_semicolonContext);
        }
    };
    Object.defineProperty(Block_item_declaration_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_block_item_declaration_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_item_declaration_starContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_item_declaration_star) {
            listener.enterBlock_item_declaration_star(this);
        }
    };
    // @Override
    Block_item_declaration_starContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_item_declaration_star) {
            listener.exitBlock_item_declaration_star(this);
        }
    };
    // @Override
    Block_item_declaration_starContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_item_declaration_star) {
            return visitor.visitBlock_item_declaration_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_item_declaration_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_item_declaration_starContext = Block_item_declaration_starContext;
var Block_item_declaration_semicolonContext = /** @class */ (function (_super) {
    __extends(Block_item_declaration_semicolonContext, _super);
    function Block_item_declaration_semicolonContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_item_declaration_semicolonContext.prototype.block_item_declaration = function () {
        return this.getRuleContext(0, Block_item_declarationContext);
    };
    Block_item_declaration_semicolonContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Object.defineProperty(Block_item_declaration_semicolonContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_block_item_declaration_semicolon; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_item_declaration_semicolonContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_item_declaration_semicolon) {
            listener.enterBlock_item_declaration_semicolon(this);
        }
    };
    // @Override
    Block_item_declaration_semicolonContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_item_declaration_semicolon) {
            listener.exitBlock_item_declaration_semicolon(this);
        }
    };
    // @Override
    Block_item_declaration_semicolonContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_item_declaration_semicolon) {
            return visitor.visitBlock_item_declaration_semicolon(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_item_declaration_semicolonContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_item_declaration_semicolonContext = Block_item_declaration_semicolonContext;
var Block_item_declarationContext = /** @class */ (function (_super) {
    __extends(Block_item_declarationContext, _super);
    function Block_item_declarationContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Block_item_declarationContext.prototype.reg_declaration = function () {
        return this.tryGetRuleContext(0, Reg_declarationContext);
    };
    Block_item_declarationContext.prototype.event_declaration = function () {
        return this.tryGetRuleContext(0, Event_declarationContext);
    };
    Block_item_declarationContext.prototype.logic_declaration = function () {
        return this.tryGetRuleContext(0, Logic_declarationContext);
    };
    Block_item_declarationContext.prototype.bits_declaration = function () {
        return this.tryGetRuleContext(0, Bits_declarationContext);
    };
    Block_item_declarationContext.prototype.integer_declaration = function () {
        return this.tryGetRuleContext(0, Integer_declarationContext);
    };
    Block_item_declarationContext.prototype.int_declaration = function () {
        return this.tryGetRuleContext(0, Int_declarationContext);
    };
    Block_item_declarationContext.prototype.local_parameter_declaration = function () {
        return this.tryGetRuleContext(0, Local_parameter_declarationContext);
    };
    Block_item_declarationContext.prototype.parameter_declaration = function () {
        return this.tryGetRuleContext(0, Parameter_declarationContext);
    };
    Block_item_declarationContext.prototype.real_declaration = function () {
        return this.tryGetRuleContext(0, Real_declarationContext);
    };
    Block_item_declarationContext.prototype.realtime_declaration = function () {
        return this.tryGetRuleContext(0, Realtime_declarationContext);
    };
    Block_item_declarationContext.prototype.time_declaration = function () {
        return this.tryGetRuleContext(0, Time_declarationContext);
    };
    Block_item_declarationContext.prototype.string_declaration = function () {
        return this.tryGetRuleContext(0, String_declarationContext);
    };
    Block_item_declarationContext.prototype.usertype_variable_declaration = function () {
        return this.tryGetRuleContext(0, Usertype_variable_declarationContext);
    };
    Object.defineProperty(Block_item_declarationContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_block_item_declaration; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Block_item_declarationContext.prototype.enterRule = function (listener) {
        if (listener.enterBlock_item_declaration) {
            listener.enterBlock_item_declaration(this);
        }
    };
    // @Override
    Block_item_declarationContext.prototype.exitRule = function (listener) {
        if (listener.exitBlock_item_declaration) {
            listener.exitBlock_item_declaration(this);
        }
    };
    // @Override
    Block_item_declarationContext.prototype.accept = function (visitor) {
        if (visitor.visitBlock_item_declaration) {
            return visitor.visitBlock_item_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Block_item_declarationContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Block_item_declarationContext = Block_item_declarationContext;
var Join_keywordContext = /** @class */ (function (_super) {
    __extends(Join_keywordContext, _super);
    function Join_keywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Join_keywordContext.prototype.Join = function () { return this.tryGetToken(SysVerilogHDLParser.Join, 0); };
    Join_keywordContext.prototype.Join_none = function () { return this.tryGetToken(SysVerilogHDLParser.Join_none, 0); };
    Join_keywordContext.prototype.Join_any = function () { return this.tryGetToken(SysVerilogHDLParser.Join_any, 0); };
    Object.defineProperty(Join_keywordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_join_keyword; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Join_keywordContext.prototype.enterRule = function (listener) {
        if (listener.enterJoin_keyword) {
            listener.enterJoin_keyword(this);
        }
    };
    // @Override
    Join_keywordContext.prototype.exitRule = function (listener) {
        if (listener.exitJoin_keyword) {
            listener.exitJoin_keyword(this);
        }
    };
    // @Override
    Join_keywordContext.prototype.accept = function (visitor) {
        if (visitor.visitJoin_keyword) {
            return visitor.visitJoin_keyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Join_keywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Join_keywordContext = Join_keywordContext;
var Continuous_assignContext = /** @class */ (function (_super) {
    __extends(Continuous_assignContext, _super);
    function Continuous_assignContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Continuous_assignContext.prototype.Assign = function () { return this.getToken(SysVerilogHDLParser.Assign, 0); };
    Continuous_assignContext.prototype.list_of_variable_assignments = function () {
        return this.getRuleContext(0, List_of_variable_assignmentsContext);
    };
    Continuous_assignContext.prototype.semicolon = function () {
        return this.getRuleContext(0, SemicolonContext);
    };
    Continuous_assignContext.prototype.drive_strength = function () {
        return this.tryGetRuleContext(0, Drive_strengthContext);
    };
    Continuous_assignContext.prototype.delay = function () {
        return this.tryGetRuleContext(0, DelayContext);
    };
    Object.defineProperty(Continuous_assignContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_continuous_assign; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Continuous_assignContext.prototype.enterRule = function (listener) {
        if (listener.enterContinuous_assign) {
            listener.enterContinuous_assign(this);
        }
    };
    // @Override
    Continuous_assignContext.prototype.exitRule = function (listener) {
        if (listener.exitContinuous_assign) {
            listener.exitContinuous_assign(this);
        }
    };
    // @Override
    Continuous_assignContext.prototype.accept = function (visitor) {
        if (visitor.visitContinuous_assign) {
            return visitor.visitContinuous_assign(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Continuous_assignContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Continuous_assignContext = Continuous_assignContext;
var List_of_variable_assignmentsContext = /** @class */ (function (_super) {
    __extends(List_of_variable_assignmentsContext, _super);
    function List_of_variable_assignmentsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    List_of_variable_assignmentsContext.prototype.variable_assignment = function () {
        return this.getRuleContext(0, Variable_assignmentContext);
    };
    List_of_variable_assignmentsContext.prototype.comma_variable_assignment_star = function () {
        return this.getRuleContext(0, Comma_variable_assignment_starContext);
    };
    Object.defineProperty(List_of_variable_assignmentsContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_list_of_variable_assignments; },
        enumerable: true,
        configurable: true
    });
    // @Override
    List_of_variable_assignmentsContext.prototype.enterRule = function (listener) {
        if (listener.enterList_of_variable_assignments) {
            listener.enterList_of_variable_assignments(this);
        }
    };
    // @Override
    List_of_variable_assignmentsContext.prototype.exitRule = function (listener) {
        if (listener.exitList_of_variable_assignments) {
            listener.exitList_of_variable_assignments(this);
        }
    };
    // @Override
    List_of_variable_assignmentsContext.prototype.accept = function (visitor) {
        if (visitor.visitList_of_variable_assignments) {
            return visitor.visitList_of_variable_assignments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return List_of_variable_assignmentsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.List_of_variable_assignmentsContext = List_of_variable_assignmentsContext;
var Comma_variable_assignment_starContext = /** @class */ (function (_super) {
    __extends(Comma_variable_assignment_starContext, _super);
    function Comma_variable_assignment_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_variable_assignment_starContext.prototype.comma_variable_assignment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Comma_variable_assignmentContext);
        }
        else {
            return this.getRuleContext(i, Comma_variable_assignmentContext);
        }
    };
    Object.defineProperty(Comma_variable_assignment_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_variable_assignment_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_variable_assignment_starContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_variable_assignment_star) {
            listener.enterComma_variable_assignment_star(this);
        }
    };
    // @Override
    Comma_variable_assignment_starContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_variable_assignment_star) {
            listener.exitComma_variable_assignment_star(this);
        }
    };
    // @Override
    Comma_variable_assignment_starContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_variable_assignment_star) {
            return visitor.visitComma_variable_assignment_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_variable_assignment_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_variable_assignment_starContext = Comma_variable_assignment_starContext;
var Comma_variable_assignmentContext = /** @class */ (function (_super) {
    __extends(Comma_variable_assignmentContext, _super);
    function Comma_variable_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Comma_variable_assignmentContext.prototype.Comma = function () { return this.getToken(SysVerilogHDLParser.Comma, 0); };
    Comma_variable_assignmentContext.prototype.variable_assignment = function () {
        return this.getRuleContext(0, Variable_assignmentContext);
    };
    Object.defineProperty(Comma_variable_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_comma_variable_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Comma_variable_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterComma_variable_assignment) {
            listener.enterComma_variable_assignment(this);
        }
    };
    // @Override
    Comma_variable_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitComma_variable_assignment) {
            listener.exitComma_variable_assignment(this);
        }
    };
    // @Override
    Comma_variable_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitComma_variable_assignment) {
            return visitor.visitComma_variable_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Comma_variable_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Comma_variable_assignmentContext = Comma_variable_assignmentContext;
var Variable_assignmentContext = /** @class */ (function (_super) {
    __extends(Variable_assignmentContext, _super);
    function Variable_assignmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Variable_assignmentContext.prototype.variable_lvalue = function () {
        return this.getRuleContext(0, Variable_lvalueContext);
    };
    Variable_assignmentContext.prototype.Equal = function () { return this.getToken(SysVerilogHDLParser.Equal, 0); };
    Variable_assignmentContext.prototype.expression = function () {
        return this.getRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Variable_assignmentContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_variable_assignment; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Variable_assignmentContext.prototype.enterRule = function (listener) {
        if (listener.enterVariable_assignment) {
            listener.enterVariable_assignment(this);
        }
    };
    // @Override
    Variable_assignmentContext.prototype.exitRule = function (listener) {
        if (listener.exitVariable_assignment) {
            listener.exitVariable_assignment(this);
        }
    };
    // @Override
    Variable_assignmentContext.prototype.accept = function (visitor) {
        if (visitor.visitVariable_assignment) {
            return visitor.visitVariable_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Variable_assignmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Variable_assignmentContext = Variable_assignmentContext;
var Initial_constructContext = /** @class */ (function (_super) {
    __extends(Initial_constructContext, _super);
    function Initial_constructContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Initial_constructContext.prototype.Initial = function () { return this.getToken(SysVerilogHDLParser.Initial, 0); };
    Initial_constructContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Initial_constructContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_initial_construct; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Initial_constructContext.prototype.enterRule = function (listener) {
        if (listener.enterInitial_construct) {
            listener.enterInitial_construct(this);
        }
    };
    // @Override
    Initial_constructContext.prototype.exitRule = function (listener) {
        if (listener.exitInitial_construct) {
            listener.exitInitial_construct(this);
        }
    };
    // @Override
    Initial_constructContext.prototype.accept = function (visitor) {
        if (visitor.visitInitial_construct) {
            return visitor.visitInitial_construct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Initial_constructContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Initial_constructContext = Initial_constructContext;
var Final_constructContext = /** @class */ (function (_super) {
    __extends(Final_constructContext, _super);
    function Final_constructContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Final_constructContext.prototype.Final = function () { return this.getToken(SysVerilogHDLParser.Final, 0); };
    Final_constructContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Final_constructContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_final_construct; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Final_constructContext.prototype.enterRule = function (listener) {
        if (listener.enterFinal_construct) {
            listener.enterFinal_construct(this);
        }
    };
    // @Override
    Final_constructContext.prototype.exitRule = function (listener) {
        if (listener.exitFinal_construct) {
            listener.exitFinal_construct(this);
        }
    };
    // @Override
    Final_constructContext.prototype.accept = function (visitor) {
        if (visitor.visitFinal_construct) {
            return visitor.visitFinal_construct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Final_constructContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Final_constructContext = Final_constructContext;
var Always_keywordContext = /** @class */ (function (_super) {
    __extends(Always_keywordContext, _super);
    function Always_keywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Always_keywordContext.prototype.Always = function () { return this.tryGetToken(SysVerilogHDLParser.Always, 0); };
    Always_keywordContext.prototype.Always_comb = function () { return this.tryGetToken(SysVerilogHDLParser.Always_comb, 0); };
    Always_keywordContext.prototype.Always_ff = function () { return this.tryGetToken(SysVerilogHDLParser.Always_ff, 0); };
    Object.defineProperty(Always_keywordContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_always_keyword; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Always_keywordContext.prototype.enterRule = function (listener) {
        if (listener.enterAlways_keyword) {
            listener.enterAlways_keyword(this);
        }
    };
    // @Override
    Always_keywordContext.prototype.exitRule = function (listener) {
        if (listener.exitAlways_keyword) {
            listener.exitAlways_keyword(this);
        }
    };
    // @Override
    Always_keywordContext.prototype.accept = function (visitor) {
        if (visitor.visitAlways_keyword) {
            return visitor.visitAlways_keyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Always_keywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Always_keywordContext = Always_keywordContext;
var Always_constructContext = /** @class */ (function (_super) {
    __extends(Always_constructContext, _super);
    function Always_constructContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Always_constructContext.prototype.always_keyword = function () {
        return this.getRuleContext(0, Always_keywordContext);
    };
    Always_constructContext.prototype.statement_semicolon = function () {
        return this.getRuleContext(0, Statement_semicolonContext);
    };
    Object.defineProperty(Always_constructContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_always_construct; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Always_constructContext.prototype.enterRule = function (listener) {
        if (listener.enterAlways_construct) {
            listener.enterAlways_construct(this);
        }
    };
    // @Override
    Always_constructContext.prototype.exitRule = function (listener) {
        if (listener.exitAlways_construct) {
            listener.exitAlways_construct(this);
        }
    };
    // @Override
    Always_constructContext.prototype.accept = function (visitor) {
        if (visitor.visitAlways_construct) {
            return visitor.visitAlways_construct(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Always_constructContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Always_constructContext = Always_constructContext;
var Attribute_instance_starContext = /** @class */ (function (_super) {
    __extends(Attribute_instance_starContext, _super);
    function Attribute_instance_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attribute_instance_starContext.prototype.attribute_instance = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attribute_instanceContext);
        }
        else {
            return this.getRuleContext(i, Attribute_instanceContext);
        }
    };
    Object.defineProperty(Attribute_instance_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attribute_instance_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attribute_instance_starContext.prototype.enterRule = function (listener) {
        if (listener.enterAttribute_instance_star) {
            listener.enterAttribute_instance_star(this);
        }
    };
    // @Override
    Attribute_instance_starContext.prototype.exitRule = function (listener) {
        if (listener.exitAttribute_instance_star) {
            listener.exitAttribute_instance_star(this);
        }
    };
    // @Override
    Attribute_instance_starContext.prototype.accept = function (visitor) {
        if (visitor.visitAttribute_instance_star) {
            return visitor.visitAttribute_instance_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attribute_instance_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attribute_instance_starContext = Attribute_instance_starContext;
var Attribute_instanceContext = /** @class */ (function (_super) {
    __extends(Attribute_instanceContext, _super);
    function Attribute_instanceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attribute_instanceContext.prototype.Open_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Open_parenthesis, 0); };
    Attribute_instanceContext.prototype.Star = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Star);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Star, i);
        }
    };
    Attribute_instanceContext.prototype.attr_spec = function () {
        return this.getRuleContext(0, Attr_specContext);
    };
    Attribute_instanceContext.prototype.attr_spec_star = function () {
        return this.getRuleContext(0, Attr_spec_starContext);
    };
    Attribute_instanceContext.prototype.Close_parenthesis = function () { return this.getToken(SysVerilogHDLParser.Close_parenthesis, 0); };
    Object.defineProperty(Attribute_instanceContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attribute_instance; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attribute_instanceContext.prototype.enterRule = function (listener) {
        if (listener.enterAttribute_instance) {
            listener.enterAttribute_instance(this);
        }
    };
    // @Override
    Attribute_instanceContext.prototype.exitRule = function (listener) {
        if (listener.exitAttribute_instance) {
            listener.exitAttribute_instance(this);
        }
    };
    // @Override
    Attribute_instanceContext.prototype.accept = function (visitor) {
        if (visitor.visitAttribute_instance) {
            return visitor.visitAttribute_instance(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attribute_instanceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attribute_instanceContext = Attribute_instanceContext;
var Attr_spec_starContext = /** @class */ (function (_super) {
    __extends(Attr_spec_starContext, _super);
    function Attr_spec_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_spec_starContext.prototype.Comma = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Comma);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Comma, i);
        }
    };
    Attr_spec_starContext.prototype.attr_spec = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Attr_specContext);
        }
        else {
            return this.getRuleContext(i, Attr_specContext);
        }
    };
    Object.defineProperty(Attr_spec_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_spec_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_spec_starContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_spec_star) {
            listener.enterAttr_spec_star(this);
        }
    };
    // @Override
    Attr_spec_starContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_spec_star) {
            listener.exitAttr_spec_star(this);
        }
    };
    // @Override
    Attr_spec_starContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_spec_star) {
            return visitor.visitAttr_spec_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_spec_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_spec_starContext = Attr_spec_starContext;
var Attr_specContext = /** @class */ (function (_super) {
    __extends(Attr_specContext, _super);
    function Attr_specContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_specContext.prototype.attr_name = function () {
        return this.getRuleContext(0, Attr_nameContext);
    };
    Attr_specContext.prototype.Equal = function () { return this.tryGetToken(SysVerilogHDLParser.Equal, 0); };
    Attr_specContext.prototype.expression = function () {
        return this.tryGetRuleContext(0, ExpressionContext);
    };
    Object.defineProperty(Attr_specContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_spec; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_specContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_spec) {
            listener.enterAttr_spec(this);
        }
    };
    // @Override
    Attr_specContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_spec) {
            listener.exitAttr_spec(this);
        }
    };
    // @Override
    Attr_specContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_spec) {
            return visitor.visitAttr_spec(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_specContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_specContext = Attr_specContext;
var Attr_nameContext = /** @class */ (function (_super) {
    __extends(Attr_nameContext, _super);
    function Attr_nameContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Attr_nameContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Object.defineProperty(Attr_nameContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_attr_name; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Attr_nameContext.prototype.enterRule = function (listener) {
        if (listener.enterAttr_name) {
            listener.enterAttr_name(this);
        }
    };
    // @Override
    Attr_nameContext.prototype.exitRule = function (listener) {
        if (listener.exitAttr_name) {
            listener.exitAttr_name(this);
        }
    };
    // @Override
    Attr_nameContext.prototype.accept = function (visitor) {
        if (visitor.visitAttr_name) {
            return visitor.visitAttr_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Attr_nameContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Attr_nameContext = Attr_nameContext;
var IdentifierContext = /** @class */ (function (_super) {
    __extends(IdentifierContext, _super);
    function IdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IdentifierContext.prototype.Simple_identifier = function () { return this.tryGetToken(SysVerilogHDLParser.Simple_identifier, 0); };
    IdentifierContext.prototype.Escaped_identifier = function () { return this.tryGetToken(SysVerilogHDLParser.Escaped_identifier, 0); };
    Object.defineProperty(IdentifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    IdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterIdentifier) {
            listener.enterIdentifier(this);
        }
    };
    // @Override
    IdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitIdentifier) {
            listener.exitIdentifier(this);
        }
    };
    // @Override
    IdentifierContext.prototype.accept = function (visitor) {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return IdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IdentifierContext = IdentifierContext;
var Hierarchical_identifierContext = /** @class */ (function (_super) {
    __extends(Hierarchical_identifierContext, _super);
    function Hierarchical_identifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_identifierContext.prototype.hierarchical_identifier_branch_item = function () {
        return this.getRuleContext(0, Hierarchical_identifier_branch_itemContext);
    };
    Hierarchical_identifierContext.prototype.dot_hierarchical_identifier_branch_item_star = function () {
        return this.getRuleContext(0, Dot_hierarchical_identifier_branch_item_starContext);
    };
    Object.defineProperty(Hierarchical_identifierContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_identifier; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_identifierContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_identifier) {
            listener.enterHierarchical_identifier(this);
        }
    };
    // @Override
    Hierarchical_identifierContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_identifier) {
            listener.exitHierarchical_identifier(this);
        }
    };
    // @Override
    Hierarchical_identifierContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_identifier) {
            return visitor.visitHierarchical_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_identifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_identifierContext = Hierarchical_identifierContext;
var Dot_hierarchical_identifier_branch_item_starContext = /** @class */ (function (_super) {
    __extends(Dot_hierarchical_identifier_branch_item_starContext, _super);
    function Dot_hierarchical_identifier_branch_item_starContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Dot_hierarchical_identifier_branch_item_starContext.prototype.dot_hierarchical_identifier_branch_item = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(Dot_hierarchical_identifier_branch_itemContext);
        }
        else {
            return this.getRuleContext(i, Dot_hierarchical_identifier_branch_itemContext);
        }
    };
    Object.defineProperty(Dot_hierarchical_identifier_branch_item_starContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_dot_hierarchical_identifier_branch_item_star; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Dot_hierarchical_identifier_branch_item_starContext.prototype.enterRule = function (listener) {
        if (listener.enterDot_hierarchical_identifier_branch_item_star) {
            listener.enterDot_hierarchical_identifier_branch_item_star(this);
        }
    };
    // @Override
    Dot_hierarchical_identifier_branch_item_starContext.prototype.exitRule = function (listener) {
        if (listener.exitDot_hierarchical_identifier_branch_item_star) {
            listener.exitDot_hierarchical_identifier_branch_item_star(this);
        }
    };
    // @Override
    Dot_hierarchical_identifier_branch_item_starContext.prototype.accept = function (visitor) {
        if (visitor.visitDot_hierarchical_identifier_branch_item_star) {
            return visitor.visitDot_hierarchical_identifier_branch_item_star(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Dot_hierarchical_identifier_branch_item_starContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Dot_hierarchical_identifier_branch_item_starContext = Dot_hierarchical_identifier_branch_item_starContext;
var Dot_hierarchical_identifier_branch_itemContext = /** @class */ (function (_super) {
    __extends(Dot_hierarchical_identifier_branch_itemContext, _super);
    function Dot_hierarchical_identifier_branch_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Dot_hierarchical_identifier_branch_itemContext.prototype.Dot = function () { return this.getToken(SysVerilogHDLParser.Dot, 0); };
    Dot_hierarchical_identifier_branch_itemContext.prototype.hierarchical_identifier_branch_item = function () {
        return this.getRuleContext(0, Hierarchical_identifier_branch_itemContext);
    };
    Object.defineProperty(Dot_hierarchical_identifier_branch_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_dot_hierarchical_identifier_branch_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Dot_hierarchical_identifier_branch_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterDot_hierarchical_identifier_branch_item) {
            listener.enterDot_hierarchical_identifier_branch_item(this);
        }
    };
    // @Override
    Dot_hierarchical_identifier_branch_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitDot_hierarchical_identifier_branch_item) {
            listener.exitDot_hierarchical_identifier_branch_item(this);
        }
    };
    // @Override
    Dot_hierarchical_identifier_branch_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitDot_hierarchical_identifier_branch_item) {
            return visitor.visitDot_hierarchical_identifier_branch_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Dot_hierarchical_identifier_branch_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Dot_hierarchical_identifier_branch_itemContext = Dot_hierarchical_identifier_branch_itemContext;
var Hierarchical_identifier_branch_itemContext = /** @class */ (function (_super) {
    __extends(Hierarchical_identifier_branch_itemContext, _super);
    function Hierarchical_identifier_branch_itemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Hierarchical_identifier_branch_itemContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    Hierarchical_identifier_branch_itemContext.prototype.dimension_plus = function () {
        return this.tryGetRuleContext(0, Dimension_plusContext);
    };
    Object.defineProperty(Hierarchical_identifier_branch_itemContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_hierarchical_identifier_branch_item; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Hierarchical_identifier_branch_itemContext.prototype.enterRule = function (listener) {
        if (listener.enterHierarchical_identifier_branch_item) {
            listener.enterHierarchical_identifier_branch_item(this);
        }
    };
    // @Override
    Hierarchical_identifier_branch_itemContext.prototype.exitRule = function (listener) {
        if (listener.exitHierarchical_identifier_branch_item) {
            listener.exitHierarchical_identifier_branch_item(this);
        }
    };
    // @Override
    Hierarchical_identifier_branch_itemContext.prototype.accept = function (visitor) {
        if (visitor.visitHierarchical_identifier_branch_item) {
            return visitor.visitHierarchical_identifier_branch_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Hierarchical_identifier_branch_itemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Hierarchical_identifier_branch_itemContext = Hierarchical_identifier_branch_itemContext;
var Timescale_compiler_directiveContext = /** @class */ (function (_super) {
    __extends(Timescale_compiler_directiveContext, _super);
    function Timescale_compiler_directiveContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Timescale_compiler_directiveContext.prototype.Tick_timescale = function () { return this.getToken(SysVerilogHDLParser.Tick_timescale, 0); };
    Timescale_compiler_directiveContext.prototype.Time_literal = function (i) {
        if (i === undefined) {
            return this.getTokens(SysVerilogHDLParser.Time_literal);
        }
        else {
            return this.getToken(SysVerilogHDLParser.Time_literal, i);
        }
    };
    Timescale_compiler_directiveContext.prototype.Forward_slash = function () { return this.getToken(SysVerilogHDLParser.Forward_slash, 0); };
    Object.defineProperty(Timescale_compiler_directiveContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_timescale_compiler_directive; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Timescale_compiler_directiveContext.prototype.enterRule = function (listener) {
        if (listener.enterTimescale_compiler_directive) {
            listener.enterTimescale_compiler_directive(this);
        }
    };
    // @Override
    Timescale_compiler_directiveContext.prototype.exitRule = function (listener) {
        if (listener.exitTimescale_compiler_directive) {
            listener.exitTimescale_compiler_directive(this);
        }
    };
    // @Override
    Timescale_compiler_directiveContext.prototype.accept = function (visitor) {
        if (visitor.visitTimescale_compiler_directive) {
            return visitor.visitTimescale_compiler_directive(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Timescale_compiler_directiveContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Timescale_compiler_directiveContext = Timescale_compiler_directiveContext;
var Timeunit_directiveContext = /** @class */ (function (_super) {
    __extends(Timeunit_directiveContext, _super);
    function Timeunit_directiveContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Timeunit_directiveContext.prototype.Timeunit = function () { return this.getToken(SysVerilogHDLParser.Timeunit, 0); };
    Timeunit_directiveContext.prototype.Time_literal = function () { return this.getToken(SysVerilogHDLParser.Time_literal, 0); };
    Object.defineProperty(Timeunit_directiveContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_timeunit_directive; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Timeunit_directiveContext.prototype.enterRule = function (listener) {
        if (listener.enterTimeunit_directive) {
            listener.enterTimeunit_directive(this);
        }
    };
    // @Override
    Timeunit_directiveContext.prototype.exitRule = function (listener) {
        if (listener.exitTimeunit_directive) {
            listener.exitTimeunit_directive(this);
        }
    };
    // @Override
    Timeunit_directiveContext.prototype.accept = function (visitor) {
        if (visitor.visitTimeunit_directive) {
            return visitor.visitTimeunit_directive(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Timeunit_directiveContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Timeunit_directiveContext = Timeunit_directiveContext;
var Timeprecision_directiveContext = /** @class */ (function (_super) {
    __extends(Timeprecision_directiveContext, _super);
    function Timeprecision_directiveContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Timeprecision_directiveContext.prototype.Timeprecision = function () { return this.getToken(SysVerilogHDLParser.Timeprecision, 0); };
    Timeprecision_directiveContext.prototype.Time_literal = function () { return this.getToken(SysVerilogHDLParser.Time_literal, 0); };
    Object.defineProperty(Timeprecision_directiveContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_timeprecision_directive; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Timeprecision_directiveContext.prototype.enterRule = function (listener) {
        if (listener.enterTimeprecision_directive) {
            listener.enterTimeprecision_directive(this);
        }
    };
    // @Override
    Timeprecision_directiveContext.prototype.exitRule = function (listener) {
        if (listener.exitTimeprecision_directive) {
            listener.exitTimeprecision_directive(this);
        }
    };
    // @Override
    Timeprecision_directiveContext.prototype.accept = function (visitor) {
        if (visitor.visitTimeprecision_directive) {
            return visitor.visitTimeprecision_directive(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Timeprecision_directiveContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Timeprecision_directiveContext = Timeprecision_directiveContext;
var Default_nettype_statementContext = /** @class */ (function (_super) {
    __extends(Default_nettype_statementContext, _super);
    function Default_nettype_statementContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Default_nettype_statementContext.prototype.Default_nettype = function () { return this.getToken(SysVerilogHDLParser.Default_nettype, 0); };
    Default_nettype_statementContext.prototype.net_type = function () {
        return this.getRuleContext(0, Net_typeContext);
    };
    Object.defineProperty(Default_nettype_statementContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_default_nettype_statement; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Default_nettype_statementContext.prototype.enterRule = function (listener) {
        if (listener.enterDefault_nettype_statement) {
            listener.enterDefault_nettype_statement(this);
        }
    };
    // @Override
    Default_nettype_statementContext.prototype.exitRule = function (listener) {
        if (listener.exitDefault_nettype_statement) {
            listener.exitDefault_nettype_statement(this);
        }
    };
    // @Override
    Default_nettype_statementContext.prototype.accept = function (visitor) {
        if (visitor.visitDefault_nettype_statement) {
            return visitor.visitDefault_nettype_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Default_nettype_statementContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Default_nettype_statementContext = Default_nettype_statementContext;
var NumberContext = /** @class */ (function (_super) {
    __extends(NumberContext, _super);
    function NumberContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumberContext.prototype.integral_number = function () {
        return this.tryGetRuleContext(0, Integral_numberContext);
    };
    NumberContext.prototype.real_number = function () {
        return this.tryGetRuleContext(0, Real_numberContext);
    };
    Object.defineProperty(NumberContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_number; },
        enumerable: true,
        configurable: true
    });
    // @Override
    NumberContext.prototype.enterRule = function (listener) {
        if (listener.enterNumber) {
            listener.enterNumber(this);
        }
    };
    // @Override
    NumberContext.prototype.exitRule = function (listener) {
        if (listener.exitNumber) {
            listener.exitNumber(this);
        }
    };
    // @Override
    NumberContext.prototype.accept = function (visitor) {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return NumberContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumberContext = NumberContext;
var Integral_numberContext = /** @class */ (function (_super) {
    __extends(Integral_numberContext, _super);
    function Integral_numberContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Integral_numberContext.prototype.Decimal_number = function () { return this.tryGetToken(SysVerilogHDLParser.Decimal_number, 0); };
    Integral_numberContext.prototype.Octal_number = function () { return this.tryGetToken(SysVerilogHDLParser.Octal_number, 0); };
    Integral_numberContext.prototype.Binary_number = function () { return this.tryGetToken(SysVerilogHDLParser.Binary_number, 0); };
    Integral_numberContext.prototype.Hex_number = function () { return this.tryGetToken(SysVerilogHDLParser.Hex_number, 0); };
    Object.defineProperty(Integral_numberContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_integral_number; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Integral_numberContext.prototype.enterRule = function (listener) {
        if (listener.enterIntegral_number) {
            listener.enterIntegral_number(this);
        }
    };
    // @Override
    Integral_numberContext.prototype.exitRule = function (listener) {
        if (listener.exitIntegral_number) {
            listener.exitIntegral_number(this);
        }
    };
    // @Override
    Integral_numberContext.prototype.accept = function (visitor) {
        if (visitor.visitIntegral_number) {
            return visitor.visitIntegral_number(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Integral_numberContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Integral_numberContext = Integral_numberContext;
var Real_numberContext = /** @class */ (function (_super) {
    __extends(Real_numberContext, _super);
    function Real_numberContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Real_numberContext.prototype.Fixed_point_number = function () { return this.tryGetToken(SysVerilogHDLParser.Fixed_point_number, 0); };
    Real_numberContext.prototype.Real_exp_form = function () { return this.tryGetToken(SysVerilogHDLParser.Real_exp_form, 0); };
    Object.defineProperty(Real_numberContext.prototype, "ruleIndex", {
        // @Override
        get: function () { return SysVerilogHDLParser.RULE_real_number; },
        enumerable: true,
        configurable: true
    });
    // @Override
    Real_numberContext.prototype.enterRule = function (listener) {
        if (listener.enterReal_number) {
            listener.enterReal_number(this);
        }
    };
    // @Override
    Real_numberContext.prototype.exitRule = function (listener) {
        if (listener.exitReal_number) {
            listener.exitReal_number(this);
        }
    };
    // @Override
    Real_numberContext.prototype.accept = function (visitor) {
        if (visitor.visitReal_number) {
            return visitor.visitReal_number(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    };
    return Real_numberContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.Real_numberContext = Real_numberContext;
