// Generated from /Users/briancullinan/jupyter_ops/Resources/Parsers/cobol85/Cobol85.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { Cobol85Listener } from "./Cobol85Listener";
import { Cobol85Visitor } from "./Cobol85Visitor";


export class Cobol85Parser extends Parser {
	public static readonly ABORT = 1;
	public static readonly ACCEPT = 2;
	public static readonly ACCESS = 3;
	public static readonly ADD = 4;
	public static readonly ADDRESS = 5;
	public static readonly ADVANCING = 6;
	public static readonly AFTER = 7;
	public static readonly ALIGNED = 8;
	public static readonly ALL = 9;
	public static readonly ALPHABET = 10;
	public static readonly ALPHABETIC = 11;
	public static readonly ALPHABETIC_LOWER = 12;
	public static readonly ALPHABETIC_UPPER = 13;
	public static readonly ALPHANUMERIC = 14;
	public static readonly ALPHANUMERIC_EDITED = 15;
	public static readonly ALSO = 16;
	public static readonly ALTER = 17;
	public static readonly ALTERNATE = 18;
	public static readonly AND = 19;
	public static readonly ANY = 20;
	public static readonly ARE = 21;
	public static readonly AREA = 22;
	public static readonly AREAS = 23;
	public static readonly AS = 24;
	public static readonly ASCENDING = 25;
	public static readonly ASCII = 26;
	public static readonly ASSIGN = 27;
	public static readonly ASSOCIATED_DATA = 28;
	public static readonly ASSOCIATED_DATA_LENGTH = 29;
	public static readonly AT = 30;
	public static readonly ATTRIBUTE = 31;
	public static readonly AUTHOR = 32;
	public static readonly AUTO = 33;
	public static readonly AUTO_SKIP = 34;
	public static readonly BACKGROUND_COLOR = 35;
	public static readonly BACKGROUND_COLOUR = 36;
	public static readonly BASIS = 37;
	public static readonly BEEP = 38;
	public static readonly BEFORE = 39;
	public static readonly BEGINNING = 40;
	public static readonly BELL = 41;
	public static readonly BINARY = 42;
	public static readonly BIT = 43;
	public static readonly BLANK = 44;
	public static readonly BLINK = 45;
	public static readonly BLOCK = 46;
	public static readonly BOUNDS = 47;
	public static readonly BOTTOM = 48;
	public static readonly BY = 49;
	public static readonly BYFUNCTION = 50;
	public static readonly BYTITLE = 51;
	public static readonly CALL = 52;
	public static readonly CANCEL = 53;
	public static readonly CAPABLE = 54;
	public static readonly CCSVERSION = 55;
	public static readonly CD = 56;
	public static readonly CF = 57;
	public static readonly CH = 58;
	public static readonly CHAINING = 59;
	public static readonly CHANGED = 60;
	public static readonly CHANNEL = 61;
	public static readonly CHARACTER = 62;
	public static readonly CHARACTERS = 63;
	public static readonly CLASS = 64;
	public static readonly CLASS_ID = 65;
	public static readonly CLOCK_UNITS = 66;
	public static readonly CLOSE = 67;
	public static readonly CLOSE_DISPOSITION = 68;
	public static readonly COBOL = 69;
	public static readonly CODE = 70;
	public static readonly CODE_SET = 71;
	public static readonly COLLATING = 72;
	public static readonly COL = 73;
	public static readonly COLUMN = 74;
	public static readonly COM_REG = 75;
	public static readonly COMMA = 76;
	public static readonly COMMITMENT = 77;
	public static readonly COMMON = 78;
	public static readonly COMMUNICATION = 79;
	public static readonly COMP = 80;
	public static readonly COMP_1 = 81;
	public static readonly COMP_2 = 82;
	public static readonly COMP_3 = 83;
	public static readonly COMP_4 = 84;
	public static readonly COMP_5 = 85;
	public static readonly COMPUTATIONAL = 86;
	public static readonly COMPUTATIONAL_1 = 87;
	public static readonly COMPUTATIONAL_2 = 88;
	public static readonly COMPUTATIONAL_3 = 89;
	public static readonly COMPUTATIONAL_4 = 90;
	public static readonly COMPUTATIONAL_5 = 91;
	public static readonly COMPUTE = 92;
	public static readonly CONFIGURATION = 93;
	public static readonly CONTAINS = 94;
	public static readonly CONTENT = 95;
	public static readonly CONTINUE = 96;
	public static readonly CONTROL = 97;
	public static readonly CONTROL_POINT = 98;
	public static readonly CONTROLS = 99;
	public static readonly CONVENTION = 100;
	public static readonly CONVERTING = 101;
	public static readonly COPY = 102;
	public static readonly CORR = 103;
	public static readonly CORRESPONDING = 104;
	public static readonly COUNT = 105;
	public static readonly CRUNCH = 106;
	public static readonly CURRENCY = 107;
	public static readonly CURSOR = 108;
	public static readonly DATA = 109;
	public static readonly DATA_BASE = 110;
	public static readonly DATE = 111;
	public static readonly DATE_COMPILED = 112;
	public static readonly DATE_WRITTEN = 113;
	public static readonly DAY = 114;
	public static readonly DAY_OF_WEEK = 115;
	public static readonly DBCS = 116;
	public static readonly DE = 117;
	public static readonly DEBUG_CONTENTS = 118;
	public static readonly DEBUG_ITEM = 119;
	public static readonly DEBUG_LINE = 120;
	public static readonly DEBUG_NAME = 121;
	public static readonly DEBUG_SUB_1 = 122;
	public static readonly DEBUG_SUB_2 = 123;
	public static readonly DEBUG_SUB_3 = 124;
	public static readonly DEBUGGING = 125;
	public static readonly DECIMAL_POINT = 126;
	public static readonly DECLARATIVES = 127;
	public static readonly DEFAULT = 128;
	public static readonly DEFAULT_DISPLAY = 129;
	public static readonly DEFINITION = 130;
	public static readonly DELETE = 131;
	public static readonly DELIMITED = 132;
	public static readonly DELIMITER = 133;
	public static readonly DEPENDING = 134;
	public static readonly DESCENDING = 135;
	public static readonly DESTINATION = 136;
	public static readonly DETAIL = 137;
	public static readonly DFHRESP = 138;
	public static readonly DFHVALUE = 139;
	public static readonly DISABLE = 140;
	public static readonly DISK = 141;
	public static readonly DISPLAY = 142;
	public static readonly DISPLAY_1 = 143;
	public static readonly DIVIDE = 144;
	public static readonly DIVISION = 145;
	public static readonly DONTCARE = 146;
	public static readonly DOUBLE = 147;
	public static readonly DOWN = 148;
	public static readonly DUPLICATES = 149;
	public static readonly DYNAMIC = 150;
	public static readonly EBCDIC = 151;
	public static readonly EGCS = 152;
	public static readonly EGI = 153;
	public static readonly ELSE = 154;
	public static readonly EMI = 155;
	public static readonly EMPTY_CHECK = 156;
	public static readonly ENABLE = 157;
	public static readonly END = 158;
	public static readonly END_ACCEPT = 159;
	public static readonly END_ADD = 160;
	public static readonly END_CALL = 161;
	public static readonly END_COMPUTE = 162;
	public static readonly END_DELETE = 163;
	public static readonly END_DIVIDE = 164;
	public static readonly END_EVALUATE = 165;
	public static readonly END_IF = 166;
	public static readonly END_MULTIPLY = 167;
	public static readonly END_OF_PAGE = 168;
	public static readonly END_PERFORM = 169;
	public static readonly END_READ = 170;
	public static readonly END_RECEIVE = 171;
	public static readonly END_RETURN = 172;
	public static readonly END_REWRITE = 173;
	public static readonly END_SEARCH = 174;
	public static readonly END_START = 175;
	public static readonly END_STRING = 176;
	public static readonly END_SUBTRACT = 177;
	public static readonly END_UNSTRING = 178;
	public static readonly END_WRITE = 179;
	public static readonly ENDING = 180;
	public static readonly ENTER = 181;
	public static readonly ENTRY = 182;
	public static readonly ENTRY_PROCEDURE = 183;
	public static readonly ENVIRONMENT = 184;
	public static readonly EOP = 185;
	public static readonly EQUAL = 186;
	public static readonly ERASE = 187;
	public static readonly ERROR = 188;
	public static readonly EOL = 189;
	public static readonly EOS = 190;
	public static readonly ESCAPE = 191;
	public static readonly ESI = 192;
	public static readonly EVALUATE = 193;
	public static readonly EVENT = 194;
	public static readonly EVERY = 195;
	public static readonly EXCEPTION = 196;
	public static readonly EXCLUSIVE = 197;
	public static readonly EXHIBIT = 198;
	public static readonly EXIT = 199;
	public static readonly EXPORT = 200;
	public static readonly EXTEND = 201;
	public static readonly EXTENDED = 202;
	public static readonly EXTERNAL = 203;
	public static readonly FALSE = 204;
	public static readonly FD = 205;
	public static readonly FILE = 206;
	public static readonly FILE_CONTROL = 207;
	public static readonly FILLER = 208;
	public static readonly FINAL = 209;
	public static readonly FIRST = 210;
	public static readonly FOOTING = 211;
	public static readonly FOR = 212;
	public static readonly FOREGROUND_COLOR = 213;
	public static readonly FOREGROUND_COLOUR = 214;
	public static readonly FROM = 215;
	public static readonly FULL = 216;
	public static readonly FUNCTION = 217;
	public static readonly FUNCTIONNAME = 218;
	public static readonly FUNCTION_POINTER = 219;
	public static readonly GENERATE = 220;
	public static readonly GOBACK = 221;
	public static readonly GIVING = 222;
	public static readonly GLOBAL = 223;
	public static readonly GO = 224;
	public static readonly GREATER = 225;
	public static readonly GRID = 226;
	public static readonly GROUP = 227;
	public static readonly HEADING = 228;
	public static readonly HIGHLIGHT = 229;
	public static readonly HIGH_VALUE = 230;
	public static readonly HIGH_VALUES = 231;
	public static readonly I_O = 232;
	public static readonly I_O_CONTROL = 233;
	public static readonly ID = 234;
	public static readonly IDENTIFICATION = 235;
	public static readonly IF = 236;
	public static readonly IMPLICIT = 237;
	public static readonly IMPORT = 238;
	public static readonly IN = 239;
	public static readonly INDEX = 240;
	public static readonly INDEXED = 241;
	public static readonly INDICATE = 242;
	public static readonly INITIAL = 243;
	public static readonly INITIALIZE = 244;
	public static readonly INITIATE = 245;
	public static readonly INPUT = 246;
	public static readonly INPUT_OUTPUT = 247;
	public static readonly INSPECT = 248;
	public static readonly INSTALLATION = 249;
	public static readonly INTEGER = 250;
	public static readonly INTO = 251;
	public static readonly INVALID = 252;
	public static readonly INVOKE = 253;
	public static readonly IS = 254;
	public static readonly JUST = 255;
	public static readonly JUSTIFIED = 256;
	public static readonly KANJI = 257;
	public static readonly KEPT = 258;
	public static readonly KEY = 259;
	public static readonly KEYBOARD = 260;
	public static readonly LABEL = 261;
	public static readonly LANGUAGE = 262;
	public static readonly LAST = 263;
	public static readonly LB = 264;
	public static readonly LD = 265;
	public static readonly LEADING = 266;
	public static readonly LEFT = 267;
	public static readonly LEFTLINE = 268;
	public static readonly LENGTH = 269;
	public static readonly LENGTH_CHECK = 270;
	public static readonly LESS = 271;
	public static readonly LIBACCESS = 272;
	public static readonly LIBPARAMETER = 273;
	public static readonly LIBRARY = 274;
	public static readonly LIMIT = 275;
	public static readonly LIMITS = 276;
	public static readonly LINAGE = 277;
	public static readonly LINAGE_COUNTER = 278;
	public static readonly LINE = 279;
	public static readonly LINES = 280;
	public static readonly LINE_COUNTER = 281;
	public static readonly LINKAGE = 282;
	public static readonly LIST = 283;
	public static readonly LOCAL = 284;
	public static readonly LOCAL_STORAGE = 285;
	public static readonly LOCK = 286;
	public static readonly LONG_DATE = 287;
	public static readonly LONG_TIME = 288;
	public static readonly LOWER = 289;
	public static readonly LOWLIGHT = 290;
	public static readonly LOW_VALUE = 291;
	public static readonly LOW_VALUES = 292;
	public static readonly MEMORY = 293;
	public static readonly MERGE = 294;
	public static readonly MESSAGE = 295;
	public static readonly MMDDYYYY = 296;
	public static readonly MODE = 297;
	public static readonly MODULES = 298;
	public static readonly MORE_LABELS = 299;
	public static readonly MOVE = 300;
	public static readonly MULTIPLE = 301;
	public static readonly MULTIPLY = 302;
	public static readonly NAMED = 303;
	public static readonly NATIONAL = 304;
	public static readonly NATIONAL_EDITED = 305;
	public static readonly NATIVE = 306;
	public static readonly NEGATIVE = 307;
	public static readonly NETWORK = 308;
	public static readonly NEXT = 309;
	public static readonly NO = 310;
	public static readonly NO_ECHO = 311;
	public static readonly NOT = 312;
	public static readonly NULL = 313;
	public static readonly NULLS = 314;
	public static readonly NUMBER = 315;
	public static readonly NUMERIC = 316;
	public static readonly NUMERIC_DATE = 317;
	public static readonly NUMERIC_EDITED = 318;
	public static readonly NUMERIC_TIME = 319;
	public static readonly OBJECT_COMPUTER = 320;
	public static readonly OCCURS = 321;
	public static readonly ODT = 322;
	public static readonly OF = 323;
	public static readonly OFF = 324;
	public static readonly OMITTED = 325;
	public static readonly ON = 326;
	public static readonly OPEN = 327;
	public static readonly OPTIONAL = 328;
	public static readonly OR = 329;
	public static readonly ORDER = 330;
	public static readonly ORDERLY = 331;
	public static readonly ORGANIZATION = 332;
	public static readonly OTHER = 333;
	public static readonly OUTPUT = 334;
	public static readonly OVERFLOW = 335;
	public static readonly OVERLINE = 336;
	public static readonly OWN = 337;
	public static readonly PACKED_DECIMAL = 338;
	public static readonly PADDING = 339;
	public static readonly PAGE = 340;
	public static readonly PAGE_COUNTER = 341;
	public static readonly PASSWORD = 342;
	public static readonly PERFORM = 343;
	public static readonly PF = 344;
	public static readonly PH = 345;
	public static readonly PIC = 346;
	public static readonly PICTURE = 347;
	public static readonly PLUS = 348;
	public static readonly POINTER = 349;
	public static readonly POSITION = 350;
	public static readonly POSITIVE = 351;
	public static readonly PORT = 352;
	public static readonly PRINTER = 353;
	public static readonly PRINTING = 354;
	public static readonly PRIVATE = 355;
	public static readonly PROCEDURE = 356;
	public static readonly PROCEDURE_POINTER = 357;
	public static readonly PROCEDURES = 358;
	public static readonly PROCEED = 359;
	public static readonly PROCESS = 360;
	public static readonly PROGRAM = 361;
	public static readonly PROGRAM_ID = 362;
	public static readonly PROGRAM_LIBRARY = 363;
	public static readonly PROMPT = 364;
	public static readonly PURGE = 365;
	public static readonly QUEUE = 366;
	public static readonly QUOTE = 367;
	public static readonly QUOTES = 368;
	public static readonly RANDOM = 369;
	public static readonly READER = 370;
	public static readonly REMOTE = 371;
	public static readonly RD = 372;
	public static readonly REAL = 373;
	public static readonly READ = 374;
	public static readonly RECEIVE = 375;
	public static readonly RECEIVED = 376;
	public static readonly RECORD = 377;
	public static readonly RECORDING = 378;
	public static readonly RECORDS = 379;
	public static readonly RECURSIVE = 380;
	public static readonly REDEFINES = 381;
	public static readonly REEL = 382;
	public static readonly REF = 383;
	public static readonly REFERENCE = 384;
	public static readonly REFERENCES = 385;
	public static readonly RELATIVE = 386;
	public static readonly RELEASE = 387;
	public static readonly REMAINDER = 388;
	public static readonly REMARKS = 389;
	public static readonly REMOVAL = 390;
	public static readonly REMOVE = 391;
	public static readonly RENAMES = 392;
	public static readonly REPLACE = 393;
	public static readonly REPLACING = 394;
	public static readonly REPORT = 395;
	public static readonly REPORTING = 396;
	public static readonly REPORTS = 397;
	public static readonly REQUIRED = 398;
	public static readonly RERUN = 399;
	public static readonly RESERVE = 400;
	public static readonly REVERSE_VIDEO = 401;
	public static readonly RESET = 402;
	public static readonly RETURN = 403;
	public static readonly RETURN_CODE = 404;
	public static readonly RETURNING = 405;
	public static readonly REVERSED = 406;
	public static readonly REWIND = 407;
	public static readonly REWRITE = 408;
	public static readonly RF = 409;
	public static readonly RH = 410;
	public static readonly RIGHT = 411;
	public static readonly ROUNDED = 412;
	public static readonly RUN = 413;
	public static readonly SAME = 414;
	public static readonly SAVE = 415;
	public static readonly SCREEN = 416;
	public static readonly SD = 417;
	public static readonly SEARCH = 418;
	public static readonly SECTION = 419;
	public static readonly SECURE = 420;
	public static readonly SECURITY = 421;
	public static readonly SEGMENT = 422;
	public static readonly SEGMENT_LIMIT = 423;
	public static readonly SELECT = 424;
	public static readonly SEND = 425;
	public static readonly SENTENCE = 426;
	public static readonly SEPARATE = 427;
	public static readonly SEQUENCE = 428;
	public static readonly SEQUENTIAL = 429;
	public static readonly SET = 430;
	public static readonly SHARED = 431;
	public static readonly SHAREDBYALL = 432;
	public static readonly SHAREDBYRUNUNIT = 433;
	public static readonly SHARING = 434;
	public static readonly SHIFT_IN = 435;
	public static readonly SHIFT_OUT = 436;
	public static readonly SHORT_DATE = 437;
	public static readonly SIGN = 438;
	public static readonly SIZE = 439;
	public static readonly SORT = 440;
	public static readonly SORT_CONTROL = 441;
	public static readonly SORT_CORE_SIZE = 442;
	public static readonly SORT_FILE_SIZE = 443;
	public static readonly SORT_MERGE = 444;
	public static readonly SORT_MESSAGE = 445;
	public static readonly SORT_MODE_SIZE = 446;
	public static readonly SORT_RETURN = 447;
	public static readonly SOURCE = 448;
	public static readonly SOURCE_COMPUTER = 449;
	public static readonly SPACE = 450;
	public static readonly SPACES = 451;
	public static readonly SPECIAL_NAMES = 452;
	public static readonly STANDARD = 453;
	public static readonly STANDARD_1 = 454;
	public static readonly STANDARD_2 = 455;
	public static readonly START = 456;
	public static readonly STATUS = 457;
	public static readonly STOP = 458;
	public static readonly STRING = 459;
	public static readonly SUB_QUEUE_1 = 460;
	public static readonly SUB_QUEUE_2 = 461;
	public static readonly SUB_QUEUE_3 = 462;
	public static readonly SUBTRACT = 463;
	public static readonly SUM = 464;
	public static readonly SUPPRESS = 465;
	public static readonly SYMBOL = 466;
	public static readonly SYMBOLIC = 467;
	public static readonly SYNC = 468;
	public static readonly SYNCHRONIZED = 469;
	public static readonly TABLE = 470;
	public static readonly TALLY = 471;
	public static readonly TALLYING = 472;
	public static readonly TASK = 473;
	public static readonly TAPE = 474;
	public static readonly TERMINAL = 475;
	public static readonly TERMINATE = 476;
	public static readonly TEST = 477;
	public static readonly TEXT = 478;
	public static readonly THAN = 479;
	public static readonly THEN = 480;
	public static readonly THREAD = 481;
	public static readonly THREAD_LOCAL = 482;
	public static readonly THROUGH = 483;
	public static readonly THRU = 484;
	public static readonly TIME = 485;
	public static readonly TIMER = 486;
	public static readonly TIMES = 487;
	public static readonly TITLE = 488;
	public static readonly TO = 489;
	public static readonly TODAYS_DATE = 490;
	public static readonly TODAYS_NAME = 491;
	public static readonly TOP = 492;
	public static readonly TRAILING = 493;
	public static readonly TRUE = 494;
	public static readonly TRUNCATED = 495;
	public static readonly TYPE = 496;
	public static readonly TYPEDEF = 497;
	public static readonly UNDERLINE = 498;
	public static readonly UNIT = 499;
	public static readonly UNSTRING = 500;
	public static readonly UNTIL = 501;
	public static readonly UP = 502;
	public static readonly UPON = 503;
	public static readonly USAGE = 504;
	public static readonly USE = 505;
	public static readonly USING = 506;
	public static readonly VALUE = 507;
	public static readonly VALUES = 508;
	public static readonly VARYING = 509;
	public static readonly VIRTUAL = 510;
	public static readonly WAIT = 511;
	public static readonly WHEN = 512;
	public static readonly WHEN_COMPILED = 513;
	public static readonly WITH = 514;
	public static readonly WORDS = 515;
	public static readonly WORKING_STORAGE = 516;
	public static readonly WRITE = 517;
	public static readonly YEAR = 518;
	public static readonly YYYYMMDD = 519;
	public static readonly YYYYDDD = 520;
	public static readonly ZERO = 521;
	public static readonly ZERO_FILL = 522;
	public static readonly ZEROS = 523;
	public static readonly ZEROES = 524;
	public static readonly AMPCHAR = 525;
	public static readonly ASTERISKCHAR = 526;
	public static readonly DOUBLEASTERISKCHAR = 527;
	public static readonly COLONCHAR = 528;
	public static readonly COMMACHAR = 529;
	public static readonly COMMENTENTRYTAG = 530;
	public static readonly COMMENTTAG = 531;
	public static readonly DOLLARCHAR = 532;
	public static readonly DOUBLEQUOTE = 533;
	public static readonly DOT_FS = 534;
	public static readonly DOT = 535;
	public static readonly EQUALCHAR = 536;
	public static readonly EXECCICSTAG = 537;
	public static readonly EXECSQLTAG = 538;
	public static readonly EXECSQLIMSTAG = 539;
	public static readonly LESSTHANCHAR = 540;
	public static readonly LESSTHANOREQUAL = 541;
	public static readonly LPARENCHAR = 542;
	public static readonly MINUSCHAR = 543;
	public static readonly MORETHANCHAR = 544;
	public static readonly MORETHANOREQUAL = 545;
	public static readonly NOTEQUALCHAR = 546;
	public static readonly PLUSCHAR = 547;
	public static readonly SINGLEQUOTE = 548;
	public static readonly RPARENCHAR = 549;
	public static readonly SLASHCHAR = 550;
	public static readonly NONNUMERICLITERAL = 551;
	public static readonly LEVEL_NUMBER_66 = 552;
	public static readonly LEVEL_NUMBER_77 = 553;
	public static readonly LEVEL_NUMBER_88 = 554;
	public static readonly INTEGERLITERAL = 555;
	public static readonly NUMERICLITERAL = 556;
	public static readonly IDENTIFIER = 557;
	public static readonly NEWLINE = 558;
	public static readonly EXECCICSLINE = 559;
	public static readonly EXECSQLIMSLINE = 560;
	public static readonly EXECSQLLINE = 561;
	public static readonly COMMENTENTRYLINE = 562;
	public static readonly COMMENTLINE = 563;
	public static readonly WS = 564;
	public static readonly SEPARATOR = 565;
	public static readonly RULE_startRule = 0;
	public static readonly RULE_compilationUnit = 1;
	public static readonly RULE_programUnit = 2;
	public static readonly RULE_endProgramStatement = 3;
	public static readonly RULE_identificationDivision = 4;
	public static readonly RULE_identificationDivisionBody = 5;
	public static readonly RULE_programIdParagraph = 6;
	public static readonly RULE_authorParagraph = 7;
	public static readonly RULE_installationParagraph = 8;
	public static readonly RULE_dateWrittenParagraph = 9;
	public static readonly RULE_dateCompiledParagraph = 10;
	public static readonly RULE_securityParagraph = 11;
	public static readonly RULE_remarksParagraph = 12;
	public static readonly RULE_environmentDivision = 13;
	public static readonly RULE_environmentDivisionBody = 14;
	public static readonly RULE_configurationSection = 15;
	public static readonly RULE_configurationSectionParagraph = 16;
	public static readonly RULE_sourceComputerParagraph = 17;
	public static readonly RULE_objectComputerParagraph = 18;
	public static readonly RULE_objectComputerClause = 19;
	public static readonly RULE_memorySizeClause = 20;
	public static readonly RULE_diskSizeClause = 21;
	public static readonly RULE_collatingSequenceClause = 22;
	public static readonly RULE_collatingSequenceClauseAlphanumeric = 23;
	public static readonly RULE_collatingSequenceClauseNational = 24;
	public static readonly RULE_segmentLimitClause = 25;
	public static readonly RULE_characterSetClause = 26;
	public static readonly RULE_specialNamesParagraph = 27;
	public static readonly RULE_specialNameClause = 28;
	public static readonly RULE_alphabetClause = 29;
	public static readonly RULE_alphabetClauseFormat1 = 30;
	public static readonly RULE_alphabetLiterals = 31;
	public static readonly RULE_alphabetThrough = 32;
	public static readonly RULE_alphabetAlso = 33;
	public static readonly RULE_alphabetClauseFormat2 = 34;
	public static readonly RULE_channelClause = 35;
	public static readonly RULE_classClause = 36;
	public static readonly RULE_classClauseThrough = 37;
	public static readonly RULE_classClauseFrom = 38;
	public static readonly RULE_classClauseTo = 39;
	public static readonly RULE_currencySignClause = 40;
	public static readonly RULE_decimalPointClause = 41;
	public static readonly RULE_defaultComputationalSignClause = 42;
	public static readonly RULE_defaultDisplaySignClause = 43;
	public static readonly RULE_environmentSwitchNameClause = 44;
	public static readonly RULE_environmentSwitchNameSpecialNamesStatusPhrase = 45;
	public static readonly RULE_odtClause = 46;
	public static readonly RULE_reserveNetworkClause = 47;
	public static readonly RULE_symbolicCharactersClause = 48;
	public static readonly RULE_symbolicCharacters = 49;
	public static readonly RULE_inputOutputSection = 50;
	public static readonly RULE_inputOutputSectionParagraph = 51;
	public static readonly RULE_fileControlParagraph = 52;
	public static readonly RULE_fileControlEntry = 53;
	public static readonly RULE_selectClause = 54;
	public static readonly RULE_fileControlClause = 55;
	public static readonly RULE_assignClause = 56;
	public static readonly RULE_reserveClause = 57;
	public static readonly RULE_organizationClause = 58;
	public static readonly RULE_paddingCharacterClause = 59;
	public static readonly RULE_recordDelimiterClause = 60;
	public static readonly RULE_accessModeClause = 61;
	public static readonly RULE_recordKeyClause = 62;
	public static readonly RULE_alternateRecordKeyClause = 63;
	public static readonly RULE_passwordClause = 64;
	public static readonly RULE_fileStatusClause = 65;
	public static readonly RULE_relativeKeyClause = 66;
	public static readonly RULE_ioControlParagraph = 67;
	public static readonly RULE_ioControlClause = 68;
	public static readonly RULE_rerunClause = 69;
	public static readonly RULE_rerunEveryRecords = 70;
	public static readonly RULE_rerunEveryOf = 71;
	public static readonly RULE_rerunEveryClock = 72;
	public static readonly RULE_sameClause = 73;
	public static readonly RULE_multipleFileClause = 74;
	public static readonly RULE_multipleFilePosition = 75;
	public static readonly RULE_commitmentControlClause = 76;
	public static readonly RULE_dataDivision = 77;
	public static readonly RULE_dataDivisionSection = 78;
	public static readonly RULE_fileSection = 79;
	public static readonly RULE_fileDescriptionEntry = 80;
	public static readonly RULE_fileDescriptionEntryClause = 81;
	public static readonly RULE_externalClause = 82;
	public static readonly RULE_globalClause = 83;
	public static readonly RULE_blockContainsClause = 84;
	public static readonly RULE_blockContainsTo = 85;
	public static readonly RULE_recordContainsClause = 86;
	public static readonly RULE_recordContainsClauseFormat1 = 87;
	public static readonly RULE_recordContainsClauseFormat2 = 88;
	public static readonly RULE_recordContainsClauseFormat3 = 89;
	public static readonly RULE_recordContainsTo = 90;
	public static readonly RULE_labelRecordsClause = 91;
	public static readonly RULE_valueOfClause = 92;
	public static readonly RULE_valuePair = 93;
	public static readonly RULE_dataRecordsClause = 94;
	public static readonly RULE_linageClause = 95;
	public static readonly RULE_linageAt = 96;
	public static readonly RULE_linageFootingAt = 97;
	public static readonly RULE_linageLinesAtTop = 98;
	public static readonly RULE_linageLinesAtBottom = 99;
	public static readonly RULE_recordingModeClause = 100;
	public static readonly RULE_modeStatement = 101;
	public static readonly RULE_codeSetClause = 102;
	public static readonly RULE_reportClause = 103;
	public static readonly RULE_dataBaseSection = 104;
	public static readonly RULE_dataBaseSectionEntry = 105;
	public static readonly RULE_workingStorageSection = 106;
	public static readonly RULE_linkageSection = 107;
	public static readonly RULE_communicationSection = 108;
	public static readonly RULE_communicationDescriptionEntry = 109;
	public static readonly RULE_communicationDescriptionEntryFormat1 = 110;
	public static readonly RULE_communicationDescriptionEntryFormat2 = 111;
	public static readonly RULE_communicationDescriptionEntryFormat3 = 112;
	public static readonly RULE_destinationCountClause = 113;
	public static readonly RULE_destinationTableClause = 114;
	public static readonly RULE_endKeyClause = 115;
	public static readonly RULE_errorKeyClause = 116;
	public static readonly RULE_messageCountClause = 117;
	public static readonly RULE_messageDateClause = 118;
	public static readonly RULE_messageTimeClause = 119;
	public static readonly RULE_statusKeyClause = 120;
	public static readonly RULE_symbolicDestinationClause = 121;
	public static readonly RULE_symbolicQueueClause = 122;
	public static readonly RULE_symbolicSourceClause = 123;
	public static readonly RULE_symbolicTerminalClause = 124;
	public static readonly RULE_symbolicSubQueueClause = 125;
	public static readonly RULE_textLengthClause = 126;
	public static readonly RULE_localStorageSection = 127;
	public static readonly RULE_screenSection = 128;
	public static readonly RULE_screenDescriptionEntry = 129;
	public static readonly RULE_screenDescriptionBlankClause = 130;
	public static readonly RULE_screenDescriptionBellClause = 131;
	public static readonly RULE_screenDescriptionBlinkClause = 132;
	public static readonly RULE_screenDescriptionEraseClause = 133;
	public static readonly RULE_screenDescriptionLightClause = 134;
	public static readonly RULE_screenDescriptionGridClause = 135;
	public static readonly RULE_screenDescriptionReverseVideoClause = 136;
	public static readonly RULE_screenDescriptionUnderlineClause = 137;
	public static readonly RULE_screenDescriptionSizeClause = 138;
	public static readonly RULE_screenDescriptionLineClause = 139;
	public static readonly RULE_screenDescriptionColumnClause = 140;
	public static readonly RULE_screenDescriptionForegroundColorClause = 141;
	public static readonly RULE_screenDescriptionBackgroundColorClause = 142;
	public static readonly RULE_screenDescriptionControlClause = 143;
	public static readonly RULE_screenDescriptionValueClause = 144;
	public static readonly RULE_screenDescriptionPictureClause = 145;
	public static readonly RULE_screenDescriptionFromClause = 146;
	public static readonly RULE_screenDescriptionToClause = 147;
	public static readonly RULE_screenDescriptionUsingClause = 148;
	public static readonly RULE_screenDescriptionUsageClause = 149;
	public static readonly RULE_screenDescriptionBlankWhenZeroClause = 150;
	public static readonly RULE_screenDescriptionJustifiedClause = 151;
	public static readonly RULE_screenDescriptionSignClause = 152;
	public static readonly RULE_screenDescriptionAutoClause = 153;
	public static readonly RULE_screenDescriptionSecureClause = 154;
	public static readonly RULE_screenDescriptionRequiredClause = 155;
	public static readonly RULE_screenDescriptionPromptClause = 156;
	public static readonly RULE_screenDescriptionPromptOccursClause = 157;
	public static readonly RULE_screenDescriptionFullClause = 158;
	public static readonly RULE_screenDescriptionZeroFillClause = 159;
	public static readonly RULE_reportSection = 160;
	public static readonly RULE_reportDescription = 161;
	public static readonly RULE_reportDescriptionEntry = 162;
	public static readonly RULE_reportDescriptionGlobalClause = 163;
	public static readonly RULE_reportDescriptionPageLimitClause = 164;
	public static readonly RULE_reportDescriptionHeadingClause = 165;
	public static readonly RULE_reportDescriptionFirstDetailClause = 166;
	public static readonly RULE_reportDescriptionLastDetailClause = 167;
	public static readonly RULE_reportDescriptionFootingClause = 168;
	public static readonly RULE_reportGroupDescriptionEntry = 169;
	public static readonly RULE_reportGroupDescriptionEntryFormat1 = 170;
	public static readonly RULE_reportGroupDescriptionEntryFormat2 = 171;
	public static readonly RULE_reportGroupDescriptionEntryFormat3 = 172;
	public static readonly RULE_reportGroupBlankWhenZeroClause = 173;
	public static readonly RULE_reportGroupColumnNumberClause = 174;
	public static readonly RULE_reportGroupIndicateClause = 175;
	public static readonly RULE_reportGroupJustifiedClause = 176;
	public static readonly RULE_reportGroupLineNumberClause = 177;
	public static readonly RULE_reportGroupLineNumberNextPage = 178;
	public static readonly RULE_reportGroupLineNumberPlus = 179;
	public static readonly RULE_reportGroupNextGroupClause = 180;
	public static readonly RULE_reportGroupNextGroupPlus = 181;
	public static readonly RULE_reportGroupNextGroupNextPage = 182;
	public static readonly RULE_reportGroupPictureClause = 183;
	public static readonly RULE_reportGroupResetClause = 184;
	public static readonly RULE_reportGroupSignClause = 185;
	public static readonly RULE_reportGroupSourceClause = 186;
	public static readonly RULE_reportGroupSumClause = 187;
	public static readonly RULE_reportGroupTypeClause = 188;
	public static readonly RULE_reportGroupTypeReportHeading = 189;
	public static readonly RULE_reportGroupTypePageHeading = 190;
	public static readonly RULE_reportGroupTypeControlHeading = 191;
	public static readonly RULE_reportGroupTypeDetail = 192;
	public static readonly RULE_reportGroupTypeControlFooting = 193;
	public static readonly RULE_reportGroupUsageClause = 194;
	public static readonly RULE_reportGroupTypePageFooting = 195;
	public static readonly RULE_reportGroupTypeReportFooting = 196;
	public static readonly RULE_reportGroupValueClause = 197;
	public static readonly RULE_programLibrarySection = 198;
	public static readonly RULE_libraryDescriptionEntry = 199;
	public static readonly RULE_libraryDescriptionEntryFormat1 = 200;
	public static readonly RULE_libraryDescriptionEntryFormat2 = 201;
	public static readonly RULE_libraryAttributeClauseFormat1 = 202;
	public static readonly RULE_libraryAttributeClauseFormat2 = 203;
	public static readonly RULE_libraryAttributeFunction = 204;
	public static readonly RULE_libraryAttributeParameter = 205;
	public static readonly RULE_libraryAttributeTitle = 206;
	public static readonly RULE_libraryEntryProcedureClauseFormat1 = 207;
	public static readonly RULE_libraryEntryProcedureClauseFormat2 = 208;
	public static readonly RULE_libraryEntryProcedureForClause = 209;
	public static readonly RULE_libraryEntryProcedureGivingClause = 210;
	public static readonly RULE_libraryEntryProcedureUsingClause = 211;
	public static readonly RULE_libraryEntryProcedureUsingName = 212;
	public static readonly RULE_libraryEntryProcedureWithClause = 213;
	public static readonly RULE_libraryEntryProcedureWithName = 214;
	public static readonly RULE_libraryIsCommonClause = 215;
	public static readonly RULE_libraryIsGlobalClause = 216;
	public static readonly RULE_dataDescriptionEntry = 217;
	public static readonly RULE_dataDescriptionEntryFormat1 = 218;
	public static readonly RULE_dataDescriptionEntryFormat2 = 219;
	public static readonly RULE_dataDescriptionEntryFormat3 = 220;
	public static readonly RULE_dataDescriptionEntryExecSql = 221;
	public static readonly RULE_dataAlignedClause = 222;
	public static readonly RULE_dataBlankWhenZeroClause = 223;
	public static readonly RULE_dataCommonOwnLocalClause = 224;
	public static readonly RULE_dataExternalClause = 225;
	public static readonly RULE_dataGlobalClause = 226;
	public static readonly RULE_dataIntegerStringClause = 227;
	public static readonly RULE_dataJustifiedClause = 228;
	public static readonly RULE_dataOccursClause = 229;
	public static readonly RULE_dataOccursTo = 230;
	public static readonly RULE_dataOccursSort = 231;
	public static readonly RULE_dataPictureClause = 232;
	public static readonly RULE_pictureString = 233;
	public static readonly RULE_pictureChars = 234;
	public static readonly RULE_pictureCardinality = 235;
	public static readonly RULE_dataReceivedByClause = 236;
	public static readonly RULE_dataRecordAreaClause = 237;
	public static readonly RULE_dataRedefinesClause = 238;
	public static readonly RULE_dataRenamesClause = 239;
	public static readonly RULE_dataSignClause = 240;
	public static readonly RULE_dataSynchronizedClause = 241;
	public static readonly RULE_dataThreadLocalClause = 242;
	public static readonly RULE_dataTypeClause = 243;
	public static readonly RULE_dataTypeDefClause = 244;
	public static readonly RULE_dataUsageClause = 245;
	public static readonly RULE_dataUsingClause = 246;
	public static readonly RULE_dataValueClause = 247;
	public static readonly RULE_dataValueInterval = 248;
	public static readonly RULE_dataValueIntervalFrom = 249;
	public static readonly RULE_dataValueIntervalTo = 250;
	public static readonly RULE_dataWithLowerBoundsClause = 251;
	public static readonly RULE_procedureDivision = 252;
	public static readonly RULE_procedureDivisionUsingClause = 253;
	public static readonly RULE_procedureDivisionGivingClause = 254;
	public static readonly RULE_procedureDivisionUsingParameter = 255;
	public static readonly RULE_procedureDivisionByReferencePhrase = 256;
	public static readonly RULE_procedureDivisionByReference = 257;
	public static readonly RULE_procedureDivisionByValuePhrase = 258;
	public static readonly RULE_procedureDivisionByValue = 259;
	public static readonly RULE_procedureDeclaratives = 260;
	public static readonly RULE_procedureDeclarative = 261;
	public static readonly RULE_procedureSectionHeader = 262;
	public static readonly RULE_procedureDivisionBody = 263;
	public static readonly RULE_procedureSection = 264;
	public static readonly RULE_paragraphs = 265;
	public static readonly RULE_paragraph = 266;
	public static readonly RULE_sentence = 267;
	public static readonly RULE_statement = 268;
	public static readonly RULE_acceptStatement = 269;
	public static readonly RULE_acceptFromDateStatement = 270;
	public static readonly RULE_acceptFromMnemonicStatement = 271;
	public static readonly RULE_acceptFromEscapeKeyStatement = 272;
	public static readonly RULE_acceptMessageCountStatement = 273;
	public static readonly RULE_addStatement = 274;
	public static readonly RULE_addToStatement = 275;
	public static readonly RULE_addToGivingStatement = 276;
	public static readonly RULE_addCorrespondingStatement = 277;
	public static readonly RULE_addFrom = 278;
	public static readonly RULE_addTo = 279;
	public static readonly RULE_addToGiving = 280;
	public static readonly RULE_addGiving = 281;
	public static readonly RULE_alteredGoTo = 282;
	public static readonly RULE_alterStatement = 283;
	public static readonly RULE_alterProceedTo = 284;
	public static readonly RULE_callStatement = 285;
	public static readonly RULE_callUsingPhrase = 286;
	public static readonly RULE_callUsingParameter = 287;
	public static readonly RULE_callByReferencePhrase = 288;
	public static readonly RULE_callByReference = 289;
	public static readonly RULE_callByValuePhrase = 290;
	public static readonly RULE_callByValue = 291;
	public static readonly RULE_callByContentPhrase = 292;
	public static readonly RULE_callByContent = 293;
	public static readonly RULE_callGivingPhrase = 294;
	public static readonly RULE_cancelStatement = 295;
	public static readonly RULE_cancelCall = 296;
	public static readonly RULE_closeStatement = 297;
	public static readonly RULE_closeFile = 298;
	public static readonly RULE_closeReelUnitStatement = 299;
	public static readonly RULE_closeRelativeStatement = 300;
	public static readonly RULE_closePortFileIOStatement = 301;
	public static readonly RULE_closePortFileIOUsing = 302;
	public static readonly RULE_closePortFileIOUsingCloseDisposition = 303;
	public static readonly RULE_closePortFileIOUsingAssociatedData = 304;
	public static readonly RULE_closePortFileIOUsingAssociatedDataLength = 305;
	public static readonly RULE_computeStatement = 306;
	public static readonly RULE_computeStore = 307;
	public static readonly RULE_continueStatement = 308;
	public static readonly RULE_deleteStatement = 309;
	public static readonly RULE_disableStatement = 310;
	public static readonly RULE_displayStatement = 311;
	public static readonly RULE_displayOperand = 312;
	public static readonly RULE_displayAt = 313;
	public static readonly RULE_displayUpon = 314;
	public static readonly RULE_displayWith = 315;
	public static readonly RULE_divideStatement = 316;
	public static readonly RULE_divideIntoStatement = 317;
	public static readonly RULE_divideIntoGivingStatement = 318;
	public static readonly RULE_divideByGivingStatement = 319;
	public static readonly RULE_divideGivingPhrase = 320;
	public static readonly RULE_divideInto = 321;
	public static readonly RULE_divideGiving = 322;
	public static readonly RULE_divideRemainder = 323;
	public static readonly RULE_enableStatement = 324;
	public static readonly RULE_entryStatement = 325;
	public static readonly RULE_evaluateStatement = 326;
	public static readonly RULE_evaluateSelect = 327;
	public static readonly RULE_evaluateAlsoSelect = 328;
	public static readonly RULE_evaluateWhenPhrase = 329;
	public static readonly RULE_evaluateWhen = 330;
	public static readonly RULE_evaluateCondition = 331;
	public static readonly RULE_evaluateThrough = 332;
	public static readonly RULE_evaluateAlsoCondition = 333;
	public static readonly RULE_evaluateWhenOther = 334;
	public static readonly RULE_evaluateValue = 335;
	public static readonly RULE_execCicsStatement = 336;
	public static readonly RULE_execSqlStatement = 337;
	public static readonly RULE_execSqlImsStatement = 338;
	public static readonly RULE_exhibitStatement = 339;
	public static readonly RULE_exhibitOperand = 340;
	public static readonly RULE_exitStatement = 341;
	public static readonly RULE_generateStatement = 342;
	public static readonly RULE_gobackStatement = 343;
	public static readonly RULE_goToStatement = 344;
	public static readonly RULE_goToStatementSimple = 345;
	public static readonly RULE_goToDependingOnStatement = 346;
	public static readonly RULE_ifStatement = 347;
	public static readonly RULE_ifThen = 348;
	public static readonly RULE_ifElse = 349;
	public static readonly RULE_initializeStatement = 350;
	public static readonly RULE_initializeReplacingPhrase = 351;
	public static readonly RULE_initializeReplacingBy = 352;
	public static readonly RULE_initiateStatement = 353;
	public static readonly RULE_inspectStatement = 354;
	public static readonly RULE_inspectTallyingPhrase = 355;
	public static readonly RULE_inspectReplacingPhrase = 356;
	public static readonly RULE_inspectTallyingReplacingPhrase = 357;
	public static readonly RULE_inspectConvertingPhrase = 358;
	public static readonly RULE_inspectFor = 359;
	public static readonly RULE_inspectCharacters = 360;
	public static readonly RULE_inspectReplacingCharacters = 361;
	public static readonly RULE_inspectAllLeadings = 362;
	public static readonly RULE_inspectReplacingAllLeadings = 363;
	public static readonly RULE_inspectAllLeading = 364;
	public static readonly RULE_inspectReplacingAllLeading = 365;
	public static readonly RULE_inspectBy = 366;
	public static readonly RULE_inspectTo = 367;
	public static readonly RULE_inspectBeforeAfter = 368;
	public static readonly RULE_mergeStatement = 369;
	public static readonly RULE_mergeOnKeyClause = 370;
	public static readonly RULE_mergeCollatingSequencePhrase = 371;
	public static readonly RULE_mergeCollatingAlphanumeric = 372;
	public static readonly RULE_mergeCollatingNational = 373;
	public static readonly RULE_mergeUsing = 374;
	public static readonly RULE_mergeOutputProcedurePhrase = 375;
	public static readonly RULE_mergeOutputThrough = 376;
	public static readonly RULE_mergeGivingPhrase = 377;
	public static readonly RULE_mergeGiving = 378;
	public static readonly RULE_moveStatement = 379;
	public static readonly RULE_moveToStatement = 380;
	public static readonly RULE_moveToSendingArea = 381;
	public static readonly RULE_moveCorrespondingToStatement = 382;
	public static readonly RULE_moveCorrespondingToSendingArea = 383;
	public static readonly RULE_multiplyStatement = 384;
	public static readonly RULE_multiplyRegular = 385;
	public static readonly RULE_multiplyRegularOperand = 386;
	public static readonly RULE_multiplyGiving = 387;
	public static readonly RULE_multiplyGivingOperand = 388;
	public static readonly RULE_multiplyGivingResult = 389;
	public static readonly RULE_openStatement = 390;
	public static readonly RULE_openInputStatement = 391;
	public static readonly RULE_openInput = 392;
	public static readonly RULE_openOutputStatement = 393;
	public static readonly RULE_openOutput = 394;
	public static readonly RULE_openIOStatement = 395;
	public static readonly RULE_openExtendStatement = 396;
	public static readonly RULE_performStatement = 397;
	public static readonly RULE_performInlineStatement = 398;
	public static readonly RULE_performProcedureStatement = 399;
	public static readonly RULE_performType = 400;
	public static readonly RULE_performTimes = 401;
	public static readonly RULE_performUntil = 402;
	public static readonly RULE_performVarying = 403;
	public static readonly RULE_performVaryingClause = 404;
	public static readonly RULE_performVaryingPhrase = 405;
	public static readonly RULE_performAfter = 406;
	public static readonly RULE_performFrom = 407;
	public static readonly RULE_performBy = 408;
	public static readonly RULE_performTestClause = 409;
	public static readonly RULE_purgeStatement = 410;
	public static readonly RULE_readStatement = 411;
	public static readonly RULE_readInto = 412;
	public static readonly RULE_readWith = 413;
	public static readonly RULE_readKey = 414;
	public static readonly RULE_receiveStatement = 415;
	public static readonly RULE_receiveFromStatement = 416;
	public static readonly RULE_receiveFrom = 417;
	public static readonly RULE_receiveIntoStatement = 418;
	public static readonly RULE_receiveNoData = 419;
	public static readonly RULE_receiveWithData = 420;
	public static readonly RULE_receiveBefore = 421;
	public static readonly RULE_receiveWith = 422;
	public static readonly RULE_receiveThread = 423;
	public static readonly RULE_receiveSize = 424;
	public static readonly RULE_receiveStatus = 425;
	public static readonly RULE_releaseStatement = 426;
	public static readonly RULE_returnStatement = 427;
	public static readonly RULE_returnInto = 428;
	public static readonly RULE_rewriteStatement = 429;
	public static readonly RULE_rewriteFrom = 430;
	public static readonly RULE_searchStatement = 431;
	public static readonly RULE_searchVarying = 432;
	public static readonly RULE_searchWhen = 433;
	public static readonly RULE_sendStatement = 434;
	public static readonly RULE_sendStatementSync = 435;
	public static readonly RULE_sendStatementAsync = 436;
	public static readonly RULE_sendFromPhrase = 437;
	public static readonly RULE_sendWithPhrase = 438;
	public static readonly RULE_sendReplacingPhrase = 439;
	public static readonly RULE_sendAdvancingPhrase = 440;
	public static readonly RULE_sendAdvancingPage = 441;
	public static readonly RULE_sendAdvancingLines = 442;
	public static readonly RULE_sendAdvancingMnemonic = 443;
	public static readonly RULE_setStatement = 444;
	public static readonly RULE_setToStatement = 445;
	public static readonly RULE_setUpDownByStatement = 446;
	public static readonly RULE_setTo = 447;
	public static readonly RULE_setToValue = 448;
	public static readonly RULE_setByValue = 449;
	public static readonly RULE_sortStatement = 450;
	public static readonly RULE_sortOnKeyClause = 451;
	public static readonly RULE_sortDuplicatesPhrase = 452;
	public static readonly RULE_sortCollatingSequencePhrase = 453;
	public static readonly RULE_sortCollatingAlphanumeric = 454;
	public static readonly RULE_sortCollatingNational = 455;
	public static readonly RULE_sortInputProcedurePhrase = 456;
	public static readonly RULE_sortInputThrough = 457;
	public static readonly RULE_sortUsing = 458;
	public static readonly RULE_sortOutputProcedurePhrase = 459;
	public static readonly RULE_sortOutputThrough = 460;
	public static readonly RULE_sortGivingPhrase = 461;
	public static readonly RULE_sortGiving = 462;
	public static readonly RULE_startStatement = 463;
	public static readonly RULE_startKey = 464;
	public static readonly RULE_stopStatement = 465;
	public static readonly RULE_stringStatement = 466;
	public static readonly RULE_stringSendingPhrase = 467;
	public static readonly RULE_stringSending = 468;
	public static readonly RULE_stringDelimitedByPhrase = 469;
	public static readonly RULE_stringForPhrase = 470;
	public static readonly RULE_stringIntoPhrase = 471;
	public static readonly RULE_stringWithPointerPhrase = 472;
	public static readonly RULE_subtractStatement = 473;
	public static readonly RULE_subtractFromStatement = 474;
	public static readonly RULE_subtractFromGivingStatement = 475;
	public static readonly RULE_subtractCorrespondingStatement = 476;
	public static readonly RULE_subtractSubtrahend = 477;
	public static readonly RULE_subtractMinuend = 478;
	public static readonly RULE_subtractMinuendGiving = 479;
	public static readonly RULE_subtractGiving = 480;
	public static readonly RULE_subtractMinuendCorresponding = 481;
	public static readonly RULE_terminateStatement = 482;
	public static readonly RULE_unstringStatement = 483;
	public static readonly RULE_unstringSendingPhrase = 484;
	public static readonly RULE_unstringDelimitedByPhrase = 485;
	public static readonly RULE_unstringOrAllPhrase = 486;
	public static readonly RULE_unstringIntoPhrase = 487;
	public static readonly RULE_unstringInto = 488;
	public static readonly RULE_unstringDelimiterIn = 489;
	public static readonly RULE_unstringCountIn = 490;
	public static readonly RULE_unstringWithPointerPhrase = 491;
	public static readonly RULE_unstringTallyingPhrase = 492;
	public static readonly RULE_useStatement = 493;
	public static readonly RULE_useAfterClause = 494;
	public static readonly RULE_useAfterOn = 495;
	public static readonly RULE_useDebugClause = 496;
	public static readonly RULE_useDebugOn = 497;
	public static readonly RULE_writeStatement = 498;
	public static readonly RULE_writeFromPhrase = 499;
	public static readonly RULE_writeAdvancingPhrase = 500;
	public static readonly RULE_writeAdvancingPage = 501;
	public static readonly RULE_writeAdvancingLines = 502;
	public static readonly RULE_writeAdvancingMnemonic = 503;
	public static readonly RULE_writeAtEndOfPagePhrase = 504;
	public static readonly RULE_writeNotAtEndOfPagePhrase = 505;
	public static readonly RULE_atEndPhrase = 506;
	public static readonly RULE_notAtEndPhrase = 507;
	public static readonly RULE_invalidKeyPhrase = 508;
	public static readonly RULE_notInvalidKeyPhrase = 509;
	public static readonly RULE_onOverflowPhrase = 510;
	public static readonly RULE_notOnOverflowPhrase = 511;
	public static readonly RULE_onSizeErrorPhrase = 512;
	public static readonly RULE_notOnSizeErrorPhrase = 513;
	public static readonly RULE_onExceptionClause = 514;
	public static readonly RULE_notOnExceptionClause = 515;
	public static readonly RULE_arithmeticExpression = 516;
	public static readonly RULE_plusMinus = 517;
	public static readonly RULE_multDivs = 518;
	public static readonly RULE_multDiv = 519;
	public static readonly RULE_powers = 520;
	public static readonly RULE_power = 521;
	public static readonly RULE_basis = 522;
	public static readonly RULE_condition = 523;
	public static readonly RULE_andOrCondition = 524;
	public static readonly RULE_combinableCondition = 525;
	public static readonly RULE_simpleCondition = 526;
	public static readonly RULE_classCondition = 527;
	public static readonly RULE_conditionNameReference = 528;
	public static readonly RULE_conditionNameSubscriptReference = 529;
	public static readonly RULE_relationCondition = 530;
	public static readonly RULE_relationSignCondition = 531;
	public static readonly RULE_relationArithmeticComparison = 532;
	public static readonly RULE_relationCombinedComparison = 533;
	public static readonly RULE_relationCombinedCondition = 534;
	public static readonly RULE_relationalOperator = 535;
	public static readonly RULE_abbreviation = 536;
	public static readonly RULE_identifier = 537;
	public static readonly RULE_tableCall = 538;
	public static readonly RULE_functionCall = 539;
	public static readonly RULE_referenceModifier = 540;
	public static readonly RULE_characterPosition = 541;
	public static readonly RULE_length = 542;
	public static readonly RULE_subscript = 543;
	public static readonly RULE_argument = 544;
	public static readonly RULE_qualifiedDataName = 545;
	public static readonly RULE_qualifiedDataNameFormat1 = 546;
	public static readonly RULE_qualifiedDataNameFormat2 = 547;
	public static readonly RULE_qualifiedDataNameFormat3 = 548;
	public static readonly RULE_qualifiedDataNameFormat4 = 549;
	public static readonly RULE_qualifiedInData = 550;
	public static readonly RULE_inData = 551;
	public static readonly RULE_inFile = 552;
	public static readonly RULE_inMnemonic = 553;
	public static readonly RULE_inSection = 554;
	public static readonly RULE_inLibrary = 555;
	public static readonly RULE_inTable = 556;
	public static readonly RULE_alphabetName = 557;
	public static readonly RULE_assignmentName = 558;
	public static readonly RULE_basisName = 559;
	public static readonly RULE_cdName = 560;
	public static readonly RULE_className = 561;
	public static readonly RULE_computerName = 562;
	public static readonly RULE_conditionName = 563;
	public static readonly RULE_dataName = 564;
	public static readonly RULE_dataDescName = 565;
	public static readonly RULE_environmentName = 566;
	public static readonly RULE_fileName = 567;
	public static readonly RULE_functionName = 568;
	public static readonly RULE_indexName = 569;
	public static readonly RULE_languageName = 570;
	public static readonly RULE_libraryName = 571;
	public static readonly RULE_localName = 572;
	public static readonly RULE_mnemonicName = 573;
	public static readonly RULE_paragraphName = 574;
	public static readonly RULE_procedureName = 575;
	public static readonly RULE_programName = 576;
	public static readonly RULE_recordName = 577;
	public static readonly RULE_reportName = 578;
	public static readonly RULE_routineName = 579;
	public static readonly RULE_screenName = 580;
	public static readonly RULE_sectionName = 581;
	public static readonly RULE_systemName = 582;
	public static readonly RULE_symbolicCharacter = 583;
	public static readonly RULE_textName = 584;
	public static readonly RULE_cobolWord = 585;
	public static readonly RULE_literal = 586;
	public static readonly RULE_booleanLiteral = 587;
	public static readonly RULE_numericLiteral = 588;
	public static readonly RULE_integerLiteral = 589;
	public static readonly RULE_cicsDfhRespLiteral = 590;
	public static readonly RULE_cicsDfhValueLiteral = 591;
	public static readonly RULE_figurativeConstant = 592;
	public static readonly RULE_specialRegister = 593;
	public static readonly RULE_commentEntry = 594;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"startRule", "compilationUnit", "programUnit", "endProgramStatement", 
		"identificationDivision", "identificationDivisionBody", "programIdParagraph", 
		"authorParagraph", "installationParagraph", "dateWrittenParagraph", "dateCompiledParagraph", 
		"securityParagraph", "remarksParagraph", "environmentDivision", "environmentDivisionBody", 
		"configurationSection", "configurationSectionParagraph", "sourceComputerParagraph", 
		"objectComputerParagraph", "objectComputerClause", "memorySizeClause", 
		"diskSizeClause", "collatingSequenceClause", "collatingSequenceClauseAlphanumeric", 
		"collatingSequenceClauseNational", "segmentLimitClause", "characterSetClause", 
		"specialNamesParagraph", "specialNameClause", "alphabetClause", "alphabetClauseFormat1", 
		"alphabetLiterals", "alphabetThrough", "alphabetAlso", "alphabetClauseFormat2", 
		"channelClause", "classClause", "classClauseThrough", "classClauseFrom", 
		"classClauseTo", "currencySignClause", "decimalPointClause", "defaultComputationalSignClause", 
		"defaultDisplaySignClause", "environmentSwitchNameClause", "environmentSwitchNameSpecialNamesStatusPhrase", 
		"odtClause", "reserveNetworkClause", "symbolicCharactersClause", "symbolicCharacters", 
		"inputOutputSection", "inputOutputSectionParagraph", "fileControlParagraph", 
		"fileControlEntry", "selectClause", "fileControlClause", "assignClause", 
		"reserveClause", "organizationClause", "paddingCharacterClause", "recordDelimiterClause", 
		"accessModeClause", "recordKeyClause", "alternateRecordKeyClause", "passwordClause", 
		"fileStatusClause", "relativeKeyClause", "ioControlParagraph", "ioControlClause", 
		"rerunClause", "rerunEveryRecords", "rerunEveryOf", "rerunEveryClock", 
		"sameClause", "multipleFileClause", "multipleFilePosition", "commitmentControlClause", 
		"dataDivision", "dataDivisionSection", "fileSection", "fileDescriptionEntry", 
		"fileDescriptionEntryClause", "externalClause", "globalClause", "blockContainsClause", 
		"blockContainsTo", "recordContainsClause", "recordContainsClauseFormat1", 
		"recordContainsClauseFormat2", "recordContainsClauseFormat3", "recordContainsTo", 
		"labelRecordsClause", "valueOfClause", "valuePair", "dataRecordsClause", 
		"linageClause", "linageAt", "linageFootingAt", "linageLinesAtTop", "linageLinesAtBottom", 
		"recordingModeClause", "modeStatement", "codeSetClause", "reportClause", 
		"dataBaseSection", "dataBaseSectionEntry", "workingStorageSection", "linkageSection", 
		"communicationSection", "communicationDescriptionEntry", "communicationDescriptionEntryFormat1", 
		"communicationDescriptionEntryFormat2", "communicationDescriptionEntryFormat3", 
		"destinationCountClause", "destinationTableClause", "endKeyClause", "errorKeyClause", 
		"messageCountClause", "messageDateClause", "messageTimeClause", "statusKeyClause", 
		"symbolicDestinationClause", "symbolicQueueClause", "symbolicSourceClause", 
		"symbolicTerminalClause", "symbolicSubQueueClause", "textLengthClause", 
		"localStorageSection", "screenSection", "screenDescriptionEntry", "screenDescriptionBlankClause", 
		"screenDescriptionBellClause", "screenDescriptionBlinkClause", "screenDescriptionEraseClause", 
		"screenDescriptionLightClause", "screenDescriptionGridClause", "screenDescriptionReverseVideoClause", 
		"screenDescriptionUnderlineClause", "screenDescriptionSizeClause", "screenDescriptionLineClause", 
		"screenDescriptionColumnClause", "screenDescriptionForegroundColorClause", 
		"screenDescriptionBackgroundColorClause", "screenDescriptionControlClause", 
		"screenDescriptionValueClause", "screenDescriptionPictureClause", "screenDescriptionFromClause", 
		"screenDescriptionToClause", "screenDescriptionUsingClause", "screenDescriptionUsageClause", 
		"screenDescriptionBlankWhenZeroClause", "screenDescriptionJustifiedClause", 
		"screenDescriptionSignClause", "screenDescriptionAutoClause", "screenDescriptionSecureClause", 
		"screenDescriptionRequiredClause", "screenDescriptionPromptClause", "screenDescriptionPromptOccursClause", 
		"screenDescriptionFullClause", "screenDescriptionZeroFillClause", "reportSection", 
		"reportDescription", "reportDescriptionEntry", "reportDescriptionGlobalClause", 
		"reportDescriptionPageLimitClause", "reportDescriptionHeadingClause", 
		"reportDescriptionFirstDetailClause", "reportDescriptionLastDetailClause", 
		"reportDescriptionFootingClause", "reportGroupDescriptionEntry", "reportGroupDescriptionEntryFormat1", 
		"reportGroupDescriptionEntryFormat2", "reportGroupDescriptionEntryFormat3", 
		"reportGroupBlankWhenZeroClause", "reportGroupColumnNumberClause", "reportGroupIndicateClause", 
		"reportGroupJustifiedClause", "reportGroupLineNumberClause", "reportGroupLineNumberNextPage", 
		"reportGroupLineNumberPlus", "reportGroupNextGroupClause", "reportGroupNextGroupPlus", 
		"reportGroupNextGroupNextPage", "reportGroupPictureClause", "reportGroupResetClause", 
		"reportGroupSignClause", "reportGroupSourceClause", "reportGroupSumClause", 
		"reportGroupTypeClause", "reportGroupTypeReportHeading", "reportGroupTypePageHeading", 
		"reportGroupTypeControlHeading", "reportGroupTypeDetail", "reportGroupTypeControlFooting", 
		"reportGroupUsageClause", "reportGroupTypePageFooting", "reportGroupTypeReportFooting", 
		"reportGroupValueClause", "programLibrarySection", "libraryDescriptionEntry", 
		"libraryDescriptionEntryFormat1", "libraryDescriptionEntryFormat2", "libraryAttributeClauseFormat1", 
		"libraryAttributeClauseFormat2", "libraryAttributeFunction", "libraryAttributeParameter", 
		"libraryAttributeTitle", "libraryEntryProcedureClauseFormat1", "libraryEntryProcedureClauseFormat2", 
		"libraryEntryProcedureForClause", "libraryEntryProcedureGivingClause", 
		"libraryEntryProcedureUsingClause", "libraryEntryProcedureUsingName", 
		"libraryEntryProcedureWithClause", "libraryEntryProcedureWithName", "libraryIsCommonClause", 
		"libraryIsGlobalClause", "dataDescriptionEntry", "dataDescriptionEntryFormat1", 
		"dataDescriptionEntryFormat2", "dataDescriptionEntryFormat3", "dataDescriptionEntryExecSql", 
		"dataAlignedClause", "dataBlankWhenZeroClause", "dataCommonOwnLocalClause", 
		"dataExternalClause", "dataGlobalClause", "dataIntegerStringClause", "dataJustifiedClause", 
		"dataOccursClause", "dataOccursTo", "dataOccursSort", "dataPictureClause", 
		"pictureString", "pictureChars", "pictureCardinality", "dataReceivedByClause", 
		"dataRecordAreaClause", "dataRedefinesClause", "dataRenamesClause", "dataSignClause", 
		"dataSynchronizedClause", "dataThreadLocalClause", "dataTypeClause", "dataTypeDefClause", 
		"dataUsageClause", "dataUsingClause", "dataValueClause", "dataValueInterval", 
		"dataValueIntervalFrom", "dataValueIntervalTo", "dataWithLowerBoundsClause", 
		"procedureDivision", "procedureDivisionUsingClause", "procedureDivisionGivingClause", 
		"procedureDivisionUsingParameter", "procedureDivisionByReferencePhrase", 
		"procedureDivisionByReference", "procedureDivisionByValuePhrase", "procedureDivisionByValue", 
		"procedureDeclaratives", "procedureDeclarative", "procedureSectionHeader", 
		"procedureDivisionBody", "procedureSection", "paragraphs", "paragraph", 
		"sentence", "statement", "acceptStatement", "acceptFromDateStatement", 
		"acceptFromMnemonicStatement", "acceptFromEscapeKeyStatement", "acceptMessageCountStatement", 
		"addStatement", "addToStatement", "addToGivingStatement", "addCorrespondingStatement", 
		"addFrom", "addTo", "addToGiving", "addGiving", "alteredGoTo", "alterStatement", 
		"alterProceedTo", "callStatement", "callUsingPhrase", "callUsingParameter", 
		"callByReferencePhrase", "callByReference", "callByValuePhrase", "callByValue", 
		"callByContentPhrase", "callByContent", "callGivingPhrase", "cancelStatement", 
		"cancelCall", "closeStatement", "closeFile", "closeReelUnitStatement", 
		"closeRelativeStatement", "closePortFileIOStatement", "closePortFileIOUsing", 
		"closePortFileIOUsingCloseDisposition", "closePortFileIOUsingAssociatedData", 
		"closePortFileIOUsingAssociatedDataLength", "computeStatement", "computeStore", 
		"continueStatement", "deleteStatement", "disableStatement", "displayStatement", 
		"displayOperand", "displayAt", "displayUpon", "displayWith", "divideStatement", 
		"divideIntoStatement", "divideIntoGivingStatement", "divideByGivingStatement", 
		"divideGivingPhrase", "divideInto", "divideGiving", "divideRemainder", 
		"enableStatement", "entryStatement", "evaluateStatement", "evaluateSelect", 
		"evaluateAlsoSelect", "evaluateWhenPhrase", "evaluateWhen", "evaluateCondition", 
		"evaluateThrough", "evaluateAlsoCondition", "evaluateWhenOther", "evaluateValue", 
		"execCicsStatement", "execSqlStatement", "execSqlImsStatement", "exhibitStatement", 
		"exhibitOperand", "exitStatement", "generateStatement", "gobackStatement", 
		"goToStatement", "goToStatementSimple", "goToDependingOnStatement", "ifStatement", 
		"ifThen", "ifElse", "initializeStatement", "initializeReplacingPhrase", 
		"initializeReplacingBy", "initiateStatement", "inspectStatement", "inspectTallyingPhrase", 
		"inspectReplacingPhrase", "inspectTallyingReplacingPhrase", "inspectConvertingPhrase", 
		"inspectFor", "inspectCharacters", "inspectReplacingCharacters", "inspectAllLeadings", 
		"inspectReplacingAllLeadings", "inspectAllLeading", "inspectReplacingAllLeading", 
		"inspectBy", "inspectTo", "inspectBeforeAfter", "mergeStatement", "mergeOnKeyClause", 
		"mergeCollatingSequencePhrase", "mergeCollatingAlphanumeric", "mergeCollatingNational", 
		"mergeUsing", "mergeOutputProcedurePhrase", "mergeOutputThrough", "mergeGivingPhrase", 
		"mergeGiving", "moveStatement", "moveToStatement", "moveToSendingArea", 
		"moveCorrespondingToStatement", "moveCorrespondingToSendingArea", "multiplyStatement", 
		"multiplyRegular", "multiplyRegularOperand", "multiplyGiving", "multiplyGivingOperand", 
		"multiplyGivingResult", "openStatement", "openInputStatement", "openInput", 
		"openOutputStatement", "openOutput", "openIOStatement", "openExtendStatement", 
		"performStatement", "performInlineStatement", "performProcedureStatement", 
		"performType", "performTimes", "performUntil", "performVarying", "performVaryingClause", 
		"performVaryingPhrase", "performAfter", "performFrom", "performBy", "performTestClause", 
		"purgeStatement", "readStatement", "readInto", "readWith", "readKey", 
		"receiveStatement", "receiveFromStatement", "receiveFrom", "receiveIntoStatement", 
		"receiveNoData", "receiveWithData", "receiveBefore", "receiveWith", "receiveThread", 
		"receiveSize", "receiveStatus", "releaseStatement", "returnStatement", 
		"returnInto", "rewriteStatement", "rewriteFrom", "searchStatement", "searchVarying", 
		"searchWhen", "sendStatement", "sendStatementSync", "sendStatementAsync", 
		"sendFromPhrase", "sendWithPhrase", "sendReplacingPhrase", "sendAdvancingPhrase", 
		"sendAdvancingPage", "sendAdvancingLines", "sendAdvancingMnemonic", "setStatement", 
		"setToStatement", "setUpDownByStatement", "setTo", "setToValue", "setByValue", 
		"sortStatement", "sortOnKeyClause", "sortDuplicatesPhrase", "sortCollatingSequencePhrase", 
		"sortCollatingAlphanumeric", "sortCollatingNational", "sortInputProcedurePhrase", 
		"sortInputThrough", "sortUsing", "sortOutputProcedurePhrase", "sortOutputThrough", 
		"sortGivingPhrase", "sortGiving", "startStatement", "startKey", "stopStatement", 
		"stringStatement", "stringSendingPhrase", "stringSending", "stringDelimitedByPhrase", 
		"stringForPhrase", "stringIntoPhrase", "stringWithPointerPhrase", "subtractStatement", 
		"subtractFromStatement", "subtractFromGivingStatement", "subtractCorrespondingStatement", 
		"subtractSubtrahend", "subtractMinuend", "subtractMinuendGiving", "subtractGiving", 
		"subtractMinuendCorresponding", "terminateStatement", "unstringStatement", 
		"unstringSendingPhrase", "unstringDelimitedByPhrase", "unstringOrAllPhrase", 
		"unstringIntoPhrase", "unstringInto", "unstringDelimiterIn", "unstringCountIn", 
		"unstringWithPointerPhrase", "unstringTallyingPhrase", "useStatement", 
		"useAfterClause", "useAfterOn", "useDebugClause", "useDebugOn", "writeStatement", 
		"writeFromPhrase", "writeAdvancingPhrase", "writeAdvancingPage", "writeAdvancingLines", 
		"writeAdvancingMnemonic", "writeAtEndOfPagePhrase", "writeNotAtEndOfPagePhrase", 
		"atEndPhrase", "notAtEndPhrase", "invalidKeyPhrase", "notInvalidKeyPhrase", 
		"onOverflowPhrase", "notOnOverflowPhrase", "onSizeErrorPhrase", "notOnSizeErrorPhrase", 
		"onExceptionClause", "notOnExceptionClause", "arithmeticExpression", "plusMinus", 
		"multDivs", "multDiv", "powers", "power", "basis", "condition", "andOrCondition", 
		"combinableCondition", "simpleCondition", "classCondition", "conditionNameReference", 
		"conditionNameSubscriptReference", "relationCondition", "relationSignCondition", 
		"relationArithmeticComparison", "relationCombinedComparison", "relationCombinedCondition", 
		"relationalOperator", "abbreviation", "identifier", "tableCall", "functionCall", 
		"referenceModifier", "characterPosition", "length", "subscript", "argument", 
		"qualifiedDataName", "qualifiedDataNameFormat1", "qualifiedDataNameFormat2", 
		"qualifiedDataNameFormat3", "qualifiedDataNameFormat4", "qualifiedInData", 
		"inData", "inFile", "inMnemonic", "inSection", "inLibrary", "inTable", 
		"alphabetName", "assignmentName", "basisName", "cdName", "className", 
		"computerName", "conditionName", "dataName", "dataDescName", "environmentName", 
		"fileName", "functionName", "indexName", "languageName", "libraryName", 
		"localName", "mnemonicName", "paragraphName", "procedureName", "programName", 
		"recordName", "reportName", "routineName", "screenName", "sectionName", 
		"systemName", "symbolicCharacter", "textName", "cobolWord", "literal", 
		"booleanLiteral", "numericLiteral", "integerLiteral", "cicsDfhRespLiteral", 
		"cicsDfhValueLiteral", "figurativeConstant", "specialRegister", "commentEntry",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"'&'", "'*'", "'**'", "':'", "','", "'*>CE'", "'*>'", "'$'", "'\"'", undefined, 
		"'.'", "'='", "'*>EXECCICS'", "'*>EXECSQL'", "'*>EXECSQLIMS'", "'<'", 
		"'<='", "'('", "'-'", "'>'", "'>='", "'<>'", "'+'", "'''", "')'", "'/'", 
		undefined, "'66'", "'77'", "'88'", undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "', '",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ABORT", "ACCEPT", "ACCESS", "ADD", "ADDRESS", "ADVANCING", 
		"AFTER", "ALIGNED", "ALL", "ALPHABET", "ALPHABETIC", "ALPHABETIC_LOWER", 
		"ALPHABETIC_UPPER", "ALPHANUMERIC", "ALPHANUMERIC_EDITED", "ALSO", "ALTER", 
		"ALTERNATE", "AND", "ANY", "ARE", "AREA", "AREAS", "AS", "ASCENDING", 
		"ASCII", "ASSIGN", "ASSOCIATED_DATA", "ASSOCIATED_DATA_LENGTH", "AT", 
		"ATTRIBUTE", "AUTHOR", "AUTO", "AUTO_SKIP", "BACKGROUND_COLOR", "BACKGROUND_COLOUR", 
		"BASIS", "BEEP", "BEFORE", "BEGINNING", "BELL", "BINARY", "BIT", "BLANK", 
		"BLINK", "BLOCK", "BOUNDS", "BOTTOM", "BY", "BYFUNCTION", "BYTITLE", "CALL", 
		"CANCEL", "CAPABLE", "CCSVERSION", "CD", "CF", "CH", "CHAINING", "CHANGED", 
		"CHANNEL", "CHARACTER", "CHARACTERS", "CLASS", "CLASS_ID", "CLOCK_UNITS", 
		"CLOSE", "CLOSE_DISPOSITION", "COBOL", "CODE", "CODE_SET", "COLLATING", 
		"COL", "COLUMN", "COM_REG", "COMMA", "COMMITMENT", "COMMON", "COMMUNICATION", 
		"COMP", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMPUTATIONAL", 
		"COMPUTATIONAL_1", "COMPUTATIONAL_2", "COMPUTATIONAL_3", "COMPUTATIONAL_4", 
		"COMPUTATIONAL_5", "COMPUTE", "CONFIGURATION", "CONTAINS", "CONTENT", 
		"CONTINUE", "CONTROL", "CONTROL_POINT", "CONTROLS", "CONVENTION", "CONVERTING", 
		"COPY", "CORR", "CORRESPONDING", "COUNT", "CRUNCH", "CURRENCY", "CURSOR", 
		"DATA", "DATA_BASE", "DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", 
		"DBCS", "DE", "DEBUG_CONTENTS", "DEBUG_ITEM", "DEBUG_LINE", "DEBUG_NAME", 
		"DEBUG_SUB_1", "DEBUG_SUB_2", "DEBUG_SUB_3", "DEBUGGING", "DECIMAL_POINT", 
		"DECLARATIVES", "DEFAULT", "DEFAULT_DISPLAY", "DEFINITION", "DELETE", 
		"DELIMITED", "DELIMITER", "DEPENDING", "DESCENDING", "DESTINATION", "DETAIL", 
		"DFHRESP", "DFHVALUE", "DISABLE", "DISK", "DISPLAY", "DISPLAY_1", "DIVIDE", 
		"DIVISION", "DONTCARE", "DOUBLE", "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", 
		"EGCS", "EGI", "ELSE", "EMI", "EMPTY_CHECK", "ENABLE", "END", "END_ACCEPT", 
		"END_ADD", "END_CALL", "END_COMPUTE", "END_DELETE", "END_DIVIDE", "END_EVALUATE", 
		"END_IF", "END_MULTIPLY", "END_OF_PAGE", "END_PERFORM", "END_READ", "END_RECEIVE", 
		"END_RETURN", "END_REWRITE", "END_SEARCH", "END_START", "END_STRING", 
		"END_SUBTRACT", "END_UNSTRING", "END_WRITE", "ENDING", "ENTER", "ENTRY", 
		"ENTRY_PROCEDURE", "ENVIRONMENT", "EOP", "EQUAL", "ERASE", "ERROR", "EOL", 
		"EOS", "ESCAPE", "ESI", "EVALUATE", "EVENT", "EVERY", "EXCEPTION", "EXCLUSIVE", 
		"EXHIBIT", "EXIT", "EXPORT", "EXTEND", "EXTENDED", "EXTERNAL", "FALSE", 
		"FD", "FILE", "FILE_CONTROL", "FILLER", "FINAL", "FIRST", "FOOTING", "FOR", 
		"FOREGROUND_COLOR", "FOREGROUND_COLOUR", "FROM", "FULL", "FUNCTION", "FUNCTIONNAME", 
		"FUNCTION_POINTER", "GENERATE", "GOBACK", "GIVING", "GLOBAL", "GO", "GREATER", 
		"GRID", "GROUP", "HEADING", "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES", 
		"I_O", "I_O_CONTROL", "ID", "IDENTIFICATION", "IF", "IMPLICIT", "IMPORT", 
		"IN", "INDEX", "INDEXED", "INDICATE", "INITIAL", "INITIALIZE", "INITIATE", 
		"INPUT", "INPUT_OUTPUT", "INSPECT", "INSTALLATION", "INTEGER", "INTO", 
		"INVALID", "INVOKE", "IS", "JUST", "JUSTIFIED", "KANJI", "KEPT", "KEY", 
		"KEYBOARD", "LABEL", "LANGUAGE", "LAST", "LB", "LD", "LEADING", "LEFT", 
		"LEFTLINE", "LENGTH", "LENGTH_CHECK", "LESS", "LIBACCESS", "LIBPARAMETER", 
		"LIBRARY", "LIMIT", "LIMITS", "LINAGE", "LINAGE_COUNTER", "LINE", "LINES", 
		"LINE_COUNTER", "LINKAGE", "LIST", "LOCAL", "LOCAL_STORAGE", "LOCK", "LONG_DATE", 
		"LONG_TIME", "LOWER", "LOWLIGHT", "LOW_VALUE", "LOW_VALUES", "MEMORY", 
		"MERGE", "MESSAGE", "MMDDYYYY", "MODE", "MODULES", "MORE_LABELS", "MOVE", 
		"MULTIPLE", "MULTIPLY", "NAMED", "NATIONAL", "NATIONAL_EDITED", "NATIVE", 
		"NEGATIVE", "NETWORK", "NEXT", "NO", "NO_ECHO", "NOT", "NULL", "NULLS", 
		"NUMBER", "NUMERIC", "NUMERIC_DATE", "NUMERIC_EDITED", "NUMERIC_TIME", 
		"OBJECT_COMPUTER", "OCCURS", "ODT", "OF", "OFF", "OMITTED", "ON", "OPEN", 
		"OPTIONAL", "OR", "ORDER", "ORDERLY", "ORGANIZATION", "OTHER", "OUTPUT", 
		"OVERFLOW", "OVERLINE", "OWN", "PACKED_DECIMAL", "PADDING", "PAGE", "PAGE_COUNTER", 
		"PASSWORD", "PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", "POINTER", 
		"POSITION", "POSITIVE", "PORT", "PRINTER", "PRINTING", "PRIVATE", "PROCEDURE", 
		"PROCEDURE_POINTER", "PROCEDURES", "PROCEED", "PROCESS", "PROGRAM", "PROGRAM_ID", 
		"PROGRAM_LIBRARY", "PROMPT", "PURGE", "QUEUE", "QUOTE", "QUOTES", "RANDOM", 
		"READER", "REMOTE", "RD", "REAL", "READ", "RECEIVE", "RECEIVED", "RECORD", 
		"RECORDING", "RECORDS", "RECURSIVE", "REDEFINES", "REEL", "REF", "REFERENCE", 
		"REFERENCES", "RELATIVE", "RELEASE", "REMAINDER", "REMARKS", "REMOVAL", 
		"REMOVE", "RENAMES", "REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS", 
		"REQUIRED", "RERUN", "RESERVE", "REVERSE_VIDEO", "RESET", "RETURN", "RETURN_CODE", 
		"RETURNING", "REVERSED", "REWIND", "REWRITE", "RF", "RH", "RIGHT", "ROUNDED", 
		"RUN", "SAME", "SAVE", "SCREEN", "SD", "SEARCH", "SECTION", "SECURE", 
		"SECURITY", "SEGMENT", "SEGMENT_LIMIT", "SELECT", "SEND", "SENTENCE", 
		"SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SHARED", "SHAREDBYALL", 
		"SHAREDBYRUNUNIT", "SHARING", "SHIFT_IN", "SHIFT_OUT", "SHORT_DATE", "SIGN", 
		"SIZE", "SORT", "SORT_CONTROL", "SORT_CORE_SIZE", "SORT_FILE_SIZE", "SORT_MERGE", 
		"SORT_MESSAGE", "SORT_MODE_SIZE", "SORT_RETURN", "SOURCE", "SOURCE_COMPUTER", 
		"SPACE", "SPACES", "SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", 
		"START", "STATUS", "STOP", "STRING", "SUB_QUEUE_1", "SUB_QUEUE_2", "SUB_QUEUE_3", 
		"SUBTRACT", "SUM", "SUPPRESS", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", 
		"TABLE", "TALLY", "TALLYING", "TASK", "TAPE", "TERMINAL", "TERMINATE", 
		"TEST", "TEXT", "THAN", "THEN", "THREAD", "THREAD_LOCAL", "THROUGH", "THRU", 
		"TIME", "TIMER", "TIMES", "TITLE", "TO", "TODAYS_DATE", "TODAYS_NAME", 
		"TOP", "TRAILING", "TRUE", "TRUNCATED", "TYPE", "TYPEDEF", "UNDERLINE", 
		"UNIT", "UNSTRING", "UNTIL", "UP", "UPON", "USAGE", "USE", "USING", "VALUE", 
		"VALUES", "VARYING", "VIRTUAL", "WAIT", "WHEN", "WHEN_COMPILED", "WITH", 
		"WORDS", "WORKING_STORAGE", "WRITE", "YEAR", "YYYYMMDD", "YYYYDDD", "ZERO", 
		"ZERO_FILL", "ZEROS", "ZEROES", "AMPCHAR", "ASTERISKCHAR", "DOUBLEASTERISKCHAR", 
		"COLONCHAR", "COMMACHAR", "COMMENTENTRYTAG", "COMMENTTAG", "DOLLARCHAR", 
		"DOUBLEQUOTE", "DOT_FS", "DOT", "EQUALCHAR", "EXECCICSTAG", "EXECSQLTAG", 
		"EXECSQLIMSTAG", "LESSTHANCHAR", "LESSTHANOREQUAL", "LPARENCHAR", "MINUSCHAR", 
		"MORETHANCHAR", "MORETHANOREQUAL", "NOTEQUALCHAR", "PLUSCHAR", "SINGLEQUOTE", 
		"RPARENCHAR", "SLASHCHAR", "NONNUMERICLITERAL", "LEVEL_NUMBER_66", "LEVEL_NUMBER_77", 
		"LEVEL_NUMBER_88", "INTEGERLITERAL", "NUMERICLITERAL", "IDENTIFIER", "NEWLINE", 
		"EXECCICSLINE", "EXECSQLIMSLINE", "EXECSQLLINE", "COMMENTENTRYLINE", "COMMENTLINE", 
		"WS", "SEPARATOR",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(Cobol85Parser._LITERAL_NAMES, Cobol85Parser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return Cobol85Parser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "Cobol85.g4"; }

	// @Override
	public get ruleNames(): string[] { return Cobol85Parser.ruleNames; }

	// @Override
	public get serializedATN(): string { return Cobol85Parser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(Cobol85Parser._ATN, this);
	}
	// @RuleVersion(0)
	public startRule(): StartRuleContext {
		let _localctx: StartRuleContext = new StartRuleContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, Cobol85Parser.RULE_startRule);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1190;
			this.compilationUnit();
			this.state = 1191;
			this.match(Cobol85Parser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compilationUnit(): CompilationUnitContext {
		let _localctx: CompilationUnitContext = new CompilationUnitContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, Cobol85Parser.RULE_compilationUnit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1193;
				this.programUnit();
				}
				}
				this.state = 1196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === Cobol85Parser.ID || _la === Cobol85Parser.IDENTIFICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public programUnit(): ProgramUnitContext {
		let _localctx: ProgramUnitContext = new ProgramUnitContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, Cobol85Parser.RULE_programUnit);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1198;
			this.identificationDivision();
			this.state = 1200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ENVIRONMENT) {
				{
				this.state = 1199;
				this.environmentDivision();
				}
			}

			this.state = 1203;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DATA) {
				{
				this.state = 1202;
				this.dataDivision();
				}
			}

			this.state = 1206;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.PROCEDURE) {
				{
				this.state = 1205;
				this.procedureDivision();
				}
			}

			this.state = 1211;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 4, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1208;
					this.programUnit();
					}
					}
				}
				this.state = 1213;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 4, this._ctx);
			}
			this.state = 1215;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
			case 1:
				{
				this.state = 1214;
				this.endProgramStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public endProgramStatement(): EndProgramStatementContext {
		let _localctx: EndProgramStatementContext = new EndProgramStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, Cobol85Parser.RULE_endProgramStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1217;
			this.match(Cobol85Parser.END);
			this.state = 1218;
			this.match(Cobol85Parser.PROGRAM);
			this.state = 1219;
			this.programName();
			this.state = 1220;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identificationDivision(): IdentificationDivisionContext {
		let _localctx: IdentificationDivisionContext = new IdentificationDivisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, Cobol85Parser.RULE_identificationDivision);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1222;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ID || _la === Cobol85Parser.IDENTIFICATION)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1223;
			this.match(Cobol85Parser.DIVISION);
			this.state = 1224;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1225;
			this.programIdParagraph();
			this.state = 1229;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AUTHOR || _la === Cobol85Parser.DATE_COMPILED || _la === Cobol85Parser.DATE_WRITTEN || _la === Cobol85Parser.INSTALLATION || _la === Cobol85Parser.REMARKS || _la === Cobol85Parser.SECURITY) {
				{
				{
				this.state = 1226;
				this.identificationDivisionBody();
				}
				}
				this.state = 1231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identificationDivisionBody(): IdentificationDivisionBodyContext {
		let _localctx: IdentificationDivisionBodyContext = new IdentificationDivisionBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, Cobol85Parser.RULE_identificationDivisionBody);
		try {
			this.state = 1238;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.AUTHOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1232;
				this.authorParagraph();
				}
				break;
			case Cobol85Parser.INSTALLATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1233;
				this.installationParagraph();
				}
				break;
			case Cobol85Parser.DATE_WRITTEN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1234;
				this.dateWrittenParagraph();
				}
				break;
			case Cobol85Parser.DATE_COMPILED:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1235;
				this.dateCompiledParagraph();
				}
				break;
			case Cobol85Parser.SECURITY:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1236;
				this.securityParagraph();
				}
				break;
			case Cobol85Parser.REMARKS:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1237;
				this.remarksParagraph();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public programIdParagraph(): ProgramIdParagraphContext {
		let _localctx: ProgramIdParagraphContext = new ProgramIdParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, Cobol85Parser.RULE_programIdParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1240;
			this.match(Cobol85Parser.PROGRAM_ID);
			this.state = 1241;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1242;
			this.programName();
			this.state = 1250;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMON || _la === Cobol85Parser.DEFINITION || ((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & ((1 << (Cobol85Parser.INITIAL - 243)) | (1 << (Cobol85Parser.IS - 243)) | (1 << (Cobol85Parser.LIBRARY - 243)))) !== 0) || _la === Cobol85Parser.RECURSIVE) {
				{
				this.state = 1244;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 1243;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 1246;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.COMMON || _la === Cobol85Parser.DEFINITION || _la === Cobol85Parser.INITIAL || _la === Cobol85Parser.LIBRARY || _la === Cobol85Parser.RECURSIVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.PROGRAM) {
					{
					this.state = 1247;
					this.match(Cobol85Parser.PROGRAM);
					}
				}

				}
			}

			this.state = 1253;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DOT_FS) {
				{
				this.state = 1252;
				this.match(Cobol85Parser.DOT_FS);
				}
			}

			this.state = 1256;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMENTENTRYLINE) {
				{
				this.state = 1255;
				this.commentEntry();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authorParagraph(): AuthorParagraphContext {
		let _localctx: AuthorParagraphContext = new AuthorParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, Cobol85Parser.RULE_authorParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1258;
			this.match(Cobol85Parser.AUTHOR);
			this.state = 1259;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1261;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMENTENTRYLINE) {
				{
				this.state = 1260;
				this.commentEntry();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installationParagraph(): InstallationParagraphContext {
		let _localctx: InstallationParagraphContext = new InstallationParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, Cobol85Parser.RULE_installationParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1263;
			this.match(Cobol85Parser.INSTALLATION);
			this.state = 1264;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1266;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMENTENTRYLINE) {
				{
				this.state = 1265;
				this.commentEntry();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateWrittenParagraph(): DateWrittenParagraphContext {
		let _localctx: DateWrittenParagraphContext = new DateWrittenParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, Cobol85Parser.RULE_dateWrittenParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1268;
			this.match(Cobol85Parser.DATE_WRITTEN);
			this.state = 1269;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1271;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMENTENTRYLINE) {
				{
				this.state = 1270;
				this.commentEntry();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dateCompiledParagraph(): DateCompiledParagraphContext {
		let _localctx: DateCompiledParagraphContext = new DateCompiledParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, Cobol85Parser.RULE_dateCompiledParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1273;
			this.match(Cobol85Parser.DATE_COMPILED);
			this.state = 1274;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1276;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMENTENTRYLINE) {
				{
				this.state = 1275;
				this.commentEntry();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public securityParagraph(): SecurityParagraphContext {
		let _localctx: SecurityParagraphContext = new SecurityParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, Cobol85Parser.RULE_securityParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1278;
			this.match(Cobol85Parser.SECURITY);
			this.state = 1279;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMENTENTRYLINE) {
				{
				this.state = 1280;
				this.commentEntry();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public remarksParagraph(): RemarksParagraphContext {
		let _localctx: RemarksParagraphContext = new RemarksParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, Cobol85Parser.RULE_remarksParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1283;
			this.match(Cobol85Parser.REMARKS);
			this.state = 1284;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1286;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMENTENTRYLINE) {
				{
				this.state = 1285;
				this.commentEntry();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environmentDivision(): EnvironmentDivisionContext {
		let _localctx: EnvironmentDivisionContext = new EnvironmentDivisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, Cobol85Parser.RULE_environmentDivision);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1288;
			this.match(Cobol85Parser.ENVIRONMENT);
			this.state = 1289;
			this.match(Cobol85Parser.DIVISION);
			this.state = 1290;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1294;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.CONFIGURATION || _la === Cobol85Parser.INPUT_OUTPUT || _la === Cobol85Parser.SPECIAL_NAMES) {
				{
				{
				this.state = 1291;
				this.environmentDivisionBody();
				}
				}
				this.state = 1296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environmentDivisionBody(): EnvironmentDivisionBodyContext {
		let _localctx: EnvironmentDivisionBodyContext = new EnvironmentDivisionBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, Cobol85Parser.RULE_environmentDivisionBody);
		try {
			this.state = 1300;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.CONFIGURATION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1297;
				this.configurationSection();
				}
				break;
			case Cobol85Parser.SPECIAL_NAMES:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1298;
				this.specialNamesParagraph();
				}
				break;
			case Cobol85Parser.INPUT_OUTPUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1299;
				this.inputOutputSection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configurationSection(): ConfigurationSectionContext {
		let _localctx: ConfigurationSectionContext = new ConfigurationSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, Cobol85Parser.RULE_configurationSection);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1302;
			this.match(Cobol85Parser.CONFIGURATION);
			this.state = 1303;
			this.match(Cobol85Parser.SECTION);
			this.state = 1304;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1308;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1305;
					this.configurationSectionParagraph();
					}
					}
				}
				this.state = 1310;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configurationSectionParagraph(): ConfigurationSectionParagraphContext {
		let _localctx: ConfigurationSectionParagraphContext = new ConfigurationSectionParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, Cobol85Parser.RULE_configurationSectionParagraph);
		try {
			this.state = 1314;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.SOURCE_COMPUTER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1311;
				this.sourceComputerParagraph();
				}
				break;
			case Cobol85Parser.OBJECT_COMPUTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1312;
				this.objectComputerParagraph();
				}
				break;
			case Cobol85Parser.SPECIAL_NAMES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1313;
				this.specialNamesParagraph();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sourceComputerParagraph(): SourceComputerParagraphContext {
		let _localctx: SourceComputerParagraphContext = new SourceComputerParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, Cobol85Parser.RULE_sourceComputerParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1316;
			this.match(Cobol85Parser.SOURCE_COMPUTER);
			this.state = 1317;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1318;
			this.computerName();
			this.state = 1324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DEBUGGING || _la === Cobol85Parser.WITH) {
				{
				this.state = 1320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 1319;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 1322;
				this.match(Cobol85Parser.DEBUGGING);
				this.state = 1323;
				this.match(Cobol85Parser.MODE);
				}
			}

			this.state = 1326;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public objectComputerParagraph(): ObjectComputerParagraphContext {
		let _localctx: ObjectComputerParagraphContext = new ObjectComputerParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, Cobol85Parser.RULE_objectComputerParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1328;
			this.match(Cobol85Parser.OBJECT_COMPUTER);
			this.state = 1329;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1330;
			this.computerName();
			this.state = 1334;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.CHARACTER || _la === Cobol85Parser.COLLATING || _la === Cobol85Parser.DISK || _la === Cobol85Parser.MEMORY || _la === Cobol85Parser.PROGRAM || _la === Cobol85Parser.SEGMENT_LIMIT || _la === Cobol85Parser.SEQUENCE) {
				{
				{
				this.state = 1331;
				this.objectComputerClause();
				}
				}
				this.state = 1336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1337;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public objectComputerClause(): ObjectComputerClauseContext {
		let _localctx: ObjectComputerClauseContext = new ObjectComputerClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, Cobol85Parser.RULE_objectComputerClause);
		try {
			this.state = 1344;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.MEMORY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1339;
				this.memorySizeClause();
				}
				break;
			case Cobol85Parser.DISK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1340;
				this.diskSizeClause();
				}
				break;
			case Cobol85Parser.COLLATING:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.SEQUENCE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1341;
				this.collatingSequenceClause();
				}
				break;
			case Cobol85Parser.SEGMENT_LIMIT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1342;
				this.segmentLimitClause();
				}
				break;
			case Cobol85Parser.CHARACTER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1343;
				this.characterSetClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memorySizeClause(): MemorySizeClauseContext {
		let _localctx: MemorySizeClauseContext = new MemorySizeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, Cobol85Parser.RULE_memorySizeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1346;
			this.match(Cobol85Parser.MEMORY);
			this.state = 1348;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIZE) {
				{
				this.state = 1347;
				this.match(Cobol85Parser.SIZE);
				}
			}

			this.state = 1352;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 1350;
				this.integerLiteral();
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 1351;
				this.cobolWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1355;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS) {
				{
				this.state = 1354;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public diskSizeClause(): DiskSizeClauseContext {
		let _localctx: DiskSizeClauseContext = new DiskSizeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, Cobol85Parser.RULE_diskSizeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1357;
			this.match(Cobol85Parser.DISK);
			this.state = 1359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIZE) {
				{
				this.state = 1358;
				this.match(Cobol85Parser.SIZE);
				}
			}

			this.state = 1362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1361;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1366;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 1364;
				this.integerLiteral();
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 1365;
				this.cobolWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS) {
				{
				this.state = 1368;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.MODULES || _la === Cobol85Parser.WORDS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collatingSequenceClause(): CollatingSequenceClauseContext {
		let _localctx: CollatingSequenceClauseContext = new CollatingSequenceClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, Cobol85Parser.RULE_collatingSequenceClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.PROGRAM) {
				{
				this.state = 1371;
				this.match(Cobol85Parser.PROGRAM);
				}
			}

			this.state = 1375;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COLLATING) {
				{
				this.state = 1374;
				this.match(Cobol85Parser.COLLATING);
				}
			}

			this.state = 1377;
			this.match(Cobol85Parser.SEQUENCE);
			{
			this.state = 1379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1378;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1382;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1381;
					this.alphabetName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1384;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 37, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
			this.state = 1387;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
			case 1:
				{
				this.state = 1386;
				this.collatingSequenceClauseAlphanumeric();
				}
				break;
			}
			this.state = 1390;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.NATIONAL) {
				{
				this.state = 1389;
				this.collatingSequenceClauseNational();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collatingSequenceClauseAlphanumeric(): CollatingSequenceClauseAlphanumericContext {
		let _localctx: CollatingSequenceClauseAlphanumericContext = new CollatingSequenceClauseAlphanumericContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 1392;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 1395;
			this.match(Cobol85Parser.ALPHANUMERIC);
			this.state = 1397;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1396;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1399;
			this.alphabetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collatingSequenceClauseNational(): CollatingSequenceClauseNationalContext {
		let _localctx: CollatingSequenceClauseNationalContext = new CollatingSequenceClauseNationalContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, Cobol85Parser.RULE_collatingSequenceClauseNational);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 1401;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 1404;
			this.match(Cobol85Parser.NATIONAL);
			this.state = 1406;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1405;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1408;
			this.alphabetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segmentLimitClause(): SegmentLimitClauseContext {
		let _localctx: SegmentLimitClauseContext = new SegmentLimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, Cobol85Parser.RULE_segmentLimitClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1410;
			this.match(Cobol85Parser.SEGMENT_LIMIT);
			this.state = 1412;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1411;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1414;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public characterSetClause(): CharacterSetClauseContext {
		let _localctx: CharacterSetClauseContext = new CharacterSetClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, Cobol85Parser.RULE_characterSetClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1416;
			this.match(Cobol85Parser.CHARACTER);
			this.state = 1417;
			this.match(Cobol85Parser.SET);
			this.state = 1418;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specialNamesParagraph(): SpecialNamesParagraphContext {
		let _localctx: SpecialNamesParagraphContext = new SpecialNamesParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, Cobol85Parser.RULE_specialNamesParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1420;
			this.match(Cobol85Parser.SPECIAL_NAMES);
			this.state = 1421;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1429;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)) | (1 << (Cobol85Parser.CLASS - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURRENCY - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DECIMAL_POINT - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OFF - 317)) | (1 << (Cobol85Parser.ON - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.RESERVE - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
				{
				this.state = 1423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1422;
					this.specialNameClause();
					}
					}
					this.state = 1425;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)) | (1 << (Cobol85Parser.CLASS - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURRENCY - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DECIMAL_POINT - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OFF - 317)) | (1 << (Cobol85Parser.ON - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.RESERVE - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
				this.state = 1427;
				this.match(Cobol85Parser.DOT_FS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specialNameClause(): SpecialNameClauseContext {
		let _localctx: SpecialNameClauseContext = new SpecialNameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, Cobol85Parser.RULE_specialNameClause);
		try {
			this.state = 1442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 47, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1431;
				this.channelClause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1432;
				this.odtClause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1433;
				this.alphabetClause();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1434;
				this.classClause();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1435;
				this.currencySignClause();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1436;
				this.decimalPointClause();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1437;
				this.symbolicCharactersClause();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1438;
				this.environmentSwitchNameClause();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1439;
				this.defaultDisplaySignClause();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1440;
				this.defaultComputationalSignClause();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1441;
				this.reserveNetworkClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabetClause(): AlphabetClauseContext {
		let _localctx: AlphabetClauseContext = new AlphabetClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, Cobol85Parser.RULE_alphabetClause);
		try {
			this.state = 1446;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 48, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1444;
				this.alphabetClauseFormat1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1445;
				this.alphabetClauseFormat2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabetClauseFormat1(): AlphabetClauseFormat1Context {
		let _localctx: AlphabetClauseFormat1Context = new AlphabetClauseFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 60, Cobol85Parser.RULE_alphabetClauseFormat1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1448;
			this.match(Cobol85Parser.ALPHABET);
			this.state = 1449;
			this.alphabetName();
			this.state = 1452;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 1450;
				this.match(Cobol85Parser.FOR);
				this.state = 1451;
				this.match(Cobol85Parser.ALPHANUMERIC);
				}
			}

			this.state = 1455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1454;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1468;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
			case 1:
				{
				this.state = 1457;
				this.match(Cobol85Parser.EBCDIC);
				}
				break;

			case 2:
				{
				this.state = 1458;
				this.match(Cobol85Parser.ASCII);
				}
				break;

			case 3:
				{
				this.state = 1459;
				this.match(Cobol85Parser.STANDARD_1);
				}
				break;

			case 4:
				{
				this.state = 1460;
				this.match(Cobol85Parser.STANDARD_2);
				}
				break;

			case 5:
				{
				this.state = 1461;
				this.match(Cobol85Parser.NATIVE);
				}
				break;

			case 6:
				{
				this.state = 1462;
				this.cobolWord();
				}
				break;

			case 7:
				{
				this.state = 1464;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1463;
						this.alphabetLiterals();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1466;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabetLiterals(): AlphabetLiteralsContext {
		let _localctx: AlphabetLiteralsContext = new AlphabetLiteralsContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, Cobol85Parser.RULE_alphabetLiterals);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1470;
			this.literal();
			this.state = 1477;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.THROUGH:
			case Cobol85Parser.THRU:
				{
				this.state = 1471;
				this.alphabetThrough();
				}
				break;
			case Cobol85Parser.ALSO:
				{
				this.state = 1473;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1472;
					this.alphabetAlso();
					}
					}
					this.state = 1475;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === Cobol85Parser.ALSO);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.ALL:
			case Cobol85Parser.ALPHABET:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLASS:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURRENCY:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DECIMAL_POINT:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FALSE:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.HIGH_VALUE:
			case Cobol85Parser.HIGH_VALUES:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.LOW_VALUE:
			case Cobol85Parser.LOW_VALUES:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NULL:
			case Cobol85Parser.NULLS:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.OFF:
			case Cobol85Parser.ON:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.QUOTE:
			case Cobol85Parser.QUOTES:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.RESERVE:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SPACE:
			case Cobol85Parser.SPACES:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.SYMBOLIC:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUE:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.ZEROS:
			case Cobol85Parser.ZEROES:
			case Cobol85Parser.DOT_FS:
			case Cobol85Parser.NONNUMERICLITERAL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.NUMERICLITERAL:
			case Cobol85Parser.IDENTIFIER:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabetThrough(): AlphabetThroughContext {
		let _localctx: AlphabetThroughContext = new AlphabetThroughContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, Cobol85Parser.RULE_alphabetThrough);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1479;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1480;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabetAlso(): AlphabetAlsoContext {
		let _localctx: AlphabetAlsoContext = new AlphabetAlsoContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, Cobol85Parser.RULE_alphabetAlso);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1482;
			this.match(Cobol85Parser.ALSO);
			this.state = 1484;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1483;
					this.literal();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1486;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabetClauseFormat2(): AlphabetClauseFormat2Context {
		let _localctx: AlphabetClauseFormat2Context = new AlphabetClauseFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 68, Cobol85Parser.RULE_alphabetClauseFormat2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1488;
			this.match(Cobol85Parser.ALPHABET);
			this.state = 1489;
			this.alphabetName();
			this.state = 1491;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 1490;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 1493;
			this.match(Cobol85Parser.NATIONAL);
			this.state = 1495;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1494;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1500;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NATIVE:
				{
				this.state = 1497;
				this.match(Cobol85Parser.NATIVE);
				}
				break;
			case Cobol85Parser.CCSVERSION:
				{
				this.state = 1498;
				this.match(Cobol85Parser.CCSVERSION);
				this.state = 1499;
				this.literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public channelClause(): ChannelClauseContext {
		let _localctx: ChannelClauseContext = new ChannelClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, Cobol85Parser.RULE_channelClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1502;
			this.match(Cobol85Parser.CHANNEL);
			this.state = 1503;
			this.integerLiteral();
			this.state = 1505;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1504;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1507;
			this.mnemonicName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public classClause(): ClassClauseContext {
		let _localctx: ClassClauseContext = new ClassClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, Cobol85Parser.RULE_classClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1509;
			this.match(Cobol85Parser.CLASS);
			this.state = 1510;
			this.className();
			this.state = 1515;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
			case 1:
				{
				this.state = 1512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.FOR) {
					{
					this.state = 1511;
					this.match(Cobol85Parser.FOR);
					}
				}

				this.state = 1514;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.ALPHANUMERIC || _la === Cobol85Parser.NATIONAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1518;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1517;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1521;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1520;
					this.classClauseThrough();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1523;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public classClauseThrough(): ClassClauseThroughContext {
		let _localctx: ClassClauseThroughContext = new ClassClauseThroughContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, Cobol85Parser.RULE_classClauseThrough);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1525;
			this.classClauseFrom();
			this.state = 1528;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
				{
				this.state = 1526;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1527;
				this.classClauseTo();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public classClauseFrom(): ClassClauseFromContext {
		let _localctx: ClassClauseFromContext = new ClassClauseFromContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, Cobol85Parser.RULE_classClauseFrom);
		try {
			this.state = 1532;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1530;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1531;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public classClauseTo(): ClassClauseToContext {
		let _localctx: ClassClauseToContext = new ClassClauseToContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, Cobol85Parser.RULE_classClauseTo);
		try {
			this.state = 1536;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 66, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1534;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1535;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currencySignClause(): CurrencySignClauseContext {
		let _localctx: CurrencySignClauseContext = new CurrencySignClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, Cobol85Parser.RULE_currencySignClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1538;
			this.match(Cobol85Parser.CURRENCY);
			this.state = 1540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIGN) {
				{
				this.state = 1539;
				this.match(Cobol85Parser.SIGN);
				}
			}

			this.state = 1543;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1542;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1545;
			this.literal();
			this.state = 1552;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.PICTURE || _la === Cobol85Parser.WITH) {
				{
				this.state = 1547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 1546;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 1549;
				this.match(Cobol85Parser.PICTURE);
				this.state = 1550;
				this.match(Cobol85Parser.SYMBOL);
				this.state = 1551;
				this.literal();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalPointClause(): DecimalPointClauseContext {
		let _localctx: DecimalPointClauseContext = new DecimalPointClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, Cobol85Parser.RULE_decimalPointClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1554;
			this.match(Cobol85Parser.DECIMAL_POINT);
			this.state = 1556;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1555;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1558;
			this.match(Cobol85Parser.COMMA);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultComputationalSignClause(): DefaultComputationalSignClauseContext {
		let _localctx: DefaultComputationalSignClauseContext = new DefaultComputationalSignClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, Cobol85Parser.RULE_defaultComputationalSignClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1560;
			this.match(Cobol85Parser.DEFAULT);
			this.state = 1562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMP || _la === Cobol85Parser.COMPUTATIONAL) {
				{
				this.state = 1561;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.COMP || _la === Cobol85Parser.COMPUTATIONAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1568;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIGN) {
				{
				this.state = 1564;
				this.match(Cobol85Parser.SIGN);
				this.state = 1566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 1565;
					this.match(Cobol85Parser.IS);
					}
				}

				}
			}

			this.state = 1571;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING) {
				{
				this.state = 1570;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			{
			this.state = 1573;
			this.match(Cobol85Parser.SEPARATE);
			this.state = 1575;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTER) {
				{
				this.state = 1574;
				this.match(Cobol85Parser.CHARACTER);
				}
			}

			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultDisplaySignClause(): DefaultDisplaySignClauseContext {
		let _localctx: DefaultDisplaySignClauseContext = new DefaultDisplaySignClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, Cobol85Parser.RULE_defaultDisplaySignClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1577;
			this.match(Cobol85Parser.DEFAULT_DISPLAY);
			this.state = 1582;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIGN) {
				{
				this.state = 1578;
				this.match(Cobol85Parser.SIGN);
				this.state = 1580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 1579;
					this.match(Cobol85Parser.IS);
					}
				}

				}
			}

			this.state = 1584;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1589;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SEPARATE) {
				{
				this.state = 1585;
				this.match(Cobol85Parser.SEPARATE);
				this.state = 1587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.CHARACTER) {
					{
					this.state = 1586;
					this.match(Cobol85Parser.CHARACTER);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environmentSwitchNameClause(): EnvironmentSwitchNameClauseContext {
		let _localctx: EnvironmentSwitchNameClauseContext = new EnvironmentSwitchNameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, Cobol85Parser.RULE_environmentSwitchNameClause);
		let _la: number;
		try {
			this.state = 1600;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1591;
				this.environmentName();
				this.state = 1593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 1592;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 1595;
				this.mnemonicName();
				this.state = 1597;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 82, this._ctx) ) {
				case 1:
					{
					this.state = 1596;
					this.environmentSwitchNameSpecialNamesStatusPhrase();
					}
					break;
				}
				}
				break;
			case Cobol85Parser.OFF:
			case Cobol85Parser.ON:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1599;
				this.environmentSwitchNameSpecialNamesStatusPhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environmentSwitchNameSpecialNamesStatusPhrase(): EnvironmentSwitchNameSpecialNamesStatusPhraseContext {
		let _localctx: EnvironmentSwitchNameSpecialNamesStatusPhraseContext = new EnvironmentSwitchNameSpecialNamesStatusPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase);
		let _la: number;
		try {
			this.state = 1638;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1602;
				this.match(Cobol85Parser.ON);
				this.state = 1604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.STATUS) {
					{
					this.state = 1603;
					this.match(Cobol85Parser.STATUS);
					}
				}

				this.state = 1607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 1606;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 1609;
				this.condition();
				this.state = 1618;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 88, this._ctx) ) {
				case 1:
					{
					this.state = 1610;
					this.match(Cobol85Parser.OFF);
					this.state = 1612;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.STATUS) {
						{
						this.state = 1611;
						this.match(Cobol85Parser.STATUS);
						}
					}

					this.state = 1615;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.IS) {
						{
						this.state = 1614;
						this.match(Cobol85Parser.IS);
						}
					}

					this.state = 1617;
					this.condition();
					}
					break;
				}
				}
				break;
			case Cobol85Parser.OFF:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1620;
				this.match(Cobol85Parser.OFF);
				this.state = 1622;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.STATUS) {
					{
					this.state = 1621;
					this.match(Cobol85Parser.STATUS);
					}
				}

				this.state = 1625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 1624;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 1627;
				this.condition();
				this.state = 1636;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
				case 1:
					{
					this.state = 1628;
					this.match(Cobol85Parser.ON);
					this.state = 1630;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.STATUS) {
						{
						this.state = 1629;
						this.match(Cobol85Parser.STATUS);
						}
					}

					this.state = 1633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.IS) {
						{
						this.state = 1632;
						this.match(Cobol85Parser.IS);
						}
					}

					this.state = 1635;
					this.condition();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public odtClause(): OdtClauseContext {
		let _localctx: OdtClauseContext = new OdtClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, Cobol85Parser.RULE_odtClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1640;
			this.match(Cobol85Parser.ODT);
			this.state = 1642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1641;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1644;
			this.mnemonicName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserveNetworkClause(): ReserveNetworkClauseContext {
		let _localctx: ReserveNetworkClauseContext = new ReserveNetworkClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, Cobol85Parser.RULE_reserveNetworkClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1646;
			this.match(Cobol85Parser.RESERVE);
			this.state = 1648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WORDS) {
				{
				this.state = 1647;
				this.match(Cobol85Parser.WORDS);
				}
			}

			this.state = 1651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LIST) {
				{
				this.state = 1650;
				this.match(Cobol85Parser.LIST);
				}
			}

			this.state = 1654;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1653;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1656;
			this.match(Cobol85Parser.NETWORK);
			this.state = 1658;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 99, this._ctx) ) {
			case 1:
				{
				this.state = 1657;
				this.match(Cobol85Parser.CAPABLE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicCharactersClause(): SymbolicCharactersClauseContext {
		let _localctx: SymbolicCharactersClauseContext = new SymbolicCharactersClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, Cobol85Parser.RULE_symbolicCharactersClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1660;
			this.match(Cobol85Parser.SYMBOLIC);
			this.state = 1662;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTERS) {
				{
				this.state = 1661;
				this.match(Cobol85Parser.CHARACTERS);
				}
			}

			this.state = 1668;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 102, this._ctx) ) {
			case 1:
				{
				this.state = 1665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.FOR) {
					{
					this.state = 1664;
					this.match(Cobol85Parser.FOR);
					}
				}

				this.state = 1667;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.ALPHANUMERIC || _la === Cobol85Parser.NATIONAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1671;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1670;
					this.symbolicCharacters();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1673;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 103, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1677;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 1675;
				this.match(Cobol85Parser.IN);
				this.state = 1676;
				this.alphabetName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicCharacters(): SymbolicCharactersContext {
		let _localctx: SymbolicCharactersContext = new SymbolicCharactersContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, Cobol85Parser.RULE_symbolicCharacters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1680;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1679;
				this.symbolicCharacter();
				}
				}
				this.state = 1682;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			this.state = 1685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS) {
				{
				this.state = 1684;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1688;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1687;
				this.integerLiteral();
				}
				}
				this.state = 1690;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inputOutputSection(): InputOutputSectionContext {
		let _localctx: InputOutputSectionContext = new InputOutputSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, Cobol85Parser.RULE_inputOutputSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1692;
			this.match(Cobol85Parser.INPUT_OUTPUT);
			this.state = 1693;
			this.match(Cobol85Parser.SECTION);
			this.state = 1694;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1698;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.FILE_CONTROL || _la === Cobol85Parser.I_O_CONTROL) {
				{
				{
				this.state = 1695;
				this.inputOutputSectionParagraph();
				}
				}
				this.state = 1700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inputOutputSectionParagraph(): InputOutputSectionParagraphContext {
		let _localctx: InputOutputSectionParagraphContext = new InputOutputSectionParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, Cobol85Parser.RULE_inputOutputSectionParagraph);
		try {
			this.state = 1703;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.FILE_CONTROL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1701;
				this.fileControlParagraph();
				}
				break;
			case Cobol85Parser.I_O_CONTROL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1702;
				this.ioControlParagraph();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileControlParagraph(): FileControlParagraphContext {
		let _localctx: FileControlParagraphContext = new FileControlParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, Cobol85Parser.RULE_fileControlParagraph);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1705;
			this.match(Cobol85Parser.FILE_CONTROL);
			this.state = 1712;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1707;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.DOT_FS) {
						{
						this.state = 1706;
						this.match(Cobol85Parser.DOT_FS);
						}
					}

					this.state = 1709;
					this.fileControlEntry();
					}
					}
				}
				this.state = 1714;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
			}
			this.state = 1715;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileControlEntry(): FileControlEntryContext {
		let _localctx: FileControlEntryContext = new FileControlEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, Cobol85Parser.RULE_fileControlEntry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1717;
			this.selectClause();
			this.state = 1721;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCESS) | (1 << Cobol85Parser.ALTERNATE) | (1 << Cobol85Parser.ASSIGN))) !== 0) || _la === Cobol85Parser.BINARY || _la === Cobol85Parser.FILE || _la === Cobol85Parser.INDEXED || _la === Cobol85Parser.LINE || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (Cobol85Parser.ORGANIZATION - 332)) | (1 << (Cobol85Parser.PADDING - 332)) | (1 << (Cobol85Parser.PASSWORD - 332)))) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & ((1 << (Cobol85Parser.RECORD - 377)) | (1 << (Cobol85Parser.RELATIVE - 377)) | (1 << (Cobol85Parser.RESERVE - 377)))) !== 0) || _la === Cobol85Parser.SEQUENTIAL || _la === Cobol85Parser.STATUS) {
				{
				{
				this.state = 1718;
				this.fileControlClause();
				}
				}
				this.state = 1723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectClause(): SelectClauseContext {
		let _localctx: SelectClauseContext = new SelectClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, Cobol85Parser.RULE_selectClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1724;
			this.match(Cobol85Parser.SELECT);
			this.state = 1726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OPTIONAL) {
				{
				this.state = 1725;
				this.match(Cobol85Parser.OPTIONAL);
				}
			}

			this.state = 1728;
			this.fileName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileControlClause(): FileControlClauseContext {
		let _localctx: FileControlClauseContext = new FileControlClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, Cobol85Parser.RULE_fileControlClause);
		try {
			this.state = 1741;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1730;
				this.assignClause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1731;
				this.reserveClause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1732;
				this.organizationClause();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1733;
				this.paddingCharacterClause();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1734;
				this.recordDelimiterClause();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1735;
				this.accessModeClause();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1736;
				this.recordKeyClause();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1737;
				this.alternateRecordKeyClause();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1738;
				this.fileStatusClause();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1739;
				this.passwordClause();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1740;
				this.relativeKeyClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignClause(): AssignClauseContext {
		let _localctx: AssignClauseContext = new AssignClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, Cobol85Parser.RULE_assignClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1743;
			this.match(Cobol85Parser.ASSIGN);
			this.state = 1745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TO) {
				{
				this.state = 1744;
				this.match(Cobol85Parser.TO);
				}
			}

			this.state = 1758;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 116, this._ctx) ) {
			case 1:
				{
				this.state = 1747;
				this.match(Cobol85Parser.DISK);
				}
				break;

			case 2:
				{
				this.state = 1748;
				this.match(Cobol85Parser.DISPLAY);
				}
				break;

			case 3:
				{
				this.state = 1749;
				this.match(Cobol85Parser.KEYBOARD);
				}
				break;

			case 4:
				{
				this.state = 1750;
				this.match(Cobol85Parser.PORT);
				}
				break;

			case 5:
				{
				this.state = 1751;
				this.match(Cobol85Parser.PRINTER);
				}
				break;

			case 6:
				{
				this.state = 1752;
				this.match(Cobol85Parser.READER);
				}
				break;

			case 7:
				{
				this.state = 1753;
				this.match(Cobol85Parser.REMOTE);
				}
				break;

			case 8:
				{
				this.state = 1754;
				this.match(Cobol85Parser.TAPE);
				}
				break;

			case 9:
				{
				this.state = 1755;
				this.match(Cobol85Parser.VIRTUAL);
				}
				break;

			case 10:
				{
				this.state = 1756;
				this.assignmentName();
				}
				break;

			case 11:
				{
				this.state = 1757;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserveClause(): ReserveClauseContext {
		let _localctx: ReserveClauseContext = new ReserveClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, Cobol85Parser.RULE_reserveClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1760;
			this.match(Cobol85Parser.RESERVE);
			this.state = 1763;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NO:
				{
				this.state = 1761;
				this.match(Cobol85Parser.NO);
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 1762;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1766;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				{
				this.state = 1765;
				this.match(Cobol85Parser.ALTERNATE);
				}
				break;
			}
			this.state = 1769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AREA || _la === Cobol85Parser.AREAS) {
				{
				this.state = 1768;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.AREA || _la === Cobol85Parser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public organizationClause(): OrganizationClauseContext {
		let _localctx: OrganizationClauseContext = new OrganizationClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, Cobol85Parser.RULE_organizationClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1775;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ORGANIZATION) {
				{
				this.state = 1771;
				this.match(Cobol85Parser.ORGANIZATION);
				this.state = 1773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 1772;
					this.match(Cobol85Parser.IS);
					}
				}

				}
			}

			this.state = 1782;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				{
				this.state = 1777;
				this.match(Cobol85Parser.LINE);
				}
				break;

			case 2:
				{
				this.state = 1778;
				this.match(Cobol85Parser.RECORD);
				this.state = 1779;
				this.match(Cobol85Parser.BINARY);
				}
				break;

			case 3:
				{
				this.state = 1780;
				this.match(Cobol85Parser.RECORD);
				}
				break;

			case 4:
				{
				this.state = 1781;
				this.match(Cobol85Parser.BINARY);
				}
				break;
			}
			this.state = 1784;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.INDEXED || _la === Cobol85Parser.RELATIVE || _la === Cobol85Parser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paddingCharacterClause(): PaddingCharacterClauseContext {
		let _localctx: PaddingCharacterClauseContext = new PaddingCharacterClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, Cobol85Parser.RULE_paddingCharacterClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1786;
			this.match(Cobol85Parser.PADDING);
			this.state = 1788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTER) {
				{
				this.state = 1787;
				this.match(Cobol85Parser.CHARACTER);
				}
			}

			this.state = 1791;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1790;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1795;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 125, this._ctx) ) {
			case 1:
				{
				this.state = 1793;
				this.qualifiedDataName();
				}
				break;

			case 2:
				{
				this.state = 1794;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordDelimiterClause(): RecordDelimiterClauseContext {
		let _localctx: RecordDelimiterClauseContext = new RecordDelimiterClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, Cobol85Parser.RULE_recordDelimiterClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1797;
			this.match(Cobol85Parser.RECORD);
			this.state = 1798;
			this.match(Cobol85Parser.DELIMITER);
			this.state = 1800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1799;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1805;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 127, this._ctx) ) {
			case 1:
				{
				this.state = 1802;
				this.match(Cobol85Parser.STANDARD_1);
				}
				break;

			case 2:
				{
				this.state = 1803;
				this.match(Cobol85Parser.IMPLICIT);
				}
				break;

			case 3:
				{
				this.state = 1804;
				this.assignmentName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accessModeClause(): AccessModeClauseContext {
		let _localctx: AccessModeClauseContext = new AccessModeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, Cobol85Parser.RULE_accessModeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1807;
			this.match(Cobol85Parser.ACCESS);
			this.state = 1809;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.MODE) {
				{
				this.state = 1808;
				this.match(Cobol85Parser.MODE);
				}
			}

			this.state = 1812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1811;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1814;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.DYNAMIC || _la === Cobol85Parser.EXCLUSIVE || _la === Cobol85Parser.RANDOM || _la === Cobol85Parser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordKeyClause(): RecordKeyClauseContext {
		let _localctx: RecordKeyClauseContext = new RecordKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, Cobol85Parser.RULE_recordKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1816;
			this.match(Cobol85Parser.RECORD);
			this.state = 1818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 1817;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 1821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1820;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1823;
			this.qualifiedDataName();
			this.state = 1825;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 132, this._ctx) ) {
			case 1:
				{
				this.state = 1824;
				this.passwordClause();
				}
				break;
			}
			this.state = 1831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DUPLICATES || _la === Cobol85Parser.WITH) {
				{
				this.state = 1828;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 1827;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 1830;
				this.match(Cobol85Parser.DUPLICATES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alternateRecordKeyClause(): AlternateRecordKeyClauseContext {
		let _localctx: AlternateRecordKeyClauseContext = new AlternateRecordKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, Cobol85Parser.RULE_alternateRecordKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1833;
			this.match(Cobol85Parser.ALTERNATE);
			this.state = 1834;
			this.match(Cobol85Parser.RECORD);
			this.state = 1836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 1835;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 1839;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1838;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1841;
			this.qualifiedDataName();
			this.state = 1843;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 137, this._ctx) ) {
			case 1:
				{
				this.state = 1842;
				this.passwordClause();
				}
				break;
			}
			this.state = 1849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DUPLICATES || _la === Cobol85Parser.WITH) {
				{
				this.state = 1846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 1845;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 1848;
				this.match(Cobol85Parser.DUPLICATES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public passwordClause(): PasswordClauseContext {
		let _localctx: PasswordClauseContext = new PasswordClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, Cobol85Parser.RULE_passwordClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1851;
			this.match(Cobol85Parser.PASSWORD);
			this.state = 1853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1852;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1855;
			this.dataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileStatusClause(): FileStatusClauseContext {
		let _localctx: FileStatusClauseContext = new FileStatusClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, Cobol85Parser.RULE_fileStatusClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FILE) {
				{
				this.state = 1857;
				this.match(Cobol85Parser.FILE);
				}
			}

			this.state = 1860;
			this.match(Cobol85Parser.STATUS);
			this.state = 1862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1861;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1864;
			this.qualifiedDataName();
			this.state = 1866;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
			case 1:
				{
				this.state = 1865;
				this.qualifiedDataName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relativeKeyClause(): RelativeKeyClauseContext {
		let _localctx: RelativeKeyClauseContext = new RelativeKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, Cobol85Parser.RULE_relativeKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1868;
			this.match(Cobol85Parser.RELATIVE);
			this.state = 1870;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 1869;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 1873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 1872;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 1875;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ioControlParagraph(): IoControlParagraphContext {
		let _localctx: IoControlParagraphContext = new IoControlParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, Cobol85Parser.RULE_ioControlParagraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1877;
			this.match(Cobol85Parser.I_O_CONTROL);
			this.state = 1878;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1882;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
			case 1:
				{
				this.state = 1879;
				this.fileName();
				this.state = 1880;
				this.match(Cobol85Parser.DOT_FS);
				}
				break;
			}
			this.state = 1891;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMITMENT || _la === Cobol85Parser.MULTIPLE || _la === Cobol85Parser.RERUN || _la === Cobol85Parser.SAME || _la === Cobol85Parser.DOT_FS) {
				{
				this.state = 1887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === Cobol85Parser.COMMITMENT || _la === Cobol85Parser.MULTIPLE || _la === Cobol85Parser.RERUN || _la === Cobol85Parser.SAME) {
					{
					{
					this.state = 1884;
					this.ioControlClause();
					}
					}
					this.state = 1889;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1890;
				this.match(Cobol85Parser.DOT_FS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ioControlClause(): IoControlClauseContext {
		let _localctx: IoControlClauseContext = new IoControlClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, Cobol85Parser.RULE_ioControlClause);
		try {
			this.state = 1897;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.RERUN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1893;
				this.rerunClause();
				}
				break;
			case Cobol85Parser.SAME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1894;
				this.sameClause();
				}
				break;
			case Cobol85Parser.MULTIPLE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1895;
				this.multipleFileClause();
				}
				break;
			case Cobol85Parser.COMMITMENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1896;
				this.commitmentControlClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerunClause(): RerunClauseContext {
		let _localctx: RerunClauseContext = new RerunClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, Cobol85Parser.RULE_rerunClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1899;
			this.match(Cobol85Parser.RERUN);
			this.state = 1905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 1900;
				this.match(Cobol85Parser.ON);
				this.state = 1903;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 150, this._ctx) ) {
				case 1:
					{
					this.state = 1901;
					this.assignmentName();
					}
					break;

				case 2:
					{
					this.state = 1902;
					this.fileName();
					}
					break;
				}
				}
			}

			this.state = 1907;
			this.match(Cobol85Parser.EVERY);
			this.state = 1911;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				{
				this.state = 1908;
				this.rerunEveryRecords();
				}
				break;

			case 2:
				{
				this.state = 1909;
				this.rerunEveryOf();
				}
				break;

			case 3:
				{
				this.state = 1910;
				this.rerunEveryClock();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerunEveryRecords(): RerunEveryRecordsContext {
		let _localctx: RerunEveryRecordsContext = new RerunEveryRecordsContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, Cobol85Parser.RULE_rerunEveryRecords);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1913;
			this.integerLiteral();
			this.state = 1914;
			this.match(Cobol85Parser.RECORDS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerunEveryOf(): RerunEveryOfContext {
		let _localctx: RerunEveryOfContext = new RerunEveryOfContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, Cobol85Parser.RULE_rerunEveryOf);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1917;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.END) {
				{
				this.state = 1916;
				this.match(Cobol85Parser.END);
				}
			}

			this.state = 1920;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OF) {
				{
				this.state = 1919;
				this.match(Cobol85Parser.OF);
				}
			}

			this.state = 1922;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.REEL || _la === Cobol85Parser.UNIT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1923;
			this.match(Cobol85Parser.OF);
			this.state = 1924;
			this.fileName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerunEveryClock(): RerunEveryClockContext {
		let _localctx: RerunEveryClockContext = new RerunEveryClockContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, Cobol85Parser.RULE_rerunEveryClock);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1926;
			this.integerLiteral();
			this.state = 1928;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CLOCK_UNITS) {
				{
				this.state = 1927;
				this.match(Cobol85Parser.CLOCK_UNITS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sameClause(): SameClauseContext {
		let _localctx: SameClauseContext = new SameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, Cobol85Parser.RULE_sameClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1930;
			this.match(Cobol85Parser.SAME);
			this.state = 1932;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RECORD || _la === Cobol85Parser.SORT || _la === Cobol85Parser.SORT_MERGE) {
				{
				this.state = 1931;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.RECORD || _la === Cobol85Parser.SORT || _la === Cobol85Parser.SORT_MERGE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AREA) {
				{
				this.state = 1934;
				this.match(Cobol85Parser.AREA);
				}
			}

			this.state = 1938;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 1937;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 1941;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1940;
					this.fileName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1943;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleFileClause(): MultipleFileClauseContext {
		let _localctx: MultipleFileClauseContext = new MultipleFileClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, Cobol85Parser.RULE_multipleFileClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1945;
			this.match(Cobol85Parser.MULTIPLE);
			this.state = 1946;
			this.match(Cobol85Parser.FILE);
			this.state = 1948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TAPE) {
				{
				this.state = 1947;
				this.match(Cobol85Parser.TAPE);
				}
			}

			this.state = 1951;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CONTAINS) {
				{
				this.state = 1950;
				this.match(Cobol85Parser.CONTAINS);
				}
			}

			this.state = 1954;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1953;
					this.multipleFilePosition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1956;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 162, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleFilePosition(): MultipleFilePositionContext {
		let _localctx: MultipleFilePositionContext = new MultipleFilePositionContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, Cobol85Parser.RULE_multipleFilePosition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1958;
			this.fileName();
			this.state = 1961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.POSITION) {
				{
				this.state = 1959;
				this.match(Cobol85Parser.POSITION);
				this.state = 1960;
				this.integerLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commitmentControlClause(): CommitmentControlClauseContext {
		let _localctx: CommitmentControlClauseContext = new CommitmentControlClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, Cobol85Parser.RULE_commitmentControlClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1963;
			this.match(Cobol85Parser.COMMITMENT);
			this.state = 1964;
			this.match(Cobol85Parser.CONTROL);
			this.state = 1966;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 1965;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 1968;
			this.fileName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDivision(): DataDivisionContext {
		let _localctx: DataDivisionContext = new DataDivisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, Cobol85Parser.RULE_dataDivision);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1970;
			this.match(Cobol85Parser.DATA);
			this.state = 1971;
			this.match(Cobol85Parser.DIVISION);
			this.state = 1972;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.COMMUNICATION || _la === Cobol85Parser.DATA_BASE || _la === Cobol85Parser.FILE || _la === Cobol85Parser.LINKAGE || _la === Cobol85Parser.LOCAL_STORAGE || _la === Cobol85Parser.PROGRAM_LIBRARY || _la === Cobol85Parser.REPORT || _la === Cobol85Parser.SCREEN || _la === Cobol85Parser.WORKING_STORAGE) {
				{
				{
				this.state = 1973;
				this.dataDivisionSection();
				}
				}
				this.state = 1978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDivisionSection(): DataDivisionSectionContext {
		let _localctx: DataDivisionSectionContext = new DataDivisionSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, Cobol85Parser.RULE_dataDivisionSection);
		try {
			this.state = 1988;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.FILE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1979;
				this.fileSection();
				}
				break;
			case Cobol85Parser.DATA_BASE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1980;
				this.dataBaseSection();
				}
				break;
			case Cobol85Parser.WORKING_STORAGE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1981;
				this.workingStorageSection();
				}
				break;
			case Cobol85Parser.LINKAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1982;
				this.linkageSection();
				}
				break;
			case Cobol85Parser.COMMUNICATION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1983;
				this.communicationSection();
				}
				break;
			case Cobol85Parser.LOCAL_STORAGE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1984;
				this.localStorageSection();
				}
				break;
			case Cobol85Parser.SCREEN:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1985;
				this.screenSection();
				}
				break;
			case Cobol85Parser.REPORT:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1986;
				this.reportSection();
				}
				break;
			case Cobol85Parser.PROGRAM_LIBRARY:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1987;
				this.programLibrarySection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileSection(): FileSectionContext {
		let _localctx: FileSectionContext = new FileSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, Cobol85Parser.RULE_fileSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1990;
			this.match(Cobol85Parser.FILE);
			this.state = 1991;
			this.match(Cobol85Parser.SECTION);
			this.state = 1992;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 1996;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.FD || _la === Cobol85Parser.SD) {
				{
				{
				this.state = 1993;
				this.fileDescriptionEntry();
				}
				}
				this.state = 1998;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileDescriptionEntry(): FileDescriptionEntryContext {
		let _localctx: FileDescriptionEntryContext = new FileDescriptionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, Cobol85Parser.RULE_fileDescriptionEntry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1999;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.FD || _la === Cobol85Parser.SD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2000;
			this.fileName();
			this.state = 2007;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.DOT_FS) {
						{
						this.state = 2001;
						this.match(Cobol85Parser.DOT_FS);
						}
					}

					this.state = 2004;
					this.fileDescriptionEntryClause();
					}
					}
				}
				this.state = 2009;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
			}
			this.state = 2010;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
				{
				{
				this.state = 2011;
				this.dataDescriptionEntry();
				}
				}
				this.state = 2016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileDescriptionEntryClause(): FileDescriptionEntryClauseContext {
		let _localctx: FileDescriptionEntryClauseContext = new FileDescriptionEntryClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, Cobol85Parser.RULE_fileDescriptionEntryClause);
		try {
			this.state = 2028;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2017;
				this.externalClause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2018;
				this.globalClause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2019;
				this.blockContainsClause();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2020;
				this.recordContainsClause();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2021;
				this.labelRecordsClause();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2022;
				this.valueOfClause();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2023;
				this.dataRecordsClause();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2024;
				this.linageClause();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2025;
				this.codeSetClause();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2026;
				this.reportClause();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2027;
				this.recordingModeClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public externalClause(): ExternalClauseContext {
		let _localctx: ExternalClauseContext = new ExternalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, Cobol85Parser.RULE_externalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2031;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2030;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2033;
			this.match(Cobol85Parser.EXTERNAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public globalClause(): GlobalClauseContext {
		let _localctx: GlobalClauseContext = new GlobalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, Cobol85Parser.RULE_globalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2036;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2035;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2038;
			this.match(Cobol85Parser.GLOBAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockContainsClause(): BlockContainsClauseContext {
		let _localctx: BlockContainsClauseContext = new BlockContainsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, Cobol85Parser.RULE_blockContainsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2040;
			this.match(Cobol85Parser.BLOCK);
			this.state = 2042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CONTAINS) {
				{
				this.state = 2041;
				this.match(Cobol85Parser.CONTAINS);
				}
			}

			this.state = 2044;
			this.integerLiteral();
			this.state = 2046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TO) {
				{
				this.state = 2045;
				this.blockContainsTo();
				}
			}

			this.state = 2049;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.RECORDS) {
				{
				this.state = 2048;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.RECORDS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockContainsTo(): BlockContainsToContext {
		let _localctx: BlockContainsToContext = new BlockContainsToContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, Cobol85Parser.RULE_blockContainsTo);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2051;
			this.match(Cobol85Parser.TO);
			this.state = 2052;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordContainsClause(): RecordContainsClauseContext {
		let _localctx: RecordContainsClauseContext = new RecordContainsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, Cobol85Parser.RULE_recordContainsClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2054;
			this.match(Cobol85Parser.RECORD);
			this.state = 2058;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 177, this._ctx) ) {
			case 1:
				{
				this.state = 2055;
				this.recordContainsClauseFormat1();
				}
				break;

			case 2:
				{
				this.state = 2056;
				this.recordContainsClauseFormat2();
				}
				break;

			case 3:
				{
				this.state = 2057;
				this.recordContainsClauseFormat3();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordContainsClauseFormat1(): RecordContainsClauseFormat1Context {
		let _localctx: RecordContainsClauseFormat1Context = new RecordContainsClauseFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 174, Cobol85Parser.RULE_recordContainsClauseFormat1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CONTAINS) {
				{
				this.state = 2060;
				this.match(Cobol85Parser.CONTAINS);
				}
			}

			this.state = 2063;
			this.integerLiteral();
			this.state = 2065;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTERS) {
				{
				this.state = 2064;
				this.match(Cobol85Parser.CHARACTERS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordContainsClauseFormat2(): RecordContainsClauseFormat2Context {
		let _localctx: RecordContainsClauseFormat2Context = new RecordContainsClauseFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 176, Cobol85Parser.RULE_recordContainsClauseFormat2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2067;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2070;
			this.match(Cobol85Parser.VARYING);
			this.state = 2072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 2071;
				this.match(Cobol85Parser.IN);
				}
			}

			this.state = 2075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIZE) {
				{
				this.state = 2074;
				this.match(Cobol85Parser.SIZE);
				}
			}

			this.state = 2087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FROM || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
				{
				this.state = 2078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.FROM) {
					{
					this.state = 2077;
					this.match(Cobol85Parser.FROM);
					}
				}

				this.state = 2080;
				this.integerLiteral();
				this.state = 2082;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.TO) {
					{
					this.state = 2081;
					this.recordContainsTo();
					}
				}

				this.state = 2085;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.CHARACTERS) {
					{
					this.state = 2084;
					this.match(Cobol85Parser.CHARACTERS);
					}
				}

				}
			}

			this.state = 2094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DEPENDING) {
				{
				this.state = 2089;
				this.match(Cobol85Parser.DEPENDING);
				this.state = 2091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ON) {
					{
					this.state = 2090;
					this.match(Cobol85Parser.ON);
					}
				}

				this.state = 2093;
				this.qualifiedDataName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordContainsClauseFormat3(): RecordContainsClauseFormat3Context {
		let _localctx: RecordContainsClauseFormat3Context = new RecordContainsClauseFormat3Context(this._ctx, this.state);
		this.enterRule(_localctx, 178, Cobol85Parser.RULE_recordContainsClauseFormat3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CONTAINS) {
				{
				this.state = 2096;
				this.match(Cobol85Parser.CONTAINS);
				}
			}

			this.state = 2099;
			this.integerLiteral();
			this.state = 2100;
			this.recordContainsTo();
			this.state = 2102;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTERS) {
				{
				this.state = 2101;
				this.match(Cobol85Parser.CHARACTERS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordContainsTo(): RecordContainsToContext {
		let _localctx: RecordContainsToContext = new RecordContainsToContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, Cobol85Parser.RULE_recordContainsTo);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2104;
			this.match(Cobol85Parser.TO);
			this.state = 2105;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelRecordsClause(): LabelRecordsClauseContext {
		let _localctx: LabelRecordsClauseContext = new LabelRecordsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, Cobol85Parser.RULE_labelRecordsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2107;
			this.match(Cobol85Parser.LABEL);
			this.state = 2116;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.RECORD:
				{
				this.state = 2108;
				this.match(Cobol85Parser.RECORD);
				this.state = 2110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2109;
					this.match(Cobol85Parser.IS);
					}
				}

				}
				break;
			case Cobol85Parser.RECORDS:
				{
				this.state = 2112;
				this.match(Cobol85Parser.RECORDS);
				this.state = 2114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ARE) {
					{
					this.state = 2113;
					this.match(Cobol85Parser.ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2125;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.OMITTED:
				{
				this.state = 2118;
				this.match(Cobol85Parser.OMITTED);
				}
				break;
			case Cobol85Parser.STANDARD:
				{
				this.state = 2119;
				this.match(Cobol85Parser.STANDARD);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2121;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2120;
					this.dataName();
					}
					}
					this.state = 2123;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valueOfClause(): ValueOfClauseContext {
		let _localctx: ValueOfClauseContext = new ValueOfClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, Cobol85Parser.RULE_valueOfClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2127;
			this.match(Cobol85Parser.VALUE);
			this.state = 2128;
			this.match(Cobol85Parser.OF);
			this.state = 2130;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2129;
				this.valuePair();
				}
				}
				this.state = 2132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valuePair(): ValuePairContext {
		let _localctx: ValuePairContext = new ValuePairContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, Cobol85Parser.RULE_valuePair);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2134;
			this.systemName();
			this.state = 2136;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2135;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2140;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 198, this._ctx) ) {
			case 1:
				{
				this.state = 2138;
				this.qualifiedDataName();
				}
				break;

			case 2:
				{
				this.state = 2139;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataRecordsClause(): DataRecordsClauseContext {
		let _localctx: DataRecordsClauseContext = new DataRecordsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, Cobol85Parser.RULE_dataRecordsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2142;
			this.match(Cobol85Parser.DATA);
			this.state = 2151;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.RECORD:
				{
				this.state = 2143;
				this.match(Cobol85Parser.RECORD);
				this.state = 2145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2144;
					this.match(Cobol85Parser.IS);
					}
				}

				}
				break;
			case Cobol85Parser.RECORDS:
				{
				this.state = 2147;
				this.match(Cobol85Parser.RECORDS);
				this.state = 2149;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ARE) {
					{
					this.state = 2148;
					this.match(Cobol85Parser.ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2154;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2153;
				this.dataName();
				}
				}
				this.state = 2156;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linageClause(): LinageClauseContext {
		let _localctx: LinageClauseContext = new LinageClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, Cobol85Parser.RULE_linageClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2158;
			this.match(Cobol85Parser.LINAGE);
			this.state = 2160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2159;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2164;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2162;
				this.dataName();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 2163;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2167;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 205, this._ctx) ) {
			case 1:
				{
				this.state = 2166;
				this.match(Cobol85Parser.LINES);
				}
				break;
			}
			this.state = 2172;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AT || _la === Cobol85Parser.BOTTOM || _la === Cobol85Parser.FOOTING || _la === Cobol85Parser.LINES || _la === Cobol85Parser.TOP || _la === Cobol85Parser.WITH) {
				{
				{
				this.state = 2169;
				this.linageAt();
				}
				}
				this.state = 2174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linageAt(): LinageAtContext {
		let _localctx: LinageAtContext = new LinageAtContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, Cobol85Parser.RULE_linageAt);
		try {
			this.state = 2178;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 207, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2175;
				this.linageFootingAt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2176;
				this.linageLinesAtTop();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2177;
				this.linageLinesAtBottom();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linageFootingAt(): LinageFootingAtContext {
		let _localctx: LinageFootingAtContext = new LinageFootingAtContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, Cobol85Parser.RULE_linageFootingAt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 2180;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 2183;
			this.match(Cobol85Parser.FOOTING);
			this.state = 2185;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT) {
				{
				this.state = 2184;
				this.match(Cobol85Parser.AT);
				}
			}

			this.state = 2189;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2187;
				this.dataName();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 2188;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linageLinesAtTop(): LinageLinesAtTopContext {
		let _localctx: LinageLinesAtTopContext = new LinageLinesAtTopContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, Cobol85Parser.RULE_linageLinesAtTop);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LINES) {
				{
				this.state = 2191;
				this.match(Cobol85Parser.LINES);
				}
			}

			this.state = 2195;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT) {
				{
				this.state = 2194;
				this.match(Cobol85Parser.AT);
				}
			}

			this.state = 2197;
			this.match(Cobol85Parser.TOP);
			this.state = 2200;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2198;
				this.dataName();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 2199;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linageLinesAtBottom(): LinageLinesAtBottomContext {
		let _localctx: LinageLinesAtBottomContext = new LinageLinesAtBottomContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, Cobol85Parser.RULE_linageLinesAtBottom);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2203;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LINES) {
				{
				this.state = 2202;
				this.match(Cobol85Parser.LINES);
				}
			}

			this.state = 2206;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT) {
				{
				this.state = 2205;
				this.match(Cobol85Parser.AT);
				}
			}

			this.state = 2208;
			this.match(Cobol85Parser.BOTTOM);
			this.state = 2211;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2209;
				this.dataName();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 2210;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordingModeClause(): RecordingModeClauseContext {
		let _localctx: RecordingModeClauseContext = new RecordingModeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, Cobol85Parser.RULE_recordingModeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2213;
			this.match(Cobol85Parser.RECORDING);
			this.state = 2215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.MODE) {
				{
				this.state = 2214;
				this.match(Cobol85Parser.MODE);
				}
			}

			this.state = 2218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2217;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2220;
			this.modeStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modeStatement(): ModeStatementContext {
		let _localctx: ModeStatementContext = new ModeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, Cobol85Parser.RULE_modeStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2222;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public codeSetClause(): CodeSetClauseContext {
		let _localctx: CodeSetClauseContext = new CodeSetClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, Cobol85Parser.RULE_codeSetClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2224;
			this.match(Cobol85Parser.CODE_SET);
			this.state = 2226;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2225;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2228;
			this.alphabetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportClause(): ReportClauseContext {
		let _localctx: ReportClauseContext = new ReportClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, Cobol85Parser.RULE_reportClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2238;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.REPORT:
				{
				this.state = 2230;
				this.match(Cobol85Parser.REPORT);
				this.state = 2232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2231;
					this.match(Cobol85Parser.IS);
					}
				}

				}
				break;
			case Cobol85Parser.REPORTS:
				{
				this.state = 2234;
				this.match(Cobol85Parser.REPORTS);
				this.state = 2236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ARE) {
					{
					this.state = 2235;
					this.match(Cobol85Parser.ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2240;
				this.reportName();
				}
				}
				this.state = 2243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataBaseSection(): DataBaseSectionContext {
		let _localctx: DataBaseSectionContext = new DataBaseSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, Cobol85Parser.RULE_dataBaseSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2245;
			this.match(Cobol85Parser.DATA_BASE);
			this.state = 2246;
			this.match(Cobol85Parser.SECTION);
			this.state = 2247;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2251;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
				{
				{
				this.state = 2248;
				this.dataBaseSectionEntry();
				}
				}
				this.state = 2253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataBaseSectionEntry(): DataBaseSectionEntryContext {
		let _localctx: DataBaseSectionEntryContext = new DataBaseSectionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, Cobol85Parser.RULE_dataBaseSectionEntry);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2254;
			this.integerLiteral();
			this.state = 2255;
			this.literal();
			this.state = 2256;
			this.match(Cobol85Parser.INVOKE);
			this.state = 2257;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public workingStorageSection(): WorkingStorageSectionContext {
		let _localctx: WorkingStorageSectionContext = new WorkingStorageSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, Cobol85Parser.RULE_workingStorageSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2259;
			this.match(Cobol85Parser.WORKING_STORAGE);
			this.state = 2260;
			this.match(Cobol85Parser.SECTION);
			this.state = 2261;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
				{
				{
				this.state = 2262;
				this.dataDescriptionEntry();
				}
				}
				this.state = 2267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linkageSection(): LinkageSectionContext {
		let _localctx: LinkageSectionContext = new LinkageSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, Cobol85Parser.RULE_linkageSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2268;
			this.match(Cobol85Parser.LINKAGE);
			this.state = 2269;
			this.match(Cobol85Parser.SECTION);
			this.state = 2270;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
				{
				{
				this.state = 2271;
				this.dataDescriptionEntry();
				}
				}
				this.state = 2276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public communicationSection(): CommunicationSectionContext {
		let _localctx: CommunicationSectionContext = new CommunicationSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, Cobol85Parser.RULE_communicationSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2277;
			this.match(Cobol85Parser.COMMUNICATION);
			this.state = 2278;
			this.match(Cobol85Parser.SECTION);
			this.state = 2279;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.CD || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
				{
				this.state = 2282;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.CD:
					{
					this.state = 2280;
					this.communicationDescriptionEntry();
					}
					break;
				case Cobol85Parser.LEVEL_NUMBER_66:
				case Cobol85Parser.LEVEL_NUMBER_77:
				case Cobol85Parser.LEVEL_NUMBER_88:
				case Cobol85Parser.INTEGERLITERAL:
				case Cobol85Parser.EXECSQLLINE:
					{
					this.state = 2281;
					this.dataDescriptionEntry();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public communicationDescriptionEntry(): CommunicationDescriptionEntryContext {
		let _localctx: CommunicationDescriptionEntryContext = new CommunicationDescriptionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, Cobol85Parser.RULE_communicationDescriptionEntry);
		try {
			this.state = 2290;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2287;
				this.communicationDescriptionEntryFormat1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2288;
				this.communicationDescriptionEntryFormat2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2289;
				this.communicationDescriptionEntryFormat3();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public communicationDescriptionEntryFormat1(): CommunicationDescriptionEntryFormat1Context {
		let _localctx: CommunicationDescriptionEntryFormat1Context = new CommunicationDescriptionEntryFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 220, Cobol85Parser.RULE_communicationDescriptionEntryFormat1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2292;
			this.match(Cobol85Parser.CD);
			this.state = 2293;
			this.cdName();
			this.state = 2295;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 2294;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 2298;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INITIAL) {
				{
				this.state = 2297;
				this.match(Cobol85Parser.INITIAL);
				}
			}

			this.state = 2300;
			this.match(Cobol85Parser.INPUT);
			this.state = 2315;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.COUNT - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)) | (1 << (Cobol85Parser.END - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FILLER - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MESSAGE - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUEUE - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SOURCE - 431)) | (1 << (Cobol85Parser.STATUS - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_1 - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 431)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TEXT - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
				{
				this.state = 2313;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.COUNT:
				case Cobol85Parser.END:
				case Cobol85Parser.MESSAGE:
				case Cobol85Parser.QUEUE:
				case Cobol85Parser.SOURCE:
				case Cobol85Parser.STATUS:
				case Cobol85Parser.SUB_QUEUE_1:
				case Cobol85Parser.SUB_QUEUE_2:
				case Cobol85Parser.SUB_QUEUE_3:
				case Cobol85Parser.SYMBOLIC:
				case Cobol85Parser.TEXT:
					{
					this.state = 2310;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
					case 1:
						{
						this.state = 2301;
						this.symbolicQueueClause();
						}
						break;

					case 2:
						{
						this.state = 2302;
						this.symbolicSubQueueClause();
						}
						break;

					case 3:
						{
						this.state = 2303;
						this.messageDateClause();
						}
						break;

					case 4:
						{
						this.state = 2304;
						this.messageTimeClause();
						}
						break;

					case 5:
						{
						this.state = 2305;
						this.symbolicSourceClause();
						}
						break;

					case 6:
						{
						this.state = 2306;
						this.textLengthClause();
						}
						break;

					case 7:
						{
						this.state = 2307;
						this.endKeyClause();
						}
						break;

					case 8:
						{
						this.state = 2308;
						this.statusKeyClause();
						}
						break;

					case 9:
						{
						this.state = 2309;
						this.messageCountClause();
						}
						break;
					}
					}
					break;
				case Cobol85Parser.ABORT:
				case Cobol85Parser.AS:
				case Cobol85Parser.ASCII:
				case Cobol85Parser.ASSOCIATED_DATA:
				case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
				case Cobol85Parser.ATTRIBUTE:
				case Cobol85Parser.AUTO:
				case Cobol85Parser.AUTO_SKIP:
				case Cobol85Parser.BACKGROUND_COLOR:
				case Cobol85Parser.BACKGROUND_COLOUR:
				case Cobol85Parser.BEEP:
				case Cobol85Parser.BELL:
				case Cobol85Parser.BINARY:
				case Cobol85Parser.BIT:
				case Cobol85Parser.BLINK:
				case Cobol85Parser.BOUNDS:
				case Cobol85Parser.CAPABLE:
				case Cobol85Parser.CCSVERSION:
				case Cobol85Parser.CHANGED:
				case Cobol85Parser.CHANNEL:
				case Cobol85Parser.CLOSE_DISPOSITION:
				case Cobol85Parser.COBOL:
				case Cobol85Parser.COMMITMENT:
				case Cobol85Parser.CONTROL_POINT:
				case Cobol85Parser.CONVENTION:
				case Cobol85Parser.CRUNCH:
				case Cobol85Parser.CURSOR:
				case Cobol85Parser.DEFAULT:
				case Cobol85Parser.DEFAULT_DISPLAY:
				case Cobol85Parser.DEFINITION:
				case Cobol85Parser.DFHRESP:
				case Cobol85Parser.DFHVALUE:
				case Cobol85Parser.DISK:
				case Cobol85Parser.DONTCARE:
				case Cobol85Parser.DOUBLE:
				case Cobol85Parser.EBCDIC:
				case Cobol85Parser.EMPTY_CHECK:
				case Cobol85Parser.ENTER:
				case Cobol85Parser.ENTRY_PROCEDURE:
				case Cobol85Parser.ERASE:
				case Cobol85Parser.EOL:
				case Cobol85Parser.EOS:
				case Cobol85Parser.ESCAPE:
				case Cobol85Parser.EVENT:
				case Cobol85Parser.EXCLUSIVE:
				case Cobol85Parser.EXPORT:
				case Cobol85Parser.EXTENDED:
				case Cobol85Parser.FILLER:
				case Cobol85Parser.FOREGROUND_COLOR:
				case Cobol85Parser.FOREGROUND_COLOUR:
				case Cobol85Parser.FULL:
				case Cobol85Parser.FUNCTIONNAME:
				case Cobol85Parser.FUNCTION_POINTER:
				case Cobol85Parser.GRID:
				case Cobol85Parser.HIGHLIGHT:
				case Cobol85Parser.IMPLICIT:
				case Cobol85Parser.IMPORT:
				case Cobol85Parser.INTEGER:
				case Cobol85Parser.KEPT:
				case Cobol85Parser.KEYBOARD:
				case Cobol85Parser.LANGUAGE:
				case Cobol85Parser.LB:
				case Cobol85Parser.LD:
				case Cobol85Parser.LEFTLINE:
				case Cobol85Parser.LENGTH_CHECK:
				case Cobol85Parser.LIBACCESS:
				case Cobol85Parser.LIBPARAMETER:
				case Cobol85Parser.LIBRARY:
				case Cobol85Parser.LIST:
				case Cobol85Parser.LOCAL:
				case Cobol85Parser.LONG_DATE:
				case Cobol85Parser.LONG_TIME:
				case Cobol85Parser.LOWER:
				case Cobol85Parser.LOWLIGHT:
				case Cobol85Parser.MMDDYYYY:
				case Cobol85Parser.NAMED:
				case Cobol85Parser.NATIONAL:
				case Cobol85Parser.NATIONAL_EDITED:
				case Cobol85Parser.NETWORK:
				case Cobol85Parser.NO_ECHO:
				case Cobol85Parser.NUMERIC_DATE:
				case Cobol85Parser.NUMERIC_TIME:
				case Cobol85Parser.ODT:
				case Cobol85Parser.ORDERLY:
				case Cobol85Parser.OVERLINE:
				case Cobol85Parser.OWN:
				case Cobol85Parser.PASSWORD:
				case Cobol85Parser.PORT:
				case Cobol85Parser.PRINTER:
				case Cobol85Parser.PRIVATE:
				case Cobol85Parser.PROCESS:
				case Cobol85Parser.PROGRAM:
				case Cobol85Parser.PROMPT:
				case Cobol85Parser.READER:
				case Cobol85Parser.REMOTE:
				case Cobol85Parser.REAL:
				case Cobol85Parser.RECEIVED:
				case Cobol85Parser.RECURSIVE:
				case Cobol85Parser.REF:
				case Cobol85Parser.REMOVE:
				case Cobol85Parser.REQUIRED:
				case Cobol85Parser.REVERSE_VIDEO:
				case Cobol85Parser.SAVE:
				case Cobol85Parser.SECURE:
				case Cobol85Parser.SHARED:
				case Cobol85Parser.SHAREDBYALL:
				case Cobol85Parser.SHAREDBYRUNUNIT:
				case Cobol85Parser.SHARING:
				case Cobol85Parser.SHORT_DATE:
				case Cobol85Parser.SYMBOL:
				case Cobol85Parser.TASK:
				case Cobol85Parser.THREAD:
				case Cobol85Parser.THREAD_LOCAL:
				case Cobol85Parser.TIMER:
				case Cobol85Parser.TODAYS_DATE:
				case Cobol85Parser.TODAYS_NAME:
				case Cobol85Parser.TRUNCATED:
				case Cobol85Parser.TYPEDEF:
				case Cobol85Parser.UNDERLINE:
				case Cobol85Parser.VIRTUAL:
				case Cobol85Parser.WAIT:
				case Cobol85Parser.YEAR:
				case Cobol85Parser.YYYYMMDD:
				case Cobol85Parser.YYYYDDD:
				case Cobol85Parser.ZERO_FILL:
				case Cobol85Parser.IDENTIFIER:
					{
					this.state = 2312;
					this.dataDescName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2318;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public communicationDescriptionEntryFormat2(): CommunicationDescriptionEntryFormat2Context {
		let _localctx: CommunicationDescriptionEntryFormat2Context = new CommunicationDescriptionEntryFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 222, Cobol85Parser.RULE_communicationDescriptionEntryFormat2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2320;
			this.match(Cobol85Parser.CD);
			this.state = 2321;
			this.cdName();
			this.state = 2323;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 2322;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 2325;
			this.match(Cobol85Parser.OUTPUT);
			this.state = 2334;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.DESTINATION || _la === Cobol85Parser.ERROR || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & ((1 << (Cobol85Parser.STATUS - 457)) | (1 << (Cobol85Parser.SYMBOLIC - 457)) | (1 << (Cobol85Parser.TEXT - 457)))) !== 0)) {
				{
				this.state = 2332;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 236, this._ctx) ) {
				case 1:
					{
					this.state = 2326;
					this.destinationCountClause();
					}
					break;

				case 2:
					{
					this.state = 2327;
					this.textLengthClause();
					}
					break;

				case 3:
					{
					this.state = 2328;
					this.statusKeyClause();
					}
					break;

				case 4:
					{
					this.state = 2329;
					this.destinationTableClause();
					}
					break;

				case 5:
					{
					this.state = 2330;
					this.errorKeyClause();
					}
					break;

				case 6:
					{
					this.state = 2331;
					this.symbolicDestinationClause();
					}
					break;
				}
				}
				this.state = 2336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2337;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public communicationDescriptionEntryFormat3(): CommunicationDescriptionEntryFormat3Context {
		let _localctx: CommunicationDescriptionEntryFormat3Context = new CommunicationDescriptionEntryFormat3Context(this._ctx, this.state);
		this.enterRule(_localctx, 224, Cobol85Parser.RULE_communicationDescriptionEntryFormat3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2339;
			this.match(Cobol85Parser.CD);
			this.state = 2340;
			this.cdName();
			this.state = 2342;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 2341;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 2344;
			this.match(Cobol85Parser.INITIAL);
			this.state = 2345;
			this.match(Cobol85Parser.I_O);
			this.state = 2357;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)) | (1 << (Cobol85Parser.END - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FILLER - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MESSAGE - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.STATUS - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.SYMBOLIC - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TERMINAL - 466)) | (1 << (Cobol85Parser.TEXT - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
				{
				this.state = 2355;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.END:
				case Cobol85Parser.MESSAGE:
				case Cobol85Parser.STATUS:
				case Cobol85Parser.SYMBOLIC:
				case Cobol85Parser.TERMINAL:
				case Cobol85Parser.TEXT:
					{
					this.state = 2352;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 239, this._ctx) ) {
					case 1:
						{
						this.state = 2346;
						this.messageDateClause();
						}
						break;

					case 2:
						{
						this.state = 2347;
						this.messageTimeClause();
						}
						break;

					case 3:
						{
						this.state = 2348;
						this.symbolicTerminalClause();
						}
						break;

					case 4:
						{
						this.state = 2349;
						this.textLengthClause();
						}
						break;

					case 5:
						{
						this.state = 2350;
						this.endKeyClause();
						}
						break;

					case 6:
						{
						this.state = 2351;
						this.statusKeyClause();
						}
						break;
					}
					}
					break;
				case Cobol85Parser.ABORT:
				case Cobol85Parser.AS:
				case Cobol85Parser.ASCII:
				case Cobol85Parser.ASSOCIATED_DATA:
				case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
				case Cobol85Parser.ATTRIBUTE:
				case Cobol85Parser.AUTO:
				case Cobol85Parser.AUTO_SKIP:
				case Cobol85Parser.BACKGROUND_COLOR:
				case Cobol85Parser.BACKGROUND_COLOUR:
				case Cobol85Parser.BEEP:
				case Cobol85Parser.BELL:
				case Cobol85Parser.BINARY:
				case Cobol85Parser.BIT:
				case Cobol85Parser.BLINK:
				case Cobol85Parser.BOUNDS:
				case Cobol85Parser.CAPABLE:
				case Cobol85Parser.CCSVERSION:
				case Cobol85Parser.CHANGED:
				case Cobol85Parser.CHANNEL:
				case Cobol85Parser.CLOSE_DISPOSITION:
				case Cobol85Parser.COBOL:
				case Cobol85Parser.COMMITMENT:
				case Cobol85Parser.CONTROL_POINT:
				case Cobol85Parser.CONVENTION:
				case Cobol85Parser.CRUNCH:
				case Cobol85Parser.CURSOR:
				case Cobol85Parser.DEFAULT:
				case Cobol85Parser.DEFAULT_DISPLAY:
				case Cobol85Parser.DEFINITION:
				case Cobol85Parser.DFHRESP:
				case Cobol85Parser.DFHVALUE:
				case Cobol85Parser.DISK:
				case Cobol85Parser.DONTCARE:
				case Cobol85Parser.DOUBLE:
				case Cobol85Parser.EBCDIC:
				case Cobol85Parser.EMPTY_CHECK:
				case Cobol85Parser.ENTER:
				case Cobol85Parser.ENTRY_PROCEDURE:
				case Cobol85Parser.ERASE:
				case Cobol85Parser.EOL:
				case Cobol85Parser.EOS:
				case Cobol85Parser.ESCAPE:
				case Cobol85Parser.EVENT:
				case Cobol85Parser.EXCLUSIVE:
				case Cobol85Parser.EXPORT:
				case Cobol85Parser.EXTENDED:
				case Cobol85Parser.FILLER:
				case Cobol85Parser.FOREGROUND_COLOR:
				case Cobol85Parser.FOREGROUND_COLOUR:
				case Cobol85Parser.FULL:
				case Cobol85Parser.FUNCTIONNAME:
				case Cobol85Parser.FUNCTION_POINTER:
				case Cobol85Parser.GRID:
				case Cobol85Parser.HIGHLIGHT:
				case Cobol85Parser.IMPLICIT:
				case Cobol85Parser.IMPORT:
				case Cobol85Parser.INTEGER:
				case Cobol85Parser.KEPT:
				case Cobol85Parser.KEYBOARD:
				case Cobol85Parser.LANGUAGE:
				case Cobol85Parser.LB:
				case Cobol85Parser.LD:
				case Cobol85Parser.LEFTLINE:
				case Cobol85Parser.LENGTH_CHECK:
				case Cobol85Parser.LIBACCESS:
				case Cobol85Parser.LIBPARAMETER:
				case Cobol85Parser.LIBRARY:
				case Cobol85Parser.LIST:
				case Cobol85Parser.LOCAL:
				case Cobol85Parser.LONG_DATE:
				case Cobol85Parser.LONG_TIME:
				case Cobol85Parser.LOWER:
				case Cobol85Parser.LOWLIGHT:
				case Cobol85Parser.MMDDYYYY:
				case Cobol85Parser.NAMED:
				case Cobol85Parser.NATIONAL:
				case Cobol85Parser.NATIONAL_EDITED:
				case Cobol85Parser.NETWORK:
				case Cobol85Parser.NO_ECHO:
				case Cobol85Parser.NUMERIC_DATE:
				case Cobol85Parser.NUMERIC_TIME:
				case Cobol85Parser.ODT:
				case Cobol85Parser.ORDERLY:
				case Cobol85Parser.OVERLINE:
				case Cobol85Parser.OWN:
				case Cobol85Parser.PASSWORD:
				case Cobol85Parser.PORT:
				case Cobol85Parser.PRINTER:
				case Cobol85Parser.PRIVATE:
				case Cobol85Parser.PROCESS:
				case Cobol85Parser.PROGRAM:
				case Cobol85Parser.PROMPT:
				case Cobol85Parser.READER:
				case Cobol85Parser.REMOTE:
				case Cobol85Parser.REAL:
				case Cobol85Parser.RECEIVED:
				case Cobol85Parser.RECURSIVE:
				case Cobol85Parser.REF:
				case Cobol85Parser.REMOVE:
				case Cobol85Parser.REQUIRED:
				case Cobol85Parser.REVERSE_VIDEO:
				case Cobol85Parser.SAVE:
				case Cobol85Parser.SECURE:
				case Cobol85Parser.SHARED:
				case Cobol85Parser.SHAREDBYALL:
				case Cobol85Parser.SHAREDBYRUNUNIT:
				case Cobol85Parser.SHARING:
				case Cobol85Parser.SHORT_DATE:
				case Cobol85Parser.SYMBOL:
				case Cobol85Parser.TASK:
				case Cobol85Parser.THREAD:
				case Cobol85Parser.THREAD_LOCAL:
				case Cobol85Parser.TIMER:
				case Cobol85Parser.TODAYS_DATE:
				case Cobol85Parser.TODAYS_NAME:
				case Cobol85Parser.TRUNCATED:
				case Cobol85Parser.TYPEDEF:
				case Cobol85Parser.UNDERLINE:
				case Cobol85Parser.VIRTUAL:
				case Cobol85Parser.WAIT:
				case Cobol85Parser.YEAR:
				case Cobol85Parser.YYYYMMDD:
				case Cobol85Parser.YYYYDDD:
				case Cobol85Parser.ZERO_FILL:
				case Cobol85Parser.IDENTIFIER:
					{
					this.state = 2354;
					this.dataDescName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2359;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2360;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public destinationCountClause(): DestinationCountClauseContext {
		let _localctx: DestinationCountClauseContext = new DestinationCountClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, Cobol85Parser.RULE_destinationCountClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2362;
			this.match(Cobol85Parser.DESTINATION);
			this.state = 2363;
			this.match(Cobol85Parser.COUNT);
			this.state = 2365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2364;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2367;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public destinationTableClause(): DestinationTableClauseContext {
		let _localctx: DestinationTableClauseContext = new DestinationTableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, Cobol85Parser.RULE_destinationTableClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2369;
			this.match(Cobol85Parser.DESTINATION);
			this.state = 2370;
			this.match(Cobol85Parser.TABLE);
			this.state = 2371;
			this.match(Cobol85Parser.OCCURS);
			this.state = 2372;
			this.integerLiteral();
			this.state = 2373;
			this.match(Cobol85Parser.TIMES);
			this.state = 2381;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INDEXED) {
				{
				this.state = 2374;
				this.match(Cobol85Parser.INDEXED);
				this.state = 2375;
				this.match(Cobol85Parser.BY);
				this.state = 2377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2376;
					this.indexName();
					}
					}
					this.state = 2379;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public endKeyClause(): EndKeyClauseContext {
		let _localctx: EndKeyClauseContext = new EndKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, Cobol85Parser.RULE_endKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2383;
			this.match(Cobol85Parser.END);
			this.state = 2384;
			this.match(Cobol85Parser.KEY);
			this.state = 2386;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2385;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2388;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public errorKeyClause(): ErrorKeyClauseContext {
		let _localctx: ErrorKeyClauseContext = new ErrorKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, Cobol85Parser.RULE_errorKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2390;
			this.match(Cobol85Parser.ERROR);
			this.state = 2391;
			this.match(Cobol85Parser.KEY);
			this.state = 2393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2392;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2395;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public messageCountClause(): MessageCountClauseContext {
		let _localctx: MessageCountClauseContext = new MessageCountClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, Cobol85Parser.RULE_messageCountClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2398;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.MESSAGE) {
				{
				this.state = 2397;
				this.match(Cobol85Parser.MESSAGE);
				}
			}

			this.state = 2400;
			this.match(Cobol85Parser.COUNT);
			this.state = 2402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2401;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2404;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public messageDateClause(): MessageDateClauseContext {
		let _localctx: MessageDateClauseContext = new MessageDateClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, Cobol85Parser.RULE_messageDateClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2406;
			this.match(Cobol85Parser.MESSAGE);
			this.state = 2407;
			this.match(Cobol85Parser.DATE);
			this.state = 2409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2408;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2411;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public messageTimeClause(): MessageTimeClauseContext {
		let _localctx: MessageTimeClauseContext = new MessageTimeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, Cobol85Parser.RULE_messageTimeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2413;
			this.match(Cobol85Parser.MESSAGE);
			this.state = 2414;
			this.match(Cobol85Parser.TIME);
			this.state = 2416;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2415;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2418;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statusKeyClause(): StatusKeyClauseContext {
		let _localctx: StatusKeyClauseContext = new StatusKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, Cobol85Parser.RULE_statusKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2420;
			this.match(Cobol85Parser.STATUS);
			this.state = 2421;
			this.match(Cobol85Parser.KEY);
			this.state = 2423;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2422;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2425;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicDestinationClause(): SymbolicDestinationClauseContext {
		let _localctx: SymbolicDestinationClauseContext = new SymbolicDestinationClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, Cobol85Parser.RULE_symbolicDestinationClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2428;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SYMBOLIC) {
				{
				this.state = 2427;
				this.match(Cobol85Parser.SYMBOLIC);
				}
			}

			this.state = 2430;
			this.match(Cobol85Parser.DESTINATION);
			this.state = 2432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2431;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2434;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicQueueClause(): SymbolicQueueClauseContext {
		let _localctx: SymbolicQueueClauseContext = new SymbolicQueueClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, Cobol85Parser.RULE_symbolicQueueClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2437;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SYMBOLIC) {
				{
				this.state = 2436;
				this.match(Cobol85Parser.SYMBOLIC);
				}
			}

			this.state = 2439;
			this.match(Cobol85Parser.QUEUE);
			this.state = 2441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2440;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2443;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicSourceClause(): SymbolicSourceClauseContext {
		let _localctx: SymbolicSourceClauseContext = new SymbolicSourceClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, Cobol85Parser.RULE_symbolicSourceClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2446;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SYMBOLIC) {
				{
				this.state = 2445;
				this.match(Cobol85Parser.SYMBOLIC);
				}
			}

			this.state = 2448;
			this.match(Cobol85Parser.SOURCE);
			this.state = 2450;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2449;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2452;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicTerminalClause(): SymbolicTerminalClauseContext {
		let _localctx: SymbolicTerminalClauseContext = new SymbolicTerminalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, Cobol85Parser.RULE_symbolicTerminalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SYMBOLIC) {
				{
				this.state = 2454;
				this.match(Cobol85Parser.SYMBOLIC);
				}
			}

			this.state = 2457;
			this.match(Cobol85Parser.TERMINAL);
			this.state = 2459;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2458;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2461;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicSubQueueClause(): SymbolicSubQueueClauseContext {
		let _localctx: SymbolicSubQueueClauseContext = new SymbolicSubQueueClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, Cobol85Parser.RULE_symbolicSubQueueClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SYMBOLIC) {
				{
				this.state = 2463;
				this.match(Cobol85Parser.SYMBOLIC);
				}
			}

			this.state = 2466;
			_la = this._input.LA(1);
			if (!(((((_la - 460)) & ~0x1F) === 0 && ((1 << (_la - 460)) & ((1 << (Cobol85Parser.SUB_QUEUE_1 - 460)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 460)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 460)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2468;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2467;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2470;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textLengthClause(): TextLengthClauseContext {
		let _localctx: TextLengthClauseContext = new TextLengthClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, Cobol85Parser.RULE_textLengthClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2472;
			this.match(Cobol85Parser.TEXT);
			this.state = 2473;
			this.match(Cobol85Parser.LENGTH);
			this.state = 2475;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2474;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2477;
			this.dataDescName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public localStorageSection(): LocalStorageSectionContext {
		let _localctx: LocalStorageSectionContext = new LocalStorageSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, Cobol85Parser.RULE_localStorageSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2479;
			this.match(Cobol85Parser.LOCAL_STORAGE);
			this.state = 2480;
			this.match(Cobol85Parser.SECTION);
			this.state = 2481;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LD) {
				{
				this.state = 2482;
				this.match(Cobol85Parser.LD);
				this.state = 2483;
				this.localName();
				this.state = 2484;
				this.match(Cobol85Parser.DOT_FS);
				}
			}

			this.state = 2491;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.EXECSQLLINE - 552)))) !== 0)) {
				{
				{
				this.state = 2488;
				this.dataDescriptionEntry();
				}
				}
				this.state = 2493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenSection(): ScreenSectionContext {
		let _localctx: ScreenSectionContext = new ScreenSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, Cobol85Parser.RULE_screenSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2494;
			this.match(Cobol85Parser.SCREEN);
			this.state = 2495;
			this.match(Cobol85Parser.SECTION);
			this.state = 2496;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.INTEGERLITERAL) {
				{
				{
				this.state = 2497;
				this.screenDescriptionEntry();
				}
				}
				this.state = 2502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionEntry(): ScreenDescriptionEntryContext {
		let _localctx: ScreenDescriptionEntryContext = new ScreenDescriptionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, Cobol85Parser.RULE_screenDescriptionEntry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2503;
			this.match(Cobol85Parser.INTEGERLITERAL);
			this.state = 2506;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 266, this._ctx) ) {
			case 1:
				{
				this.state = 2504;
				this.match(Cobol85Parser.FILLER);
				}
				break;

			case 2:
				{
				this.state = 2505;
				this.screenName();
				}
				break;
			}
			this.state = 2540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BLANK - 33)) | (1 << (Cobol85Parser.BLINK - 33)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (Cobol85Parser.COL - 73)) | (1 << (Cobol85Parser.COLUMN - 73)) | (1 << (Cobol85Parser.CONTROL - 73)))) !== 0) || _la === Cobol85Parser.EMPTY_CHECK || _la === Cobol85Parser.ERASE || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FROM - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)))) !== 0) || ((((_la - 255)) & ~0x1F) === 0 && ((1 << (_la - 255)) & ((1 << (Cobol85Parser.JUST - 255)) | (1 << (Cobol85Parser.JUSTIFIED - 255)) | (1 << (Cobol85Parser.LEADING - 255)) | (1 << (Cobol85Parser.LEFTLINE - 255)) | (1 << (Cobol85Parser.LENGTH_CHECK - 255)) | (1 << (Cobol85Parser.LINE - 255)))) !== 0) || _la === Cobol85Parser.LOWLIGHT || _la === Cobol85Parser.NO_ECHO || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (Cobol85Parser.OVERLINE - 336)) | (1 << (Cobol85Parser.PIC - 336)) | (1 << (Cobol85Parser.PICTURE - 336)) | (1 << (Cobol85Parser.PROMPT - 336)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (Cobol85Parser.REQUIRED - 398)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 398)) | (1 << (Cobol85Parser.SECURE - 398)))) !== 0) || _la === Cobol85Parser.SIGN || _la === Cobol85Parser.SIZE || ((((_la - 493)) & ~0x1F) === 0 && ((1 << (_la - 493)) & ((1 << (Cobol85Parser.TRAILING - 493)) | (1 << (Cobol85Parser.UNDERLINE - 493)) | (1 << (Cobol85Parser.USAGE - 493)) | (1 << (Cobol85Parser.USING - 493)) | (1 << (Cobol85Parser.VALUE - 493)) | (1 << (Cobol85Parser.ZERO_FILL - 493)))) !== 0)) {
				{
				this.state = 2538;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 268, this._ctx) ) {
				case 1:
					{
					this.state = 2508;
					this.screenDescriptionBlankClause();
					}
					break;

				case 2:
					{
					this.state = 2509;
					this.screenDescriptionBellClause();
					}
					break;

				case 3:
					{
					this.state = 2510;
					this.screenDescriptionBlinkClause();
					}
					break;

				case 4:
					{
					this.state = 2511;
					this.screenDescriptionEraseClause();
					}
					break;

				case 5:
					{
					this.state = 2512;
					this.screenDescriptionLightClause();
					}
					break;

				case 6:
					{
					this.state = 2513;
					this.screenDescriptionGridClause();
					}
					break;

				case 7:
					{
					this.state = 2514;
					this.screenDescriptionReverseVideoClause();
					}
					break;

				case 8:
					{
					this.state = 2515;
					this.screenDescriptionUnderlineClause();
					}
					break;

				case 9:
					{
					this.state = 2516;
					this.screenDescriptionSizeClause();
					}
					break;

				case 10:
					{
					this.state = 2517;
					this.screenDescriptionLineClause();
					}
					break;

				case 11:
					{
					this.state = 2518;
					this.screenDescriptionColumnClause();
					}
					break;

				case 12:
					{
					this.state = 2519;
					this.screenDescriptionForegroundColorClause();
					}
					break;

				case 13:
					{
					this.state = 2520;
					this.screenDescriptionBackgroundColorClause();
					}
					break;

				case 14:
					{
					this.state = 2521;
					this.screenDescriptionControlClause();
					}
					break;

				case 15:
					{
					this.state = 2522;
					this.screenDescriptionValueClause();
					}
					break;

				case 16:
					{
					this.state = 2523;
					this.screenDescriptionPictureClause();
					}
					break;

				case 17:
					{
					this.state = 2526;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case Cobol85Parser.FROM:
						{
						this.state = 2524;
						this.screenDescriptionFromClause();
						}
						break;
					case Cobol85Parser.USING:
						{
						this.state = 2525;
						this.screenDescriptionUsingClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 18:
					{
					this.state = 2528;
					this.screenDescriptionUsageClause();
					}
					break;

				case 19:
					{
					this.state = 2529;
					this.screenDescriptionBlankWhenZeroClause();
					}
					break;

				case 20:
					{
					this.state = 2530;
					this.screenDescriptionJustifiedClause();
					}
					break;

				case 21:
					{
					this.state = 2531;
					this.screenDescriptionSignClause();
					}
					break;

				case 22:
					{
					this.state = 2532;
					this.screenDescriptionAutoClause();
					}
					break;

				case 23:
					{
					this.state = 2533;
					this.screenDescriptionSecureClause();
					}
					break;

				case 24:
					{
					this.state = 2534;
					this.screenDescriptionRequiredClause();
					}
					break;

				case 25:
					{
					this.state = 2535;
					this.screenDescriptionPromptClause();
					}
					break;

				case 26:
					{
					this.state = 2536;
					this.screenDescriptionFullClause();
					}
					break;

				case 27:
					{
					this.state = 2537;
					this.screenDescriptionZeroFillClause();
					}
					break;
				}
				}
				this.state = 2542;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2543;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionBlankClause(): ScreenDescriptionBlankClauseContext {
		let _localctx: ScreenDescriptionBlankClauseContext = new ScreenDescriptionBlankClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, Cobol85Parser.RULE_screenDescriptionBlankClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2545;
			this.match(Cobol85Parser.BLANK);
			this.state = 2546;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.SCREEN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionBellClause(): ScreenDescriptionBellClauseContext {
		let _localctx: ScreenDescriptionBellClauseContext = new ScreenDescriptionBellClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, Cobol85Parser.RULE_screenDescriptionBellClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2548;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.BEEP || _la === Cobol85Parser.BELL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionBlinkClause(): ScreenDescriptionBlinkClauseContext {
		let _localctx: ScreenDescriptionBlinkClauseContext = new ScreenDescriptionBlinkClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, Cobol85Parser.RULE_screenDescriptionBlinkClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2550;
			this.match(Cobol85Parser.BLINK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionEraseClause(): ScreenDescriptionEraseClauseContext {
		let _localctx: ScreenDescriptionEraseClauseContext = new ScreenDescriptionEraseClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, Cobol85Parser.RULE_screenDescriptionEraseClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2552;
			this.match(Cobol85Parser.ERASE);
			this.state = 2553;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.EOL || _la === Cobol85Parser.EOS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionLightClause(): ScreenDescriptionLightClauseContext {
		let _localctx: ScreenDescriptionLightClauseContext = new ScreenDescriptionLightClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, Cobol85Parser.RULE_screenDescriptionLightClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2555;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.HIGHLIGHT || _la === Cobol85Parser.LOWLIGHT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionGridClause(): ScreenDescriptionGridClauseContext {
		let _localctx: ScreenDescriptionGridClauseContext = new ScreenDescriptionGridClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, Cobol85Parser.RULE_screenDescriptionGridClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2557;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.GRID || _la === Cobol85Parser.LEFTLINE || _la === Cobol85Parser.OVERLINE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionReverseVideoClause(): ScreenDescriptionReverseVideoClauseContext {
		let _localctx: ScreenDescriptionReverseVideoClauseContext = new ScreenDescriptionReverseVideoClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, Cobol85Parser.RULE_screenDescriptionReverseVideoClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2559;
			this.match(Cobol85Parser.REVERSE_VIDEO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionUnderlineClause(): ScreenDescriptionUnderlineClauseContext {
		let _localctx: ScreenDescriptionUnderlineClauseContext = new ScreenDescriptionUnderlineClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, Cobol85Parser.RULE_screenDescriptionUnderlineClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2561;
			this.match(Cobol85Parser.UNDERLINE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionSizeClause(): ScreenDescriptionSizeClauseContext {
		let _localctx: ScreenDescriptionSizeClauseContext = new ScreenDescriptionSizeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, Cobol85Parser.RULE_screenDescriptionSizeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2563;
			this.match(Cobol85Parser.SIZE);
			this.state = 2565;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2564;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2569;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 271, this._ctx) ) {
			case 1:
				{
				this.state = 2567;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2568;
				this.integerLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionLineClause(): ScreenDescriptionLineClauseContext {
		let _localctx: ScreenDescriptionLineClauseContext = new ScreenDescriptionLineClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, Cobol85Parser.RULE_screenDescriptionLineClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2571;
			this.match(Cobol85Parser.LINE);
			this.state = 2579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR) {
				{
				this.state = 2573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.NUMBER) {
					{
					this.state = 2572;
					this.match(Cobol85Parser.NUMBER);
					}
				}

				this.state = 2576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2575;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 2578;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2583;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 275, this._ctx) ) {
			case 1:
				{
				this.state = 2581;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2582;
				this.integerLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionColumnClause(): ScreenDescriptionColumnClauseContext {
		let _localctx: ScreenDescriptionColumnClauseContext = new ScreenDescriptionColumnClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, Cobol85Parser.RULE_screenDescriptionColumnClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2585;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.COL || _la === Cobol85Parser.COLUMN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR) {
				{
				this.state = 2587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.NUMBER) {
					{
					this.state = 2586;
					this.match(Cobol85Parser.NUMBER);
					}
				}

				this.state = 2590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2589;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 2592;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.PLUS || _la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2597;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				{
				this.state = 2595;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2596;
				this.integerLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionForegroundColorClause(): ScreenDescriptionForegroundColorClauseContext {
		let _localctx: ScreenDescriptionForegroundColorClauseContext = new ScreenDescriptionForegroundColorClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, Cobol85Parser.RULE_screenDescriptionForegroundColorClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2599;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.FOREGROUND_COLOR || _la === Cobol85Parser.FOREGROUND_COLOUR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2600;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2605;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 281, this._ctx) ) {
			case 1:
				{
				this.state = 2603;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2604;
				this.integerLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionBackgroundColorClause(): ScreenDescriptionBackgroundColorClauseContext {
		let _localctx: ScreenDescriptionBackgroundColorClauseContext = new ScreenDescriptionBackgroundColorClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, Cobol85Parser.RULE_screenDescriptionBackgroundColorClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2607;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.BACKGROUND_COLOR || _la === Cobol85Parser.BACKGROUND_COLOUR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2609;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2608;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2613;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 283, this._ctx) ) {
			case 1:
				{
				this.state = 2611;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2612;
				this.integerLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionControlClause(): ScreenDescriptionControlClauseContext {
		let _localctx: ScreenDescriptionControlClauseContext = new ScreenDescriptionControlClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, Cobol85Parser.RULE_screenDescriptionControlClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2615;
			this.match(Cobol85Parser.CONTROL);
			this.state = 2617;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2616;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2619;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionValueClause(): ScreenDescriptionValueClauseContext {
		let _localctx: ScreenDescriptionValueClauseContext = new ScreenDescriptionValueClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, Cobol85Parser.RULE_screenDescriptionValueClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			{
			this.state = 2621;
			this.match(Cobol85Parser.VALUE);
			this.state = 2623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2622;
				this.match(Cobol85Parser.IS);
				}
			}

			}
			this.state = 2625;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionPictureClause(): ScreenDescriptionPictureClauseContext {
		let _localctx: ScreenDescriptionPictureClauseContext = new ScreenDescriptionPictureClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, Cobol85Parser.RULE_screenDescriptionPictureClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2627;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2628;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2631;
			this.pictureString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionFromClause(): ScreenDescriptionFromClauseContext {
		let _localctx: ScreenDescriptionFromClauseContext = new ScreenDescriptionFromClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, Cobol85Parser.RULE_screenDescriptionFromClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2633;
			this.match(Cobol85Parser.FROM);
			this.state = 2636;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
			case 1:
				{
				this.state = 2634;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2635;
				this.literal();
				}
				break;
			}
			this.state = 2639;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TO) {
				{
				this.state = 2638;
				this.screenDescriptionToClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionToClause(): ScreenDescriptionToClauseContext {
		let _localctx: ScreenDescriptionToClauseContext = new ScreenDescriptionToClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, Cobol85Parser.RULE_screenDescriptionToClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2641;
			this.match(Cobol85Parser.TO);
			this.state = 2642;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionUsingClause(): ScreenDescriptionUsingClauseContext {
		let _localctx: ScreenDescriptionUsingClauseContext = new ScreenDescriptionUsingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, Cobol85Parser.RULE_screenDescriptionUsingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2644;
			this.match(Cobol85Parser.USING);
			this.state = 2645;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionUsageClause(): ScreenDescriptionUsageClauseContext {
		let _localctx: ScreenDescriptionUsageClauseContext = new ScreenDescriptionUsageClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, Cobol85Parser.RULE_screenDescriptionUsageClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			{
			this.state = 2647;
			this.match(Cobol85Parser.USAGE);
			this.state = 2649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2648;
				this.match(Cobol85Parser.IS);
				}
			}

			}
			this.state = 2651;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionBlankWhenZeroClause(): ScreenDescriptionBlankWhenZeroClauseContext {
		let _localctx: ScreenDescriptionBlankWhenZeroClauseContext = new ScreenDescriptionBlankWhenZeroClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2653;
			this.match(Cobol85Parser.BLANK);
			this.state = 2655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WHEN) {
				{
				this.state = 2654;
				this.match(Cobol85Parser.WHEN);
				}
			}

			this.state = 2657;
			this.match(Cobol85Parser.ZERO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionJustifiedClause(): ScreenDescriptionJustifiedClauseContext {
		let _localctx: ScreenDescriptionJustifiedClauseContext = new ScreenDescriptionJustifiedClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, Cobol85Parser.RULE_screenDescriptionJustifiedClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2659;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.JUST || _la === Cobol85Parser.JUSTIFIED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RIGHT) {
				{
				this.state = 2660;
				this.match(Cobol85Parser.RIGHT);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionSignClause(): ScreenDescriptionSignClauseContext {
		let _localctx: ScreenDescriptionSignClauseContext = new ScreenDescriptionSignClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, Cobol85Parser.RULE_screenDescriptionSignClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIGN) {
				{
				this.state = 2663;
				this.match(Cobol85Parser.SIGN);
				this.state = 2665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2664;
					this.match(Cobol85Parser.IS);
					}
				}

				}
			}

			this.state = 2669;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2674;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SEPARATE) {
				{
				this.state = 2670;
				this.match(Cobol85Parser.SEPARATE);
				this.state = 2672;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.CHARACTER) {
					{
					this.state = 2671;
					this.match(Cobol85Parser.CHARACTER);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionAutoClause(): ScreenDescriptionAutoClauseContext {
		let _localctx: ScreenDescriptionAutoClauseContext = new ScreenDescriptionAutoClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, Cobol85Parser.RULE_screenDescriptionAutoClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2676;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.AUTO || _la === Cobol85Parser.AUTO_SKIP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionSecureClause(): ScreenDescriptionSecureClauseContext {
		let _localctx: ScreenDescriptionSecureClauseContext = new ScreenDescriptionSecureClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, Cobol85Parser.RULE_screenDescriptionSecureClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2678;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.NO_ECHO || _la === Cobol85Parser.SECURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionRequiredClause(): ScreenDescriptionRequiredClauseContext {
		let _localctx: ScreenDescriptionRequiredClauseContext = new ScreenDescriptionRequiredClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, Cobol85Parser.RULE_screenDescriptionRequiredClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2680;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.EMPTY_CHECK || _la === Cobol85Parser.REQUIRED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionPromptClause(): ScreenDescriptionPromptClauseContext {
		let _localctx: ScreenDescriptionPromptClauseContext = new ScreenDescriptionPromptClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, Cobol85Parser.RULE_screenDescriptionPromptClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2682;
			this.match(Cobol85Parser.PROMPT);
			this.state = 2684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTER) {
				{
				this.state = 2683;
				this.match(Cobol85Parser.CHARACTER);
				}
			}

			this.state = 2687;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2686;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2691;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 298, this._ctx) ) {
			case 1:
				{
				this.state = 2689;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 2690;
				this.literal();
				}
				break;
			}
			this.state = 2694;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OCCURS) {
				{
				this.state = 2693;
				this.screenDescriptionPromptOccursClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionPromptOccursClause(): ScreenDescriptionPromptOccursClauseContext {
		let _localctx: ScreenDescriptionPromptOccursClauseContext = new ScreenDescriptionPromptOccursClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, Cobol85Parser.RULE_screenDescriptionPromptOccursClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2696;
			this.match(Cobol85Parser.OCCURS);
			this.state = 2697;
			this.integerLiteral();
			this.state = 2699;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TIMES) {
				{
				this.state = 2698;
				this.match(Cobol85Parser.TIMES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionFullClause(): ScreenDescriptionFullClauseContext {
		let _localctx: ScreenDescriptionFullClauseContext = new ScreenDescriptionFullClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, Cobol85Parser.RULE_screenDescriptionFullClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2701;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.FULL || _la === Cobol85Parser.LENGTH_CHECK)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenDescriptionZeroFillClause(): ScreenDescriptionZeroFillClauseContext {
		let _localctx: ScreenDescriptionZeroFillClauseContext = new ScreenDescriptionZeroFillClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, Cobol85Parser.RULE_screenDescriptionZeroFillClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2703;
			this.match(Cobol85Parser.ZERO_FILL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportSection(): ReportSectionContext {
		let _localctx: ReportSectionContext = new ReportSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, Cobol85Parser.RULE_reportSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2705;
			this.match(Cobol85Parser.REPORT);
			this.state = 2706;
			this.match(Cobol85Parser.SECTION);
			this.state = 2707;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 2711;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.RD) {
				{
				{
				this.state = 2708;
				this.reportDescription();
				}
				}
				this.state = 2713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescription(): ReportDescriptionContext {
		let _localctx: ReportDescriptionContext = new ReportDescriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, Cobol85Parser.RULE_reportDescription);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2714;
			this.reportDescriptionEntry();
			this.state = 2716;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2715;
				this.reportGroupDescriptionEntry();
				}
				}
				this.state = 2718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescriptionEntry(): ReportDescriptionEntryContext {
		let _localctx: ReportDescriptionEntryContext = new ReportDescriptionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, Cobol85Parser.RULE_reportDescriptionEntry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2720;
			this.match(Cobol85Parser.RD);
			this.state = 2721;
			this.reportName();
			this.state = 2723;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.GLOBAL || _la === Cobol85Parser.IS) {
				{
				this.state = 2722;
				this.reportDescriptionGlobalClause();
				}
			}

			this.state = 2738;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.PAGE) {
				{
				this.state = 2725;
				this.reportDescriptionPageLimitClause();
				this.state = 2727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.HEADING) {
					{
					this.state = 2726;
					this.reportDescriptionHeadingClause();
					}
				}

				this.state = 2730;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.FIRST) {
					{
					this.state = 2729;
					this.reportDescriptionFirstDetailClause();
					}
				}

				this.state = 2733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.LAST) {
					{
					this.state = 2732;
					this.reportDescriptionLastDetailClause();
					}
				}

				this.state = 2736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.FOOTING) {
					{
					this.state = 2735;
					this.reportDescriptionFootingClause();
					}
				}

				}
			}

			this.state = 2740;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescriptionGlobalClause(): ReportDescriptionGlobalClauseContext {
		let _localctx: ReportDescriptionGlobalClauseContext = new ReportDescriptionGlobalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, Cobol85Parser.RULE_reportDescriptionGlobalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2743;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2742;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2745;
			this.match(Cobol85Parser.GLOBAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescriptionPageLimitClause(): ReportDescriptionPageLimitClauseContext {
		let _localctx: ReportDescriptionPageLimitClauseContext = new ReportDescriptionPageLimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, Cobol85Parser.RULE_reportDescriptionPageLimitClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2747;
			this.match(Cobol85Parser.PAGE);
			this.state = 2756;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.LIMIT:
				{
				this.state = 2748;
				this.match(Cobol85Parser.LIMIT);
				this.state = 2750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2749;
					this.match(Cobol85Parser.IS);
					}
				}

				}
				break;
			case Cobol85Parser.LIMITS:
				{
				this.state = 2752;
				this.match(Cobol85Parser.LIMITS);
				this.state = 2754;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ARE) {
					{
					this.state = 2753;
					this.match(Cobol85Parser.ARE);
					}
				}

				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				break;
			default:
				break;
			}
			this.state = 2758;
			this.integerLiteral();
			this.state = 2760;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES) {
				{
				this.state = 2759;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescriptionHeadingClause(): ReportDescriptionHeadingClauseContext {
		let _localctx: ReportDescriptionHeadingClauseContext = new ReportDescriptionHeadingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, Cobol85Parser.RULE_reportDescriptionHeadingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2762;
			this.match(Cobol85Parser.HEADING);
			this.state = 2763;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescriptionFirstDetailClause(): ReportDescriptionFirstDetailClauseContext {
		let _localctx: ReportDescriptionFirstDetailClauseContext = new ReportDescriptionFirstDetailClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, Cobol85Parser.RULE_reportDescriptionFirstDetailClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2765;
			this.match(Cobol85Parser.FIRST);
			this.state = 2766;
			this.match(Cobol85Parser.DETAIL);
			this.state = 2767;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescriptionLastDetailClause(): ReportDescriptionLastDetailClauseContext {
		let _localctx: ReportDescriptionLastDetailClauseContext = new ReportDescriptionLastDetailClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, Cobol85Parser.RULE_reportDescriptionLastDetailClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2769;
			this.match(Cobol85Parser.LAST);
			this.state = 2770;
			this.match(Cobol85Parser.DETAIL);
			this.state = 2771;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportDescriptionFootingClause(): ReportDescriptionFootingClauseContext {
		let _localctx: ReportDescriptionFootingClauseContext = new ReportDescriptionFootingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, Cobol85Parser.RULE_reportDescriptionFootingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2773;
			this.match(Cobol85Parser.FOOTING);
			this.state = 2774;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupDescriptionEntry(): ReportGroupDescriptionEntryContext {
		let _localctx: ReportGroupDescriptionEntryContext = new ReportGroupDescriptionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, Cobol85Parser.RULE_reportGroupDescriptionEntry);
		try {
			this.state = 2779;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 314, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2776;
				this.reportGroupDescriptionEntryFormat1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2777;
				this.reportGroupDescriptionEntryFormat2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2778;
				this.reportGroupDescriptionEntryFormat3();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupDescriptionEntryFormat1(): ReportGroupDescriptionEntryFormat1Context {
		let _localctx: ReportGroupDescriptionEntryFormat1Context = new ReportGroupDescriptionEntryFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 340, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2781;
			this.integerLiteral();
			this.state = 2782;
			this.dataName();
			this.state = 2784;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS || _la === Cobol85Parser.LINE || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
				{
				this.state = 2783;
				this.reportGroupLineNumberClause();
				}
			}

			this.state = 2787;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NEXT) {
				{
				this.state = 2786;
				this.reportGroupNextGroupClause();
				}
			}

			this.state = 2789;
			this.reportGroupTypeClause();
			this.state = 2791;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1 || _la === Cobol85Parser.USAGE) {
				{
				this.state = 2790;
				this.reportGroupUsageClause();
				}
			}

			this.state = 2793;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupDescriptionEntryFormat2(): ReportGroupDescriptionEntryFormat2Context {
		let _localctx: ReportGroupDescriptionEntryFormat2Context = new ReportGroupDescriptionEntryFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 342, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2795;
			this.integerLiteral();
			this.state = 2797;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
				{
				this.state = 2796;
				this.dataName();
				}
			}

			this.state = 2800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS || _la === Cobol85Parser.LINE || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PLUS || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
				{
				this.state = 2799;
				this.reportGroupLineNumberClause();
				}
			}

			this.state = 2802;
			this.reportGroupUsageClause();
			this.state = 2803;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupDescriptionEntryFormat3(): ReportGroupDescriptionEntryFormat3Context {
		let _localctx: ReportGroupDescriptionEntryFormat3Context = new ReportGroupDescriptionEntryFormat3Context(this._ctx, this.state);
		this.enterRule(_localctx, 344, Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2805;
			this.integerLiteral();
			this.state = 2807;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
				{
				this.state = 2806;
				this.dataName();
				}
			}

			this.state = 2825;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.BLANK || _la === Cobol85Parser.COLUMN || _la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1 || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & ((1 << (Cobol85Parser.GROUP - 227)) | (1 << (Cobol85Parser.IS - 227)) | (1 << (Cobol85Parser.JUST - 227)) | (1 << (Cobol85Parser.JUSTIFIED - 227)))) !== 0) || _la === Cobol85Parser.LINE || _la === Cobol85Parser.NUMBER || _la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE || _la === Cobol85Parser.PLUS || _la === Cobol85Parser.RESET || ((((_la - 438)) & ~0x1F) === 0 && ((1 << (_la - 438)) & ((1 << (Cobol85Parser.SIGN - 438)) | (1 << (Cobol85Parser.SOURCE - 438)) | (1 << (Cobol85Parser.SUM - 438)))) !== 0) || _la === Cobol85Parser.USAGE || _la === Cobol85Parser.VALUE || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
				{
				this.state = 2823;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.PIC:
				case Cobol85Parser.PICTURE:
					{
					this.state = 2809;
					this.reportGroupPictureClause();
					}
					break;
				case Cobol85Parser.DISPLAY:
				case Cobol85Parser.DISPLAY_1:
				case Cobol85Parser.USAGE:
					{
					this.state = 2810;
					this.reportGroupUsageClause();
					}
					break;
				case Cobol85Parser.SIGN:
					{
					this.state = 2811;
					this.reportGroupSignClause();
					}
					break;
				case Cobol85Parser.JUST:
				case Cobol85Parser.JUSTIFIED:
					{
					this.state = 2812;
					this.reportGroupJustifiedClause();
					}
					break;
				case Cobol85Parser.BLANK:
					{
					this.state = 2813;
					this.reportGroupBlankWhenZeroClause();
					}
					break;
				case Cobol85Parser.IS:
				case Cobol85Parser.LINE:
				case Cobol85Parser.NUMBER:
				case Cobol85Parser.PLUS:
				case Cobol85Parser.LEVEL_NUMBER_66:
				case Cobol85Parser.LEVEL_NUMBER_77:
				case Cobol85Parser.LEVEL_NUMBER_88:
				case Cobol85Parser.INTEGERLITERAL:
					{
					this.state = 2814;
					this.reportGroupLineNumberClause();
					}
					break;
				case Cobol85Parser.COLUMN:
					{
					this.state = 2815;
					this.reportGroupColumnNumberClause();
					}
					break;
				case Cobol85Parser.RESET:
				case Cobol85Parser.SOURCE:
				case Cobol85Parser.SUM:
				case Cobol85Parser.VALUE:
					{
					this.state = 2820;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case Cobol85Parser.SOURCE:
						{
						this.state = 2816;
						this.reportGroupSourceClause();
						}
						break;
					case Cobol85Parser.VALUE:
						{
						this.state = 2817;
						this.reportGroupValueClause();
						}
						break;
					case Cobol85Parser.SUM:
						{
						this.state = 2818;
						this.reportGroupSumClause();
						}
						break;
					case Cobol85Parser.RESET:
						{
						this.state = 2819;
						this.reportGroupResetClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case Cobol85Parser.GROUP:
					{
					this.state = 2822;
					this.reportGroupIndicateClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2828;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupBlankWhenZeroClause(): ReportGroupBlankWhenZeroClauseContext {
		let _localctx: ReportGroupBlankWhenZeroClauseContext = new ReportGroupBlankWhenZeroClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, Cobol85Parser.RULE_reportGroupBlankWhenZeroClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2830;
			this.match(Cobol85Parser.BLANK);
			this.state = 2832;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WHEN) {
				{
				this.state = 2831;
				this.match(Cobol85Parser.WHEN);
				}
			}

			this.state = 2834;
			this.match(Cobol85Parser.ZERO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupColumnNumberClause(): ReportGroupColumnNumberClauseContext {
		let _localctx: ReportGroupColumnNumberClauseContext = new ReportGroupColumnNumberClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, Cobol85Parser.RULE_reportGroupColumnNumberClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2836;
			this.match(Cobol85Parser.COLUMN);
			this.state = 2838;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NUMBER) {
				{
				this.state = 2837;
				this.match(Cobol85Parser.NUMBER);
				}
			}

			this.state = 2841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2840;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2843;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupIndicateClause(): ReportGroupIndicateClauseContext {
		let _localctx: ReportGroupIndicateClauseContext = new ReportGroupIndicateClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, Cobol85Parser.RULE_reportGroupIndicateClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2845;
			this.match(Cobol85Parser.GROUP);
			this.state = 2847;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INDICATE) {
				{
				this.state = 2846;
				this.match(Cobol85Parser.INDICATE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupJustifiedClause(): ReportGroupJustifiedClauseContext {
		let _localctx: ReportGroupJustifiedClauseContext = new ReportGroupJustifiedClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, Cobol85Parser.RULE_reportGroupJustifiedClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2849;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.JUST || _la === Cobol85Parser.JUSTIFIED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RIGHT) {
				{
				this.state = 2850;
				this.match(Cobol85Parser.RIGHT);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupLineNumberClause(): ReportGroupLineNumberClauseContext {
		let _localctx: ReportGroupLineNumberClauseContext = new ReportGroupLineNumberClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, Cobol85Parser.RULE_reportGroupLineNumberClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2854;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LINE) {
				{
				this.state = 2853;
				this.match(Cobol85Parser.LINE);
				}
			}

			this.state = 2857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NUMBER) {
				{
				this.state = 2856;
				this.match(Cobol85Parser.NUMBER);
				}
			}

			this.state = 2860;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2859;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2864;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 2862;
				this.reportGroupLineNumberNextPage();
				}
				break;
			case Cobol85Parser.PLUS:
				{
				this.state = 2863;
				this.reportGroupLineNumberPlus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupLineNumberNextPage(): ReportGroupLineNumberNextPageContext {
		let _localctx: ReportGroupLineNumberNextPageContext = new ReportGroupLineNumberNextPageContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, Cobol85Parser.RULE_reportGroupLineNumberNextPage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2866;
			this.integerLiteral();
			this.state = 2872;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 334, this._ctx) ) {
			case 1:
				{
				this.state = 2868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ON) {
					{
					this.state = 2867;
					this.match(Cobol85Parser.ON);
					}
				}

				this.state = 2870;
				this.match(Cobol85Parser.NEXT);
				this.state = 2871;
				this.match(Cobol85Parser.PAGE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupLineNumberPlus(): ReportGroupLineNumberPlusContext {
		let _localctx: ReportGroupLineNumberPlusContext = new ReportGroupLineNumberPlusContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, Cobol85Parser.RULE_reportGroupLineNumberPlus);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2874;
			this.match(Cobol85Parser.PLUS);
			this.state = 2875;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupNextGroupClause(): ReportGroupNextGroupClauseContext {
		let _localctx: ReportGroupNextGroupClauseContext = new ReportGroupNextGroupClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, Cobol85Parser.RULE_reportGroupNextGroupClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2877;
			this.match(Cobol85Parser.NEXT);
			this.state = 2878;
			this.match(Cobol85Parser.GROUP);
			this.state = 2880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2879;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2885;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				{
				this.state = 2882;
				this.integerLiteral();
				}
				break;
			case Cobol85Parser.NEXT:
				{
				this.state = 2883;
				this.reportGroupNextGroupNextPage();
				}
				break;
			case Cobol85Parser.PLUS:
				{
				this.state = 2884;
				this.reportGroupNextGroupPlus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupNextGroupPlus(): ReportGroupNextGroupPlusContext {
		let _localctx: ReportGroupNextGroupPlusContext = new ReportGroupNextGroupPlusContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, Cobol85Parser.RULE_reportGroupNextGroupPlus);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2887;
			this.match(Cobol85Parser.PLUS);
			this.state = 2888;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupNextGroupNextPage(): ReportGroupNextGroupNextPageContext {
		let _localctx: ReportGroupNextGroupNextPageContext = new ReportGroupNextGroupNextPageContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, Cobol85Parser.RULE_reportGroupNextGroupNextPage);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2890;
			this.match(Cobol85Parser.NEXT);
			this.state = 2891;
			this.match(Cobol85Parser.PAGE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupPictureClause(): ReportGroupPictureClauseContext {
		let _localctx: ReportGroupPictureClauseContext = new ReportGroupPictureClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, Cobol85Parser.RULE_reportGroupPictureClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2893;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2895;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2894;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2897;
			this.pictureString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupResetClause(): ReportGroupResetClauseContext {
		let _localctx: ReportGroupResetClauseContext = new ReportGroupResetClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, Cobol85Parser.RULE_reportGroupResetClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2899;
			this.match(Cobol85Parser.RESET);
			this.state = 2901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 2900;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 2905;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.FINAL:
				{
				this.state = 2903;
				this.match(Cobol85Parser.FINAL);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2904;
				this.dataName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupSignClause(): ReportGroupSignClauseContext {
		let _localctx: ReportGroupSignClauseContext = new ReportGroupSignClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, Cobol85Parser.RULE_reportGroupSignClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2907;
			this.match(Cobol85Parser.SIGN);
			this.state = 2909;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2908;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2911;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2912;
			this.match(Cobol85Parser.SEPARATE);
			this.state = 2914;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHARACTER) {
				{
				this.state = 2913;
				this.match(Cobol85Parser.CHARACTER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupSourceClause(): ReportGroupSourceClauseContext {
		let _localctx: ReportGroupSourceClauseContext = new ReportGroupSourceClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, Cobol85Parser.RULE_reportGroupSourceClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2916;
			this.match(Cobol85Parser.SOURCE);
			this.state = 2918;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2917;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2920;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupSumClause(): ReportGroupSumClauseContext {
		let _localctx: ReportGroupSumClauseContext = new ReportGroupSumClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, Cobol85Parser.RULE_reportGroupSumClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2922;
			this.match(Cobol85Parser.SUM);
			this.state = 2923;
			this.identifier();
			this.state = 2930;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2925;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.COMMACHAR) {
						{
						this.state = 2924;
						this.match(Cobol85Parser.COMMACHAR);
						}
					}

					this.state = 2927;
					this.identifier();
					}
					}
				}
				this.state = 2932;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
			}
			this.state = 2944;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.UPON) {
				{
				this.state = 2933;
				this.match(Cobol85Parser.UPON);
				this.state = 2934;
				this.dataName();
				this.state = 2941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER) {
					{
					{
					this.state = 2936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.COMMACHAR) {
						{
						this.state = 2935;
						this.match(Cobol85Parser.COMMACHAR);
						}
					}

					this.state = 2938;
					this.dataName();
					}
					}
					this.state = 2943;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypeClause(): ReportGroupTypeClauseContext {
		let _localctx: ReportGroupTypeClauseContext = new ReportGroupTypeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, Cobol85Parser.RULE_reportGroupTypeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2946;
			this.match(Cobol85Parser.TYPE);
			this.state = 2948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 2947;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 2957;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 349, this._ctx) ) {
			case 1:
				{
				this.state = 2950;
				this.reportGroupTypeReportHeading();
				}
				break;

			case 2:
				{
				this.state = 2951;
				this.reportGroupTypePageHeading();
				}
				break;

			case 3:
				{
				this.state = 2952;
				this.reportGroupTypeControlHeading();
				}
				break;

			case 4:
				{
				this.state = 2953;
				this.reportGroupTypeDetail();
				}
				break;

			case 5:
				{
				this.state = 2954;
				this.reportGroupTypeControlFooting();
				}
				break;

			case 6:
				{
				this.state = 2955;
				this.reportGroupTypePageFooting();
				}
				break;

			case 7:
				{
				this.state = 2956;
				this.reportGroupTypeReportFooting();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypeReportHeading(): ReportGroupTypeReportHeadingContext {
		let _localctx: ReportGroupTypeReportHeadingContext = new ReportGroupTypeReportHeadingContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, Cobol85Parser.RULE_reportGroupTypeReportHeading);
		try {
			this.state = 2962;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.REPORT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2959;
				this.match(Cobol85Parser.REPORT);
				this.state = 2960;
				this.match(Cobol85Parser.HEADING);
				}
				break;
			case Cobol85Parser.RH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2961;
				this.match(Cobol85Parser.RH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypePageHeading(): ReportGroupTypePageHeadingContext {
		let _localctx: ReportGroupTypePageHeadingContext = new ReportGroupTypePageHeadingContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, Cobol85Parser.RULE_reportGroupTypePageHeading);
		try {
			this.state = 2967;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.PAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2964;
				this.match(Cobol85Parser.PAGE);
				this.state = 2965;
				this.match(Cobol85Parser.HEADING);
				}
				break;
			case Cobol85Parser.PH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2966;
				this.match(Cobol85Parser.PH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypeControlHeading(): ReportGroupTypeControlHeadingContext {
		let _localctx: ReportGroupTypeControlHeadingContext = new ReportGroupTypeControlHeadingContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, Cobol85Parser.RULE_reportGroupTypeControlHeading);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2972;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.CONTROL:
				{
				this.state = 2969;
				this.match(Cobol85Parser.CONTROL);
				this.state = 2970;
				this.match(Cobol85Parser.HEADING);
				}
				break;
			case Cobol85Parser.CH:
				{
				this.state = 2971;
				this.match(Cobol85Parser.CH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2976;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.FINAL:
				{
				this.state = 2974;
				this.match(Cobol85Parser.FINAL);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2975;
				this.dataName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypeDetail(): ReportGroupTypeDetailContext {
		let _localctx: ReportGroupTypeDetailContext = new ReportGroupTypeDetailContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, Cobol85Parser.RULE_reportGroupTypeDetail);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2978;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.DE || _la === Cobol85Parser.DETAIL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypeControlFooting(): ReportGroupTypeControlFootingContext {
		let _localctx: ReportGroupTypeControlFootingContext = new ReportGroupTypeControlFootingContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, Cobol85Parser.RULE_reportGroupTypeControlFooting);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2983;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.CONTROL:
				{
				this.state = 2980;
				this.match(Cobol85Parser.CONTROL);
				this.state = 2981;
				this.match(Cobol85Parser.FOOTING);
				}
				break;
			case Cobol85Parser.CF:
				{
				this.state = 2982;
				this.match(Cobol85Parser.CF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2987;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.FINAL:
				{
				this.state = 2985;
				this.match(Cobol85Parser.FINAL);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 2986;
				this.dataName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupUsageClause(): ReportGroupUsageClauseContext {
		let _localctx: ReportGroupUsageClauseContext = new ReportGroupUsageClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, Cobol85Parser.RULE_reportGroupUsageClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.USAGE) {
				{
				this.state = 2989;
				this.match(Cobol85Parser.USAGE);
				this.state = 2991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 2990;
					this.match(Cobol85Parser.IS);
					}
				}

				}
			}

			this.state = 2995;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.DISPLAY || _la === Cobol85Parser.DISPLAY_1)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypePageFooting(): ReportGroupTypePageFootingContext {
		let _localctx: ReportGroupTypePageFootingContext = new ReportGroupTypePageFootingContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, Cobol85Parser.RULE_reportGroupTypePageFooting);
		try {
			this.state = 3000;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.PAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2997;
				this.match(Cobol85Parser.PAGE);
				this.state = 2998;
				this.match(Cobol85Parser.FOOTING);
				}
				break;
			case Cobol85Parser.PF:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2999;
				this.match(Cobol85Parser.PF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupTypeReportFooting(): ReportGroupTypeReportFootingContext {
		let _localctx: ReportGroupTypeReportFootingContext = new ReportGroupTypeReportFootingContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, Cobol85Parser.RULE_reportGroupTypeReportFooting);
		try {
			this.state = 3005;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.REPORT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3002;
				this.match(Cobol85Parser.REPORT);
				this.state = 3003;
				this.match(Cobol85Parser.FOOTING);
				}
				break;
			case Cobol85Parser.RF:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3004;
				this.match(Cobol85Parser.RF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportGroupValueClause(): ReportGroupValueClauseContext {
		let _localctx: ReportGroupValueClauseContext = new ReportGroupValueClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, Cobol85Parser.RULE_reportGroupValueClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3007;
			this.match(Cobol85Parser.VALUE);
			this.state = 3009;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3008;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3011;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public programLibrarySection(): ProgramLibrarySectionContext {
		let _localctx: ProgramLibrarySectionContext = new ProgramLibrarySectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, Cobol85Parser.RULE_programLibrarySection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3013;
			this.match(Cobol85Parser.PROGRAM_LIBRARY);
			this.state = 3014;
			this.match(Cobol85Parser.SECTION);
			this.state = 3015;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 3019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.LB || _la === Cobol85Parser.LD) {
				{
				{
				this.state = 3016;
				this.libraryDescriptionEntry();
				}
				}
				this.state = 3021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryDescriptionEntry(): LibraryDescriptionEntryContext {
		let _localctx: LibraryDescriptionEntryContext = new LibraryDescriptionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, Cobol85Parser.RULE_libraryDescriptionEntry);
		try {
			this.state = 3024;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.LD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3022;
				this.libraryDescriptionEntryFormat1();
				}
				break;
			case Cobol85Parser.LB:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3023;
				this.libraryDescriptionEntryFormat2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryDescriptionEntryFormat1(): LibraryDescriptionEntryFormat1Context {
		let _localctx: LibraryDescriptionEntryFormat1Context = new LibraryDescriptionEntryFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 400, Cobol85Parser.RULE_libraryDescriptionEntryFormat1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3026;
			this.match(Cobol85Parser.LD);
			this.state = 3027;
			this.libraryName();
			this.state = 3028;
			this.match(Cobol85Parser.EXPORT);
			this.state = 3030;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ATTRIBUTE) {
				{
				this.state = 3029;
				this.libraryAttributeClauseFormat1();
				}
			}

			this.state = 3033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ENTRY_PROCEDURE) {
				{
				this.state = 3032;
				this.libraryEntryProcedureClauseFormat1();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryDescriptionEntryFormat2(): LibraryDescriptionEntryFormat2Context {
		let _localctx: LibraryDescriptionEntryFormat2Context = new LibraryDescriptionEntryFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 402, Cobol85Parser.RULE_libraryDescriptionEntryFormat2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3035;
			this.match(Cobol85Parser.LB);
			this.state = 3036;
			this.libraryName();
			this.state = 3037;
			this.match(Cobol85Parser.IMPORT);
			this.state = 3039;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 365, this._ctx) ) {
			case 1:
				{
				this.state = 3038;
				this.libraryIsGlobalClause();
				}
				break;
			}
			this.state = 3042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COMMON || _la === Cobol85Parser.IS) {
				{
				this.state = 3041;
				this.libraryIsCommonClause();
				}
			}

			this.state = 3048;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.ATTRIBUTE || _la === Cobol85Parser.ENTRY_PROCEDURE) {
				{
				this.state = 3046;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.ATTRIBUTE:
					{
					this.state = 3044;
					this.libraryAttributeClauseFormat2();
					}
					break;
				case Cobol85Parser.ENTRY_PROCEDURE:
					{
					this.state = 3045;
					this.libraryEntryProcedureClauseFormat2();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 3050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryAttributeClauseFormat1(): LibraryAttributeClauseFormat1Context {
		let _localctx: LibraryAttributeClauseFormat1Context = new LibraryAttributeClauseFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 404, Cobol85Parser.RULE_libraryAttributeClauseFormat1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3051;
			this.match(Cobol85Parser.ATTRIBUTE);
			this.state = 3057;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SHARING) {
				{
				this.state = 3052;
				this.match(Cobol85Parser.SHARING);
				this.state = 3054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 3053;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 3056;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.DONTCARE || _la === Cobol85Parser.PRIVATE || _la === Cobol85Parser.SHAREDBYALL || _la === Cobol85Parser.SHAREDBYRUNUNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryAttributeClauseFormat2(): LibraryAttributeClauseFormat2Context {
		let _localctx: LibraryAttributeClauseFormat2Context = new LibraryAttributeClauseFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 406, Cobol85Parser.RULE_libraryAttributeClauseFormat2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3059;
			this.match(Cobol85Parser.ATTRIBUTE);
			this.state = 3061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FUNCTIONNAME) {
				{
				this.state = 3060;
				this.libraryAttributeFunction();
				}
			}

			this.state = 3068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LIBACCESS) {
				{
				this.state = 3063;
				this.match(Cobol85Parser.LIBACCESS);
				this.state = 3065;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 3064;
					this.match(Cobol85Parser.IS);
					}
				}

				this.state = 3067;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.BYFUNCTION || _la === Cobol85Parser.BYTITLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LIBPARAMETER) {
				{
				this.state = 3070;
				this.libraryAttributeParameter();
				}
			}

			this.state = 3074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TITLE) {
				{
				this.state = 3073;
				this.libraryAttributeTitle();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryAttributeFunction(): LibraryAttributeFunctionContext {
		let _localctx: LibraryAttributeFunctionContext = new LibraryAttributeFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, Cobol85Parser.RULE_libraryAttributeFunction);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3076;
			this.match(Cobol85Parser.FUNCTIONNAME);
			this.state = 3077;
			this.match(Cobol85Parser.IS);
			this.state = 3078;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryAttributeParameter(): LibraryAttributeParameterContext {
		let _localctx: LibraryAttributeParameterContext = new LibraryAttributeParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, Cobol85Parser.RULE_libraryAttributeParameter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3080;
			this.match(Cobol85Parser.LIBPARAMETER);
			this.state = 3082;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3081;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3084;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryAttributeTitle(): LibraryAttributeTitleContext {
		let _localctx: LibraryAttributeTitleContext = new LibraryAttributeTitleContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, Cobol85Parser.RULE_libraryAttributeTitle);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3086;
			this.match(Cobol85Parser.TITLE);
			this.state = 3088;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3087;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3090;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureClauseFormat1(): LibraryEntryProcedureClauseFormat1Context {
		let _localctx: LibraryEntryProcedureClauseFormat1Context = new LibraryEntryProcedureClauseFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 414, Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3092;
			this.match(Cobol85Parser.ENTRY_PROCEDURE);
			this.state = 3093;
			this.programName();
			this.state = 3095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 3094;
				this.libraryEntryProcedureForClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureClauseFormat2(): LibraryEntryProcedureClauseFormat2Context {
		let _localctx: LibraryEntryProcedureClauseFormat2Context = new LibraryEntryProcedureClauseFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 416, Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3097;
			this.match(Cobol85Parser.ENTRY_PROCEDURE);
			this.state = 3098;
			this.programName();
			this.state = 3100;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 3099;
				this.libraryEntryProcedureForClause();
				}
			}

			this.state = 3103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 3102;
				this.libraryEntryProcedureWithClause();
				}
			}

			this.state = 3106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.USING) {
				{
				this.state = 3105;
				this.libraryEntryProcedureUsingClause();
				}
			}

			this.state = 3109;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.GIVING) {
				{
				this.state = 3108;
				this.libraryEntryProcedureGivingClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureForClause(): LibraryEntryProcedureForClauseContext {
		let _localctx: LibraryEntryProcedureForClauseContext = new LibraryEntryProcedureForClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, Cobol85Parser.RULE_libraryEntryProcedureForClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3111;
			this.match(Cobol85Parser.FOR);
			this.state = 3112;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureGivingClause(): LibraryEntryProcedureGivingClauseContext {
		let _localctx: LibraryEntryProcedureGivingClauseContext = new LibraryEntryProcedureGivingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, Cobol85Parser.RULE_libraryEntryProcedureGivingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3114;
			this.match(Cobol85Parser.GIVING);
			this.state = 3115;
			this.dataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureUsingClause(): LibraryEntryProcedureUsingClauseContext {
		let _localctx: LibraryEntryProcedureUsingClauseContext = new LibraryEntryProcedureUsingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, Cobol85Parser.RULE_libraryEntryProcedureUsingClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3117;
			this.match(Cobol85Parser.USING);
			this.state = 3119;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3118;
					this.libraryEntryProcedureUsingName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3121;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureUsingName(): LibraryEntryProcedureUsingNameContext {
		let _localctx: LibraryEntryProcedureUsingNameContext = new LibraryEntryProcedureUsingNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, Cobol85Parser.RULE_libraryEntryProcedureUsingName);
		try {
			this.state = 3125;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 384, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3123;
				this.dataName();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3124;
				this.fileName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureWithClause(): LibraryEntryProcedureWithClauseContext {
		let _localctx: LibraryEntryProcedureWithClauseContext = new LibraryEntryProcedureWithClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, Cobol85Parser.RULE_libraryEntryProcedureWithClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3127;
			this.match(Cobol85Parser.WITH);
			this.state = 3129;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3128;
					this.libraryEntryProcedureWithName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3131;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 385, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryEntryProcedureWithName(): LibraryEntryProcedureWithNameContext {
		let _localctx: LibraryEntryProcedureWithNameContext = new LibraryEntryProcedureWithNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, Cobol85Parser.RULE_libraryEntryProcedureWithName);
		try {
			this.state = 3135;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 386, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3133;
				this.localName();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3134;
				this.fileName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryIsCommonClause(): LibraryIsCommonClauseContext {
		let _localctx: LibraryIsCommonClauseContext = new LibraryIsCommonClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, Cobol85Parser.RULE_libraryIsCommonClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3138;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3137;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3140;
			this.match(Cobol85Parser.COMMON);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryIsGlobalClause(): LibraryIsGlobalClauseContext {
		let _localctx: LibraryIsGlobalClauseContext = new LibraryIsGlobalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, Cobol85Parser.RULE_libraryIsGlobalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3143;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3142;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3145;
			this.match(Cobol85Parser.GLOBAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDescriptionEntry(): DataDescriptionEntryContext {
		let _localctx: DataDescriptionEntryContext = new DataDescriptionEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, Cobol85Parser.RULE_dataDescriptionEntry);
		try {
			this.state = 3151;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.INTEGERLITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3147;
				this.dataDescriptionEntryFormat1();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3148;
				this.dataDescriptionEntryFormat2();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_88:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3149;
				this.dataDescriptionEntryFormat3();
				}
				break;
			case Cobol85Parser.EXECSQLLINE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3150;
				this.dataDescriptionEntryExecSql();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDescriptionEntryFormat1(): DataDescriptionEntryFormat1Context {
		let _localctx: DataDescriptionEntryFormat1Context = new DataDescriptionEntryFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 436, Cobol85Parser.RULE_dataDescriptionEntryFormat1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3153;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.LEVEL_NUMBER_77 || _la === Cobol85Parser.INTEGERLITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3156;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				{
				this.state = 3154;
				this.match(Cobol85Parser.FILLER);
				}
				break;

			case 2:
				{
				this.state = 3155;
				this.dataName();
				}
				break;
			}
			this.state = 3181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALIGNED) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLANK - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.BY - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.COMMON - 68)) | (1 << (Cobol85Parser.COMP - 68)) | (1 << (Cobol85Parser.COMP_1 - 68)) | (1 << (Cobol85Parser.COMP_2 - 68)) | (1 << (Cobol85Parser.COMP_3 - 68)) | (1 << (Cobol85Parser.COMP_4 - 68)) | (1 << (Cobol85Parser.COMP_5 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_1 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_2 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_3 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_4 - 68)) | (1 << (Cobol85Parser.COMPUTATIONAL_5 - 68)) | (1 << (Cobol85Parser.CONTENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DISPLAY - 138)) | (1 << (Cobol85Parser.DISPLAY_1 - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.EXTERNAL - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GLOBAL - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)) | (1 << (Cobol85Parser.INDEX - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.IS - 250)) | (1 << (Cobol85Parser.JUST - 250)) | (1 << (Cobol85Parser.JUSTIFIED - 250)) | (1 << (Cobol85Parser.KANJI - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEADING - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LOCK - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.OCCURS - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PACKED_DECIMAL - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)) | (1 << (Cobol85Parser.PIC - 317)) | (1 << (Cobol85Parser.PICTURE - 317)))) !== 0) || ((((_la - 349)) & ~0x1F) === 0 && ((1 << (_la - 349)) & ((1 << (Cobol85Parser.POINTER - 349)) | (1 << (Cobol85Parser.PORT - 349)) | (1 << (Cobol85Parser.PRINTER - 349)) | (1 << (Cobol85Parser.PRIVATE - 349)) | (1 << (Cobol85Parser.PROCEDURE_POINTER - 349)) | (1 << (Cobol85Parser.PROCESS - 349)) | (1 << (Cobol85Parser.PROGRAM - 349)) | (1 << (Cobol85Parser.PROMPT - 349)) | (1 << (Cobol85Parser.QUOTE - 349)) | (1 << (Cobol85Parser.QUOTES - 349)) | (1 << (Cobol85Parser.READER - 349)) | (1 << (Cobol85Parser.REMOTE - 349)) | (1 << (Cobol85Parser.REAL - 349)) | (1 << (Cobol85Parser.RECEIVED - 349)) | (1 << (Cobol85Parser.RECORD - 349)) | (1 << (Cobol85Parser.RECURSIVE - 349)))) !== 0) || ((((_la - 381)) & ~0x1F) === 0 && ((1 << (_la - 381)) & ((1 << (Cobol85Parser.REDEFINES - 381)) | (1 << (Cobol85Parser.REF - 381)) | (1 << (Cobol85Parser.REFERENCE - 381)) | (1 << (Cobol85Parser.REMOVE - 381)) | (1 << (Cobol85Parser.REQUIRED - 381)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 381)))) !== 0) || ((((_la - 415)) & ~0x1F) === 0 && ((1 << (_la - 415)) & ((1 << (Cobol85Parser.SAVE - 415)) | (1 << (Cobol85Parser.SECURE - 415)) | (1 << (Cobol85Parser.SHARED - 415)) | (1 << (Cobol85Parser.SHAREDBYALL - 415)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 415)) | (1 << (Cobol85Parser.SHARING - 415)) | (1 << (Cobol85Parser.SHORT_DATE - 415)) | (1 << (Cobol85Parser.SIGN - 415)))) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & ((1 << (Cobol85Parser.SPACE - 450)) | (1 << (Cobol85Parser.SPACES - 450)) | (1 << (Cobol85Parser.STRING - 450)) | (1 << (Cobol85Parser.SYMBOL - 450)) | (1 << (Cobol85Parser.SYNC - 450)) | (1 << (Cobol85Parser.SYNCHRONIZED - 450)) | (1 << (Cobol85Parser.TASK - 450)) | (1 << (Cobol85Parser.THREAD - 450)))) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & ((1 << (Cobol85Parser.THREAD_LOCAL - 482)) | (1 << (Cobol85Parser.TIMER - 482)) | (1 << (Cobol85Parser.TODAYS_DATE - 482)) | (1 << (Cobol85Parser.TODAYS_NAME - 482)) | (1 << (Cobol85Parser.TRAILING - 482)) | (1 << (Cobol85Parser.TRUE - 482)) | (1 << (Cobol85Parser.TRUNCATED - 482)) | (1 << (Cobol85Parser.TYPE - 482)) | (1 << (Cobol85Parser.TYPEDEF - 482)) | (1 << (Cobol85Parser.UNDERLINE - 482)) | (1 << (Cobol85Parser.USAGE - 482)) | (1 << (Cobol85Parser.USING - 482)) | (1 << (Cobol85Parser.VALUE - 482)) | (1 << (Cobol85Parser.VALUES - 482)) | (1 << (Cobol85Parser.VIRTUAL - 482)) | (1 << (Cobol85Parser.WAIT - 482)))) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & ((1 << (Cobol85Parser.WITH - 514)) | (1 << (Cobol85Parser.YEAR - 514)) | (1 << (Cobol85Parser.YYYYMMDD - 514)) | (1 << (Cobol85Parser.YYYYDDD - 514)) | (1 << (Cobol85Parser.ZERO - 514)) | (1 << (Cobol85Parser.ZERO_FILL - 514)) | (1 << (Cobol85Parser.ZEROS - 514)) | (1 << (Cobol85Parser.ZEROES - 514)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0)) {
				{
				this.state = 3179;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 391, this._ctx) ) {
				case 1:
					{
					this.state = 3158;
					this.dataRedefinesClause();
					}
					break;

				case 2:
					{
					this.state = 3159;
					this.dataIntegerStringClause();
					}
					break;

				case 3:
					{
					this.state = 3160;
					this.dataExternalClause();
					}
					break;

				case 4:
					{
					this.state = 3161;
					this.dataGlobalClause();
					}
					break;

				case 5:
					{
					this.state = 3162;
					this.dataTypeDefClause();
					}
					break;

				case 6:
					{
					this.state = 3163;
					this.dataThreadLocalClause();
					}
					break;

				case 7:
					{
					this.state = 3164;
					this.dataPictureClause();
					}
					break;

				case 8:
					{
					this.state = 3165;
					this.dataCommonOwnLocalClause();
					}
					break;

				case 9:
					{
					this.state = 3166;
					this.dataTypeClause();
					}
					break;

				case 10:
					{
					this.state = 3167;
					this.dataUsingClause();
					}
					break;

				case 11:
					{
					this.state = 3168;
					this.dataUsageClause();
					}
					break;

				case 12:
					{
					this.state = 3169;
					this.dataValueClause();
					}
					break;

				case 13:
					{
					this.state = 3170;
					this.dataReceivedByClause();
					}
					break;

				case 14:
					{
					this.state = 3171;
					this.dataOccursClause();
					}
					break;

				case 15:
					{
					this.state = 3172;
					this.dataSignClause();
					}
					break;

				case 16:
					{
					this.state = 3173;
					this.dataSynchronizedClause();
					}
					break;

				case 17:
					{
					this.state = 3174;
					this.dataJustifiedClause();
					}
					break;

				case 18:
					{
					this.state = 3175;
					this.dataBlankWhenZeroClause();
					}
					break;

				case 19:
					{
					this.state = 3176;
					this.dataWithLowerBoundsClause();
					}
					break;

				case 20:
					{
					this.state = 3177;
					this.dataAlignedClause();
					}
					break;

				case 21:
					{
					this.state = 3178;
					this.dataRecordAreaClause();
					}
					break;
				}
				}
				this.state = 3183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3184;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDescriptionEntryFormat2(): DataDescriptionEntryFormat2Context {
		let _localctx: DataDescriptionEntryFormat2Context = new DataDescriptionEntryFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 438, Cobol85Parser.RULE_dataDescriptionEntryFormat2);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3186;
			this.match(Cobol85Parser.LEVEL_NUMBER_66);
			this.state = 3187;
			this.dataName();
			this.state = 3188;
			this.dataRenamesClause();
			this.state = 3189;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDescriptionEntryFormat3(): DataDescriptionEntryFormat3Context {
		let _localctx: DataDescriptionEntryFormat3Context = new DataDescriptionEntryFormat3Context(this._ctx, this.state);
		this.enterRule(_localctx, 440, Cobol85Parser.RULE_dataDescriptionEntryFormat3);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3191;
			this.match(Cobol85Parser.LEVEL_NUMBER_88);
			this.state = 3192;
			this.conditionName();
			this.state = 3193;
			this.dataValueClause();
			this.state = 3194;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDescriptionEntryExecSql(): DataDescriptionEntryExecSqlContext {
		let _localctx: DataDescriptionEntryExecSqlContext = new DataDescriptionEntryExecSqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, Cobol85Parser.RULE_dataDescriptionEntryExecSql);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3197;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3196;
					this.match(Cobol85Parser.EXECSQLLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3199;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 393, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3202;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DOT_FS) {
				{
				this.state = 3201;
				this.match(Cobol85Parser.DOT_FS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataAlignedClause(): DataAlignedClauseContext {
		let _localctx: DataAlignedClauseContext = new DataAlignedClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, Cobol85Parser.RULE_dataAlignedClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3204;
			this.match(Cobol85Parser.ALIGNED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataBlankWhenZeroClause(): DataBlankWhenZeroClauseContext {
		let _localctx: DataBlankWhenZeroClauseContext = new DataBlankWhenZeroClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, Cobol85Parser.RULE_dataBlankWhenZeroClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3206;
			this.match(Cobol85Parser.BLANK);
			this.state = 3208;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WHEN) {
				{
				this.state = 3207;
				this.match(Cobol85Parser.WHEN);
				}
			}

			this.state = 3210;
			_la = this._input.LA(1);
			if (!(((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & ((1 << (Cobol85Parser.ZERO - 521)) | (1 << (Cobol85Parser.ZEROS - 521)) | (1 << (Cobol85Parser.ZEROES - 521)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataCommonOwnLocalClause(): DataCommonOwnLocalClauseContext {
		let _localctx: DataCommonOwnLocalClauseContext = new DataCommonOwnLocalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, Cobol85Parser.RULE_dataCommonOwnLocalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3212;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.COMMON || _la === Cobol85Parser.LOCAL || _la === Cobol85Parser.OWN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataExternalClause(): DataExternalClauseContext {
		let _localctx: DataExternalClauseContext = new DataExternalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, Cobol85Parser.RULE_dataExternalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3214;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3217;
			this.match(Cobol85Parser.EXTERNAL);
			this.state = 3220;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 397, this._ctx) ) {
			case 1:
				{
				this.state = 3218;
				this.match(Cobol85Parser.BY);
				this.state = 3219;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataGlobalClause(): DataGlobalClauseContext {
		let _localctx: DataGlobalClauseContext = new DataGlobalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, Cobol85Parser.RULE_dataGlobalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3222;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3225;
			this.match(Cobol85Parser.GLOBAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataIntegerStringClause(): DataIntegerStringClauseContext {
		let _localctx: DataIntegerStringClauseContext = new DataIntegerStringClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, Cobol85Parser.RULE_dataIntegerStringClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3227;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.INTEGER || _la === Cobol85Parser.STRING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataJustifiedClause(): DataJustifiedClauseContext {
		let _localctx: DataJustifiedClauseContext = new DataJustifiedClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, Cobol85Parser.RULE_dataJustifiedClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3229;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.JUST || _la === Cobol85Parser.JUSTIFIED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3231;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RIGHT) {
				{
				this.state = 3230;
				this.match(Cobol85Parser.RIGHT);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataOccursClause(): DataOccursClauseContext {
		let _localctx: DataOccursClauseContext = new DataOccursClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, Cobol85Parser.RULE_dataOccursClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3233;
			this.match(Cobol85Parser.OCCURS);
			this.state = 3234;
			this.integerLiteral();
			this.state = 3236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TO) {
				{
				this.state = 3235;
				this.dataOccursTo();
				}
			}

			this.state = 3239;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TIMES) {
				{
				this.state = 3238;
				this.match(Cobol85Parser.TIMES);
				}
			}

			this.state = 3246;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DEPENDING) {
				{
				this.state = 3241;
				this.match(Cobol85Parser.DEPENDING);
				this.state = 3243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ON) {
					{
					this.state = 3242;
					this.match(Cobol85Parser.ON);
					}
				}

				this.state = 3245;
				this.qualifiedDataName();
				}
			}

			this.state = 3251;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING) {
				{
				{
				this.state = 3248;
				this.dataOccursSort();
				}
				}
				this.state = 3253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3266;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INDEXED) {
				{
				this.state = 3254;
				this.match(Cobol85Parser.INDEXED);
				this.state = 3256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.BY) {
					{
					this.state = 3255;
					this.match(Cobol85Parser.BY);
					}
				}

				this.state = 3259;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
				case 1:
					{
					this.state = 3258;
					this.match(Cobol85Parser.LOCAL);
					}
					break;
				}
				this.state = 3262;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3261;
						this.indexName();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3264;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 407, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataOccursTo(): DataOccursToContext {
		let _localctx: DataOccursToContext = new DataOccursToContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, Cobol85Parser.RULE_dataOccursTo);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3268;
			this.match(Cobol85Parser.TO);
			this.state = 3269;
			this.integerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataOccursSort(): DataOccursSortContext {
		let _localctx: DataOccursSortContext = new DataOccursSortContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, Cobol85Parser.RULE_dataOccursSort);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3271;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3273;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 3272;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 3276;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3275;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3279;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3278;
					this.qualifiedDataName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3281;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataPictureClause(): DataPictureClauseContext {
		let _localctx: DataPictureClauseContext = new DataPictureClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, Cobol85Parser.RULE_dataPictureClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3283;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.PIC || _la === Cobol85Parser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3284;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3287;
			this.pictureString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pictureString(): PictureStringContext {
		let _localctx: PictureStringContext = new PictureStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, Cobol85Parser.RULE_pictureString);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3297;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3290;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 3289;
							this.pictureChars();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 3292;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					this.state = 3295;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
					case 1:
						{
						this.state = 3294;
						this.pictureCardinality();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3299;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pictureChars(): PictureCharsContext {
		let _localctx: PictureCharsContext = new PictureCharsContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, Cobol85Parser.RULE_pictureChars);
		try {
			this.state = 3317;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.DOLLARCHAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3301;
				this.match(Cobol85Parser.DOLLARCHAR);
				}
				break;
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3302;
				this.match(Cobol85Parser.IDENTIFIER);
				}
				break;
			case Cobol85Parser.NUMERICLITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3303;
				this.match(Cobol85Parser.NUMERICLITERAL);
				}
				break;
			case Cobol85Parser.SLASHCHAR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3304;
				this.match(Cobol85Parser.SLASHCHAR);
				}
				break;
			case Cobol85Parser.COMMACHAR:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3305;
				this.match(Cobol85Parser.COMMACHAR);
				}
				break;
			case Cobol85Parser.DOT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3306;
				this.match(Cobol85Parser.DOT);
				}
				break;
			case Cobol85Parser.COLONCHAR:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3307;
				this.match(Cobol85Parser.COLONCHAR);
				}
				break;
			case Cobol85Parser.ASTERISKCHAR:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3308;
				this.match(Cobol85Parser.ASTERISKCHAR);
				}
				break;
			case Cobol85Parser.DOUBLEASTERISKCHAR:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3309;
				this.match(Cobol85Parser.DOUBLEASTERISKCHAR);
				}
				break;
			case Cobol85Parser.LPARENCHAR:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3310;
				this.match(Cobol85Parser.LPARENCHAR);
				}
				break;
			case Cobol85Parser.RPARENCHAR:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3311;
				this.match(Cobol85Parser.RPARENCHAR);
				}
				break;
			case Cobol85Parser.PLUSCHAR:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3312;
				this.match(Cobol85Parser.PLUSCHAR);
				}
				break;
			case Cobol85Parser.MINUSCHAR:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3313;
				this.match(Cobol85Parser.MINUSCHAR);
				}
				break;
			case Cobol85Parser.LESSTHANCHAR:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3314;
				this.match(Cobol85Parser.LESSTHANCHAR);
				}
				break;
			case Cobol85Parser.MORETHANCHAR:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3315;
				this.match(Cobol85Parser.MORETHANCHAR);
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3316;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pictureCardinality(): PictureCardinalityContext {
		let _localctx: PictureCardinalityContext = new PictureCardinalityContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, Cobol85Parser.RULE_pictureCardinality);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3319;
			this.match(Cobol85Parser.LPARENCHAR);
			this.state = 3320;
			this.integerLiteral();
			this.state = 3321;
			this.match(Cobol85Parser.RPARENCHAR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataReceivedByClause(): DataReceivedByClauseContext {
		let _localctx: DataReceivedByClauseContext = new DataReceivedByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, Cobol85Parser.RULE_dataReceivedByClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RECEIVED) {
				{
				this.state = 3323;
				this.match(Cobol85Parser.RECEIVED);
				}
			}

			this.state = 3327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY) {
				{
				this.state = 3326;
				this.match(Cobol85Parser.BY);
				}
			}

			this.state = 3329;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.CONTENT || _la === Cobol85Parser.REF || _la === Cobol85Parser.REFERENCE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataRecordAreaClause(): DataRecordAreaClauseContext {
		let _localctx: DataRecordAreaClauseContext = new DataRecordAreaClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, Cobol85Parser.RULE_dataRecordAreaClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3331;
			this.match(Cobol85Parser.RECORD);
			this.state = 3332;
			this.match(Cobol85Parser.AREA);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataRedefinesClause(): DataRedefinesClauseContext {
		let _localctx: DataRedefinesClauseContext = new DataRedefinesClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, Cobol85Parser.RULE_dataRedefinesClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3334;
			this.match(Cobol85Parser.REDEFINES);
			this.state = 3335;
			this.dataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataRenamesClause(): DataRenamesClauseContext {
		let _localctx: DataRenamesClauseContext = new DataRenamesClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, Cobol85Parser.RULE_dataRenamesClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3337;
			this.match(Cobol85Parser.RENAMES);
			this.state = 3338;
			this.qualifiedDataName();
			this.state = 3341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
				{
				this.state = 3339;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3340;
				this.qualifiedDataName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataSignClause(): DataSignClauseContext {
		let _localctx: DataSignClauseContext = new DataSignClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, Cobol85Parser.RULE_dataSignClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SIGN) {
				{
				this.state = 3343;
				this.match(Cobol85Parser.SIGN);
				this.state = 3345;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 3344;
					this.match(Cobol85Parser.IS);
					}
				}

				}
			}

			this.state = 3349;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.LEADING || _la === Cobol85Parser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3354;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.SEPARATE) {
				{
				this.state = 3350;
				this.match(Cobol85Parser.SEPARATE);
				this.state = 3352;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.CHARACTER) {
					{
					this.state = 3351;
					this.match(Cobol85Parser.CHARACTER);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataSynchronizedClause(): DataSynchronizedClauseContext {
		let _localctx: DataSynchronizedClauseContext = new DataSynchronizedClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, Cobol85Parser.RULE_dataSynchronizedClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3356;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.SYNC || _la === Cobol85Parser.SYNCHRONIZED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LEFT || _la === Cobol85Parser.RIGHT) {
				{
				this.state = 3357;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.LEFT || _la === Cobol85Parser.RIGHT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataThreadLocalClause(): DataThreadLocalClauseContext {
		let _localctx: DataThreadLocalClauseContext = new DataThreadLocalClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, Cobol85Parser.RULE_dataThreadLocalClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3360;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3363;
			this.match(Cobol85Parser.THREAD_LOCAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataTypeClause(): DataTypeClauseContext {
		let _localctx: DataTypeClauseContext = new DataTypeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, Cobol85Parser.RULE_dataTypeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3365;
			this.match(Cobol85Parser.TYPE);
			this.state = 3367;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3366;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3369;
			_la = this._input.LA(1);
			if (!(((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & ((1 << (Cobol85Parser.LONG_DATE - 287)) | (1 << (Cobol85Parser.LONG_TIME - 287)) | (1 << (Cobol85Parser.NUMERIC_DATE - 287)))) !== 0) || _la === Cobol85Parser.NUMERIC_TIME || _la === Cobol85Parser.SHORT_DATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataTypeDefClause(): DataTypeDefClauseContext {
		let _localctx: DataTypeDefClauseContext = new DataTypeDefClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, Cobol85Parser.RULE_dataTypeDefClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 3371;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 3374;
			this.match(Cobol85Parser.TYPEDEF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataUsageClause(): DataUsageClauseContext {
		let _localctx: DataUsageClauseContext = new DataUsageClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, Cobol85Parser.RULE_dataUsageClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.USAGE) {
				{
				this.state = 3376;
				this.match(Cobol85Parser.USAGE);
				this.state = 3378;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 3377;
					this.match(Cobol85Parser.IS);
					}
				}

				}
			}

			this.state = 3415;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.BINARY:
				{
				this.state = 3382;
				this.match(Cobol85Parser.BINARY);
				this.state = 3384;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 430, this._ctx) ) {
				case 1:
					{
					this.state = 3383;
					_la = this._input.LA(1);
					if (!(_la === Cobol85Parser.EXTENDED || _la === Cobol85Parser.TRUNCATED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case Cobol85Parser.BIT:
				{
				this.state = 3386;
				this.match(Cobol85Parser.BIT);
				}
				break;
			case Cobol85Parser.COMP:
				{
				this.state = 3387;
				this.match(Cobol85Parser.COMP);
				}
				break;
			case Cobol85Parser.COMP_1:
				{
				this.state = 3388;
				this.match(Cobol85Parser.COMP_1);
				}
				break;
			case Cobol85Parser.COMP_2:
				{
				this.state = 3389;
				this.match(Cobol85Parser.COMP_2);
				}
				break;
			case Cobol85Parser.COMP_3:
				{
				this.state = 3390;
				this.match(Cobol85Parser.COMP_3);
				}
				break;
			case Cobol85Parser.COMP_4:
				{
				this.state = 3391;
				this.match(Cobol85Parser.COMP_4);
				}
				break;
			case Cobol85Parser.COMP_5:
				{
				this.state = 3392;
				this.match(Cobol85Parser.COMP_5);
				}
				break;
			case Cobol85Parser.COMPUTATIONAL:
				{
				this.state = 3393;
				this.match(Cobol85Parser.COMPUTATIONAL);
				}
				break;
			case Cobol85Parser.COMPUTATIONAL_1:
				{
				this.state = 3394;
				this.match(Cobol85Parser.COMPUTATIONAL_1);
				}
				break;
			case Cobol85Parser.COMPUTATIONAL_2:
				{
				this.state = 3395;
				this.match(Cobol85Parser.COMPUTATIONAL_2);
				}
				break;
			case Cobol85Parser.COMPUTATIONAL_3:
				{
				this.state = 3396;
				this.match(Cobol85Parser.COMPUTATIONAL_3);
				}
				break;
			case Cobol85Parser.COMPUTATIONAL_4:
				{
				this.state = 3397;
				this.match(Cobol85Parser.COMPUTATIONAL_4);
				}
				break;
			case Cobol85Parser.COMPUTATIONAL_5:
				{
				this.state = 3398;
				this.match(Cobol85Parser.COMPUTATIONAL_5);
				}
				break;
			case Cobol85Parser.CONTROL_POINT:
				{
				this.state = 3399;
				this.match(Cobol85Parser.CONTROL_POINT);
				}
				break;
			case Cobol85Parser.DATE:
				{
				this.state = 3400;
				this.match(Cobol85Parser.DATE);
				}
				break;
			case Cobol85Parser.DISPLAY:
				{
				this.state = 3401;
				this.match(Cobol85Parser.DISPLAY);
				}
				break;
			case Cobol85Parser.DISPLAY_1:
				{
				this.state = 3402;
				this.match(Cobol85Parser.DISPLAY_1);
				}
				break;
			case Cobol85Parser.DOUBLE:
				{
				this.state = 3403;
				this.match(Cobol85Parser.DOUBLE);
				}
				break;
			case Cobol85Parser.EVENT:
				{
				this.state = 3404;
				this.match(Cobol85Parser.EVENT);
				}
				break;
			case Cobol85Parser.FUNCTION_POINTER:
				{
				this.state = 3405;
				this.match(Cobol85Parser.FUNCTION_POINTER);
				}
				break;
			case Cobol85Parser.INDEX:
				{
				this.state = 3406;
				this.match(Cobol85Parser.INDEX);
				}
				break;
			case Cobol85Parser.KANJI:
				{
				this.state = 3407;
				this.match(Cobol85Parser.KANJI);
				}
				break;
			case Cobol85Parser.LOCK:
				{
				this.state = 3408;
				this.match(Cobol85Parser.LOCK);
				}
				break;
			case Cobol85Parser.NATIONAL:
				{
				this.state = 3409;
				this.match(Cobol85Parser.NATIONAL);
				}
				break;
			case Cobol85Parser.PACKED_DECIMAL:
				{
				this.state = 3410;
				this.match(Cobol85Parser.PACKED_DECIMAL);
				}
				break;
			case Cobol85Parser.POINTER:
				{
				this.state = 3411;
				this.match(Cobol85Parser.POINTER);
				}
				break;
			case Cobol85Parser.PROCEDURE_POINTER:
				{
				this.state = 3412;
				this.match(Cobol85Parser.PROCEDURE_POINTER);
				}
				break;
			case Cobol85Parser.REAL:
				{
				this.state = 3413;
				this.match(Cobol85Parser.REAL);
				}
				break;
			case Cobol85Parser.TASK:
				{
				this.state = 3414;
				this.match(Cobol85Parser.TASK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataUsingClause(): DataUsingClauseContext {
		let _localctx: DataUsingClauseContext = new DataUsingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, Cobol85Parser.RULE_dataUsingClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3417;
			this.match(Cobol85Parser.USING);
			this.state = 3418;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.CONVENTION || _la === Cobol85Parser.LANGUAGE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OF) {
				{
				this.state = 3419;
				this.match(Cobol85Parser.OF);
				}
			}

			this.state = 3424;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
			case 1:
				{
				this.state = 3422;
				this.cobolWord();
				}
				break;

			case 2:
				{
				this.state = 3423;
				this.dataName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataValueClause(): DataValueClauseContext {
		let _localctx: DataValueClauseContext = new DataValueClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, Cobol85Parser.RULE_dataValueClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3434;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.VALUE:
				{
				this.state = 3426;
				this.match(Cobol85Parser.VALUE);
				this.state = 3428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IS) {
					{
					this.state = 3427;
					this.match(Cobol85Parser.IS);
					}
				}

				}
				break;
			case Cobol85Parser.VALUES:
				{
				this.state = 3430;
				this.match(Cobol85Parser.VALUES);
				this.state = 3432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.ARE) {
					{
					this.state = 3431;
					this.match(Cobol85Parser.ARE);
					}
				}

				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.ALL:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FALSE:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.HIGH_VALUE:
			case Cobol85Parser.HIGH_VALUES:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.LOW_VALUE:
			case Cobol85Parser.LOW_VALUES:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NULL:
			case Cobol85Parser.NULLS:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.QUOTE:
			case Cobol85Parser.QUOTES:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SPACE:
			case Cobol85Parser.SPACES:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUE:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.ZEROS:
			case Cobol85Parser.ZEROES:
			case Cobol85Parser.NONNUMERICLITERAL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.NUMERICLITERAL:
			case Cobol85Parser.IDENTIFIER:
				break;
			default:
				break;
			}
			this.state = 3436;
			this.dataValueInterval();
			this.state = 3443;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3438;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.COMMACHAR) {
						{
						this.state = 3437;
						this.match(Cobol85Parser.COMMACHAR);
						}
					}

					this.state = 3440;
					this.dataValueInterval();
					}
					}
				}
				this.state = 3445;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 438, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataValueInterval(): DataValueIntervalContext {
		let _localctx: DataValueIntervalContext = new DataValueIntervalContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, Cobol85Parser.RULE_dataValueInterval);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3446;
			this.dataValueIntervalFrom();
			this.state = 3448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
				{
				this.state = 3447;
				this.dataValueIntervalTo();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataValueIntervalFrom(): DataValueIntervalFromContext {
		let _localctx: DataValueIntervalFromContext = new DataValueIntervalFromContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, Cobol85Parser.RULE_dataValueIntervalFrom);
		try {
			this.state = 3452;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3450;
				this.literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3451;
				this.cobolWord();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataValueIntervalTo(): DataValueIntervalToContext {
		let _localctx: DataValueIntervalToContext = new DataValueIntervalToContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, Cobol85Parser.RULE_dataValueIntervalTo);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3454;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3455;
			this.literal();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataWithLowerBoundsClause(): DataWithLowerBoundsClauseContext {
		let _localctx: DataWithLowerBoundsClauseContext = new DataWithLowerBoundsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, Cobol85Parser.RULE_dataWithLowerBoundsClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 3457;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 3460;
			this.match(Cobol85Parser.LOWER);
			this.state = 3461;
			this.match(Cobol85Parser.BOUNDS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivision(): ProcedureDivisionContext {
		let _localctx: ProcedureDivisionContext = new ProcedureDivisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, Cobol85Parser.RULE_procedureDivision);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3463;
			this.match(Cobol85Parser.PROCEDURE);
			this.state = 3464;
			this.match(Cobol85Parser.DIVISION);
			this.state = 3466;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.CHAINING || _la === Cobol85Parser.USING) {
				{
				this.state = 3465;
				this.procedureDivisionUsingClause();
				}
			}

			this.state = 3469;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING) {
				{
				this.state = 3468;
				this.procedureDivisionGivingClause();
				}
			}

			this.state = 3471;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 3473;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DECLARATIVES) {
				{
				this.state = 3472;
				this.procedureDeclaratives();
				}
			}

			this.state = 3475;
			this.procedureDivisionBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionUsingClause(): ProcedureDivisionUsingClauseContext {
		let _localctx: ProcedureDivisionUsingClauseContext = new ProcedureDivisionUsingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, Cobol85Parser.RULE_procedureDivisionUsingClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3477;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.CHAINING || _la === Cobol85Parser.USING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3479;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3478;
				this.procedureDivisionUsingParameter();
				}
				}
				this.state = 3481;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ANY) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.BY - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.OPTIONAL - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (Cobol85Parser.REFERENCE - 384)) | (1 << (Cobol85Parser.REMOVE - 384)) | (1 << (Cobol85Parser.REQUIRED - 384)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 384)) | (1 << (Cobol85Parser.RETURN_CODE - 384)) | (1 << (Cobol85Parser.SAVE - 384)))) !== 0) || ((((_la - 420)) & ~0x1F) === 0 && ((1 << (_la - 420)) & ((1 << (Cobol85Parser.SECURE - 420)) | (1 << (Cobol85Parser.SHARED - 420)) | (1 << (Cobol85Parser.SHAREDBYALL - 420)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 420)) | (1 << (Cobol85Parser.SHARING - 420)) | (1 << (Cobol85Parser.SHIFT_IN - 420)) | (1 << (Cobol85Parser.SHIFT_OUT - 420)) | (1 << (Cobol85Parser.SHORT_DATE - 420)) | (1 << (Cobol85Parser.SORT_CONTROL - 420)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_MESSAGE - 420)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 420)) | (1 << (Cobol85Parser.SORT_RETURN - 420)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VALUE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionGivingClause(): ProcedureDivisionGivingClauseContext {
		let _localctx: ProcedureDivisionGivingClauseContext = new ProcedureDivisionGivingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, Cobol85Parser.RULE_procedureDivisionGivingClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3483;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3484;
			this.dataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionUsingParameter(): ProcedureDivisionUsingParameterContext {
		let _localctx: ProcedureDivisionUsingParameterContext = new ProcedureDivisionUsingParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, Cobol85Parser.RULE_procedureDivisionUsingParameter);
		try {
			this.state = 3488;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 446, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3486;
				this.procedureDivisionByReferencePhrase();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3487;
				this.procedureDivisionByValuePhrase();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionByReferencePhrase(): ProcedureDivisionByReferencePhraseContext {
		let _localctx: ProcedureDivisionByReferencePhraseContext = new ProcedureDivisionByReferencePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, Cobol85Parser.RULE_procedureDivisionByReferencePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3494;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY || _la === Cobol85Parser.REFERENCE) {
				{
				this.state = 3491;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.BY) {
					{
					this.state = 3490;
					this.match(Cobol85Parser.BY);
					}
				}

				this.state = 3493;
				this.match(Cobol85Parser.REFERENCE);
				}
			}

			this.state = 3497;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3496;
					this.procedureDivisionByReference();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3499;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 449, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionByReference(): ProcedureDivisionByReferenceContext {
		let _localctx: ProcedureDivisionByReferenceContext = new ProcedureDivisionByReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, Cobol85Parser.RULE_procedureDivisionByReference);
		let _la: number;
		try {
			this.state = 3509;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.ADDRESS:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DATE:
			case Cobol85Parser.DAY:
			case Cobol85Parser.DAY_OF_WEEK:
			case Cobol85Parser.DEBUG_CONTENTS:
			case Cobol85Parser.DEBUG_ITEM:
			case Cobol85Parser.DEBUG_LINE:
			case Cobol85Parser.DEBUG_NAME:
			case Cobol85Parser.DEBUG_SUB_1:
			case Cobol85Parser.DEBUG_SUB_2:
			case Cobol85Parser.DEBUG_SUB_3:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTION:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LINAGE_COUNTER:
			case Cobol85Parser.LINE_COUNTER:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.OPTIONAL:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PAGE_COUNTER:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.RETURN_CODE:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHIFT_IN:
			case Cobol85Parser.SHIFT_OUT:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SORT_CONTROL:
			case Cobol85Parser.SORT_CORE_SIZE:
			case Cobol85Parser.SORT_FILE_SIZE:
			case Cobol85Parser.SORT_MESSAGE:
			case Cobol85Parser.SORT_MODE_SIZE:
			case Cobol85Parser.SORT_RETURN:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TALLY:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIME:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.WHEN_COMPILED:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 3502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.OPTIONAL) {
					{
					this.state = 3501;
					this.match(Cobol85Parser.OPTIONAL);
					}
				}

				this.state = 3506;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 451, this._ctx) ) {
				case 1:
					{
					this.state = 3504;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 3505;
					this.fileName();
					}
					break;
				}
				}
				}
				break;
			case Cobol85Parser.ANY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3508;
				this.match(Cobol85Parser.ANY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionByValuePhrase(): ProcedureDivisionByValuePhraseContext {
		let _localctx: ProcedureDivisionByValuePhraseContext = new ProcedureDivisionByValuePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, Cobol85Parser.RULE_procedureDivisionByValuePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY) {
				{
				this.state = 3511;
				this.match(Cobol85Parser.BY);
				}
			}

			this.state = 3514;
			this.match(Cobol85Parser.VALUE);
			this.state = 3516;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3515;
					this.procedureDivisionByValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3518;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 454, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionByValue(): ProcedureDivisionByValueContext {
		let _localctx: ProcedureDivisionByValueContext = new ProcedureDivisionByValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, Cobol85Parser.RULE_procedureDivisionByValue);
		try {
			this.state = 3523;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 455, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3520;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3521;
				this.literal();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3522;
				this.match(Cobol85Parser.ANY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDeclaratives(): ProcedureDeclarativesContext {
		let _localctx: ProcedureDeclarativesContext = new ProcedureDeclarativesContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, Cobol85Parser.RULE_procedureDeclaratives);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3525;
			this.match(Cobol85Parser.DECLARATIVES);
			this.state = 3526;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 3528;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3527;
				this.procedureDeclarative();
				}
				}
				this.state = 3530;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			this.state = 3532;
			this.match(Cobol85Parser.END);
			this.state = 3533;
			this.match(Cobol85Parser.DECLARATIVES);
			this.state = 3534;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDeclarative(): ProcedureDeclarativeContext {
		let _localctx: ProcedureDeclarativeContext = new ProcedureDeclarativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, Cobol85Parser.RULE_procedureDeclarative);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3536;
			this.procedureSectionHeader();
			this.state = 3537;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 3538;
			this.useStatement();
			this.state = 3539;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 3540;
			this.paragraphs();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureSectionHeader(): ProcedureSectionHeaderContext {
		let _localctx: ProcedureSectionHeaderContext = new ProcedureSectionHeaderContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, Cobol85Parser.RULE_procedureSectionHeader);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3542;
			this.sectionName();
			this.state = 3543;
			this.match(Cobol85Parser.SECTION);
			this.state = 3545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0)) {
				{
				this.state = 3544;
				this.integerLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureDivisionBody(): ProcedureDivisionBodyContext {
		let _localctx: ProcedureDivisionBodyContext = new ProcedureDivisionBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, Cobol85Parser.RULE_procedureDivisionBody);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3547;
			this.paragraphs();
			this.state = 3551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0)) {
				{
				{
				this.state = 3548;
				this.procedureSection();
				}
				}
				this.state = 3553;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureSection(): ProcedureSectionContext {
		let _localctx: ProcedureSectionContext = new ProcedureSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, Cobol85Parser.RULE_procedureSection);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3554;
			this.procedureSectionHeader();
			this.state = 3555;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 3556;
			this.paragraphs();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraphs(): ParagraphsContext {
		let _localctx: ParagraphsContext = new ParagraphsContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, Cobol85Parser.RULE_paragraphs);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || _la === Cobol85Parser.DOT_FS || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
				{
				{
				this.state = 3558;
				this.sentence();
				}
				}
				this.state = 3563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3567;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3564;
					this.paragraph();
					}
					}
				}
				this.state = 3569;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 460, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph(): ParagraphContext {
		let _localctx: ParagraphContext = new ParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, Cobol85Parser.RULE_paragraph);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3570;
			this.paragraphName();
			this.state = 3571;
			this.match(Cobol85Parser.DOT_FS);
			this.state = 3579;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
			case 1:
				{
				this.state = 3572;
				this.alteredGoTo();
				}
				break;

			case 2:
				{
				this.state = 3576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || _la === Cobol85Parser.DOT_FS || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
					{
					{
					this.state = 3573;
					this.sentence();
					}
					}
					this.state = 3578;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sentence(): SentenceContext {
		let _localctx: SentenceContext = new SentenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, Cobol85Parser.RULE_sentence);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3584;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
				{
				{
				this.state = 3581;
				this.statement();
				}
				}
				this.state = 3586;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3587;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, Cobol85Parser.RULE_statement);
		try {
			this.state = 3638;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ACCEPT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3589;
				this.acceptStatement();
				}
				break;
			case Cobol85Parser.ADD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3590;
				this.addStatement();
				}
				break;
			case Cobol85Parser.ALTER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3591;
				this.alterStatement();
				}
				break;
			case Cobol85Parser.CALL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3592;
				this.callStatement();
				}
				break;
			case Cobol85Parser.CANCEL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3593;
				this.cancelStatement();
				}
				break;
			case Cobol85Parser.CLOSE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3594;
				this.closeStatement();
				}
				break;
			case Cobol85Parser.COMPUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3595;
				this.computeStatement();
				}
				break;
			case Cobol85Parser.CONTINUE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3596;
				this.continueStatement();
				}
				break;
			case Cobol85Parser.DELETE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3597;
				this.deleteStatement();
				}
				break;
			case Cobol85Parser.DISABLE:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3598;
				this.disableStatement();
				}
				break;
			case Cobol85Parser.DISPLAY:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3599;
				this.displayStatement();
				}
				break;
			case Cobol85Parser.DIVIDE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3600;
				this.divideStatement();
				}
				break;
			case Cobol85Parser.ENABLE:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3601;
				this.enableStatement();
				}
				break;
			case Cobol85Parser.ENTRY:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3602;
				this.entryStatement();
				}
				break;
			case Cobol85Parser.EVALUATE:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3603;
				this.evaluateStatement();
				}
				break;
			case Cobol85Parser.EXHIBIT:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3604;
				this.exhibitStatement();
				}
				break;
			case Cobol85Parser.EXECCICSLINE:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3605;
				this.execCicsStatement();
				}
				break;
			case Cobol85Parser.EXECSQLLINE:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3606;
				this.execSqlStatement();
				}
				break;
			case Cobol85Parser.EXECSQLIMSLINE:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3607;
				this.execSqlImsStatement();
				}
				break;
			case Cobol85Parser.EXIT:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3608;
				this.exitStatement();
				}
				break;
			case Cobol85Parser.GENERATE:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 3609;
				this.generateStatement();
				}
				break;
			case Cobol85Parser.GOBACK:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 3610;
				this.gobackStatement();
				}
				break;
			case Cobol85Parser.GO:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 3611;
				this.goToStatement();
				}
				break;
			case Cobol85Parser.IF:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 3612;
				this.ifStatement();
				}
				break;
			case Cobol85Parser.INITIALIZE:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 3613;
				this.initializeStatement();
				}
				break;
			case Cobol85Parser.INITIATE:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 3614;
				this.initiateStatement();
				}
				break;
			case Cobol85Parser.INSPECT:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 3615;
				this.inspectStatement();
				}
				break;
			case Cobol85Parser.MERGE:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 3616;
				this.mergeStatement();
				}
				break;
			case Cobol85Parser.MOVE:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 3617;
				this.moveStatement();
				}
				break;
			case Cobol85Parser.MULTIPLY:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 3618;
				this.multiplyStatement();
				}
				break;
			case Cobol85Parser.OPEN:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 3619;
				this.openStatement();
				}
				break;
			case Cobol85Parser.PERFORM:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 3620;
				this.performStatement();
				}
				break;
			case Cobol85Parser.PURGE:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 3621;
				this.purgeStatement();
				}
				break;
			case Cobol85Parser.READ:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 3622;
				this.readStatement();
				}
				break;
			case Cobol85Parser.RECEIVE:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 3623;
				this.receiveStatement();
				}
				break;
			case Cobol85Parser.RELEASE:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 3624;
				this.releaseStatement();
				}
				break;
			case Cobol85Parser.RETURN:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 3625;
				this.returnStatement();
				}
				break;
			case Cobol85Parser.REWRITE:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 3626;
				this.rewriteStatement();
				}
				break;
			case Cobol85Parser.SEARCH:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 3627;
				this.searchStatement();
				}
				break;
			case Cobol85Parser.SEND:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 3628;
				this.sendStatement();
				}
				break;
			case Cobol85Parser.SET:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 3629;
				this.setStatement();
				}
				break;
			case Cobol85Parser.SORT:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 3630;
				this.sortStatement();
				}
				break;
			case Cobol85Parser.START:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 3631;
				this.startStatement();
				}
				break;
			case Cobol85Parser.STOP:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 3632;
				this.stopStatement();
				}
				break;
			case Cobol85Parser.STRING:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 3633;
				this.stringStatement();
				}
				break;
			case Cobol85Parser.SUBTRACT:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 3634;
				this.subtractStatement();
				}
				break;
			case Cobol85Parser.TERMINATE:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 3635;
				this.terminateStatement();
				}
				break;
			case Cobol85Parser.UNSTRING:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 3636;
				this.unstringStatement();
				}
				break;
			case Cobol85Parser.WRITE:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 3637;
				this.writeStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptStatement(): AcceptStatementContext {
		let _localctx: AcceptStatementContext = new AcceptStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, Cobol85Parser.RULE_acceptStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3640;
			this.match(Cobol85Parser.ACCEPT);
			this.state = 3641;
			this.identifier();
			this.state = 3646;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 465, this._ctx) ) {
			case 1:
				{
				this.state = 3642;
				this.acceptFromDateStatement();
				}
				break;

			case 2:
				{
				this.state = 3643;
				this.acceptFromEscapeKeyStatement();
				}
				break;

			case 3:
				{
				this.state = 3644;
				this.acceptFromMnemonicStatement();
				}
				break;

			case 4:
				{
				this.state = 3645;
				this.acceptMessageCountStatement();
				}
				break;
			}
			this.state = 3649;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 466, this._ctx) ) {
			case 1:
				{
				this.state = 3648;
				this.onExceptionClause();
				}
				break;
			}
			this.state = 3652;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 467, this._ctx) ) {
			case 1:
				{
				this.state = 3651;
				this.notOnExceptionClause();
				}
				break;
			}
			this.state = 3655;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				{
				this.state = 3654;
				this.match(Cobol85Parser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptFromDateStatement(): AcceptFromDateStatementContext {
		let _localctx: AcceptFromDateStatementContext = new AcceptFromDateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, Cobol85Parser.RULE_acceptFromDateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3657;
			this.match(Cobol85Parser.FROM);
			this.state = 3677;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.DATE:
				{
				this.state = 3658;
				this.match(Cobol85Parser.DATE);
				this.state = 3660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.YYYYMMDD) {
					{
					this.state = 3659;
					this.match(Cobol85Parser.YYYYMMDD);
					}
				}

				}
				break;
			case Cobol85Parser.DAY:
				{
				this.state = 3662;
				this.match(Cobol85Parser.DAY);
				this.state = 3664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.YYYYDDD) {
					{
					this.state = 3663;
					this.match(Cobol85Parser.YYYYDDD);
					}
				}

				}
				break;
			case Cobol85Parser.DAY_OF_WEEK:
				{
				this.state = 3666;
				this.match(Cobol85Parser.DAY_OF_WEEK);
				}
				break;
			case Cobol85Parser.TIME:
				{
				this.state = 3667;
				this.match(Cobol85Parser.TIME);
				}
				break;
			case Cobol85Parser.TIMER:
				{
				this.state = 3668;
				this.match(Cobol85Parser.TIMER);
				}
				break;
			case Cobol85Parser.TODAYS_DATE:
				{
				this.state = 3669;
				this.match(Cobol85Parser.TODAYS_DATE);
				this.state = 3671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.MMDDYYYY) {
					{
					this.state = 3670;
					this.match(Cobol85Parser.MMDDYYYY);
					}
				}

				}
				break;
			case Cobol85Parser.TODAYS_NAME:
				{
				this.state = 3673;
				this.match(Cobol85Parser.TODAYS_NAME);
				}
				break;
			case Cobol85Parser.YEAR:
				{
				this.state = 3674;
				this.match(Cobol85Parser.YEAR);
				}
				break;
			case Cobol85Parser.YYYYMMDD:
				{
				this.state = 3675;
				this.match(Cobol85Parser.YYYYMMDD);
				}
				break;
			case Cobol85Parser.YYYYDDD:
				{
				this.state = 3676;
				this.match(Cobol85Parser.YYYYDDD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptFromMnemonicStatement(): AcceptFromMnemonicStatementContext {
		let _localctx: AcceptFromMnemonicStatementContext = new AcceptFromMnemonicStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, Cobol85Parser.RULE_acceptFromMnemonicStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3679;
			this.match(Cobol85Parser.FROM);
			this.state = 3680;
			this.mnemonicName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptFromEscapeKeyStatement(): AcceptFromEscapeKeyStatementContext {
		let _localctx: AcceptFromEscapeKeyStatementContext = new AcceptFromEscapeKeyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, Cobol85Parser.RULE_acceptFromEscapeKeyStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3682;
			this.match(Cobol85Parser.FROM);
			this.state = 3683;
			this.match(Cobol85Parser.ESCAPE);
			this.state = 3684;
			this.match(Cobol85Parser.KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptMessageCountStatement(): AcceptMessageCountStatementContext {
		let _localctx: AcceptMessageCountStatementContext = new AcceptMessageCountStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, Cobol85Parser.RULE_acceptMessageCountStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3687;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.MESSAGE) {
				{
				this.state = 3686;
				this.match(Cobol85Parser.MESSAGE);
				}
			}

			this.state = 3689;
			this.match(Cobol85Parser.COUNT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addStatement(): AddStatementContext {
		let _localctx: AddStatementContext = new AddStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, Cobol85Parser.RULE_addStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3691;
			this.match(Cobol85Parser.ADD);
			this.state = 3695;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 474, this._ctx) ) {
			case 1:
				{
				this.state = 3692;
				this.addToStatement();
				}
				break;

			case 2:
				{
				this.state = 3693;
				this.addToGivingStatement();
				}
				break;

			case 3:
				{
				this.state = 3694;
				this.addCorrespondingStatement();
				}
				break;
			}
			this.state = 3698;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 475, this._ctx) ) {
			case 1:
				{
				this.state = 3697;
				this.onSizeErrorPhrase();
				}
				break;
			}
			this.state = 3701;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 476, this._ctx) ) {
			case 1:
				{
				this.state = 3700;
				this.notOnSizeErrorPhrase();
				}
				break;
			}
			this.state = 3704;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 477, this._ctx) ) {
			case 1:
				{
				this.state = 3703;
				this.match(Cobol85Parser.END_ADD);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addToStatement(): AddToStatementContext {
		let _localctx: AddToStatementContext = new AddToStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, Cobol85Parser.RULE_addToStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3707;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3706;
				this.addFrom();
				}
				}
				this.state = 3709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			this.state = 3711;
			this.match(Cobol85Parser.TO);
			this.state = 3713;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3712;
				this.addTo();
				}
				}
				this.state = 3715;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addToGivingStatement(): AddToGivingStatementContext {
		let _localctx: AddToGivingStatementContext = new AddToGivingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, Cobol85Parser.RULE_addToGivingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3717;
				this.addFrom();
				}
				}
				this.state = 3720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			this.state = 3728;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TO) {
				{
				this.state = 3722;
				this.match(Cobol85Parser.TO);
				this.state = 3724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3723;
					this.addToGiving();
					}
					}
					this.state = 3726;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
				}
			}

			this.state = 3730;
			this.match(Cobol85Parser.GIVING);
			this.state = 3732;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3731;
				this.addGiving();
				}
				}
				this.state = 3734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addCorrespondingStatement(): AddCorrespondingStatementContext {
		let _localctx: AddCorrespondingStatementContext = new AddCorrespondingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, Cobol85Parser.RULE_addCorrespondingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3736;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.CORR || _la === Cobol85Parser.CORRESPONDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3737;
			this.identifier();
			this.state = 3738;
			this.match(Cobol85Parser.TO);
			this.state = 3739;
			this.addTo();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addFrom(): AddFromContext {
		let _localctx: AddFromContext = new AddFromContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, Cobol85Parser.RULE_addFrom);
		try {
			this.state = 3743;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3741;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3742;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addTo(): AddToContext {
		let _localctx: AddToContext = new AddToContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, Cobol85Parser.RULE_addTo);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3745;
			this.identifier();
			this.state = 3747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 3746;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addToGiving(): AddToGivingContext {
		let _localctx: AddToGivingContext = new AddToGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, Cobol85Parser.RULE_addToGiving);
		try {
			this.state = 3751;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 486, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3749;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3750;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public addGiving(): AddGivingContext {
		let _localctx: AddGivingContext = new AddGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, Cobol85Parser.RULE_addGiving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3753;
			this.identifier();
			this.state = 3755;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 3754;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alteredGoTo(): AlteredGoToContext {
		let _localctx: AlteredGoToContext = new AlteredGoToContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, Cobol85Parser.RULE_alteredGoTo);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3757;
			this.match(Cobol85Parser.GO);
			this.state = 3759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TO) {
				{
				this.state = 3758;
				this.match(Cobol85Parser.TO);
				}
			}

			this.state = 3761;
			this.match(Cobol85Parser.DOT_FS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterStatement(): AlterStatementContext {
		let _localctx: AlterStatementContext = new AlterStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, Cobol85Parser.RULE_alterStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3763;
			this.match(Cobol85Parser.ALTER);
			this.state = 3765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3764;
				this.alterProceedTo();
				}
				}
				this.state = 3767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterProceedTo(): AlterProceedToContext {
		let _localctx: AlterProceedToContext = new AlterProceedToContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, Cobol85Parser.RULE_alterProceedTo);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3769;
			this.procedureName();
			this.state = 3770;
			this.match(Cobol85Parser.TO);
			this.state = 3773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.PROCEED) {
				{
				this.state = 3771;
				this.match(Cobol85Parser.PROCEED);
				this.state = 3772;
				this.match(Cobol85Parser.TO);
				}
			}

			this.state = 3775;
			this.procedureName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callStatement(): CallStatementContext {
		let _localctx: CallStatementContext = new CallStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, Cobol85Parser.RULE_callStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3777;
			this.match(Cobol85Parser.CALL);
			this.state = 3780;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 491, this._ctx) ) {
			case 1:
				{
				this.state = 3778;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 3779;
				this.literal();
				}
				break;
			}
			this.state = 3783;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.USING) {
				{
				this.state = 3782;
				this.callUsingPhrase();
				}
			}

			this.state = 3786;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING) {
				{
				this.state = 3785;
				this.callGivingPhrase();
				}
			}

			this.state = 3789;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 494, this._ctx) ) {
			case 1:
				{
				this.state = 3788;
				this.onOverflowPhrase();
				}
				break;
			}
			this.state = 3792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 495, this._ctx) ) {
			case 1:
				{
				this.state = 3791;
				this.onExceptionClause();
				}
				break;
			}
			this.state = 3795;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 496, this._ctx) ) {
			case 1:
				{
				this.state = 3794;
				this.notOnExceptionClause();
				}
				break;
			}
			this.state = 3798;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 497, this._ctx) ) {
			case 1:
				{
				this.state = 3797;
				this.match(Cobol85Parser.END_CALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callUsingPhrase(): CallUsingPhraseContext {
		let _localctx: CallUsingPhraseContext = new CallUsingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, Cobol85Parser.RULE_callUsingPhrase);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3800;
			this.match(Cobol85Parser.USING);
			this.state = 3802;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3801;
					this.callUsingParameter();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3804;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 498, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callUsingParameter(): CallUsingParameterContext {
		let _localctx: CallUsingParameterContext = new CallUsingParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, Cobol85Parser.RULE_callUsingParameter);
		try {
			this.state = 3809;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 499, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3806;
				this.callByReferencePhrase();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3807;
				this.callByValuePhrase();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3808;
				this.callByContentPhrase();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callByReferencePhrase(): CallByReferencePhraseContext {
		let _localctx: CallByReferencePhraseContext = new CallByReferencePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, Cobol85Parser.RULE_callByReferencePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3815;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY || _la === Cobol85Parser.REFERENCE) {
				{
				this.state = 3812;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.BY) {
					{
					this.state = 3811;
					this.match(Cobol85Parser.BY);
					}
				}

				this.state = 3814;
				this.match(Cobol85Parser.REFERENCE);
				}
			}

			this.state = 3818;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3817;
					this.callByReference();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3820;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callByReference(): CallByReferenceContext {
		let _localctx: CallByReferenceContext = new CallByReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, Cobol85Parser.RULE_callByReference);
		try {
			this.state = 3834;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.ADDRESS:
			case Cobol85Parser.ALL:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DATE:
			case Cobol85Parser.DAY:
			case Cobol85Parser.DAY_OF_WEEK:
			case Cobol85Parser.DEBUG_CONTENTS:
			case Cobol85Parser.DEBUG_ITEM:
			case Cobol85Parser.DEBUG_LINE:
			case Cobol85Parser.DEBUG_NAME:
			case Cobol85Parser.DEBUG_SUB_1:
			case Cobol85Parser.DEBUG_SUB_2:
			case Cobol85Parser.DEBUG_SUB_3:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FALSE:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTION:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.HIGH_VALUE:
			case Cobol85Parser.HIGH_VALUES:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LINAGE_COUNTER:
			case Cobol85Parser.LINE_COUNTER:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.LOW_VALUE:
			case Cobol85Parser.LOW_VALUES:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NULL:
			case Cobol85Parser.NULLS:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PAGE_COUNTER:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.QUOTE:
			case Cobol85Parser.QUOTES:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.RETURN_CODE:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHIFT_IN:
			case Cobol85Parser.SHIFT_OUT:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SORT_CONTROL:
			case Cobol85Parser.SORT_CORE_SIZE:
			case Cobol85Parser.SORT_FILE_SIZE:
			case Cobol85Parser.SORT_MESSAGE:
			case Cobol85Parser.SORT_MODE_SIZE:
			case Cobol85Parser.SORT_RETURN:
			case Cobol85Parser.SPACE:
			case Cobol85Parser.SPACES:
			case Cobol85Parser.STRING:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TALLY:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIME:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUE:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.WHEN_COMPILED:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.ZEROS:
			case Cobol85Parser.ZEROES:
			case Cobol85Parser.NONNUMERICLITERAL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.NUMERICLITERAL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3831;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 504, this._ctx) ) {
				case 1:
					{
					this.state = 3826;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 503, this._ctx) ) {
					case 1:
						{
						this.state = 3822;
						this.match(Cobol85Parser.ADDRESS);
						this.state = 3823;
						this.match(Cobol85Parser.OF);
						}
						break;

					case 2:
						{
						this.state = 3824;
						this.match(Cobol85Parser.INTEGER);
						}
						break;

					case 3:
						{
						this.state = 3825;
						this.match(Cobol85Parser.STRING);
						}
						break;
					}
					this.state = 3828;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 3829;
					this.literal();
					}
					break;

				case 3:
					{
					this.state = 3830;
					this.fileName();
					}
					break;
				}
				}
				break;
			case Cobol85Parser.OMITTED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3833;
				this.match(Cobol85Parser.OMITTED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callByValuePhrase(): CallByValuePhraseContext {
		let _localctx: CallByValuePhraseContext = new CallByValuePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, Cobol85Parser.RULE_callByValuePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3837;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY) {
				{
				this.state = 3836;
				this.match(Cobol85Parser.BY);
				}
			}

			this.state = 3839;
			this.match(Cobol85Parser.VALUE);
			this.state = 3841;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3840;
					this.callByValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3843;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 507, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callByValue(): CallByValueContext {
		let _localctx: CallByValueContext = new CallByValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, Cobol85Parser.RULE_callByValue);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3851;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 509, this._ctx) ) {
			case 1:
				{
				this.state = 3845;
				this.match(Cobol85Parser.ADDRESS);
				this.state = 3846;
				this.match(Cobol85Parser.OF);
				}
				break;

			case 2:
				{
				this.state = 3847;
				this.match(Cobol85Parser.LENGTH);
				this.state = 3849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.OF) {
					{
					this.state = 3848;
					this.match(Cobol85Parser.OF);
					}
				}

				}
				break;
			}
			this.state = 3855;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 510, this._ctx) ) {
			case 1:
				{
				this.state = 3853;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 3854;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callByContentPhrase(): CallByContentPhraseContext {
		let _localctx: CallByContentPhraseContext = new CallByContentPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, Cobol85Parser.RULE_callByContentPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY) {
				{
				this.state = 3857;
				this.match(Cobol85Parser.BY);
				}
			}

			this.state = 3860;
			this.match(Cobol85Parser.CONTENT);
			this.state = 3862;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3861;
					this.callByContent();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3864;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 512, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callByContent(): CallByContentContext {
		let _localctx: CallByContentContext = new CallByContentContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, Cobol85Parser.RULE_callByContent);
		let _la: number;
		try {
			this.state = 3877;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 515, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3872;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 514, this._ctx) ) {
				case 1:
					{
					this.state = 3866;
					this.match(Cobol85Parser.ADDRESS);
					this.state = 3867;
					this.match(Cobol85Parser.OF);
					}
					break;

				case 2:
					{
					this.state = 3868;
					this.match(Cobol85Parser.LENGTH);
					this.state = 3870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.OF) {
						{
						this.state = 3869;
						this.match(Cobol85Parser.OF);
						}
					}

					}
					break;
				}
				this.state = 3874;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3875;
				this.literal();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3876;
				this.match(Cobol85Parser.OMITTED);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callGivingPhrase(): CallGivingPhraseContext {
		let _localctx: CallGivingPhraseContext = new CallGivingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, Cobol85Parser.RULE_callGivingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3879;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.GIVING || _la === Cobol85Parser.RETURNING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3880;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelStatement(): CancelStatementContext {
		let _localctx: CancelStatementContext = new CancelStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, Cobol85Parser.RULE_cancelStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3882;
			this.match(Cobol85Parser.CANCEL);
			this.state = 3884;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3883;
				this.cancelCall();
				}
				}
				this.state = 3886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancelCall(): CancelCallContext {
		let _localctx: CancelCallContext = new CancelCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, Cobol85Parser.RULE_cancelCall);
		let _la: number;
		try {
			this.state = 3893;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 517, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3888;
				this.libraryName();
				this.state = 3889;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.BYFUNCTION || _la === Cobol85Parser.BYTITLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3891;
				this.identifier();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3892;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closeStatement(): CloseStatementContext {
		let _localctx: CloseStatementContext = new CloseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, Cobol85Parser.RULE_closeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3895;
			this.match(Cobol85Parser.CLOSE);
			this.state = 3897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3896;
				this.closeFile();
				}
				}
				this.state = 3899;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closeFile(): CloseFileContext {
		let _localctx: CloseFileContext = new CloseFileContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, Cobol85Parser.RULE_closeFile);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3901;
			this.fileName();
			this.state = 3905;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 519, this._ctx) ) {
			case 1:
				{
				this.state = 3902;
				this.closeReelUnitStatement();
				}
				break;

			case 2:
				{
				this.state = 3903;
				this.closeRelativeStatement();
				}
				break;

			case 3:
				{
				this.state = 3904;
				this.closePortFileIOStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closeReelUnitStatement(): CloseReelUnitStatementContext {
		let _localctx: CloseReelUnitStatementContext = new CloseReelUnitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, Cobol85Parser.RULE_closeReelUnitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3907;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.REEL || _la === Cobol85Parser.UNIT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3912;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.REMOVAL) {
				{
				this.state = 3909;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.FOR) {
					{
					this.state = 3908;
					this.match(Cobol85Parser.FOR);
					}
				}

				this.state = 3911;
				this.match(Cobol85Parser.REMOVAL);
				}
			}

			this.state = 3922;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 524, this._ctx) ) {
			case 1:
				{
				this.state = 3915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 3914;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 3920;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.NO:
					{
					this.state = 3917;
					this.match(Cobol85Parser.NO);
					this.state = 3918;
					this.match(Cobol85Parser.REWIND);
					}
					break;
				case Cobol85Parser.LOCK:
					{
					this.state = 3919;
					this.match(Cobol85Parser.LOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closeRelativeStatement(): CloseRelativeStatementContext {
		let _localctx: CloseRelativeStatementContext = new CloseRelativeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, Cobol85Parser.RULE_closeRelativeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 3924;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 3930;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NO:
				{
				this.state = 3927;
				this.match(Cobol85Parser.NO);
				this.state = 3928;
				this.match(Cobol85Parser.REWIND);
				}
				break;
			case Cobol85Parser.LOCK:
				{
				this.state = 3929;
				this.match(Cobol85Parser.LOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closePortFileIOStatement(): ClosePortFileIOStatementContext {
		let _localctx: ClosePortFileIOStatementContext = new ClosePortFileIOStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, Cobol85Parser.RULE_closePortFileIOStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3939;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 528, this._ctx) ) {
			case 1:
				{
				this.state = 3933;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 3932;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 3935;
				this.match(Cobol85Parser.NO);
				this.state = 3936;
				this.match(Cobol85Parser.WAIT);
				}
				break;

			case 2:
				{
				this.state = 3937;
				this.match(Cobol85Parser.WITH);
				this.state = 3938;
				this.match(Cobol85Parser.WAIT);
				}
				break;
			}
			this.state = 3947;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.USING) {
				{
				this.state = 3941;
				this.match(Cobol85Parser.USING);
				this.state = 3943;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3942;
						this.closePortFileIOUsing();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3945;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 529, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closePortFileIOUsing(): ClosePortFileIOUsingContext {
		let _localctx: ClosePortFileIOUsingContext = new ClosePortFileIOUsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, Cobol85Parser.RULE_closePortFileIOUsing);
		try {
			this.state = 3952;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.CLOSE_DISPOSITION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3949;
				this.closePortFileIOUsingCloseDisposition();
				}
				break;
			case Cobol85Parser.ASSOCIATED_DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3950;
				this.closePortFileIOUsingAssociatedData();
				}
				break;
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3951;
				this.closePortFileIOUsingAssociatedDataLength();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closePortFileIOUsingCloseDisposition(): ClosePortFileIOUsingCloseDispositionContext {
		let _localctx: ClosePortFileIOUsingCloseDispositionContext = new ClosePortFileIOUsingCloseDispositionContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3954;
			this.match(Cobol85Parser.CLOSE_DISPOSITION);
			this.state = 3956;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OF) {
				{
				this.state = 3955;
				this.match(Cobol85Parser.OF);
				}
			}

			this.state = 3958;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ABORT || _la === Cobol85Parser.ORDERLY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closePortFileIOUsingAssociatedData(): ClosePortFileIOUsingAssociatedDataContext {
		let _localctx: ClosePortFileIOUsingAssociatedDataContext = new ClosePortFileIOUsingAssociatedDataContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, Cobol85Parser.RULE_closePortFileIOUsingAssociatedData);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3960;
			this.match(Cobol85Parser.ASSOCIATED_DATA);
			this.state = 3963;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 533, this._ctx) ) {
			case 1:
				{
				this.state = 3961;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 3962;
				this.integerLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closePortFileIOUsingAssociatedDataLength(): ClosePortFileIOUsingAssociatedDataLengthContext {
		let _localctx: ClosePortFileIOUsingAssociatedDataLengthContext = new ClosePortFileIOUsingAssociatedDataLengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3965;
			this.match(Cobol85Parser.ASSOCIATED_DATA_LENGTH);
			this.state = 3967;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OF) {
				{
				this.state = 3966;
				this.match(Cobol85Parser.OF);
				}
			}

			this.state = 3971;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 535, this._ctx) ) {
			case 1:
				{
				this.state = 3969;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 3970;
				this.integerLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computeStatement(): ComputeStatementContext {
		let _localctx: ComputeStatementContext = new ComputeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, Cobol85Parser.RULE_computeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3973;
			this.match(Cobol85Parser.COMPUTE);
			this.state = 3975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3974;
				this.computeStore();
				}
				}
				this.state = 3977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			this.state = 3979;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.EQUAL || _la === Cobol85Parser.EQUALCHAR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3980;
			this.arithmeticExpression();
			this.state = 3982;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 537, this._ctx) ) {
			case 1:
				{
				this.state = 3981;
				this.onSizeErrorPhrase();
				}
				break;
			}
			this.state = 3985;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 538, this._ctx) ) {
			case 1:
				{
				this.state = 3984;
				this.notOnSizeErrorPhrase();
				}
				break;
			}
			this.state = 3988;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 539, this._ctx) ) {
			case 1:
				{
				this.state = 3987;
				this.match(Cobol85Parser.END_COMPUTE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computeStore(): ComputeStoreContext {
		let _localctx: ComputeStoreContext = new ComputeStoreContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, Cobol85Parser.RULE_computeStore);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3990;
			this.identifier();
			this.state = 3992;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 3991;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public continueStatement(): ContinueStatementContext {
		let _localctx: ContinueStatementContext = new ContinueStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, Cobol85Parser.RULE_continueStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3994;
			this.match(Cobol85Parser.CONTINUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let _localctx: DeleteStatementContext = new DeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, Cobol85Parser.RULE_deleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3996;
			this.match(Cobol85Parser.DELETE);
			this.state = 3997;
			this.fileName();
			this.state = 3999;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RECORD) {
				{
				this.state = 3998;
				this.match(Cobol85Parser.RECORD);
				}
			}

			this.state = 4002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 542, this._ctx) ) {
			case 1:
				{
				this.state = 4001;
				this.invalidKeyPhrase();
				}
				break;
			}
			this.state = 4005;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 543, this._ctx) ) {
			case 1:
				{
				this.state = 4004;
				this.notInvalidKeyPhrase();
				}
				break;
			}
			this.state = 4008;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 544, this._ctx) ) {
			case 1:
				{
				this.state = 4007;
				this.match(Cobol85Parser.END_DELETE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disableStatement(): DisableStatementContext {
		let _localctx: DisableStatementContext = new DisableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, Cobol85Parser.RULE_disableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4010;
			this.match(Cobol85Parser.DISABLE);
			this.state = 4018;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.INPUT:
				{
				this.state = 4011;
				this.match(Cobol85Parser.INPUT);
				this.state = 4013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.TERMINAL) {
					{
					this.state = 4012;
					this.match(Cobol85Parser.TERMINAL);
					}
				}

				}
				break;
			case Cobol85Parser.I_O:
				{
				this.state = 4015;
				this.match(Cobol85Parser.I_O);
				this.state = 4016;
				this.match(Cobol85Parser.TERMINAL);
				}
				break;
			case Cobol85Parser.OUTPUT:
				{
				this.state = 4017;
				this.match(Cobol85Parser.OUTPUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4020;
			this.cdName();
			this.state = 4022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 4021;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 4024;
			this.match(Cobol85Parser.KEY);
			this.state = 4027;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 548, this._ctx) ) {
			case 1:
				{
				this.state = 4025;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4026;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayStatement(): DisplayStatementContext {
		let _localctx: DisplayStatementContext = new DisplayStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, Cobol85Parser.RULE_displayStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4029;
			this.match(Cobol85Parser.DISPLAY);
			this.state = 4031;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4030;
				this.displayOperand();
				}
				}
				this.state = 4033;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			this.state = 4036;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 550, this._ctx) ) {
			case 1:
				{
				this.state = 4035;
				this.displayAt();
				}
				break;
			}
			this.state = 4039;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.UPON) {
				{
				this.state = 4038;
				this.displayUpon();
				}
			}

			this.state = 4042;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 552, this._ctx) ) {
			case 1:
				{
				this.state = 4041;
				this.displayWith();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayOperand(): DisplayOperandContext {
		let _localctx: DisplayOperandContext = new DisplayOperandContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, Cobol85Parser.RULE_displayOperand);
		try {
			this.state = 4046;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 553, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4044;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4045;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayAt(): DisplayAtContext {
		let _localctx: DisplayAtContext = new DisplayAtContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, Cobol85Parser.RULE_displayAt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4048;
			this.match(Cobol85Parser.AT);
			this.state = 4051;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 554, this._ctx) ) {
			case 1:
				{
				this.state = 4049;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4050;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayUpon(): DisplayUponContext {
		let _localctx: DisplayUponContext = new DisplayUponContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, Cobol85Parser.RULE_displayUpon);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4053;
			this.match(Cobol85Parser.UPON);
			this.state = 4056;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 555, this._ctx) ) {
			case 1:
				{
				this.state = 4054;
				this.mnemonicName();
				}
				break;

			case 2:
				{
				this.state = 4055;
				this.environmentName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayWith(): DisplayWithContext {
		let _localctx: DisplayWithContext = new DisplayWithContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, Cobol85Parser.RULE_displayWith);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 4058;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 4061;
			this.match(Cobol85Parser.NO);
			this.state = 4062;
			this.match(Cobol85Parser.ADVANCING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideStatement(): DivideStatementContext {
		let _localctx: DivideStatementContext = new DivideStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, Cobol85Parser.RULE_divideStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4064;
			this.match(Cobol85Parser.DIVIDE);
			this.state = 4067;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 557, this._ctx) ) {
			case 1:
				{
				this.state = 4065;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4066;
				this.literal();
				}
				break;
			}
			this.state = 4072;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 558, this._ctx) ) {
			case 1:
				{
				this.state = 4069;
				this.divideIntoStatement();
				}
				break;

			case 2:
				{
				this.state = 4070;
				this.divideIntoGivingStatement();
				}
				break;

			case 3:
				{
				this.state = 4071;
				this.divideByGivingStatement();
				}
				break;
			}
			this.state = 4075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.REMAINDER) {
				{
				this.state = 4074;
				this.divideRemainder();
				}
			}

			this.state = 4078;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 560, this._ctx) ) {
			case 1:
				{
				this.state = 4077;
				this.onSizeErrorPhrase();
				}
				break;
			}
			this.state = 4081;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 561, this._ctx) ) {
			case 1:
				{
				this.state = 4080;
				this.notOnSizeErrorPhrase();
				}
				break;
			}
			this.state = 4084;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 562, this._ctx) ) {
			case 1:
				{
				this.state = 4083;
				this.match(Cobol85Parser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideIntoStatement(): DivideIntoStatementContext {
		let _localctx: DivideIntoStatementContext = new DivideIntoStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, Cobol85Parser.RULE_divideIntoStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4086;
			this.match(Cobol85Parser.INTO);
			this.state = 4088;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4087;
				this.divideInto();
				}
				}
				this.state = 4090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideIntoGivingStatement(): DivideIntoGivingStatementContext {
		let _localctx: DivideIntoGivingStatementContext = new DivideIntoGivingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, Cobol85Parser.RULE_divideIntoGivingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4092;
			this.match(Cobol85Parser.INTO);
			this.state = 4095;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 564, this._ctx) ) {
			case 1:
				{
				this.state = 4093;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4094;
				this.literal();
				}
				break;
			}
			this.state = 4098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.GIVING) {
				{
				this.state = 4097;
				this.divideGivingPhrase();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideByGivingStatement(): DivideByGivingStatementContext {
		let _localctx: DivideByGivingStatementContext = new DivideByGivingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, Cobol85Parser.RULE_divideByGivingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4100;
			this.match(Cobol85Parser.BY);
			this.state = 4103;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 566, this._ctx) ) {
			case 1:
				{
				this.state = 4101;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4102;
				this.literal();
				}
				break;
			}
			this.state = 4106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.GIVING) {
				{
				this.state = 4105;
				this.divideGivingPhrase();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideGivingPhrase(): DivideGivingPhraseContext {
		let _localctx: DivideGivingPhraseContext = new DivideGivingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, Cobol85Parser.RULE_divideGivingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4108;
			this.match(Cobol85Parser.GIVING);
			this.state = 4110;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4109;
				this.divideGiving();
				}
				}
				this.state = 4112;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideInto(): DivideIntoContext {
		let _localctx: DivideIntoContext = new DivideIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, Cobol85Parser.RULE_divideInto);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4114;
			this.identifier();
			this.state = 4116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 4115;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideGiving(): DivideGivingContext {
		let _localctx: DivideGivingContext = new DivideGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, Cobol85Parser.RULE_divideGiving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4118;
			this.identifier();
			this.state = 4120;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 4119;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divideRemainder(): DivideRemainderContext {
		let _localctx: DivideRemainderContext = new DivideRemainderContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, Cobol85Parser.RULE_divideRemainder);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4122;
			this.match(Cobol85Parser.REMAINDER);
			this.state = 4123;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enableStatement(): EnableStatementContext {
		let _localctx: EnableStatementContext = new EnableStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, Cobol85Parser.RULE_enableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4125;
			this.match(Cobol85Parser.ENABLE);
			this.state = 4133;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.INPUT:
				{
				this.state = 4126;
				this.match(Cobol85Parser.INPUT);
				this.state = 4128;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.TERMINAL) {
					{
					this.state = 4127;
					this.match(Cobol85Parser.TERMINAL);
					}
				}

				}
				break;
			case Cobol85Parser.I_O:
				{
				this.state = 4130;
				this.match(Cobol85Parser.I_O);
				this.state = 4131;
				this.match(Cobol85Parser.TERMINAL);
				}
				break;
			case Cobol85Parser.OUTPUT:
				{
				this.state = 4132;
				this.match(Cobol85Parser.OUTPUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4135;
			this.cdName();
			this.state = 4137;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 4136;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 4139;
			this.match(Cobol85Parser.KEY);
			this.state = 4142;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 574, this._ctx) ) {
			case 1:
				{
				this.state = 4140;
				this.literal();
				}
				break;

			case 2:
				{
				this.state = 4141;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entryStatement(): EntryStatementContext {
		let _localctx: EntryStatementContext = new EntryStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, Cobol85Parser.RULE_entryStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4144;
			this.match(Cobol85Parser.ENTRY);
			this.state = 4145;
			this.literal();
			this.state = 4152;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.USING) {
				{
				this.state = 4146;
				this.match(Cobol85Parser.USING);
				this.state = 4148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4147;
					this.identifier();
					}
					}
					this.state = 4150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateStatement(): EvaluateStatementContext {
		let _localctx: EvaluateStatementContext = new EvaluateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, Cobol85Parser.RULE_evaluateStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4154;
			this.match(Cobol85Parser.EVALUATE);
			this.state = 4155;
			this.evaluateSelect();
			this.state = 4159;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.ALSO) {
				{
				{
				this.state = 4156;
				this.evaluateAlsoSelect();
				}
				}
				this.state = 4161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4163;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4162;
					this.evaluateWhenPhrase();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4165;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4168;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 579, this._ctx) ) {
			case 1:
				{
				this.state = 4167;
				this.evaluateWhenOther();
				}
				break;
			}
			this.state = 4171;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 580, this._ctx) ) {
			case 1:
				{
				this.state = 4170;
				this.match(Cobol85Parser.END_EVALUATE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateSelect(): EvaluateSelectContext {
		let _localctx: EvaluateSelectContext = new EvaluateSelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, Cobol85Parser.RULE_evaluateSelect);
		try {
			this.state = 4177;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 581, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4173;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4174;
				this.literal();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4175;
				this.arithmeticExpression();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4176;
				this.condition();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateAlsoSelect(): EvaluateAlsoSelectContext {
		let _localctx: EvaluateAlsoSelectContext = new EvaluateAlsoSelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, Cobol85Parser.RULE_evaluateAlsoSelect);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4179;
			this.match(Cobol85Parser.ALSO);
			this.state = 4180;
			this.evaluateSelect();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateWhenPhrase(): EvaluateWhenPhraseContext {
		let _localctx: EvaluateWhenPhraseContext = new EvaluateWhenPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, Cobol85Parser.RULE_evaluateWhenPhrase);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4183;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4182;
					this.evaluateWhen();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4185;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 582, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4190;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4187;
					this.statement();
					}
					}
				}
				this.state = 4192;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 583, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateWhen(): EvaluateWhenContext {
		let _localctx: EvaluateWhenContext = new EvaluateWhenContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, Cobol85Parser.RULE_evaluateWhen);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4193;
			this.match(Cobol85Parser.WHEN);
			this.state = 4194;
			this.evaluateCondition();
			this.state = 4198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.ALSO) {
				{
				{
				this.state = 4195;
				this.evaluateAlsoCondition();
				}
				}
				this.state = 4200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateCondition(): EvaluateConditionContext {
		let _localctx: EvaluateConditionContext = new EvaluateConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, Cobol85Parser.RULE_evaluateCondition);
		let _la: number;
		try {
			this.state = 4211;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 587, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4201;
				this.match(Cobol85Parser.ANY);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.NOT) {
					{
					this.state = 4202;
					this.match(Cobol85Parser.NOT);
					}
				}

				this.state = 4205;
				this.evaluateValue();
				this.state = 4207;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
					{
					this.state = 4206;
					this.evaluateThrough();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4209;
				this.condition();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4210;
				this.booleanLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateThrough(): EvaluateThroughContext {
		let _localctx: EvaluateThroughContext = new EvaluateThroughContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, Cobol85Parser.RULE_evaluateThrough);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4213;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4214;
			this.evaluateValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateAlsoCondition(): EvaluateAlsoConditionContext {
		let _localctx: EvaluateAlsoConditionContext = new EvaluateAlsoConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, Cobol85Parser.RULE_evaluateAlsoCondition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4216;
			this.match(Cobol85Parser.ALSO);
			this.state = 4217;
			this.evaluateCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateWhenOther(): EvaluateWhenOtherContext {
		let _localctx: EvaluateWhenOtherContext = new EvaluateWhenOtherContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, Cobol85Parser.RULE_evaluateWhenOther);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4219;
			this.match(Cobol85Parser.WHEN);
			this.state = 4220;
			this.match(Cobol85Parser.OTHER);
			this.state = 4224;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4221;
					this.statement();
					}
					}
				}
				this.state = 4226;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluateValue(): EvaluateValueContext {
		let _localctx: EvaluateValueContext = new EvaluateValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, Cobol85Parser.RULE_evaluateValue);
		try {
			this.state = 4230;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 589, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4227;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4228;
				this.literal();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4229;
				this.arithmeticExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execCicsStatement(): ExecCicsStatementContext {
		let _localctx: ExecCicsStatementContext = new ExecCicsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, Cobol85Parser.RULE_execCicsStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4233;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4232;
					this.match(Cobol85Parser.EXECCICSLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4235;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 590, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execSqlStatement(): ExecSqlStatementContext {
		let _localctx: ExecSqlStatementContext = new ExecSqlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, Cobol85Parser.RULE_execSqlStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4238;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4237;
					this.match(Cobol85Parser.EXECSQLLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4240;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 591, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execSqlImsStatement(): ExecSqlImsStatementContext {
		let _localctx: ExecSqlImsStatementContext = new ExecSqlImsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, Cobol85Parser.RULE_execSqlImsStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4243;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4242;
					this.match(Cobol85Parser.EXECSQLIMSLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4245;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 592, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exhibitStatement(): ExhibitStatementContext {
		let _localctx: ExhibitStatementContext = new ExhibitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, Cobol85Parser.RULE_exhibitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4247;
			this.match(Cobol85Parser.EXHIBIT);
			this.state = 4249;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 593, this._ctx) ) {
			case 1:
				{
				this.state = 4248;
				this.match(Cobol85Parser.NAMED);
				}
				break;
			}
			this.state = 4252;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 594, this._ctx) ) {
			case 1:
				{
				this.state = 4251;
				this.match(Cobol85Parser.CHANGED);
				}
				break;
			}
			this.state = 4255;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4254;
				this.exhibitOperand();
				}
				}
				this.state = 4257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exhibitOperand(): ExhibitOperandContext {
		let _localctx: ExhibitOperandContext = new ExhibitOperandContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, Cobol85Parser.RULE_exhibitOperand);
		try {
			this.state = 4261;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4259;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4260;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exitStatement(): ExitStatementContext {
		let _localctx: ExitStatementContext = new ExitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, Cobol85Parser.RULE_exitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4263;
			this.match(Cobol85Parser.EXIT);
			this.state = 4265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.PROGRAM) {
				{
				this.state = 4264;
				this.match(Cobol85Parser.PROGRAM);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generateStatement(): GenerateStatementContext {
		let _localctx: GenerateStatementContext = new GenerateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, Cobol85Parser.RULE_generateStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4267;
			this.match(Cobol85Parser.GENERATE);
			this.state = 4268;
			this.reportName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public gobackStatement(): GobackStatementContext {
		let _localctx: GobackStatementContext = new GobackStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, Cobol85Parser.RULE_gobackStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4270;
			this.match(Cobol85Parser.GOBACK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public goToStatement(): GoToStatementContext {
		let _localctx: GoToStatementContext = new GoToStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, Cobol85Parser.RULE_goToStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4272;
			this.match(Cobol85Parser.GO);
			this.state = 4274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TO) {
				{
				this.state = 4273;
				this.match(Cobol85Parser.TO);
				}
			}

			this.state = 4278;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 599, this._ctx) ) {
			case 1:
				{
				this.state = 4276;
				this.goToStatementSimple();
				}
				break;

			case 2:
				{
				this.state = 4277;
				this.goToDependingOnStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public goToStatementSimple(): GoToStatementSimpleContext {
		let _localctx: GoToStatementSimpleContext = new GoToStatementSimpleContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, Cobol85Parser.RULE_goToStatementSimple);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4280;
			this.procedureName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public goToDependingOnStatement(): GoToDependingOnStatementContext {
		let _localctx: GoToDependingOnStatementContext = new GoToDependingOnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, Cobol85Parser.RULE_goToDependingOnStatement);
		let _la: number;
		try {
			this.state = 4295;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.MORE_LABELS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4282;
				this.match(Cobol85Parser.MORE_LABELS);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4283;
					this.procedureName();
					}
					}
					this.state = 4286;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
				this.state = 4293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.DEPENDING) {
					{
					this.state = 4288;
					this.match(Cobol85Parser.DEPENDING);
					this.state = 4290;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.ON) {
						{
						this.state = 4289;
						this.match(Cobol85Parser.ON);
						}
					}

					this.state = 4292;
					this.identifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let _localctx: IfStatementContext = new IfStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, Cobol85Parser.RULE_ifStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4297;
			this.match(Cobol85Parser.IF);
			this.state = 4298;
			this.condition();
			this.state = 4299;
			this.ifThen();
			this.state = 4301;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 604, this._ctx) ) {
			case 1:
				{
				this.state = 4300;
				this.ifElse();
				}
				break;
			}
			this.state = 4304;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 605, this._ctx) ) {
			case 1:
				{
				this.state = 4303;
				this.match(Cobol85Parser.END_IF);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifThen(): IfThenContext {
		let _localctx: IfThenContext = new IfThenContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, Cobol85Parser.RULE_ifThen);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THEN) {
				{
				this.state = 4306;
				this.match(Cobol85Parser.THEN);
				}
			}

			this.state = 4317;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NEXT:
				{
				this.state = 4309;
				this.match(Cobol85Parser.NEXT);
				this.state = 4310;
				this.match(Cobol85Parser.SENTENCE);
				}
				break;
			case Cobol85Parser.ACCEPT:
			case Cobol85Parser.ADD:
			case Cobol85Parser.ALTER:
			case Cobol85Parser.AT:
			case Cobol85Parser.CALL:
			case Cobol85Parser.CANCEL:
			case Cobol85Parser.CLOSE:
			case Cobol85Parser.COMPUTE:
			case Cobol85Parser.CONTINUE:
			case Cobol85Parser.DELETE:
			case Cobol85Parser.DISABLE:
			case Cobol85Parser.DISPLAY:
			case Cobol85Parser.DIVIDE:
			case Cobol85Parser.ELSE:
			case Cobol85Parser.ENABLE:
			case Cobol85Parser.END:
			case Cobol85Parser.END_ACCEPT:
			case Cobol85Parser.END_ADD:
			case Cobol85Parser.END_CALL:
			case Cobol85Parser.END_COMPUTE:
			case Cobol85Parser.END_DELETE:
			case Cobol85Parser.END_DIVIDE:
			case Cobol85Parser.END_EVALUATE:
			case Cobol85Parser.END_IF:
			case Cobol85Parser.END_MULTIPLY:
			case Cobol85Parser.END_PERFORM:
			case Cobol85Parser.END_READ:
			case Cobol85Parser.END_RECEIVE:
			case Cobol85Parser.END_RETURN:
			case Cobol85Parser.END_REWRITE:
			case Cobol85Parser.END_SEARCH:
			case Cobol85Parser.END_START:
			case Cobol85Parser.END_STRING:
			case Cobol85Parser.END_SUBTRACT:
			case Cobol85Parser.END_UNSTRING:
			case Cobol85Parser.END_WRITE:
			case Cobol85Parser.ENTRY:
			case Cobol85Parser.EVALUATE:
			case Cobol85Parser.EXCEPTION:
			case Cobol85Parser.EXHIBIT:
			case Cobol85Parser.EXIT:
			case Cobol85Parser.GENERATE:
			case Cobol85Parser.GOBACK:
			case Cobol85Parser.GO:
			case Cobol85Parser.IF:
			case Cobol85Parser.INITIALIZE:
			case Cobol85Parser.INITIATE:
			case Cobol85Parser.INSPECT:
			case Cobol85Parser.INVALID:
			case Cobol85Parser.MERGE:
			case Cobol85Parser.MOVE:
			case Cobol85Parser.MULTIPLY:
			case Cobol85Parser.NOT:
			case Cobol85Parser.ON:
			case Cobol85Parser.OPEN:
			case Cobol85Parser.PERFORM:
			case Cobol85Parser.PURGE:
			case Cobol85Parser.READ:
			case Cobol85Parser.RECEIVE:
			case Cobol85Parser.RELEASE:
			case Cobol85Parser.RETURN:
			case Cobol85Parser.REWRITE:
			case Cobol85Parser.SEARCH:
			case Cobol85Parser.SEND:
			case Cobol85Parser.SET:
			case Cobol85Parser.SORT:
			case Cobol85Parser.START:
			case Cobol85Parser.STOP:
			case Cobol85Parser.STRING:
			case Cobol85Parser.SUBTRACT:
			case Cobol85Parser.TERMINATE:
			case Cobol85Parser.UNSTRING:
			case Cobol85Parser.WHEN:
			case Cobol85Parser.WITH:
			case Cobol85Parser.WRITE:
			case Cobol85Parser.DOT_FS:
			case Cobol85Parser.EXECCICSLINE:
			case Cobol85Parser.EXECSQLIMSLINE:
			case Cobol85Parser.EXECSQLLINE:
				{
				this.state = 4314;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4311;
						this.statement();
						}
						}
					}
					this.state = 4316;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 607, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifElse(): IfElseContext {
		let _localctx: IfElseContext = new IfElseContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, Cobol85Parser.RULE_ifElse);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4319;
			this.match(Cobol85Parser.ELSE);
			this.state = 4328;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NEXT:
				{
				this.state = 4320;
				this.match(Cobol85Parser.NEXT);
				this.state = 4321;
				this.match(Cobol85Parser.SENTENCE);
				}
				break;
			case Cobol85Parser.ACCEPT:
			case Cobol85Parser.ADD:
			case Cobol85Parser.ALTER:
			case Cobol85Parser.AT:
			case Cobol85Parser.CALL:
			case Cobol85Parser.CANCEL:
			case Cobol85Parser.CLOSE:
			case Cobol85Parser.COMPUTE:
			case Cobol85Parser.CONTINUE:
			case Cobol85Parser.DELETE:
			case Cobol85Parser.DISABLE:
			case Cobol85Parser.DISPLAY:
			case Cobol85Parser.DIVIDE:
			case Cobol85Parser.ELSE:
			case Cobol85Parser.ENABLE:
			case Cobol85Parser.END:
			case Cobol85Parser.END_ACCEPT:
			case Cobol85Parser.END_ADD:
			case Cobol85Parser.END_CALL:
			case Cobol85Parser.END_COMPUTE:
			case Cobol85Parser.END_DELETE:
			case Cobol85Parser.END_DIVIDE:
			case Cobol85Parser.END_EVALUATE:
			case Cobol85Parser.END_IF:
			case Cobol85Parser.END_MULTIPLY:
			case Cobol85Parser.END_PERFORM:
			case Cobol85Parser.END_READ:
			case Cobol85Parser.END_RECEIVE:
			case Cobol85Parser.END_RETURN:
			case Cobol85Parser.END_REWRITE:
			case Cobol85Parser.END_SEARCH:
			case Cobol85Parser.END_START:
			case Cobol85Parser.END_STRING:
			case Cobol85Parser.END_SUBTRACT:
			case Cobol85Parser.END_UNSTRING:
			case Cobol85Parser.END_WRITE:
			case Cobol85Parser.ENTRY:
			case Cobol85Parser.EVALUATE:
			case Cobol85Parser.EXCEPTION:
			case Cobol85Parser.EXHIBIT:
			case Cobol85Parser.EXIT:
			case Cobol85Parser.GENERATE:
			case Cobol85Parser.GOBACK:
			case Cobol85Parser.GO:
			case Cobol85Parser.IF:
			case Cobol85Parser.INITIALIZE:
			case Cobol85Parser.INITIATE:
			case Cobol85Parser.INSPECT:
			case Cobol85Parser.INVALID:
			case Cobol85Parser.MERGE:
			case Cobol85Parser.MOVE:
			case Cobol85Parser.MULTIPLY:
			case Cobol85Parser.NOT:
			case Cobol85Parser.ON:
			case Cobol85Parser.OPEN:
			case Cobol85Parser.PERFORM:
			case Cobol85Parser.PURGE:
			case Cobol85Parser.READ:
			case Cobol85Parser.RECEIVE:
			case Cobol85Parser.RELEASE:
			case Cobol85Parser.RETURN:
			case Cobol85Parser.REWRITE:
			case Cobol85Parser.SEARCH:
			case Cobol85Parser.SEND:
			case Cobol85Parser.SET:
			case Cobol85Parser.SORT:
			case Cobol85Parser.START:
			case Cobol85Parser.STOP:
			case Cobol85Parser.STRING:
			case Cobol85Parser.SUBTRACT:
			case Cobol85Parser.TERMINATE:
			case Cobol85Parser.UNSTRING:
			case Cobol85Parser.WHEN:
			case Cobol85Parser.WITH:
			case Cobol85Parser.WRITE:
			case Cobol85Parser.DOT_FS:
			case Cobol85Parser.EXECCICSLINE:
			case Cobol85Parser.EXECSQLIMSLINE:
			case Cobol85Parser.EXECSQLLINE:
				{
				this.state = 4325;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4322;
						this.statement();
						}
						}
					}
					this.state = 4327;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 609, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initializeStatement(): InitializeStatementContext {
		let _localctx: InitializeStatementContext = new InitializeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, Cobol85Parser.RULE_initializeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4330;
			this.match(Cobol85Parser.INITIALIZE);
			this.state = 4332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4331;
				this.identifier();
				}
				}
				this.state = 4334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			this.state = 4337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.REPLACING) {
				{
				this.state = 4336;
				this.initializeReplacingPhrase();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initializeReplacingPhrase(): InitializeReplacingPhraseContext {
		let _localctx: InitializeReplacingPhraseContext = new InitializeReplacingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, Cobol85Parser.RULE_initializeReplacingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4339;
			this.match(Cobol85Parser.REPLACING);
			this.state = 4341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4340;
				this.initializeReplacingBy();
				}
				}
				this.state = 4343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) !== 0) || _la === Cobol85Parser.DBCS || _la === Cobol85Parser.EGCS || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (Cobol85Parser.NATIONAL - 304)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 304)) | (1 << (Cobol85Parser.NUMERIC - 304)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 304)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initializeReplacingBy(): InitializeReplacingByContext {
		let _localctx: InitializeReplacingByContext = new InitializeReplacingByContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, Cobol85Parser.RULE_initializeReplacingBy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4345;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) !== 0) || _la === Cobol85Parser.DBCS || _la === Cobol85Parser.EGCS || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (Cobol85Parser.NATIONAL - 304)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 304)) | (1 << (Cobol85Parser.NUMERIC - 304)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 304)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DATA) {
				{
				this.state = 4346;
				this.match(Cobol85Parser.DATA);
				}
			}

			this.state = 4349;
			this.match(Cobol85Parser.BY);
			this.state = 4352;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 615, this._ctx) ) {
			case 1:
				{
				this.state = 4350;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4351;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initiateStatement(): InitiateStatementContext {
		let _localctx: InitiateStatementContext = new InitiateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, Cobol85Parser.RULE_initiateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4354;
			this.match(Cobol85Parser.INITIATE);
			this.state = 4356;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4355;
				this.reportName();
				}
				}
				this.state = 4358;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectStatement(): InspectStatementContext {
		let _localctx: InspectStatementContext = new InspectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, Cobol85Parser.RULE_inspectStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4360;
			this.match(Cobol85Parser.INSPECT);
			this.state = 4361;
			this.identifier();
			this.state = 4366;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 617, this._ctx) ) {
			case 1:
				{
				this.state = 4362;
				this.inspectTallyingPhrase();
				}
				break;

			case 2:
				{
				this.state = 4363;
				this.inspectReplacingPhrase();
				}
				break;

			case 3:
				{
				this.state = 4364;
				this.inspectTallyingReplacingPhrase();
				}
				break;

			case 4:
				{
				this.state = 4365;
				this.inspectConvertingPhrase();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectTallyingPhrase(): InspectTallyingPhraseContext {
		let _localctx: InspectTallyingPhraseContext = new InspectTallyingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, Cobol85Parser.RULE_inspectTallyingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4368;
			this.match(Cobol85Parser.TALLYING);
			this.state = 4370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4369;
				this.inspectFor();
				}
				}
				this.state = 4372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectReplacingPhrase(): InspectReplacingPhraseContext {
		let _localctx: InspectReplacingPhraseContext = new InspectReplacingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, Cobol85Parser.RULE_inspectReplacingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4374;
			this.match(Cobol85Parser.REPLACING);
			this.state = 4377;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 4377;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.CHARACTERS:
					{
					this.state = 4375;
					this.inspectReplacingCharacters();
					}
					break;
				case Cobol85Parser.ALL:
				case Cobol85Parser.FIRST:
				case Cobol85Parser.LEADING:
					{
					this.state = 4376;
					this.inspectReplacingAllLeadings();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 4379;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === Cobol85Parser.ALL || _la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.FIRST || _la === Cobol85Parser.LEADING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectTallyingReplacingPhrase(): InspectTallyingReplacingPhraseContext {
		let _localctx: InspectTallyingReplacingPhraseContext = new InspectTallyingReplacingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, Cobol85Parser.RULE_inspectTallyingReplacingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4381;
			this.match(Cobol85Parser.TALLYING);
			this.state = 4383;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4382;
				this.inspectFor();
				}
				}
				this.state = 4385;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			this.state = 4388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4387;
				this.inspectReplacingPhrase();
				}
				}
				this.state = 4390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === Cobol85Parser.REPLACING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectConvertingPhrase(): InspectConvertingPhraseContext {
		let _localctx: InspectConvertingPhraseContext = new InspectConvertingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, Cobol85Parser.RULE_inspectConvertingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4392;
			this.match(Cobol85Parser.CONVERTING);
			this.state = 4395;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 623, this._ctx) ) {
			case 1:
				{
				this.state = 4393;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4394;
				this.literal();
				}
				break;
			}
			this.state = 4397;
			this.inspectTo();
			this.state = 4401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
				{
				{
				this.state = 4398;
				this.inspectBeforeAfter();
				}
				}
				this.state = 4403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectFor(): InspectForContext {
		let _localctx: InspectForContext = new InspectForContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, Cobol85Parser.RULE_inspectFor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4404;
			this.identifier();
			this.state = 4405;
			this.match(Cobol85Parser.FOR);
			this.state = 4408;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 4408;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.CHARACTERS:
					{
					this.state = 4406;
					this.inspectCharacters();
					}
					break;
				case Cobol85Parser.ALL:
				case Cobol85Parser.LEADING:
					{
					this.state = 4407;
					this.inspectAllLeadings();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 4410;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === Cobol85Parser.ALL || _la === Cobol85Parser.CHARACTERS || _la === Cobol85Parser.LEADING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectCharacters(): InspectCharactersContext {
		let _localctx: InspectCharactersContext = new InspectCharactersContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, Cobol85Parser.RULE_inspectCharacters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4412;
			this.match(Cobol85Parser.CHARACTERS);
			this.state = 4416;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
				{
				{
				this.state = 4413;
				this.inspectBeforeAfter();
				}
				}
				this.state = 4418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectReplacingCharacters(): InspectReplacingCharactersContext {
		let _localctx: InspectReplacingCharactersContext = new InspectReplacingCharactersContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, Cobol85Parser.RULE_inspectReplacingCharacters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4419;
			this.match(Cobol85Parser.CHARACTERS);
			this.state = 4420;
			this.inspectBy();
			this.state = 4424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
				{
				{
				this.state = 4421;
				this.inspectBeforeAfter();
				}
				}
				this.state = 4426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectAllLeadings(): InspectAllLeadingsContext {
		let _localctx: InspectAllLeadingsContext = new InspectAllLeadingsContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, Cobol85Parser.RULE_inspectAllLeadings);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4427;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ALL || _la === Cobol85Parser.LEADING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4429;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4428;
					this.inspectAllLeading();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4431;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 629, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectReplacingAllLeadings(): InspectReplacingAllLeadingsContext {
		let _localctx: InspectReplacingAllLeadingsContext = new InspectReplacingAllLeadingsContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, Cobol85Parser.RULE_inspectReplacingAllLeadings);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4433;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ALL || _la === Cobol85Parser.FIRST || _la === Cobol85Parser.LEADING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4435;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4434;
					this.inspectReplacingAllLeading();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4437;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 630, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectAllLeading(): InspectAllLeadingContext {
		let _localctx: InspectAllLeadingContext = new InspectAllLeadingContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, Cobol85Parser.RULE_inspectAllLeading);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4441;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 631, this._ctx) ) {
			case 1:
				{
				this.state = 4439;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4440;
				this.literal();
				}
				break;
			}
			this.state = 4446;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
				{
				{
				this.state = 4443;
				this.inspectBeforeAfter();
				}
				}
				this.state = 4448;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectReplacingAllLeading(): InspectReplacingAllLeadingContext {
		let _localctx: InspectReplacingAllLeadingContext = new InspectReplacingAllLeadingContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, Cobol85Parser.RULE_inspectReplacingAllLeading);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4451;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 633, this._ctx) ) {
			case 1:
				{
				this.state = 4449;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4450;
				this.literal();
				}
				break;
			}
			this.state = 4453;
			this.inspectBy();
			this.state = 4457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
				{
				{
				this.state = 4454;
				this.inspectBeforeAfter();
				}
				}
				this.state = 4459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectBy(): InspectByContext {
		let _localctx: InspectByContext = new InspectByContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, Cobol85Parser.RULE_inspectBy);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4460;
			this.match(Cobol85Parser.BY);
			this.state = 4463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 635, this._ctx) ) {
			case 1:
				{
				this.state = 4461;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4462;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectTo(): InspectToContext {
		let _localctx: InspectToContext = new InspectToContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, Cobol85Parser.RULE_inspectTo);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4465;
			this.match(Cobol85Parser.TO);
			this.state = 4468;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 636, this._ctx) ) {
			case 1:
				{
				this.state = 4466;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4467;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inspectBeforeAfter(): InspectBeforeAfterContext {
		let _localctx: InspectBeforeAfterContext = new InspectBeforeAfterContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, Cobol85Parser.RULE_inspectBeforeAfter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4470;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4472;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INITIAL) {
				{
				this.state = 4471;
				this.match(Cobol85Parser.INITIAL);
				}
			}

			this.state = 4476;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 638, this._ctx) ) {
			case 1:
				{
				this.state = 4474;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4475;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeStatement(): MergeStatementContext {
		let _localctx: MergeStatementContext = new MergeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, Cobol85Parser.RULE_mergeStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4478;
			this.match(Cobol85Parser.MERGE);
			this.state = 4479;
			this.fileName();
			this.state = 4481;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4480;
					this.mergeOnKeyClause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4483;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COLLATING || _la === Cobol85Parser.SEQUENCE) {
				{
				this.state = 4485;
				this.mergeCollatingSequencePhrase();
				}
			}

			this.state = 4491;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.USING) {
				{
				{
				this.state = 4488;
				this.mergeUsing();
				}
				}
				this.state = 4493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4495;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OUTPUT) {
				{
				this.state = 4494;
				this.mergeOutputProcedurePhrase();
				}
			}

			this.state = 4500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.GIVING) {
				{
				{
				this.state = 4497;
				this.mergeGivingPhrase();
				}
				}
				this.state = 4502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeOnKeyClause(): MergeOnKeyClauseContext {
		let _localctx: MergeOnKeyClauseContext = new MergeOnKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, Cobol85Parser.RULE_mergeOnKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 4503;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 4506;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4508;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 4507;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 4511;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4510;
				this.qualifiedDataName();
				}
				}
				this.state = 4513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeCollatingSequencePhrase(): MergeCollatingSequencePhraseContext {
		let _localctx: MergeCollatingSequencePhraseContext = new MergeCollatingSequencePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, Cobol85Parser.RULE_mergeCollatingSequencePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COLLATING) {
				{
				this.state = 4515;
				this.match(Cobol85Parser.COLLATING);
				}
			}

			this.state = 4518;
			this.match(Cobol85Parser.SEQUENCE);
			this.state = 4520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 4519;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 4523;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4522;
					this.alphabetName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4525;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 649, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4528;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 650, this._ctx) ) {
			case 1:
				{
				this.state = 4527;
				this.mergeCollatingAlphanumeric();
				}
				break;
			}
			this.state = 4531;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.NATIONAL) {
				{
				this.state = 4530;
				this.mergeCollatingNational();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeCollatingAlphanumeric(): MergeCollatingAlphanumericContext {
		let _localctx: MergeCollatingAlphanumericContext = new MergeCollatingAlphanumericContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, Cobol85Parser.RULE_mergeCollatingAlphanumeric);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 4533;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 4536;
			this.match(Cobol85Parser.ALPHANUMERIC);
			this.state = 4537;
			this.match(Cobol85Parser.IS);
			this.state = 4538;
			this.alphabetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeCollatingNational(): MergeCollatingNationalContext {
		let _localctx: MergeCollatingNationalContext = new MergeCollatingNationalContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, Cobol85Parser.RULE_mergeCollatingNational);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4541;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 4540;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 4543;
			this.match(Cobol85Parser.NATIONAL);
			this.state = 4545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 4544;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 4547;
			this.alphabetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeUsing(): MergeUsingContext {
		let _localctx: MergeUsingContext = new MergeUsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, Cobol85Parser.RULE_mergeUsing);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4549;
			this.match(Cobol85Parser.USING);
			this.state = 4551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4550;
				this.fileName();
				}
				}
				this.state = 4553;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeOutputProcedurePhrase(): MergeOutputProcedurePhraseContext {
		let _localctx: MergeOutputProcedurePhraseContext = new MergeOutputProcedurePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, Cobol85Parser.RULE_mergeOutputProcedurePhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4555;
			this.match(Cobol85Parser.OUTPUT);
			this.state = 4556;
			this.match(Cobol85Parser.PROCEDURE);
			this.state = 4558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 4557;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 4560;
			this.procedureName();
			this.state = 4562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
				{
				this.state = 4561;
				this.mergeOutputThrough();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeOutputThrough(): MergeOutputThroughContext {
		let _localctx: MergeOutputThroughContext = new MergeOutputThroughContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, Cobol85Parser.RULE_mergeOutputThrough);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4564;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4565;
			this.procedureName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeGivingPhrase(): MergeGivingPhraseContext {
		let _localctx: MergeGivingPhraseContext = new MergeGivingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, Cobol85Parser.RULE_mergeGivingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4567;
			this.match(Cobol85Parser.GIVING);
			this.state = 4569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4568;
				this.mergeGiving();
				}
				}
				this.state = 4571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeGiving(): MergeGivingContext {
		let _localctx: MergeGivingContext = new MergeGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, Cobol85Parser.RULE_mergeGiving);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4573;
			this.fileName();
			this.state = 4583;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 659, this._ctx) ) {
			case 1:
				{
				this.state = 4574;
				this.match(Cobol85Parser.LOCK);
				}
				break;

			case 2:
				{
				this.state = 4575;
				this.match(Cobol85Parser.SAVE);
				}
				break;

			case 3:
				{
				this.state = 4576;
				this.match(Cobol85Parser.NO);
				this.state = 4577;
				this.match(Cobol85Parser.REWIND);
				}
				break;

			case 4:
				{
				this.state = 4578;
				this.match(Cobol85Parser.CRUNCH);
				}
				break;

			case 5:
				{
				this.state = 4579;
				this.match(Cobol85Parser.RELEASE);
				}
				break;

			case 6:
				{
				this.state = 4580;
				this.match(Cobol85Parser.WITH);
				this.state = 4581;
				this.match(Cobol85Parser.REMOVE);
				this.state = 4582;
				this.match(Cobol85Parser.CRUNCH);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public moveStatement(): MoveStatementContext {
		let _localctx: MoveStatementContext = new MoveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 758, Cobol85Parser.RULE_moveStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4585;
			this.match(Cobol85Parser.MOVE);
			this.state = 4587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 660, this._ctx) ) {
			case 1:
				{
				this.state = 4586;
				this.match(Cobol85Parser.ALL);
				}
				break;
			}
			this.state = 4591;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.ADDRESS:
			case Cobol85Parser.ALL:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DATE:
			case Cobol85Parser.DAY:
			case Cobol85Parser.DAY_OF_WEEK:
			case Cobol85Parser.DEBUG_CONTENTS:
			case Cobol85Parser.DEBUG_ITEM:
			case Cobol85Parser.DEBUG_LINE:
			case Cobol85Parser.DEBUG_NAME:
			case Cobol85Parser.DEBUG_SUB_1:
			case Cobol85Parser.DEBUG_SUB_2:
			case Cobol85Parser.DEBUG_SUB_3:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FALSE:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTION:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.HIGH_VALUE:
			case Cobol85Parser.HIGH_VALUES:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LINAGE_COUNTER:
			case Cobol85Parser.LINE_COUNTER:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.LOW_VALUE:
			case Cobol85Parser.LOW_VALUES:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NULL:
			case Cobol85Parser.NULLS:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PAGE_COUNTER:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.QUOTE:
			case Cobol85Parser.QUOTES:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.RETURN_CODE:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHIFT_IN:
			case Cobol85Parser.SHIFT_OUT:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SORT_CONTROL:
			case Cobol85Parser.SORT_CORE_SIZE:
			case Cobol85Parser.SORT_FILE_SIZE:
			case Cobol85Parser.SORT_MESSAGE:
			case Cobol85Parser.SORT_MODE_SIZE:
			case Cobol85Parser.SORT_RETURN:
			case Cobol85Parser.SPACE:
			case Cobol85Parser.SPACES:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TALLY:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIME:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUE:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.WHEN_COMPILED:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.ZEROS:
			case Cobol85Parser.ZEROES:
			case Cobol85Parser.NONNUMERICLITERAL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.NUMERICLITERAL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 4589;
				this.moveToStatement();
				}
				break;
			case Cobol85Parser.CORR:
			case Cobol85Parser.CORRESPONDING:
				{
				this.state = 4590;
				this.moveCorrespondingToStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public moveToStatement(): MoveToStatementContext {
		let _localctx: MoveToStatementContext = new MoveToStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 760, Cobol85Parser.RULE_moveToStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4593;
			this.moveToSendingArea();
			this.state = 4594;
			this.match(Cobol85Parser.TO);
			this.state = 4596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4595;
				this.identifier();
				}
				}
				this.state = 4598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public moveToSendingArea(): MoveToSendingAreaContext {
		let _localctx: MoveToSendingAreaContext = new MoveToSendingAreaContext(this._ctx, this.state);
		this.enterRule(_localctx, 762, Cobol85Parser.RULE_moveToSendingArea);
		try {
			this.state = 4602;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4600;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4601;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public moveCorrespondingToStatement(): MoveCorrespondingToStatementContext {
		let _localctx: MoveCorrespondingToStatementContext = new MoveCorrespondingToStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 764, Cobol85Parser.RULE_moveCorrespondingToStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4604;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.CORR || _la === Cobol85Parser.CORRESPONDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4605;
			this.moveCorrespondingToSendingArea();
			this.state = 4606;
			this.match(Cobol85Parser.TO);
			this.state = 4608;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4607;
				this.identifier();
				}
				}
				this.state = 4610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public moveCorrespondingToSendingArea(): MoveCorrespondingToSendingAreaContext {
		let _localctx: MoveCorrespondingToSendingAreaContext = new MoveCorrespondingToSendingAreaContext(this._ctx, this.state);
		this.enterRule(_localctx, 766, Cobol85Parser.RULE_moveCorrespondingToSendingArea);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4612;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiplyStatement(): MultiplyStatementContext {
		let _localctx: MultiplyStatementContext = new MultiplyStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 768, Cobol85Parser.RULE_multiplyStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4614;
			this.match(Cobol85Parser.MULTIPLY);
			this.state = 4617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 665, this._ctx) ) {
			case 1:
				{
				this.state = 4615;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4616;
				this.literal();
				}
				break;
			}
			this.state = 4619;
			this.match(Cobol85Parser.BY);
			this.state = 4622;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
			case 1:
				{
				this.state = 4620;
				this.multiplyRegular();
				}
				break;

			case 2:
				{
				this.state = 4621;
				this.multiplyGiving();
				}
				break;
			}
			this.state = 4625;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 667, this._ctx) ) {
			case 1:
				{
				this.state = 4624;
				this.onSizeErrorPhrase();
				}
				break;
			}
			this.state = 4628;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 668, this._ctx) ) {
			case 1:
				{
				this.state = 4627;
				this.notOnSizeErrorPhrase();
				}
				break;
			}
			this.state = 4631;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 669, this._ctx) ) {
			case 1:
				{
				this.state = 4630;
				this.match(Cobol85Parser.END_MULTIPLY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiplyRegular(): MultiplyRegularContext {
		let _localctx: MultiplyRegularContext = new MultiplyRegularContext(this._ctx, this.state);
		this.enterRule(_localctx, 770, Cobol85Parser.RULE_multiplyRegular);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4634;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4633;
				this.multiplyRegularOperand();
				}
				}
				this.state = 4636;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiplyRegularOperand(): MultiplyRegularOperandContext {
		let _localctx: MultiplyRegularOperandContext = new MultiplyRegularOperandContext(this._ctx, this.state);
		this.enterRule(_localctx, 772, Cobol85Parser.RULE_multiplyRegularOperand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4638;
			this.identifier();
			this.state = 4640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 4639;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiplyGiving(): MultiplyGivingContext {
		let _localctx: MultiplyGivingContext = new MultiplyGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 774, Cobol85Parser.RULE_multiplyGiving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4642;
			this.multiplyGivingOperand();
			this.state = 4643;
			this.match(Cobol85Parser.GIVING);
			this.state = 4645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4644;
				this.multiplyGivingResult();
				}
				}
				this.state = 4647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiplyGivingOperand(): MultiplyGivingOperandContext {
		let _localctx: MultiplyGivingOperandContext = new MultiplyGivingOperandContext(this._ctx, this.state);
		this.enterRule(_localctx, 776, Cobol85Parser.RULE_multiplyGivingOperand);
		try {
			this.state = 4651;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 673, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4649;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4650;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiplyGivingResult(): MultiplyGivingResultContext {
		let _localctx: MultiplyGivingResultContext = new MultiplyGivingResultContext(this._ctx, this.state);
		this.enterRule(_localctx, 778, Cobol85Parser.RULE_multiplyGivingResult);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4653;
			this.identifier();
			this.state = 4655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 4654;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openStatement(): OpenStatementContext {
		let _localctx: OpenStatementContext = new OpenStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 780, Cobol85Parser.RULE_openStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4657;
			this.match(Cobol85Parser.OPEN);
			this.state = 4662;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 4662;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.INPUT:
					{
					this.state = 4658;
					this.openInputStatement();
					}
					break;
				case Cobol85Parser.OUTPUT:
					{
					this.state = 4659;
					this.openOutputStatement();
					}
					break;
				case Cobol85Parser.I_O:
					{
					this.state = 4660;
					this.openIOStatement();
					}
					break;
				case Cobol85Parser.EXTEND:
					{
					this.state = 4661;
					this.openExtendStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 4664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === Cobol85Parser.EXTEND || _la === Cobol85Parser.I_O || _la === Cobol85Parser.INPUT || _la === Cobol85Parser.OUTPUT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openInputStatement(): OpenInputStatementContext {
		let _localctx: OpenInputStatementContext = new OpenInputStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 782, Cobol85Parser.RULE_openInputStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4666;
			this.match(Cobol85Parser.INPUT);
			this.state = 4668;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4667;
				this.openInput();
				}
				}
				this.state = 4670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openInput(): OpenInputContext {
		let _localctx: OpenInputContext = new OpenInputContext(this._ctx, this.state);
		this.enterRule(_localctx, 784, Cobol85Parser.RULE_openInput);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4672;
			this.fileName();
			this.state = 4679;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 679, this._ctx) ) {
			case 1:
				{
				this.state = 4673;
				this.match(Cobol85Parser.REVERSED);
				}
				break;

			case 2:
				{
				this.state = 4675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 4674;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 4677;
				this.match(Cobol85Parser.NO);
				this.state = 4678;
				this.match(Cobol85Parser.REWIND);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openOutputStatement(): OpenOutputStatementContext {
		let _localctx: OpenOutputStatementContext = new OpenOutputStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 786, Cobol85Parser.RULE_openOutputStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4681;
			this.match(Cobol85Parser.OUTPUT);
			this.state = 4683;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4682;
				this.openOutput();
				}
				}
				this.state = 4685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openOutput(): OpenOutputContext {
		let _localctx: OpenOutputContext = new OpenOutputContext(this._ctx, this.state);
		this.enterRule(_localctx, 788, Cobol85Parser.RULE_openOutput);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4687;
			this.fileName();
			this.state = 4693;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 682, this._ctx) ) {
			case 1:
				{
				this.state = 4689;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.WITH) {
					{
					this.state = 4688;
					this.match(Cobol85Parser.WITH);
					}
				}

				this.state = 4691;
				this.match(Cobol85Parser.NO);
				this.state = 4692;
				this.match(Cobol85Parser.REWIND);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openIOStatement(): OpenIOStatementContext {
		let _localctx: OpenIOStatementContext = new OpenIOStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 790, Cobol85Parser.RULE_openIOStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4695;
			this.match(Cobol85Parser.I_O);
			this.state = 4697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4696;
				this.fileName();
				}
				}
				this.state = 4699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public openExtendStatement(): OpenExtendStatementContext {
		let _localctx: OpenExtendStatementContext = new OpenExtendStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 792, Cobol85Parser.RULE_openExtendStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4701;
			this.match(Cobol85Parser.EXTEND);
			this.state = 4703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4702;
				this.fileName();
				}
				}
				this.state = 4705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performStatement(): PerformStatementContext {
		let _localctx: PerformStatementContext = new PerformStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 794, Cobol85Parser.RULE_performStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4707;
			this.match(Cobol85Parser.PERFORM);
			this.state = 4710;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 685, this._ctx) ) {
			case 1:
				{
				this.state = 4708;
				this.performInlineStatement();
				}
				break;

			case 2:
				{
				this.state = 4709;
				this.performProcedureStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performInlineStatement(): PerformInlineStatementContext {
		let _localctx: PerformInlineStatementContext = new PerformInlineStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 796, Cobol85Parser.RULE_performInlineStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4713;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.TEST - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.UNTIL - 498)) | (1 << (Cobol85Parser.VARYING - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.WITH - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0)) {
				{
				this.state = 4712;
				this.performType();
				}
			}

			this.state = 4718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER))) !== 0) || ((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (Cobol85Parser.CALL - 52)) | (1 << (Cobol85Parser.CANCEL - 52)) | (1 << (Cobol85Parser.CLOSE - 52)))) !== 0) || _la === Cobol85Parser.COMPUTE || _la === Cobol85Parser.CONTINUE || ((((_la - 131)) & ~0x1F) === 0 && ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DELETE - 131)) | (1 << (Cobol85Parser.DISABLE - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DIVIDE - 131)) | (1 << (Cobol85Parser.ENABLE - 131)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (Cobol85Parser.ENTRY - 182)) | (1 << (Cobol85Parser.EVALUATE - 182)) | (1 << (Cobol85Parser.EXHIBIT - 182)) | (1 << (Cobol85Parser.EXIT - 182)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (Cobol85Parser.GENERATE - 220)) | (1 << (Cobol85Parser.GOBACK - 220)) | (1 << (Cobol85Parser.GO - 220)) | (1 << (Cobol85Parser.IF - 220)) | (1 << (Cobol85Parser.INITIALIZE - 220)) | (1 << (Cobol85Parser.INITIATE - 220)) | (1 << (Cobol85Parser.INSPECT - 220)))) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & ((1 << (Cobol85Parser.MERGE - 294)) | (1 << (Cobol85Parser.MOVE - 294)) | (1 << (Cobol85Parser.MULTIPLY - 294)))) !== 0) || _la === Cobol85Parser.OPEN || _la === Cobol85Parser.PERFORM || ((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & ((1 << (Cobol85Parser.PURGE - 365)) | (1 << (Cobol85Parser.READ - 365)) | (1 << (Cobol85Parser.RECEIVE - 365)) | (1 << (Cobol85Parser.RELEASE - 365)))) !== 0) || ((((_la - 403)) & ~0x1F) === 0 && ((1 << (_la - 403)) & ((1 << (Cobol85Parser.RETURN - 403)) | (1 << (Cobol85Parser.REWRITE - 403)) | (1 << (Cobol85Parser.SEARCH - 403)) | (1 << (Cobol85Parser.SEND - 403)) | (1 << (Cobol85Parser.SET - 403)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (Cobol85Parser.SORT - 440)) | (1 << (Cobol85Parser.START - 440)) | (1 << (Cobol85Parser.STOP - 440)) | (1 << (Cobol85Parser.STRING - 440)) | (1 << (Cobol85Parser.SUBTRACT - 440)))) !== 0) || _la === Cobol85Parser.TERMINATE || _la === Cobol85Parser.UNSTRING || _la === Cobol85Parser.WRITE || ((((_la - 559)) & ~0x1F) === 0 && ((1 << (_la - 559)) & ((1 << (Cobol85Parser.EXECCICSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 559)) | (1 << (Cobol85Parser.EXECSQLLINE - 559)))) !== 0)) {
				{
				{
				this.state = 4715;
				this.statement();
				}
				}
				this.state = 4720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4721;
			this.match(Cobol85Parser.END_PERFORM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performProcedureStatement(): PerformProcedureStatementContext {
		let _localctx: PerformProcedureStatementContext = new PerformProcedureStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 798, Cobol85Parser.RULE_performProcedureStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4723;
			this.procedureName();
			this.state = 4726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
				{
				this.state = 4724;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4725;
				this.procedureName();
				}
			}

			this.state = 4729;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 689, this._ctx) ) {
			case 1:
				{
				this.state = 4728;
				this.performType();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performType(): PerformTypeContext {
		let _localctx: PerformTypeContext = new PerformTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 800, Cobol85Parser.RULE_performType);
		try {
			this.state = 4734;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 690, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4731;
				this.performTimes();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4732;
				this.performUntil();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4733;
				this.performVarying();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performTimes(): PerformTimesContext {
		let _localctx: PerformTimesContext = new PerformTimesContext(this._ctx, this.state);
		this.enterRule(_localctx, 802, Cobol85Parser.RULE_performTimes);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4738;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 691, this._ctx) ) {
			case 1:
				{
				this.state = 4736;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4737;
				this.integerLiteral();
				}
				break;
			}
			this.state = 4740;
			this.match(Cobol85Parser.TIMES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performUntil(): PerformUntilContext {
		let _localctx: PerformUntilContext = new PerformUntilContext(this._ctx, this.state);
		this.enterRule(_localctx, 804, Cobol85Parser.RULE_performUntil);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4743;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TEST || _la === Cobol85Parser.WITH) {
				{
				this.state = 4742;
				this.performTestClause();
				}
			}

			this.state = 4745;
			this.match(Cobol85Parser.UNTIL);
			this.state = 4746;
			this.condition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performVarying(): PerformVaryingContext {
		let _localctx: PerformVaryingContext = new PerformVaryingContext(this._ctx, this.state);
		this.enterRule(_localctx, 806, Cobol85Parser.RULE_performVarying);
		try {
			this.state = 4755;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.TEST:
			case Cobol85Parser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4748;
				this.performTestClause();
				this.state = 4749;
				this.performVaryingClause();
				}
				break;
			case Cobol85Parser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4751;
				this.performVaryingClause();
				this.state = 4753;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 693, this._ctx) ) {
				case 1:
					{
					this.state = 4752;
					this.performTestClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performVaryingClause(): PerformVaryingClauseContext {
		let _localctx: PerformVaryingClauseContext = new PerformVaryingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 808, Cobol85Parser.RULE_performVaryingClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4757;
			this.match(Cobol85Parser.VARYING);
			this.state = 4758;
			this.performVaryingPhrase();
			this.state = 4762;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AFTER) {
				{
				{
				this.state = 4759;
				this.performAfter();
				}
				}
				this.state = 4764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performVaryingPhrase(): PerformVaryingPhraseContext {
		let _localctx: PerformVaryingPhraseContext = new PerformVaryingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 810, Cobol85Parser.RULE_performVaryingPhrase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4767;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 696, this._ctx) ) {
			case 1:
				{
				this.state = 4765;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4766;
				this.literal();
				}
				break;
			}
			this.state = 4769;
			this.performFrom();
			this.state = 4770;
			this.performBy();
			this.state = 4771;
			this.performUntil();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performAfter(): PerformAfterContext {
		let _localctx: PerformAfterContext = new PerformAfterContext(this._ctx, this.state);
		this.enterRule(_localctx, 812, Cobol85Parser.RULE_performAfter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4773;
			this.match(Cobol85Parser.AFTER);
			this.state = 4774;
			this.performVaryingPhrase();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performFrom(): PerformFromContext {
		let _localctx: PerformFromContext = new PerformFromContext(this._ctx, this.state);
		this.enterRule(_localctx, 814, Cobol85Parser.RULE_performFrom);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4776;
			this.match(Cobol85Parser.FROM);
			this.state = 4780;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 697, this._ctx) ) {
			case 1:
				{
				this.state = 4777;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4778;
				this.literal();
				}
				break;

			case 3:
				{
				this.state = 4779;
				this.arithmeticExpression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performBy(): PerformByContext {
		let _localctx: PerformByContext = new PerformByContext(this._ctx, this.state);
		this.enterRule(_localctx, 816, Cobol85Parser.RULE_performBy);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4782;
			this.match(Cobol85Parser.BY);
			this.state = 4786;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 698, this._ctx) ) {
			case 1:
				{
				this.state = 4783;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 4784;
				this.literal();
				}
				break;

			case 3:
				{
				this.state = 4785;
				this.arithmeticExpression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public performTestClause(): PerformTestClauseContext {
		let _localctx: PerformTestClauseContext = new PerformTestClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 818, Cobol85Parser.RULE_performTestClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4789;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 4788;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 4791;
			this.match(Cobol85Parser.TEST);
			this.state = 4792;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public purgeStatement(): PurgeStatementContext {
		let _localctx: PurgeStatementContext = new PurgeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 820, Cobol85Parser.RULE_purgeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4794;
			this.match(Cobol85Parser.PURGE);
			this.state = 4796;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4795;
				this.cdName();
				}
				}
				this.state = 4798;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public readStatement(): ReadStatementContext {
		let _localctx: ReadStatementContext = new ReadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 822, Cobol85Parser.RULE_readStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4800;
			this.match(Cobol85Parser.READ);
			this.state = 4801;
			this.fileName();
			this.state = 4803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NEXT) {
				{
				this.state = 4802;
				this.match(Cobol85Parser.NEXT);
				}
			}

			this.state = 4806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RECORD) {
				{
				this.state = 4805;
				this.match(Cobol85Parser.RECORD);
				}
			}

			this.state = 4809;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INTO) {
				{
				this.state = 4808;
				this.readInto();
				}
			}

			this.state = 4812;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 704, this._ctx) ) {
			case 1:
				{
				this.state = 4811;
				this.readWith();
				}
				break;
			}
			this.state = 4815;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 4814;
				this.readKey();
				}
			}

			this.state = 4818;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 706, this._ctx) ) {
			case 1:
				{
				this.state = 4817;
				this.invalidKeyPhrase();
				}
				break;
			}
			this.state = 4821;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 707, this._ctx) ) {
			case 1:
				{
				this.state = 4820;
				this.notInvalidKeyPhrase();
				}
				break;
			}
			this.state = 4824;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 708, this._ctx) ) {
			case 1:
				{
				this.state = 4823;
				this.atEndPhrase();
				}
				break;
			}
			this.state = 4827;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 709, this._ctx) ) {
			case 1:
				{
				this.state = 4826;
				this.notAtEndPhrase();
				}
				break;
			}
			this.state = 4830;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 710, this._ctx) ) {
			case 1:
				{
				this.state = 4829;
				this.match(Cobol85Parser.END_READ);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public readInto(): ReadIntoContext {
		let _localctx: ReadIntoContext = new ReadIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 824, Cobol85Parser.RULE_readInto);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4832;
			this.match(Cobol85Parser.INTO);
			this.state = 4833;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public readWith(): ReadWithContext {
		let _localctx: ReadWithContext = new ReadWithContext(this._ctx, this.state);
		this.enterRule(_localctx, 826, Cobol85Parser.RULE_readWith);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 4835;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 4841;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.KEPT:
			case Cobol85Parser.NO:
				{
				this.state = 4838;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.KEPT || _la === Cobol85Parser.NO)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4839;
				this.match(Cobol85Parser.LOCK);
				}
				break;
			case Cobol85Parser.WAIT:
				{
				this.state = 4840;
				this.match(Cobol85Parser.WAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public readKey(): ReadKeyContext {
		let _localctx: ReadKeyContext = new ReadKeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 828, Cobol85Parser.RULE_readKey);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4843;
			this.match(Cobol85Parser.KEY);
			this.state = 4845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 4844;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 4847;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveStatement(): ReceiveStatementContext {
		let _localctx: ReceiveStatementContext = new ReceiveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 830, Cobol85Parser.RULE_receiveStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4849;
			this.match(Cobol85Parser.RECEIVE);
			this.state = 4852;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 714, this._ctx) ) {
			case 1:
				{
				this.state = 4850;
				this.receiveFromStatement();
				}
				break;

			case 2:
				{
				this.state = 4851;
				this.receiveIntoStatement();
				}
				break;
			}
			this.state = 4855;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 715, this._ctx) ) {
			case 1:
				{
				this.state = 4854;
				this.onExceptionClause();
				}
				break;
			}
			this.state = 4858;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 716, this._ctx) ) {
			case 1:
				{
				this.state = 4857;
				this.notOnExceptionClause();
				}
				break;
			}
			this.state = 4861;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
			case 1:
				{
				this.state = 4860;
				this.match(Cobol85Parser.END_RECEIVE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveFromStatement(): ReceiveFromStatementContext {
		let _localctx: ReceiveFromStatementContext = new ReceiveFromStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 832, Cobol85Parser.RULE_receiveFromStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4863;
			this.dataName();
			this.state = 4864;
			this.match(Cobol85Parser.FROM);
			this.state = 4865;
			this.receiveFrom();
			this.state = 4873;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 4871;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case Cobol85Parser.BEFORE:
						{
						this.state = 4866;
						this.receiveBefore();
						}
						break;
					case Cobol85Parser.NO:
					case Cobol85Parser.WITH:
						{
						this.state = 4867;
						this.receiveWith();
						}
						break;
					case Cobol85Parser.THREAD:
						{
						this.state = 4868;
						this.receiveThread();
						}
						break;
					case Cobol85Parser.SIZE:
						{
						this.state = 4869;
						this.receiveSize();
						}
						break;
					case Cobol85Parser.STATUS:
						{
						this.state = 4870;
						this.receiveStatus();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 4875;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveFrom(): ReceiveFromContext {
		let _localctx: ReceiveFromContext = new ReceiveFromContext(this._ctx, this.state);
		this.enterRule(_localctx, 834, Cobol85Parser.RULE_receiveFrom);
		try {
			this.state = 4882;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.THREAD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4876;
				this.match(Cobol85Parser.THREAD);
				this.state = 4877;
				this.dataName();
				}
				break;
			case Cobol85Parser.LAST:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4878;
				this.match(Cobol85Parser.LAST);
				this.state = 4879;
				this.match(Cobol85Parser.THREAD);
				}
				break;
			case Cobol85Parser.ANY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4880;
				this.match(Cobol85Parser.ANY);
				this.state = 4881;
				this.match(Cobol85Parser.THREAD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveIntoStatement(): ReceiveIntoStatementContext {
		let _localctx: ReceiveIntoStatementContext = new ReceiveIntoStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 836, Cobol85Parser.RULE_receiveIntoStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4884;
			this.cdName();
			this.state = 4885;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.MESSAGE || _la === Cobol85Parser.SEGMENT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4887;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INTO) {
				{
				this.state = 4886;
				this.match(Cobol85Parser.INTO);
				}
			}

			this.state = 4889;
			this.identifier();
			this.state = 4891;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NO) {
				{
				this.state = 4890;
				this.receiveNoData();
				}
			}

			this.state = 4894;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 723, this._ctx) ) {
			case 1:
				{
				this.state = 4893;
				this.receiveWithData();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveNoData(): ReceiveNoDataContext {
		let _localctx: ReceiveNoDataContext = new ReceiveNoDataContext(this._ctx, this.state);
		this.enterRule(_localctx, 838, Cobol85Parser.RULE_receiveNoData);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4896;
			this.match(Cobol85Parser.NO);
			this.state = 4897;
			this.match(Cobol85Parser.DATA);
			this.state = 4901;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 724, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4898;
					this.statement();
					}
					}
				}
				this.state = 4903;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 724, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveWithData(): ReceiveWithDataContext {
		let _localctx: ReceiveWithDataContext = new ReceiveWithDataContext(this._ctx, this.state);
		this.enterRule(_localctx, 840, Cobol85Parser.RULE_receiveWithData);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4904;
			this.match(Cobol85Parser.WITH);
			this.state = 4905;
			this.match(Cobol85Parser.DATA);
			this.state = 4909;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 725, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4906;
					this.statement();
					}
					}
				}
				this.state = 4911;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 725, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveBefore(): ReceiveBeforeContext {
		let _localctx: ReceiveBeforeContext = new ReceiveBeforeContext(this._ctx, this.state);
		this.enterRule(_localctx, 842, Cobol85Parser.RULE_receiveBefore);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4912;
			this.match(Cobol85Parser.BEFORE);
			this.state = 4914;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 726, this._ctx) ) {
			case 1:
				{
				this.state = 4913;
				this.match(Cobol85Parser.TIME);
				}
				break;
			}
			this.state = 4918;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 727, this._ctx) ) {
			case 1:
				{
				this.state = 4916;
				this.numericLiteral();
				}
				break;

			case 2:
				{
				this.state = 4917;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveWith(): ReceiveWithContext {
		let _localctx: ReceiveWithContext = new ReceiveWithContext(this._ctx, this.state);
		this.enterRule(_localctx, 844, Cobol85Parser.RULE_receiveWith);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 4920;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 4923;
			this.match(Cobol85Parser.NO);
			this.state = 4924;
			this.match(Cobol85Parser.WAIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveThread(): ReceiveThreadContext {
		let _localctx: ReceiveThreadContext = new ReceiveThreadContext(this._ctx, this.state);
		this.enterRule(_localctx, 846, Cobol85Parser.RULE_receiveThread);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4926;
			this.match(Cobol85Parser.THREAD);
			this.state = 4928;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 4927;
				this.match(Cobol85Parser.IN);
				}
			}

			this.state = 4930;
			this.dataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveSize(): ReceiveSizeContext {
		let _localctx: ReceiveSizeContext = new ReceiveSizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 848, Cobol85Parser.RULE_receiveSize);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4932;
			this.match(Cobol85Parser.SIZE);
			this.state = 4934;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 4933;
				this.match(Cobol85Parser.IN);
				}
			}

			this.state = 4938;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 731, this._ctx) ) {
			case 1:
				{
				this.state = 4936;
				this.numericLiteral();
				}
				break;

			case 2:
				{
				this.state = 4937;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public receiveStatus(): ReceiveStatusContext {
		let _localctx: ReceiveStatusContext = new ReceiveStatusContext(this._ctx, this.state);
		this.enterRule(_localctx, 850, Cobol85Parser.RULE_receiveStatus);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4940;
			this.match(Cobol85Parser.STATUS);
			this.state = 4942;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 4941;
				this.match(Cobol85Parser.IN);
				}
			}

			{
			this.state = 4944;
			this.identifier();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public releaseStatement(): ReleaseStatementContext {
		let _localctx: ReleaseStatementContext = new ReleaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 852, Cobol85Parser.RULE_releaseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4946;
			this.match(Cobol85Parser.RELEASE);
			this.state = 4947;
			this.recordName();
			this.state = 4950;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FROM) {
				{
				this.state = 4948;
				this.match(Cobol85Parser.FROM);
				this.state = 4949;
				this.qualifiedDataName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let _localctx: ReturnStatementContext = new ReturnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 854, Cobol85Parser.RULE_returnStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4952;
			this.match(Cobol85Parser.RETURN);
			this.state = 4953;
			this.fileName();
			this.state = 4955;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.RECORD) {
				{
				this.state = 4954;
				this.match(Cobol85Parser.RECORD);
				}
			}

			this.state = 4958;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INTO) {
				{
				this.state = 4957;
				this.returnInto();
				}
			}

			this.state = 4960;
			this.atEndPhrase();
			this.state = 4962;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 736, this._ctx) ) {
			case 1:
				{
				this.state = 4961;
				this.notAtEndPhrase();
				}
				break;
			}
			this.state = 4965;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 737, this._ctx) ) {
			case 1:
				{
				this.state = 4964;
				this.match(Cobol85Parser.END_RETURN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnInto(): ReturnIntoContext {
		let _localctx: ReturnIntoContext = new ReturnIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 856, Cobol85Parser.RULE_returnInto);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4967;
			this.match(Cobol85Parser.INTO);
			this.state = 4968;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rewriteStatement(): RewriteStatementContext {
		let _localctx: RewriteStatementContext = new RewriteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 858, Cobol85Parser.RULE_rewriteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4970;
			this.match(Cobol85Parser.REWRITE);
			this.state = 4971;
			this.recordName();
			this.state = 4973;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FROM) {
				{
				this.state = 4972;
				this.rewriteFrom();
				}
			}

			this.state = 4976;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 739, this._ctx) ) {
			case 1:
				{
				this.state = 4975;
				this.invalidKeyPhrase();
				}
				break;
			}
			this.state = 4979;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 740, this._ctx) ) {
			case 1:
				{
				this.state = 4978;
				this.notInvalidKeyPhrase();
				}
				break;
			}
			this.state = 4982;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 741, this._ctx) ) {
			case 1:
				{
				this.state = 4981;
				this.match(Cobol85Parser.END_REWRITE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rewriteFrom(): RewriteFromContext {
		let _localctx: RewriteFromContext = new RewriteFromContext(this._ctx, this.state);
		this.enterRule(_localctx, 860, Cobol85Parser.RULE_rewriteFrom);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4984;
			this.match(Cobol85Parser.FROM);
			this.state = 4985;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public searchStatement(): SearchStatementContext {
		let _localctx: SearchStatementContext = new SearchStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 862, Cobol85Parser.RULE_searchStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4987;
			this.match(Cobol85Parser.SEARCH);
			this.state = 4989;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ALL) {
				{
				this.state = 4988;
				this.match(Cobol85Parser.ALL);
				}
			}

			this.state = 4991;
			this.qualifiedDataName();
			this.state = 4993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.VARYING) {
				{
				this.state = 4992;
				this.searchVarying();
				}
			}

			this.state = 4996;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT || _la === Cobol85Parser.END) {
				{
				this.state = 4995;
				this.atEndPhrase();
				}
			}

			this.state = 4999;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4998;
					this.searchWhen();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5001;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 745, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 5004;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 746, this._ctx) ) {
			case 1:
				{
				this.state = 5003;
				this.match(Cobol85Parser.END_SEARCH);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public searchVarying(): SearchVaryingContext {
		let _localctx: SearchVaryingContext = new SearchVaryingContext(this._ctx, this.state);
		this.enterRule(_localctx, 864, Cobol85Parser.RULE_searchVarying);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5006;
			this.match(Cobol85Parser.VARYING);
			this.state = 5007;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public searchWhen(): SearchWhenContext {
		let _localctx: SearchWhenContext = new SearchWhenContext(this._ctx, this.state);
		this.enterRule(_localctx, 866, Cobol85Parser.RULE_searchWhen);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5009;
			this.match(Cobol85Parser.WHEN);
			this.state = 5010;
			this.condition();
			this.state = 5019;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NEXT:
				{
				this.state = 5011;
				this.match(Cobol85Parser.NEXT);
				this.state = 5012;
				this.match(Cobol85Parser.SENTENCE);
				}
				break;
			case Cobol85Parser.ACCEPT:
			case Cobol85Parser.ADD:
			case Cobol85Parser.ALTER:
			case Cobol85Parser.AT:
			case Cobol85Parser.CALL:
			case Cobol85Parser.CANCEL:
			case Cobol85Parser.CLOSE:
			case Cobol85Parser.COMPUTE:
			case Cobol85Parser.CONTINUE:
			case Cobol85Parser.DELETE:
			case Cobol85Parser.DISABLE:
			case Cobol85Parser.DISPLAY:
			case Cobol85Parser.DIVIDE:
			case Cobol85Parser.ELSE:
			case Cobol85Parser.ENABLE:
			case Cobol85Parser.END:
			case Cobol85Parser.END_ACCEPT:
			case Cobol85Parser.END_ADD:
			case Cobol85Parser.END_CALL:
			case Cobol85Parser.END_COMPUTE:
			case Cobol85Parser.END_DELETE:
			case Cobol85Parser.END_DIVIDE:
			case Cobol85Parser.END_EVALUATE:
			case Cobol85Parser.END_IF:
			case Cobol85Parser.END_MULTIPLY:
			case Cobol85Parser.END_PERFORM:
			case Cobol85Parser.END_READ:
			case Cobol85Parser.END_RECEIVE:
			case Cobol85Parser.END_RETURN:
			case Cobol85Parser.END_REWRITE:
			case Cobol85Parser.END_SEARCH:
			case Cobol85Parser.END_START:
			case Cobol85Parser.END_STRING:
			case Cobol85Parser.END_SUBTRACT:
			case Cobol85Parser.END_UNSTRING:
			case Cobol85Parser.END_WRITE:
			case Cobol85Parser.ENTRY:
			case Cobol85Parser.EVALUATE:
			case Cobol85Parser.EXCEPTION:
			case Cobol85Parser.EXHIBIT:
			case Cobol85Parser.EXIT:
			case Cobol85Parser.GENERATE:
			case Cobol85Parser.GOBACK:
			case Cobol85Parser.GO:
			case Cobol85Parser.IF:
			case Cobol85Parser.INITIALIZE:
			case Cobol85Parser.INITIATE:
			case Cobol85Parser.INSPECT:
			case Cobol85Parser.INVALID:
			case Cobol85Parser.MERGE:
			case Cobol85Parser.MOVE:
			case Cobol85Parser.MULTIPLY:
			case Cobol85Parser.NOT:
			case Cobol85Parser.ON:
			case Cobol85Parser.OPEN:
			case Cobol85Parser.PERFORM:
			case Cobol85Parser.PURGE:
			case Cobol85Parser.READ:
			case Cobol85Parser.RECEIVE:
			case Cobol85Parser.RELEASE:
			case Cobol85Parser.RETURN:
			case Cobol85Parser.REWRITE:
			case Cobol85Parser.SEARCH:
			case Cobol85Parser.SEND:
			case Cobol85Parser.SET:
			case Cobol85Parser.SORT:
			case Cobol85Parser.START:
			case Cobol85Parser.STOP:
			case Cobol85Parser.STRING:
			case Cobol85Parser.SUBTRACT:
			case Cobol85Parser.TERMINATE:
			case Cobol85Parser.UNSTRING:
			case Cobol85Parser.WHEN:
			case Cobol85Parser.WITH:
			case Cobol85Parser.WRITE:
			case Cobol85Parser.DOT_FS:
			case Cobol85Parser.EXECCICSLINE:
			case Cobol85Parser.EXECSQLIMSLINE:
			case Cobol85Parser.EXECSQLLINE:
				{
				this.state = 5016;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 747, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5013;
						this.statement();
						}
						}
					}
					this.state = 5018;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 747, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendStatement(): SendStatementContext {
		let _localctx: SendStatementContext = new SendStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 868, Cobol85Parser.RULE_sendStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5021;
			this.match(Cobol85Parser.SEND);
			this.state = 5024;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.ADDRESS:
			case Cobol85Parser.ALL:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DATE:
			case Cobol85Parser.DAY:
			case Cobol85Parser.DAY_OF_WEEK:
			case Cobol85Parser.DEBUG_CONTENTS:
			case Cobol85Parser.DEBUG_ITEM:
			case Cobol85Parser.DEBUG_LINE:
			case Cobol85Parser.DEBUG_NAME:
			case Cobol85Parser.DEBUG_SUB_1:
			case Cobol85Parser.DEBUG_SUB_2:
			case Cobol85Parser.DEBUG_SUB_3:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FALSE:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTION:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.HIGH_VALUE:
			case Cobol85Parser.HIGH_VALUES:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LINAGE_COUNTER:
			case Cobol85Parser.LINE_COUNTER:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.LOW_VALUE:
			case Cobol85Parser.LOW_VALUES:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NULL:
			case Cobol85Parser.NULLS:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PAGE_COUNTER:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.QUOTE:
			case Cobol85Parser.QUOTES:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.RETURN_CODE:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHIFT_IN:
			case Cobol85Parser.SHIFT_OUT:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SORT_CONTROL:
			case Cobol85Parser.SORT_CORE_SIZE:
			case Cobol85Parser.SORT_FILE_SIZE:
			case Cobol85Parser.SORT_MESSAGE:
			case Cobol85Parser.SORT_MODE_SIZE:
			case Cobol85Parser.SORT_RETURN:
			case Cobol85Parser.SPACE:
			case Cobol85Parser.SPACES:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TALLY:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIME:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUE:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.WHEN_COMPILED:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.ZEROS:
			case Cobol85Parser.ZEROES:
			case Cobol85Parser.NONNUMERICLITERAL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.NUMERICLITERAL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 5022;
				this.sendStatementSync();
				}
				break;
			case Cobol85Parser.TO:
				{
				this.state = 5023;
				this.sendStatementAsync();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5027;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 750, this._ctx) ) {
			case 1:
				{
				this.state = 5026;
				this.onExceptionClause();
				}
				break;
			}
			this.state = 5030;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 751, this._ctx) ) {
			case 1:
				{
				this.state = 5029;
				this.notOnExceptionClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendStatementSync(): SendStatementSyncContext {
		let _localctx: SendStatementSyncContext = new SendStatementSyncContext(this._ctx, this.state);
		this.enterRule(_localctx, 870, Cobol85Parser.RULE_sendStatementSync);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5034;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 752, this._ctx) ) {
			case 1:
				{
				this.state = 5032;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 5033;
				this.literal();
				}
				break;
			}
			this.state = 5037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FROM) {
				{
				this.state = 5036;
				this.sendFromPhrase();
				}
			}

			this.state = 5040;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 754, this._ctx) ) {
			case 1:
				{
				this.state = 5039;
				this.sendWithPhrase();
				}
				break;
			}
			this.state = 5043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.REPLACING) {
				{
				this.state = 5042;
				this.sendReplacingPhrase();
				}
			}

			this.state = 5046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
				{
				this.state = 5045;
				this.sendAdvancingPhrase();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendStatementAsync(): SendStatementAsyncContext {
		let _localctx: SendStatementAsyncContext = new SendStatementAsyncContext(this._ctx, this.state);
		this.enterRule(_localctx, 872, Cobol85Parser.RULE_sendStatementAsync);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5048;
			this.match(Cobol85Parser.TO);
			this.state = 5049;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.BOTTOM || _la === Cobol85Parser.TOP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5050;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendFromPhrase(): SendFromPhraseContext {
		let _localctx: SendFromPhraseContext = new SendFromPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 874, Cobol85Parser.RULE_sendFromPhrase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5052;
			this.match(Cobol85Parser.FROM);
			this.state = 5053;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendWithPhrase(): SendWithPhraseContext {
		let _localctx: SendWithPhraseContext = new SendWithPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 876, Cobol85Parser.RULE_sendWithPhrase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5055;
			this.match(Cobol85Parser.WITH);
			this.state = 5060;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.EGI:
				{
				this.state = 5056;
				this.match(Cobol85Parser.EGI);
				}
				break;
			case Cobol85Parser.EMI:
				{
				this.state = 5057;
				this.match(Cobol85Parser.EMI);
				}
				break;
			case Cobol85Parser.ESI:
				{
				this.state = 5058;
				this.match(Cobol85Parser.ESI);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.ADDRESS:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DATE:
			case Cobol85Parser.DAY:
			case Cobol85Parser.DAY_OF_WEEK:
			case Cobol85Parser.DEBUG_CONTENTS:
			case Cobol85Parser.DEBUG_ITEM:
			case Cobol85Parser.DEBUG_LINE:
			case Cobol85Parser.DEBUG_NAME:
			case Cobol85Parser.DEBUG_SUB_1:
			case Cobol85Parser.DEBUG_SUB_2:
			case Cobol85Parser.DEBUG_SUB_3:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTION:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LINAGE_COUNTER:
			case Cobol85Parser.LINE_COUNTER:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PAGE_COUNTER:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.RETURN_CODE:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHIFT_IN:
			case Cobol85Parser.SHIFT_OUT:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SORT_CONTROL:
			case Cobol85Parser.SORT_CORE_SIZE:
			case Cobol85Parser.SORT_FILE_SIZE:
			case Cobol85Parser.SORT_MESSAGE:
			case Cobol85Parser.SORT_MODE_SIZE:
			case Cobol85Parser.SORT_RETURN:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TALLY:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIME:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.WHEN_COMPILED:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 5059;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendReplacingPhrase(): SendReplacingPhraseContext {
		let _localctx: SendReplacingPhraseContext = new SendReplacingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 878, Cobol85Parser.RULE_sendReplacingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5062;
			this.match(Cobol85Parser.REPLACING);
			this.state = 5064;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LINE) {
				{
				this.state = 5063;
				this.match(Cobol85Parser.LINE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendAdvancingPhrase(): SendAdvancingPhraseContext {
		let _localctx: SendAdvancingPhraseContext = new SendAdvancingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 880, Cobol85Parser.RULE_sendAdvancingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5066;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ADVANCING) {
				{
				this.state = 5067;
				this.match(Cobol85Parser.ADVANCING);
				}
			}

			this.state = 5073;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 760, this._ctx) ) {
			case 1:
				{
				this.state = 5070;
				this.sendAdvancingPage();
				}
				break;

			case 2:
				{
				this.state = 5071;
				this.sendAdvancingLines();
				}
				break;

			case 3:
				{
				this.state = 5072;
				this.sendAdvancingMnemonic();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendAdvancingPage(): SendAdvancingPageContext {
		let _localctx: SendAdvancingPageContext = new SendAdvancingPageContext(this._ctx, this.state);
		this.enterRule(_localctx, 882, Cobol85Parser.RULE_sendAdvancingPage);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5075;
			this.match(Cobol85Parser.PAGE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendAdvancingLines(): SendAdvancingLinesContext {
		let _localctx: SendAdvancingLinesContext = new SendAdvancingLinesContext(this._ctx, this.state);
		this.enterRule(_localctx, 884, Cobol85Parser.RULE_sendAdvancingLines);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5079;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 761, this._ctx) ) {
			case 1:
				{
				this.state = 5077;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 5078;
				this.literal();
				}
				break;
			}
			this.state = 5082;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES) {
				{
				this.state = 5081;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sendAdvancingMnemonic(): SendAdvancingMnemonicContext {
		let _localctx: SendAdvancingMnemonicContext = new SendAdvancingMnemonicContext(this._ctx, this.state);
		this.enterRule(_localctx, 886, Cobol85Parser.RULE_sendAdvancingMnemonic);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5084;
			this.mnemonicName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let _localctx: SetStatementContext = new SetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 888, Cobol85Parser.RULE_setStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5086;
			this.match(Cobol85Parser.SET);
			this.state = 5093;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 764, this._ctx) ) {
			case 1:
				{
				this.state = 5088;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5087;
					this.setToStatement();
					}
					}
					this.state = 5090;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
				}
				break;

			case 2:
				{
				this.state = 5092;
				this.setUpDownByStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setToStatement(): SetToStatementContext {
		let _localctx: SetToStatementContext = new SetToStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 890, Cobol85Parser.RULE_setToStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5096;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5095;
				this.setTo();
				}
				}
				this.state = 5098;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			this.state = 5100;
			this.match(Cobol85Parser.TO);
			this.state = 5102;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5101;
					this.setToValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5104;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 766, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setUpDownByStatement(): SetUpDownByStatementContext {
		let _localctx: SetUpDownByStatementContext = new SetUpDownByStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 892, Cobol85Parser.RULE_setUpDownByStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5106;
				this.setTo();
				}
				}
				this.state = 5109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			this.state = 5115;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.UP:
				{
				this.state = 5111;
				this.match(Cobol85Parser.UP);
				this.state = 5112;
				this.match(Cobol85Parser.BY);
				}
				break;
			case Cobol85Parser.DOWN:
				{
				this.state = 5113;
				this.match(Cobol85Parser.DOWN);
				this.state = 5114;
				this.match(Cobol85Parser.BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5117;
			this.setByValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setTo(): SetToContext {
		let _localctx: SetToContext = new SetToContext(this._ctx, this.state);
		this.enterRule(_localctx, 894, Cobol85Parser.RULE_setTo);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5119;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setToValue(): SetToValueContext {
		let _localctx: SetToValueContext = new SetToValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 896, Cobol85Parser.RULE_setToValue);
		try {
			this.state = 5130;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 770, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5121;
				this.match(Cobol85Parser.ON);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5122;
				this.match(Cobol85Parser.OFF);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5123;
				this.match(Cobol85Parser.ENTRY);
				this.state = 5126;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 769, this._ctx) ) {
				case 1:
					{
					this.state = 5124;
					this.identifier();
					}
					break;

				case 2:
					{
					this.state = 5125;
					this.literal();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5128;
				this.identifier();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5129;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setByValue(): SetByValueContext {
		let _localctx: SetByValueContext = new SetByValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 898, Cobol85Parser.RULE_setByValue);
		try {
			this.state = 5134;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 771, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5132;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5133;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortStatement(): SortStatementContext {
		let _localctx: SortStatementContext = new SortStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 900, Cobol85Parser.RULE_sortStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5136;
			this.match(Cobol85Parser.SORT);
			this.state = 5137;
			this.fileName();
			this.state = 5139;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5138;
					this.sortOnKeyClause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5141;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 772, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 5144;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 773, this._ctx) ) {
			case 1:
				{
				this.state = 5143;
				this.sortDuplicatesPhrase();
				}
				break;
			}
			this.state = 5147;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COLLATING || _la === Cobol85Parser.SEQUENCE) {
				{
				this.state = 5146;
				this.sortCollatingSequencePhrase();
				}
			}

			this.state = 5150;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.INPUT) {
				{
				this.state = 5149;
				this.sortInputProcedurePhrase();
				}
			}

			this.state = 5155;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.USING) {
				{
				{
				this.state = 5152;
				this.sortUsing();
				}
				}
				this.state = 5157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5159;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.OUTPUT) {
				{
				this.state = 5158;
				this.sortOutputProcedurePhrase();
				}
			}

			this.state = 5164;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.GIVING) {
				{
				{
				this.state = 5161;
				this.sortGivingPhrase();
				}
				}
				this.state = 5166;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortOnKeyClause(): SortOnKeyClauseContext {
		let _localctx: SortOnKeyClauseContext = new SortOnKeyClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 902, Cobol85Parser.RULE_sortOnKeyClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5167;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5170;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ASCENDING || _la === Cobol85Parser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5172;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 5171;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 5175;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5174;
				this.qualifiedDataName();
				}
				}
				this.state = 5177;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortDuplicatesPhrase(): SortDuplicatesPhraseContext {
		let _localctx: SortDuplicatesPhraseContext = new SortDuplicatesPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 904, Cobol85Parser.RULE_sortDuplicatesPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 5179;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 5182;
			this.match(Cobol85Parser.DUPLICATES);
			this.state = 5184;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 5183;
				this.match(Cobol85Parser.IN);
				}
			}

			this.state = 5187;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ORDER) {
				{
				this.state = 5186;
				this.match(Cobol85Parser.ORDER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortCollatingSequencePhrase(): SortCollatingSequencePhraseContext {
		let _localctx: SortCollatingSequencePhraseContext = new SortCollatingSequencePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 906, Cobol85Parser.RULE_sortCollatingSequencePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5190;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COLLATING) {
				{
				this.state = 5189;
				this.match(Cobol85Parser.COLLATING);
				}
			}

			this.state = 5192;
			this.match(Cobol85Parser.SEQUENCE);
			this.state = 5194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 5193;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 5197;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5196;
					this.alphabetName();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5199;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 787, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 5202;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 788, this._ctx) ) {
			case 1:
				{
				this.state = 5201;
				this.sortCollatingAlphanumeric();
				}
				break;
			}
			this.state = 5205;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR || _la === Cobol85Parser.NATIONAL) {
				{
				this.state = 5204;
				this.sortCollatingNational();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortCollatingAlphanumeric(): SortCollatingAlphanumericContext {
		let _localctx: SortCollatingAlphanumericContext = new SortCollatingAlphanumericContext(this._ctx, this.state);
		this.enterRule(_localctx, 908, Cobol85Parser.RULE_sortCollatingAlphanumeric);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5208;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 5207;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 5210;
			this.match(Cobol85Parser.ALPHANUMERIC);
			this.state = 5211;
			this.match(Cobol85Parser.IS);
			this.state = 5212;
			this.alphabetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortCollatingNational(): SortCollatingNationalContext {
		let _localctx: SortCollatingNationalContext = new SortCollatingNationalContext(this._ctx, this.state);
		this.enterRule(_localctx, 910, Cobol85Parser.RULE_sortCollatingNational);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 5214;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 5217;
			this.match(Cobol85Parser.NATIONAL);
			this.state = 5219;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 5218;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 5221;
			this.alphabetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortInputProcedurePhrase(): SortInputProcedurePhraseContext {
		let _localctx: SortInputProcedurePhraseContext = new SortInputProcedurePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 912, Cobol85Parser.RULE_sortInputProcedurePhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5223;
			this.match(Cobol85Parser.INPUT);
			this.state = 5224;
			this.match(Cobol85Parser.PROCEDURE);
			this.state = 5226;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 5225;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 5228;
			this.procedureName();
			this.state = 5230;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
				{
				this.state = 5229;
				this.sortInputThrough();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortInputThrough(): SortInputThroughContext {
		let _localctx: SortInputThroughContext = new SortInputThroughContext(this._ctx, this.state);
		this.enterRule(_localctx, 914, Cobol85Parser.RULE_sortInputThrough);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5232;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5233;
			this.procedureName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortUsing(): SortUsingContext {
		let _localctx: SortUsingContext = new SortUsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 916, Cobol85Parser.RULE_sortUsing);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5235;
			this.match(Cobol85Parser.USING);
			this.state = 5237;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5236;
				this.fileName();
				}
				}
				this.state = 5239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortOutputProcedurePhrase(): SortOutputProcedurePhraseContext {
		let _localctx: SortOutputProcedurePhraseContext = new SortOutputProcedurePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 918, Cobol85Parser.RULE_sortOutputProcedurePhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5241;
			this.match(Cobol85Parser.OUTPUT);
			this.state = 5242;
			this.match(Cobol85Parser.PROCEDURE);
			this.state = 5244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 5243;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 5246;
			this.procedureName();
			this.state = 5248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU) {
				{
				this.state = 5247;
				this.sortOutputThrough();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortOutputThrough(): SortOutputThroughContext {
		let _localctx: SortOutputThroughContext = new SortOutputThroughContext(this._ctx, this.state);
		this.enterRule(_localctx, 920, Cobol85Parser.RULE_sortOutputThrough);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5250;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.THROUGH || _la === Cobol85Parser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5251;
			this.procedureName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortGivingPhrase(): SortGivingPhraseContext {
		let _localctx: SortGivingPhraseContext = new SortGivingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 922, Cobol85Parser.RULE_sortGivingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5253;
			this.match(Cobol85Parser.GIVING);
			this.state = 5255;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5254;
				this.sortGiving();
				}
				}
				this.state = 5257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortGiving(): SortGivingContext {
		let _localctx: SortGivingContext = new SortGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 924, Cobol85Parser.RULE_sortGiving);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5259;
			this.fileName();
			this.state = 5269;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 799, this._ctx) ) {
			case 1:
				{
				this.state = 5260;
				this.match(Cobol85Parser.LOCK);
				}
				break;

			case 2:
				{
				this.state = 5261;
				this.match(Cobol85Parser.SAVE);
				}
				break;

			case 3:
				{
				this.state = 5262;
				this.match(Cobol85Parser.NO);
				this.state = 5263;
				this.match(Cobol85Parser.REWIND);
				}
				break;

			case 4:
				{
				this.state = 5264;
				this.match(Cobol85Parser.CRUNCH);
				}
				break;

			case 5:
				{
				this.state = 5265;
				this.match(Cobol85Parser.RELEASE);
				}
				break;

			case 6:
				{
				this.state = 5266;
				this.match(Cobol85Parser.WITH);
				this.state = 5267;
				this.match(Cobol85Parser.REMOVE);
				this.state = 5268;
				this.match(Cobol85Parser.CRUNCH);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startStatement(): StartStatementContext {
		let _localctx: StartStatementContext = new StartStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 926, Cobol85Parser.RULE_startStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5271;
			this.match(Cobol85Parser.START);
			this.state = 5272;
			this.fileName();
			this.state = 5274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 5273;
				this.startKey();
				}
			}

			this.state = 5277;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 801, this._ctx) ) {
			case 1:
				{
				this.state = 5276;
				this.invalidKeyPhrase();
				}
				break;
			}
			this.state = 5280;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 802, this._ctx) ) {
			case 1:
				{
				this.state = 5279;
				this.notInvalidKeyPhrase();
				}
				break;
			}
			this.state = 5283;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 803, this._ctx) ) {
			case 1:
				{
				this.state = 5282;
				this.match(Cobol85Parser.END_START);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startKey(): StartKeyContext {
		let _localctx: StartKeyContext = new StartKeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 928, Cobol85Parser.RULE_startKey);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5285;
			this.match(Cobol85Parser.KEY);
			this.state = 5287;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 5286;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 5316;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 810, this._ctx) ) {
			case 1:
				{
				this.state = 5289;
				this.match(Cobol85Parser.EQUAL);
				this.state = 5291;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.TO) {
					{
					this.state = 5290;
					this.match(Cobol85Parser.TO);
					}
				}

				}
				break;

			case 2:
				{
				this.state = 5293;
				this.match(Cobol85Parser.EQUALCHAR);
				}
				break;

			case 3:
				{
				this.state = 5294;
				this.match(Cobol85Parser.GREATER);
				this.state = 5296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.THAN) {
					{
					this.state = 5295;
					this.match(Cobol85Parser.THAN);
					}
				}

				}
				break;

			case 4:
				{
				this.state = 5298;
				this.match(Cobol85Parser.MORETHANCHAR);
				}
				break;

			case 5:
				{
				this.state = 5299;
				this.match(Cobol85Parser.NOT);
				this.state = 5300;
				this.match(Cobol85Parser.LESS);
				this.state = 5302;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.THAN) {
					{
					this.state = 5301;
					this.match(Cobol85Parser.THAN);
					}
				}

				}
				break;

			case 6:
				{
				this.state = 5304;
				this.match(Cobol85Parser.NOT);
				this.state = 5305;
				this.match(Cobol85Parser.LESSTHANCHAR);
				}
				break;

			case 7:
				{
				this.state = 5306;
				this.match(Cobol85Parser.GREATER);
				this.state = 5308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.THAN) {
					{
					this.state = 5307;
					this.match(Cobol85Parser.THAN);
					}
				}

				this.state = 5310;
				this.match(Cobol85Parser.OR);
				this.state = 5311;
				this.match(Cobol85Parser.EQUAL);
				this.state = 5313;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.TO) {
					{
					this.state = 5312;
					this.match(Cobol85Parser.TO);
					}
				}

				}
				break;

			case 8:
				{
				this.state = 5315;
				this.match(Cobol85Parser.MORETHANOREQUAL);
				}
				break;
			}
			this.state = 5318;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopStatement(): StopStatementContext {
		let _localctx: StopStatementContext = new StopStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 930, Cobol85Parser.RULE_stopStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5320;
			this.match(Cobol85Parser.STOP);
			this.state = 5323;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.RUN:
				{
				this.state = 5321;
				this.match(Cobol85Parser.RUN);
				}
				break;
			case Cobol85Parser.ALL:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.FALSE:
			case Cobol85Parser.HIGH_VALUE:
			case Cobol85Parser.HIGH_VALUES:
			case Cobol85Parser.LOW_VALUE:
			case Cobol85Parser.LOW_VALUES:
			case Cobol85Parser.NULL:
			case Cobol85Parser.NULLS:
			case Cobol85Parser.QUOTE:
			case Cobol85Parser.QUOTES:
			case Cobol85Parser.SPACE:
			case Cobol85Parser.SPACES:
			case Cobol85Parser.TRUE:
			case Cobol85Parser.ZERO:
			case Cobol85Parser.ZEROS:
			case Cobol85Parser.ZEROES:
			case Cobol85Parser.NONNUMERICLITERAL:
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
			case Cobol85Parser.NUMERICLITERAL:
				{
				this.state = 5322;
				this.literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringStatement(): StringStatementContext {
		let _localctx: StringStatementContext = new StringStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 932, Cobol85Parser.RULE_stringStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5325;
			this.match(Cobol85Parser.STRING);
			this.state = 5327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5326;
				this.stringSendingPhrase();
				}
				}
				this.state = 5329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			this.state = 5331;
			this.stringIntoPhrase();
			this.state = 5333;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 813, this._ctx) ) {
			case 1:
				{
				this.state = 5332;
				this.stringWithPointerPhrase();
				}
				break;
			}
			this.state = 5336;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 814, this._ctx) ) {
			case 1:
				{
				this.state = 5335;
				this.onOverflowPhrase();
				}
				break;
			}
			this.state = 5339;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 815, this._ctx) ) {
			case 1:
				{
				this.state = 5338;
				this.notOnOverflowPhrase();
				}
				break;
			}
			this.state = 5342;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 816, this._ctx) ) {
			case 1:
				{
				this.state = 5341;
				this.match(Cobol85Parser.END_STRING);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringSendingPhrase(): StringSendingPhraseContext {
		let _localctx: StringSendingPhraseContext = new StringSendingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 934, Cobol85Parser.RULE_stringSendingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5344;
				this.stringSending();
				}
				}
				this.state = 5347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			this.state = 5351;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.DELIMITED:
				{
				this.state = 5349;
				this.stringDelimitedByPhrase();
				}
				break;
			case Cobol85Parser.FOR:
				{
				this.state = 5350;
				this.stringForPhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringSending(): StringSendingContext {
		let _localctx: StringSendingContext = new StringSendingContext(this._ctx, this.state);
		this.enterRule(_localctx, 936, Cobol85Parser.RULE_stringSending);
		try {
			this.state = 5355;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 819, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5353;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5354;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringDelimitedByPhrase(): StringDelimitedByPhraseContext {
		let _localctx: StringDelimitedByPhraseContext = new StringDelimitedByPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 938, Cobol85Parser.RULE_stringDelimitedByPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5357;
			this.match(Cobol85Parser.DELIMITED);
			this.state = 5359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY) {
				{
				this.state = 5358;
				this.match(Cobol85Parser.BY);
				}
			}

			this.state = 5364;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 821, this._ctx) ) {
			case 1:
				{
				this.state = 5361;
				this.match(Cobol85Parser.SIZE);
				}
				break;

			case 2:
				{
				this.state = 5362;
				this.identifier();
				}
				break;

			case 3:
				{
				this.state = 5363;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringForPhrase(): StringForPhraseContext {
		let _localctx: StringForPhraseContext = new StringForPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 940, Cobol85Parser.RULE_stringForPhrase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5366;
			this.match(Cobol85Parser.FOR);
			this.state = 5369;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 822, this._ctx) ) {
			case 1:
				{
				this.state = 5367;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 5368;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringIntoPhrase(): StringIntoPhraseContext {
		let _localctx: StringIntoPhraseContext = new StringIntoPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 942, Cobol85Parser.RULE_stringIntoPhrase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5371;
			this.match(Cobol85Parser.INTO);
			this.state = 5372;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringWithPointerPhrase(): StringWithPointerPhraseContext {
		let _localctx: StringWithPointerPhraseContext = new StringWithPointerPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 944, Cobol85Parser.RULE_stringWithPointerPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5375;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 5374;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 5377;
			this.match(Cobol85Parser.POINTER);
			this.state = 5378;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractStatement(): SubtractStatementContext {
		let _localctx: SubtractStatementContext = new SubtractStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 946, Cobol85Parser.RULE_subtractStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5380;
			this.match(Cobol85Parser.SUBTRACT);
			this.state = 5384;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 824, this._ctx) ) {
			case 1:
				{
				this.state = 5381;
				this.subtractFromStatement();
				}
				break;

			case 2:
				{
				this.state = 5382;
				this.subtractFromGivingStatement();
				}
				break;

			case 3:
				{
				this.state = 5383;
				this.subtractCorrespondingStatement();
				}
				break;
			}
			this.state = 5387;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 825, this._ctx) ) {
			case 1:
				{
				this.state = 5386;
				this.onSizeErrorPhrase();
				}
				break;
			}
			this.state = 5390;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 826, this._ctx) ) {
			case 1:
				{
				this.state = 5389;
				this.notOnSizeErrorPhrase();
				}
				break;
			}
			this.state = 5393;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 827, this._ctx) ) {
			case 1:
				{
				this.state = 5392;
				this.match(Cobol85Parser.END_SUBTRACT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractFromStatement(): SubtractFromStatementContext {
		let _localctx: SubtractFromStatementContext = new SubtractFromStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 948, Cobol85Parser.RULE_subtractFromStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5395;
				this.subtractSubtrahend();
				}
				}
				this.state = 5398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			this.state = 5400;
			this.match(Cobol85Parser.FROM);
			this.state = 5402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5401;
				this.subtractMinuend();
				}
				}
				this.state = 5404;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractFromGivingStatement(): SubtractFromGivingStatementContext {
		let _localctx: SubtractFromGivingStatementContext = new SubtractFromGivingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 950, Cobol85Parser.RULE_subtractFromGivingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5407;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5406;
				this.subtractSubtrahend();
				}
				}
				this.state = 5409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 551)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 551)) | (1 << (Cobol85Parser.INTEGERLITERAL - 551)) | (1 << (Cobol85Parser.NUMERICLITERAL - 551)) | (1 << (Cobol85Parser.IDENTIFIER - 551)))) !== 0));
			this.state = 5411;
			this.match(Cobol85Parser.FROM);
			this.state = 5412;
			this.subtractMinuendGiving();
			this.state = 5413;
			this.match(Cobol85Parser.GIVING);
			this.state = 5415;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5414;
				this.subtractGiving();
				}
				}
				this.state = 5417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractCorrespondingStatement(): SubtractCorrespondingStatementContext {
		let _localctx: SubtractCorrespondingStatementContext = new SubtractCorrespondingStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 952, Cobol85Parser.RULE_subtractCorrespondingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5419;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.CORR || _la === Cobol85Parser.CORRESPONDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5420;
			this.qualifiedDataName();
			this.state = 5421;
			this.match(Cobol85Parser.FROM);
			this.state = 5422;
			this.subtractMinuendCorresponding();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractSubtrahend(): SubtractSubtrahendContext {
		let _localctx: SubtractSubtrahendContext = new SubtractSubtrahendContext(this._ctx, this.state);
		this.enterRule(_localctx, 954, Cobol85Parser.RULE_subtractSubtrahend);
		try {
			this.state = 5426;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 832, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5424;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5425;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractMinuend(): SubtractMinuendContext {
		let _localctx: SubtractMinuendContext = new SubtractMinuendContext(this._ctx, this.state);
		this.enterRule(_localctx, 956, Cobol85Parser.RULE_subtractMinuend);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5428;
			this.identifier();
			this.state = 5430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 5429;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractMinuendGiving(): SubtractMinuendGivingContext {
		let _localctx: SubtractMinuendGivingContext = new SubtractMinuendGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 958, Cobol85Parser.RULE_subtractMinuendGiving);
		try {
			this.state = 5434;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 834, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5432;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5433;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractGiving(): SubtractGivingContext {
		let _localctx: SubtractGivingContext = new SubtractGivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 960, Cobol85Parser.RULE_subtractGiving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5436;
			this.identifier();
			this.state = 5438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 5437;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subtractMinuendCorresponding(): SubtractMinuendCorrespondingContext {
		let _localctx: SubtractMinuendCorrespondingContext = new SubtractMinuendCorrespondingContext(this._ctx, this.state);
		this.enterRule(_localctx, 962, Cobol85Parser.RULE_subtractMinuendCorresponding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5440;
			this.qualifiedDataName();
			this.state = 5442;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ROUNDED) {
				{
				this.state = 5441;
				this.match(Cobol85Parser.ROUNDED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public terminateStatement(): TerminateStatementContext {
		let _localctx: TerminateStatementContext = new TerminateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 964, Cobol85Parser.RULE_terminateStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5444;
			this.match(Cobol85Parser.TERMINATE);
			this.state = 5445;
			this.reportName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringStatement(): UnstringStatementContext {
		let _localctx: UnstringStatementContext = new UnstringStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 966, Cobol85Parser.RULE_unstringStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5447;
			this.match(Cobol85Parser.UNSTRING);
			this.state = 5448;
			this.unstringSendingPhrase();
			this.state = 5449;
			this.unstringIntoPhrase();
			this.state = 5451;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 837, this._ctx) ) {
			case 1:
				{
				this.state = 5450;
				this.unstringWithPointerPhrase();
				}
				break;
			}
			this.state = 5454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.TALLYING) {
				{
				this.state = 5453;
				this.unstringTallyingPhrase();
				}
			}

			this.state = 5457;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 839, this._ctx) ) {
			case 1:
				{
				this.state = 5456;
				this.onOverflowPhrase();
				}
				break;
			}
			this.state = 5460;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 840, this._ctx) ) {
			case 1:
				{
				this.state = 5459;
				this.notOnOverflowPhrase();
				}
				break;
			}
			this.state = 5463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 841, this._ctx) ) {
			case 1:
				{
				this.state = 5462;
				this.match(Cobol85Parser.END_UNSTRING);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringSendingPhrase(): UnstringSendingPhraseContext {
		let _localctx: UnstringSendingPhraseContext = new UnstringSendingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 968, Cobol85Parser.RULE_unstringSendingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5465;
			this.identifier();
			this.state = 5473;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DELIMITED) {
				{
				this.state = 5466;
				this.unstringDelimitedByPhrase();
				this.state = 5470;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === Cobol85Parser.OR) {
					{
					{
					this.state = 5467;
					this.unstringOrAllPhrase();
					}
					}
					this.state = 5472;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringDelimitedByPhrase(): UnstringDelimitedByPhraseContext {
		let _localctx: UnstringDelimitedByPhraseContext = new UnstringDelimitedByPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 970, Cobol85Parser.RULE_unstringDelimitedByPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5475;
			this.match(Cobol85Parser.DELIMITED);
			this.state = 5477;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.BY) {
				{
				this.state = 5476;
				this.match(Cobol85Parser.BY);
				}
			}

			this.state = 5480;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 845, this._ctx) ) {
			case 1:
				{
				this.state = 5479;
				this.match(Cobol85Parser.ALL);
				}
				break;
			}
			this.state = 5484;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 846, this._ctx) ) {
			case 1:
				{
				this.state = 5482;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 5483;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringOrAllPhrase(): UnstringOrAllPhraseContext {
		let _localctx: UnstringOrAllPhraseContext = new UnstringOrAllPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 972, Cobol85Parser.RULE_unstringOrAllPhrase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5486;
			this.match(Cobol85Parser.OR);
			this.state = 5488;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 847, this._ctx) ) {
			case 1:
				{
				this.state = 5487;
				this.match(Cobol85Parser.ALL);
				}
				break;
			}
			this.state = 5492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 848, this._ctx) ) {
			case 1:
				{
				this.state = 5490;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 5491;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringIntoPhrase(): UnstringIntoPhraseContext {
		let _localctx: UnstringIntoPhraseContext = new UnstringIntoPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 974, Cobol85Parser.RULE_unstringIntoPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5494;
			this.match(Cobol85Parser.INTO);
			this.state = 5496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5495;
				this.unstringInto();
				}
				}
				this.state = 5498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringInto(): UnstringIntoContext {
		let _localctx: UnstringIntoContext = new UnstringIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 976, Cobol85Parser.RULE_unstringInto);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5500;
			this.identifier();
			this.state = 5502;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.DELIMITER) {
				{
				this.state = 5501;
				this.unstringDelimiterIn();
				}
			}

			this.state = 5505;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.COUNT) {
				{
				this.state = 5504;
				this.unstringCountIn();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringDelimiterIn(): UnstringDelimiterInContext {
		let _localctx: UnstringDelimiterInContext = new UnstringDelimiterInContext(this._ctx, this.state);
		this.enterRule(_localctx, 978, Cobol85Parser.RULE_unstringDelimiterIn);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5507;
			this.match(Cobol85Parser.DELIMITER);
			this.state = 5509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 5508;
				this.match(Cobol85Parser.IN);
				}
			}

			this.state = 5511;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringCountIn(): UnstringCountInContext {
		let _localctx: UnstringCountInContext = new UnstringCountInContext(this._ctx, this.state);
		this.enterRule(_localctx, 980, Cobol85Parser.RULE_unstringCountIn);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5513;
			this.match(Cobol85Parser.COUNT);
			this.state = 5515;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 5514;
				this.match(Cobol85Parser.IN);
				}
			}

			this.state = 5517;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringWithPointerPhrase(): UnstringWithPointerPhraseContext {
		let _localctx: UnstringWithPointerPhraseContext = new UnstringWithPointerPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 982, Cobol85Parser.RULE_unstringWithPointerPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.WITH) {
				{
				this.state = 5519;
				this.match(Cobol85Parser.WITH);
				}
			}

			this.state = 5522;
			this.match(Cobol85Parser.POINTER);
			this.state = 5523;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unstringTallyingPhrase(): UnstringTallyingPhraseContext {
		let _localctx: UnstringTallyingPhraseContext = new UnstringTallyingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 984, Cobol85Parser.RULE_unstringTallyingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5525;
			this.match(Cobol85Parser.TALLYING);
			this.state = 5527;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IN) {
				{
				this.state = 5526;
				this.match(Cobol85Parser.IN);
				}
			}

			this.state = 5529;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useStatement(): UseStatementContext {
		let _localctx: UseStatementContext = new UseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 986, Cobol85Parser.RULE_useStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5531;
			this.match(Cobol85Parser.USE);
			this.state = 5534;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.AFTER:
			case Cobol85Parser.GLOBAL:
				{
				this.state = 5532;
				this.useAfterClause();
				}
				break;
			case Cobol85Parser.DEBUGGING:
			case Cobol85Parser.FOR:
				{
				this.state = 5533;
				this.useDebugClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useAfterClause(): UseAfterClauseContext {
		let _localctx: UseAfterClauseContext = new UseAfterClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 988, Cobol85Parser.RULE_useAfterClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5537;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.GLOBAL) {
				{
				this.state = 5536;
				this.match(Cobol85Parser.GLOBAL);
				}
			}

			this.state = 5539;
			this.match(Cobol85Parser.AFTER);
			this.state = 5541;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.STANDARD) {
				{
				this.state = 5540;
				this.match(Cobol85Parser.STANDARD);
				}
			}

			this.state = 5543;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ERROR || _la === Cobol85Parser.EXCEPTION)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5544;
			this.match(Cobol85Parser.PROCEDURE);
			this.state = 5546;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5545;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5548;
			this.useAfterOn();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useAfterOn(): UseAfterOnContext {
		let _localctx: UseAfterOnContext = new UseAfterOnContext(this._ctx, this.state);
		this.enterRule(_localctx, 990, Cobol85Parser.RULE_useAfterOn);
		let _la: number;
		try {
			this.state = 5559;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.INPUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5550;
				this.match(Cobol85Parser.INPUT);
				}
				break;
			case Cobol85Parser.OUTPUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5551;
				this.match(Cobol85Parser.OUTPUT);
				}
				break;
			case Cobol85Parser.I_O:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5552;
				this.match(Cobol85Parser.I_O);
				}
				break;
			case Cobol85Parser.EXTEND:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5553;
				this.match(Cobol85Parser.EXTEND);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5554;
					this.fileName();
					}
					}
					this.state = 5557;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useDebugClause(): UseDebugClauseContext {
		let _localctx: UseDebugClauseContext = new UseDebugClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 992, Cobol85Parser.RULE_useDebugClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FOR) {
				{
				this.state = 5561;
				this.match(Cobol85Parser.FOR);
				}
			}

			this.state = 5564;
			this.match(Cobol85Parser.DEBUGGING);
			this.state = 5566;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5565;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5568;
				this.useDebugOn();
				}
				}
				this.state = 5571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || ((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)) | (1 << (Cobol85Parser.IDENTIFIER - 552)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useDebugOn(): UseDebugOnContext {
		let _localctx: UseDebugOnContext = new UseDebugOnContext(this._ctx, this.state);
		this.enterRule(_localctx, 994, Cobol85Parser.RULE_useDebugOn);
		let _la: number;
		try {
			this.state = 5585;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 867, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5573;
				this.match(Cobol85Parser.ALL);
				this.state = 5574;
				this.match(Cobol85Parser.PROCEDURES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5575;
				this.match(Cobol85Parser.ALL);
				this.state = 5577;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.REFERENCES) {
					{
					this.state = 5576;
					this.match(Cobol85Parser.REFERENCES);
					}
				}

				this.state = 5580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.OF) {
					{
					this.state = 5579;
					this.match(Cobol85Parser.OF);
					}
				}

				this.state = 5582;
				this.identifier();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5583;
				this.procedureName();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5584;
				this.fileName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeStatement(): WriteStatementContext {
		let _localctx: WriteStatementContext = new WriteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 996, Cobol85Parser.RULE_writeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5587;
			this.match(Cobol85Parser.WRITE);
			this.state = 5588;
			this.recordName();
			this.state = 5590;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.FROM) {
				{
				this.state = 5589;
				this.writeFromPhrase();
				}
			}

			this.state = 5593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE) {
				{
				this.state = 5592;
				this.writeAdvancingPhrase();
				}
			}

			this.state = 5596;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 870, this._ctx) ) {
			case 1:
				{
				this.state = 5595;
				this.writeAtEndOfPagePhrase();
				}
				break;
			}
			this.state = 5599;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 871, this._ctx) ) {
			case 1:
				{
				this.state = 5598;
				this.writeNotAtEndOfPagePhrase();
				}
				break;
			}
			this.state = 5602;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 872, this._ctx) ) {
			case 1:
				{
				this.state = 5601;
				this.invalidKeyPhrase();
				}
				break;
			}
			this.state = 5605;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 873, this._ctx) ) {
			case 1:
				{
				this.state = 5604;
				this.notInvalidKeyPhrase();
				}
				break;
			}
			this.state = 5608;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 874, this._ctx) ) {
			case 1:
				{
				this.state = 5607;
				this.match(Cobol85Parser.END_WRITE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeFromPhrase(): WriteFromPhraseContext {
		let _localctx: WriteFromPhraseContext = new WriteFromPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 998, Cobol85Parser.RULE_writeFromPhrase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5610;
			this.match(Cobol85Parser.FROM);
			this.state = 5613;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 875, this._ctx) ) {
			case 1:
				{
				this.state = 5611;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 5612;
				this.literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeAdvancingPhrase(): WriteAdvancingPhraseContext {
		let _localctx: WriteAdvancingPhraseContext = new WriteAdvancingPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1000, Cobol85Parser.RULE_writeAdvancingPhrase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5615;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.AFTER || _la === Cobol85Parser.BEFORE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5617;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ADVANCING) {
				{
				this.state = 5616;
				this.match(Cobol85Parser.ADVANCING);
				}
			}

			this.state = 5622;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 877, this._ctx) ) {
			case 1:
				{
				this.state = 5619;
				this.writeAdvancingPage();
				}
				break;

			case 2:
				{
				this.state = 5620;
				this.writeAdvancingLines();
				}
				break;

			case 3:
				{
				this.state = 5621;
				this.writeAdvancingMnemonic();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeAdvancingPage(): WriteAdvancingPageContext {
		let _localctx: WriteAdvancingPageContext = new WriteAdvancingPageContext(this._ctx, this.state);
		this.enterRule(_localctx, 1002, Cobol85Parser.RULE_writeAdvancingPage);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5624;
			this.match(Cobol85Parser.PAGE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeAdvancingLines(): WriteAdvancingLinesContext {
		let _localctx: WriteAdvancingLinesContext = new WriteAdvancingLinesContext(this._ctx, this.state);
		this.enterRule(_localctx, 1004, Cobol85Parser.RULE_writeAdvancingLines);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5628;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 878, this._ctx) ) {
			case 1:
				{
				this.state = 5626;
				this.identifier();
				}
				break;

			case 2:
				{
				this.state = 5627;
				this.literal();
				}
				break;
			}
			this.state = 5631;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES) {
				{
				this.state = 5630;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.LINE || _la === Cobol85Parser.LINES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeAdvancingMnemonic(): WriteAdvancingMnemonicContext {
		let _localctx: WriteAdvancingMnemonicContext = new WriteAdvancingMnemonicContext(this._ctx, this.state);
		this.enterRule(_localctx, 1006, Cobol85Parser.RULE_writeAdvancingMnemonic);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5633;
			this.mnemonicName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeAtEndOfPagePhrase(): WriteAtEndOfPagePhraseContext {
		let _localctx: WriteAtEndOfPagePhraseContext = new WriteAtEndOfPagePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1008, Cobol85Parser.RULE_writeAtEndOfPagePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5636;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT) {
				{
				this.state = 5635;
				this.match(Cobol85Parser.AT);
				}
			}

			this.state = 5638;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.END_OF_PAGE || _la === Cobol85Parser.EOP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5642;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 881, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5639;
					this.statement();
					}
					}
				}
				this.state = 5644;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 881, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writeNotAtEndOfPagePhrase(): WriteNotAtEndOfPagePhraseContext {
		let _localctx: WriteNotAtEndOfPagePhraseContext = new WriteNotAtEndOfPagePhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1010, Cobol85Parser.RULE_writeNotAtEndOfPagePhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5645;
			this.match(Cobol85Parser.NOT);
			this.state = 5647;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT) {
				{
				this.state = 5646;
				this.match(Cobol85Parser.AT);
				}
			}

			this.state = 5649;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.END_OF_PAGE || _la === Cobol85Parser.EOP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5653;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5650;
					this.statement();
					}
					}
				}
				this.state = 5655;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 883, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public atEndPhrase(): AtEndPhraseContext {
		let _localctx: AtEndPhraseContext = new AtEndPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1012, Cobol85Parser.RULE_atEndPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT) {
				{
				this.state = 5656;
				this.match(Cobol85Parser.AT);
				}
			}

			this.state = 5659;
			this.match(Cobol85Parser.END);
			this.state = 5663;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5660;
					this.statement();
					}
					}
				}
				this.state = 5665;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notAtEndPhrase(): NotAtEndPhraseContext {
		let _localctx: NotAtEndPhraseContext = new NotAtEndPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1014, Cobol85Parser.RULE_notAtEndPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5666;
			this.match(Cobol85Parser.NOT);
			this.state = 5668;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.AT) {
				{
				this.state = 5667;
				this.match(Cobol85Parser.AT);
				}
			}

			this.state = 5670;
			this.match(Cobol85Parser.END);
			this.state = 5674;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5671;
					this.statement();
					}
					}
				}
				this.state = 5676;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 887, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public invalidKeyPhrase(): InvalidKeyPhraseContext {
		let _localctx: InvalidKeyPhraseContext = new InvalidKeyPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1016, Cobol85Parser.RULE_invalidKeyPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5677;
			this.match(Cobol85Parser.INVALID);
			this.state = 5679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 5678;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 5684;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 889, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5681;
					this.statement();
					}
					}
				}
				this.state = 5686;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 889, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notInvalidKeyPhrase(): NotInvalidKeyPhraseContext {
		let _localctx: NotInvalidKeyPhraseContext = new NotInvalidKeyPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1018, Cobol85Parser.RULE_notInvalidKeyPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5687;
			this.match(Cobol85Parser.NOT);
			this.state = 5688;
			this.match(Cobol85Parser.INVALID);
			this.state = 5690;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.KEY) {
				{
				this.state = 5689;
				this.match(Cobol85Parser.KEY);
				}
			}

			this.state = 5695;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 891, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5692;
					this.statement();
					}
					}
				}
				this.state = 5697;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 891, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onOverflowPhrase(): OnOverflowPhraseContext {
		let _localctx: OnOverflowPhraseContext = new OnOverflowPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1020, Cobol85Parser.RULE_onOverflowPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5699;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5698;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5701;
			this.match(Cobol85Parser.OVERFLOW);
			this.state = 5705;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 893, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5702;
					this.statement();
					}
					}
				}
				this.state = 5707;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 893, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notOnOverflowPhrase(): NotOnOverflowPhraseContext {
		let _localctx: NotOnOverflowPhraseContext = new NotOnOverflowPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1022, Cobol85Parser.RULE_notOnOverflowPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5708;
			this.match(Cobol85Parser.NOT);
			this.state = 5710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5709;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5712;
			this.match(Cobol85Parser.OVERFLOW);
			this.state = 5716;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5713;
					this.statement();
					}
					}
				}
				this.state = 5718;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 895, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onSizeErrorPhrase(): OnSizeErrorPhraseContext {
		let _localctx: OnSizeErrorPhraseContext = new OnSizeErrorPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1024, Cobol85Parser.RULE_onSizeErrorPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5719;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5722;
			this.match(Cobol85Parser.SIZE);
			this.state = 5723;
			this.match(Cobol85Parser.ERROR);
			this.state = 5727;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 897, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5724;
					this.statement();
					}
					}
				}
				this.state = 5729;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 897, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notOnSizeErrorPhrase(): NotOnSizeErrorPhraseContext {
		let _localctx: NotOnSizeErrorPhraseContext = new NotOnSizeErrorPhraseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1026, Cobol85Parser.RULE_notOnSizeErrorPhrase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5730;
			this.match(Cobol85Parser.NOT);
			this.state = 5732;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5731;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5734;
			this.match(Cobol85Parser.SIZE);
			this.state = 5735;
			this.match(Cobol85Parser.ERROR);
			this.state = 5739;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 899, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5736;
					this.statement();
					}
					}
				}
				this.state = 5741;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 899, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public onExceptionClause(): OnExceptionClauseContext {
		let _localctx: OnExceptionClauseContext = new OnExceptionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1028, Cobol85Parser.RULE_onExceptionClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5743;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5742;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5745;
			this.match(Cobol85Parser.EXCEPTION);
			this.state = 5749;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 901, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5746;
					this.statement();
					}
					}
				}
				this.state = 5751;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 901, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notOnExceptionClause(): NotOnExceptionClauseContext {
		let _localctx: NotOnExceptionClauseContext = new NotOnExceptionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1030, Cobol85Parser.RULE_notOnExceptionClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5752;
			this.match(Cobol85Parser.NOT);
			this.state = 5754;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ON) {
				{
				this.state = 5753;
				this.match(Cobol85Parser.ON);
				}
			}

			this.state = 5756;
			this.match(Cobol85Parser.EXCEPTION);
			this.state = 5760;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 903, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5757;
					this.statement();
					}
					}
				}
				this.state = 5762;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 903, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmeticExpression(): ArithmeticExpressionContext {
		let _localctx: ArithmeticExpressionContext = new ArithmeticExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1032, Cobol85Parser.RULE_arithmeticExpression);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5763;
			this.multDivs();
			this.state = 5767;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 904, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5764;
					this.plusMinus();
					}
					}
				}
				this.state = 5769;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 904, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plusMinus(): PlusMinusContext {
		let _localctx: PlusMinusContext = new PlusMinusContext(this._ctx, this.state);
		this.enterRule(_localctx, 1034, Cobol85Parser.RULE_plusMinus);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5770;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5771;
			this.multDivs();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multDivs(): MultDivsContext {
		let _localctx: MultDivsContext = new MultDivsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1036, Cobol85Parser.RULE_multDivs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5773;
			this.powers();
			this.state = 5777;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.ASTERISKCHAR || _la === Cobol85Parser.SLASHCHAR) {
				{
				{
				this.state = 5774;
				this.multDiv();
				}
				}
				this.state = 5779;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multDiv(): MultDivContext {
		let _localctx: MultDivContext = new MultDivContext(this._ctx, this.state);
		this.enterRule(_localctx, 1038, Cobol85Parser.RULE_multDiv);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5780;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.ASTERISKCHAR || _la === Cobol85Parser.SLASHCHAR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5781;
			this.powers();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public powers(): PowersContext {
		let _localctx: PowersContext = new PowersContext(this._ctx, this.state);
		this.enterRule(_localctx, 1040, Cobol85Parser.RULE_powers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5784;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR) {
				{
				this.state = 5783;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.MINUSCHAR || _la === Cobol85Parser.PLUSCHAR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5786;
			this.basis();
			this.state = 5790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.DOUBLEASTERISKCHAR) {
				{
				{
				this.state = 5787;
				this.power();
				}
				}
				this.state = 5792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public power(): PowerContext {
		let _localctx: PowerContext = new PowerContext(this._ctx, this.state);
		this.enterRule(_localctx, 1042, Cobol85Parser.RULE_power);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5793;
			this.match(Cobol85Parser.DOUBLEASTERISKCHAR);
			this.state = 5794;
			this.basis();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public basis(): BasisContext {
		let _localctx: BasisContext = new BasisContext(this._ctx, this.state);
		this.enterRule(_localctx, 1044, Cobol85Parser.RULE_basis);
		try {
			this.state = 5802;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 908, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5796;
				this.match(Cobol85Parser.LPARENCHAR);
				this.state = 5797;
				this.arithmeticExpression();
				this.state = 5798;
				this.match(Cobol85Parser.RPARENCHAR);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5800;
				this.identifier();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5801;
				this.literal();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition(): ConditionContext {
		let _localctx: ConditionContext = new ConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1046, Cobol85Parser.RULE_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5804;
			this.combinableCondition();
			this.state = 5808;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === Cobol85Parser.AND || _la === Cobol85Parser.OR) {
				{
				{
				this.state = 5805;
				this.andOrCondition();
				}
				}
				this.state = 5810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public andOrCondition(): AndOrConditionContext {
		let _localctx: AndOrConditionContext = new AndOrConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1048, Cobol85Parser.RULE_andOrCondition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5811;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.AND || _la === Cobol85Parser.OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5818;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 911, this._ctx) ) {
			case 1:
				{
				this.state = 5812;
				this.combinableCondition();
				}
				break;

			case 2:
				{
				this.state = 5814;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5813;
						this.abbreviation();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5816;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 910, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public combinableCondition(): CombinableConditionContext {
		let _localctx: CombinableConditionContext = new CombinableConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1050, Cobol85Parser.RULE_combinableCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NOT) {
				{
				this.state = 5820;
				this.match(Cobol85Parser.NOT);
				}
			}

			this.state = 5823;
			this.simpleCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleCondition(): SimpleConditionContext {
		let _localctx: SimpleConditionContext = new SimpleConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1052, Cobol85Parser.RULE_simpleCondition);
		try {
			this.state = 5832;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 913, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5825;
				this.match(Cobol85Parser.LPARENCHAR);
				this.state = 5826;
				this.condition();
				this.state = 5827;
				this.match(Cobol85Parser.RPARENCHAR);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5829;
				this.relationCondition();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5830;
				this.classCondition();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5831;
				this.conditionNameReference();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public classCondition(): ClassConditionContext {
		let _localctx: ClassConditionContext = new ClassConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1054, Cobol85Parser.RULE_classCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5834;
			this.identifier();
			this.state = 5836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 5835;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 5839;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NOT) {
				{
				this.state = 5838;
				this.match(Cobol85Parser.NOT);
				}
			}

			this.state = 5848;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NUMERIC:
				{
				this.state = 5841;
				this.match(Cobol85Parser.NUMERIC);
				}
				break;
			case Cobol85Parser.ALPHABETIC:
				{
				this.state = 5842;
				this.match(Cobol85Parser.ALPHABETIC);
				}
				break;
			case Cobol85Parser.ALPHABETIC_LOWER:
				{
				this.state = 5843;
				this.match(Cobol85Parser.ALPHABETIC_LOWER);
				}
				break;
			case Cobol85Parser.ALPHABETIC_UPPER:
				{
				this.state = 5844;
				this.match(Cobol85Parser.ALPHABETIC_UPPER);
				}
				break;
			case Cobol85Parser.DBCS:
				{
				this.state = 5845;
				this.match(Cobol85Parser.DBCS);
				}
				break;
			case Cobol85Parser.KANJI:
				{
				this.state = 5846;
				this.match(Cobol85Parser.KANJI);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				{
				this.state = 5847;
				this.className();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conditionNameReference(): ConditionNameReferenceContext {
		let _localctx: ConditionNameReferenceContext = new ConditionNameReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 1056, Cobol85Parser.RULE_conditionNameReference);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5850;
			this.conditionName();
			this.state = 5872;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 921, this._ctx) ) {
			case 1:
				{
				this.state = 5854;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 917, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5851;
						this.inData();
						}
						}
					}
					this.state = 5856;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 917, this._ctx);
				}
				this.state = 5858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IN || _la === Cobol85Parser.OF) {
					{
					this.state = 5857;
					this.inFile();
					}
				}

				this.state = 5863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === Cobol85Parser.LPARENCHAR) {
					{
					{
					this.state = 5860;
					this.conditionNameSubscriptReference();
					}
					}
					this.state = 5865;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				{
				this.state = 5869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === Cobol85Parser.IN || _la === Cobol85Parser.OF) {
					{
					{
					this.state = 5866;
					this.inMnemonic();
					}
					}
					this.state = 5871;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conditionNameSubscriptReference(): ConditionNameSubscriptReferenceContext {
		let _localctx: ConditionNameSubscriptReferenceContext = new ConditionNameSubscriptReferenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 1058, Cobol85Parser.RULE_conditionNameSubscriptReference);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5874;
			this.match(Cobol85Parser.LPARENCHAR);
			this.state = 5875;
			this.subscript();
			this.state = 5882;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
				{
				{
				this.state = 5877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.COMMACHAR) {
					{
					this.state = 5876;
					this.match(Cobol85Parser.COMMACHAR);
					}
				}

				this.state = 5879;
				this.subscript();
				}
				}
				this.state = 5884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5885;
			this.match(Cobol85Parser.RPARENCHAR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationCondition(): RelationConditionContext {
		let _localctx: RelationConditionContext = new RelationConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1060, Cobol85Parser.RULE_relationCondition);
		try {
			this.state = 5890;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 924, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5887;
				this.relationSignCondition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5888;
				this.relationArithmeticComparison();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5889;
				this.relationCombinedComparison();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationSignCondition(): RelationSignConditionContext {
		let _localctx: RelationSignConditionContext = new RelationSignConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1062, Cobol85Parser.RULE_relationSignCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5892;
			this.arithmeticExpression();
			this.state = 5894;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.IS) {
				{
				this.state = 5893;
				this.match(Cobol85Parser.IS);
				}
			}

			this.state = 5897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.NOT) {
				{
				this.state = 5896;
				this.match(Cobol85Parser.NOT);
				}
			}

			this.state = 5899;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.NEGATIVE || _la === Cobol85Parser.POSITIVE || _la === Cobol85Parser.ZERO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationArithmeticComparison(): RelationArithmeticComparisonContext {
		let _localctx: RelationArithmeticComparisonContext = new RelationArithmeticComparisonContext(this._ctx, this.state);
		this.enterRule(_localctx, 1064, Cobol85Parser.RULE_relationArithmeticComparison);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5901;
			this.arithmeticExpression();
			this.state = 5902;
			this.relationalOperator();
			this.state = 5903;
			this.arithmeticExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationCombinedComparison(): RelationCombinedComparisonContext {
		let _localctx: RelationCombinedComparisonContext = new RelationCombinedComparisonContext(this._ctx, this.state);
		this.enterRule(_localctx, 1066, Cobol85Parser.RULE_relationCombinedComparison);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5905;
			this.arithmeticExpression();
			this.state = 5906;
			this.relationalOperator();
			this.state = 5907;
			this.match(Cobol85Parser.LPARENCHAR);
			this.state = 5908;
			this.relationCombinedCondition();
			this.state = 5909;
			this.match(Cobol85Parser.RPARENCHAR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationCombinedCondition(): RelationCombinedConditionContext {
		let _localctx: RelationCombinedConditionContext = new RelationCombinedConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1068, Cobol85Parser.RULE_relationCombinedCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5911;
			this.arithmeticExpression();
			this.state = 5914;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5912;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.AND || _la === Cobol85Parser.OR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5913;
				this.arithmeticExpression();
				}
				}
				this.state = 5916;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === Cobol85Parser.AND || _la === Cobol85Parser.OR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationalOperator(): RelationalOperatorContext {
		let _localctx: RelationalOperatorContext = new RelationalOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 1070, Cobol85Parser.RULE_relationalOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5919;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS) {
				{
				this.state = 5918;
				_la = this._input.LA(1);
				if (!(_la === Cobol85Parser.ARE || _la === Cobol85Parser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5962;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 938, this._ctx) ) {
			case 1:
				{
				this.state = 5922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.NOT) {
					{
					this.state = 5921;
					this.match(Cobol85Parser.NOT);
					}
				}

				this.state = 5939;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case Cobol85Parser.GREATER:
					{
					this.state = 5924;
					this.match(Cobol85Parser.GREATER);
					this.state = 5926;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.THAN) {
						{
						this.state = 5925;
						this.match(Cobol85Parser.THAN);
						}
					}

					}
					break;
				case Cobol85Parser.MORETHANCHAR:
					{
					this.state = 5928;
					this.match(Cobol85Parser.MORETHANCHAR);
					}
					break;
				case Cobol85Parser.LESS:
					{
					this.state = 5929;
					this.match(Cobol85Parser.LESS);
					this.state = 5931;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.THAN) {
						{
						this.state = 5930;
						this.match(Cobol85Parser.THAN);
						}
					}

					}
					break;
				case Cobol85Parser.LESSTHANCHAR:
					{
					this.state = 5933;
					this.match(Cobol85Parser.LESSTHANCHAR);
					}
					break;
				case Cobol85Parser.EQUAL:
					{
					this.state = 5934;
					this.match(Cobol85Parser.EQUAL);
					this.state = 5936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === Cobol85Parser.TO) {
						{
						this.state = 5935;
						this.match(Cobol85Parser.TO);
						}
					}

					}
					break;
				case Cobol85Parser.EQUALCHAR:
					{
					this.state = 5938;
					this.match(Cobol85Parser.EQUALCHAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 5941;
				this.match(Cobol85Parser.NOTEQUALCHAR);
				}
				break;

			case 3:
				{
				this.state = 5942;
				this.match(Cobol85Parser.GREATER);
				this.state = 5944;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.THAN) {
					{
					this.state = 5943;
					this.match(Cobol85Parser.THAN);
					}
				}

				this.state = 5946;
				this.match(Cobol85Parser.OR);
				this.state = 5947;
				this.match(Cobol85Parser.EQUAL);
				this.state = 5949;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.TO) {
					{
					this.state = 5948;
					this.match(Cobol85Parser.TO);
					}
				}

				}
				break;

			case 4:
				{
				this.state = 5951;
				this.match(Cobol85Parser.MORETHANOREQUAL);
				}
				break;

			case 5:
				{
				this.state = 5952;
				this.match(Cobol85Parser.LESS);
				this.state = 5954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.THAN) {
					{
					this.state = 5953;
					this.match(Cobol85Parser.THAN);
					}
				}

				this.state = 5956;
				this.match(Cobol85Parser.OR);
				this.state = 5957;
				this.match(Cobol85Parser.EQUAL);
				this.state = 5959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.TO) {
					{
					this.state = 5958;
					this.match(Cobol85Parser.TO);
					}
				}

				}
				break;

			case 6:
				{
				this.state = 5961;
				this.match(Cobol85Parser.LESSTHANOREQUAL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public abbreviation(): AbbreviationContext {
		let _localctx: AbbreviationContext = new AbbreviationContext(this._ctx, this.state);
		this.enterRule(_localctx, 1072, Cobol85Parser.RULE_abbreviation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5965;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 939, this._ctx) ) {
			case 1:
				{
				this.state = 5964;
				this.match(Cobol85Parser.NOT);
				}
				break;
			}
			this.state = 5968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === Cobol85Parser.ARE || _la === Cobol85Parser.EQUAL || _la === Cobol85Parser.GREATER || _la === Cobol85Parser.IS || _la === Cobol85Parser.LESS || _la === Cobol85Parser.NOT || ((((_la - 536)) & ~0x1F) === 0 && ((1 << (_la - 536)) & ((1 << (Cobol85Parser.EQUALCHAR - 536)) | (1 << (Cobol85Parser.LESSTHANCHAR - 536)) | (1 << (Cobol85Parser.LESSTHANOREQUAL - 536)) | (1 << (Cobol85Parser.MORETHANCHAR - 536)) | (1 << (Cobol85Parser.MORETHANOREQUAL - 536)) | (1 << (Cobol85Parser.NOTEQUALCHAR - 536)))) !== 0)) {
				{
				this.state = 5967;
				this.relationalOperator();
				}
			}

			this.state = 5976;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 941, this._ctx) ) {
			case 1:
				{
				this.state = 5970;
				this.arithmeticExpression();
				}
				break;

			case 2:
				{
				this.state = 5971;
				this.match(Cobol85Parser.LPARENCHAR);
				this.state = 5972;
				this.arithmeticExpression();
				this.state = 5973;
				this.abbreviation();
				this.state = 5974;
				this.match(Cobol85Parser.RPARENCHAR);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1074, Cobol85Parser.RULE_identifier);
		try {
			this.state = 5982;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 942, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5978;
				this.qualifiedDataName();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5979;
				this.tableCall();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5980;
				this.functionCall();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5981;
				this.specialRegister();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableCall(): TableCallContext {
		let _localctx: TableCallContext = new TableCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 1076, Cobol85Parser.RULE_tableCall);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5984;
			this.qualifiedDataName();
			this.state = 6000;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 945, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5985;
					this.match(Cobol85Parser.LPARENCHAR);
					this.state = 5986;
					this.subscript();
					this.state = 5993;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
						{
						{
						this.state = 5988;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === Cobol85Parser.COMMACHAR) {
							{
							this.state = 5987;
							this.match(Cobol85Parser.COMMACHAR);
							}
						}

						this.state = 5990;
						this.subscript();
						}
						}
						this.state = 5995;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5996;
					this.match(Cobol85Parser.RPARENCHAR);
					}
					}
				}
				this.state = 6002;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 945, this._ctx);
			}
			this.state = 6004;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 946, this._ctx) ) {
			case 1:
				{
				this.state = 6003;
				this.referenceModifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let _localctx: FunctionCallContext = new FunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 1078, Cobol85Parser.RULE_functionCall);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6006;
			this.match(Cobol85Parser.FUNCTION);
			this.state = 6007;
			this.functionName();
			this.state = 6023;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 949, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6008;
					this.match(Cobol85Parser.LPARENCHAR);
					this.state = 6009;
					this.argument();
					this.state = 6016;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)) | (1 << (Cobol85Parser.COMMACHAR - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
						{
						{
						this.state = 6011;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === Cobol85Parser.COMMACHAR) {
							{
							this.state = 6010;
							this.match(Cobol85Parser.COMMACHAR);
							}
						}

						this.state = 6013;
						this.argument();
						}
						}
						this.state = 6018;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6019;
					this.match(Cobol85Parser.RPARENCHAR);
					}
					}
				}
				this.state = 6025;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 949, this._ctx);
			}
			this.state = 6027;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 950, this._ctx) ) {
			case 1:
				{
				this.state = 6026;
				this.referenceModifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceModifier(): ReferenceModifierContext {
		let _localctx: ReferenceModifierContext = new ReferenceModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1080, Cobol85Parser.RULE_referenceModifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6029;
			this.match(Cobol85Parser.LPARENCHAR);
			this.state = 6030;
			this.characterPosition();
			this.state = 6031;
			this.match(Cobol85Parser.COLONCHAR);
			this.state = 6033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DATE - 100)) | (1 << (Cobol85Parser.DAY - 100)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 100)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 100)) | (1 << (Cobol85Parser.DEBUG_ITEM - 100)) | (1 << (Cobol85Parser.DEBUG_LINE - 100)) | (1 << (Cobol85Parser.DEBUG_NAME - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 100)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)) | (1 << (Cobol85Parser.FALSE - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTION - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.HIGH_VALUE - 213)) | (1 << (Cobol85Parser.HIGH_VALUES - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 250)) | (1 << (Cobol85Parser.LINE_COUNTER - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.LOW_VALUE - 283)) | (1 << (Cobol85Parser.LOW_VALUES - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)) | (1 << (Cobol85Parser.NULL - 283)) | (1 << (Cobol85Parser.NULLS - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PAGE_COUNTER - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.QUOTE - 352)) | (1 << (Cobol85Parser.QUOTES - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.RETURN_CODE - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHIFT_IN - 431)) | (1 << (Cobol85Parser.SHIFT_OUT - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)) | (1 << (Cobol85Parser.SORT_CONTROL - 431)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_MESSAGE - 431)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 431)) | (1 << (Cobol85Parser.SORT_RETURN - 431)) | (1 << (Cobol85Parser.SPACE - 431)) | (1 << (Cobol85Parser.SPACES - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TALLY - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIME - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUE - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.WHEN_COMPILED - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)) | (1 << (Cobol85Parser.ZEROS - 498)) | (1 << (Cobol85Parser.ZEROES - 498)))) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & ((1 << (Cobol85Parser.LPARENCHAR - 542)) | (1 << (Cobol85Parser.MINUSCHAR - 542)) | (1 << (Cobol85Parser.PLUSCHAR - 542)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 542)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 542)) | (1 << (Cobol85Parser.INTEGERLITERAL - 542)) | (1 << (Cobol85Parser.NUMERICLITERAL - 542)) | (1 << (Cobol85Parser.IDENTIFIER - 542)))) !== 0)) {
				{
				this.state = 6032;
				this.length();
				}
			}

			this.state = 6035;
			this.match(Cobol85Parser.RPARENCHAR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public characterPosition(): CharacterPositionContext {
		let _localctx: CharacterPositionContext = new CharacterPositionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1082, Cobol85Parser.RULE_characterPosition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6037;
			this.arithmeticExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public length(): LengthContext {
		let _localctx: LengthContext = new LengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 1084, Cobol85Parser.RULE_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6039;
			this.arithmeticExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subscript(): SubscriptContext {
		let _localctx: SubscriptContext = new SubscriptContext(this._ctx, this.state);
		this.enterRule(_localctx, 1086, Cobol85Parser.RULE_subscript);
		try {
			this.state = 6052;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 954, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6041;
				this.match(Cobol85Parser.ALL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6042;
				this.integerLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6043;
				this.qualifiedDataName();
				this.state = 6045;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 952, this._ctx) ) {
				case 1:
					{
					this.state = 6044;
					this.integerLiteral();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6047;
				this.indexName();
				this.state = 6049;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 953, this._ctx) ) {
				case 1:
					{
					this.state = 6048;
					this.integerLiteral();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6051;
				this.arithmeticExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public argument(): ArgumentContext {
		let _localctx: ArgumentContext = new ArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 1088, Cobol85Parser.RULE_argument);
		try {
			this.state = 6065;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 957, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6054;
				this.literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6055;
				this.identifier();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6056;
				this.qualifiedDataName();
				this.state = 6058;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 955, this._ctx) ) {
				case 1:
					{
					this.state = 6057;
					this.integerLiteral();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6060;
				this.indexName();
				this.state = 6062;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 956, this._ctx) ) {
				case 1:
					{
					this.state = 6061;
					this.integerLiteral();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6064;
				this.arithmeticExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedDataName(): QualifiedDataNameContext {
		let _localctx: QualifiedDataNameContext = new QualifiedDataNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1090, Cobol85Parser.RULE_qualifiedDataName);
		try {
			this.state = 6071;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 958, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6067;
				this.qualifiedDataNameFormat1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6068;
				this.qualifiedDataNameFormat2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6069;
				this.qualifiedDataNameFormat3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6070;
				this.qualifiedDataNameFormat4();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedDataNameFormat1(): QualifiedDataNameFormat1Context {
		let _localctx: QualifiedDataNameFormat1Context = new QualifiedDataNameFormat1Context(this._ctx, this.state);
		this.enterRule(_localctx, 1092, Cobol85Parser.RULE_qualifiedDataNameFormat1);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6075;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 959, this._ctx) ) {
			case 1:
				{
				this.state = 6073;
				this.dataName();
				}
				break;

			case 2:
				{
				this.state = 6074;
				this.conditionName();
				}
				break;
			}
			this.state = 6086;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 962, this._ctx) ) {
			case 1:
				{
				this.state = 6078;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6077;
						this.qualifiedInData();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6080;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 960, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 6083;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 961, this._ctx) ) {
				case 1:
					{
					this.state = 6082;
					this.inFile();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 6085;
				this.inFile();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedDataNameFormat2(): QualifiedDataNameFormat2Context {
		let _localctx: QualifiedDataNameFormat2Context = new QualifiedDataNameFormat2Context(this._ctx, this.state);
		this.enterRule(_localctx, 1094, Cobol85Parser.RULE_qualifiedDataNameFormat2);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6088;
			this.paragraphName();
			this.state = 6089;
			this.inSection();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedDataNameFormat3(): QualifiedDataNameFormat3Context {
		let _localctx: QualifiedDataNameFormat3Context = new QualifiedDataNameFormat3Context(this._ctx, this.state);
		this.enterRule(_localctx, 1096, Cobol85Parser.RULE_qualifiedDataNameFormat3);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6091;
			this.textName();
			this.state = 6092;
			this.inLibrary();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedDataNameFormat4(): QualifiedDataNameFormat4Context {
		let _localctx: QualifiedDataNameFormat4Context = new QualifiedDataNameFormat4Context(this._ctx, this.state);
		this.enterRule(_localctx, 1098, Cobol85Parser.RULE_qualifiedDataNameFormat4);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6094;
			this.match(Cobol85Parser.LINAGE_COUNTER);
			this.state = 6095;
			this.inFile();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedInData(): QualifiedInDataContext {
		let _localctx: QualifiedInDataContext = new QualifiedInDataContext(this._ctx, this.state);
		this.enterRule(_localctx, 1100, Cobol85Parser.RULE_qualifiedInData);
		try {
			this.state = 6099;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 963, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6097;
				this.inData();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6098;
				this.inTable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inData(): InDataContext {
		let _localctx: InDataContext = new InDataContext(this._ctx, this.state);
		this.enterRule(_localctx, 1102, Cobol85Parser.RULE_inData);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6101;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6102;
			this.dataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inFile(): InFileContext {
		let _localctx: InFileContext = new InFileContext(this._ctx, this.state);
		this.enterRule(_localctx, 1104, Cobol85Parser.RULE_inFile);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6104;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6105;
			this.fileName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inMnemonic(): InMnemonicContext {
		let _localctx: InMnemonicContext = new InMnemonicContext(this._ctx, this.state);
		this.enterRule(_localctx, 1106, Cobol85Parser.RULE_inMnemonic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6107;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6108;
			this.mnemonicName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inSection(): InSectionContext {
		let _localctx: InSectionContext = new InSectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1108, Cobol85Parser.RULE_inSection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6110;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6111;
			this.sectionName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inLibrary(): InLibraryContext {
		let _localctx: InLibraryContext = new InLibraryContext(this._ctx, this.state);
		this.enterRule(_localctx, 1110, Cobol85Parser.RULE_inLibrary);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6113;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6114;
			this.libraryName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inTable(): InTableContext {
		let _localctx: InTableContext = new InTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 1112, Cobol85Parser.RULE_inTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6116;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.IN || _la === Cobol85Parser.OF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6117;
			this.tableCall();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabetName(): AlphabetNameContext {
		let _localctx: AlphabetNameContext = new AlphabetNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1114, Cobol85Parser.RULE_alphabetName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6119;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignmentName(): AssignmentNameContext {
		let _localctx: AssignmentNameContext = new AssignmentNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1116, Cobol85Parser.RULE_assignmentName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6121;
			this.systemName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public basisName(): BasisNameContext {
		let _localctx: BasisNameContext = new BasisNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1118, Cobol85Parser.RULE_basisName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6123;
			this.programName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cdName(): CdNameContext {
		let _localctx: CdNameContext = new CdNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1120, Cobol85Parser.RULE_cdName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6125;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public className(): ClassNameContext {
		let _localctx: ClassNameContext = new ClassNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1122, Cobol85Parser.RULE_className);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6127;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computerName(): ComputerNameContext {
		let _localctx: ComputerNameContext = new ComputerNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1124, Cobol85Parser.RULE_computerName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6129;
			this.systemName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conditionName(): ConditionNameContext {
		let _localctx: ConditionNameContext = new ConditionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1126, Cobol85Parser.RULE_conditionName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6131;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataName(): DataNameContext {
		let _localctx: DataNameContext = new DataNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1128, Cobol85Parser.RULE_dataName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6133;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataDescName(): DataDescNameContext {
		let _localctx: DataDescNameContext = new DataDescNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1130, Cobol85Parser.RULE_dataDescName);
		try {
			this.state = 6138;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 964, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6135;
				this.match(Cobol85Parser.FILLER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6136;
				this.match(Cobol85Parser.CURSOR);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6137;
				this.dataName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environmentName(): EnvironmentNameContext {
		let _localctx: EnvironmentNameContext = new EnvironmentNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1132, Cobol85Parser.RULE_environmentName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6140;
			this.systemName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileName(): FileNameContext {
		let _localctx: FileNameContext = new FileNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1134, Cobol85Parser.RULE_fileName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6142;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionName(): FunctionNameContext {
		let _localctx: FunctionNameContext = new FunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1136, Cobol85Parser.RULE_functionName);
		try {
			this.state = 6150;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 965, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6144;
				this.match(Cobol85Parser.INTEGER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6145;
				this.match(Cobol85Parser.LENGTH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6146;
				this.match(Cobol85Parser.RANDOM);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6147;
				this.match(Cobol85Parser.SUM);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6148;
				this.match(Cobol85Parser.WHEN_COMPILED);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6149;
				this.cobolWord();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexName(): IndexNameContext {
		let _localctx: IndexNameContext = new IndexNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1138, Cobol85Parser.RULE_indexName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6152;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public languageName(): LanguageNameContext {
		let _localctx: LanguageNameContext = new LanguageNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1140, Cobol85Parser.RULE_languageName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6154;
			this.systemName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public libraryName(): LibraryNameContext {
		let _localctx: LibraryNameContext = new LibraryNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1142, Cobol85Parser.RULE_libraryName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6156;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public localName(): LocalNameContext {
		let _localctx: LocalNameContext = new LocalNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1144, Cobol85Parser.RULE_localName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6158;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mnemonicName(): MnemonicNameContext {
		let _localctx: MnemonicNameContext = new MnemonicNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1146, Cobol85Parser.RULE_mnemonicName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6160;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraphName(): ParagraphNameContext {
		let _localctx: ParagraphNameContext = new ParagraphNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1148, Cobol85Parser.RULE_paragraphName);
		try {
			this.state = 6164;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6162;
				this.cobolWord();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6163;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureName(): ProcedureNameContext {
		let _localctx: ProcedureNameContext = new ProcedureNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1150, Cobol85Parser.RULE_procedureName);
		let _la: number;
		try {
			this.state = 6171;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 968, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6166;
				this.paragraphName();
				this.state = 6168;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.IN || _la === Cobol85Parser.OF) {
					{
					this.state = 6167;
					this.inSection();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6170;
				this.sectionName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public programName(): ProgramNameContext {
		let _localctx: ProgramNameContext = new ProgramNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1152, Cobol85Parser.RULE_programName);
		try {
			this.state = 6175;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NONNUMERICLITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6173;
				this.match(Cobol85Parser.NONNUMERICLITERAL);
				}
				break;
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6174;
				this.cobolWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public recordName(): RecordNameContext {
		let _localctx: RecordNameContext = new RecordNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1154, Cobol85Parser.RULE_recordName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6177;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reportName(): ReportNameContext {
		let _localctx: ReportNameContext = new ReportNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1156, Cobol85Parser.RULE_reportName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6179;
			this.qualifiedDataName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineName(): RoutineNameContext {
		let _localctx: RoutineNameContext = new RoutineNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1158, Cobol85Parser.RULE_routineName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6181;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screenName(): ScreenNameContext {
		let _localctx: ScreenNameContext = new ScreenNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1160, Cobol85Parser.RULE_screenName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6183;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sectionName(): SectionNameContext {
		let _localctx: SectionNameContext = new SectionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1162, Cobol85Parser.RULE_sectionName);
		try {
			this.state = 6187;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ABORT:
			case Cobol85Parser.AS:
			case Cobol85Parser.ASCII:
			case Cobol85Parser.ASSOCIATED_DATA:
			case Cobol85Parser.ASSOCIATED_DATA_LENGTH:
			case Cobol85Parser.ATTRIBUTE:
			case Cobol85Parser.AUTO:
			case Cobol85Parser.AUTO_SKIP:
			case Cobol85Parser.BACKGROUND_COLOR:
			case Cobol85Parser.BACKGROUND_COLOUR:
			case Cobol85Parser.BEEP:
			case Cobol85Parser.BELL:
			case Cobol85Parser.BINARY:
			case Cobol85Parser.BIT:
			case Cobol85Parser.BLINK:
			case Cobol85Parser.BOUNDS:
			case Cobol85Parser.CAPABLE:
			case Cobol85Parser.CCSVERSION:
			case Cobol85Parser.CHANGED:
			case Cobol85Parser.CHANNEL:
			case Cobol85Parser.CLOSE_DISPOSITION:
			case Cobol85Parser.COBOL:
			case Cobol85Parser.COMMITMENT:
			case Cobol85Parser.CONTROL_POINT:
			case Cobol85Parser.CONVENTION:
			case Cobol85Parser.CRUNCH:
			case Cobol85Parser.CURSOR:
			case Cobol85Parser.DEFAULT:
			case Cobol85Parser.DEFAULT_DISPLAY:
			case Cobol85Parser.DEFINITION:
			case Cobol85Parser.DFHRESP:
			case Cobol85Parser.DFHVALUE:
			case Cobol85Parser.DISK:
			case Cobol85Parser.DONTCARE:
			case Cobol85Parser.DOUBLE:
			case Cobol85Parser.EBCDIC:
			case Cobol85Parser.EMPTY_CHECK:
			case Cobol85Parser.ENTER:
			case Cobol85Parser.ENTRY_PROCEDURE:
			case Cobol85Parser.ERASE:
			case Cobol85Parser.EOL:
			case Cobol85Parser.EOS:
			case Cobol85Parser.ESCAPE:
			case Cobol85Parser.EVENT:
			case Cobol85Parser.EXCLUSIVE:
			case Cobol85Parser.EXPORT:
			case Cobol85Parser.EXTENDED:
			case Cobol85Parser.FOREGROUND_COLOR:
			case Cobol85Parser.FOREGROUND_COLOUR:
			case Cobol85Parser.FULL:
			case Cobol85Parser.FUNCTIONNAME:
			case Cobol85Parser.FUNCTION_POINTER:
			case Cobol85Parser.GRID:
			case Cobol85Parser.HIGHLIGHT:
			case Cobol85Parser.IMPLICIT:
			case Cobol85Parser.IMPORT:
			case Cobol85Parser.INTEGER:
			case Cobol85Parser.KEPT:
			case Cobol85Parser.KEYBOARD:
			case Cobol85Parser.LANGUAGE:
			case Cobol85Parser.LB:
			case Cobol85Parser.LD:
			case Cobol85Parser.LEFTLINE:
			case Cobol85Parser.LENGTH_CHECK:
			case Cobol85Parser.LIBACCESS:
			case Cobol85Parser.LIBPARAMETER:
			case Cobol85Parser.LIBRARY:
			case Cobol85Parser.LIST:
			case Cobol85Parser.LOCAL:
			case Cobol85Parser.LONG_DATE:
			case Cobol85Parser.LONG_TIME:
			case Cobol85Parser.LOWER:
			case Cobol85Parser.LOWLIGHT:
			case Cobol85Parser.MMDDYYYY:
			case Cobol85Parser.NAMED:
			case Cobol85Parser.NATIONAL:
			case Cobol85Parser.NATIONAL_EDITED:
			case Cobol85Parser.NETWORK:
			case Cobol85Parser.NO_ECHO:
			case Cobol85Parser.NUMERIC_DATE:
			case Cobol85Parser.NUMERIC_TIME:
			case Cobol85Parser.ODT:
			case Cobol85Parser.ORDERLY:
			case Cobol85Parser.OVERLINE:
			case Cobol85Parser.OWN:
			case Cobol85Parser.PASSWORD:
			case Cobol85Parser.PORT:
			case Cobol85Parser.PRINTER:
			case Cobol85Parser.PRIVATE:
			case Cobol85Parser.PROCESS:
			case Cobol85Parser.PROGRAM:
			case Cobol85Parser.PROMPT:
			case Cobol85Parser.READER:
			case Cobol85Parser.REMOTE:
			case Cobol85Parser.REAL:
			case Cobol85Parser.RECEIVED:
			case Cobol85Parser.RECURSIVE:
			case Cobol85Parser.REF:
			case Cobol85Parser.REMOVE:
			case Cobol85Parser.REQUIRED:
			case Cobol85Parser.REVERSE_VIDEO:
			case Cobol85Parser.SAVE:
			case Cobol85Parser.SECURE:
			case Cobol85Parser.SHARED:
			case Cobol85Parser.SHAREDBYALL:
			case Cobol85Parser.SHAREDBYRUNUNIT:
			case Cobol85Parser.SHARING:
			case Cobol85Parser.SHORT_DATE:
			case Cobol85Parser.SYMBOL:
			case Cobol85Parser.TASK:
			case Cobol85Parser.THREAD:
			case Cobol85Parser.THREAD_LOCAL:
			case Cobol85Parser.TIMER:
			case Cobol85Parser.TODAYS_DATE:
			case Cobol85Parser.TODAYS_NAME:
			case Cobol85Parser.TRUNCATED:
			case Cobol85Parser.TYPEDEF:
			case Cobol85Parser.UNDERLINE:
			case Cobol85Parser.VIRTUAL:
			case Cobol85Parser.WAIT:
			case Cobol85Parser.YEAR:
			case Cobol85Parser.YYYYMMDD:
			case Cobol85Parser.YYYYDDD:
			case Cobol85Parser.ZERO_FILL:
			case Cobol85Parser.IDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6185;
				this.cobolWord();
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6186;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public systemName(): SystemNameContext {
		let _localctx: SystemNameContext = new SystemNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1164, Cobol85Parser.RULE_systemName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6189;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicCharacter(): SymbolicCharacterContext {
		let _localctx: SymbolicCharacterContext = new SymbolicCharacterContext(this._ctx, this.state);
		this.enterRule(_localctx, 1166, Cobol85Parser.RULE_symbolicCharacter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6191;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public textName(): TextNameContext {
		let _localctx: TextNameContext = new TextNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1168, Cobol85Parser.RULE_textName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6193;
			this.cobolWord();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cobolWord(): CobolWordContext {
		let _localctx: CobolWordContext = new CobolWordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1170, Cobol85Parser.RULE_cobolWord);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6195;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BINARY - 33)) | (1 << (Cobol85Parser.BIT - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.BOUNDS - 33)) | (1 << (Cobol85Parser.CAPABLE - 33)) | (1 << (Cobol85Parser.CCSVERSION - 33)) | (1 << (Cobol85Parser.CHANGED - 33)) | (1 << (Cobol85Parser.CHANNEL - 33)))) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & ((1 << (Cobol85Parser.CLOSE_DISPOSITION - 68)) | (1 << (Cobol85Parser.COBOL - 68)) | (1 << (Cobol85Parser.COMMITMENT - 68)) | (1 << (Cobol85Parser.CONTROL_POINT - 68)))) !== 0) || ((((_la - 100)) & ~0x1F) === 0 && ((1 << (_la - 100)) & ((1 << (Cobol85Parser.CONVENTION - 100)) | (1 << (Cobol85Parser.CRUNCH - 100)) | (1 << (Cobol85Parser.CURSOR - 100)) | (1 << (Cobol85Parser.DEFAULT - 100)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 100)) | (1 << (Cobol85Parser.DEFINITION - 100)))) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (Cobol85Parser.DFHRESP - 138)) | (1 << (Cobol85Parser.DFHVALUE - 138)) | (1 << (Cobol85Parser.DISK - 138)) | (1 << (Cobol85Parser.DONTCARE - 138)) | (1 << (Cobol85Parser.DOUBLE - 138)) | (1 << (Cobol85Parser.EBCDIC - 138)) | (1 << (Cobol85Parser.EMPTY_CHECK - 138)))) !== 0) || ((((_la - 181)) & ~0x1F) === 0 && ((1 << (_la - 181)) & ((1 << (Cobol85Parser.ENTER - 181)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 181)) | (1 << (Cobol85Parser.ERASE - 181)) | (1 << (Cobol85Parser.EOL - 181)) | (1 << (Cobol85Parser.EOS - 181)) | (1 << (Cobol85Parser.ESCAPE - 181)) | (1 << (Cobol85Parser.EVENT - 181)) | (1 << (Cobol85Parser.EXCLUSIVE - 181)) | (1 << (Cobol85Parser.EXPORT - 181)) | (1 << (Cobol85Parser.EXTENDED - 181)))) !== 0) || ((((_la - 213)) & ~0x1F) === 0 && ((1 << (_la - 213)) & ((1 << (Cobol85Parser.FOREGROUND_COLOR - 213)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 213)) | (1 << (Cobol85Parser.FULL - 213)) | (1 << (Cobol85Parser.FUNCTIONNAME - 213)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 213)) | (1 << (Cobol85Parser.GRID - 213)) | (1 << (Cobol85Parser.HIGHLIGHT - 213)) | (1 << (Cobol85Parser.IMPLICIT - 213)) | (1 << (Cobol85Parser.IMPORT - 213)))) !== 0) || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & ((1 << (Cobol85Parser.INTEGER - 250)) | (1 << (Cobol85Parser.KEPT - 250)) | (1 << (Cobol85Parser.KEYBOARD - 250)) | (1 << (Cobol85Parser.LANGUAGE - 250)) | (1 << (Cobol85Parser.LB - 250)) | (1 << (Cobol85Parser.LD - 250)) | (1 << (Cobol85Parser.LEFTLINE - 250)) | (1 << (Cobol85Parser.LENGTH_CHECK - 250)) | (1 << (Cobol85Parser.LIBACCESS - 250)) | (1 << (Cobol85Parser.LIBPARAMETER - 250)) | (1 << (Cobol85Parser.LIBRARY - 250)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LIST - 283)) | (1 << (Cobol85Parser.LOCAL - 283)) | (1 << (Cobol85Parser.LONG_DATE - 283)) | (1 << (Cobol85Parser.LONG_TIME - 283)) | (1 << (Cobol85Parser.LOWER - 283)) | (1 << (Cobol85Parser.LOWLIGHT - 283)) | (1 << (Cobol85Parser.MMDDYYYY - 283)) | (1 << (Cobol85Parser.NAMED - 283)) | (1 << (Cobol85Parser.NATIONAL - 283)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 283)) | (1 << (Cobol85Parser.NETWORK - 283)) | (1 << (Cobol85Parser.NO_ECHO - 283)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (Cobol85Parser.NUMERIC_DATE - 317)) | (1 << (Cobol85Parser.NUMERIC_TIME - 317)) | (1 << (Cobol85Parser.ODT - 317)) | (1 << (Cobol85Parser.ORDERLY - 317)) | (1 << (Cobol85Parser.OVERLINE - 317)) | (1 << (Cobol85Parser.OWN - 317)) | (1 << (Cobol85Parser.PASSWORD - 317)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (Cobol85Parser.PORT - 352)) | (1 << (Cobol85Parser.PRINTER - 352)) | (1 << (Cobol85Parser.PRIVATE - 352)) | (1 << (Cobol85Parser.PROCESS - 352)) | (1 << (Cobol85Parser.PROGRAM - 352)) | (1 << (Cobol85Parser.PROMPT - 352)) | (1 << (Cobol85Parser.READER - 352)) | (1 << (Cobol85Parser.REMOTE - 352)) | (1 << (Cobol85Parser.REAL - 352)) | (1 << (Cobol85Parser.RECEIVED - 352)) | (1 << (Cobol85Parser.RECURSIVE - 352)) | (1 << (Cobol85Parser.REF - 352)))) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (Cobol85Parser.REMOVE - 391)) | (1 << (Cobol85Parser.REQUIRED - 391)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 391)) | (1 << (Cobol85Parser.SAVE - 391)) | (1 << (Cobol85Parser.SECURE - 391)))) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & ((1 << (Cobol85Parser.SHARED - 431)) | (1 << (Cobol85Parser.SHAREDBYALL - 431)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 431)) | (1 << (Cobol85Parser.SHARING - 431)) | (1 << (Cobol85Parser.SHORT_DATE - 431)))) !== 0) || ((((_la - 466)) & ~0x1F) === 0 && ((1 << (_la - 466)) & ((1 << (Cobol85Parser.SYMBOL - 466)) | (1 << (Cobol85Parser.TASK - 466)) | (1 << (Cobol85Parser.THREAD - 466)) | (1 << (Cobol85Parser.THREAD_LOCAL - 466)) | (1 << (Cobol85Parser.TIMER - 466)) | (1 << (Cobol85Parser.TODAYS_DATE - 466)) | (1 << (Cobol85Parser.TODAYS_NAME - 466)) | (1 << (Cobol85Parser.TRUNCATED - 466)) | (1 << (Cobol85Parser.TYPEDEF - 466)))) !== 0) || ((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & ((1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.VIRTUAL - 498)) | (1 << (Cobol85Parser.WAIT - 498)) | (1 << (Cobol85Parser.YEAR - 498)) | (1 << (Cobol85Parser.YYYYMMDD - 498)) | (1 << (Cobol85Parser.YYYYDDD - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) !== 0) || _la === Cobol85Parser.IDENTIFIER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal(): LiteralContext {
		let _localctx: LiteralContext = new LiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1172, Cobol85Parser.RULE_literal);
		try {
			this.state = 6203;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 971, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6197;
				this.match(Cobol85Parser.NONNUMERICLITERAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6198;
				this.figurativeConstant();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6199;
				this.numericLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6200;
				this.booleanLiteral();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6201;
				this.cicsDfhRespLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6202;
				this.cicsDfhValueLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanLiteral(): BooleanLiteralContext {
		let _localctx: BooleanLiteralContext = new BooleanLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1174, Cobol85Parser.RULE_booleanLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6205;
			_la = this._input.LA(1);
			if (!(_la === Cobol85Parser.FALSE || _la === Cobol85Parser.TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numericLiteral(): NumericLiteralContext {
		let _localctx: NumericLiteralContext = new NumericLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1176, Cobol85Parser.RULE_numericLiteral);
		try {
			this.state = 6210;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.NUMERICLITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6207;
				this.match(Cobol85Parser.NUMERICLITERAL);
				}
				break;
			case Cobol85Parser.ZERO:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6208;
				this.match(Cobol85Parser.ZERO);
				}
				break;
			case Cobol85Parser.LEVEL_NUMBER_66:
			case Cobol85Parser.LEVEL_NUMBER_77:
			case Cobol85Parser.LEVEL_NUMBER_88:
			case Cobol85Parser.INTEGERLITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6209;
				this.integerLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public integerLiteral(): IntegerLiteralContext {
		let _localctx: IntegerLiteralContext = new IntegerLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1178, Cobol85Parser.RULE_integerLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6212;
			_la = this._input.LA(1);
			if (!(((((_la - 552)) & ~0x1F) === 0 && ((1 << (_la - 552)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 552)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 552)) | (1 << (Cobol85Parser.INTEGERLITERAL - 552)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cicsDfhRespLiteral(): CicsDfhRespLiteralContext {
		let _localctx: CicsDfhRespLiteralContext = new CicsDfhRespLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1180, Cobol85Parser.RULE_cicsDfhRespLiteral);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6214;
			this.match(Cobol85Parser.DFHRESP);
			this.state = 6215;
			this.match(Cobol85Parser.LPARENCHAR);
			this.state = 6218;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 973, this._ctx) ) {
			case 1:
				{
				this.state = 6216;
				this.cobolWord();
				}
				break;

			case 2:
				{
				this.state = 6217;
				this.literal();
				}
				break;
			}
			this.state = 6220;
			this.match(Cobol85Parser.RPARENCHAR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cicsDfhValueLiteral(): CicsDfhValueLiteralContext {
		let _localctx: CicsDfhValueLiteralContext = new CicsDfhValueLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 1182, Cobol85Parser.RULE_cicsDfhValueLiteral);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6222;
			this.match(Cobol85Parser.DFHVALUE);
			this.state = 6223;
			this.match(Cobol85Parser.LPARENCHAR);
			this.state = 6226;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 974, this._ctx) ) {
			case 1:
				{
				this.state = 6224;
				this.cobolWord();
				}
				break;

			case 2:
				{
				this.state = 6225;
				this.literal();
				}
				break;
			}
			this.state = 6228;
			this.match(Cobol85Parser.RPARENCHAR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurativeConstant(): FigurativeConstantContext {
		let _localctx: FigurativeConstantContext = new FigurativeConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 1184, Cobol85Parser.RULE_figurativeConstant);
		try {
			this.state = 6245;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6230;
				this.match(Cobol85Parser.ALL);
				this.state = 6231;
				this.literal();
				}
				break;
			case Cobol85Parser.HIGH_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6232;
				this.match(Cobol85Parser.HIGH_VALUE);
				}
				break;
			case Cobol85Parser.HIGH_VALUES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6233;
				this.match(Cobol85Parser.HIGH_VALUES);
				}
				break;
			case Cobol85Parser.LOW_VALUE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6234;
				this.match(Cobol85Parser.LOW_VALUE);
				}
				break;
			case Cobol85Parser.LOW_VALUES:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6235;
				this.match(Cobol85Parser.LOW_VALUES);
				}
				break;
			case Cobol85Parser.NULL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6236;
				this.match(Cobol85Parser.NULL);
				}
				break;
			case Cobol85Parser.NULLS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6237;
				this.match(Cobol85Parser.NULLS);
				}
				break;
			case Cobol85Parser.QUOTE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6238;
				this.match(Cobol85Parser.QUOTE);
				}
				break;
			case Cobol85Parser.QUOTES:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6239;
				this.match(Cobol85Parser.QUOTES);
				}
				break;
			case Cobol85Parser.SPACE:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6240;
				this.match(Cobol85Parser.SPACE);
				}
				break;
			case Cobol85Parser.SPACES:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6241;
				this.match(Cobol85Parser.SPACES);
				}
				break;
			case Cobol85Parser.ZERO:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6242;
				this.match(Cobol85Parser.ZERO);
				}
				break;
			case Cobol85Parser.ZEROS:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6243;
				this.match(Cobol85Parser.ZEROS);
				}
				break;
			case Cobol85Parser.ZEROES:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6244;
				this.match(Cobol85Parser.ZEROES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specialRegister(): SpecialRegisterContext {
		let _localctx: SpecialRegisterContext = new SpecialRegisterContext(this._ctx, this.state);
		this.enterRule(_localctx, 1186, Cobol85Parser.RULE_specialRegister);
		let _la: number;
		try {
			this.state = 6280;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case Cobol85Parser.ADDRESS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6247;
				this.match(Cobol85Parser.ADDRESS);
				this.state = 6248;
				this.match(Cobol85Parser.OF);
				this.state = 6249;
				this.identifier();
				}
				break;
			case Cobol85Parser.DATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6250;
				this.match(Cobol85Parser.DATE);
				}
				break;
			case Cobol85Parser.DAY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6251;
				this.match(Cobol85Parser.DAY);
				}
				break;
			case Cobol85Parser.DAY_OF_WEEK:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6252;
				this.match(Cobol85Parser.DAY_OF_WEEK);
				}
				break;
			case Cobol85Parser.DEBUG_CONTENTS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6253;
				this.match(Cobol85Parser.DEBUG_CONTENTS);
				}
				break;
			case Cobol85Parser.DEBUG_ITEM:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6254;
				this.match(Cobol85Parser.DEBUG_ITEM);
				}
				break;
			case Cobol85Parser.DEBUG_LINE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6255;
				this.match(Cobol85Parser.DEBUG_LINE);
				}
				break;
			case Cobol85Parser.DEBUG_NAME:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6256;
				this.match(Cobol85Parser.DEBUG_NAME);
				}
				break;
			case Cobol85Parser.DEBUG_SUB_1:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6257;
				this.match(Cobol85Parser.DEBUG_SUB_1);
				}
				break;
			case Cobol85Parser.DEBUG_SUB_2:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6258;
				this.match(Cobol85Parser.DEBUG_SUB_2);
				}
				break;
			case Cobol85Parser.DEBUG_SUB_3:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6259;
				this.match(Cobol85Parser.DEBUG_SUB_3);
				}
				break;
			case Cobol85Parser.LENGTH:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6260;
				this.match(Cobol85Parser.LENGTH);
				this.state = 6262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === Cobol85Parser.OF) {
					{
					this.state = 6261;
					this.match(Cobol85Parser.OF);
					}
				}

				this.state = 6264;
				this.identifier();
				}
				break;
			case Cobol85Parser.LINAGE_COUNTER:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6265;
				this.match(Cobol85Parser.LINAGE_COUNTER);
				}
				break;
			case Cobol85Parser.LINE_COUNTER:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6266;
				this.match(Cobol85Parser.LINE_COUNTER);
				}
				break;
			case Cobol85Parser.PAGE_COUNTER:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6267;
				this.match(Cobol85Parser.PAGE_COUNTER);
				}
				break;
			case Cobol85Parser.RETURN_CODE:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6268;
				this.match(Cobol85Parser.RETURN_CODE);
				}
				break;
			case Cobol85Parser.SHIFT_IN:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6269;
				this.match(Cobol85Parser.SHIFT_IN);
				}
				break;
			case Cobol85Parser.SHIFT_OUT:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6270;
				this.match(Cobol85Parser.SHIFT_OUT);
				}
				break;
			case Cobol85Parser.SORT_CONTROL:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6271;
				this.match(Cobol85Parser.SORT_CONTROL);
				}
				break;
			case Cobol85Parser.SORT_CORE_SIZE:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6272;
				this.match(Cobol85Parser.SORT_CORE_SIZE);
				}
				break;
			case Cobol85Parser.SORT_FILE_SIZE:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 6273;
				this.match(Cobol85Parser.SORT_FILE_SIZE);
				}
				break;
			case Cobol85Parser.SORT_MESSAGE:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 6274;
				this.match(Cobol85Parser.SORT_MESSAGE);
				}
				break;
			case Cobol85Parser.SORT_MODE_SIZE:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 6275;
				this.match(Cobol85Parser.SORT_MODE_SIZE);
				}
				break;
			case Cobol85Parser.SORT_RETURN:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 6276;
				this.match(Cobol85Parser.SORT_RETURN);
				}
				break;
			case Cobol85Parser.TALLY:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 6277;
				this.match(Cobol85Parser.TALLY);
				}
				break;
			case Cobol85Parser.TIME:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 6278;
				this.match(Cobol85Parser.TIME);
				}
				break;
			case Cobol85Parser.WHEN_COMPILED:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 6279;
				this.match(Cobol85Parser.WHEN_COMPILED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commentEntry(): CommentEntryContext {
		let _localctx: CommentEntryContext = new CommentEntryContext(this._ctx, this.state);
		this.enterRule(_localctx, 1188, Cobol85Parser.RULE_commentEntry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6283;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6282;
				this.match(Cobol85Parser.COMMENTENTRYLINE);
				}
				}
				this.state = 6285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === Cobol85Parser.COMMENTENTRYLINE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	private static readonly _serializedATNSegments: number = 12;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0237\u1892\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
		"\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
		"\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
		"\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
		"\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
		"\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
		"\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
		"\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
		"\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
		"\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
		"\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
		"\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
		"\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
		"\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
		"\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
		"\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
		"\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x04" +
		"\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2\x04" +
		"\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6\x04" +
		"\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA\x04" +
		"\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE\x04" +
		"\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2\x04" +
		"\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6\x04" +
		"\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA\x04" +
		"\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE\x04" +
		"\u01DF\t\u01DF\x04\u01E0\t\u01E0\x04\u01E1\t\u01E1\x04\u01E2\t\u01E2\x04" +
		"\u01E3\t\u01E3\x04\u01E4\t\u01E4\x04\u01E5\t\u01E5\x04\u01E6\t\u01E6\x04" +
		"\u01E7\t\u01E7\x04\u01E8\t\u01E8\x04\u01E9\t\u01E9\x04\u01EA\t\u01EA\x04" +
		"\u01EB\t\u01EB\x04\u01EC\t\u01EC\x04\u01ED\t\u01ED\x04\u01EE\t\u01EE\x04" +
		"\u01EF\t\u01EF\x04\u01F0\t\u01F0\x04\u01F1\t\u01F1\x04\u01F2\t\u01F2\x04" +
		"\u01F3\t\u01F3\x04\u01F4\t\u01F4\x04\u01F5\t\u01F5\x04\u01F6\t\u01F6\x04" +
		"\u01F7\t\u01F7\x04\u01F8\t\u01F8\x04\u01F9\t\u01F9\x04\u01FA\t\u01FA\x04" +
		"\u01FB\t\u01FB\x04\u01FC\t\u01FC\x04\u01FD\t\u01FD\x04\u01FE\t\u01FE\x04" +
		"\u01FF\t\u01FF\x04\u0200\t\u0200\x04\u0201\t\u0201\x04\u0202\t\u0202\x04" +
		"\u0203\t\u0203\x04\u0204\t\u0204\x04\u0205\t\u0205\x04\u0206\t\u0206\x04" +
		"\u0207\t\u0207\x04\u0208\t\u0208\x04\u0209\t\u0209\x04\u020A\t\u020A\x04" +
		"\u020B\t\u020B\x04\u020C\t\u020C\x04\u020D\t\u020D\x04\u020E\t\u020E\x04" +
		"\u020F\t\u020F\x04\u0210\t\u0210\x04\u0211\t\u0211\x04\u0212\t\u0212\x04" +
		"\u0213\t\u0213\x04\u0214\t\u0214\x04\u0215\t\u0215\x04\u0216\t\u0216\x04" +
		"\u0217\t\u0217\x04\u0218\t\u0218\x04\u0219\t\u0219\x04\u021A\t\u021A\x04" +
		"\u021B\t\u021B\x04\u021C\t\u021C\x04\u021D\t\u021D\x04\u021E\t\u021E\x04" +
		"\u021F\t\u021F\x04\u0220\t\u0220\x04\u0221\t\u0221\x04\u0222\t\u0222\x04" +
		"\u0223\t\u0223\x04\u0224\t\u0224\x04\u0225\t\u0225\x04\u0226\t\u0226\x04" +
		"\u0227\t\u0227\x04\u0228\t\u0228\x04\u0229\t\u0229\x04\u022A\t\u022A\x04" +
		"\u022B\t\u022B\x04\u022C\t\u022C\x04\u022D\t\u022D\x04\u022E\t\u022E\x04" +
		"\u022F\t\u022F\x04\u0230\t\u0230\x04\u0231\t\u0231\x04\u0232\t\u0232\x04" +
		"\u0233\t\u0233\x04\u0234\t\u0234\x04\u0235\t\u0235\x04\u0236\t\u0236\x04" +
		"\u0237\t\u0237\x04\u0238\t\u0238\x04\u0239\t\u0239\x04\u023A\t\u023A\x04" +
		"\u023B\t\u023B\x04\u023C\t\u023C\x04\u023D\t\u023D\x04\u023E\t\u023E\x04" +
		"\u023F\t\u023F\x04\u0240\t\u0240\x04\u0241\t\u0241\x04\u0242\t\u0242\x04" +
		"\u0243\t\u0243\x04\u0244\t\u0244\x04\u0245\t\u0245\x04\u0246\t\u0246\x04" +
		"\u0247\t\u0247\x04\u0248\t\u0248\x04\u0249\t\u0249\x04\u024A\t\u024A\x04" +
		"\u024B\t\u024B\x04\u024C\t\u024C\x04\u024D\t\u024D\x04\u024E\t\u024E\x04" +
		"\u024F\t\u024F\x04\u0250\t\u0250\x04\u0251\t\u0251\x04\u0252\t\u0252\x04" +
		"\u0253\t\u0253\x04\u0254\t\u0254\x03\x02\x03\x02\x03\x02\x03\x03\x06\x03" +
		"\u04AD\n\x03\r\x03\x0E\x03\u04AE\x03\x04\x03\x04\x05\x04\u04B3\n\x04\x03" +
		"\x04\x05\x04\u04B6\n\x04\x03\x04\x05\x04\u04B9\n\x04\x03\x04\x07\x04\u04BC" +
		"\n\x04\f\x04\x0E\x04\u04BF\v\x04\x03\x04\x05\x04\u04C2\n\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x07" +
		"\x06\u04CE\n\x06\f\x06\x0E\x06\u04D1\v\x06\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x05\x07\u04D9\n\x07\x03\b\x03\b\x03\b\x03\b\x05\b" +
		"\u04DF\n\b\x03\b\x03\b\x05\b\u04E3\n\b\x05\b\u04E5\n\b\x03\b\x05\b\u04E8" +
		"\n\b\x03\b\x05\b\u04EB\n\b\x03\t\x03\t\x03\t\x05\t\u04F0\n\t\x03\n\x03" +
		"\n\x03\n\x05\n\u04F5\n\n\x03\v\x03\v\x03\v\x05\v\u04FA\n\v\x03\f\x03\f" +
		"\x03\f\x05\f\u04FF\n\f\x03\r\x03\r\x03\r\x05\r\u0504\n\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x05\x0E\u0509\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u050F" +
		"\n\x0F\f\x0F\x0E\x0F\u0512\v\x0F\x03\x10\x03\x10\x03\x10\x05\x10\u0517" +
		"\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\u051D\n\x11\f\x11\x0E\x11" +
		"\u0520\v\x11\x03\x12\x03\x12\x03\x12\x05\x12\u0525\n\x12\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x05\x13\u052B\n\x13\x03\x13\x03\x13\x05\x13\u052F\n\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u0537\n\x14\f" +
		"\x14\x0E\x14\u053A\v\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x05\x15\u0543\n\x15\x03\x16\x03\x16\x05\x16\u0547\n\x16\x03\x16" +
		"\x03\x16\x05\x16\u054B\n\x16\x03\x16\x05\x16\u054E\n\x16\x03\x17\x03\x17" +
		"\x05\x17\u0552\n\x17\x03\x17\x05\x17\u0555\n\x17\x03\x17\x03\x17\x05\x17" +
		"\u0559\n\x17\x03\x17\x05\x17\u055C\n\x17\x03\x18\x05\x18\u055F\n\x18\x03" +
		"\x18\x05\x18\u0562\n\x18\x03\x18\x03\x18\x05\x18\u0566\n\x18\x03\x18\x06" +
		"\x18\u0569\n\x18\r\x18\x0E\x18\u056A\x03\x18\x05\x18\u056E\n\x18\x03\x18" +
		"\x05\x18\u0571\n\x18\x03\x19\x05\x19\u0574\n\x19\x03\x19\x03\x19\x05\x19" +
		"\u0578\n\x19\x03\x19\x03\x19\x03\x1A\x05\x1A\u057D\n\x1A\x03\x1A\x03\x1A" +
		"\x05\x1A\u0581\n\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x05\x1B\u0587\n\x1B" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D" +
		"\x06\x1D\u0592\n\x1D\r\x1D\x0E\x1D\u0593\x03\x1D\x03\x1D\x05\x1D\u0598" +
		"\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u05A5\n\x1E\x03\x1F\x03\x1F\x05\x1F\u05A9" +
		"\n\x1F\x03 \x03 \x03 \x03 \x05 \u05AF\n \x03 \x05 \u05B2\n \x03 \x03 " +
		"\x03 \x03 \x03 \x03 \x03 \x06 \u05BB\n \r \x0E \u05BC\x05 \u05BF\n \x03" +
		"!\x03!\x03!\x06!\u05C4\n!\r!\x0E!\u05C5\x05!\u05C8\n!\x03\"\x03\"\x03" +
		"\"\x03#\x03#\x06#\u05CF\n#\r#\x0E#\u05D0\x03$\x03$\x03$\x05$\u05D6\n$" +
		"\x03$\x03$\x05$\u05DA\n$\x03$\x03$\x03$\x05$\u05DF\n$\x03%\x03%\x03%\x05" +
		"%\u05E4\n%\x03%\x03%\x03&\x03&\x03&\x05&\u05EB\n&\x03&\x05&\u05EE\n&\x03" +
		"&\x05&\u05F1\n&\x03&\x06&\u05F4\n&\r&\x0E&\u05F5\x03\'\x03\'\x03\'\x05" +
		"\'\u05FB\n\'\x03(\x03(\x05(\u05FF\n(\x03)\x03)\x05)\u0603\n)\x03*\x03" +
		"*\x05*\u0607\n*\x03*\x05*\u060A\n*\x03*\x03*\x05*\u060E\n*\x03*\x03*\x03" +
		"*\x05*\u0613\n*\x03+\x03+\x05+\u0617\n+\x03+\x03+\x03,\x03,\x05,\u061D" +
		"\n,\x03,\x03,\x05,\u0621\n,\x05,\u0623\n,\x03,\x05,\u0626\n,\x03,\x03" +
		",\x05,\u062A\n,\x03-\x03-\x03-\x05-\u062F\n-\x05-\u0631\n-\x03-\x03-\x03" +
		"-\x05-\u0636\n-\x05-\u0638\n-\x03.\x03.\x05.\u063C\n.\x03.\x03.\x05.\u0640" +
		"\n.\x03.\x05.\u0643\n.\x03/\x03/\x05/\u0647\n/\x03/\x05/\u064A\n/\x03" +
		"/\x03/\x03/\x05/\u064F\n/\x03/\x05/\u0652\n/\x03/\x05/\u0655\n/\x03/\x03" +
		"/\x05/\u0659\n/\x03/\x05/\u065C\n/\x03/\x03/\x03/\x05/\u0661\n/\x03/\x05" +
		"/\u0664\n/\x03/\x05/\u0667\n/\x05/\u0669\n/\x030\x030\x050\u066D\n0\x03" +
		"0\x030\x031\x031\x051\u0673\n1\x031\x051\u0676\n1\x031\x051\u0679\n1\x03" +
		"1\x031\x051\u067D\n1\x032\x032\x052\u0681\n2\x032\x052\u0684\n2\x032\x05" +
		"2\u0687\n2\x032\x062\u068A\n2\r2\x0E2\u068B\x032\x032\x052\u0690\n2\x03" +
		"3\x063\u0693\n3\r3\x0E3\u0694\x033\x053\u0698\n3\x033\x063\u069B\n3\r" +
		"3\x0E3\u069C\x034\x034\x034\x034\x074\u06A3\n4\f4\x0E4\u06A6\v4\x035\x03" +
		"5\x055\u06AA\n5\x036\x036\x056\u06AE\n6\x036\x076\u06B1\n6\f6\x0E6\u06B4" +
		"\v6\x036\x036\x037\x037\x077\u06BA\n7\f7\x0E7\u06BD\v7\x038\x038\x058" +
		"\u06C1\n8\x038\x038\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039" +
		"\x039\x059\u06D0\n9\x03:\x03:\x05:\u06D4\n:\x03:\x03:\x03:\x03:\x03:\x03" +
		":\x03:\x03:\x03:\x03:\x03:\x05:\u06E1\n:\x03;\x03;\x03;\x05;\u06E6\n;" +
		"\x03;\x05;\u06E9\n;\x03;\x05;\u06EC\n;\x03<\x03<\x05<\u06F0\n<\x05<\u06F2" +
		"\n<\x03<\x03<\x03<\x03<\x03<\x05<\u06F9\n<\x03<\x03<\x03=\x03=\x05=\u06FF" +
		"\n=\x03=\x05=\u0702\n=\x03=\x03=\x05=\u0706\n=\x03>\x03>\x03>\x05>\u070B" +
		"\n>\x03>\x03>\x03>\x05>\u0710\n>\x03?\x03?\x05?\u0714\n?\x03?\x05?\u0717" +
		"\n?\x03?\x03?\x03@\x03@\x05@\u071D\n@\x03@\x05@\u0720\n@\x03@\x03@\x05" +
		"@\u0724\n@\x03@\x05@\u0727\n@\x03@\x05@\u072A\n@\x03A\x03A\x03A\x05A\u072F" +
		"\nA\x03A\x05A\u0732\nA\x03A\x03A\x05A\u0736\nA\x03A\x05A\u0739\nA\x03" +
		"A\x05A\u073C\nA\x03B\x03B\x05B\u0740\nB\x03B\x03B\x03C\x05C\u0745\nC\x03" +
		"C\x03C\x05C\u0749\nC\x03C\x03C\x05C\u074D\nC\x03D\x03D\x05D\u0751\nD\x03" +
		"D\x05D\u0754\nD\x03D\x03D\x03E\x03E\x03E\x03E\x03E\x05E\u075D\nE\x03E" +
		"\x07E\u0760\nE\fE\x0EE\u0763\vE\x03E\x05E\u0766\nE\x03F\x03F\x03F\x03" +
		"F\x05F\u076C\nF\x03G\x03G\x03G\x03G\x05G\u0772\nG\x05G\u0774\nG\x03G\x03" +
		"G\x03G\x03G\x05G\u077A\nG\x03H\x03H\x03H\x03I\x05I\u0780\nI\x03I\x05I" +
		"\u0783\nI\x03I\x03I\x03I\x03I\x03J\x03J\x05J\u078B\nJ\x03K\x03K\x05K\u078F" +
		"\nK\x03K\x05K\u0792\nK\x03K\x05K\u0795\nK\x03K\x06K\u0798\nK\rK\x0EK\u0799" +
		"\x03L\x03L\x03L\x05L\u079F\nL\x03L\x05L\u07A2\nL\x03L\x06L\u07A5\nL\r" +
		"L\x0EL\u07A6\x03M\x03M\x03M\x05M\u07AC\nM\x03N\x03N\x03N\x05N\u07B1\n" +
		"N\x03N\x03N\x03O\x03O\x03O\x03O\x07O\u07B9\nO\fO\x0EO\u07BC\vO\x03P\x03" +
		"P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u07C7\nP\x03Q\x03Q\x03Q\x03" +
		"Q\x07Q\u07CD\nQ\fQ\x0EQ\u07D0\vQ\x03R\x03R\x03R\x05R\u07D5\nR\x03R\x07" +
		"R\u07D8\nR\fR\x0ER\u07DB\vR\x03R\x03R\x07R\u07DF\nR\fR\x0ER\u07E2\vR\x03" +
		"S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x05S\u07EF\nS\x03" +
		"T\x05T\u07F2\nT\x03T\x03T\x03U\x05U\u07F7\nU\x03U\x03U\x03V\x03V\x05V" +
		"\u07FD\nV\x03V\x03V\x05V\u0801\nV\x03V\x05V\u0804\nV\x03W\x03W\x03W\x03" +
		"X\x03X\x03X\x03X\x05X\u080D\nX\x03Y\x05Y\u0810\nY\x03Y\x03Y\x05Y\u0814" +
		"\nY\x03Z\x05Z\u0817\nZ\x03Z\x03Z\x05Z\u081B\nZ\x03Z\x05Z\u081E\nZ\x03" +
		"Z\x05Z\u0821\nZ\x03Z\x03Z\x05Z\u0825\nZ\x03Z\x05Z\u0828\nZ\x05Z\u082A" +
		"\nZ\x03Z\x03Z\x05Z\u082E\nZ\x03Z\x05Z\u0831\nZ\x03[\x05[\u0834\n[\x03" +
		"[\x03[\x03[\x05[\u0839\n[\x03\\\x03\\\x03\\\x03]\x03]\x03]\x05]\u0841" +
		"\n]\x03]\x03]\x05]\u0845\n]\x05]\u0847\n]\x03]\x03]\x03]\x06]\u084C\n" +
		"]\r]\x0E]\u084D\x05]\u0850\n]\x03^\x03^\x03^\x06^\u0855\n^\r^\x0E^\u0856" +
		"\x03_\x03_\x05_\u085B\n_\x03_\x03_\x05_\u085F\n_\x03`\x03`\x03`\x05`\u0864" +
		"\n`\x03`\x03`\x05`\u0868\n`\x05`\u086A\n`\x03`\x06`\u086D\n`\r`\x0E`\u086E" +
		"\x03a\x03a\x05a\u0873\na\x03a\x03a\x05a\u0877\na\x03a\x05a\u087A\na\x03" +
		"a\x07a\u087D\na\fa\x0Ea\u0880\va\x03b\x03b\x03b\x05b\u0885\nb\x03c\x05" +
		"c\u0888\nc\x03c\x03c\x05c\u088C\nc\x03c\x03c\x05c\u0890\nc\x03d\x05d\u0893" +
		"\nd\x03d\x05d\u0896\nd\x03d\x03d\x03d\x05d\u089B\nd\x03e\x05e\u089E\n" +
		"e\x03e\x05e\u08A1\ne\x03e\x03e\x03e\x05e\u08A6\ne\x03f\x03f\x05f\u08AA" +
		"\nf\x03f\x05f\u08AD\nf\x03f\x03f\x03g\x03g\x03h\x03h\x05h\u08B5\nh\x03" +
		"h\x03h\x03i\x03i\x05i\u08BB\ni\x03i\x03i\x05i\u08BF\ni\x05i\u08C1\ni\x03" +
		"i\x06i\u08C4\ni\ri\x0Ei\u08C5\x03j\x03j\x03j\x03j\x07j\u08CC\nj\fj\x0E" +
		"j\u08CF\vj\x03k\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x03l\x07l\u08DA\nl" +
		"\fl\x0El\u08DD\vl\x03m\x03m\x03m\x03m\x07m\u08E3\nm\fm\x0Em\u08E6\vm\x03" +
		"n\x03n\x03n\x03n\x03n\x07n\u08ED\nn\fn\x0En\u08F0\vn\x03o\x03o\x03o\x05" +
		"o\u08F5\no\x03p\x03p\x03p\x05p\u08FA\np\x03p\x05p\u08FD\np\x03p\x03p\x03" +
		"p\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x05p\u0909\np\x03p\x07p\u090C\np" +
		"\fp\x0Ep\u090F\vp\x03p\x03p\x03q\x03q\x03q\x05q\u0916\nq\x03q\x03q\x03" +
		"q\x03q\x03q\x03q\x03q\x07q\u091F\nq\fq\x0Eq\u0922\vq\x03q\x03q\x03r\x03" +
		"r\x03r\x05r\u0929\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x05r\u0933" +
		"\nr\x03r\x07r\u0936\nr";
	private static readonly _serializedATNSegment1: string =
		"\fr\x0Er\u0939\vr\x03r\x03r\x03s\x03s\x03s\x05s\u0940\ns\x03s\x03s\x03" +
		"t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x06t\u094C\nt\rt\x0Et\u094D\x05t" +
		"\u0950\nt\x03u\x03u\x03u\x05u\u0955\nu\x03u\x03u\x03v\x03v\x03v\x05v\u095C" +
		"\nv\x03v\x03v\x03w\x05w\u0961\nw\x03w\x03w\x05w\u0965\nw\x03w\x03w\x03" +
		"x\x03x\x03x\x05x\u096C\nx\x03x\x03x\x03y\x03y\x03y\x05y\u0973\ny\x03y" +
		"\x03y\x03z\x03z\x03z\x05z\u097A\nz\x03z\x03z\x03{\x05{\u097F\n{\x03{\x03" +
		"{\x05{\u0983\n{\x03{\x03{\x03|\x05|\u0988\n|\x03|\x03|\x05|\u098C\n|\x03" +
		"|\x03|\x03}\x05}\u0991\n}\x03}\x03}\x05}\u0995\n}\x03}\x03}\x03~\x05~" +
		"\u099A\n~\x03~\x03~\x05~\u099E\n~\x03~\x03~\x03\x7F\x05\x7F\u09A3\n\x7F" +
		"\x03\x7F\x03\x7F\x05\x7F\u09A7\n\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x03" +
		"\x80\x05\x80\u09AE\n\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03\x81\x03\x81" +
		"\x03\x81\x03\x81\x03\x81\x05\x81\u09B9\n\x81\x03\x81\x07\x81\u09BC\n\x81" +
		"\f\x81\x0E\x81\u09BF\v\x81\x03\x82\x03\x82\x03\x82\x03\x82\x07\x82\u09C5" +
		"\n\x82\f\x82\x0E\x82\u09C8\v\x82\x03\x83\x03\x83\x03\x83\x05\x83\u09CD" +
		"\n\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83" +
		"\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83" +
		"\x03\x83\x05\x83\u09E1\n\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03" +
		"\x83\x03\x83\x03\x83\x03\x83\x03\x83\x07\x83\u09ED\n\x83\f\x83\x0E\x83" +
		"\u09F0\v\x83\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x85\x03\x85\x03" +
		"\x86\x03\x86\x03\x87\x03\x87\x03\x87\x03\x88\x03\x88\x03\x89\x03\x89\x03" +
		"\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x05\x8C\u0A08\n\x8C\x03\x8C" +
		"\x03\x8C\x05\x8C\u0A0C\n\x8C\x03\x8D\x03\x8D\x05\x8D\u0A10\n\x8D\x03\x8D" +
		"\x05\x8D\u0A13\n\x8D\x03\x8D\x05\x8D\u0A16\n\x8D\x03\x8D\x03\x8D\x05\x8D" +
		"\u0A1A\n\x8D\x03\x8E\x03\x8E\x05\x8E\u0A1E\n\x8E\x03\x8E\x05\x8E\u0A21" +
		"\n\x8E\x03\x8E\x05\x8E\u0A24\n\x8E\x03\x8E\x03\x8E\x05\x8E\u0A28\n\x8E" +
		"\x03\x8F\x03\x8F\x05\x8F\u0A2C\n\x8F\x03\x8F\x03\x8F\x05\x8F\u0A30\n\x8F" +
		"\x03\x90\x03\x90\x05\x90\u0A34\n\x90\x03\x90\x03\x90\x05\x90\u0A38\n\x90" +
		"\x03\x91\x03\x91\x05\x91\u0A3C\n\x91\x03\x91\x03\x91\x03\x92\x03\x92\x05" +
		"\x92\u0A42\n\x92\x03\x92\x03\x92\x03\x93\x03\x93\x05\x93\u0A48\n\x93\x03" +
		"\x93\x03\x93\x03\x94\x03\x94\x03\x94\x05\x94\u0A4F\n\x94\x03\x94\x05\x94" +
		"\u0A52\n\x94\x03\x95\x03\x95\x03\x95\x03\x96\x03\x96\x03\x96\x03\x97\x03" +
		"\x97\x05\x97\u0A5C\n\x97\x03\x97\x03\x97\x03\x98\x03\x98\x05\x98\u0A62" +
		"\n\x98\x03\x98\x03\x98\x03\x99\x03\x99\x05\x99\u0A68\n\x99\x03\x9A\x03" +
		"\x9A\x05\x9A\u0A6C\n\x9A\x05\x9A\u0A6E\n\x9A\x03\x9A\x03\x9A\x03\x9A\x05" +
		"\x9A\u0A73\n\x9A\x05\x9A\u0A75\n\x9A\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03" +
		"\x9D\x03\x9D\x03\x9E\x03\x9E\x05\x9E\u0A7F\n\x9E\x03\x9E\x05\x9E\u0A82" +
		"\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0A86\n\x9E\x03\x9E\x05\x9E\u0A89\n\x9E" +
		"\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0A8E\n\x9F\x03\xA0\x03\xA0\x03\xA1\x03" +
		"\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0A98\n\xA2\f\xA2\x0E\xA2" +
		"\u0A9B\v\xA2\x03\xA3\x03\xA3\x06\xA3\u0A9F\n\xA3\r\xA3\x0E\xA3\u0AA0\x03" +
		"\xA4\x03\xA4\x03\xA4\x05\xA4\u0AA6\n\xA4\x03\xA4\x03\xA4\x05\xA4\u0AAA" +
		"\n\xA4\x03\xA4\x05\xA4\u0AAD\n\xA4\x03\xA4\x05\xA4\u0AB0\n\xA4\x03\xA4" +
		"\x05\xA4\u0AB3\n\xA4\x05\xA4\u0AB5\n\xA4\x03\xA4\x03\xA4\x03\xA5\x05\xA5" +
		"\u0ABA\n\xA5\x03\xA5\x03\xA5\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0AC1\n\xA6" +
		"\x03\xA6\x03\xA6\x05\xA6\u0AC5\n\xA6\x05\xA6\u0AC7\n\xA6\x03\xA6\x03\xA6" +
		"\x05\xA6\u0ACB\n\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA8\x03" +
		"\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAB\x03" +
		"\xAB\x03\xAB\x05\xAB\u0ADE\n\xAB\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0AE3" +
		"\n\xAC\x03\xAC\x05\xAC\u0AE6\n\xAC\x03\xAC\x03\xAC\x05\xAC\u0AEA\n\xAC" +
		"\x03\xAC\x03\xAC\x03\xAD\x03\xAD\x05\xAD\u0AF0\n\xAD\x03\xAD\x05\xAD\u0AF3" +
		"\n\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x05\xAE\u0AFA\n\xAE\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x05\xAE\u0B07\n\xAE\x03\xAE\x07\xAE\u0B0A\n\xAE\f\xAE\x0E" +
		"\xAE\u0B0D\v\xAE\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x05\xAF\u0B13\n\xAF\x03" +
		"\xAF\x03\xAF\x03\xB0\x03\xB0\x05\xB0\u0B19\n\xB0\x03\xB0\x05\xB0\u0B1C" +
		"\n\xB0\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x05\xB1\u0B22\n\xB1\x03\xB2\x03" +
		"\xB2\x05\xB2\u0B26\n\xB2\x03\xB3\x05\xB3\u0B29\n\xB3\x03\xB3\x05\xB3\u0B2C" +
		"\n\xB3\x03\xB3\x05\xB3\u0B2F\n\xB3\x03\xB3\x03\xB3\x05\xB3\u0B33\n\xB3" +
		"\x03\xB4\x03\xB4\x05\xB4\u0B37\n\xB4\x03\xB4\x03\xB4\x05\xB4\u0B3B\n\xB4" +
		"\x03\xB5\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB6\x05\xB6\u0B43\n\xB6\x03" +
		"\xB6\x03\xB6\x03\xB6\x05\xB6\u0B48\n\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB8" +
		"\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x05\xB9\u0B52\n\xB9\x03\xB9\x03\xB9\x03" +
		"\xBA\x03\xBA\x05\xBA\u0B58\n\xBA\x03\xBA\x03\xBA\x05\xBA\u0B5C\n\xBA\x03" +
		"\xBB\x03\xBB\x05\xBB\u0B60\n\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0B65" +
		"\n\xBB\x03\xBC\x03\xBC\x05\xBC\u0B69\n\xBC\x03\xBC\x03\xBC\x03\xBD\x03" +
		"\xBD\x03\xBD\x05\xBD\u0B70\n\xBD\x03\xBD\x07\xBD\u0B73\n\xBD\f\xBD\x0E" +
		"\xBD\u0B76\v\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u0B7B\n\xBD\x03\xBD\x07" +
		"\xBD\u0B7E\n\xBD\f\xBD\x0E\xBD\u0B81\v\xBD\x05\xBD\u0B83\n\xBD\x03\xBE" +
		"\x03\xBE\x05\xBE\u0B87\n\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03" +
		"\xBE\x03\xBE\x05\xBE\u0B90\n\xBE\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u0B95" +
		"\n\xBF\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u0B9A\n\xC0\x03\xC1\x03\xC1\x03" +
		"\xC1\x05\xC1\u0B9F\n\xC1\x03\xC1\x03\xC1\x05\xC1\u0BA3\n\xC1\x03\xC2\x03" +
		"\xC2\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u0BAA\n\xC3\x03\xC3\x03\xC3\x05\xC3" +
		"\u0BAE\n\xC3\x03\xC4\x03\xC4\x05\xC4\u0BB2\n\xC4\x05\xC4\u0BB4\n\xC4\x03" +
		"\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u0BBB\n\xC5\x03\xC6\x03\xC6" +
		"\x03\xC6\x05\xC6\u0BC0\n\xC6\x03\xC7\x03\xC7\x05\xC7\u0BC4\n\xC7\x03\xC7" +
		"\x03\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x07\xC8\u0BCC\n\xC8\f\xC8\x0E" +
		"\xC8\u0BCF\v\xC8\x03\xC9\x03\xC9\x05\xC9\u0BD3\n\xC9\x03\xCA\x03\xCA\x03" +
		"\xCA\x03\xCA\x05\xCA\u0BD9\n\xCA\x03\xCA\x05\xCA\u0BDC\n\xCA\x03\xCB\x03" +
		"\xCB\x03\xCB\x03\xCB\x05\xCB\u0BE2\n\xCB\x03\xCB\x05\xCB\u0BE5\n\xCB\x03" +
		"\xCB\x03\xCB\x07\xCB\u0BE9\n\xCB\f\xCB\x0E\xCB\u0BEC\v\xCB\x03\xCC\x03" +
		"\xCC\x03\xCC\x05\xCC\u0BF1\n\xCC\x03\xCC\x05\xCC\u0BF4\n\xCC\x03\xCD\x03" +
		"\xCD\x05\xCD\u0BF8\n\xCD\x03\xCD\x03\xCD\x05\xCD\u0BFC\n\xCD\x03\xCD\x05" +
		"\xCD\u0BFF\n\xCD\x03\xCD\x05\xCD\u0C02\n\xCD\x03\xCD\x05\xCD\u0C05\n\xCD" +
		"\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x05\xCF\u0C0D\n\xCF\x03" +
		"\xCF\x03\xCF\x03\xD0\x03\xD0\x05\xD0\u0C13\n\xD0\x03\xD0\x03\xD0\x03\xD1" +
		"\x03\xD1\x03\xD1\x05\xD1\u0C1A\n\xD1\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u0C1F" +
		"\n\xD2\x03\xD2\x05\xD2\u0C22\n\xD2\x03\xD2\x05\xD2\u0C25\n\xD2\x03\xD2" +
		"\x05\xD2\u0C28\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD4\x03\xD4\x03\xD4\x03" +
		"\xD5\x03\xD5\x06\xD5\u0C32\n\xD5\r\xD5\x0E\xD5\u0C33\x03\xD6\x03\xD6\x05" +
		"\xD6\u0C38\n\xD6\x03\xD7\x03\xD7\x06\xD7\u0C3C\n\xD7\r\xD7\x0E\xD7\u0C3D" +
		"\x03\xD8\x03\xD8\x05\xD8\u0C42\n\xD8\x03\xD9\x05\xD9\u0C45\n\xD9\x03\xD9" +
		"\x03\xD9\x03\xDA\x05\xDA\u0C4A\n\xDA\x03\xDA\x03\xDA\x03\xDB\x03\xDB\x03" +
		"\xDB\x03\xDB\x05\xDB\u0C52\n\xDB\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0C57" +
		"\n\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x07\xDC\u0C6E\n\xDC\f\xDC\x0E\xDC\u0C71" +
		"\v\xDC\x03\xDC\x03\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDE" +
		"\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDF\x06\xDF\u0C80\n\xDF\r\xDF\x0E" +
		"\xDF\u0C81\x03\xDF\x05\xDF\u0C85\n\xDF\x03\xE0\x03\xE0\x03\xE1\x03\xE1" +
		"\x05\xE1\u0C8B\n\xE1\x03\xE1\x03\xE1\x03\xE2\x03\xE2\x03\xE3\x05\xE3\u0C92" +
		"\n\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u0C97\n\xE3\x03\xE4\x05\xE4\u0C9A" +
		"\n\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x05\xE6\u0CA2\n" +
		"\xE6\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0CA7\n\xE7\x03\xE7\x05\xE7\u0CAA" +
		"\n\xE7\x03\xE7\x03\xE7\x05\xE7\u0CAE\n\xE7\x03\xE7\x05\xE7\u0CB1\n\xE7" +
		"\x03\xE7\x07\xE7\u0CB4\n\xE7\f\xE7\x0E\xE7\u0CB7\v\xE7\x03\xE7\x03\xE7" +
		"\x05\xE7\u0CBB\n\xE7\x03\xE7\x05\xE7\u0CBE\n\xE7\x03\xE7\x06\xE7\u0CC1" +
		"\n\xE7\r\xE7\x0E\xE7\u0CC2\x05\xE7\u0CC5\n\xE7\x03\xE8\x03\xE8\x03\xE8" +
		"\x03\xE9\x03\xE9\x05\xE9\u0CCC\n\xE9\x03\xE9\x05\xE9\u0CCF\n\xE9\x03\xE9" +
		"\x06\xE9\u0CD2\n\xE9\r\xE9\x0E\xE9\u0CD3\x03\xEA\x03\xEA\x05\xEA\u0CD8" +
		"\n\xEA\x03\xEA\x03\xEA\x03\xEB\x06\xEB\u0CDD\n\xEB\r\xEB\x0E\xEB\u0CDE" +
		"\x03\xEB\x05\xEB\u0CE2\n\xEB\x06\xEB\u0CE4\n\xEB\r\xEB\x0E\xEB\u0CE5\x03" +
		"\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03" +
		"\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x05\xEC\u0CF8\n\xEC" +
		"\x03\xED\x03\xED\x03\xED\x03\xED\x03\xEE\x05\xEE\u0CFF\n\xEE\x03\xEE\x05" +
		"\xEE\u0D02\n\xEE\x03\xEE\x03\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xF0\x03\xF0" +
		"\x03\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x05\xF1\u0D10\n\xF1\x03\xF2\x03" +
		"\xF2\x05\xF2\u0D14\n\xF2\x05\xF2\u0D16\n\xF2\x03\xF2\x03\xF2\x03\xF2\x05" +
		"\xF2\u0D1B\n\xF2\x05\xF2\u0D1D\n\xF2\x03\xF3\x03\xF3\x05\xF3\u0D21\n\xF3" +
		"\x03\xF4\x05\xF4\u0D24\n\xF4\x03\xF4\x03\xF4\x03\xF5\x03\xF5\x05\xF5\u0D2A" +
		"\n\xF5\x03\xF5\x03\xF5\x03\xF6\x05\xF6\u0D2F\n\xF6\x03\xF6\x03\xF6\x03" +
		"\xF7\x03\xF7\x05\xF7\u0D35\n\xF7\x05\xF7\u0D37\n\xF7\x03\xF7\x03\xF7\x05" +
		"\xF7\u0D3B\n\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
		"\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
		"\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
		"\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x05\xF7\u0D5A\n\xF7\x03\xF8\x03\xF8\x03" +
		"\xF8\x05\xF8\u0D5F\n\xF8\x03\xF8\x03\xF8\x05\xF8\u0D63\n\xF8\x03\xF9\x03" +
		"\xF9\x05\xF9\u0D67\n\xF9\x03\xF9\x03\xF9\x05\xF9\u0D6B\n\xF9\x05\xF9\u0D6D" +
		"\n\xF9\x03\xF9\x03\xF9\x05\xF9\u0D71\n\xF9\x03\xF9\x07\xF9\u0D74\n\xF9" +
		"\f\xF9\x0E\xF9\u0D77\v\xF9\x03\xFA\x03\xFA\x05\xFA\u0D7B\n\xFA\x03\xFB" +
		"\x03\xFB\x05\xFB\u0D7F\n\xFB\x03\xFC\x03\xFC\x03\xFC\x03\xFD\x05\xFD\u0D85" +
		"\n\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFE\x03\xFE\x03\xFE\x05\xFE\u0D8D\n" +
		"\xFE\x03\xFE\x05\xFE\u0D90\n\xFE\x03\xFE\x03\xFE\x05\xFE\u0D94\n\xFE\x03" +
		"\xFE\x03\xFE\x03\xFF\x03\xFF\x06\xFF\u0D9A\n\xFF\r\xFF\x0E\xFF\u0D9B\x03" +
		"\u0100\x03\u0100\x03\u0100\x03\u0101\x03\u0101\x05\u0101\u0DA3\n\u0101" +
		"\x03\u0102\x05\u0102\u0DA6\n\u0102\x03\u0102\x05\u0102\u0DA9\n\u0102\x03" +
		"\u0102\x06\u0102\u0DAC\n\u0102\r\u0102\x0E\u0102\u0DAD\x03\u0103\x05\u0103" +
		"\u0DB1\n\u0103\x03\u0103\x03\u0103\x05\u0103\u0DB5\n\u0103\x03\u0103\x05" +
		"\u0103\u0DB8\n\u0103\x03\u0104\x05\u0104\u0DBB\n\u0104\x03\u0104\x03\u0104" +
		"\x06\u0104\u0DBF\n\u0104\r\u0104\x0E\u0104\u0DC0\x03\u0105\x03\u0105\x03" +
		"\u0105\x05\u0105\u0DC6\n\u0105\x03\u0106\x03\u0106\x03\u0106\x06\u0106" +
		"\u0DCB\n\u0106\r\u0106\x0E\u0106\u0DCC\x03\u0106\x03\u0106\x03\u0106\x03" +
		"\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03" +
		"\u0108\x03\u0108\x03\u0108\x05\u0108\u0DDC\n\u0108\x03\u0109\x03\u0109" +
		"\x07\u0109\u0DE0\n\u0109\f\u0109\x0E\u0109\u0DE3\v\u0109\x03\u010A\x03" +
		"\u010A\x03\u010A\x03\u010A\x03\u010B\x07\u010B\u0DEA\n\u010B\f\u010B\x0E" +
		"\u010B\u0DED\v\u010B\x03\u010B\x07\u010B\u0DF0\n\u010B\f\u010B\x0E\u010B" +
		"\u0DF3\v\u010B\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x07\u010C\u0DF9" +
		"\n\u010C\f\u010C\x0E\u010C\u0DFC\v\u010C\x05\u010C\u0DFE\n\u010C\x03\u010D" +
		"\x07\u010D\u0E01\n\u010D\f\u010D\x0E\u010D\u0E04\v\u010D\x03\u010D\x03" +
		"\u010D\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03" +
		"\u010E\x05\u010E\u0E39\n\u010E\x03\u010F\x03\u010F\x03\u010F\x03\u010F" +
		"\x03\u010F\x03\u010F\x05\u010F\u0E41\n\u010F\x03\u010F\x05\u010F\u0E44" +
		"\n\u010F\x03\u010F\x05\u010F\u0E47\n\u010F\x03\u010F\x05\u010F\u0E4A\n" +
		"\u010F\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u0E4F\n\u0110\x03\u0110" +
		"\x03\u0110\x05\u0110\u0E53\n\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x05\u0110\u0E5A\n\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x05\u0110\u0E60\n\u0110\x03\u0111\x03\u0111\x03\u0111\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0113\x05\u0113\u0E6A\n\u0113\x03\u0113\x03\u0113" +
		"\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u0E72\n\u0114\x03\u0114" +
		"\x05\u0114\u0E75\n\u0114\x03\u0114\x05\u0114\u0E78\n\u0114\x03\u0114\x05" +
		"\u0114\u0E7B\n\u0114\x03\u0115\x06\u0115\u0E7E\n\u0115\r\u0115\x0E\u0115" +
		"\u0E7F\x03\u0115\x03\u0115\x06\u0115\u0E84\n\u0115\r\u0115\x0E\u0115\u0E85" +
		"\x03\u0116\x06\u0116\u0E89\n\u0116\r\u0116\x0E\u0116\u0E8A\x03\u0116\x03" +
		"\u0116\x06\u0116\u0E8F\n\u0116\r\u0116\x0E\u0116\u0E90\x05\u0116\u0E93" +
		"\n\u0116\x03\u0116\x03\u0116\x06\u0116\u0E97\n\u0116\r\u0116\x0E\u0116" +
		"\u0E98\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0118\x03" +
		"\u0118\x05\u0118\u0EA2\n\u0118\x03\u0119\x03\u0119\x05\u0119\u0EA6\n\u0119" +
		"\x03\u011A\x03\u011A\x05\u011A\u0EAA\n\u011A\x03\u011B\x03\u011B\x05\u011B" +
		"\u0EAE\n\u011B\x03\u011C\x03\u011C\x05\u011C\u0EB2\n\u011C\x03\u011C\x03" +
		"\u011C\x03\u011D\x03\u011D\x06\u011D\u0EB8\n\u011D\r\u011D\x0E\u011D\u0EB9" +
		"\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x05\u011E\u0EC0\n\u011E\x03\u011E" +
		"\x03\u011E\x03\u011F\x03\u011F\x03\u011F\x05\u011F\u0EC7\n\u011F\x03\u011F" +
		"\x05\u011F\u0ECA\n\u011F\x03\u011F\x05\u011F\u0ECD\n\u011F\x03\u011F\x05" +
		"\u011F\u0ED0\n\u011F\x03\u011F\x05\u011F\u0ED3\n\u011F\x03\u011F\x05\u011F" +
		"\u0ED6\n\u011F\x03\u011F\x05\u011F\u0ED9\n\u011F\x03\u0120\x03\u0120\x06" +
		"\u0120\u0EDD\n\u0120\r\u0120\x0E\u0120\u0EDE\x03\u0121\x03\u0121\x03\u0121" +
		"\x05\u0121\u0EE4\n\u0121\x03\u0122\x05\u0122\u0EE7\n\u0122\x03\u0122\x05" +
		"\u0122\u0EEA\n\u0122\x03\u0122\x06\u0122\u0EED\n\u0122\r\u0122\x0E\u0122" +
		"\u0EEE\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x05\u0123\u0EF5\n\u0123" +
		"\x03\u0123\x03\u0123\x03\u0123\x05\u0123\u0EFA\n\u0123\x03\u0123\x05\u0123" +
		"\u0EFD\n\u0123\x03\u0124\x05\u0124\u0F00\n\u0124\x03\u0124\x03\u0124\x06" +
		"\u0124\u0F04\n\u0124\r\u0124\x0E\u0124\u0F05\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x05\u0125\u0F0C\n\u0125\x05\u0125\u0F0E\n\u0125\x03\u0125\x03" +
		"\u0125\x05\u0125\u0F12\n\u0125\x03\u0126\x05\u0126\u0F15\n\u0126\x03\u0126" +
		"\x03\u0126\x06\u0126\u0F19\n\u0126\r\u0126\x0E\u0126\u0F1A\x03\u0127\x03" +
		"\u0127\x03\u0127\x03\u0127\x05\u0127\u0F21\n\u0127\x05\u0127\u0F23\n\u0127" +
		"\x03\u0127\x03\u0127\x03\u0127\x05\u0127\u0F28\n\u0127\x03\u0128\x03\u0128" +
		"\x03\u0128\x03\u0129\x03\u0129\x06\u0129\u0F2F\n\u0129\r\u0129\x0E\u0129" +
		"\u0F30\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x05\u012A\u0F38" +
		"\n\u012A\x03\u012B\x03\u012B\x06\u012B\u0F3C\n\u012B\r\u012B\x0E\u012B" +
		"\u0F3D\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x05\u012C\u0F44\n\u012C" +
		"\x03\u012D\x03\u012D\x05\u012D\u0F48\n\u012D\x03\u012D\x05\u012D\u0F4B" +
		"\n\u012D\x03\u012D\x05\u012D\u0F4E\n\u012D\x03\u012D\x03\u012D\x03\u012D" +
		"\x05\u012D\u0F53\n\u012D\x05\u012D\u0F55\n\u012D\x03\u012E\x05\u012E\u0F58" +
		"\n\u012E\x03\u012E\x03\u012E\x03\u012E\x05\u012E\u0F5D\n\u012E\x03\u012F" +
		"\x05\u012F\u0F60\n\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x05\u012F" +
		"\u0F66\n\u012F\x03\u012F\x03\u012F\x06\u012F\u0F6A\n\u012F\r\u012F\x0E" +
		"\u012F\u0F6B\x05\u012F\u0F6E\n\u012F\x03\u0130\x03\u0130\x03\u0130\x05" +
		"\u0130\u0F73\n\u0130\x03\u0131\x03\u0131\x05\u0131\u0F77\n\u0131\x03\u0131" +
		"\x03\u0131\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u0F7E\n\u0132\x03\u0133" +
		"\x03\u0133\x05\u0133\u0F82\n\u0133\x03\u0133\x03\u0133\x05\u0133\u0F86" +
		"\n\u0133\x03\u0134\x03\u0134\x06\u0134\u0F8A\n\u0134\r\u0134\x0E\u0134" +
		"\u0F8B\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u0F91\n\u0134\x03\u0134" +
		"\x05\u0134\u0F94\n\u0134\x03\u0134\x05\u0134\u0F97\n\u0134\x03\u0135\x03" +
		"\u0135\x05\u0135\u0F9B\n\u0135\x03\u0136\x03\u0136\x03\u0137\x03\u0137" +
		"\x03\u0137\x05\u0137\u0FA2\n\u0137\x03\u0137\x05\u0137\u0FA5\n\u0137\x03" +
		"\u0137\x05\u0137\u0FA8\n\u0137\x03\u0137\x05\u0137\u0FAB\n\u0137\x03\u0138" +
		"\x03\u0138\x03\u0138\x05\u0138\u0FB0\n\u0138\x03\u0138\x03\u0138\x03\u0138" +
		"\x05\u0138\u0FB5\n\u0138\x03\u0138\x03\u0138\x05\u0138\u0FB9\n\u0138\x03" +
		"\u0138\x03\u0138\x03\u0138\x05\u0138\u0FBE\n\u0138\x03\u0139\x03\u0139" +
		"\x06\u0139\u0FC2\n\u0139\r\u0139\x0E\u0139\u0FC3\x03\u0139\x05\u0139\u0FC7" +
		"\n\u0139\x03\u0139\x05\u0139\u0FCA\n\u0139\x03\u0139\x05\u0139\u0FCD\n" +
		"\u0139\x03\u013A\x03\u013A\x05\u013A\u0FD1\n\u013A\x03\u013B\x03\u013B" +
		"\x03\u013B\x05\u013B\u0FD6\n\u013B\x03\u013C\x03\u013C\x03\u013C\x05\u013C" +
		"\u0FDB\n\u013C\x03\u013D\x05\u013D\u0FDE\n\u013D\x03\u013D\x03\u013D\x03" +
		"\u013D\x03\u013E\x03\u013E\x03\u013E\x05\u013E\u0FE6\n\u013E\x03\u013E" +
		"\x03\u013E\x03\u013E\x05\u013E\u0FEB\n\u013E\x03\u013E\x05\u013E\u0FEE" +
		"\n\u013E\x03\u013E\x05\u013E\u0FF1\n\u013E\x03\u013E\x05\u013E\u0FF4\n" +
		"\u013E\x03\u013E\x05\u013E\u0FF7\n\u013E\x03\u013F\x03\u013F\x06\u013F" +
		"\u0FFB\n\u013F\r\u013F\x0E\u013F\u0FFC\x03\u0140\x03\u0140\x03\u0140\x05" +
		"\u0140\u1002\n\u0140\x03\u0140\x05\u0140\u1005\n\u0140\x03\u0141\x03\u0141" +
		"\x03\u0141\x05\u0141\u100A\n\u0141\x03\u0141\x05\u0141\u100D\n\u0141\x03" +
		"\u0142\x03\u0142\x06\u0142\u1011\n\u0142\r\u0142\x0E\u0142\u1012\x03\u0143" +
		"\x03\u0143\x05\u0143\u1017\n\u0143\x03\u0144\x03\u0144\x05\u0144\u101B" +
		"\n\u0144\x03\u0145\x03\u0145\x03\u0145\x03\u0146\x03\u0146\x03\u0146\x05" +
		"\u0146\u1023\n\u0146\x03\u0146\x03\u0146\x03\u0146\x05\u0146\u1028\n\u0146" +
		"\x03\u0146\x03\u0146\x05\u0146\u102C\n\u0146\x03\u0146\x03\u0146\x03\u0146" +
		"\x05\u0146\u1031\n\u0146\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x06\u0147" +
		"\u1037\n\u0147\r\u0147\x0E\u0147\u1038\x05\u0147\u103B\n\u0147\x03\u0148" +
		"\x03\u0148\x03\u0148\x07\u0148\u1040\n\u0148\f\u0148\x0E\u0148\u1043\v" +
		"\u0148\x03\u0148\x06\u0148\u1046\n\u0148\r\u0148\x0E\u0148\u1047\x03\u0148" +
		"\x05\u0148\u104B\n\u0148\x03\u0148\x05\u0148\u104E\n\u0148\x03\u0149\x03" +
		"\u0149\x03\u0149\x03\u0149\x05\u0149\u1054\n\u0149\x03\u014A\x03\u014A" +
		"\x03\u014A\x03\u014B\x06\u014B\u105A\n\u014B\r\u014B\x0E\u014B\u105B\x03" +
		"\u014B\x07\u014B\u105F\n\u014B\f\u014B\x0E\u014B\u1062\v\u014B\x03\u014C" +
		"\x03\u014C\x03\u014C\x07\u014C\u1067\n\u014C\f\u014C\x0E\u014C\u106A\v" +
		"\u014C\x03\u014D\x03\u014D\x05\u014D\u106E\n\u014D\x03\u014D\x03\u014D" +
		"\x05\u014D\u1072\n\u014D\x03\u014D\x03\u014D\x05\u014D\u1076\n\u014D\x03" +
		"\u014E\x03\u014E\x03\u014E\x03\u014F\x03\u014F\x03\u014F\x03\u0150\x03" +
		"\u0150\x03\u0150\x07\u0150\u1081\n\u0150\f\u0150\x0E\u0150\u1084\v\u0150" +
		"\x03\u0151\x03\u0151\x03\u0151\x05\u0151\u1089\n\u0151\x03\u0152\x06\u0152" +
		"\u108C\n\u0152\r\u0152\x0E\u0152\u108D\x03\u0153\x06\u0153\u1091\n\u0153" +
		"\r\u0153\x0E\u0153\u1092\x03\u0154\x06\u0154\u1096\n\u0154\r\u0154\x0E" +
		"\u0154\u1097\x03\u0155\x03\u0155\x05\u0155\u109C\n\u0155\x03\u0155\x05" +
		"\u0155\u109F\n\u0155\x03\u0155\x06\u0155\u10A2\n\u0155\r\u0155\x0E\u0155" +
		"\u10A3\x03\u0156\x03\u0156\x05\u0156\u10A8\n\u0156\x03\u0157\x03\u0157" +
		"\x05\u0157\u10AC\n\u0157\x03\u0158\x03\u0158\x03\u0158\x03\u0159\x03\u0159" +
		"\x03\u015A\x03\u015A\x05\u015A\u10B5\n\u015A\x03\u015A\x03\u015A\x05\u015A" +
		"\u10B9\n\u015A\x03\u015B\x03\u015B\x03\u015C\x03\u015C\x06\u015C\u10BF" +
		"\n\u015C\r\u015C\x0E\u015C\u10C0\x03\u015C\x03\u015C\x05\u015C\u10C5\n" +
		"\u015C\x03\u015C\x05\u015C\u10C8\n\u015C\x05\u015C\u10CA\n\u015C\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x05\u015D\u10D0\n\u015D\x03\u015D\x05\u015D" +
		"\u10D3\n\u015D\x03\u015E\x05\u015E\u10D6\n\u015E\x03\u015E\x03\u015E\x03" +
		"\u015E\x07\u015E\u10DB\n\u015E\f\u015E\x0E\u015E\u10DE\v\u015E\x05\u015E" +
		"\u10E0\n\u015E\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x07\u015F\u10E6" +
		"\n\u015F\f\u015F\x0E\u015F\u10E9\v\u015F\x05\u015F\u10EB\n\u015F\x03\u0160" +
		"\x03\u0160\x06\u0160\u10EF\n\u0160\r\u0160\x0E\u0160\u10F0\x03\u0160\x05" +
		"\u0160\u10F4\n\u0160\x03\u0161\x03\u0161\x06\u0161\u10F8\n\u0161\r\u0161" +
		"\x0E\u0161\u10F9\x03\u0162\x03\u0162\x05\u0162\u10FE\n\u0162\x03\u0162" +
		"\x03\u0162\x03\u0162\x05\u0162\u1103\n\u0162\x03\u0163\x03\u0163\x06\u0163" +
		"\u1107\n\u0163\r\u0163\x0E\u0163\u1108\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x05\u0164\u1111\n\u0164\x03\u0165\x03\u0165" +
		"\x06\u0165\u1115\n\u0165\r\u0165\x0E\u0165\u1116\x03\u0166\x03\u0166\x03" +
		"\u0166\x06\u0166\u111C\n\u0166\r\u0166\x0E\u0166\u111D\x03\u0167\x03\u0167" +
		"\x06\u0167\u1122\n\u0167\r\u0167\x0E\u0167\u1123\x03\u0167\x06\u0167\u1127" +
		"\n\u0167\r\u0167\x0E\u0167\u1128\x03\u0168\x03\u0168\x03\u0168\x05\u0168" +
		"\u112E\n\u0168\x03\u0168\x03\u0168\x07\u0168\u1132\n\u0168\f\u0168\x0E" +
		"\u0168\u1135\v\u0168\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x06\u0169" +
		"\u113B\n\u0169\r\u0169\x0E\u0169\u113C\x03\u016A\x03\u016A\x07\u016A\u1141" +
		"\n\u016A\f\u016A\x0E\u016A\u1144\v\u016A\x03\u016B\x03\u016B\x03\u016B" +
		"\x07\u016B\u1149\n\u016B\f\u016B\x0E\u016B\u114C\v\u016B\x03\u016C\x03" +
		"\u016C\x06\u016C\u1150\n\u016C\r\u016C\x0E\u016C\u1151\x03\u016D\x03\u016D" +
		"\x06\u016D\u1156\n\u016D\r\u016D\x0E\u016D\u1157\x03\u016E\x03\u016E\x05" +
		"\u016E\u115C\n\u016E\x03\u016E\x07\u016E\u115F\n\u016E\f\u016E\x0E\u016E" +
		"\u1162\v\u016E\x03\u016F\x03\u016F\x05\u016F\u1166\n\u016F\x03\u016F\x03" +
		"\u016F\x07\u016F\u116A\n\u016F\f\u016F\x0E\u016F\u116D\v\u016F\x03\u0170" +
		"\x03\u0170\x03\u0170\x05\u0170\u1172\n\u0170\x03\u0171\x03\u0171\x03\u0171" +
		"\x05\u0171\u1177\n\u0171\x03\u0172\x03\u0172\x05\u0172\u117B\n\u0172\x03" +
		"\u0172\x03\u0172\x05\u0172\u117F\n\u0172\x03\u0173\x03\u0173\x03\u0173" +
		"\x06\u0173\u1184\n\u0173\r\u0173\x0E\u0173\u1185\x03\u0173\x05\u0173\u1189" +
		"\n\u0173\x03\u0173\x07\u0173\u118C\n\u0173\f\u0173\x0E\u0173\u118F\v\u0173" +
		"\x03\u0173\x05\u0173\u1192\n\u0173\x03\u0173\x07\u0173\u1195\n\u0173\f" +
		"\u0173\x0E\u0173\u1198\v\u0173\x03\u0174\x05\u0174\u119B\n\u0174\x03\u0174" +
		"\x03\u0174\x05\u0174\u119F\n\u0174\x03\u0174\x06\u0174\u11A2\n\u0174\r" +
		"\u0174\x0E\u0174\u11A3\x03\u0175\x05\u0175\u11A7\n\u0175\x03\u0175\x03" +
		"\u0175\x05\u0175\u11AB\n\u0175\x03\u0175\x06\u0175\u11AE\n\u0175\r\u0175" +
		"\x0E\u0175\u11AF\x03\u0175\x05\u0175\u11B3\n\u0175\x03\u0175\x05\u0175" +
		"\u11B6\n\u0175\x03\u0176\x05\u0176\u11B9\n\u0176\x03\u0176\x03\u0176\x03" +
		"\u0176\x03\u0176\x03\u0177\x05\u0177\u11C0\n\u0177\x03\u0177\x03\u0177" +
		"\x05\u0177\u11C4\n\u0177\x03\u0177\x03\u0177\x03\u0178\x03\u0178\x06\u0178" +
		"\u11CA\n\u0178\r\u0178\x0E\u0178\u11CB\x03\u0179\x03\u0179\x03\u0179\x05" +
		"\u0179\u11D1\n\u0179\x03\u0179\x03\u0179\x05\u0179\u11D5\n\u0179\x03\u017A" +
		"\x03\u017A\x03\u017A\x03\u017B\x03\u017B\x06\u017B\u11DC\n\u017B\r\u017B" +
		"\x0E\u017B\u11DD\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x05\u017C\u11EA\n\u017C" +
		"\x03\u017D\x03\u017D\x05\u017D\u11EE\n\u017D\x03\u017D\x03\u017D\x05\u017D" +
		"\u11F2\n\u017D\x03\u017E\x03\u017E\x03\u017E\x06\u017E\u11F7\n\u017E\r" +
		"\u017E\x0E\u017E\u11F8\x03\u017F\x03\u017F\x05\u017F\u11FD\n\u017F\x03" +
		"\u0180\x03\u0180\x03";
	private static readonly _serializedATNSegment2: string =
		"\u0180\x03\u0180\x06\u0180\u1203\n\u0180\r\u0180\x0E\u0180\u1204\x03\u0181" +
		"\x03\u0181\x03\u0182\x03\u0182\x03\u0182\x05\u0182\u120C\n\u0182\x03\u0182" +
		"\x03\u0182\x03\u0182\x05\u0182\u1211\n\u0182\x03\u0182\x05\u0182\u1214" +
		"\n\u0182\x03\u0182\x05\u0182\u1217\n\u0182\x03\u0182\x05\u0182\u121A\n" +
		"\u0182\x03\u0183\x06\u0183\u121D\n\u0183\r\u0183\x0E\u0183\u121E\x03\u0184" +
		"\x03\u0184\x05\u0184\u1223\n\u0184\x03\u0185\x03\u0185\x03\u0185\x06\u0185" +
		"\u1228\n\u0185\r\u0185\x0E\u0185\u1229\x03\u0186\x03\u0186\x05\u0186\u122E" +
		"\n\u0186\x03\u0187\x03\u0187\x05\u0187\u1232\n\u0187\x03\u0188\x03\u0188" +
		"\x03\u0188\x03\u0188\x03\u0188\x06\u0188\u1239\n\u0188\r\u0188\x0E\u0188" +
		"\u123A\x03\u0189\x03\u0189\x06\u0189\u123F\n\u0189\r\u0189\x0E\u0189\u1240" +
		"\x03\u018A\x03\u018A\x03\u018A\x05\u018A\u1246\n\u018A\x03\u018A\x03\u018A" +
		"\x05\u018A\u124A\n\u018A\x03\u018B\x03\u018B\x06\u018B\u124E\n\u018B\r" +
		"\u018B\x0E\u018B\u124F\x03\u018C\x03\u018C\x05\u018C\u1254\n\u018C\x03" +
		"\u018C\x03\u018C\x05\u018C\u1258\n\u018C\x03\u018D\x03\u018D\x06\u018D" +
		"\u125C\n\u018D\r\u018D\x0E\u018D\u125D\x03\u018E\x03\u018E\x06\u018E\u1262" +
		"\n\u018E\r\u018E\x0E\u018E\u1263\x03\u018F\x03\u018F\x03\u018F\x05\u018F" +
		"\u1269\n\u018F\x03\u0190\x05\u0190\u126C\n\u0190\x03\u0190\x07\u0190\u126F" +
		"\n\u0190\f\u0190\x0E\u0190\u1272\v\u0190\x03\u0190\x03\u0190\x03\u0191" +
		"\x03\u0191\x03\u0191\x05\u0191\u1279\n\u0191\x03\u0191\x05\u0191\u127C" +
		"\n\u0191\x03\u0192\x03\u0192\x03\u0192\x05\u0192\u1281\n\u0192\x03\u0193" +
		"\x03\u0193\x05\u0193\u1285\n\u0193\x03\u0193\x03\u0193\x03\u0194\x05\u0194" +
		"\u128A\n\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0195\x03\u0195\x03\u0195" +
		"\x03\u0195\x03\u0195\x05\u0195\u1294\n\u0195\x05\u0195\u1296\n\u0195\x03" +
		"\u0196\x03\u0196\x03\u0196\x07\u0196\u129B\n\u0196\f\u0196\x0E\u0196\u129E" +
		"\v\u0196\x03\u0197\x03\u0197\x05\u0197\u12A2\n\u0197\x03\u0197\x03\u0197" +
		"\x03\u0197\x03\u0197\x03\u0198\x03\u0198\x03\u0198\x03\u0199\x03\u0199" +
		"\x03\u0199\x03\u0199\x05\u0199\u12AF\n\u0199\x03\u019A\x03\u019A\x03\u019A" +
		"\x03\u019A\x05\u019A\u12B5\n\u019A\x03\u019B\x05\u019B\u12B8\n\u019B\x03" +
		"\u019B\x03\u019B\x03\u019B\x03\u019C\x03\u019C\x06\u019C\u12BF\n\u019C" +
		"\r\u019C\x0E\u019C\u12C0\x03\u019D\x03\u019D\x03\u019D\x05\u019D\u12C6" +
		"\n\u019D\x03\u019D\x05\u019D\u12C9\n\u019D\x03\u019D\x05\u019D\u12CC\n" +
		"\u019D\x03\u019D\x05\u019D\u12CF\n\u019D\x03\u019D\x05\u019D\u12D2\n\u019D" +
		"\x03\u019D\x05\u019D\u12D5\n\u019D\x03\u019D\x05\u019D\u12D8\n\u019D\x03" +
		"\u019D\x05\u019D\u12DB\n\u019D\x03\u019D\x05\u019D\u12DE\n\u019D\x03\u019D" +
		"\x05\u019D\u12E1\n\u019D\x03\u019E\x03\u019E\x03\u019E\x03\u019F\x05\u019F" +
		"\u12E7\n\u019F\x03\u019F\x03\u019F\x03\u019F\x05\u019F\u12EC\n\u019F\x03" +
		"\u01A0\x03\u01A0\x05\u01A0\u12F0\n\u01A0\x03\u01A0\x03\u01A0\x03\u01A1" +
		"\x03\u01A1\x03\u01A1\x05\u01A1\u12F7\n\u01A1\x03\u01A1\x05\u01A1\u12FA" +
		"\n\u01A1\x03\u01A1\x05\u01A1\u12FD\n\u01A1\x03\u01A1\x05\u01A1\u1300\n" +
		"\u01A1\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03" +
		"\u01A2\x03\u01A2\x07\u01A2\u130A\n\u01A2\f\u01A2\x0E\u01A2\u130D\v\u01A2" +
		"\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x05\u01A3" +
		"\u1315\n\u01A3\x03\u01A4\x03\u01A4\x03\u01A4\x05\u01A4\u131A\n\u01A4\x03" +
		"\u01A4\x03\u01A4\x05\u01A4\u131E\n\u01A4\x03\u01A4\x05\u01A4\u1321\n\u01A4" +
		"\x03\u01A5\x03\u01A5\x03\u01A5\x07\u01A5\u1326\n\u01A5\f\u01A5\x0E\u01A5" +
		"\u1329\v\u01A5\x03\u01A6\x03\u01A6\x03\u01A6\x07\u01A6\u132E\n\u01A6\f" +
		"\u01A6\x0E\u01A6\u1331\v\u01A6\x03\u01A7\x03\u01A7\x05\u01A7\u1335\n\u01A7" +
		"\x03\u01A7\x03\u01A7\x05\u01A7\u1339\n\u01A7\x03\u01A8\x05\u01A8\u133C" +
		"\n\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A9\x03\u01A9\x05\u01A9\u1343" +
		"\n\u01A9\x03\u01A9\x03\u01A9\x03\u01AA\x03\u01AA\x05\u01AA\u1349\n\u01AA" +
		"\x03\u01AA\x03\u01AA\x05\u01AA\u134D\n\u01AA\x03\u01AB\x03\u01AB\x05\u01AB" +
		"\u1351\n\u01AB\x03\u01AB\x03\u01AB\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC" +
		"\x05\u01AC\u1359\n\u01AC\x03\u01AD\x03\u01AD\x03\u01AD\x05\u01AD\u135E" +
		"\n\u01AD\x03\u01AD\x05\u01AD\u1361\n\u01AD\x03\u01AD\x03\u01AD\x05\u01AD" +
		"\u1365\n\u01AD\x03\u01AD\x05\u01AD\u1368\n\u01AD\x03\u01AE\x03\u01AE\x03" +
		"\u01AE\x03\u01AF\x03\u01AF\x03\u01AF\x05\u01AF\u1370\n\u01AF\x03\u01AF" +
		"\x05\u01AF\u1373\n\u01AF\x03\u01AF\x05\u01AF\u1376\n\u01AF\x03\u01AF\x05" +
		"\u01AF\u1379\n\u01AF\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B1\x03\u01B1" +
		"\x05\u01B1\u1380\n\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u1384\n\u01B1\x03" +
		"\u01B1\x05\u01B1\u1387\n\u01B1\x03\u01B1\x06\u01B1\u138A\n\u01B1\r\u01B1" +
		"\x0E\u01B1\u138B\x03\u01B1\x05\u01B1\u138F\n\u01B1\x03\u01B2\x03\u01B2" +
		"\x03\u01B2\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x07\u01B3" +
		"\u1399\n\u01B3\f\u01B3\x0E\u01B3\u139C\v\u01B3\x05\u01B3\u139E\n\u01B3" +
		"\x03\u01B4\x03\u01B4\x03\u01B4\x05\u01B4\u13A3\n\u01B4\x03\u01B4\x05\u01B4" +
		"\u13A6\n\u01B4\x03\u01B4\x05\u01B4\u13A9\n\u01B4\x03\u01B5\x03\u01B5\x05" +
		"\u01B5\u13AD\n\u01B5\x03\u01B5\x05\u01B5\u13B0\n\u01B5\x03\u01B5\x05\u01B5" +
		"\u13B3\n\u01B5\x03\u01B5\x05\u01B5\u13B6\n\u01B5\x03\u01B5\x05\u01B5\u13B9" +
		"\n\u01B5\x03\u01B6\x03\u01B6\x03\u01B6\x03\u01B6\x03\u01B7\x03\u01B7\x03" +
		"\u01B7\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8\x05\u01B8\u13C7" +
		"\n\u01B8\x03\u01B9\x03\u01B9\x05\u01B9\u13CB\n\u01B9\x03\u01BA\x03\u01BA" +
		"\x05\u01BA\u13CF\n\u01BA\x03\u01BA\x03\u01BA\x03\u01BA\x05\u01BA\u13D4" +
		"\n\u01BA\x03\u01BB\x03\u01BB\x03\u01BC\x03\u01BC\x05\u01BC\u13DA\n\u01BC" +
		"\x03\u01BC\x05\u01BC\u13DD\n\u01BC\x03\u01BD\x03\u01BD\x03\u01BE\x03\u01BE" +
		"\x06\u01BE\u13E3\n\u01BE\r\u01BE\x0E\u01BE\u13E4\x03\u01BE\x05\u01BE\u13E8" +
		"\n\u01BE\x03\u01BF\x06\u01BF\u13EB\n\u01BF\r\u01BF\x0E\u01BF\u13EC\x03" +
		"\u01BF\x03\u01BF\x06\u01BF\u13F1\n\u01BF\r\u01BF\x0E\u01BF\u13F2\x03\u01C0" +
		"\x06\u01C0\u13F6\n\u01C0\r\u01C0\x0E\u01C0\u13F7\x03\u01C0\x03\u01C0\x03" +
		"\u01C0\x03\u01C0\x05\u01C0\u13FE\n\u01C0\x03\u01C0\x03\u01C0\x03\u01C1" +
		"\x03\u01C1\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x05\u01C2" +
		"\u1409\n\u01C2\x03\u01C2\x03\u01C2\x05\u01C2\u140D\n\u01C2\x03\u01C3\x03" +
		"\u01C3\x05\u01C3\u1411\n\u01C3\x03\u01C4\x03\u01C4\x03\u01C4\x06\u01C4" +
		"\u1416\n\u01C4\r\u01C4\x0E\u01C4\u1417\x03\u01C4\x05\u01C4\u141B\n\u01C4" +
		"\x03\u01C4\x05\u01C4\u141E\n\u01C4\x03\u01C4\x05\u01C4\u1421\n\u01C4\x03" +
		"\u01C4\x07\u01C4\u1424\n\u01C4\f\u01C4\x0E\u01C4\u1427\v\u01C4\x03\u01C4" +
		"\x05\u01C4\u142A\n\u01C4\x03\u01C4\x07\u01C4\u142D\n\u01C4\f\u01C4\x0E" +
		"\u01C4\u1430\v\u01C4\x03\u01C5\x05\u01C5\u1433\n\u01C5\x03\u01C5\x03\u01C5" +
		"\x05\u01C5\u1437\n\u01C5\x03\u01C5\x06\u01C5\u143A\n\u01C5\r\u01C5\x0E" +
		"\u01C5\u143B\x03\u01C6\x05\u01C6\u143F\n\u01C6\x03\u01C6\x03\u01C6\x05" +
		"\u01C6\u1443\n\u01C6\x03\u01C6\x05\u01C6\u1446\n\u01C6\x03\u01C7\x05\u01C7" +
		"\u1449\n\u01C7\x03\u01C7\x03\u01C7\x05\u01C7\u144D\n\u01C7\x03\u01C7\x06" +
		"\u01C7\u1450\n\u01C7\r\u01C7\x0E\u01C7\u1451\x03\u01C7\x05\u01C7\u1455" +
		"\n\u01C7\x03\u01C7\x05\u01C7\u1458\n\u01C7\x03\u01C8\x05\u01C8\u145B\n" +
		"\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C9\x05\u01C9\u1462" +
		"\n\u01C9\x03\u01C9\x03\u01C9\x05\u01C9\u1466\n\u01C9\x03\u01C9\x03\u01C9" +
		"\x03\u01CA\x03\u01CA\x03\u01CA\x05\u01CA\u146D\n\u01CA\x03\u01CA\x03\u01CA" +
		"\x05\u01CA\u1471\n\u01CA\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CC\x03\u01CC" +
		"\x06\u01CC\u1478\n\u01CC\r\u01CC\x0E\u01CC\u1479\x03\u01CD\x03\u01CD\x03" +
		"\u01CD\x05\u01CD\u147F\n\u01CD\x03\u01CD\x03\u01CD\x05\u01CD\u1483\n\u01CD" +
		"\x03\u01CE\x03\u01CE\x03\u01CE\x03\u01CF\x03\u01CF\x06\u01CF\u148A\n\u01CF" +
		"\r\u01CF\x0E\u01CF\u148B\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0" +
		"\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x05\u01D0\u1498\n\u01D0" +
		"\x03\u01D1\x03\u01D1\x03\u01D1\x05\u01D1\u149D\n\u01D1\x03\u01D1\x05\u01D1" +
		"\u14A0\n\u01D1\x03\u01D1\x05\u01D1\u14A3\n\u01D1\x03\u01D1\x05\u01D1\u14A6" +
		"\n\u01D1\x03\u01D2\x03\u01D2\x05\u01D2\u14AA\n\u01D2\x03\u01D2\x03\u01D2" +
		"\x05\u01D2\u14AE\n\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u14B3" +
		"\n\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u14B9\n\u01D2" +
		"\x03\u01D2\x03\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u14BF\n\u01D2\x03\u01D2" +
		"\x03\u01D2\x03\u01D2\x05\u01D2\u14C4\n\u01D2\x03\u01D2\x05\u01D2\u14C7" +
		"\n\u01D2\x03\u01D2\x03\u01D2\x03\u01D3\x03\u01D3\x03\u01D3\x05\u01D3\u14CE" +
		"\n\u01D3\x03\u01D4\x03\u01D4\x06\u01D4\u14D2\n\u01D4\r\u01D4\x0E\u01D4" +
		"\u14D3\x03\u01D4\x03\u01D4\x05\u01D4\u14D8\n\u01D4\x03\u01D4\x05\u01D4" +
		"\u14DB\n\u01D4\x03\u01D4\x05\u01D4\u14DE\n\u01D4\x03\u01D4\x05\u01D4\u14E1" +
		"\n\u01D4\x03\u01D5\x06\u01D5\u14E4\n\u01D5\r\u01D5\x0E\u01D5\u14E5\x03" +
		"\u01D5\x03\u01D5\x05\u01D5\u14EA\n\u01D5\x03\u01D6\x03\u01D6\x05\u01D6" +
		"\u14EE\n\u01D6\x03\u01D7\x03\u01D7\x05\u01D7\u14F2\n\u01D7\x03\u01D7\x03" +
		"\u01D7\x03\u01D7\x05\u01D7\u14F7\n\u01D7\x03\u01D8\x03\u01D8\x03\u01D8" +
		"\x05\u01D8\u14FC\n\u01D8\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01DA\x05\u01DA" +
		"\u1502\n\u01DA\x03\u01DA\x03\u01DA\x03\u01DA\x03\u01DB\x03\u01DB\x03\u01DB" +
		"\x03\u01DB\x05\u01DB\u150B\n\u01DB\x03\u01DB\x05\u01DB\u150E\n\u01DB\x03" +
		"\u01DB\x05\u01DB\u1511\n\u01DB\x03\u01DB\x05\u01DB\u1514\n\u01DB\x03\u01DC" +
		"\x06\u01DC\u1517\n\u01DC\r\u01DC\x0E\u01DC\u1518\x03\u01DC\x03\u01DC\x06" +
		"\u01DC\u151D\n\u01DC\r\u01DC\x0E\u01DC\u151E\x03\u01DD\x06\u01DD\u1522" +
		"\n\u01DD\r\u01DD\x0E\u01DD\u1523\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD" +
		"\x06\u01DD\u152A\n\u01DD\r\u01DD\x0E\u01DD\u152B\x03\u01DE\x03\u01DE\x03" +
		"\u01DE\x03\u01DE\x03\u01DE\x03\u01DF\x03\u01DF\x05\u01DF\u1535\n\u01DF" +
		"\x03\u01E0\x03\u01E0\x05\u01E0\u1539\n\u01E0\x03\u01E1\x03\u01E1\x05\u01E1" +
		"\u153D\n\u01E1\x03\u01E2\x03\u01E2\x05\u01E2\u1541\n\u01E2\x03\u01E3\x03" +
		"\u01E3\x05\u01E3\u1545\n\u01E3\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E5" +
		"\x03\u01E5\x03\u01E5\x03\u01E5\x05\u01E5\u154E\n\u01E5\x03\u01E5\x05\u01E5" +
		"\u1551\n\u01E5\x03\u01E5\x05\u01E5\u1554\n\u01E5\x03\u01E5\x05\u01E5\u1557" +
		"\n\u01E5\x03\u01E5\x05\u01E5\u155A\n\u01E5\x03\u01E6\x03\u01E6\x03\u01E6" +
		"\x07\u01E6\u155F\n\u01E6\f\u01E6\x0E\u01E6\u1562\v\u01E6\x05\u01E6\u1564" +
		"\n\u01E6\x03\u01E7\x03\u01E7\x05\u01E7\u1568\n\u01E7\x03\u01E7\x05\u01E7" +
		"\u156B\n\u01E7\x03\u01E7\x03\u01E7\x05\u01E7\u156F\n\u01E7\x03\u01E8\x03" +
		"\u01E8\x05\u01E8\u1573\n\u01E8\x03\u01E8\x03\u01E8\x05\u01E8\u1577\n\u01E8" +
		"\x03\u01E9\x03\u01E9\x06\u01E9\u157B\n\u01E9\r\u01E9\x0E\u01E9\u157C\x03" +
		"\u01EA\x03\u01EA\x05\u01EA\u1581\n\u01EA\x03\u01EA\x05\u01EA\u1584\n\u01EA" +
		"\x03\u01EB\x03\u01EB\x05\u01EB\u1588\n\u01EB\x03\u01EB\x03\u01EB\x03\u01EC" +
		"\x03\u01EC\x05\u01EC\u158E\n\u01EC\x03\u01EC\x03\u01EC\x03\u01ED\x05\u01ED" +
		"\u1593\n\u01ED\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01EE\x03\u01EE\x05\u01EE" +
		"\u159A\n\u01EE\x03\u01EE\x03\u01EE\x03\u01EF\x03\u01EF\x03\u01EF\x05\u01EF" +
		"\u15A1\n\u01EF\x03\u01F0\x05\u01F0\u15A4\n\u01F0\x03\u01F0\x03\u01F0\x05" +
		"\u01F0\u15A8\n\u01F0\x03\u01F0\x03\u01F0\x03\u01F0\x05\u01F0\u15AD\n\u01F0" +
		"\x03\u01F0\x03\u01F0\x03\u01F1\x03\u01F1\x03\u01F1\x03\u01F1\x03\u01F1" +
		"\x06\u01F1\u15B6\n\u01F1\r\u01F1\x0E\u01F1\u15B7\x05\u01F1\u15BA\n\u01F1" +
		"\x03\u01F2\x05\u01F2\u15BD\n\u01F2\x03\u01F2\x03\u01F2\x05\u01F2\u15C1" +
		"\n\u01F2\x03\u01F2\x06\u01F2\u15C4\n\u01F2\r\u01F2\x0E\u01F2\u15C5\x03" +
		"\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x05\u01F3\u15CC\n\u01F3\x03\u01F3" +
		"\x05\u01F3\u15CF\n\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x05\u01F3\u15D4" +
		"\n\u01F3\x03\u01F4\x03\u01F4\x03\u01F4\x05\u01F4\u15D9\n\u01F4\x03\u01F4" +
		"\x05\u01F4\u15DC\n\u01F4\x03\u01F4\x05\u01F4\u15DF\n\u01F4\x03\u01F4\x05" +
		"\u01F4\u15E2\n\u01F4\x03\u01F4\x05\u01F4\u15E5\n\u01F4\x03\u01F4\x05\u01F4" +
		"\u15E8\n\u01F4\x03\u01F4\x05\u01F4\u15EB\n\u01F4\x03\u01F5\x03\u01F5\x03" +
		"\u01F5\x05\u01F5\u15F0\n\u01F5\x03\u01F6\x03\u01F6\x05\u01F6\u15F4\n\u01F6" +
		"\x03\u01F6\x03\u01F6\x03\u01F6\x05\u01F6\u15F9\n\u01F6\x03\u01F7\x03\u01F7" +
		"\x03\u01F8\x03\u01F8\x05\u01F8\u15FF\n\u01F8\x03\u01F8\x05\u01F8\u1602" +
		"\n\u01F8\x03\u01F9\x03\u01F9\x03\u01FA\x05\u01FA\u1607\n\u01FA\x03\u01FA" +
		"\x03\u01FA\x07\u01FA\u160B\n\u01FA\f\u01FA\x0E\u01FA\u160E\v\u01FA\x03" +
		"\u01FB\x03\u01FB\x05\u01FB\u1612\n\u01FB\x03\u01FB\x03\u01FB\x07\u01FB" +
		"\u1616\n\u01FB\f\u01FB\x0E\u01FB\u1619\v\u01FB\x03\u01FC\x05\u01FC\u161C" +
		"\n\u01FC\x03\u01FC\x03\u01FC\x07\u01FC\u1620\n\u01FC\f\u01FC\x0E\u01FC" +
		"\u1623\v\u01FC\x03\u01FD\x03\u01FD\x05\u01FD\u1627\n\u01FD\x03\u01FD\x03" +
		"\u01FD\x07\u01FD\u162B\n\u01FD\f\u01FD\x0E\u01FD\u162E\v\u01FD\x03\u01FE" +
		"\x03\u01FE\x05\u01FE\u1632\n\u01FE\x03\u01FE\x07\u01FE\u1635\n\u01FE\f" +
		"\u01FE\x0E\u01FE\u1638\v\u01FE\x03\u01FF\x03\u01FF\x03\u01FF\x05\u01FF" +
		"\u163D\n\u01FF\x03\u01FF\x07\u01FF\u1640\n\u01FF\f\u01FF\x0E\u01FF\u1643" +
		"\v\u01FF\x03\u0200\x05\u0200\u1646\n\u0200\x03\u0200\x03\u0200\x07\u0200" +
		"\u164A\n\u0200\f\u0200\x0E\u0200\u164D\v\u0200\x03\u0201\x03\u0201\x05" +
		"\u0201\u1651\n\u0201\x03\u0201\x03\u0201\x07\u0201\u1655\n\u0201\f\u0201" +
		"\x0E\u0201\u1658\v\u0201\x03\u0202\x05\u0202\u165B\n\u0202\x03\u0202\x03" +
		"\u0202\x03\u0202\x07\u0202\u1660\n\u0202\f\u0202\x0E\u0202\u1663\v\u0202" +
		"\x03\u0203\x03\u0203\x05\u0203\u1667\n\u0203\x03\u0203\x03\u0203\x03\u0203" +
		"\x07\u0203\u166C\n\u0203\f\u0203\x0E\u0203\u166F\v\u0203\x03\u0204\x05" +
		"\u0204\u1672\n\u0204\x03\u0204\x03\u0204\x07\u0204\u1676\n\u0204\f\u0204" +
		"\x0E\u0204\u1679\v\u0204\x03\u0205\x03\u0205\x05\u0205\u167D\n\u0205\x03" +
		"\u0205\x03\u0205\x07\u0205\u1681\n\u0205\f\u0205\x0E\u0205\u1684\v\u0205" +
		"\x03\u0206\x03\u0206\x07\u0206\u1688\n\u0206\f\u0206\x0E\u0206\u168B\v" +
		"\u0206\x03\u0207\x03\u0207\x03\u0207\x03\u0208\x03\u0208\x07\u0208\u1692" +
		"\n\u0208\f\u0208\x0E\u0208\u1695\v\u0208\x03\u0209\x03\u0209\x03\u0209" +
		"\x03\u020A\x05\u020A\u169B\n\u020A\x03\u020A\x03\u020A\x07\u020A\u169F" +
		"\n\u020A\f\u020A\x0E\u020A\u16A2\v\u020A\x03\u020B\x03\u020B\x03\u020B" +
		"\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x03\u020C\x05\u020C" +
		"\u16AD\n\u020C\x03\u020D\x03\u020D\x07\u020D\u16B1\n\u020D\f\u020D\x0E" +
		"\u020D\u16B4\v\u020D\x03\u020E\x03\u020E\x03\u020E\x06\u020E\u16B9\n\u020E" +
		"\r\u020E\x0E\u020E\u16BA\x05\u020E\u16BD\n\u020E\x03\u020F\x05\u020F\u16C0" +
		"\n\u020F\x03\u020F\x03\u020F\x03\u0210\x03\u0210\x03\u0210\x03\u0210\x03" +
		"\u0210\x03\u0210\x03\u0210\x05\u0210\u16CB\n\u0210\x03\u0211\x03\u0211" +
		"\x05\u0211\u16CF\n\u0211\x03\u0211\x05\u0211\u16D2\n\u0211\x03\u0211\x03" +
		"\u0211\x03\u0211\x03\u0211\x03\u0211\x03\u0211\x03\u0211\x05\u0211\u16DB" +
		"\n\u0211\x03\u0212\x03\u0212\x07\u0212\u16DF\n\u0212\f\u0212\x0E\u0212" +
		"\u16E2\v\u0212\x03\u0212\x05\u0212\u16E5\n\u0212\x03\u0212\x07\u0212\u16E8" +
		"\n\u0212\f\u0212\x0E\u0212\u16EB\v\u0212\x03\u0212\x07\u0212\u16EE\n\u0212" +
		"\f\u0212\x0E\u0212\u16F1\v\u0212\x05\u0212\u16F3\n\u0212\x03\u0213\x03" +
		"\u0213\x03\u0213\x05\u0213\u16F8\n\u0213\x03\u0213\x07\u0213\u16FB\n\u0213" +
		"\f\u0213\x0E\u0213\u16FE\v\u0213\x03\u0213\x03\u0213\x03\u0214\x03\u0214" +
		"\x03\u0214\x05\u0214\u1705\n\u0214\x03\u0215\x03\u0215\x05\u0215\u1709" +
		"\n\u0215\x03\u0215\x05\u0215\u170C\n\u0215\x03\u0215\x03\u0215\x03\u0216" +
		"\x03\u0216\x03\u0216\x03\u0216\x03\u0217\x03\u0217\x03\u0217\x03\u0217" +
		"\x03\u0217\x03\u0217\x03\u0218\x03\u0218\x03\u0218\x06\u0218\u171D\n\u0218" +
		"\r\u0218\x0E\u0218\u171E\x03\u0219\x05\u0219\u1722\n\u0219\x03\u0219\x05" +
		"\u0219\u1725\n\u0219\x03\u0219\x03\u0219\x05\u0219\u1729\n\u0219\x03\u0219" +
		"\x03\u0219\x03\u0219\x05\u0219\u172E\n\u0219\x03\u0219\x03\u0219\x03\u0219" +
		"\x05\u0219\u1733\n\u0219\x03\u0219\x05\u0219\u1736\n\u0219\x03\u0219\x03" +
		"\u0219\x03\u0219\x05\u0219\u173B\n\u0219\x03\u0219\x03\u0219\x03\u0219" +
		"\x05\u0219\u1740\n\u0219\x03\u0219\x03\u0219\x03\u0219\x05\u0219\u1745" +
		"\n\u0219\x03\u0219\x03\u0219\x03\u0219\x05\u0219\u174A\n\u0219\x03\u0219" +
		"\x05\u0219\u174D\n\u0219\x03\u021A\x05\u021A\u1750\n\u021A\x03\u021A\x05" +
		"\u021A\u1753\n\u021A\x03\u021A\x03\u021A\x03\u021A\x03\u021A\x03\u021A" +
		"\x03\u021A\x05\u021A\u175B\n\u021A\x03\u021B\x03\u021B\x03\u021B\x03\u021B" +
		"\x05\u021B\u1761\n\u021B\x03\u021C\x03\u021C\x03\u021C\x03\u021C\x05\u021C" +
		"\u1767\n\u021C\x03\u021C\x07\u021C\u176A\n\u021C\f\u021C\x0E\u021C\u176D" +
		"\v\u021C\x03\u021C\x03\u021C\x07\u021C\u1771\n\u021C\f\u021C\x0E\u021C" +
		"\u1774\v\u021C\x03\u021C\x05\u021C\u1777\n\u021C\x03\u021D\x03\u021D\x03" +
		"\u021D\x03\u021D\x03\u021D\x05\u021D\u177E\n\u021D\x03\u021D\x07\u021D" +
		"\u1781\n\u021D\f\u021D\x0E\u021D\u1784\v\u021D\x03\u021D\x03\u021D\x07" +
		"\u021D\u1788\n\u021D\f\u021D\x0E\u021D\u178B\v\u021D\x03\u021D\x05\u021D" +
		"\u178E\n\u021D\x03\u021E\x03\u021E\x03\u021E\x03\u021E\x05\u021E\u1794" +
		"\n\u021E\x03\u021E\x03\u021E\x03\u021F\x03\u021F\x03\u0220\x03\u0220\x03" +
		"\u0221\x03\u0221\x03\u0221\x03\u0221\x05\u0221\u17A0\n\u0221\x03\u0221" +
		"\x03\u0221\x05\u0221\u17A4\n\u0221\x03\u0221\x05\u0221\u17A7\n\u0221\x03" +
		"\u0222\x03\u0222\x03\u0222\x03\u0222\x05\u0222\u17AD\n\u0222\x03\u0222" +
		"\x03\u0222\x05\u0222\u17B1\n\u0222\x03\u0222\x05\u0222\u17B4\n\u0222\x03" +
		"\u0223\x03\u0223\x03\u0223\x03\u0223\x05\u0223\u17BA\n\u0223\x03\u0224" +
		"\x03\u0224\x05\u0224\u17BE\n\u0224\x03\u0224\x06\u0224\u17C1\n\u0224\r" +
		"\u0224\x0E\u0224\u17C2\x03\u0224\x05\u0224\u17C6\n\u0224\x03\u0224\x05" +
		"\u0224\u17C9\n\u0224\x03\u0225\x03\u0225\x03\u0225\x03\u0226\x03\u0226" +
		"\x03\u0226\x03\u0227\x03\u0227\x03\u0227\x03\u0228\x03\u0228\x05\u0228" +
		"\u17D6\n\u0228\x03\u0229\x03\u0229\x03\u0229\x03\u022A\x03\u022A\x03\u022A" +
		"\x03\u022B\x03\u022B\x03\u022B\x03\u022C\x03\u022C\x03\u022C\x03\u022D" +
		"\x03\u022D\x03\u022D\x03\u022E\x03\u022E\x03\u022E\x03\u022F\x03\u022F" +
		"\x03\u0230\x03\u0230\x03\u0231\x03\u0231\x03\u0232\x03\u0232\x03\u0233" +
		"\x03\u0233\x03\u0234\x03\u0234\x03\u0235\x03\u0235\x03\u0236\x03\u0236" +
		"\x03\u0237\x03\u0237\x03\u0237\x05\u0237\u17FD\n\u0237\x03\u0238\x03\u0238" +
		"\x03\u0239\x03\u0239\x03\u023A\x03\u023A\x03\u023A\x03\u023A\x03\u023A" +
		"\x03\u023A\x05\u023A\u1809\n\u023A\x03\u023B\x03\u023B\x03\u023C\x03\u023C" +
		"\x03\u023D\x03\u023D\x03\u023E\x03\u023E\x03\u023F\x03\u023F\x03\u0240" +
		"\x03\u0240\x05\u0240\u1817\n\u0240\x03\u0241\x03\u0241\x05\u0241\u181B" +
		"\n\u0241\x03\u0241\x05\u0241\u181E\n\u0241\x03\u0242\x03\u0242\x05\u0242" +
		"\u1822\n\u0242\x03\u0243\x03\u0243\x03\u0244\x03\u0244\x03\u0245\x03\u0245" +
		"\x03\u0246\x03\u0246\x03\u0247\x03\u0247\x05\u0247\u182E\n\u0247\x03\u0248" +
		"\x03\u0248\x03\u0249\x03\u0249\x03\u024A\x03\u024A\x03\u024B\x03\u024B" +
		"\x03\u024C\x03\u024C\x03\u024C\x03\u024C\x03\u024C\x03\u024C\x05\u024C" +
		"\u183E\n\u024C\x03\u024D\x03\u024D\x03\u024E\x03\u024E\x03\u024E\x05\u024E" +
		"\u1845\n\u024E\x03\u024F\x03\u024F\x03\u0250\x03\u0250\x03\u0250\x03\u0250" +
		"\x05\u0250\u184D\n\u0250\x03\u0250\x03\u0250\x03\u0251\x03\u0251\x03\u0251" +
		"\x03\u0251\x05\u0251\u1855\n\u0251\x03\u0251\x03\u0251\x03\u0252\x03\u0252" +
		"\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252" +
		"\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x05\u0252" +
		"\u1868\n\u0252\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253" +
		"\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253" +
		"\x03\u0253\x03\u0253\x05\u0253\u1879\n\u0253\x03\u0253\x03\u0253\x03\u0253" +
		"\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253" +
		"\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x03\u0253\x05\u0253" +
		"\u188B\n\u0253\x03\u0254\x06\u0254\u188E\n\u0254\r\u0254\x0E\u0254\u188F" +
		"\x03\u0254\x02\x02\x02\u0255\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02" +
		"\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02" +
		" \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02" +
		"<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02" +
		"X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02" +
		"t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02" +
		"\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02" +
		"\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02" +
		"\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02" +
		"\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02" +
		"\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02" +
		"\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02" +
		"\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02" +
		"\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02" +
		"\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02" +
		"\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02" +
		"\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02" +
		"\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02" +
		"\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02" +
		"\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02" +
		"\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02" +
		"\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02" +
		"\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02" +
		"\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02" +
		"\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02" +
		"\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02" +
		"\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02" +
		"\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02" +
		"\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02" +
		"\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02" +
		"\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02" +
		"\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02" +
		"\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02" +
		"\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02" +
		"\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02" +
		"\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02" +
		"\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02" +
		"\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02" +
		"\u0264\x02\u0266\x02\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02" +
		"\u0272\x02\u0274\x02\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02" +
		"\u0280\x02\u0282\x02\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02" +
		"\u028E\x02\u0290\x02\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02" +
		"\u029C\x02\u029E\x02\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02" +
		"\u02AA\x02\u02AC\x02\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02" +
		"\u02B8\x02\u02BA\x02\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02" +
		"\u02C6\x02\u02C8\x02\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02" +
		"\u02D4\x02\u02D6\x02\u02D8\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0\x02" +
		"\u02E2\x02\u02E4\x02\u02E6\x02\u02E8\x02\u02EA\x02\u02EC\x02\u02EE\x02" +
		"\u02F0\x02\u02F2\x02\u02F4\x02\u02F6\x02\u02F8\x02\u02FA\x02\u02FC\x02" +
		"\u02FE\x02\u0300\x02\u0302\x02\u0304\x02\u0306\x02\u0308\x02\u030A\x02" +
		"\u030C\x02\u030E\x02\u0310\x02\u0312\x02\u0314\x02\u0316\x02\u0318\x02" +
		"\u031A\x02\u031C\x02\u031E\x02\u0320\x02\u0322\x02\u0324\x02\u0326\x02" +
		"\u0328\x02\u032A\x02\u032C\x02\u032E\x02\u0330\x02\u0332\x02\u0334\x02" +
		"\u0336\x02\u0338\x02\u033A\x02\u033C\x02\u033E\x02\u0340\x02\u0342\x02" +
		"\u0344\x02\u0346\x02\u0348\x02\u034A\x02\u034C\x02\u034E\x02\u0350\x02" +
		"\u0352\x02\u0354\x02\u0356\x02\u0358\x02\u035A\x02\u035C\x02\u035E\x02" +
		"\u0360\x02\u0362\x02\u0364\x02\u0366\x02\u0368\x02\u036A\x02\u036C\x02" +
		"\u036E\x02\u0370\x02\u0372\x02\u0374\x02\u0376\x02\u0378\x02\u037A\x02" +
		"\u037C\x02\u037E\x02\u0380\x02\u0382\x02\u0384\x02\u0386\x02\u0388\x02" +
		"\u038A\x02\u038C\x02\u038E\x02\u0390\x02\u0392\x02\u0394\x02\u0396\x02" +
		"\u0398\x02\u039A\x02\u039C\x02\u039E\x02\u03A0\x02\u03A2\x02\u03A4\x02" +
		"\u03A6\x02\u03A8\x02\u03AA\x02\u03AC\x02\u03AE\x02\u03B0\x02\u03B2\x02" +
		"\u03B4\x02\u03B6\x02\u03B8\x02\u03BA\x02\u03BC\x02\u03BE\x02\u03C0\x02" +
		"\u03C2\x02\u03C4\x02\u03C6\x02\u03C8\x02\u03CA\x02\u03CC\x02\u03CE\x02" +
		"\u03D0\x02\u03D2\x02\u03D4\x02\u03D6\x02\u03D8\x02\u03DA\x02\u03DC\x02" +
		"\u03DE\x02\u03E0\x02\u03E2\x02\u03E4\x02\u03E6\x02\u03E8\x02\u03EA\x02" +
		"\u03EC\x02\u03EE\x02\u03F0\x02\u03F2\x02\u03F4\x02\u03F6\x02\u03F8\x02" +
		"\u03FA\x02\u03FC\x02\u03FE\x02\u0400\x02\u0402\x02\u0404\x02\u0406\x02" +
		"\u0408\x02\u040A\x02\u040C\x02\u040E\x02\u0410\x02\u0412\x02\u0414\x02" +
		"\u0416\x02\u0418\x02\u041A\x02\u041C\x02\u041E\x02\u0420\x02\u0422\x02" +
		"\u0424\x02\u0426\x02\u0428\x02\u042A\x02\u042C\x02\u042E\x02\u0430\x02" +
		"\u0432\x02\u0434\x02\u0436\x02\u0438\x02\u043A\x02\u043C\x02\u043E\x02" +
		"\u0440\x02\u0442\x02\u0444\x02\u0446\x02\u0448\x02\u044A\x02\u044C\x02" +
		"\u044E\x02\u0450\x02\u0452\x02\u0454\x02\u0456\x02\u0458\x02\u045A\x02" +
		"\u045C\x02\u045E\x02\u0460\x02\u0462\x02\u0464\x02\u0466\x02\u0468\x02" +
		"\u046A\x02\u046C\x02\u046E\x02\u0470\x02\u0472\x02\u0474\x02\u0476\x02" +
		"\u0478\x02\u047A\x02\u047C\x02\u047E\x02\u0480\x02\u0482\x02\u0484\x02" +
		"\u0486\x02\u0488\x02\u048A\x02\u048C\x02\u048E\x02\u0490\x02\u0492\x02" +
		"\u0494\x02\u0496\x02\u0498\x02\u049A\x02\u049C\x02\u049E\x02\u04A0\x02" +
		"\u04A2\x02\u04A4\x02\u04A6\x02\x02H\x03\x02\xEC\xED\x07\x02PP\x84\x84" +
		"\xF5\xF5\u0114\u0114\u017E\u017E\x05\x02AA\u012C\u012C\u0205\u0205\x04" +
		"\x02\u012C\u012C\u0205\u0205\x03\x02\u01E5\u01E6\x04\x02\x10\x10\u0132" +
		"\u0132\x04\x02RRXX\x04\x02\u010C\u010C\u01EF\u01EF\x04\x02\x17\x17\u0100" +
		"\u0100\x03\x02\x18\x19\x05";
	private static readonly _serializedATNSegment3: string =
		"\x02\xF3\xF3\u0184\u0184\u01AF\u01AF\x06\x02\x98\x98\xC7\xC7\u0173\u0173" +
		"\u01AF\u01AF\x04\x02\u0180\u0180\u01F5\u01F5\x05\x02\u017B\u017B\u01BA" +
		"\u01BA\u01BE\u01BE\x04\x02\xCF\xCF\u01A3\u01A3\x04\x02AA\u017D\u017D\x03" +
		"\x02\u01CE\u01D0\x04\x02\u0119\u0119\u01A2\u01A2\x04\x02((++\x03\x02\xBF" +
		"\xC0\x04\x02\xE7\xE7\u0124\u0124\x05\x02\xE4\xE4\u010E\u010E\u0152\u0152" +
		"\x05\x02\u015E\u015E\u0221\u0221\u0225\u0225\x03\x02KL\x03\x02\xD7\xD8" +
		"\x03\x02%&\x03\x02\u015C\u015D\x03\x02\x90\x91\x03\x02\u0101\u0102\x03" +
		"\x02#$\x04\x02\u0139\u0139\u01A6\u01A6\x04\x02\x9E\x9E\u0190\u0190\x04" +
		"\x02\xDA\xDA\u0110\u0110\x03\x02\u0119\u011A\x04\x02ww\x8B\x8B\x05\x02" +
		"\x94\x94\u0165\u0165\u01B2\u01B3\x03\x0245\x04\x02\u022B\u022B\u022D\u022D" +
		"\x04\x02\u020B\u020B\u020D\u020E\x05\x02PP\u011E\u011E\u0153\u0153\x04" +
		"\x02\xFC\xFC\u01CD\u01CD\x04\x02\x1B\x1B\x89\x89\x04\x02aa\u0181\u0182" +
		"\x03\x02\u01D6\u01D7\x04\x02\u010D\u010D\u019D\u019D\x06\x02\u0121\u0122" +
		"\u013F\u013F\u0141\u0141\u01B7\u01B7\x04\x02\xCC\xCC\u01F1\u01F1\x04\x02" +
		"ff\u0108\u0108\x04\x02==\u01FC\u01FC\x04\x02\xE0\xE0\u0197\u0197\x03\x02" +
		"ij\x04\x02\x03\x03\u014D\u014D\x04\x02\xBC\xBC\u021A\u021A\t\x02\r\r\x10" +
		"\x11vv\x9A\x9A\u0132\u0133\u013E\u013E\u0140\u0140\x04\x02\v\v\u010C\u010C" +
		"\x05\x02\v\v\xD4\xD4\u010C\u010C\x04\x02\t\t))\x04\x02\u0104\u0104\u0138" +
		"\u0138\x04\x02\u0129\u0129\u01A8\u01A8\x04\x0222\u01EE\u01EE\x04\x02\xBE" +
		"\xBE\xC6\xC6\x04\x02\xAA\xAA\xBB\xBB\x04\x02\u0221\u0221\u0225\u0225\x04" +
		"\x02\u0210\u0210\u0228\u0228\x04\x02\x15\x15\u014B\u014B\x05\x02\u0135" +
		"\u0135\u0161\u0161\u020B\u020B\x04\x02\xF1\xF1\u0145\u0145W\x02\x03\x03" +
		"\x1A\x1A\x1C\x1C\x1E\x1F!!#&((+-//1189>?FGOOddffllnn\x82\x84\x8C\x8D\x8F" +
		"\x8F\x94\x95\x99\x99\x9E\x9E\xB7\xB7\xB9\xB9\xBD\xBD\xBF\xC1\xC4\xC4\xC7" +
		"\xC7\xCA\xCA\xCC\xCC\xD7\xD8\xDA\xDA\xDC\xDD\xE4\xE4\xE7\xE7\xEF\xF0\xFC" +
		"\xFC\u0104\u0104\u0106\u0106\u0108\u0108\u010A\u010B\u010E\u010E\u0110" +
		"\u0110\u0112\u0114\u011D\u011E\u0121\u0124\u012A\u012A\u0131\u0133\u0136" +
		"\u0136\u0139\u0139\u013F\u013F\u0141\u0141\u0144\u0144\u014D\u014D\u0152" +
		"\u0153\u0158\u0158\u0162\u0163\u0165\u0165\u016A\u016B\u016E\u016E\u0174" +
		"\u0175\u0177\u0177\u017A\u017A\u017E\u017E\u0181\u0181\u0189\u0189\u0190" +
		"\u0190\u0193\u0193\u01A1\u01A1\u01A6\u01A6\u01B1\u01B4\u01B7\u01B7\u01D4" +
		"\u01D4\u01DB\u01DB\u01E3\u01E4\u01E8\u01E8\u01EC\u01ED\u01F1\u01F1\u01F3" +
		"\u01F4\u0200\u0201\u0208\u020A\u020C\u020C\u022F\u022F\x04\x02\xCE\xCE" +
		"\u01F0\u01F0\x03\x02\u022A\u022D\x02\u1B95\x02\u04A8\x03\x02\x02\x02\x04" +
		"\u04AC\x03\x02\x02\x02\x06\u04B0\x03\x02\x02\x02\b\u04C3\x03\x02\x02\x02" +
		"\n\u04C8\x03\x02\x02\x02\f\u04D8\x03\x02\x02\x02\x0E\u04DA\x03\x02\x02" +
		"\x02\x10\u04EC\x03\x02\x02\x02\x12\u04F1\x03\x02\x02\x02\x14\u04F6\x03" +
		"\x02\x02\x02\x16\u04FB\x03\x02\x02\x02\x18\u0500\x03\x02\x02\x02\x1A\u0505" +
		"\x03\x02\x02\x02\x1C\u050A\x03\x02\x02\x02\x1E\u0516\x03\x02\x02\x02 " +
		"\u0518\x03\x02\x02\x02\"\u0524\x03\x02\x02\x02$\u0526\x03\x02\x02\x02" +
		"&\u0532\x03\x02\x02\x02(\u0542\x03\x02\x02\x02*\u0544\x03\x02\x02\x02" +
		",\u054F\x03\x02\x02\x02.\u055E\x03\x02\x02\x020\u0573\x03\x02\x02\x02" +
		"2\u057C\x03\x02\x02\x024\u0584\x03\x02\x02\x026\u058A\x03\x02\x02\x02" +
		"8\u058E\x03\x02\x02\x02:\u05A4\x03\x02\x02\x02<\u05A8\x03\x02\x02\x02" +
		">\u05AA\x03\x02\x02\x02@\u05C0\x03\x02\x02\x02B\u05C9\x03\x02\x02\x02" +
		"D\u05CC\x03\x02\x02\x02F\u05D2\x03\x02\x02\x02H\u05E0\x03\x02\x02\x02" +
		"J\u05E7\x03\x02\x02\x02L\u05F7\x03\x02\x02\x02N\u05FE\x03\x02\x02\x02" +
		"P\u0602\x03\x02\x02\x02R\u0604\x03\x02\x02\x02T\u0614\x03\x02\x02\x02" +
		"V\u061A\x03\x02\x02\x02X\u062B\x03\x02\x02\x02Z\u0642\x03\x02\x02\x02" +
		"\\\u0668\x03\x02\x02\x02^\u066A\x03\x02\x02\x02`\u0670\x03\x02\x02\x02" +
		"b\u067E\x03\x02\x02\x02d\u0692\x03\x02\x02\x02f\u069E\x03\x02\x02\x02" +
		"h\u06A9\x03\x02\x02\x02j\u06AB\x03\x02\x02\x02l\u06B7\x03\x02\x02\x02" +
		"n\u06BE\x03\x02\x02\x02p\u06CF\x03\x02\x02\x02r\u06D1\x03\x02\x02\x02" +
		"t\u06E2\x03\x02\x02\x02v\u06F1\x03\x02\x02\x02x\u06FC\x03\x02\x02\x02" +
		"z\u0707\x03\x02\x02\x02|\u0711\x03\x02\x02\x02~\u071A\x03\x02\x02\x02" +
		"\x80\u072B\x03\x02\x02\x02\x82\u073D\x03\x02\x02\x02\x84\u0744\x03\x02" +
		"\x02\x02\x86\u074E\x03\x02\x02\x02\x88\u0757\x03\x02\x02\x02\x8A\u076B" +
		"\x03\x02\x02\x02\x8C\u076D\x03\x02\x02\x02\x8E\u077B\x03\x02\x02\x02\x90" +
		"\u077F\x03\x02\x02\x02\x92\u0788\x03\x02\x02\x02\x94\u078C\x03\x02\x02" +
		"\x02\x96\u079B\x03\x02\x02\x02\x98\u07A8\x03\x02\x02\x02\x9A\u07AD\x03" +
		"\x02\x02\x02\x9C\u07B4\x03\x02\x02\x02\x9E\u07C6\x03\x02\x02\x02\xA0\u07C8" +
		"\x03\x02\x02\x02\xA2\u07D1\x03\x02\x02\x02\xA4\u07EE\x03\x02\x02\x02\xA6" +
		"\u07F1\x03\x02\x02\x02\xA8\u07F6\x03\x02\x02\x02\xAA\u07FA\x03\x02\x02" +
		"\x02\xAC\u0805\x03\x02\x02\x02\xAE\u0808\x03\x02\x02\x02\xB0\u080F\x03" +
		"\x02\x02\x02\xB2\u0816\x03\x02\x02\x02\xB4\u0833\x03\x02\x02\x02\xB6\u083A" +
		"\x03\x02\x02\x02\xB8\u083D\x03\x02\x02\x02\xBA\u0851\x03\x02\x02\x02\xBC" +
		"\u0858\x03\x02\x02\x02\xBE\u0860\x03\x02\x02\x02\xC0\u0870\x03\x02\x02" +
		"\x02\xC2\u0884\x03\x02\x02\x02\xC4\u0887\x03\x02\x02\x02\xC6\u0892\x03" +
		"\x02\x02\x02\xC8\u089D\x03\x02\x02\x02\xCA\u08A7\x03\x02\x02\x02\xCC\u08B0" +
		"\x03\x02\x02\x02\xCE\u08B2\x03\x02\x02\x02\xD0\u08C0\x03\x02\x02\x02\xD2" +
		"\u08C7\x03\x02\x02\x02\xD4\u08D0\x03\x02\x02\x02\xD6\u08D5\x03\x02\x02" +
		"\x02\xD8\u08DE\x03\x02\x02\x02\xDA\u08E7\x03\x02\x02\x02\xDC\u08F4\x03" +
		"\x02\x02\x02\xDE\u08F6\x03\x02\x02\x02\xE0\u0912\x03\x02\x02\x02\xE2\u0925" +
		"\x03\x02\x02\x02\xE4\u093C\x03\x02\x02\x02\xE6\u0943\x03\x02\x02\x02\xE8" +
		"\u0951\x03\x02\x02\x02\xEA\u0958\x03\x02\x02\x02\xEC\u0960\x03\x02\x02" +
		"\x02\xEE\u0968\x03\x02\x02\x02\xF0\u096F\x03\x02\x02\x02\xF2\u0976\x03" +
		"\x02\x02\x02\xF4\u097E\x03\x02\x02\x02\xF6\u0987\x03\x02\x02\x02\xF8\u0990" +
		"\x03\x02\x02\x02\xFA\u0999\x03\x02\x02\x02\xFC\u09A2\x03\x02\x02\x02\xFE" +
		"\u09AA\x03\x02\x02\x02\u0100\u09B1\x03\x02\x02\x02\u0102\u09C0\x03\x02" +
		"\x02\x02\u0104\u09C9\x03\x02\x02\x02\u0106\u09F3\x03\x02\x02\x02\u0108" +
		"\u09F6\x03\x02\x02\x02\u010A\u09F8\x03\x02\x02\x02\u010C\u09FA\x03\x02" +
		"\x02\x02\u010E\u09FD\x03\x02\x02\x02\u0110\u09FF\x03\x02\x02\x02\u0112" +
		"\u0A01\x03\x02\x02\x02\u0114\u0A03\x03\x02\x02\x02\u0116\u0A05\x03\x02" +
		"\x02\x02\u0118\u0A0D\x03\x02\x02\x02\u011A\u0A1B\x03\x02\x02\x02\u011C" +
		"\u0A29\x03\x02\x02\x02\u011E\u0A31\x03\x02\x02\x02\u0120\u0A39\x03\x02" +
		"\x02\x02\u0122\u0A3F\x03\x02\x02\x02\u0124\u0A45\x03\x02\x02\x02\u0126" +
		"\u0A4B\x03\x02\x02\x02\u0128\u0A53\x03\x02\x02\x02\u012A\u0A56\x03\x02" +
		"\x02\x02\u012C\u0A59\x03\x02\x02\x02\u012E\u0A5F\x03\x02\x02\x02\u0130" +
		"\u0A65\x03\x02\x02\x02\u0132\u0A6D\x03\x02\x02\x02\u0134\u0A76\x03\x02" +
		"\x02\x02\u0136\u0A78\x03\x02\x02\x02\u0138\u0A7A\x03\x02\x02\x02\u013A" +
		"\u0A7C\x03\x02\x02\x02\u013C\u0A8A\x03\x02\x02\x02\u013E\u0A8F\x03\x02" +
		"\x02\x02\u0140\u0A91\x03\x02\x02\x02\u0142\u0A93\x03\x02\x02\x02\u0144" +
		"\u0A9C\x03\x02\x02\x02\u0146\u0AA2\x03\x02\x02\x02\u0148\u0AB9\x03\x02" +
		"\x02\x02\u014A\u0ABD\x03\x02\x02\x02\u014C\u0ACC\x03\x02\x02\x02\u014E" +
		"\u0ACF\x03\x02\x02\x02\u0150\u0AD3\x03\x02\x02\x02\u0152\u0AD7\x03\x02" +
		"\x02\x02\u0154\u0ADD\x03\x02\x02\x02\u0156\u0ADF\x03\x02\x02\x02\u0158" +
		"\u0AED\x03\x02\x02\x02\u015A\u0AF7\x03\x02\x02\x02\u015C\u0B10\x03\x02" +
		"\x02\x02\u015E\u0B16\x03\x02\x02\x02\u0160\u0B1F\x03\x02\x02\x02\u0162" +
		"\u0B23\x03\x02\x02\x02\u0164\u0B28\x03\x02\x02\x02\u0166\u0B34\x03\x02" +
		"\x02\x02\u0168\u0B3C\x03\x02\x02\x02\u016A\u0B3F\x03\x02\x02\x02\u016C" +
		"\u0B49\x03\x02\x02\x02\u016E\u0B4C\x03\x02\x02\x02\u0170\u0B4F\x03\x02" +
		"\x02\x02\u0172\u0B55\x03\x02\x02\x02\u0174\u0B5D\x03\x02\x02\x02\u0176" +
		"\u0B66\x03\x02\x02\x02\u0178\u0B6C\x03\x02\x02\x02\u017A\u0B84\x03\x02" +
		"\x02\x02\u017C\u0B94\x03\x02\x02\x02\u017E\u0B99\x03\x02\x02\x02\u0180" +
		"\u0B9E\x03\x02\x02\x02\u0182\u0BA4\x03\x02\x02\x02\u0184\u0BA9\x03\x02" +
		"\x02\x02\u0186\u0BB3\x03\x02\x02\x02\u0188\u0BBA\x03\x02\x02\x02\u018A" +
		"\u0BBF\x03\x02\x02\x02\u018C\u0BC1\x03\x02\x02\x02\u018E\u0BC7\x03\x02" +
		"\x02\x02\u0190\u0BD2\x03\x02\x02\x02\u0192\u0BD4\x03\x02\x02\x02\u0194" +
		"\u0BDD\x03\x02\x02\x02\u0196\u0BED\x03\x02\x02\x02\u0198\u0BF5\x03\x02" +
		"\x02\x02\u019A\u0C06\x03\x02\x02\x02\u019C\u0C0A\x03\x02\x02\x02\u019E" +
		"\u0C10\x03\x02\x02\x02\u01A0\u0C16\x03\x02\x02\x02\u01A2\u0C1B\x03\x02" +
		"\x02\x02\u01A4\u0C29\x03\x02\x02\x02\u01A6\u0C2C\x03\x02\x02\x02\u01A8" +
		"\u0C2F\x03\x02\x02\x02\u01AA\u0C37\x03\x02\x02\x02\u01AC\u0C39\x03\x02" +
		"\x02\x02\u01AE\u0C41\x03\x02\x02\x02\u01B0\u0C44\x03\x02\x02\x02\u01B2" +
		"\u0C49\x03\x02\x02\x02\u01B4\u0C51\x03\x02\x02\x02\u01B6\u0C53\x03\x02" +
		"\x02\x02\u01B8\u0C74\x03\x02\x02\x02\u01BA\u0C79\x03\x02\x02\x02\u01BC" +
		"\u0C7F\x03\x02\x02\x02\u01BE\u0C86\x03\x02\x02\x02\u01C0\u0C88\x03\x02" +
		"\x02\x02\u01C2\u0C8E\x03\x02\x02\x02\u01C4\u0C91\x03\x02\x02\x02\u01C6" +
		"\u0C99\x03\x02\x02\x02\u01C8\u0C9D\x03\x02\x02\x02\u01CA\u0C9F\x03\x02" +
		"\x02\x02\u01CC\u0CA3\x03\x02\x02\x02\u01CE\u0CC6\x03\x02\x02\x02\u01D0" +
		"\u0CC9\x03\x02\x02\x02\u01D2\u0CD5\x03\x02\x02\x02\u01D4\u0CE3\x03\x02" +
		"\x02\x02\u01D6\u0CF7\x03\x02\x02\x02\u01D8\u0CF9\x03\x02\x02\x02\u01DA" +
		"\u0CFE\x03\x02\x02\x02\u01DC\u0D05\x03\x02\x02\x02\u01DE\u0D08\x03\x02" +
		"\x02\x02\u01E0\u0D0B\x03\x02\x02\x02\u01E2\u0D15\x03\x02\x02\x02\u01E4" +
		"\u0D1E\x03\x02\x02\x02\u01E6\u0D23\x03\x02\x02\x02\u01E8\u0D27\x03\x02" +
		"\x02\x02\u01EA\u0D2E\x03\x02\x02\x02\u01EC\u0D36\x03\x02\x02\x02\u01EE" +
		"\u0D5B\x03\x02\x02\x02\u01F0\u0D6C\x03\x02\x02\x02\u01F2\u0D78\x03\x02" +
		"\x02\x02\u01F4\u0D7E\x03\x02\x02\x02\u01F6\u0D80\x03\x02\x02\x02\u01F8" +
		"\u0D84\x03\x02\x02\x02\u01FA\u0D89\x03\x02\x02\x02\u01FC\u0D97\x03\x02" +
		"\x02\x02\u01FE\u0D9D\x03\x02\x02\x02\u0200\u0DA2\x03\x02\x02\x02\u0202" +
		"\u0DA8\x03\x02\x02\x02\u0204\u0DB7\x03\x02\x02\x02\u0206\u0DBA\x03\x02" +
		"\x02\x02\u0208\u0DC5\x03\x02\x02\x02\u020A\u0DC7\x03\x02\x02\x02\u020C" +
		"\u0DD2\x03\x02\x02\x02\u020E\u0DD8\x03\x02\x02\x02\u0210\u0DDD\x03\x02" +
		"\x02\x02\u0212\u0DE4\x03\x02\x02\x02\u0214\u0DEB\x03\x02\x02\x02\u0216" +
		"\u0DF4\x03\x02\x02\x02\u0218\u0E02\x03\x02\x02\x02\u021A\u0E38\x03\x02" +
		"\x02\x02\u021C\u0E3A\x03\x02\x02\x02\u021E\u0E4B\x03\x02\x02\x02\u0220" +
		"\u0E61\x03\x02\x02\x02\u0222\u0E64\x03\x02\x02\x02\u0224\u0E69\x03\x02" +
		"\x02\x02\u0226\u0E6D\x03\x02\x02\x02\u0228\u0E7D\x03\x02\x02\x02\u022A" +
		"\u0E88\x03\x02\x02\x02\u022C\u0E9A\x03\x02\x02\x02\u022E\u0EA1\x03\x02" +
		"\x02\x02\u0230\u0EA3\x03\x02\x02\x02\u0232\u0EA9\x03\x02\x02\x02\u0234" +
		"\u0EAB\x03\x02\x02\x02\u0236\u0EAF\x03\x02\x02\x02\u0238\u0EB5\x03\x02" +
		"\x02\x02\u023A\u0EBB\x03\x02\x02\x02\u023C\u0EC3\x03\x02\x02\x02\u023E" +
		"\u0EDA\x03\x02\x02\x02\u0240\u0EE3\x03\x02\x02\x02\u0242\u0EE9\x03\x02" +
		"\x02\x02\u0244\u0EFC\x03\x02\x02\x02\u0246\u0EFF\x03\x02\x02\x02\u0248" +
		"\u0F0D\x03\x02\x02\x02\u024A\u0F14\x03\x02\x02\x02\u024C\u0F27\x03\x02" +
		"\x02\x02\u024E\u0F29\x03\x02\x02\x02\u0250\u0F2C\x03\x02\x02\x02\u0252" +
		"\u0F37\x03\x02\x02\x02\u0254\u0F39\x03\x02\x02\x02\u0256\u0F3F\x03\x02" +
		"\x02\x02\u0258\u0F45\x03\x02\x02\x02\u025A\u0F57\x03\x02\x02\x02\u025C" +
		"\u0F65\x03\x02\x02\x02\u025E\u0F72\x03\x02\x02\x02\u0260\u0F74\x03\x02" +
		"\x02\x02\u0262\u0F7A\x03\x02\x02\x02\u0264\u0F7F\x03\x02\x02\x02\u0266" +
		"\u0F87\x03\x02\x02\x02\u0268\u0F98\x03\x02\x02\x02\u026A\u0F9C\x03\x02" +
		"\x02\x02\u026C\u0F9E\x03\x02\x02\x02\u026E\u0FAC\x03\x02\x02\x02\u0270" +
		"\u0FBF\x03\x02\x02\x02\u0272\u0FD0\x03\x02\x02\x02\u0274\u0FD2\x03\x02" +
		"\x02\x02\u0276\u0FD7\x03\x02\x02\x02\u0278\u0FDD\x03\x02\x02\x02\u027A" +
		"\u0FE2\x03\x02\x02\x02\u027C\u0FF8\x03\x02\x02\x02\u027E\u0FFE\x03\x02" +
		"\x02\x02\u0280\u1006\x03\x02\x02\x02\u0282\u100E\x03\x02\x02\x02\u0284" +
		"\u1014\x03\x02\x02\x02\u0286\u1018\x03\x02\x02\x02\u0288\u101C\x03\x02" +
		"\x02\x02\u028A\u101F\x03\x02\x02\x02\u028C\u1032\x03\x02\x02\x02\u028E" +
		"\u103C\x03\x02\x02\x02\u0290\u1053\x03\x02\x02\x02\u0292\u1055\x03\x02" +
		"\x02\x02\u0294\u1059\x03\x02\x02\x02\u0296\u1063\x03\x02\x02\x02\u0298" +
		"\u1075\x03\x02\x02\x02\u029A\u1077\x03\x02\x02\x02\u029C\u107A\x03\x02" +
		"\x02\x02\u029E\u107D\x03\x02\x02\x02\u02A0\u1088\x03\x02\x02\x02\u02A2" +
		"\u108B\x03\x02\x02\x02\u02A4\u1090\x03\x02\x02\x02\u02A6\u1095\x03\x02" +
		"\x02\x02\u02A8\u1099\x03\x02\x02\x02\u02AA\u10A7\x03\x02\x02\x02\u02AC" +
		"\u10A9\x03\x02\x02\x02\u02AE\u10AD\x03\x02\x02\x02\u02B0\u10B0\x03\x02" +
		"\x02\x02\u02B2\u10B2\x03\x02\x02\x02\u02B4\u10BA\x03\x02\x02\x02\u02B6" +
		"\u10C9\x03\x02\x02\x02\u02B8\u10CB\x03\x02\x02\x02\u02BA\u10D5\x03\x02" +
		"\x02\x02\u02BC\u10E1\x03\x02\x02\x02\u02BE\u10EC\x03\x02\x02\x02\u02C0" +
		"\u10F5\x03\x02\x02\x02\u02C2\u10FB\x03\x02\x02\x02\u02C4\u1104\x03\x02" +
		"\x02\x02\u02C6\u110A\x03\x02\x02\x02\u02C8\u1112\x03\x02\x02\x02\u02CA" +
		"\u1118\x03\x02\x02\x02\u02CC\u111F\x03\x02\x02\x02\u02CE\u112A\x03\x02" +
		"\x02\x02\u02D0\u1136\x03\x02\x02\x02\u02D2\u113E\x03\x02\x02\x02\u02D4" +
		"\u1145\x03\x02\x02\x02\u02D6\u114D\x03\x02\x02\x02\u02D8\u1153\x03\x02" +
		"\x02\x02\u02DA\u115B\x03\x02\x02\x02\u02DC\u1165\x03\x02\x02\x02\u02DE" +
		"\u116E\x03\x02\x02\x02\u02E0\u1173\x03\x02\x02\x02\u02E2\u1178\x03\x02" +
		"\x02\x02\u02E4\u1180\x03\x02\x02\x02\u02E6\u119A\x03\x02\x02\x02\u02E8" +
		"\u11A6\x03\x02\x02\x02\u02EA\u11B8\x03\x02\x02\x02\u02EC\u11BF\x03\x02" +
		"\x02\x02\u02EE\u11C7\x03\x02\x02\x02\u02F0\u11CD\x03\x02\x02\x02\u02F2" +
		"\u11D6\x03\x02\x02\x02\u02F4\u11D9\x03\x02\x02\x02\u02F6\u11DF\x03\x02" +
		"\x02\x02\u02F8\u11EB\x03\x02\x02\x02\u02FA\u11F3\x03\x02\x02\x02\u02FC" +
		"\u11FC\x03\x02\x02\x02\u02FE\u11FE\x03\x02\x02\x02\u0300\u1206\x03\x02" +
		"\x02\x02\u0302\u1208\x03\x02\x02\x02\u0304\u121C\x03\x02\x02\x02\u0306" +
		"\u1220\x03\x02\x02\x02\u0308\u1224\x03\x02\x02\x02\u030A\u122D\x03\x02" +
		"\x02\x02\u030C\u122F\x03\x02\x02\x02\u030E\u1233\x03\x02\x02\x02\u0310" +
		"\u123C\x03\x02\x02\x02\u0312\u1242\x03\x02\x02\x02\u0314\u124B\x03\x02" +
		"\x02\x02\u0316\u1251\x03\x02\x02\x02\u0318\u1259\x03\x02\x02\x02\u031A" +
		"\u125F\x03\x02\x02\x02\u031C\u1265\x03\x02\x02\x02\u031E\u126B\x03\x02" +
		"\x02\x02\u0320\u1275\x03\x02\x02\x02\u0322\u1280\x03\x02\x02\x02\u0324" +
		"\u1284\x03\x02\x02\x02\u0326\u1289\x03\x02\x02\x02\u0328\u1295\x03\x02" +
		"\x02\x02\u032A\u1297\x03\x02\x02\x02\u032C\u12A1\x03\x02\x02\x02\u032E" +
		"\u12A7\x03\x02\x02\x02\u0330\u12AA\x03\x02\x02\x02\u0332\u12B0\x03\x02" +
		"\x02\x02\u0334\u12B7\x03\x02\x02\x02\u0336\u12BC\x03\x02\x02\x02\u0338" +
		"\u12C2\x03\x02\x02\x02\u033A\u12E2\x03\x02\x02\x02\u033C\u12E6\x03\x02" +
		"\x02\x02\u033E\u12ED\x03\x02\x02\x02\u0340\u12F3\x03\x02\x02\x02\u0342" +
		"\u1301\x03\x02\x02\x02\u0344\u1314\x03\x02\x02\x02\u0346\u1316\x03\x02" +
		"\x02\x02\u0348\u1322\x03\x02\x02\x02\u034A\u132A\x03\x02\x02\x02\u034C" +
		"\u1332\x03\x02\x02\x02\u034E\u133B\x03\x02\x02\x02\u0350\u1340\x03\x02" +
		"\x02\x02\u0352\u1346\x03\x02\x02\x02\u0354\u134E\x03\x02\x02\x02\u0356" +
		"\u1354\x03\x02\x02\x02\u0358\u135A\x03\x02\x02\x02\u035A\u1369\x03\x02" +
		"\x02\x02\u035C\u136C\x03\x02\x02\x02\u035E\u137A\x03\x02\x02\x02\u0360" +
		"\u137D\x03\x02\x02\x02\u0362\u1390\x03\x02\x02\x02\u0364\u1393\x03\x02" +
		"\x02\x02\u0366\u139F\x03\x02\x02\x02\u0368\u13AC\x03\x02\x02\x02\u036A" +
		"\u13BA\x03\x02\x02\x02\u036C\u13BE\x03\x02\x02\x02\u036E\u13C1\x03\x02" +
		"\x02\x02\u0370\u13C8\x03\x02\x02\x02\u0372\u13CC\x03\x02\x02\x02\u0374" +
		"\u13D5\x03\x02\x02\x02\u0376\u13D9\x03\x02\x02\x02\u0378\u13DE\x03\x02" +
		"\x02\x02\u037A\u13E0\x03\x02\x02\x02\u037C\u13EA\x03\x02\x02\x02\u037E" +
		"\u13F5\x03\x02\x02\x02\u0380\u1401\x03\x02\x02\x02\u0382\u140C\x03\x02" +
		"\x02\x02\u0384\u1410\x03\x02\x02\x02\u0386\u1412\x03\x02\x02\x02\u0388" +
		"\u1432\x03\x02\x02\x02\u038A\u143E\x03\x02\x02\x02\u038C\u1448\x03\x02" +
		"\x02\x02\u038E\u145A\x03\x02\x02\x02\u0390\u1461\x03\x02\x02\x02\u0392" +
		"\u1469\x03\x02\x02\x02\u0394\u1472\x03\x02\x02\x02\u0396\u1475\x03\x02" +
		"\x02\x02\u0398\u147B\x03\x02\x02\x02\u039A\u1484\x03\x02\x02\x02\u039C" +
		"\u1487\x03\x02\x02\x02\u039E\u148D\x03\x02\x02\x02\u03A0\u1499\x03\x02" +
		"\x02\x02\u03A2\u14A7\x03\x02\x02\x02\u03A4\u14CA\x03\x02\x02\x02\u03A6" +
		"\u14CF\x03\x02\x02\x02\u03A8\u14E3\x03\x02\x02\x02\u03AA\u14ED\x03\x02" +
		"\x02\x02\u03AC\u14EF\x03\x02\x02\x02\u03AE\u14F8\x03\x02\x02\x02\u03B0" +
		"\u14FD\x03\x02\x02\x02\u03B2\u1501\x03\x02\x02\x02\u03B4\u1506\x03\x02" +
		"\x02\x02\u03B6\u1516\x03\x02\x02\x02\u03B8\u1521\x03\x02\x02\x02\u03BA" +
		"\u152D\x03\x02\x02\x02\u03BC\u1534\x03\x02\x02\x02\u03BE\u1536\x03\x02" +
		"\x02\x02\u03C0\u153C\x03\x02\x02\x02\u03C2\u153E\x03\x02\x02\x02\u03C4" +
		"\u1542\x03\x02\x02\x02\u03C6\u1546\x03\x02\x02\x02\u03C8\u1549\x03\x02" +
		"\x02\x02\u03CA\u155B\x03\x02\x02\x02\u03CC\u1565\x03\x02\x02\x02\u03CE" +
		"\u1570\x03\x02\x02\x02\u03D0\u1578\x03\x02\x02\x02\u03D2\u157E\x03\x02" +
		"\x02\x02\u03D4\u1585\x03\x02\x02\x02\u03D6\u158B\x03\x02\x02\x02\u03D8" +
		"\u1592\x03\x02\x02\x02\u03DA\u1597\x03\x02\x02\x02\u03DC\u159D\x03\x02" +
		"\x02\x02\u03DE\u15A3\x03\x02\x02\x02\u03E0\u15B9\x03\x02\x02\x02\u03E2" +
		"\u15BC\x03\x02\x02\x02\u03E4\u15D3\x03\x02\x02\x02\u03E6\u15D5\x03\x02" +
		"\x02\x02\u03E8\u15EC\x03\x02\x02\x02\u03EA\u15F1\x03\x02\x02\x02\u03EC" +
		"\u15FA\x03\x02\x02\x02\u03EE\u15FE\x03\x02\x02\x02\u03F0\u1603\x03\x02" +
		"\x02\x02\u03F2\u1606\x03\x02\x02\x02\u03F4\u160F\x03\x02\x02\x02\u03F6" +
		"\u161B\x03\x02\x02\x02\u03F8\u1624\x03\x02\x02\x02\u03FA\u162F\x03\x02" +
		"\x02\x02\u03FC\u1639\x03\x02\x02\x02\u03FE\u1645\x03\x02\x02\x02\u0400" +
		"\u164E\x03\x02\x02\x02\u0402\u165A\x03\x02\x02\x02\u0404\u1664\x03\x02" +
		"\x02\x02\u0406\u1671\x03\x02\x02\x02\u0408\u167A\x03\x02\x02\x02\u040A" +
		"\u1685\x03\x02\x02\x02\u040C\u168C\x03\x02\x02\x02\u040E\u168F\x03\x02" +
		"\x02\x02\u0410\u1696\x03\x02\x02\x02\u0412\u169A\x03\x02\x02\x02\u0414" +
		"\u16A3\x03\x02\x02\x02\u0416\u16AC\x03\x02\x02\x02\u0418\u16AE\x03\x02" +
		"\x02\x02\u041A\u16B5\x03\x02\x02\x02\u041C\u16BF\x03\x02\x02\x02\u041E" +
		"\u16CA\x03\x02\x02\x02\u0420\u16CC\x03\x02\x02\x02\u0422\u16DC\x03\x02" +
		"\x02\x02\u0424\u16F4\x03\x02\x02\x02\u0426\u1704\x03\x02\x02\x02\u0428" +
		"\u1706\x03\x02\x02\x02\u042A\u170F\x03\x02\x02\x02\u042C\u1713\x03\x02" +
		"\x02\x02\u042E\u1719\x03\x02\x02\x02\u0430\u1721\x03\x02\x02\x02\u0432" +
		"\u174F\x03\x02\x02\x02\u0434\u1760\x03\x02\x02\x02\u0436\u1762\x03\x02" +
		"\x02\x02\u0438\u1778\x03\x02\x02\x02\u043A\u178F\x03\x02\x02\x02\u043C" +
		"\u1797\x03\x02\x02\x02\u043E\u1799\x03\x02\x02\x02\u0440\u17A6\x03\x02" +
		"\x02\x02\u0442\u17B3\x03\x02\x02\x02\u0444\u17B9\x03\x02\x02\x02\u0446" +
		"\u17BD\x03\x02\x02\x02\u0448\u17CA\x03\x02\x02\x02\u044A\u17CD\x03\x02" +
		"\x02\x02\u044C\u17D0\x03\x02\x02\x02\u044E\u17D5\x03\x02\x02\x02\u0450" +
		"\u17D7\x03\x02\x02\x02\u0452\u17DA\x03\x02\x02\x02\u0454\u17DD\x03\x02" +
		"\x02\x02\u0456\u17E0\x03\x02\x02\x02\u0458\u17E3\x03\x02\x02\x02\u045A" +
		"\u17E6\x03\x02\x02\x02\u045C\u17E9\x03\x02\x02\x02\u045E\u17EB\x03\x02" +
		"\x02\x02\u0460\u17ED\x03\x02\x02\x02\u0462\u17EF\x03\x02\x02\x02\u0464" +
		"\u17F1\x03\x02\x02\x02\u0466\u17F3\x03\x02\x02\x02\u0468\u17F5\x03\x02" +
		"\x02\x02\u046A\u17F7\x03\x02\x02\x02\u046C\u17FC\x03\x02\x02\x02\u046E" +
		"\u17FE\x03\x02\x02\x02\u0470\u1800\x03\x02\x02\x02\u0472\u1808\x03\x02" +
		"\x02\x02\u0474\u180A\x03\x02\x02\x02\u0476\u180C\x03\x02\x02\x02\u0478" +
		"\u180E\x03\x02\x02\x02\u047A\u1810\x03\x02\x02\x02\u047C\u1812\x03\x02" +
		"\x02\x02\u047E\u1816\x03\x02\x02\x02\u0480\u181D\x03\x02\x02\x02\u0482" +
		"\u1821\x03\x02\x02\x02\u0484\u1823\x03\x02\x02\x02\u0486\u1825\x03\x02" +
		"\x02\x02\u0488\u1827\x03\x02\x02\x02\u048A\u1829\x03\x02\x02\x02\u048C" +
		"\u182D\x03\x02\x02\x02\u048E\u182F\x03\x02\x02\x02\u0490\u1831\x03\x02" +
		"\x02\x02\u0492\u1833\x03\x02\x02\x02\u0494\u1835\x03\x02\x02\x02\u0496" +
		"\u183D\x03\x02\x02\x02\u0498\u183F\x03\x02\x02\x02\u049A\u1844\x03\x02" +
		"\x02\x02\u049C\u1846\x03\x02\x02\x02\u049E\u1848\x03\x02\x02\x02\u04A0" +
		"\u1850\x03\x02\x02\x02\u04A2\u1867\x03\x02\x02\x02\u04A4\u188A\x03\x02" +
		"\x02\x02\u04A6\u188D\x03\x02\x02\x02\u04A8\u04A9\x05\x04\x03\x02\u04A9" +
		"\u04AA\x07\x02\x02\x03\u04AA\x03\x03\x02\x02\x02\u04AB\u04AD\x05\x06\x04" +
		"\x02\u04AC\u04AB\x03\x02\x02\x02\u04AD\u04AE\x03\x02\x02\x02\u04AE\u04AC" +
		"\x03\x02\x02\x02\u04AE\u04AF\x03\x02\x02\x02\u04AF\x05\x03\x02\x02\x02" +
		"\u04B0\u04B2\x05\n\x06\x02\u04B1\u04B3\x05\x1C\x0F\x02\u04B2\u04B1\x03" +
		"\x02\x02\x02\u04B2\u04B3\x03\x02\x02\x02\u04B3\u04B5\x03\x02\x02\x02\u04B4" +
		"\u04B6\x05\x9CO\x02\u04B5\u04B4\x03\x02\x02\x02\u04B5\u04B6\x03\x02\x02" +
		"\x02\u04B6\u04B8\x03\x02\x02\x02\u04B7\u04B9\x05\u01FA\xFE\x02\u04B8\u04B7" +
		"\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BD\x03\x02\x02\x02" +
		"\u04BA\u04BC\x05\x06\x04\x02\u04BB\u04BA\x03\x02\x02\x02\u04BC\u04BF\x03" +
		"\x02\x02\x02\u04BD\u04BB\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE" +
		"\u04C1\x03\x02\x02\x02\u04BF\u04BD\x03\x02\x02\x02\u04C0\u04C2\x05\b\x05" +
		"\x02\u04C1\u04C0\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2\x07" +
		"\x03\x02\x02\x02\u04C3\u04C4\x07\xA0\x02\x02\u04C4\u04C5\x07\u016B\x02" +
		"\x02\u04C5\u04C6\x05\u0482\u0242\x02\u04C6\u04C7\x07\u0218\x02\x02\u04C7" +
		"\t\x03\x02\x02\x02\u04C8\u04C9\t\x02\x02\x02\u04C9\u04CA\x07\x93\x02\x02" +
		"\u04CA\u04CB\x07\u0218\x02\x02\u04CB\u04CF\x05\x0E\b\x02\u04CC\u04CE\x05" +
		"\f\x07\x02\u04CD\u04CC\x03\x02\x02\x02\u04CE\u04D1\x03\x02\x02\x02\u04CF" +
		"\u04CD\x03\x02\x02\x02\u04CF\u04D0\x03\x02\x02\x02\u04D0\v\x03\x02\x02" +
		"\x02\u04D1\u04CF\x03\x02\x02\x02\u04D2\u04D9\x05\x10\t\x02\u04D3\u04D9" +
		"\x05\x12\n\x02\u04D4\u04D9\x05\x14\v\x02\u04D5\u04D9\x05\x16\f\x02\u04D6" +
		"\u04D9\x05\x18\r\x02\u04D7\u04D9\x05\x1A\x0E\x02\u04D8\u04D2\x03\x02\x02" +
		"\x02\u04D8\u04D3\x03\x02\x02\x02\u04D8\u04D4\x03\x02\x02\x02\u04D8\u04D5" +
		"\x03\x02\x02\x02\u04D8\u04D6\x03\x02\x02\x02\u04D8\u04D7\x03\x02\x02\x02" +
		"\u04D9\r\x03\x02\x02\x02\u04DA\u04DB\x07\u016C\x02\x02\u04DB\u04DC\x07" +
		"\u0218\x02\x02\u04DC\u04E4\x05\u0482\u0242\x02\u04DD\u04DF\x07\u0100\x02" +
		"\x02\u04DE\u04DD\x03\x02\x02\x02\u04DE\u04DF\x03\x02\x02\x02\u04DF\u04E0" +
		"\x03\x02\x02\x02\u04E0\u04E2\t\x03\x02\x02\u04E1\u04E3\x07\u016B\x02\x02" +
		"\u04E2\u04E1\x03\x02\x02\x02\u04E2\u04E3\x03\x02\x02\x02\u04E3\u04E5\x03" +
		"\x02\x02\x02\u04E4\u04DE\x03\x02\x02\x02\u04E4\u04E5\x03\x02\x02\x02\u04E5" +
		"\u04E7\x03\x02\x02\x02\u04E6\u04E8\x07\u0218\x02\x02\u04E7\u04E6\x03\x02" +
		"\x02\x02\u04E7\u04E8\x03\x02\x02\x02\u04E8\u04EA\x03\x02\x02\x02\u04E9" +
		"\u04EB\x05\u04A6\u0254\x02\u04EA\u04E9\x03\x02\x02\x02\u04EA\u04EB\x03" +
		"\x02\x02\x02\u04EB\x0F\x03\x02\x02\x02\u04EC\u04ED\x07\"\x02\x02\u04ED" +
		"\u04EF\x07\u0218\x02\x02\u04EE\u04F0\x05\u04A6\u0254\x02\u04EF\u04EE\x03" +
		"\x02\x02\x02\u04EF\u04F0\x03\x02\x02\x02\u04F0\x11\x03\x02\x02\x02\u04F1" +
		"\u04F2\x07\xFB\x02\x02\u04F2\u04F4\x07\u0218\x02\x02\u04F3\u04F5\x05\u04A6" +
		"\u0254\x02\u04F4\u04F3\x03\x02\x02\x02\u04F4\u04F5\x03\x02\x02\x02\u04F5" +
		"\x13\x03\x02\x02\x02\u04F6\u04F7\x07s\x02\x02\u04F7\u04F9\x07\u0218\x02" +
		"\x02\u04F8\u04FA\x05\u04A6\u0254\x02\u04F9\u04F8\x03\x02\x02\x02\u04F9" +
		"\u04FA\x03\x02\x02\x02\u04FA\x15\x03\x02\x02\x02\u04FB\u04FC\x07r\x02" +
		"\x02\u04FC\u04FE\x07\u0218\x02\x02\u04FD\u04FF\x05\u04A6\u0254\x02\u04FE" +
		"\u04FD\x03\x02\x02\x02\u04FE\u04FF\x03\x02\x02\x02\u04FF\x17\x03\x02\x02" +
		"\x02\u0500\u0501\x07\u01A7\x02\x02\u0501\u0503\x07\u0218\x02\x02\u0502" +
		"\u0504\x05\u04A6\u0254\x02\u0503\u0502\x03\x02\x02\x02\u0503\u0504\x03" +
		"\x02\x02\x02\u0504\x19\x03\x02\x02\x02\u0505\u0506\x07\u0187\x02\x02\u0506" +
		"\u0508\x07\u0218\x02\x02\u0507\u0509\x05\u04A6\u0254\x02\u0508\u0507\x03" +
		"\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509\x1B\x03\x02\x02\x02\u050A" +
		"\u050B\x07\xBA\x02\x02\u050B\u050C\x07\x93\x02\x02\u050C\u0510\x07\u0218" +
		"\x02\x02\u050D\u050F\x05\x1E\x10\x02\u050E\u050D\x03\x02\x02\x02\u050F" +
		"\u0512\x03\x02\x02\x02\u0510\u050E\x03\x02\x02\x02\u0510\u0511\x03\x02" +
		"\x02\x02\u0511\x1D\x03\x02\x02\x02\u0512\u0510\x03\x02\x02\x02\u0513\u0517" +
		"\x05 \x11\x02\u0514\u0517\x058\x1D\x02\u0515\u0517\x05f4\x02\u0516\u0513" +
		"\x03\x02\x02\x02\u0516\u0514\x03\x02\x02\x02\u0516\u0515\x03\x02\x02\x02" +
		"\u0517\x1F\x03\x02\x02\x02\u0518\u0519\x07_\x02\x02\u0519\u051A\x07\u01A5" +
		"\x02\x02\u051A\u051E\x07\u0218\x02\x02\u051B\u051D\x05\"\x12\x02\u051C" +
		"\u051B\x03\x02\x02\x02\u051D\u0520\x03\x02\x02\x02\u051E\u051C\x03\x02" +
		"\x02\x02\u051E\u051F\x03\x02\x02\x02\u051F!\x03\x02\x02\x02\u0520\u051E" +
		"\x03\x02\x02\x02\u0521\u0525\x05$\x13\x02\u0522\u0525\x05";
	private static readonly _serializedATNSegment4: string =
		"&\x14\x02\u0523\u0525\x058\x1D\x02\u0524\u0521\x03\x02\x02\x02\u0524\u0522" +
		"\x03\x02\x02\x02\u0524\u0523\x03\x02\x02\x02\u0525#\x03\x02\x02\x02\u0526" +
		"\u0527\x07\u01C3\x02\x02\u0527\u0528\x07\u0218\x02\x02\u0528\u052E\x05" +
		"\u0466\u0234\x02\u0529\u052B\x07\u0204\x02\x02\u052A\u0529\x03\x02\x02" +
		"\x02\u052A\u052B\x03\x02\x02\x02\u052B\u052C\x03\x02\x02\x02\u052C\u052D" +
		"\x07\x7F\x02\x02\u052D\u052F\x07\u012B\x02\x02\u052E\u052A\x03\x02\x02" +
		"\x02\u052E\u052F\x03\x02\x02\x02\u052F\u0530\x03\x02\x02\x02\u0530\u0531" +
		"\x07\u0218\x02\x02\u0531%\x03\x02\x02\x02\u0532\u0533\x07\u0142\x02\x02" +
		"\u0533\u0534\x07\u0218\x02\x02\u0534\u0538\x05\u0466\u0234\x02\u0535\u0537" +
		"\x05(\x15\x02\u0536\u0535\x03\x02\x02\x02\u0537\u053A\x03\x02\x02\x02" +
		"\u0538\u0536\x03\x02\x02\x02\u0538\u0539\x03\x02\x02\x02\u0539\u053B\x03" +
		"\x02\x02\x02\u053A\u0538\x03\x02\x02\x02\u053B\u053C\x07\u0218\x02\x02" +
		"\u053C\'\x03\x02\x02\x02\u053D\u0543\x05*\x16\x02\u053E\u0543\x05,\x17" +
		"\x02\u053F\u0543\x05.\x18\x02\u0540\u0543\x054\x1B\x02\u0541\u0543\x05" +
		"6\x1C\x02\u0542\u053D\x03\x02\x02\x02\u0542\u053E\x03\x02\x02\x02\u0542" +
		"\u053F\x03\x02\x02\x02\u0542\u0540\x03\x02\x02\x02\u0542\u0541\x03\x02" +
		"\x02\x02\u0543)\x03\x02\x02\x02\u0544\u0546\x07\u0127\x02\x02\u0545\u0547" +
		"\x07\u01B9\x02\x02\u0546\u0545\x03\x02\x02\x02\u0546\u0547\x03\x02\x02" +
		"\x02\u0547\u054A\x03\x02\x02\x02\u0548\u054B\x05\u049C\u024F\x02\u0549" +
		"\u054B\x05\u0494\u024B\x02\u054A\u0548\x03\x02\x02\x02\u054A\u0549\x03" +
		"\x02\x02\x02\u054B\u054D\x03\x02\x02\x02\u054C\u054E\t\x04\x02\x02\u054D" +
		"\u054C\x03\x02\x02\x02\u054D\u054E\x03\x02\x02\x02\u054E+\x03\x02\x02" +
		"\x02\u054F\u0551\x07\x8F\x02\x02\u0550\u0552\x07\u01B9\x02\x02\u0551\u0550" +
		"\x03\x02\x02\x02\u0551\u0552\x03\x02\x02\x02\u0552\u0554\x03\x02\x02\x02" +
		"\u0553\u0555\x07\u0100\x02\x02\u0554\u0553\x03\x02\x02\x02\u0554\u0555" +
		"\x03\x02\x02\x02\u0555\u0558\x03\x02\x02\x02\u0556\u0559\x05\u049C\u024F" +
		"\x02\u0557\u0559\x05\u0494\u024B\x02\u0558\u0556\x03\x02\x02\x02\u0558" +
		"\u0557\x03\x02\x02\x02\u0559\u055B\x03\x02\x02\x02\u055A\u055C\t\x05\x02" +
		"\x02\u055B\u055A\x03\x02\x02\x02\u055B\u055C\x03\x02\x02\x02\u055C-\x03" +
		"\x02\x02\x02\u055D\u055F\x07\u016B\x02\x02\u055E\u055D\x03\x02\x02\x02" +
		"\u055E\u055F\x03\x02\x02\x02\u055F\u0561\x03\x02\x02\x02\u0560\u0562\x07" +
		"J\x02\x02\u0561\u0560\x03\x02\x02\x02\u0561\u0562\x03\x02\x02\x02\u0562" +
		"\u0563\x03\x02\x02\x02\u0563\u0565\x07\u01AE\x02\x02\u0564\u0566\x07\u0100" +
		"\x02\x02\u0565\u0564\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566" +
		"\u0568\x03\x02\x02\x02\u0567\u0569\x05\u045C\u022F\x02\u0568\u0567\x03" +
		"\x02\x02\x02\u0569\u056A\x03\x02\x02\x02\u056A\u0568\x03\x02\x02\x02\u056A" +
		"\u056B\x03\x02\x02\x02\u056B\u056D\x03\x02\x02\x02\u056C\u056E\x050\x19" +
		"\x02\u056D\u056C\x03\x02\x02\x02\u056D\u056E\x03\x02\x02\x02\u056E\u0570" +
		"\x03\x02\x02\x02\u056F\u0571\x052\x1A\x02\u0570\u056F\x03\x02\x02\x02" +
		"\u0570\u0571\x03\x02\x02\x02\u0571/\x03\x02\x02\x02\u0572\u0574\x07\xD6" +
		"\x02\x02\u0573\u0572\x03\x02\x02\x02\u0573\u0574\x03\x02\x02\x02\u0574" +
		"\u0575\x03\x02\x02\x02\u0575\u0577\x07\x10\x02\x02\u0576\u0578\x07\u0100" +
		"\x02\x02\u0577\u0576\x03\x02\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578" +
		"\u0579\x03\x02\x02\x02\u0579\u057A\x05\u045C\u022F\x02\u057A1\x03\x02" +
		"\x02\x02\u057B\u057D\x07\xD6\x02\x02\u057C\u057B\x03\x02\x02\x02\u057C" +
		"\u057D\x03\x02\x02\x02\u057D\u057E\x03\x02\x02\x02\u057E\u0580\x07\u0132" +
		"\x02\x02\u057F\u0581\x07\u0100\x02\x02\u0580\u057F\x03\x02\x02\x02\u0580" +
		"\u0581\x03\x02\x02\x02\u0581\u0582\x03\x02\x02\x02\u0582\u0583\x05\u045C" +
		"\u022F\x02\u05833\x03\x02\x02\x02\u0584\u0586\x07\u01A9\x02\x02\u0585" +
		"\u0587\x07\u0100\x02\x02\u0586\u0585\x03\x02\x02\x02\u0586\u0587\x03\x02" +
		"\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588\u0589\x05\u049C\u024F\x02\u0589" +
		"5\x03\x02\x02\x02\u058A\u058B\x07@\x02\x02\u058B\u058C\x07\u01B0\x02\x02" +
		"\u058C\u058D\x07\u0218\x02\x02\u058D7\x03\x02\x02\x02\u058E\u058F\x07" +
		"\u01C6\x02\x02\u058F\u0597\x07\u0218\x02\x02\u0590\u0592\x05:\x1E\x02" +
		"\u0591\u0590\x03\x02\x02\x02\u0592\u0593\x03\x02\x02\x02\u0593\u0591\x03" +
		"\x02\x02\x02\u0593\u0594\x03\x02\x02\x02\u0594\u0595\x03\x02\x02\x02\u0595" +
		"\u0596\x07\u0218\x02\x02\u0596\u0598\x03\x02\x02\x02\u0597\u0591\x03\x02" +
		"\x02\x02\u0597\u0598\x03\x02\x02\x02\u05989\x03\x02\x02\x02\u0599\u05A5" +
		"\x05H%\x02\u059A\u05A5\x05^0\x02\u059B\u05A5\x05<\x1F\x02\u059C\u05A5" +
		"\x05J&\x02\u059D\u05A5\x05R*\x02\u059E\u05A5\x05T+\x02\u059F\u05A5\x05" +
		"b2\x02\u05A0\u05A5\x05Z.\x02\u05A1\u05A5\x05X-\x02\u05A2\u05A5\x05V,\x02" +
		"\u05A3\u05A5\x05`1\x02\u05A4\u0599\x03\x02\x02\x02\u05A4\u059A\x03\x02" +
		"\x02\x02\u05A4\u059B\x03\x02\x02\x02\u05A4\u059C\x03\x02\x02\x02\u05A4" +
		"\u059D\x03\x02\x02\x02\u05A4\u059E\x03\x02\x02\x02\u05A4\u059F\x03\x02" +
		"\x02\x02\u05A4\u05A0\x03\x02\x02\x02\u05A4\u05A1\x03\x02\x02\x02\u05A4" +
		"\u05A2\x03\x02\x02\x02\u05A4\u05A3\x03\x02\x02\x02\u05A5;\x03\x02\x02" +
		"\x02\u05A6\u05A9\x05> \x02\u05A7\u05A9\x05F$\x02\u05A8\u05A6\x03\x02\x02" +
		"\x02\u05A8\u05A7\x03\x02\x02\x02\u05A9=\x03\x02\x02\x02\u05AA\u05AB\x07" +
		"\f\x02\x02\u05AB\u05AE\x05\u045C\u022F\x02\u05AC\u05AD\x07\xD6\x02\x02" +
		"\u05AD\u05AF\x07\x10\x02\x02\u05AE\u05AC\x03\x02\x02\x02\u05AE\u05AF\x03" +
		"\x02\x02\x02\u05AF\u05B1\x03\x02\x02\x02\u05B0\u05B2\x07\u0100\x02\x02" +
		"\u05B1\u05B0\x03\x02\x02\x02\u05B1\u05B2\x03\x02\x02\x02\u05B2\u05BE\x03" +
		"\x02\x02\x02\u05B3\u05BF\x07\x99\x02\x02\u05B4\u05BF\x07\x1C\x02\x02\u05B5" +
		"\u05BF\x07\u01C8\x02\x02\u05B6\u05BF\x07\u01C9\x02\x02\u05B7\u05BF\x07" +
		"\u0134\x02\x02\u05B8\u05BF\x05\u0494\u024B\x02\u05B9\u05BB\x05@!\x02\u05BA" +
		"\u05B9\x03\x02\x02\x02\u05BB\u05BC\x03\x02\x02\x02\u05BC\u05BA\x03\x02" +
		"\x02\x02\u05BC\u05BD\x03\x02\x02\x02\u05BD\u05BF\x03\x02\x02\x02\u05BE" +
		"\u05B3\x03\x02\x02\x02\u05BE\u05B4\x03\x02\x02\x02\u05BE\u05B5\x03\x02" +
		"\x02\x02\u05BE\u05B6\x03\x02\x02\x02\u05BE\u05B7\x03\x02\x02\x02\u05BE" +
		"\u05B8\x03\x02\x02\x02\u05BE\u05BA\x03\x02\x02\x02\u05BF?\x03\x02\x02" +
		"\x02\u05C0\u05C7\x05\u0496\u024C\x02\u05C1\u05C8\x05B\"\x02\u05C2\u05C4" +
		"\x05D#\x02\u05C3\u05C2\x03\x02\x02\x02\u05C4\u05C5\x03\x02\x02\x02\u05C5" +
		"\u05C3\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6\u05C8\x03\x02" +
		"\x02\x02\u05C7\u05C1\x03\x02\x02\x02\u05C7\u05C3\x03\x02\x02\x02\u05C7" +
		"\u05C8\x03\x02\x02\x02\u05C8A\x03\x02\x02\x02\u05C9\u05CA\t\x06\x02\x02" +
		"\u05CA\u05CB\x05\u0496\u024C\x02\u05CBC\x03\x02\x02\x02\u05CC\u05CE\x07" +
		"\x12\x02\x02\u05CD\u05CF\x05\u0496\u024C\x02\u05CE\u05CD\x03\x02\x02\x02" +
		"\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05CE\x03\x02\x02\x02\u05D0\u05D1\x03" +
		"\x02\x02\x02\u05D1E\x03\x02\x02\x02\u05D2\u05D3\x07\f\x02\x02\u05D3\u05D5" +
		"\x05\u045C\u022F\x02\u05D4\u05D6\x07\xD6\x02\x02\u05D5\u05D4\x03\x02\x02" +
		"\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6\u05D7\x03\x02\x02\x02\u05D7\u05D9" +
		"\x07\u0132\x02\x02\u05D8\u05DA\x07\u0100\x02\x02\u05D9\u05D8\x03\x02\x02" +
		"\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05DE\x03\x02\x02\x02\u05DB\u05DF" +
		"\x07\u0134\x02\x02\u05DC\u05DD\x079\x02\x02\u05DD\u05DF\x05\u0496\u024C" +
		"\x02\u05DE\u05DB\x03\x02\x02\x02\u05DE\u05DC\x03\x02\x02\x02\u05DFG\x03" +
		"\x02\x02\x02\u05E0\u05E1\x07?\x02\x02\u05E1\u05E3\x05\u049C\u024F\x02" +
		"\u05E2\u05E4\x07\u0100\x02\x02\u05E3\u05E2\x03\x02\x02\x02\u05E3\u05E4" +
		"\x03\x02\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5\u05E6\x05\u047C\u023F" +
		"\x02\u05E6I\x03\x02\x02\x02\u05E7\u05E8\x07B\x02\x02\u05E8\u05ED\x05\u0464" +
		"\u0233\x02\u05E9\u05EB\x07\xD6\x02\x02\u05EA\u05E9\x03\x02\x02\x02\u05EA" +
		"\u05EB\x03\x02\x02\x02\u05EB\u05EC\x03\x02\x02\x02\u05EC\u05EE\t\x07\x02" +
		"\x02\u05ED\u05EA\x03\x02\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05F0" +
		"\x03\x02\x02\x02\u05EF\u05F1\x07\u0100\x02\x02\u05F0\u05EF\x03\x02\x02" +
		"\x02\u05F0\u05F1\x03\x02\x02\x02\u05F1\u05F3\x03\x02\x02\x02\u05F2\u05F4" +
		"\x05L\'\x02\u05F3\u05F2\x03\x02\x02\x02\u05F4\u05F5\x03\x02\x02\x02\u05F5" +
		"\u05F3\x03\x02\x02\x02\u05F5\u05F6\x03\x02\x02\x02\u05F6K\x03\x02\x02" +
		"\x02\u05F7\u05FA\x05N(\x02\u05F8\u05F9\t\x06\x02\x02\u05F9\u05FB\x05P" +
		")\x02\u05FA\u05F8\x03\x02\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FBM\x03" +
		"\x02\x02\x02\u05FC\u05FF\x05\u0434\u021B\x02\u05FD\u05FF\x05\u0496\u024C" +
		"\x02\u05FE\u05FC\x03\x02\x02\x02\u05FE\u05FD\x03\x02\x02\x02\u05FFO\x03" +
		"\x02\x02\x02\u0600\u0603\x05\u0434\u021B\x02\u0601\u0603\x05\u0496\u024C" +
		"\x02\u0602\u0600\x03\x02\x02\x02\u0602\u0601\x03\x02\x02\x02\u0603Q\x03" +
		"\x02\x02\x02\u0604\u0606\x07m\x02\x02\u0605\u0607\x07\u01B8\x02\x02\u0606" +
		"\u0605\x03\x02\x02\x02\u0606\u0607\x03\x02\x02\x02\u0607\u0609\x03\x02" +
		"\x02\x02\u0608\u060A\x07\u0100\x02\x02\u0609\u0608\x03\x02\x02\x02\u0609" +
		"\u060A\x03\x02\x02\x02\u060A\u060B\x03\x02\x02\x02\u060B\u0612\x05\u0496" +
		"\u024C\x02\u060C\u060E\x07\u0204\x02\x02\u060D\u060C\x03\x02\x02\x02\u060D" +
		"\u060E\x03\x02\x02\x02\u060E\u060F\x03\x02\x02\x02\u060F\u0610\x07\u015D" +
		"\x02\x02\u0610\u0611\x07\u01D4\x02\x02\u0611\u0613\x05\u0496\u024C\x02" +
		"\u0612\u060D\x03\x02\x02\x02\u0612\u0613\x03\x02\x02\x02\u0613S\x03\x02" +
		"\x02\x02\u0614\u0616\x07\x80\x02\x02\u0615\u0617\x07\u0100\x02\x02\u0616" +
		"\u0615\x03\x02\x02\x02\u0616\u0617\x03\x02\x02\x02\u0617\u0618\x03\x02" +
		"\x02\x02\u0618\u0619\x07N\x02\x02\u0619U\x03\x02\x02\x02\u061A\u061C\x07" +
		"\x82\x02\x02\u061B\u061D\t\b\x02\x02\u061C\u061B\x03\x02\x02\x02\u061C" +
		"\u061D\x03\x02\x02\x02\u061D\u0622\x03\x02\x02\x02\u061E\u0620\x07\u01B8" +
		"\x02\x02\u061F\u0621\x07\u0100\x02\x02\u0620\u061F\x03\x02\x02\x02\u0620" +
		"\u0621\x03\x02\x02\x02\u0621\u0623\x03\x02\x02\x02\u0622\u061E\x03\x02" +
		"\x02\x02\u0622\u0623\x03\x02\x02\x02\u0623\u0625\x03\x02\x02\x02\u0624" +
		"\u0626\t\t\x02\x02\u0625\u0624\x03\x02\x02\x02\u0625\u0626\x03\x02\x02" +
		"\x02\u0626\u0627\x03\x02\x02\x02\u0627\u0629\x07\u01AD\x02\x02\u0628\u062A" +
		"\x07@\x02\x02\u0629\u0628\x03\x02\x02\x02\u0629\u062A\x03\x02\x02\x02" +
		"\u062AW\x03\x02\x02\x02\u062B\u0630\x07\x83\x02\x02\u062C\u062E\x07\u01B8" +
		"\x02\x02\u062D\u062F\x07\u0100\x02\x02\u062E\u062D\x03\x02\x02\x02\u062E" +
		"\u062F\x03\x02\x02\x02\u062F\u0631\x03\x02\x02\x02\u0630\u062C\x03\x02" +
		"\x02\x02\u0630\u0631\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02\u0632" +
		"\u0637\t\t\x02\x02\u0633\u0635\x07\u01AD\x02\x02\u0634\u0636\x07@\x02" +
		"\x02\u0635\u0634\x03\x02\x02\x02\u0635\u0636\x03\x02\x02\x02\u0636\u0638" +
		"\x03\x02\x02\x02\u0637\u0633\x03\x02\x02\x02\u0637\u0638\x03\x02\x02\x02" +
		"\u0638Y\x03\x02\x02\x02\u0639\u063B\x05\u046E\u0238\x02\u063A\u063C\x07" +
		"\u0100\x02\x02\u063B\u063A\x03\x02\x02\x02\u063B\u063C\x03\x02\x02\x02" +
		"\u063C\u063D\x03\x02\x02\x02\u063D\u063F\x05\u047C\u023F\x02\u063E\u0640" +
		"\x05\\/\x02\u063F\u063E\x03\x02\x02\x02\u063F\u0640\x03\x02\x02\x02\u0640" +
		"\u0643\x03\x02\x02\x02\u0641\u0643\x05\\/\x02\u0642\u0639\x03\x02\x02" +
		"\x02\u0642\u0641\x03\x02\x02\x02\u0643[\x03\x02\x02\x02\u0644\u0646\x07" +
		"\u0148\x02\x02\u0645\u0647\x07\u01CB\x02\x02\u0646\u0645\x03\x02\x02\x02" +
		"\u0646\u0647\x03\x02\x02\x02\u0647\u0649\x03\x02\x02\x02\u0648\u064A\x07" +
		"\u0100\x02\x02\u0649\u0648\x03\x02\x02\x02\u0649\u064A\x03\x02\x02\x02" +
		"\u064A\u064B\x03\x02\x02\x02\u064B\u0654\x05\u0418\u020D\x02\u064C\u064E" +
		"\x07\u0146\x02\x02\u064D\u064F\x07\u01CB\x02\x02\u064E\u064D\x03\x02\x02" +
		"\x02\u064E\u064F\x03\x02\x02\x02\u064F\u0651\x03\x02\x02\x02\u0650\u0652" +
		"\x07\u0100\x02\x02\u0651\u0650\x03\x02\x02\x02\u0651\u0652\x03\x02\x02" +
		"\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0655\x05\u0418\u020D\x02\u0654" +
		"\u064C\x03\x02\x02\x02\u0654\u0655\x03\x02\x02\x02\u0655\u0669\x03\x02" +
		"\x02\x02\u0656\u0658\x07\u0146\x02\x02\u0657\u0659\x07\u01CB\x02\x02\u0658" +
		"\u0657\x03\x02\x02\x02\u0658\u0659\x03\x02\x02\x02\u0659\u065B\x03\x02" +
		"\x02\x02\u065A\u065C\x07\u0100\x02\x02\u065B\u065A\x03\x02\x02\x02\u065B" +
		"\u065C\x03\x02\x02\x02\u065C\u065D\x03\x02\x02\x02\u065D\u0666\x05\u0418" +
		"\u020D\x02\u065E\u0660\x07\u0148\x02\x02\u065F\u0661\x07\u01CB\x02\x02" +
		"\u0660\u065F\x03\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0663\x03" +
		"\x02\x02\x02\u0662\u0664\x07\u0100\x02\x02\u0663\u0662\x03\x02\x02\x02" +
		"\u0663\u0664\x03\x02\x02\x02\u0664\u0665\x03\x02\x02\x02\u0665\u0667\x05" +
		"\u0418\u020D\x02\u0666\u065E\x03\x02\x02\x02\u0666\u0667\x03\x02\x02\x02" +
		"\u0667\u0669\x03\x02\x02\x02\u0668\u0644\x03\x02\x02\x02\u0668\u0656\x03" +
		"\x02\x02\x02\u0669]\x03\x02\x02\x02\u066A\u066C\x07\u0144\x02\x02\u066B" +
		"\u066D\x07\u0100\x02\x02\u066C\u066B\x03\x02\x02\x02\u066C\u066D\x03\x02" +
		"\x02\x02\u066D\u066E\x03\x02\x02\x02\u066E\u066F\x05\u047C\u023F\x02\u066F" +
		"_\x03\x02\x02\x02\u0670\u0672\x07\u0192\x02\x02\u0671\u0673\x07\u0205" +
		"\x02\x02\u0672\u0671\x03\x02\x02\x02\u0672\u0673\x03\x02\x02\x02\u0673" +
		"\u0675\x03\x02\x02\x02\u0674\u0676\x07\u011D\x02\x02\u0675\u0674\x03\x02" +
		"\x02\x02\u0675\u0676\x03\x02\x02\x02\u0676\u0678\x03\x02\x02\x02\u0677" +
		"\u0679\x07\u0100\x02\x02\u0678\u0677\x03\x02\x02\x02\u0678\u0679\x03\x02" +
		"\x02\x02\u0679\u067A\x03\x02\x02\x02\u067A\u067C\x07\u0136\x02\x02\u067B" +
		"\u067D\x078\x02\x02\u067C\u067B\x03\x02\x02\x02\u067C\u067D\x03\x02\x02" +
		"\x02\u067Da\x03\x02\x02\x02\u067E\u0680\x07\u01D5\x02\x02\u067F\u0681" +
		"\x07A\x02\x02\u0680\u067F\x03\x02\x02\x02\u0680\u0681\x03\x02\x02\x02" +
		"\u0681\u0686\x03\x02\x02\x02\u0682\u0684\x07\xD6\x02\x02\u0683\u0682\x03" +
		"\x02\x02\x02\u0683\u0684\x03\x02\x02\x02\u0684\u0685\x03\x02\x02\x02\u0685" +
		"\u0687\t\x07\x02\x02\u0686\u0683\x03\x02\x02\x02\u0686\u0687\x03\x02\x02" +
		"\x02\u0687\u0689\x03\x02\x02\x02\u0688\u068A\x05d3\x02\u0689\u0688\x03" +
		"\x02\x02\x02\u068A\u068B\x03\x02\x02\x02\u068B\u0689\x03\x02\x02\x02\u068B" +
		"\u068C\x03\x02\x02\x02\u068C\u068F\x03\x02\x02\x02\u068D\u068E\x07\xF1" +
		"\x02\x02\u068E\u0690\x05\u045C\u022F\x02\u068F\u068D\x03\x02\x02\x02\u068F" +
		"\u0690\x03\x02\x02\x02\u0690c\x03\x02\x02\x02\u0691\u0693\x05\u0490\u0249" +
		"\x02\u0692\u0691\x03\x02\x02\x02\u0693\u0694\x03\x02\x02\x02\u0694\u0692" +
		"\x03\x02\x02\x02\u0694\u0695\x03\x02\x02\x02\u0695\u0697\x03\x02\x02\x02" +
		"\u0696\u0698\t\n\x02\x02\u0697\u0696\x03\x02\x02\x02\u0697\u0698\x03\x02" +
		"\x02\x02\u0698\u069A\x03\x02\x02\x02\u0699\u069B\x05\u049C\u024F\x02\u069A" +
		"\u0699\x03\x02\x02\x02\u069B\u069C\x03\x02\x02\x02\u069C\u069A\x03\x02" +
		"\x02\x02\u069C\u069D\x03\x02\x02\x02\u069De\x03\x02\x02\x02\u069E\u069F" +
		"\x07\xF9\x02\x02\u069F\u06A0\x07\u01A5\x02\x02\u06A0\u06A4\x07\u0218\x02" +
		"\x02\u06A1\u06A3\x05h5\x02\u06A2\u06A1\x03\x02\x02\x02\u06A3\u06A6\x03" +
		"\x02\x02\x02\u06A4\u06A2\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02\x02\u06A5" +
		"g\x03\x02\x02\x02\u06A6\u06A4\x03\x02\x02\x02\u06A7\u06AA\x05j6\x02\u06A8" +
		"\u06AA\x05\x88E\x02\u06A9\u06A7\x03\x02\x02\x02\u06A9\u06A8\x03\x02\x02" +
		"\x02\u06AAi\x03\x02\x02\x02\u06AB\u06B2\x07\xD1\x02\x02\u06AC\u06AE\x07" +
		"\u0218\x02\x02\u06AD\u06AC\x03\x02\x02\x02\u06AD\u06AE\x03\x02\x02\x02" +
		"\u06AE\u06AF\x03\x02\x02\x02\u06AF\u06B1\x05l7\x02\u06B0\u06AD\x03\x02" +
		"\x02\x02\u06B1\u06B4\x03\x02\x02\x02\u06B2\u06B0\x03\x02\x02\x02\u06B2" +
		"\u06B3\x03\x02\x02\x02\u06B3\u06B5\x03\x02\x02\x02\u06B4\u06B2\x03\x02" +
		"\x02\x02\u06B5\u06B6\x07\u0218\x02\x02\u06B6k\x03\x02\x02\x02\u06B7\u06BB" +
		"\x05n8\x02\u06B8\u06BA\x05p9\x02\u06B9\u06B8\x03\x02\x02\x02\u06BA\u06BD" +
		"\x03\x02\x02\x02\u06BB\u06B9\x03\x02\x02\x02\u06BB\u06BC\x03\x02\x02\x02" +
		"\u06BCm\x03\x02\x02\x02\u06BD\u06BB\x03\x02\x02\x02\u06BE\u06C0\x07\u01AA" +
		"\x02\x02\u06BF\u06C1\x07\u014A\x02\x02\u06C0\u06BF\x03\x02\x02\x02\u06C0" +
		"\u06C1\x03\x02\x02\x02\u06C1\u06C2\x03\x02\x02\x02\u06C2\u06C3\x05\u0470" +
		"\u0239\x02\u06C3o\x03\x02\x02\x02\u06C4\u06D0\x05r:\x02\u06C5\u06D0\x05" +
		"t;\x02\u06C6\u06D0\x05v<\x02\u06C7\u06D0\x05x=\x02\u06C8\u06D0\x05z>\x02" +
		"\u06C9\u06D0\x05|?\x02\u06CA\u06D0\x05~@\x02\u06CB\u06D0\x05\x80A\x02" +
		"\u06CC\u06D0\x05\x84C\x02\u06CD\u06D0\x05\x82B\x02\u06CE\u06D0\x05\x86" +
		"D\x02\u06CF\u06C4\x03\x02\x02\x02\u06CF\u06C5\x03\x02\x02\x02\u06CF\u06C6" +
		"\x03\x02\x02\x02\u06CF\u06C7\x03\x02\x02\x02\u06CF\u06C8\x03\x02\x02\x02" +
		"\u06CF\u06C9\x03\x02\x02\x02\u06CF\u06CA\x03\x02\x02\x02\u06CF\u06CB\x03" +
		"\x02\x02\x02\u06CF\u06CC\x03\x02\x02\x02\u06CF\u06CD\x03\x02\x02\x02\u06CF" +
		"\u06CE\x03\x02\x02\x02\u06D0q\x03\x02\x02\x02\u06D1\u06D3\x07\x1D\x02" +
		"\x02\u06D2\u06D4\x07\u01EB\x02\x02\u06D3\u06D2\x03\x02\x02\x02\u06D3\u06D4" +
		"\x03\x02\x02\x02\u06D4\u06E0\x03\x02\x02\x02\u06D5\u06E1\x07\x8F\x02\x02" +
		"\u06D6\u06E1\x07\x90\x02\x02\u06D7\u06E1\x07\u0106\x02\x02\u06D8\u06E1" +
		"\x07\u0162\x02\x02\u06D9\u06E1\x07\u0163\x02\x02\u06DA\u06E1\x07\u0174" +
		"\x02\x02\u06DB\u06E1\x07\u0175\x02\x02\u06DC\u06E1\x07\u01DC\x02\x02\u06DD" +
		"\u06E1\x07\u0200\x02\x02\u06DE\u06E1\x05\u045E\u0230\x02\u06DF\u06E1\x05" +
		"\u0496\u024C\x02\u06E0\u06D5\x03\x02\x02\x02\u06E0\u06D6\x03\x02\x02\x02" +
		"\u06E0\u06D7\x03\x02\x02\x02\u06E0\u06D8\x03\x02\x02\x02\u06E0\u06D9\x03" +
		"\x02\x02\x02\u06E0\u06DA\x03\x02\x02\x02\u06E0\u06DB\x03\x02\x02\x02\u06E0" +
		"\u06DC\x03\x02\x02\x02\u06E0\u06DD\x03\x02\x02\x02\u06E0\u06DE\x03\x02" +
		"\x02\x02\u06E0\u06DF\x03\x02\x02\x02\u06E1s\x03\x02\x02\x02\u06E2\u06E5" +
		"\x07\u0192\x02\x02\u06E3\u06E6\x07\u0138\x02\x02\u06E4\u06E6\x05\u049C" +
		"\u024F\x02\u06E5\u06E3\x03\x02\x02\x02\u06E5\u06E4\x03\x02\x02\x02\u06E6" +
		"\u06E8\x03\x02\x02\x02\u06E7\u06E9\x07\x14\x02\x02\u06E8\u06E7\x03\x02" +
		"\x02\x02\u06E8\u06E9\x03\x02\x02\x02\u06E9\u06EB\x03\x02\x02\x02\u06EA" +
		"\u06EC\t\v\x02\x02\u06EB\u06EA\x03\x02\x02\x02\u06EB\u06EC\x03\x02\x02" +
		"\x02\u06ECu\x03\x02\x02\x02\u06ED\u06EF\x07\u014E\x02\x02\u06EE\u06F0" +
		"\x07\u0100\x02\x02\u06EF\u06EE\x03\x02\x02\x02\u06EF\u06F0\x03\x02\x02" +
		"\x02\u06F0\u06F2\x03\x02\x02\x02\u06F1\u06ED\x03\x02\x02\x02\u06F1\u06F2" +
		"\x03\x02\x02\x02\u06F2\u06F8\x03\x02\x02\x02\u06F3\u06F9\x07\u0119\x02" +
		"\x02\u06F4\u06F5\x07\u017B\x02\x02\u06F5\u06F9\x07,\x02\x02\u06F6\u06F9" +
		"\x07\u017B\x02\x02\u06F7\u06F9\x07,\x02\x02\u06F8\u06F3\x03\x02\x02\x02" +
		"\u06F8\u06F4\x03\x02\x02\x02\u06F8\u06F6\x03\x02\x02\x02\u06F8\u06F7\x03" +
		"\x02\x02\x02\u06F8\u06F9\x03\x02\x02\x02\u06F9\u06FA\x03\x02\x02\x02\u06FA" +
		"\u06FB\t\f\x02\x02\u06FBw\x03\x02\x02\x02\u06FC\u06FE\x07\u0155\x02\x02" +
		"\u06FD\u06FF\x07@\x02\x02\u06FE\u06FD\x03\x02\x02\x02\u06FE\u06FF\x03" +
		"\x02\x02\x02\u06FF\u0701\x03\x02\x02\x02\u0700\u0702\x07\u0100\x02\x02" +
		"\u0701\u0700\x03\x02\x02\x02\u0701\u0702\x03\x02\x02\x02\u0702\u0705\x03" +
		"\x02\x02\x02\u0703\u0706\x05\u0444\u0223\x02\u0704\u0706\x05\u0496\u024C" +
		"\x02\u0705\u0703\x03\x02\x02\x02\u0705\u0704\x03\x02\x02\x02\u0706y\x03" +
		"\x02\x02\x02\u0707\u0708\x07\u017B\x02\x02\u0708\u070A\x07\x87\x02\x02" +
		"\u0709\u070B\x07\u0100\x02\x02\u070A\u0709\x03\x02\x02\x02\u070A\u070B" +
		"\x03\x02\x02\x02\u070B\u070F\x03\x02\x02\x02\u070C\u0710\x07\u01C8\x02" +
		"\x02\u070D\u0710\x07\xEF\x02\x02\u070E\u0710\x05\u045E\u0230\x02\u070F" +
		"\u070C\x03\x02\x02\x02\u070F\u070D\x03\x02\x02\x02\u070F\u070E\x03\x02" +
		"\x02\x02\u0710{\x03\x02\x02\x02\u0711\u0713\x07\x05\x02\x02\u0712\u0714" +
		"\x07\u012B\x02\x02\u0713\u0712\x03\x02\x02\x02\u0713\u0714\x03\x02\x02" +
		"\x02\u0714\u0716\x03\x02\x02\x02\u0715\u0717\x07\u0100\x02\x02\u0716\u0715" +
		"\x03\x02\x02\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0718\x03\x02\x02\x02" +
		"\u0718\u0719\t\r\x02\x02\u0719}\x03\x02\x02\x02\u071A\u071C\x07\u017B" +
		"\x02\x02\u071B\u071D\x07\u0105\x02\x02\u071C\u071B\x03\x02\x02\x02\u071C" +
		"\u071D\x03\x02\x02\x02\u071D\u071F\x03\x02\x02\x02\u071E\u0720\x07\u0100" +
		"\x02\x02\u071F\u071E\x03\x02\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720" +
		"\u0721\x03\x02\x02\x02\u0721\u0723\x05\u0444\u0223\x02\u0722\u0724\x05" +
		"\x82B\x02\u0723\u0722\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724" +
		"\u0729\x03\x02\x02\x02\u0725\u0727\x07\u0204\x02\x02\u0726\u0725\x03\x02" +
		"\x02\x02\u0726\u0727\x03\x02\x02\x02\u0727\u0728\x03\x02\x02\x02\u0728" +
		"\u072A\x07\x97\x02\x02\u0729\u0726\x03\x02\x02\x02\u0729\u072A\x03\x02" +
		"\x02\x02\u072A\x7F\x03\x02\x02\x02\u072B\u072C\x07\x14\x02\x02\u072C\u072E" +
		"\x07\u017B\x02\x02\u072D\u072F\x07\u0105\x02\x02\u072E\u072D\x03\x02\x02" +
		"\x02\u072E\u072F\x03\x02\x02\x02\u072F\u0731\x03\x02\x02\x02\u0730\u0732" +
		"\x07\u0100\x02\x02\u0731\u0730\x03\x02\x02\x02\u0731\u0732\x03\x02\x02" +
		"\x02\u0732\u0733\x03\x02\x02\x02\u0733\u0735\x05\u0444\u0223\x02\u0734" +
		"\u0736\x05\x82B\x02\u0735\u0734\x03\x02\x02\x02\u0735\u0736\x03\x02\x02" +
		"\x02\u0736\u073B\x03\x02\x02\x02\u0737\u0739\x07\u0204\x02\x02\u0738\u0737" +
		"\x03\x02\x02\x02\u0738\u0739\x03\x02\x02\x02\u0739\u073A\x03\x02\x02\x02" +
		"\u073A\u073C\x07\x97\x02\x02\u073B\u0738\x03\x02\x02\x02\u073B\u073C\x03" +
		"\x02\x02\x02\u073C\x81\x03\x02\x02\x02\u073D\u073F\x07\u0158\x02\x02\u073E" +
		"\u0740\x07\u0100\x02\x02\u073F\u073E\x03\x02\x02\x02\u073F\u0740\x03\x02" +
		"\x02\x02\u0740\u0741\x03\x02\x02\x02\u0741\u0742\x05\u046A\u0236\x02\u0742" +
		"\x83\x03\x02\x02\x02\u0743\u0745\x07\xD0\x02\x02\u0744\u0743\x03\x02\x02" +
		"\x02\u0744\u0745\x03\x02\x02\x02\u0745\u0746\x03\x02\x02\x02\u0746\u0748" +
		"\x07\u01CB\x02\x02\u0747\u0749\x07\u0100\x02\x02\u0748\u0747\x03\x02\x02" +
		"\x02\u0748\u0749\x03\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u074C" +
		"\x05\u0444\u0223\x02\u074B\u074D\x05\u0444\u0223\x02\u074C\u074B\x03\x02" +
		"\x02\x02\u074C\u074D\x03\x02\x02\x02\u074D\x85\x03\x02\x02\x02\u074E\u0750" +
		"\x07\u0184\x02\x02\u074F\u0751\x07\u0105\x02\x02\u0750\u074F\x03\x02\x02" +
		"\x02\u0750\u0751\x03\x02\x02\x02\u0751\u0753\x03\x02\x02\x02\u0752\u0754" +
		"\x07\u0100\x02\x02\u0753\u0752\x03\x02\x02\x02\u0753\u0754\x03\x02\x02" +
		"\x02\u0754\u0755\x03\x02\x02\x02\u0755\u0756\x05\u0444\u0223\x02\u0756" +
		"\x87\x03\x02\x02\x02\u0757\u0758\x07\xEB\x02\x02\u0758\u075C\x07\u0218" +
		"\x02\x02\u0759\u075A\x05\u0470\u0239\x02\u075A\u075B\x07\u0218\x02\x02" +
		"\u075B\u075D\x03\x02\x02\x02\u075C\u0759\x03\x02\x02\x02\u075C\u075D\x03" +
		"\x02\x02\x02\u075D\u0765\x03\x02\x02\x02\u075E\u0760\x05\x8AF\x02\u075F" +
		"\u075E\x03\x02\x02\x02\u0760\u0763\x03\x02\x02\x02\u0761\u075F\x03\x02" +
		"\x02\x02\u0761\u0762\x03\x02\x02\x02\u0762\u0764\x03\x02\x02\x02\u0763" +
		"\u0761\x03\x02\x02\x02\u0764\u0766\x07\u0218\x02\x02\u0765\u0761\x03\x02" +
		"\x02\x02\u0765\u0766\x03\x02\x02\x02\u0766\x89\x03\x02\x02\x02\u0767\u076C" +
		"\x05\x8CG\x02\u0768\u076C\x05\x94K\x02\u0769\u076C\x05\x96L\x02\u076A" +
		"\u076C\x05\x9AN\x02\u076B\u0767\x03\x02\x02\x02\u076B\u0768\x03\x02\x02" +
		"\x02\u076B\u0769\x03\x02\x02\x02\u076B\u076A\x03\x02\x02\x02\u076C\x8B" +
		"\x03\x02\x02\x02\u076D\u0773\x07\u0191\x02\x02\u076E\u0771\x07\u0148\x02" +
		"\x02\u076F\u0772\x05\u045E\u0230\x02\u0770\u0772\x05\u0470\u0239\x02\u0771" +
		"\u076F\x03\x02\x02\x02\u0771\u0770\x03\x02\x02\x02\u0772\u0774\x03\x02" +
		"\x02\x02\u0773\u076E\x03\x02\x02\x02\u0773\u0774\x03\x02\x02\x02\u0774" +
		"\u0775\x03\x02\x02\x02\u0775\u0779\x07\xC5\x02\x02\u0776\u077A\x05\x8E" +
		"H\x02\u0777\u077A\x05\x90I\x02\u0778\u077A\x05\x92J\x02\u0779\u0776\x03" +
		"\x02\x02\x02\u0779\u0777\x03\x02\x02\x02\u0779\u0778\x03\x02\x02\x02\u077A" +
		"\x8D\x03\x02\x02\x02\u077B\u077C\x05\u049C\u024F\x02\u077C\u077D\x07\u017D" +
		"\x02\x02\u077D\x8F\x03\x02\x02\x02\u077E\u0780\x07\xA0\x02\x02\u077F\u077E" +
		"\x03\x02\x02\x02\u077F\u0780\x03\x02\x02\x02\u0780\u0782\x03\x02\x02\x02" +
		"\u0781\u0783\x07\u0145\x02\x02\u0782\u0781\x03\x02\x02\x02\u0782\u0783" +
		"\x03\x02\x02\x02\u0783\u0784\x03\x02\x02\x02\u0784\u0785\t\x0E\x02\x02" +
		"\u0785\u0786\x07\u0145\x02\x02\u0786\u0787\x05\u0470\u0239\x02\u0787\x91" +
		"\x03\x02\x02\x02\u0788\u078A\x05\u049C\u024F\x02\u0789\u078B\x07D\x02" +
		"\x02\u078A\u0789\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B\x93" +
		"\x03\x02\x02\x02\u078C\u078E\x07\u01A0\x02\x02\u078D\u078F\t\x0F\x02\x02" +
		"\u078E\u078D\x03\x02\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u0791\x03" +
		"\x02\x02\x02\u0790\u0792\x07\x18\x02\x02\u0791\u0790\x03\x02\x02\x02\u0791" +
		"\u0792\x03\x02\x02\x02\u0792\u0794\x03\x02\x02\x02\u0793\u0795\x07\xD6" +
		"\x02\x02\u0794\u0793\x03\x02\x02\x02\u0794\u0795\x03\x02\x02\x02\u0795" +
		"\u0797\x03\x02\x02\x02\u0796\u0798\x05\u0470\u0239\x02\u0797\u0796\x03" +
		"\x02\x02\x02\u0798\u0799\x03\x02\x02\x02\u0799\u0797\x03\x02\x02\x02\u0799" +
		"\u079A\x03\x02\x02\x02\u079A\x95\x03\x02\x02\x02\u079B\u079C\x07\u012F" +
		"\x02\x02\u079C\u079E\x07\xD0\x02\x02\u079D\u079F\x07\u01DC\x02\x02\u079E" +
		"\u079D\x03\x02\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F\u07A1\x03\x02" +
		"\x02\x02\u07A0\u07A2\x07`\x02\x02\u07A1\u07A0\x03\x02\x02\x02\u07A1\u07A2" +
		"\x03\x02\x02\x02\u07A2\u07A4\x03\x02\x02\x02\u07A3\u07A5\x05\x98M\x02" +
		"\u07A4\u07A3\x03\x02\x02\x02\u07A5\u07A6\x03\x02\x02\x02\u07A6\u07A4\x03" +
		"\x02\x02\x02\u07A6\u07A7\x03\x02\x02\x02\u07A7\x97\x03\x02\x02\x02\u07A8" +
		"\u07AB\x05\u0470\u0239\x02\u07A9\u07AA\x07\u0160\x02\x02\u07AA\u07AC\x05" +
		"\u049C\u024F";
	private static readonly _serializedATNSegment5: string =
		"\x02\u07AB\u07A9\x03\x02\x02\x02\u07AB\u07AC\x03\x02\x02\x02\u07AC\x99" +
		"\x03\x02\x02\x02\u07AD\u07AE\x07O\x02\x02\u07AE\u07B0\x07c\x02\x02\u07AF" +
		"\u07B1\x07\xD6\x02\x02\u07B0\u07AF\x03\x02\x02\x02\u07B0\u07B1\x03\x02" +
		"\x02\x02\u07B1\u07B2\x03\x02\x02\x02\u07B2\u07B3\x05\u0470\u0239\x02\u07B3" +
		"\x9B\x03\x02\x02\x02\u07B4\u07B5\x07o\x02\x02\u07B5\u07B6\x07\x93\x02" +
		"\x02\u07B6\u07BA\x07\u0218\x02\x02\u07B7\u07B9\x05\x9EP\x02\u07B8\u07B7" +
		"\x03\x02\x02\x02\u07B9\u07BC\x03\x02\x02\x02\u07BA\u07B8\x03\x02\x02\x02" +
		"\u07BA\u07BB\x03\x02\x02\x02\u07BB\x9D\x03\x02\x02\x02\u07BC\u07BA\x03" +
		"\x02\x02\x02\u07BD\u07C7\x05\xA0Q\x02\u07BE\u07C7\x05\xD2j\x02\u07BF\u07C7" +
		"\x05\xD6l\x02\u07C0\u07C7\x05\xD8m\x02\u07C1\u07C7\x05\xDAn\x02\u07C2" +
		"\u07C7\x05\u0100\x81\x02\u07C3\u07C7\x05\u0102\x82\x02\u07C4\u07C7\x05" +
		"\u0142\xA2\x02\u07C5\u07C7\x05\u018E\xC8\x02\u07C6\u07BD\x03\x02\x02\x02" +
		"\u07C6\u07BE\x03\x02\x02\x02\u07C6\u07BF\x03\x02\x02\x02\u07C6\u07C0\x03" +
		"\x02\x02\x02\u07C6\u07C1\x03\x02\x02\x02\u07C6\u07C2\x03\x02\x02\x02\u07C6" +
		"\u07C3\x03\x02\x02\x02\u07C6\u07C4\x03\x02\x02\x02\u07C6\u07C5\x03\x02" +
		"\x02\x02\u07C7\x9F\x03\x02\x02\x02\u07C8\u07C9\x07\xD0\x02\x02\u07C9\u07CA" +
		"\x07\u01A5\x02\x02\u07CA\u07CE\x07\u0218\x02\x02\u07CB\u07CD\x05\xA2R" +
		"\x02\u07CC\u07CB\x03\x02\x02\x02\u07CD\u07D0\x03\x02\x02\x02\u07CE\u07CC" +
		"\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF\xA1\x03\x02\x02\x02" +
		"\u07D0\u07CE\x03\x02\x02\x02\u07D1\u07D2\t\x10\x02\x02\u07D2\u07D9\x05" +
		"\u0470\u0239\x02\u07D3\u07D5\x07\u0218\x02\x02\u07D4\u07D3\x03\x02\x02" +
		"\x02\u07D4\u07D5\x03\x02\x02\x02\u07D5\u07D6\x03\x02\x02\x02\u07D6\u07D8" +
		"\x05\xA4S\x02\u07D7\u07D4\x03\x02\x02\x02\u07D8\u07DB\x03\x02\x02\x02" +
		"\u07D9\u07D7\x03\x02\x02\x02\u07D9\u07DA\x03\x02\x02\x02\u07DA\u07DC\x03" +
		"\x02\x02\x02\u07DB\u07D9\x03\x02\x02\x02\u07DC\u07E0\x07\u0218\x02\x02" +
		"\u07DD\u07DF\x05\u01B4\xDB\x02\u07DE\u07DD\x03\x02\x02\x02\u07DF\u07E2" +
		"\x03\x02\x02\x02\u07E0\u07DE\x03\x02\x02\x02\u07E0\u07E1\x03\x02\x02\x02" +
		"\u07E1\xA3\x03\x02\x02\x02\u07E2\u07E0\x03\x02\x02\x02\u07E3\u07EF\x05" +
		"\xA6T\x02\u07E4\u07EF\x05\xA8U\x02\u07E5\u07EF\x05\xAAV\x02\u07E6\u07EF" +
		"\x05\xAEX\x02\u07E7\u07EF\x05\xB8]\x02\u07E8\u07EF\x05\xBA^\x02\u07E9" +
		"\u07EF\x05\xBE`\x02\u07EA\u07EF\x05\xC0a\x02\u07EB\u07EF\x05\xCEh\x02" +
		"\u07EC\u07EF\x05\xD0i\x02\u07ED\u07EF\x05\xCAf\x02\u07EE\u07E3\x03\x02" +
		"\x02\x02\u07EE\u07E4\x03\x02\x02\x02\u07EE\u07E5\x03\x02\x02\x02\u07EE" +
		"\u07E6\x03\x02\x02\x02\u07EE\u07E7\x03\x02\x02\x02\u07EE\u07E8\x03\x02" +
		"\x02\x02\u07EE\u07E9\x03\x02\x02\x02\u07EE\u07EA\x03\x02\x02\x02\u07EE" +
		"\u07EB\x03\x02\x02\x02\u07EE\u07EC\x03\x02\x02\x02\u07EE\u07ED\x03\x02" +
		"\x02\x02\u07EF\xA5\x03\x02\x02\x02\u07F0\u07F2\x07\u0100\x02\x02\u07F1" +
		"\u07F0\x03\x02\x02\x02\u07F1\u07F2\x03\x02\x02\x02\u07F2\u07F3\x03\x02" +
		"\x02\x02\u07F3\u07F4\x07\xCD\x02\x02\u07F4\xA7\x03\x02\x02\x02\u07F5\u07F7" +
		"\x07\u0100\x02\x02\u07F6\u07F5\x03\x02\x02\x02\u07F6\u07F7\x03\x02\x02" +
		"\x02\u07F7\u07F8\x03\x02\x02\x02\u07F8\u07F9\x07\xE1\x02\x02\u07F9\xA9" +
		"\x03\x02\x02\x02\u07FA\u07FC\x070\x02\x02\u07FB\u07FD\x07`\x02\x02\u07FC" +
		"\u07FB\x03\x02\x02\x02\u07FC\u07FD\x03\x02\x02\x02\u07FD\u07FE\x03\x02" +
		"\x02\x02\u07FE\u0800\x05\u049C\u024F\x02\u07FF\u0801\x05\xACW\x02\u0800" +
		"\u07FF\x03\x02\x02\x02\u0800\u0801\x03\x02\x02\x02\u0801\u0803\x03\x02" +
		"\x02\x02\u0802\u0804\t\x11\x02\x02\u0803\u0802\x03\x02\x02\x02\u0803\u0804" +
		"\x03\x02\x02\x02\u0804\xAB\x03\x02\x02\x02\u0805\u0806\x07\u01EB\x02\x02" +
		"\u0806\u0807\x05\u049C\u024F\x02\u0807\xAD\x03\x02\x02\x02\u0808\u080C" +
		"\x07\u017B\x02\x02\u0809\u080D\x05\xB0Y\x02\u080A\u080D\x05\xB2Z\x02\u080B" +
		"\u080D\x05\xB4[\x02\u080C\u0809\x03\x02\x02\x02\u080C\u080A\x03\x02\x02" +
		"\x02\u080C\u080B\x03\x02\x02\x02\u080D\xAF\x03\x02\x02\x02\u080E\u0810" +
		"\x07`\x02\x02\u080F\u080E\x03\x02\x02\x02\u080F\u0810\x03\x02\x02\x02" +
		"\u0810\u0811\x03\x02\x02\x02\u0811\u0813\x05\u049C\u024F\x02\u0812\u0814" +
		"\x07A\x02\x02\u0813\u0812\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02" +
		"\u0814\xB1\x03\x02\x02\x02\u0815\u0817\x07\u0100\x02\x02\u0816\u0815\x03" +
		"\x02\x02\x02\u0816\u0817\x03\x02\x02\x02\u0817\u0818\x03\x02\x02\x02\u0818" +
		"\u081A\x07\u01FF\x02\x02\u0819\u081B\x07\xF1\x02\x02\u081A\u0819\x03\x02" +
		"\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u081D\x03\x02\x02\x02\u081C" +
		"\u081E\x07\u01B9\x02\x02\u081D\u081C\x03\x02\x02\x02\u081D\u081E\x03\x02" +
		"\x02\x02\u081E\u0829\x03\x02\x02\x02\u081F\u0821\x07\xD9\x02\x02\u0820" +
		"\u081F\x03\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u0822\x03\x02" +
		"\x02\x02\u0822\u0824\x05\u049C\u024F\x02\u0823\u0825\x05\xB6\\\x02\u0824" +
		"\u0823\x03\x02\x02\x02\u0824\u0825\x03\x02\x02\x02\u0825\u0827\x03\x02" +
		"\x02\x02\u0826\u0828\x07A\x02\x02\u0827\u0826\x03\x02\x02\x02\u0827\u0828" +
		"\x03\x02\x02\x02\u0828\u082A\x03\x02\x02\x02\u0829\u0820\x03\x02\x02\x02" +
		"\u0829\u082A\x03\x02\x02\x02\u082A\u0830\x03\x02\x02\x02\u082B\u082D\x07" +
		"\x88\x02\x02\u082C\u082E\x07\u0148\x02\x02\u082D\u082C\x03\x02\x02\x02" +
		"\u082D\u082E\x03\x02\x02\x02\u082E\u082F\x03\x02\x02\x02\u082F\u0831\x05" +
		"\u0444\u0223\x02\u0830\u082B\x03\x02\x02\x02\u0830\u0831\x03\x02\x02\x02" +
		"\u0831\xB3\x03\x02\x02\x02\u0832\u0834\x07`\x02\x02\u0833\u0832\x03\x02" +
		"\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834\u0835\x03\x02\x02\x02\u0835" +
		"\u0836\x05\u049C\u024F\x02\u0836\u0838\x05\xB6\\\x02\u0837\u0839\x07A" +
		"\x02\x02\u0838\u0837\x03\x02\x02\x02\u0838\u0839\x03\x02\x02\x02\u0839" +
		"\xB5\x03\x02\x02\x02\u083A\u083B\x07\u01EB\x02\x02\u083B\u083C\x05\u049C" +
		"\u024F\x02\u083C\xB7\x03\x02\x02\x02\u083D\u0846\x07\u0107\x02\x02\u083E" +
		"\u0840\x07\u017B\x02\x02\u083F\u0841\x07\u0100\x02\x02\u0840\u083F\x03" +
		"\x02\x02\x02\u0840\u0841\x03\x02\x02\x02\u0841\u0847\x03\x02\x02\x02\u0842" +
		"\u0844\x07\u017D\x02\x02\u0843\u0845\x07\x17\x02\x02\u0844\u0843\x03\x02" +
		"\x02\x02\u0844\u0845\x03\x02\x02\x02\u0845\u0847\x03\x02\x02\x02\u0846" +
		"\u083E\x03\x02\x02\x02\u0846\u0842\x03\x02\x02\x02\u0847\u084F\x03\x02" +
		"\x02\x02\u0848\u0850\x07\u0147\x02\x02\u0849\u0850\x07\u01C7\x02\x02\u084A" +
		"\u084C\x05\u046A\u0236\x02\u084B\u084A\x03\x02\x02\x02\u084C\u084D\x03" +
		"\x02\x02\x02\u084D\u084B\x03\x02\x02\x02\u084D\u084E\x03\x02\x02\x02\u084E" +
		"\u0850\x03\x02\x02\x02\u084F\u0848\x03\x02\x02\x02\u084F\u0849\x03\x02" +
		"\x02\x02\u084F\u084B\x03\x02\x02\x02\u0850\xB9\x03\x02\x02\x02\u0851\u0852" +
		"\x07\u01FD\x02\x02\u0852\u0854\x07\u0145\x02\x02\u0853\u0855\x05\xBC_" +
		"\x02\u0854\u0853\x03\x02\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0854" +
		"\x03\x02\x02\x02\u0856\u0857\x03\x02\x02\x02\u0857\xBB\x03\x02\x02\x02" +
		"\u0858\u085A\x05\u048E\u0248\x02\u0859\u085B\x07\u0100\x02\x02\u085A\u0859" +
		"\x03\x02\x02\x02\u085A\u085B\x03\x02\x02\x02\u085B\u085E\x03\x02\x02\x02" +
		"\u085C\u085F\x05\u0444\u0223\x02\u085D\u085F\x05\u0496\u024C\x02\u085E" +
		"\u085C\x03\x02\x02\x02\u085E\u085D\x03\x02\x02\x02\u085F\xBD\x03\x02\x02" +
		"\x02\u0860\u0869\x07o\x02\x02\u0861\u0863\x07\u017B\x02\x02\u0862\u0864" +
		"\x07\u0100\x02\x02\u0863\u0862\x03\x02\x02\x02\u0863\u0864\x03\x02\x02" +
		"\x02\u0864\u086A\x03\x02\x02\x02\u0865\u0867\x07\u017D\x02\x02\u0866\u0868" +
		"\x07\x17\x02\x02\u0867\u0866\x03\x02\x02\x02\u0867\u0868\x03\x02\x02\x02" +
		"\u0868\u086A\x03\x02\x02\x02\u0869\u0861\x03\x02\x02\x02\u0869\u0865\x03" +
		"\x02\x02\x02\u086A\u086C\x03\x02\x02\x02\u086B\u086D\x05\u046A\u0236\x02" +
		"\u086C\u086B\x03\x02\x02\x02\u086D\u086E\x03\x02\x02\x02\u086E\u086C\x03" +
		"\x02\x02\x02\u086E\u086F\x03\x02\x02\x02\u086F\xBF\x03\x02\x02\x02\u0870" +
		"\u0872\x07\u0117\x02\x02\u0871\u0873\x07\u0100\x02\x02\u0872\u0871\x03" +
		"\x02\x02\x02\u0872\u0873\x03\x02\x02\x02\u0873\u0876\x03\x02\x02\x02\u0874" +
		"\u0877\x05\u046A\u0236\x02\u0875\u0877\x05\u049C\u024F\x02\u0876\u0874" +
		"\x03\x02\x02\x02\u0876\u0875\x03\x02\x02\x02\u0877\u0879\x03\x02\x02\x02" +
		"\u0878\u087A\x07\u011A\x02\x02\u0879\u0878\x03\x02\x02\x02\u0879\u087A" +
		"\x03\x02\x02\x02\u087A\u087E\x03\x02\x02\x02\u087B\u087D\x05\xC2b\x02" +
		"\u087C\u087B\x03\x02\x02\x02\u087D\u0880\x03\x02\x02\x02\u087E\u087C\x03" +
		"\x02\x02\x02\u087E\u087F\x03\x02\x02\x02\u087F\xC1\x03\x02\x02\x02\u0880" +
		"\u087E\x03\x02\x02\x02\u0881\u0885\x05\xC4c\x02\u0882\u0885\x05\xC6d\x02" +
		"\u0883\u0885\x05\xC8e\x02\u0884\u0881\x03\x02\x02\x02\u0884\u0882\x03" +
		"\x02\x02\x02\u0884\u0883\x03\x02\x02\x02\u0885\xC3\x03\x02\x02\x02\u0886" +
		"\u0888\x07\u0204\x02\x02\u0887\u0886\x03\x02\x02\x02\u0887\u0888\x03\x02" +
		"\x02\x02\u0888\u0889\x03\x02\x02\x02\u0889\u088B\x07\xD5\x02\x02\u088A" +
		"\u088C\x07 \x02\x02\u088B\u088A\x03\x02\x02\x02\u088B\u088C\x03\x02\x02" +
		"\x02\u088C\u088F\x03\x02\x02\x02\u088D\u0890\x05\u046A\u0236\x02\u088E" +
		"\u0890\x05\u049C\u024F\x02\u088F\u088D\x03\x02\x02\x02\u088F\u088E\x03" +
		"\x02\x02\x02\u0890\xC5\x03\x02\x02\x02\u0891\u0893\x07\u011A\x02\x02\u0892" +
		"\u0891\x03\x02\x02\x02\u0892\u0893\x03\x02\x02\x02\u0893\u0895\x03\x02" +
		"\x02\x02\u0894\u0896\x07 \x02\x02\u0895\u0894\x03\x02\x02\x02\u0895\u0896" +
		"\x03\x02\x02\x02\u0896\u0897\x03\x02\x02\x02\u0897\u089A\x07\u01EE\x02" +
		"\x02\u0898\u089B\x05\u046A\u0236\x02\u0899\u089B\x05\u049C\u024F\x02\u089A" +
		"\u0898\x03\x02\x02\x02\u089A\u0899\x03\x02\x02\x02\u089B\xC7\x03\x02\x02" +
		"\x02\u089C\u089E\x07\u011A\x02\x02\u089D\u089C\x03\x02\x02\x02\u089D\u089E" +
		"\x03\x02\x02\x02\u089E\u08A0\x03\x02\x02\x02\u089F\u08A1\x07 \x02\x02" +
		"\u08A0\u089F\x03\x02\x02\x02\u08A0\u08A1\x03\x02\x02\x02\u08A1\u08A2\x03" +
		"\x02\x02\x02\u08A2\u08A5\x072\x02\x02\u08A3\u08A6\x05\u046A\u0236\x02" +
		"\u08A4\u08A6\x05\u049C\u024F\x02\u08A5\u08A3\x03\x02\x02\x02\u08A5\u08A4" +
		"\x03\x02\x02\x02\u08A6\xC9\x03\x02\x02\x02\u08A7\u08A9\x07\u017C\x02\x02" +
		"\u08A8\u08AA\x07\u012B\x02\x02\u08A9\u08A8\x03\x02\x02\x02\u08A9\u08AA" +
		"\x03\x02\x02\x02\u08AA\u08AC\x03\x02\x02\x02\u08AB\u08AD\x07\u0100\x02" +
		"\x02\u08AC\u08AB\x03\x02\x02\x02\u08AC\u08AD\x03\x02\x02\x02\u08AD\u08AE" +
		"\x03\x02\x02\x02\u08AE\u08AF\x05\xCCg\x02\u08AF\xCB\x03\x02\x02\x02\u08B0" +
		"\u08B1\x05\u0494\u024B\x02\u08B1\xCD\x03\x02\x02\x02\u08B2\u08B4\x07I" +
		"\x02\x02\u08B3\u08B5\x07\u0100\x02\x02\u08B4\u08B3\x03\x02\x02\x02\u08B4" +
		"\u08B5\x03\x02\x02\x02\u08B5\u08B6\x03\x02\x02\x02\u08B6\u08B7\x05\u045C" +
		"\u022F\x02\u08B7\xCF\x03\x02\x02\x02\u08B8\u08BA\x07\u018D\x02\x02\u08B9" +
		"\u08BB\x07\u0100\x02\x02\u08BA\u08B9\x03\x02\x02\x02\u08BA\u08BB\x03\x02" +
		"\x02\x02\u08BB\u08C1\x03\x02\x02\x02\u08BC\u08BE\x07\u018F\x02\x02\u08BD" +
		"\u08BF\x07\x17\x02\x02\u08BE\u08BD\x03\x02\x02\x02\u08BE\u08BF\x03\x02" +
		"\x02\x02\u08BF\u08C1\x03\x02\x02\x02\u08C0\u08B8\x03\x02\x02\x02\u08C0" +
		"\u08BC\x03\x02\x02\x02\u08C1\u08C3\x03\x02\x02\x02\u08C2\u08C4\x05\u0486" +
		"\u0244\x02\u08C3\u08C2\x03\x02\x02\x02\u08C4\u08C5\x03\x02\x02\x02\u08C5" +
		"\u08C3\x03\x02\x02\x02\u08C5\u08C6\x03\x02\x02\x02\u08C6\xD1\x03\x02\x02" +
		"\x02\u08C7\u08C8\x07p\x02\x02\u08C8\u08C9\x07\u01A5\x02\x02\u08C9\u08CD" +
		"\x07\u0218\x02\x02\u08CA\u08CC\x05\xD4k\x02\u08CB\u08CA\x03\x02\x02\x02" +
		"\u08CC\u08CF\x03\x02\x02\x02\u08CD\u08CB\x03\x02\x02\x02\u08CD\u08CE\x03" +
		"\x02\x02\x02\u08CE\xD3\x03\x02\x02\x02\u08CF\u08CD\x03\x02\x02\x02\u08D0" +
		"\u08D1\x05\u049C\u024F\x02\u08D1\u08D2\x05\u0496\u024C\x02\u08D2\u08D3" +
		"\x07\xFF\x02\x02\u08D3\u08D4\x05\u0496\u024C\x02\u08D4\xD5\x03\x02\x02" +
		"\x02\u08D5\u08D6\x07\u0206\x02\x02\u08D6\u08D7\x07\u01A5\x02\x02\u08D7" +
		"\u08DB\x07\u0218\x02\x02\u08D8\u08DA\x05\u01B4\xDB\x02\u08D9\u08D8\x03" +
		"\x02\x02\x02\u08DA\u08DD\x03\x02\x02\x02\u08DB\u08D9\x03\x02\x02\x02\u08DB" +
		"\u08DC\x03\x02\x02\x02\u08DC\xD7\x03\x02\x02\x02\u08DD\u08DB\x03\x02\x02" +
		"\x02\u08DE\u08DF\x07\u011C\x02\x02\u08DF\u08E0\x07\u01A5\x02\x02\u08E0" +
		"\u08E4\x07\u0218\x02\x02\u08E1\u08E3\x05\u01B4\xDB\x02\u08E2\u08E1\x03" +
		"\x02\x02\x02\u08E3\u08E6\x03\x02\x02\x02\u08E4\u08E2\x03\x02\x02\x02\u08E4" +
		"\u08E5\x03\x02\x02\x02\u08E5\xD9\x03\x02\x02\x02\u08E6\u08E4\x03\x02\x02" +
		"\x02\u08E7\u08E8\x07Q\x02\x02\u08E8\u08E9\x07\u01A5\x02\x02\u08E9\u08EE" +
		"\x07\u0218\x02\x02\u08EA\u08ED\x05\xDCo\x02\u08EB\u08ED\x05\u01B4\xDB" +
		"\x02\u08EC\u08EA\x03\x02\x02\x02\u08EC\u08EB\x03\x02\x02\x02\u08ED\u08F0" +
		"\x03\x02\x02\x02\u08EE\u08EC\x03\x02\x02\x02\u08EE\u08EF\x03\x02\x02\x02" +
		"\u08EF\xDB\x03\x02\x02\x02\u08F0\u08EE\x03\x02\x02\x02\u08F1\u08F5\x05" +
		"\xDEp\x02\u08F2\u08F5\x05\xE0q\x02\u08F3\u08F5\x05\xE2r\x02\u08F4\u08F1" +
		"\x03\x02\x02\x02\u08F4\u08F2\x03\x02\x02\x02\u08F4\u08F3\x03\x02\x02\x02" +
		"\u08F5\xDD\x03\x02\x02\x02\u08F6\u08F7\x07:\x02\x02\u08F7\u08F9\x05\u0462" +
		"\u0232\x02\u08F8\u08FA\x07\xD6\x02\x02\u08F9\u08F8\x03\x02\x02\x02\u08F9" +
		"\u08FA\x03\x02\x02\x02\u08FA\u08FC\x03\x02\x02\x02\u08FB\u08FD\x07\xF5" +
		"\x02\x02\u08FC\u08FB\x03\x02\x02\x02\u08FC\u08FD\x03\x02\x02\x02\u08FD" +
		"\u08FE\x03\x02\x02\x02\u08FE\u090D\x07\xF8\x02\x02\u08FF\u0909\x05\xF6" +
		"|\x02\u0900\u0909\x05\xFC\x7F\x02\u0901\u0909\x05\xEEx\x02\u0902\u0909" +
		"\x05\xF0y\x02\u0903\u0909\x05\xF8}\x02\u0904\u0909\x05\xFE\x80\x02\u0905" +
		"\u0909\x05\xE8u\x02\u0906\u0909\x05\xF2z\x02\u0907\u0909\x05\xECw\x02" +
		"\u0908\u08FF\x03\x02\x02\x02\u0908\u0900\x03\x02\x02\x02\u0908\u0901\x03" +
		"\x02\x02\x02\u0908\u0902\x03\x02\x02\x02\u0908\u0903\x03\x02\x02\x02\u0908" +
		"\u0904\x03\x02\x02\x02\u0908\u0905\x03\x02\x02\x02\u0908\u0906\x03\x02" +
		"\x02\x02\u0908\u0907\x03\x02\x02\x02\u0909\u090C\x03\x02\x02\x02\u090A" +
		"\u090C\x05\u046C\u0237\x02\u090B\u0908\x03\x02\x02\x02\u090B\u090A\x03" +
		"\x02\x02\x02\u090C\u090F\x03\x02\x02\x02\u090D\u090B\x03\x02\x02\x02\u090D" +
		"\u090E\x03\x02\x02\x02\u090E\u0910\x03\x02\x02\x02\u090F\u090D\x03\x02" +
		"\x02\x02\u0910\u0911\x07\u0218\x02\x02\u0911\xDF\x03\x02\x02\x02\u0912" +
		"\u0913\x07:\x02\x02\u0913\u0915\x05\u0462\u0232\x02\u0914\u0916\x07\xD6" +
		"\x02\x02\u0915\u0914\x03\x02\x02\x02\u0915\u0916\x03\x02\x02\x02\u0916" +
		"\u0917\x03\x02\x02\x02\u0917\u0920\x07\u0150\x02\x02\u0918\u091F\x05\xE4" +
		"s\x02\u0919\u091F\x05\xFE\x80\x02\u091A\u091F\x05\xF2z\x02\u091B\u091F" +
		"\x05\xE6t\x02\u091C\u091F\x05\xEAv\x02\u091D\u091F\x05\xF4{\x02\u091E" +
		"\u0918\x03\x02\x02\x02\u091E\u0919\x03\x02\x02\x02\u091E\u091A\x03\x02" +
		"\x02\x02\u091E\u091B\x03\x02\x02\x02\u091E\u091C\x03\x02\x02\x02\u091E" +
		"\u091D\x03\x02\x02\x02\u091F\u0922\x03\x02\x02\x02\u0920\u091E\x03\x02" +
		"\x02\x02\u0920\u0921\x03\x02\x02\x02\u0921\u0923\x03\x02\x02\x02\u0922" +
		"\u0920\x03\x02\x02\x02\u0923\u0924\x07\u0218\x02\x02\u0924\xE1\x03\x02" +
		"\x02\x02\u0925\u0926\x07:\x02\x02\u0926\u0928\x05\u0462\u0232\x02\u0927" +
		"\u0929\x07\xD6\x02\x02\u0928\u0927\x03\x02\x02\x02\u0928\u0929\x03\x02" +
		"\x02\x02\u0929\u092A\x03\x02\x02\x02\u092A\u092B\x07\xF5\x02\x02\u092B" +
		"\u0937\x07\xEA\x02\x02\u092C\u0933\x05\xEEx\x02\u092D\u0933\x05\xF0y\x02" +
		"\u092E\u0933\x05\xFA~\x02\u092F\u0933\x05\xFE\x80\x02\u0930\u0933\x05" +
		"\xE8u\x02\u0931\u0933\x05\xF2z\x02\u0932\u092C\x03\x02\x02\x02\u0932\u092D" +
		"\x03\x02\x02\x02\u0932\u092E\x03\x02\x02\x02\u0932\u092F\x03\x02\x02\x02" +
		"\u0932\u0930\x03\x02\x02\x02\u0932\u0931\x03\x02\x02\x02\u0933\u0936\x03" +
		"\x02\x02\x02\u0934\u0936\x05\u046C\u0237\x02\u0935\u0932\x03\x02\x02\x02" +
		"\u0935\u0934\x03\x02\x02\x02\u0936\u0939\x03\x02\x02\x02\u0937\u0935\x03" +
		"\x02\x02\x02\u0937\u0938\x03\x02\x02\x02\u0938\u093A\x03\x02\x02\x02\u0939" +
		"\u0937\x03\x02\x02\x02\u093A\u093B\x07\u0218\x02\x02\u093B\xE3\x03\x02" +
		"\x02\x02\u093C\u093D\x07\x8A\x02\x02\u093D\u093F\x07k\x02\x02\u093E\u0940" +
		"\x07\u0100\x02\x02\u093F\u093E\x03\x02\x02\x02\u093F\u0940\x03\x02\x02" +
		"\x02\u0940\u0941\x03\x02\x02\x02\u0941\u0942\x05\u046C\u0237\x02\u0942" +
		"\xE5\x03\x02\x02\x02\u0943\u0944\x07\x8A\x02\x02\u0944\u0945\x07\u01D8" +
		"\x02\x02\u0945\u0946\x07\u0143\x02\x02\u0946\u0947\x05\u049C\u024F\x02" +
		"\u0947\u094F\x07\u01E9\x02\x02\u0948\u0949\x07\xF3\x02\x02\u0949\u094B" +
		"\x073\x02\x02\u094A\u094C\x05\u0474\u023B\x02\u094B\u094A\x03\x02\x02" +
		"\x02\u094C\u094D\x03\x02\x02\x02\u094D\u094B\x03\x02\x02\x02\u094D\u094E" +
		"\x03\x02\x02\x02\u094E\u0950\x03\x02\x02\x02\u094F\u0948\x03\x02\x02\x02" +
		"\u094F\u0950\x03\x02\x02\x02\u0950\xE7\x03\x02\x02\x02\u0951\u0952\x07" +
		"\xA0\x02\x02\u0952\u0954\x07\u0105\x02\x02\u0953\u0955\x07\u0100\x02\x02" +
		"\u0954\u0953\x03\x02\x02\x02\u0954\u0955\x03\x02\x02\x02\u0955\u0956\x03" +
		"\x02\x02\x02\u0956\u0957\x05\u046C\u0237\x02\u0957\xE9\x03\x02\x02\x02" +
		"\u0958\u0959\x07\xBE\x02\x02\u0959\u095B\x07\u0105\x02\x02\u095A\u095C" +
		"\x07\u0100\x02\x02\u095B\u095A\x03\x02\x02\x02\u095B\u095C\x03\x02\x02" +
		"\x02\u095C\u095D\x03\x02\x02\x02\u095D\u095E\x05\u046C\u0237\x02\u095E" +
		"\xEB\x03\x02\x02\x02\u095F\u0961\x07\u0129\x02\x02\u0960\u095F\x03\x02" +
		"\x02\x02\u0960\u0961\x03\x02\x02\x02\u0961\u0962\x03\x02\x02\x02\u0962" +
		"\u0964\x07k\x02\x02\u0963\u0965\x07\u0100\x02\x02\u0964\u0963\x03\x02" +
		"\x02\x02\u0964\u0965\x03\x02\x02\x02\u0965\u0966\x03\x02\x02\x02\u0966" +
		"\u0967\x05\u046C\u0237\x02\u0967\xED\x03\x02\x02\x02\u0968\u0969\x07\u0129" +
		"\x02\x02\u0969\u096B\x07q\x02\x02\u096A\u096C\x07\u0100\x02\x02\u096B" +
		"\u096A\x03\x02\x02\x02\u096B\u096C\x03\x02\x02\x02\u096C\u096D\x03\x02" +
		"\x02\x02\u096D\u096E\x05\u046C\u0237\x02\u096E\xEF\x03\x02\x02\x02\u096F" +
		"\u0970\x07\u0129\x02\x02\u0970\u0972\x07\u01E7\x02\x02\u0971\u0973\x07" +
		"\u0100\x02\x02\u0972\u0971\x03\x02\x02\x02\u0972\u0973\x03\x02\x02\x02" +
		"\u0973\u0974\x03\x02\x02\x02\u0974\u0975\x05\u046C\u0237\x02\u0975\xF1" +
		"\x03\x02\x02\x02\u0976\u0977\x07\u01CB\x02\x02\u0977\u0979\x07\u0105\x02" +
		"\x02\u0978\u097A\x07\u0100\x02\x02\u0979\u0978\x03\x02\x02\x02\u0979\u097A" +
		"\x03\x02\x02\x02\u097A\u097B\x03\x02\x02\x02\u097B\u097C\x05\u046C\u0237" +
		"\x02\u097C\xF3\x03\x02\x02\x02\u097D\u097F\x07\u01D5\x02\x02\u097E\u097D" +
		"\x03\x02\x02\x02\u097E\u097F\x03\x02\x02\x02\u097F\u0980\x03\x02\x02\x02" +
		"\u0980\u0982\x07\x8A\x02\x02\u0981\u0983\x07\u0100\x02\x02\u0982\u0981" +
		"\x03\x02\x02\x02\u0982\u0983\x03\x02\x02\x02\u0983\u0984\x03\x02\x02\x02" +
		"\u0984\u0985\x05\u046C\u0237\x02\u0985\xF5\x03\x02\x02\x02\u0986\u0988" +
		"\x07\u01D5\x02\x02\u0987\u0986\x03\x02\x02\x02\u0987\u0988\x03\x02\x02" +
		"\x02\u0988\u0989\x03\x02\x02\x02\u0989\u098B\x07\u0170\x02\x02\u098A\u098C" +
		"\x07\u0100\x02\x02\u098B\u098A\x03\x02\x02\x02\u098B\u098C\x03\x02\x02" +
		"\x02\u098C\u098D\x03\x02\x02\x02\u098D\u098E\x05\u046C\u0237\x02\u098E" +
		"\xF7\x03\x02\x02\x02\u098F\u0991\x07\u01D5\x02\x02\u0990\u098F\x03\x02" +
		"\x02\x02\u0990\u0991\x03\x02\x02\x02\u0991\u0992\x03\x02\x02\x02\u0992" +
		"\u0994\x07\u01C2\x02\x02\u0993\u0995\x07\u0100\x02\x02\u0994\u0993\x03" +
		"\x02\x02\x02\u0994\u0995\x03\x02\x02\x02\u0995\u0996\x03\x02\x02\x02\u0996" +
		"\u0997\x05\u046C\u0237\x02\u0997\xF9\x03\x02\x02\x02\u0998\u099A\x07\u01D5" +
		"\x02\x02\u0999\u0998\x03\x02\x02\x02\u0999\u099A\x03\x02\x02\x02\u099A" +
		"\u099B\x03\x02\x02\x02\u099B\u099D\x07\u01DD\x02\x02\u099C\u099E\x07\u0100" +
		"\x02\x02\u099D\u099C\x03\x02\x02\x02\u099D\u099E\x03\x02\x02\x02\u099E" +
		"\u099F\x03\x02\x02\x02\u099F\u09A0\x05\u046C\u0237\x02\u09A0\xFB\x03\x02" +
		"\x02\x02\u09A1\u09A3\x07\u01D5\x02\x02\u09A2\u09A1\x03\x02\x02\x02\u09A2" +
		"\u09A3\x03\x02\x02\x02\u09A3\u09A4\x03\x02\x02\x02\u09A4\u09A6\t\x12\x02" +
		"\x02\u09A5\u09A7\x07\u0100\x02\x02\u09A6\u09A5\x03\x02\x02\x02\u09A6\u09A7" +
		"\x03\x02\x02\x02\u09A7\u09A8\x03\x02\x02\x02\u09A8\u09A9\x05\u046C\u0237" +
		"\x02\u09A9\xFD\x03\x02\x02\x02\u09AA\u09AB\x07\u01E0\x02\x02\u09AB\u09AD" +
		"\x07\u010F\x02\x02\u09AC\u09AE\x07\u0100\x02\x02\u09AD\u09AC\x03\x02\x02" +
		"\x02\u09AD\u09AE\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF\u09B0" +
		"\x05\u046C\u0237\x02\u09B0\xFF\x03\x02\x02\x02\u09B1\u09B2\x07\u011F\x02" +
		"\x02\u09B2\u09B3\x07\u01A5\x02\x02\u09B3\u09B8\x07\u0218\x02\x02\u09B4" +
		"\u09B5\x07\u010B\x02\x02\u09B5\u09B6\x05\u047A\u023E\x02\u09B6\u09B7\x07" +
		"\u0218\x02\x02\u09B7\u09B9\x03\x02\x02\x02\u09B8\u09B4\x03\x02\x02\x02" +
		"\u09B8\u09B9\x03\x02\x02\x02\u09B9\u09BD\x03\x02\x02\x02\u09BA\u09BC\x05" +
		"\u01B4\xDB\x02\u09BB\u09BA\x03\x02\x02\x02\u09BC\u09BF\x03\x02\x02\x02" +
		"\u09BD\u09BB\x03\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u0101\x03" +
		"\x02\x02\x02\u09BF\u09BD\x03\x02\x02\x02\u09C0\u09C1\x07\u01A2\x02\x02" +
		"\u09C1\u09C2\x07\u01A5\x02\x02\u09C2\u09C6\x07\u0218\x02\x02\u09C3\u09C5" +
		"\x05\u0104\x83\x02\u09C4\u09C3\x03\x02\x02\x02\u09C5\u09C8\x03\x02\x02" +
		"\x02\u09C6\u09C4\x03\x02\x02\x02\u09C6\u09C7\x03\x02\x02\x02\u09C7\u0103" +
		"\x03\x02\x02\x02\u09C8\u09C6\x03\x02\x02\x02\u09C9\u09CC\x07\u022D\x02" +
		"\x02\u09CA\u09CD\x07\xD2\x02\x02\u09CB\u09CD\x05\u048A\u0246\x02\u09CC" +
		"\u09CA\x03\x02\x02\x02\u09CC\u09CB\x03\x02\x02\x02\u09CC\u09CD\x03\x02" +
		"\x02\x02\u09CD\u09EE\x03\x02\x02\x02\u09CE\u09ED\x05\u0106\x84\x02\u09CF" +
		"\u09ED\x05\u0108\x85\x02\u09D0\u09ED\x05\u010A\x86\x02\u09D1\u09ED\x05" +
		"\u010C\x87\x02\u09D2\u09ED\x05\u010E\x88\x02\u09D3\u09ED\x05\u0110\x89" +
		"\x02\u09D4\u09ED\x05\u0112\x8A\x02\u09D5\u09ED\x05\u0114\x8B\x02\u09D6" +
		"\u09ED\x05\u0116\x8C\x02\u09D7\u09ED\x05\u0118\x8D\x02\u09D8\u09ED\x05" +
		"\u011A\x8E\x02\u09D9\u09ED\x05\u011C\x8F\x02\u09DA\u09ED\x05\u011E\x90" +
		"\x02\u09DB\u09ED\x05\u0120\x91\x02\u09DC\u09ED\x05\u0122\x92\x02\u09DD" +
		"\u09ED\x05\u0124\x93\x02\u09DE\u09E1\x05\u0126\x94\x02\u09DF\u09E1\x05" +
		"\u012A\x96\x02\u09E0\u09DE\x03\x02\x02\x02\u09E0\u09DF\x03\x02\x02\x02" +
		"\u09E1\u09ED\x03\x02\x02\x02\u09E2\u09ED\x05\u012C\x97\x02\u09E3\u09ED" +
		"\x05\u012E\x98\x02\u09E4\u09ED\x05\u0130\x99\x02\u09E5\u09ED\x05\u0132" +
		"\x9A\x02\u09E6\u09ED\x05\u0134\x9B\x02\u09E7\u09ED\x05\u0136\x9C\x02\u09E8" +
		"\u09ED\x05\u0138\x9D\x02\u09E9\u09ED\x05\u013A\x9E\x02\u09EA\u09ED\x05" +
		"\u013E\xA0\x02\u09EB\u09ED\x05\u0140\xA1\x02\u09EC\u09CE\x03\x02\x02\x02" +
		"\u09EC\u09CF\x03\x02\x02\x02\u09EC\u09D0\x03\x02\x02\x02\u09EC\u09D1\x03" +
		"\x02\x02\x02\u09EC\u09D2\x03\x02\x02\x02\u09EC\u09D3\x03\x02\x02\x02\u09EC" +
		"\u09D4\x03\x02\x02\x02\u09EC\u09D5\x03\x02\x02\x02\u09EC\u09D6\x03\x02" +
		"\x02\x02\u09EC\u09D7\x03\x02\x02\x02\u09EC\u09D8\x03\x02\x02\x02\u09EC" +
		"\u09D9\x03\x02\x02\x02\u09EC\u09DA\x03\x02\x02\x02\u09EC\u09DB\x03\x02" +
		"\x02\x02\u09EC\u09DC\x03\x02\x02\x02\u09EC\u09DD\x03\x02\x02\x02\u09EC" +
		"\u09E0\x03\x02\x02\x02\u09EC\u09E2\x03\x02\x02\x02\u09EC\u09E3\x03\x02" +
		"\x02\x02\u09EC\u09E4\x03\x02\x02\x02\u09EC\u09E5\x03\x02\x02\x02\u09EC" +
		"\u09E6\x03\x02\x02\x02\u09EC\u09E7\x03\x02\x02\x02\u09EC\u09E8\x03\x02" +
		"\x02\x02\u09EC\u09E9\x03\x02\x02\x02\u09EC\u09EA\x03\x02\x02\x02\u09EC" +
		"\u09EB\x03\x02\x02\x02\u09ED\u09F0\x03\x02\x02\x02\u09EE\u09EC\x03\x02" +
		"\x02\x02\u09EE\u09EF\x03\x02\x02\x02\u09EF\u09F1\x03\x02\x02\x02\u09F0" +
		"\u09EE\x03\x02\x02\x02\u09F1\u09F2\x07\u0218\x02\x02\u09F2\u0105\x03\x02" +
		"\x02\x02\u09F3\u09F4\x07.\x02\x02\u09F4\u09F5\t\x13\x02\x02\u09F5\u0107" +
		"\x03\x02\x02\x02\u09F6\u09F7\t\x14\x02\x02\u09F7\u0109\x03\x02\x02\x02" +
		"\u09F8\u09F9\x07/\x02\x02\u09F9\u010B\x03\x02\x02\x02\u09FA\u09FB\x07" +
		"\xBD\x02\x02\u09FB\u09FC\t\x15\x02\x02\u09FC\u010D\x03\x02\x02\x02\u09FD" +
		"\u09FE\t\x16\x02\x02\u09FE\u010F\x03\x02\x02\x02\u09FF\u0A00\t\x17\x02" +
		"\x02\u0A00\u0111\x03\x02\x02\x02\u0A01\u0A02\x07\u0193\x02\x02\u0A02\u0113" +
		"\x03\x02\x02\x02\u0A03\u0A04\x07\u01F4\x02\x02\u0A04\u0115\x03\x02\x02" +
		"\x02\u0A05\u0A07\x07\u01B9\x02\x02\u0A06\u0A08\x07\u0100\x02\x02\u0A07" +
		"\u0A06\x03\x02\x02\x02\u0A07\u0A08\x03\x02\x02\x02\u0A08\u0A0B\x03\x02" +
		"\x02\x02\u0A09\u0A0C\x05\u0434\u021B\x02\u0A0A\u0A0C\x05\u049C\u024F\x02" +
		"\u0A0B\u0A09\x03\x02\x02\x02\u0A0B\u0A0A\x03\x02\x02\x02\u0A0C\u0117\x03" +
		"\x02\x02\x02\u0A0D\u0A15\x07\u0119\x02\x02\u0A0E\u0A10\x07\u013D\x02\x02" +
		"\u0A0F\u0A0E\x03\x02\x02\x02\u0A0F\u0A10\x03\x02\x02\x02\u0A10\u0A12\x03" +
		"\x02\x02\x02\u0A11\u0A13\x07\u0100\x02\x02\u0A12\u0A11\x03\x02\x02\x02" +
		"\u0A12\u0A13\x03\x02\x02\x02\u0A13\u0A14\x03\x02\x02\x02\u0A14\u0A16\t" +
		"\x18\x02\x02\u0A15\u0A0F\x03\x02\x02\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16" +
		"\u0A19\x03\x02\x02\x02\u0A17\u0A1A\x05\u0434\u021B\x02\u0A18\u0A1A\x05" +
		"\u049C\u024F\x02\u0A19\u0A17\x03\x02\x02\x02\u0A19\u0A18\x03\x02\x02\x02" +
		"\u0A1A\u0119\x03\x02\x02\x02\u0A1B\u0A23\t\x19\x02\x02\u0A1C\u0A1E\x07" +
		"\u013D\x02\x02\u0A1D\u0A1C\x03\x02\x02\x02\u0A1D\u0A1E\x03\x02\x02\x02" +
		"\u0A1E\u0A20\x03\x02\x02\x02\u0A1F\u0A21\x07\u0100\x02\x02\u0A20\u0A1F" +
		"\x03\x02\x02\x02\u0A20\u0A21\x03\x02\x02\x02\u0A21\u0A22\x03\x02\x02\x02" +
		"\u0A22\u0A24\t\x18\x02\x02\u0A23\u0A1D\x03\x02\x02\x02\u0A23\u0A24\x03" +
		"\x02\x02\x02\u0A24\u0A27\x03\x02\x02\x02\u0A25\u0A28\x05\u0434\u021B\x02" +
		"\u0A26\u0A28\x05\u049C\u024F\x02\u0A27\u0A25\x03\x02\x02\x02\u0A27\u0A26" +
		"\x03\x02\x02\x02\u0A28\u011B\x03\x02\x02\x02\u0A29\u0A2B\t\x1A\x02\x02" +
		"\u0A2A\u0A2C\x07\u0100\x02\x02\u0A2B\u0A2A\x03\x02\x02\x02\u0A2B\u0A2C" +
		"\x03\x02\x02\x02\u0A2C\u0A2F\x03\x02\x02\x02\u0A2D\u0A30\x05\u0434\u021B" +
		"\x02\u0A2E\u0A30\x05\u049C\u024F\x02\u0A2F\u0A2D\x03\x02\x02\x02\u0A2F" +
		"\u0A2E\x03\x02\x02\x02\u0A30\u011D\x03\x02\x02\x02\u0A31\u0A33\t\x1B\x02" +
		"\x02\u0A32\u0A34\x07\u0100\x02\x02\u0A33\u0A32\x03\x02\x02\x02\u0A33\u0A34" +
		"\x03\x02\x02\x02\u0A34\u0A37\x03\x02\x02\x02\u0A35\u0A38\x05\u0434\u021B" +
		"\x02\u0A36\u0A38\x05\u049C\u024F\x02\u0A37";
	private static readonly _serializedATNSegment6: string =
		"\u0A35\x03\x02\x02\x02\u0A37\u0A36\x03\x02\x02\x02\u0A38\u011F\x03\x02" +
		"\x02\x02\u0A39\u0A3B\x07c\x02\x02\u0A3A\u0A3C\x07\u0100\x02\x02\u0A3B" +
		"\u0A3A\x03\x02\x02\x02\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C\u0A3D\x03\x02" +
		"\x02\x02\u0A3D\u0A3E\x05\u0434\u021B\x02\u0A3E\u0121\x03\x02\x02\x02\u0A3F" +
		"\u0A41\x07\u01FD\x02\x02\u0A40\u0A42\x07\u0100\x02\x02\u0A41\u0A40\x03" +
		"\x02\x02\x02\u0A41\u0A42\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02\u0A43" +
		"\u0A44\x05\u0496\u024C\x02\u0A44\u0123\x03\x02\x02\x02\u0A45\u0A47\t\x1C" +
		"\x02\x02\u0A46\u0A48\x07\u0100\x02\x02\u0A47\u0A46\x03\x02\x02\x02\u0A47" +
		"\u0A48\x03\x02\x02\x02\u0A48\u0A49\x03\x02\x02\x02\u0A49\u0A4A\x05\u01D4" +
		"\xEB\x02\u0A4A\u0125\x03\x02\x02\x02\u0A4B\u0A4E\x07\xD9\x02\x02\u0A4C" +
		"\u0A4F\x05\u0434\u021B\x02\u0A4D\u0A4F\x05\u0496\u024C\x02\u0A4E\u0A4C" +
		"\x03\x02\x02\x02\u0A4E\u0A4D\x03\x02\x02\x02\u0A4F\u0A51\x03\x02\x02\x02" +
		"\u0A50\u0A52\x05\u0128\x95\x02\u0A51\u0A50\x03\x02\x02\x02\u0A51\u0A52" +
		"\x03\x02\x02\x02\u0A52\u0127\x03\x02\x02\x02\u0A53\u0A54\x07\u01EB\x02" +
		"\x02\u0A54\u0A55\x05\u0434\u021B\x02\u0A55\u0129\x03\x02\x02\x02\u0A56" +
		"\u0A57\x07\u01FC\x02\x02\u0A57\u0A58\x05\u0434\u021B\x02\u0A58\u012B\x03" +
		"\x02\x02\x02\u0A59\u0A5B\x07\u01FA\x02\x02\u0A5A\u0A5C\x07\u0100\x02\x02" +
		"\u0A5B\u0A5A\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5D\x03" +
		"\x02\x02\x02\u0A5D\u0A5E\t\x1D\x02\x02\u0A5E\u012D\x03\x02\x02\x02\u0A5F" +
		"\u0A61\x07.\x02\x02\u0A60\u0A62\x07\u0202\x02\x02\u0A61\u0A60\x03\x02" +
		"\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62\u0A63\x03\x02\x02\x02\u0A63" +
		"\u0A64\x07\u020B\x02\x02\u0A64\u012F\x03\x02\x02\x02\u0A65\u0A67\t\x1E" +
		"\x02\x02\u0A66\u0A68\x07\u019D\x02\x02\u0A67\u0A66\x03\x02\x02\x02\u0A67" +
		"\u0A68\x03\x02\x02\x02\u0A68\u0131\x03\x02\x02\x02\u0A69\u0A6B\x07\u01B8" +
		"\x02\x02\u0A6A\u0A6C\x07\u0100\x02\x02\u0A6B\u0A6A\x03\x02\x02\x02\u0A6B" +
		"\u0A6C\x03\x02\x02\x02\u0A6C\u0A6E\x03\x02\x02\x02\u0A6D\u0A69\x03\x02" +
		"\x02\x02\u0A6D\u0A6E\x03\x02\x02\x02\u0A6E\u0A6F\x03\x02\x02\x02\u0A6F" +
		"\u0A74\t\t\x02\x02\u0A70\u0A72\x07\u01AD\x02\x02\u0A71\u0A73\x07@\x02" +
		"\x02\u0A72\u0A71\x03\x02\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A75" +
		"\x03\x02\x02\x02\u0A74\u0A70\x03\x02\x02\x02\u0A74\u0A75\x03\x02\x02\x02" +
		"\u0A75\u0133\x03\x02\x02\x02\u0A76\u0A77\t\x1F\x02\x02\u0A77\u0135\x03" +
		"\x02\x02\x02\u0A78\u0A79\t \x02\x02\u0A79\u0137\x03\x02\x02\x02\u0A7A" +
		"\u0A7B\t!\x02\x02\u0A7B\u0139\x03\x02\x02\x02\u0A7C\u0A7E\x07\u016E\x02" +
		"\x02\u0A7D\u0A7F\x07@\x02\x02\u0A7E\u0A7D\x03\x02\x02\x02\u0A7E\u0A7F" +
		"\x03\x02\x02\x02\u0A7F\u0A81\x03\x02\x02\x02\u0A80\u0A82\x07\u0100\x02" +
		"\x02\u0A81\u0A80\x03\x02\x02\x02\u0A81\u0A82\x03\x02\x02\x02\u0A82\u0A85" +
		"\x03\x02\x02\x02\u0A83\u0A86\x05\u0434\u021B\x02\u0A84\u0A86\x05\u0496" +
		"\u024C\x02\u0A85\u0A83\x03\x02\x02\x02\u0A85\u0A84\x03\x02\x02\x02\u0A86" +
		"\u0A88\x03\x02\x02\x02\u0A87\u0A89\x05\u013C\x9F\x02\u0A88\u0A87\x03\x02" +
		"\x02\x02\u0A88\u0A89\x03\x02\x02\x02\u0A89\u013B\x03\x02\x02\x02\u0A8A" +
		"\u0A8B\x07\u0143\x02\x02\u0A8B\u0A8D\x05\u049C\u024F\x02\u0A8C\u0A8E\x07" +
		"\u01E9\x02\x02\u0A8D\u0A8C\x03\x02\x02\x02\u0A8D\u0A8E\x03\x02\x02\x02" +
		"\u0A8E\u013D\x03\x02\x02\x02\u0A8F\u0A90\t\"\x02\x02\u0A90\u013F\x03\x02" +
		"\x02\x02\u0A91\u0A92\x07\u020C\x02\x02\u0A92\u0141\x03\x02\x02\x02\u0A93" +
		"\u0A94\x07\u018D\x02\x02\u0A94\u0A95\x07\u01A5\x02\x02\u0A95\u0A99\x07" +
		"\u0218\x02\x02\u0A96\u0A98\x05\u0144\xA3\x02\u0A97\u0A96\x03\x02\x02\x02" +
		"\u0A98\u0A9B\x03\x02\x02\x02\u0A99\u0A97\x03\x02\x02\x02\u0A99\u0A9A\x03" +
		"\x02\x02\x02\u0A9A\u0143\x03\x02\x02\x02\u0A9B\u0A99\x03\x02\x02\x02\u0A9C" +
		"\u0A9E\x05\u0146\xA4\x02\u0A9D\u0A9F\x05\u0154\xAB\x02\u0A9E\u0A9D\x03" +
		"\x02\x02\x02\u0A9F\u0AA0\x03\x02\x02\x02\u0AA0\u0A9E\x03\x02\x02\x02\u0AA0" +
		"\u0AA1\x03\x02\x02\x02\u0AA1\u0145\x03\x02\x02\x02\u0AA2\u0AA3\x07\u0176" +
		"\x02\x02\u0AA3\u0AA5\x05\u0486\u0244\x02\u0AA4\u0AA6\x05\u0148\xA5\x02" +
		"\u0AA5\u0AA4\x03\x02\x02\x02\u0AA5\u0AA6\x03\x02\x02\x02\u0AA6\u0AB4\x03" +
		"\x02\x02\x02\u0AA7\u0AA9\x05\u014A\xA6\x02\u0AA8\u0AAA\x05\u014C\xA7\x02" +
		"\u0AA9\u0AA8\x03\x02\x02\x02\u0AA9\u0AAA\x03\x02\x02\x02\u0AAA\u0AAC\x03" +
		"\x02\x02\x02\u0AAB\u0AAD\x05\u014E\xA8\x02\u0AAC\u0AAB\x03\x02\x02\x02" +
		"\u0AAC\u0AAD\x03\x02\x02\x02\u0AAD\u0AAF\x03\x02\x02\x02\u0AAE\u0AB0\x05" +
		"\u0150\xA9\x02\u0AAF\u0AAE\x03\x02\x02\x02\u0AAF\u0AB0\x03\x02\x02\x02" +
		"\u0AB0\u0AB2\x03\x02\x02\x02\u0AB1\u0AB3\x05\u0152\xAA\x02\u0AB2\u0AB1" +
		"\x03\x02\x02\x02\u0AB2\u0AB3\x03\x02\x02\x02\u0AB3\u0AB5\x03\x02\x02\x02" +
		"\u0AB4\u0AA7\x03\x02\x02\x02\u0AB4\u0AB5\x03\x02\x02\x02\u0AB5\u0AB6\x03" +
		"\x02\x02\x02\u0AB6\u0AB7\x07\u0218\x02\x02\u0AB7\u0147\x03\x02\x02\x02" +
		"\u0AB8\u0ABA\x07\u0100\x02\x02\u0AB9\u0AB8\x03\x02\x02\x02\u0AB9\u0ABA" +
		"\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02\x02\x02\u0ABB\u0ABC\x07\xE1\x02\x02" +
		"\u0ABC\u0149\x03\x02\x02\x02\u0ABD\u0AC6\x07\u0156\x02\x02\u0ABE\u0AC0" +
		"\x07\u0115\x02\x02\u0ABF\u0AC1\x07\u0100\x02\x02\u0AC0\u0ABF\x03\x02\x02" +
		"\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u0AC7\x03\x02\x02\x02\u0AC2\u0AC4" +
		"\x07\u0116\x02\x02\u0AC3\u0AC5\x07\x17\x02\x02\u0AC4\u0AC3\x03\x02\x02" +
		"\x02\u0AC4\u0AC5\x03\x02\x02\x02\u0AC5\u0AC7\x03\x02\x02\x02\u0AC6\u0ABE" +
		"\x03\x02\x02\x02\u0AC6\u0AC2\x03\x02\x02\x02\u0AC6\u0AC7\x03\x02\x02\x02" +
		"\u0AC7\u0AC8\x03\x02\x02\x02\u0AC8\u0ACA\x05\u049C\u024F\x02\u0AC9\u0ACB" +
		"\t#\x02\x02\u0ACA\u0AC9\x03\x02\x02\x02\u0ACA\u0ACB\x03\x02\x02\x02\u0ACB" +
		"\u014B\x03\x02\x02\x02\u0ACC\u0ACD\x07\xE6\x02\x02\u0ACD\u0ACE\x05\u049C" +
		"\u024F\x02\u0ACE\u014D\x03\x02\x02\x02\u0ACF\u0AD0\x07\xD4\x02\x02\u0AD0" +
		"\u0AD1\x07\x8B\x02\x02\u0AD1\u0AD2\x05\u049C\u024F\x02\u0AD2\u014F\x03" +
		"\x02\x02\x02\u0AD3\u0AD4\x07\u0109\x02\x02\u0AD4\u0AD5\x07\x8B\x02\x02" +
		"\u0AD5\u0AD6\x05\u049C\u024F\x02\u0AD6\u0151\x03\x02\x02\x02\u0AD7\u0AD8" +
		"\x07\xD5\x02\x02\u0AD8\u0AD9\x05\u049C\u024F\x02\u0AD9\u0153\x03\x02\x02" +
		"\x02\u0ADA\u0ADE\x05\u0156\xAC\x02\u0ADB\u0ADE\x05\u0158\xAD\x02\u0ADC" +
		"\u0ADE\x05\u015A\xAE\x02\u0ADD\u0ADA\x03\x02\x02\x02\u0ADD\u0ADB\x03\x02" +
		"\x02\x02\u0ADD\u0ADC\x03\x02\x02\x02\u0ADE\u0155\x03\x02\x02\x02\u0ADF" +
		"\u0AE0\x05\u049C\u024F\x02\u0AE0\u0AE2\x05\u046A\u0236\x02\u0AE1\u0AE3" +
		"\x05\u0164\xB3\x02\u0AE2\u0AE1\x03\x02\x02\x02\u0AE2\u0AE3\x03\x02\x02" +
		"\x02\u0AE3\u0AE5\x03\x02\x02\x02\u0AE4\u0AE6\x05\u016A\xB6\x02\u0AE5\u0AE4" +
		"\x03\x02\x02\x02\u0AE5\u0AE6\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02\x02" +
		"\u0AE7\u0AE9\x05\u017A\xBE\x02\u0AE8\u0AEA\x05\u0186\xC4\x02\u0AE9\u0AE8" +
		"\x03\x02\x02\x02\u0AE9\u0AEA\x03\x02\x02\x02\u0AEA\u0AEB\x03\x02\x02\x02" +
		"\u0AEB\u0AEC\x07\u0218\x02\x02\u0AEC\u0157\x03\x02\x02\x02\u0AED\u0AEF" +
		"\x05\u049C\u024F\x02\u0AEE\u0AF0\x05\u046A\u0236\x02\u0AEF\u0AEE\x03\x02" +
		"\x02\x02\u0AEF\u0AF0\x03\x02\x02\x02\u0AF0\u0AF2\x03\x02\x02\x02\u0AF1" +
		"\u0AF3\x05\u0164\xB3\x02\u0AF2\u0AF1\x03\x02\x02\x02\u0AF2\u0AF3\x03\x02" +
		"\x02\x02\u0AF3\u0AF4\x03\x02\x02\x02\u0AF4\u0AF5\x05\u0186\xC4\x02\u0AF5" +
		"\u0AF6\x07\u0218\x02\x02\u0AF6\u0159\x03\x02\x02\x02\u0AF7\u0AF9\x05\u049C" +
		"\u024F\x02\u0AF8\u0AFA\x05\u046A\u0236\x02\u0AF9\u0AF8\x03\x02\x02\x02" +
		"\u0AF9\u0AFA\x03\x02\x02\x02\u0AFA\u0B0B\x03\x02\x02\x02\u0AFB\u0B0A\x05" +
		"\u0170\xB9\x02\u0AFC\u0B0A\x05\u0186\xC4\x02\u0AFD\u0B0A\x05\u0174\xBB" +
		"\x02\u0AFE\u0B0A\x05\u0162\xB2\x02\u0AFF\u0B0A\x05\u015C\xAF\x02\u0B00" +
		"\u0B0A\x05\u0164\xB3\x02\u0B01\u0B0A\x05\u015E\xB0\x02\u0B02\u0B07\x05" +
		"\u0176\xBC\x02\u0B03\u0B07\x05\u018C\xC7\x02\u0B04\u0B07\x05\u0178\xBD" +
		"\x02\u0B05\u0B07\x05\u0172\xBA\x02\u0B06\u0B02\x03\x02\x02\x02\u0B06\u0B03" +
		"\x03\x02\x02\x02\u0B06\u0B04\x03\x02\x02\x02\u0B06\u0B05\x03\x02\x02\x02" +
		"\u0B07\u0B0A\x03\x02\x02\x02\u0B08\u0B0A\x05\u0160\xB1\x02\u0B09\u0AFB" +
		"\x03\x02\x02\x02\u0B09\u0AFC\x03\x02\x02\x02\u0B09\u0AFD\x03\x02\x02\x02" +
		"\u0B09\u0AFE\x03\x02\x02\x02\u0B09\u0AFF\x03\x02\x02\x02\u0B09\u0B00\x03" +
		"\x02\x02\x02\u0B09\u0B01\x03\x02\x02\x02\u0B09\u0B06\x03\x02\x02\x02\u0B09" +
		"\u0B08\x03\x02\x02\x02\u0B0A\u0B0D\x03\x02\x02\x02\u0B0B\u0B09\x03\x02" +
		"\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C\u0B0E\x03\x02\x02\x02\u0B0D" +
		"\u0B0B\x03\x02\x02\x02\u0B0E\u0B0F\x07\u0218\x02\x02\u0B0F\u015B\x03\x02" +
		"\x02\x02\u0B10\u0B12\x07.\x02\x02\u0B11\u0B13\x07\u0202\x02\x02\u0B12" +
		"\u0B11\x03\x02\x02\x02\u0B12\u0B13\x03\x02\x02\x02\u0B13\u0B14\x03\x02" +
		"\x02\x02\u0B14\u0B15\x07\u020B\x02\x02\u0B15\u015D\x03\x02\x02\x02\u0B16" +
		"\u0B18\x07L\x02\x02\u0B17\u0B19\x07\u013D\x02\x02\u0B18\u0B17\x03\x02" +
		"\x02\x02\u0B18\u0B19\x03\x02\x02\x02\u0B19\u0B1B\x03\x02\x02\x02\u0B1A" +
		"\u0B1C\x07\u0100\x02\x02\u0B1B\u0B1A\x03\x02\x02\x02\u0B1B\u0B1C\x03\x02" +
		"\x02\x02\u0B1C\u0B1D\x03\x02\x02\x02\u0B1D\u0B1E\x05\u049C\u024F\x02\u0B1E" +
		"\u015F\x03\x02\x02\x02\u0B1F\u0B21\x07\xE5\x02\x02\u0B20\u0B22\x07\xF4" +
		"\x02\x02\u0B21\u0B20\x03\x02\x02\x02\u0B21\u0B22\x03\x02\x02\x02\u0B22" +
		"\u0161\x03\x02\x02\x02\u0B23\u0B25\t\x1E\x02\x02\u0B24\u0B26\x07\u019D" +
		"\x02\x02\u0B25\u0B24\x03\x02\x02\x02\u0B25\u0B26\x03\x02\x02\x02\u0B26" +
		"\u0163\x03\x02\x02\x02\u0B27\u0B29\x07\u0119\x02\x02\u0B28\u0B27\x03\x02" +
		"\x02\x02\u0B28\u0B29\x03\x02\x02\x02\u0B29\u0B2B\x03\x02\x02\x02\u0B2A" +
		"\u0B2C\x07\u013D\x02\x02\u0B2B\u0B2A\x03\x02\x02\x02\u0B2B\u0B2C\x03\x02" +
		"\x02\x02\u0B2C\u0B2E\x03\x02\x02\x02\u0B2D\u0B2F\x07\u0100\x02\x02\u0B2E" +
		"\u0B2D\x03\x02\x02\x02\u0B2E\u0B2F\x03\x02\x02\x02\u0B2F\u0B32\x03\x02" +
		"\x02\x02\u0B30\u0B33\x05\u0166\xB4\x02\u0B31\u0B33\x05\u0168\xB5\x02\u0B32" +
		"\u0B30\x03\x02\x02\x02\u0B32\u0B31\x03\x02\x02\x02\u0B33\u0165\x03\x02" +
		"\x02\x02\u0B34\u0B3A\x05\u049C\u024F\x02\u0B35\u0B37\x07\u0148\x02\x02" +
		"\u0B36\u0B35\x03\x02\x02\x02\u0B36\u0B37\x03\x02\x02\x02\u0B37\u0B38\x03" +
		"\x02\x02\x02\u0B38\u0B39\x07\u0137\x02\x02\u0B39\u0B3B\x07\u0156\x02\x02" +
		"\u0B3A\u0B36\x03\x02\x02\x02\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B\u0167\x03" +
		"\x02\x02\x02\u0B3C\u0B3D\x07\u015E\x02\x02\u0B3D\u0B3E\x05\u049C\u024F" +
		"\x02\u0B3E\u0169\x03\x02\x02\x02\u0B3F\u0B40\x07\u0137\x02\x02\u0B40\u0B42" +
		"\x07\xE5\x02\x02\u0B41\u0B43\x07\u0100\x02\x02\u0B42\u0B41\x03\x02\x02" +
		"\x02\u0B42\u0B43\x03\x02\x02\x02\u0B43\u0B47\x03\x02\x02\x02\u0B44\u0B48" +
		"\x05\u049C\u024F\x02\u0B45\u0B48\x05\u016E\xB8\x02\u0B46\u0B48\x05\u016C" +
		"\xB7\x02\u0B47\u0B44\x03\x02\x02\x02\u0B47\u0B45\x03\x02\x02\x02\u0B47" +
		"\u0B46\x03\x02\x02\x02\u0B48\u016B\x03\x02\x02\x02\u0B49\u0B4A\x07\u015E" +
		"\x02\x02\u0B4A\u0B4B\x05\u049C\u024F\x02\u0B4B\u016D\x03\x02\x02\x02\u0B4C" +
		"\u0B4D\x07\u0137\x02\x02\u0B4D\u0B4E\x07\u0156\x02\x02\u0B4E\u016F\x03" +
		"\x02\x02\x02\u0B4F\u0B51\t\x1C\x02\x02\u0B50\u0B52\x07\u0100\x02\x02\u0B51" +
		"\u0B50\x03\x02\x02\x02\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B53\x03\x02" +
		"\x02\x02\u0B53\u0B54\x05\u01D4\xEB\x02\u0B54\u0171\x03\x02\x02\x02\u0B55" +
		"\u0B57\x07\u0194\x02\x02\u0B56\u0B58\x07\u0148\x02\x02\u0B57\u0B56\x03" +
		"\x02\x02\x02\u0B57\u0B58\x03\x02\x02\x02\u0B58\u0B5B\x03\x02\x02\x02\u0B59" +
		"\u0B5C\x07\xD3\x02\x02\u0B5A\u0B5C\x05\u046A\u0236\x02\u0B5B\u0B59\x03" +
		"\x02\x02\x02\u0B5B\u0B5A\x03\x02\x02\x02\u0B5C\u0173\x03\x02\x02\x02\u0B5D" +
		"\u0B5F\x07\u01B8\x02\x02\u0B5E\u0B60\x07\u0100\x02\x02\u0B5F\u0B5E\x03" +
		"\x02\x02\x02\u0B5F\u0B60\x03\x02\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61" +
		"\u0B62\t\t\x02\x02\u0B62\u0B64\x07\u01AD\x02\x02\u0B63\u0B65\x07@\x02" +
		"\x02\u0B64\u0B63\x03\x02\x02\x02\u0B64\u0B65\x03\x02\x02\x02\u0B65\u0175" +
		"\x03\x02\x02\x02\u0B66\u0B68\x07\u01C2\x02\x02\u0B67\u0B69\x07\u0100\x02" +
		"\x02\u0B68\u0B67\x03\x02\x02\x02\u0B68\u0B69\x03\x02\x02\x02\u0B69\u0B6A" +
		"\x03\x02\x02\x02\u0B6A\u0B6B\x05\u0434\u021B\x02\u0B6B\u0177\x03\x02\x02" +
		"\x02\u0B6C\u0B6D\x07\u01D2\x02\x02\u0B6D\u0B74\x05\u0434\u021B\x02\u0B6E" +
		"\u0B70\x07\u0213\x02\x02\u0B6F\u0B6E\x03\x02\x02\x02\u0B6F\u0B70\x03\x02" +
		"\x02\x02\u0B70\u0B71\x03\x02\x02\x02\u0B71\u0B73\x05\u0434\u021B\x02\u0B72" +
		"\u0B6F\x03\x02\x02\x02\u0B73\u0B76\x03\x02\x02\x02\u0B74\u0B72\x03\x02" +
		"\x02\x02\u0B74\u0B75\x03\x02\x02\x02\u0B75\u0B82\x03\x02\x02\x02\u0B76" +
		"\u0B74\x03\x02\x02\x02\u0B77\u0B78\x07\u01F9\x02\x02\u0B78\u0B7F\x05\u046A" +
		"\u0236\x02\u0B79\u0B7B\x07\u0213\x02\x02\u0B7A\u0B79\x03\x02\x02\x02\u0B7A" +
		"\u0B7B\x03\x02\x02\x02\u0B7B\u0B7C\x03\x02\x02\x02\u0B7C\u0B7E\x05\u046A" +
		"\u0236\x02\u0B7D\u0B7A\x03\x02\x02\x02\u0B7E\u0B81\x03\x02\x02\x02\u0B7F" +
		"\u0B7D\x03\x02\x02\x02\u0B7F\u0B80\x03\x02\x02\x02\u0B80\u0B83\x03\x02" +
		"\x02\x02\u0B81\u0B7F\x03\x02\x02\x02\u0B82\u0B77\x03\x02\x02\x02\u0B82" +
		"\u0B83\x03\x02\x02\x02\u0B83\u0179\x03\x02\x02\x02\u0B84\u0B86\x07\u01F2" +
		"\x02\x02\u0B85\u0B87\x07\u0100\x02\x02\u0B86\u0B85\x03\x02\x02\x02\u0B86" +
		"\u0B87\x03\x02\x02\x02\u0B87\u0B8F\x03\x02\x02\x02\u0B88\u0B90\x05\u017C" +
		"\xBF\x02\u0B89\u0B90\x05\u017E\xC0\x02\u0B8A\u0B90\x05\u0180\xC1\x02\u0B8B" +
		"\u0B90\x05\u0182\xC2\x02\u0B8C\u0B90\x05\u0184\xC3\x02\u0B8D\u0B90\x05" +
		"\u0188\xC5\x02\u0B8E\u0B90\x05\u018A\xC6\x02\u0B8F\u0B88\x03\x02\x02\x02" +
		"\u0B8F\u0B89\x03\x02\x02\x02\u0B8F\u0B8A\x03\x02\x02\x02\u0B8F\u0B8B\x03" +
		"\x02\x02\x02\u0B8F\u0B8C\x03\x02\x02\x02\u0B8F\u0B8D\x03\x02\x02\x02\u0B8F" +
		"\u0B8E\x03\x02\x02\x02\u0B90\u017B\x03\x02\x02\x02\u0B91\u0B92\x07\u018D" +
		"\x02\x02\u0B92\u0B95\x07\xE6\x02\x02\u0B93\u0B95\x07\u019C\x02\x02\u0B94" +
		"\u0B91\x03\x02\x02\x02\u0B94\u0B93\x03\x02\x02\x02\u0B95\u017D\x03\x02" +
		"\x02\x02\u0B96\u0B97\x07\u0156\x02\x02\u0B97\u0B9A\x07\xE6\x02\x02\u0B98" +
		"\u0B9A\x07\u015B\x02\x02\u0B99\u0B96\x03\x02\x02\x02\u0B99\u0B98\x03\x02" +
		"\x02\x02\u0B9A\u017F\x03\x02\x02\x02\u0B9B\u0B9C\x07c\x02\x02\u0B9C\u0B9F" +
		"\x07\xE6\x02\x02\u0B9D\u0B9F\x07<\x02\x02\u0B9E\u0B9B\x03\x02\x02\x02" +
		"\u0B9E\u0B9D\x03\x02\x02\x02\u0B9F\u0BA2\x03\x02\x02\x02\u0BA0\u0BA3\x07" +
		"\xD3\x02\x02\u0BA1\u0BA3\x05\u046A\u0236\x02\u0BA2\u0BA0\x03\x02\x02\x02" +
		"\u0BA2\u0BA1\x03\x02\x02\x02\u0BA3\u0181\x03\x02\x02\x02\u0BA4\u0BA5\t" +
		"$\x02\x02\u0BA5\u0183\x03\x02\x02\x02\u0BA6\u0BA7\x07c\x02\x02\u0BA7\u0BAA" +
		"\x07\xD5\x02\x02\u0BA8\u0BAA\x07;\x02\x02\u0BA9\u0BA6\x03\x02\x02\x02" +
		"\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAD\x03\x02\x02\x02\u0BAB\u0BAE\x07" +
		"\xD3\x02\x02\u0BAC\u0BAE\x05\u046A\u0236\x02\u0BAD\u0BAB\x03\x02\x02\x02" +
		"\u0BAD\u0BAC\x03\x02\x02\x02\u0BAE\u0185\x03\x02\x02\x02\u0BAF\u0BB1\x07" +
		"\u01FA\x02\x02\u0BB0\u0BB2\x07\u0100\x02\x02\u0BB1\u0BB0\x03\x02\x02\x02" +
		"\u0BB1\u0BB2\x03\x02\x02\x02\u0BB2\u0BB4\x03\x02\x02\x02\u0BB3\u0BAF\x03" +
		"\x02\x02\x02\u0BB3\u0BB4\x03\x02\x02\x02\u0BB4\u0BB5\x03\x02\x02\x02\u0BB5" +
		"\u0BB6\t\x1D\x02\x02\u0BB6\u0187\x03\x02\x02\x02\u0BB7\u0BB8\x07\u0156" +
		"\x02\x02\u0BB8\u0BBB\x07\xD5\x02\x02\u0BB9\u0BBB\x07\u015A\x02\x02\u0BBA" +
		"\u0BB7\x03\x02\x02\x02\u0BBA\u0BB9\x03\x02\x02\x02\u0BBB\u0189\x03\x02" +
		"\x02\x02\u0BBC\u0BBD\x07\u018D\x02\x02\u0BBD\u0BC0\x07\xD5\x02\x02\u0BBE" +
		"\u0BC0\x07\u019B\x02\x02\u0BBF\u0BBC\x03\x02\x02\x02\u0BBF\u0BBE\x03\x02" +
		"\x02\x02\u0BC0\u018B\x03\x02\x02\x02\u0BC1\u0BC3\x07\u01FD\x02\x02\u0BC2" +
		"\u0BC4\x07\u0100\x02\x02\u0BC3\u0BC2\x03\x02\x02\x02\u0BC3\u0BC4\x03\x02" +
		"\x02\x02\u0BC4\u0BC5\x03\x02\x02\x02\u0BC5\u0BC6\x05\u0496\u024C\x02\u0BC6" +
		"\u018D\x03\x02\x02\x02\u0BC7\u0BC8\x07\u016D\x02\x02\u0BC8\u0BC9\x07\u01A5" +
		"\x02\x02\u0BC9\u0BCD\x07\u0218\x02\x02\u0BCA\u0BCC\x05\u0190\xC9\x02\u0BCB" +
		"\u0BCA\x03\x02\x02\x02\u0BCC\u0BCF\x03\x02\x02\x02\u0BCD\u0BCB\x03\x02" +
		"\x02\x02\u0BCD\u0BCE\x03\x02\x02\x02\u0BCE\u018F\x03\x02\x02\x02\u0BCF" +
		"\u0BCD\x03\x02\x02\x02\u0BD0\u0BD3\x05\u0192\xCA\x02\u0BD1\u0BD3\x05\u0194" +
		"\xCB\x02\u0BD2\u0BD0\x03\x02\x02\x02\u0BD2\u0BD1\x03\x02\x02\x02\u0BD3" +
		"\u0191\x03\x02\x02\x02\u0BD4\u0BD5\x07\u010B\x02\x02\u0BD5\u0BD6\x05\u0478" +
		"\u023D\x02\u0BD6\u0BD8\x07\xCA\x02\x02\u0BD7\u0BD9\x05\u0196\xCC\x02\u0BD8" +
		"\u0BD7\x03\x02\x02\x02\u0BD8\u0BD9\x03\x02\x02\x02\u0BD9\u0BDB\x03\x02" +
		"\x02\x02\u0BDA\u0BDC\x05\u01A0\xD1\x02\u0BDB\u0BDA\x03\x02\x02\x02\u0BDB" +
		"\u0BDC\x03\x02\x02\x02\u0BDC\u0193\x03\x02\x02\x02\u0BDD\u0BDE\x07\u010A" +
		"\x02\x02\u0BDE\u0BDF\x05\u0478\u023D\x02\u0BDF\u0BE1\x07\xF0\x02\x02\u0BE0" +
		"\u0BE2\x05\u01B2\xDA\x02\u0BE1\u0BE0\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02" +
		"\x02\x02\u0BE2\u0BE4\x03\x02\x02\x02\u0BE3\u0BE5\x05\u01B0\xD9\x02\u0BE4" +
		"\u0BE3\x03\x02\x02\x02\u0BE4\u0BE5\x03\x02\x02\x02\u0BE5\u0BEA\x03\x02" +
		"\x02\x02\u0BE6\u0BE9\x05\u0198\xCD\x02\u0BE7\u0BE9\x05\u01A2\xD2\x02\u0BE8" +
		"\u0BE6\x03\x02\x02\x02\u0BE8\u0BE7\x03\x02\x02\x02\u0BE9\u0BEC\x03\x02" +
		"\x02\x02\u0BEA\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB" +
		"\u0195\x03\x02\x02\x02\u0BEC\u0BEA\x03\x02\x02\x02\u0BED\u0BF3\x07!\x02" +
		"\x02\u0BEE\u0BF0\x07\u01B4\x02\x02\u0BEF\u0BF1\x07\u0100\x02\x02\u0BF0" +
		"\u0BEF\x03\x02\x02\x02\u0BF0\u0BF1\x03\x02\x02\x02\u0BF1\u0BF2\x03\x02" +
		"\x02\x02\u0BF2\u0BF4\t%\x02\x02\u0BF3\u0BEE\x03\x02\x02\x02\u0BF3\u0BF4" +
		"\x03\x02\x02\x02\u0BF4\u0197\x03\x02\x02\x02\u0BF5\u0BF7\x07!\x02\x02" +
		"\u0BF6\u0BF8\x05\u019A\xCE\x02\u0BF7\u0BF6\x03\x02\x02\x02\u0BF7\u0BF8" +
		"\x03\x02\x02\x02\u0BF8\u0BFE\x03\x02\x02\x02\u0BF9\u0BFB\x07\u0112\x02" +
		"\x02\u0BFA\u0BFC\x07\u0100\x02\x02\u0BFB\u0BFA\x03\x02\x02\x02\u0BFB\u0BFC" +
		"\x03\x02\x02\x02\u0BFC\u0BFD\x03\x02\x02\x02\u0BFD\u0BFF\t&\x02\x02\u0BFE" +
		"\u0BF9\x03\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF\u0C01\x03\x02" +
		"\x02\x02\u0C00\u0C02\x05\u019C\xCF\x02\u0C01\u0C00\x03\x02\x02\x02\u0C01" +
		"\u0C02\x03\x02\x02\x02\u0C02\u0C04\x03\x02\x02\x02\u0C03\u0C05\x05\u019E" +
		"\xD0\x02\u0C04\u0C03\x03\x02\x02\x02\u0C04\u0C05\x03\x02\x02\x02\u0C05" +
		"\u0199\x03\x02\x02\x02\u0C06\u0C07\x07\xDC\x02\x02\u0C07\u0C08\x07\u0100" +
		"\x02\x02\u0C08\u0C09\x05\u0496\u024C\x02\u0C09\u019B\x03\x02\x02\x02\u0C0A" +
		"\u0C0C\x07\u0113\x02\x02\u0C0B\u0C0D\x07\u0100\x02\x02\u0C0C\u0C0B\x03" +
		"\x02\x02\x02\u0C0C\u0C0D\x03\x02\x02\x02\u0C0D\u0C0E\x03\x02\x02\x02\u0C0E" +
		"\u0C0F\x05\u0496\u024C\x02\u0C0F\u019D\x03\x02\x02\x02\u0C10\u0C12\x07" +
		"\u01EA\x02\x02\u0C11\u0C13\x07\u0100\x02\x02\u0C12\u0C11\x03\x02\x02\x02" +
		"\u0C12\u0C13\x03\x02\x02\x02\u0C13\u0C14\x03\x02\x02\x02\u0C14\u0C15\x05" +
		"\u0496\u024C\x02\u0C15\u019F\x03\x02\x02\x02\u0C16\u0C17\x07\xB9\x02\x02" +
		"\u0C17\u0C19\x05\u0482\u0242\x02\u0C18\u0C1A\x05\u01A4\xD3\x02\u0C19\u0C18" +
		"\x03\x02\x02\x02\u0C19\u0C1A\x03\x02\x02\x02\u0C1A\u01A1\x03\x02\x02\x02" +
		"\u0C1B\u0C1C\x07\xB9\x02\x02\u0C1C\u0C1E\x05\u0482\u0242\x02\u0C1D\u0C1F" +
		"\x05\u01A4\xD3\x02\u0C1E\u0C1D\x03\x02\x02\x02\u0C1E\u0C1F\x03\x02\x02" +
		"\x02\u0C1F\u0C21\x03\x02\x02\x02\u0C20\u0C22\x05\u01AC\xD7\x02\u0C21\u0C20" +
		"\x03\x02\x02\x02\u0C21\u0C22\x03\x02\x02\x02\u0C22\u0C24\x03\x02\x02\x02" +
		"\u0C23\u0C25\x05\u01A8\xD5\x02\u0C24\u0C23\x03\x02\x02\x02\u0C24\u0C25" +
		"\x03\x02\x02\x02\u0C25\u0C27\x03\x02\x02\x02\u0C26\u0C28\x05\u01A6\xD4" +
		"\x02\u0C27\u0C26\x03\x02\x02\x02\u0C27\u0C28\x03\x02\x02\x02\u0C28\u01A3" +
		"\x03\x02\x02\x02\u0C29\u0C2A\x07\xD6\x02\x02\u0C2A\u0C2B\x05\u0496\u024C" +
		"\x02\u0C2B\u01A5\x03\x02\x02\x02\u0C2C\u0C2D\x07\xE0\x02\x02\u0C2D\u0C2E" +
		"\x05\u046A\u0236\x02\u0C2E\u01A7\x03\x02\x02\x02\u0C2F\u0C31\x07\u01FC" +
		"\x02\x02\u0C30\u0C32\x05\u01AA\xD6\x02\u0C31\u0C30\x03\x02\x02\x02\u0C32" +
		"\u0C33\x03\x02\x02\x02\u0C33\u0C31\x03\x02\x02\x02\u0C33\u0C34\x03\x02" +
		"\x02\x02\u0C34\u01A9\x03\x02\x02\x02\u0C35\u0C38\x05\u046A\u0236\x02\u0C36" +
		"\u0C38\x05\u0470\u0239\x02\u0C37\u0C35\x03\x02\x02\x02\u0C37\u0C36\x03" +
		"\x02\x02\x02\u0C38\u01AB\x03\x02\x02\x02\u0C39\u0C3B\x07\u0204\x02\x02" +
		"\u0C3A\u0C3C\x05\u01AE\xD8\x02\u0C3B\u0C3A\x03\x02\x02\x02\u0C3C\u0C3D" +
		"\x03\x02\x02\x02\u0C3D\u0C3B\x03\x02\x02\x02\u0C3D\u0C3E\x03\x02\x02\x02" +
		"\u0C3E\u01AD\x03\x02\x02\x02\u0C3F\u0C42\x05\u047A\u023E\x02\u0C40\u0C42" +
		"\x05\u0470\u0239\x02\u0C41\u0C3F\x03\x02\x02\x02\u0C41\u0C40\x03\x02\x02" +
		"\x02\u0C42\u01AF\x03\x02\x02\x02\u0C43\u0C45\x07\u0100\x02\x02\u0C44\u0C43" +
		"\x03\x02\x02\x02\u0C44\u0C45\x03\x02\x02\x02\u0C45\u0C46\x03\x02\x02\x02" +
		"\u0C46\u0C47\x07P\x02\x02\u0C47\u01B1\x03\x02\x02\x02\u0C48\u0C4A\x07" +
		"\u0100\x02\x02\u0C49\u0C48\x03\x02\x02\x02\u0C49\u0C4A\x03\x02\x02\x02" +
		"\u0C4A\u0C4B\x03\x02\x02\x02\u0C4B\u0C4C\x07\xE1\x02\x02\u0C4C\u01B3\x03" +
		"\x02\x02\x02\u0C4D\u0C52\x05\u01B6\xDC\x02\u0C4E\u0C52\x05\u01B8\xDD\x02" +
		"\u0C4F\u0C52\x05\u01BA\xDE\x02\u0C50\u0C52\x05\u01BC\xDF\x02\u0C51\u0C4D" +
		"\x03\x02\x02\x02\u0C51\u0C4E\x03\x02\x02\x02\u0C51\u0C4F\x03\x02\x02\x02" +
		"\u0C51\u0C50\x03\x02\x02\x02\u0C52\u01B5\x03\x02\x02\x02\u0C53\u0C56\t" +
		"\'\x02\x02\u0C54\u0C57\x07\xD2\x02\x02\u0C55\u0C57\x05\u046A\u0236\x02" +
		"\u0C56\u0C54\x03\x02\x02\x02\u0C56\u0C55\x03\x02\x02\x02\u0C56\u0C57\x03" +
		"\x02\x02\x02\u0C57\u0C6F\x03\x02\x02\x02\u0C58\u0C6E\x05\u01DE\xF0\x02" +
		"\u0C59\u0C6E\x05\u01C8\xE5\x02\u0C5A\u0C6E\x05\u01C4\xE3\x02\u0C5B\u0C6E" +
		"\x05\u01C6\xE4\x02\u0C5C\u0C6E\x05\u01EA\xF6\x02\u0C5D\u0C6E\x05\u01E6" +
		"\xF4\x02\u0C5E\u0C6E\x05\u01D2\xEA\x02\u0C5F\u0C6E\x05\u01C2\xE2\x02\u0C60" +
		"\u0C6E\x05\u01E8\xF5\x02\u0C61\u0C6E\x05\u01EE\xF8\x02\u0C62\u0C6E\x05" +
		"\u01EC\xF7\x02\u0C63\u0C6E\x05\u01F0\xF9\x02\u0C64\u0C6E\x05\u01DA\xEE" +
		"\x02\u0C65\u0C6E\x05\u01CC\xE7\x02\u0C66\u0C6E\x05\u01E2\xF2\x02\u0C67" +
		"\u0C6E\x05\u01E4\xF3\x02\u0C68\u0C6E\x05\u01CA\xE6\x02\u0C69\u0C6E\x05" +
		"\u01C0\xE1\x02\u0C6A\u0C6E\x05\u01F8\xFD\x02\u0C6B\u0C6E\x05\u01BE\xE0" +
		"\x02\u0C6C\u0C6E\x05\u01DC\xEF\x02\u0C6D\u0C58\x03\x02\x02\x02\u0C6D\u0C59" +
		"\x03\x02\x02\x02\u0C6D\u0C5A\x03\x02\x02\x02\u0C6D\u0C5B\x03\x02\x02\x02" +
		"\u0C6D\u0C5C\x03\x02\x02\x02\u0C6D\u0C5D\x03\x02\x02\x02\u0C6D\u0C5E\x03" +
		"\x02\x02\x02\u0C6D\u0C5F\x03\x02\x02\x02\u0C6D\u0C60\x03\x02\x02\x02\u0C6D" +
		"\u0C61\x03\x02\x02\x02\u0C6D\u0C62\x03\x02\x02\x02\u0C6D\u0C63\x03\x02" +
		"\x02\x02\u0C6D\u0C64\x03\x02\x02\x02\u0C6D\u0C65\x03\x02\x02\x02\u0C6D" +
		"\u0C66\x03\x02\x02\x02\u0C6D\u0C67\x03\x02\x02\x02\u0C6D\u0C68\x03\x02" +
		"\x02\x02\u0C6D\u0C69\x03\x02\x02\x02\u0C6D\u0C6A\x03\x02\x02\x02\u0C6D" +
		"\u0C6B\x03\x02\x02\x02\u0C6D\u0C6C\x03\x02\x02\x02\u0C6E\u0C71\x03\x02" +
		"\x02\x02\u0C6F\u0C6D\x03\x02\x02\x02\u0C6F\u0C70\x03\x02\x02\x02\u0C70" +
		"\u0C72\x03\x02\x02\x02\u0C71\u0C6F\x03\x02\x02\x02\u0C72\u0C73\x07\u0218" +
		"\x02\x02\u0C73\u01B7\x03\x02\x02\x02\u0C74\u0C75\x07\u022A\x02\x02\u0C75" +
		"\u0C76\x05\u046A\u0236\x02\u0C76\u0C77\x05\u01E0\xF1\x02\u0C77\u0C78\x07" +
		"\u0218\x02\x02\u0C78\u01B9\x03\x02\x02\x02\u0C79\u0C7A\x07\u022C\x02\x02" +
		"\u0C7A\u0C7B\x05\u0468\u0235\x02\u0C7B\u0C7C\x05\u01F0\xF9\x02\u0C7C\u0C7D" +
		"\x07\u0218\x02\x02\u0C7D\u01BB\x03\x02\x02\x02\u0C7E\u0C80\x07\u0233\x02" +
		"\x02\u0C7F\u0C7E\x03\x02\x02\x02\u0C80\u0C81\x03\x02\x02\x02\u0C81\u0C7F" +
		"\x03\x02\x02\x02\u0C81\u0C82\x03\x02\x02\x02\u0C82\u0C84\x03\x02\x02\x02" +
		"\u0C83\u0C85\x07\u0218\x02\x02\u0C84\u0C83\x03\x02\x02\x02\u0C84\u0C85" +
		"\x03\x02\x02\x02\u0C85\u01BD\x03\x02\x02\x02\u0C86\u0C87\x07\n\x02\x02" +
		"\u0C87\u01BF\x03\x02\x02\x02\u0C88\u0C8A\x07.\x02\x02\u0C89\u0C8B\x07" +
		"\u0202\x02\x02\u0C8A\u0C89\x03\x02\x02\x02\u0C8A\u0C8B\x03\x02\x02\x02" +
		"\u0C8B\u0C8C\x03\x02\x02\x02\u0C8C\u0C8D\t(\x02\x02\u0C8D\u01C1\x03\x02" +
		"\x02\x02\u0C8E\u0C8F\t)\x02\x02\u0C8F\u01C3\x03\x02\x02\x02\u0C90\u0C92" +
		"\x07\u0100\x02\x02\u0C91\u0C90\x03\x02\x02\x02\u0C91\u0C92\x03\x02\x02" +
		"\x02\u0C92\u0C93\x03\x02\x02\x02\u0C93\u0C96\x07\xCD\x02\x02\u0C94\u0C95" +
		"\x073\x02\x02\u0C95\u0C97\x05\u0496\u024C\x02\u0C96\u0C94\x03\x02\x02" +
		"\x02\u0C96\u0C97\x03\x02\x02\x02\u0C97\u01C5\x03\x02\x02\x02\u0C98\u0C9A" +
		"\x07\u0100\x02\x02\u0C99\u0C98\x03\x02\x02\x02\u0C99\u0C9A\x03\x02\x02" +
		"\x02\u0C9A\u0C9B\x03\x02\x02\x02\u0C9B\u0C9C\x07\xE1\x02\x02\u0C9C\u01C7" +
		"\x03\x02\x02\x02\u0C9D\u0C9E\t*\x02\x02\u0C9E\u01C9\x03\x02\x02\x02\u0C9F" +
		"\u0CA1\t\x1E\x02\x02\u0CA0\u0CA2\x07\u019D\x02\x02\u0CA1\u0CA0\x03\x02" +
		"\x02\x02\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2\u01CB\x03\x02\x02\x02\u0CA3" +
		"\u0CA4\x07\u0143\x02\x02\u0CA4\u0CA6\x05\u049C\u024F\x02\u0CA5\u0CA7\x05" +
		"\u01CE\xE8\x02\u0CA6\u0CA5\x03\x02\x02\x02\u0CA6\u0CA7\x03\x02\x02\x02" +
		"\u0CA7\u0CA9\x03\x02\x02\x02\u0CA8\u0CAA\x07\u01E9\x02\x02\u0CA9\u0CA8" +
		"\x03\x02\x02\x02\u0CA9\u0CAA\x03\x02\x02\x02\u0CAA\u0CB0\x03\x02\x02\x02" +
		"\u0CAB\u0CAD\x07\x88\x02\x02\u0CAC\u0CAE\x07\u0148\x02\x02\u0CAD\u0CAC" +
		"\x03\x02\x02\x02\u0CAD\u0CAE\x03\x02\x02\x02\u0CAE\u0CAF\x03\x02\x02\x02" +
		"\u0CAF\u0CB1\x05\u0444\u0223\x02\u0CB0\u0CAB\x03\x02\x02\x02\u0CB0\u0CB1" +
		"\x03\x02\x02\x02\u0CB1\u0CB5\x03\x02\x02\x02\u0CB2\u0CB4\x05\u01D0\xE9" +
		"\x02\u0CB3\u0CB2\x03\x02\x02\x02\u0CB4\u0CB7\x03\x02\x02\x02\u0CB5\u0CB3" +
		"\x03\x02\x02\x02\u0CB5\u0CB6\x03\x02\x02\x02\u0CB6\u0CC4\x03\x02\x02\x02" +
		"\u0CB7\u0CB5\x03\x02\x02\x02\u0CB8\u0CBA\x07\xF3\x02\x02\u0CB9\u0CBB\x07" +
		"3\x02\x02\u0CBA\u0CB9\x03\x02\x02\x02\u0CBA\u0CBB\x03\x02\x02\x02\u0CBB" +
		"\u0CBD\x03\x02\x02\x02\u0CBC\u0CBE\x07\u011E\x02\x02\u0CBD\u0CBC\x03\x02" +
		"\x02\x02\u0CBD\u0CBE\x03\x02\x02\x02\u0CBE\u0CC0\x03\x02\x02\x02\u0CBF" +
		"\u0CC1\x05\u0474\u023B\x02\u0CC0\u0CBF\x03\x02\x02\x02\u0CC1\u0CC2\x03" +
		"\x02\x02\x02\u0CC2\u0CC0\x03\x02\x02\x02\u0CC2\u0CC3\x03\x02\x02\x02\u0CC3" +
		"\u0CC5\x03\x02\x02\x02\u0CC4\u0CB8\x03\x02\x02\x02\u0CC4\u0CC5\x03\x02" +
		"\x02\x02\u0CC5\u01CD\x03\x02\x02\x02\u0CC6\u0CC7\x07\u01EB\x02\x02\u0CC7" +
		"\u0CC8\x05\u049C\u024F\x02\u0CC8\u01CF\x03\x02\x02\x02\u0CC9\u0CCB\t+" +
		"\x02\x02\u0CCA\u0CCC\x07\u0105\x02\x02\u0CCB\u0CCA\x03\x02\x02\x02\u0CCB" +
		"\u0CCC\x03\x02\x02\x02\u0CCC\u0CCE\x03\x02\x02\x02\u0CCD\u0CCF\x07\u0100" +
		"\x02\x02\u0CCE\u0CCD\x03\x02\x02\x02\u0CCE\u0CCF\x03\x02\x02\x02\u0CCF" +
		"\u0CD1\x03\x02\x02\x02\u0CD0\u0CD2\x05\u0444\u0223\x02\u0CD1\u0CD0\x03";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD1\x03\x02\x02\x02\u0CD3" +
		"\u0CD4\x03\x02\x02\x02\u0CD4\u01D1\x03\x02\x02\x02\u0CD5\u0CD7\t\x1C\x02" +
		"\x02\u0CD6\u0CD8\x07\u0100\x02\x02\u0CD7\u0CD6\x03\x02\x02\x02\u0CD7\u0CD8" +
		"\x03\x02\x02\x02\u0CD8\u0CD9\x03\x02\x02\x02\u0CD9\u0CDA\x05\u01D4\xEB" +
		"\x02\u0CDA\u01D3\x03\x02\x02\x02\u0CDB\u0CDD\x05\u01D6\xEC\x02\u0CDC\u0CDB" +
		"\x03\x02\x02\x02\u0CDD\u0CDE\x03\x02\x02\x02\u0CDE\u0CDC\x03\x02\x02\x02" +
		"\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CE1\x03\x02\x02\x02\u0CE0\u0CE2\x05" +
		"\u01D8\xED\x02\u0CE1\u0CE0\x03\x02\x02\x02\u0CE1\u0CE2\x03\x02\x02\x02" +
		"\u0CE2\u0CE4\x03\x02\x02\x02\u0CE3\u0CDC\x03\x02\x02\x02\u0CE4\u0CE5\x03" +
		"\x02\x02\x02\u0CE5\u0CE3\x03\x02\x02\x02\u0CE5\u0CE6\x03\x02\x02\x02\u0CE6" +
		"\u01D5\x03\x02\x02\x02\u0CE7\u0CF8\x07\u0216\x02\x02\u0CE8\u0CF8\x07\u022F" +
		"\x02\x02\u0CE9\u0CF8\x07\u022E\x02\x02\u0CEA\u0CF8\x07\u0228\x02\x02\u0CEB" +
		"\u0CF8\x07\u0213\x02\x02\u0CEC\u0CF8\x07\u0219\x02\x02\u0CED\u0CF8\x07" +
		"\u0212\x02\x02\u0CEE\u0CF8\x07\u0210\x02\x02\u0CEF\u0CF8\x07\u0211\x02" +
		"\x02\u0CF0\u0CF8\x07\u0220\x02\x02\u0CF1\u0CF8\x07\u0227\x02\x02\u0CF2" +
		"\u0CF8\x07\u0225\x02\x02\u0CF3\u0CF8\x07\u0221\x02\x02\u0CF4\u0CF8\x07" +
		"\u021E\x02\x02\u0CF5\u0CF8\x07\u0222\x02\x02\u0CF6\u0CF8\x05\u049C\u024F" +
		"\x02\u0CF7\u0CE7\x03\x02\x02\x02\u0CF7\u0CE8\x03\x02\x02\x02\u0CF7\u0CE9" +
		"\x03\x02\x02\x02\u0CF7\u0CEA\x03\x02\x02\x02\u0CF7\u0CEB\x03\x02\x02\x02" +
		"\u0CF7\u0CEC\x03\x02\x02\x02\u0CF7\u0CED\x03\x02\x02\x02\u0CF7\u0CEE\x03" +
		"\x02\x02\x02\u0CF7\u0CEF\x03\x02\x02\x02\u0CF7\u0CF0\x03\x02\x02\x02\u0CF7" +
		"\u0CF1\x03\x02\x02\x02\u0CF7\u0CF2\x03\x02\x02\x02\u0CF7\u0CF3\x03\x02" +
		"\x02\x02\u0CF7\u0CF4\x03\x02\x02\x02\u0CF7\u0CF5\x03\x02\x02\x02\u0CF7" +
		"\u0CF6\x03\x02\x02\x02\u0CF8\u01D7\x03\x02\x02\x02\u0CF9\u0CFA\x07\u0220" +
		"\x02\x02\u0CFA\u0CFB\x05\u049C\u024F\x02\u0CFB\u0CFC\x07\u0227\x02\x02" +
		"\u0CFC\u01D9\x03\x02\x02\x02\u0CFD\u0CFF\x07\u017A\x02\x02\u0CFE\u0CFD" +
		"\x03\x02\x02\x02\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D01\x03\x02\x02\x02" +
		"\u0D00\u0D02\x073\x02\x02\u0D01\u0D00\x03\x02\x02\x02\u0D01\u0D02\x03" +
		"\x02\x02\x02\u0D02\u0D03\x03\x02\x02\x02\u0D03\u0D04\t,\x02\x02\u0D04" +
		"\u01DB\x03\x02\x02\x02\u0D05\u0D06\x07\u017B\x02\x02\u0D06\u0D07\x07\x18" +
		"\x02\x02\u0D07\u01DD\x03\x02\x02\x02\u0D08\u0D09\x07\u017F\x02\x02\u0D09" +
		"\u0D0A\x05\u046A\u0236\x02\u0D0A\u01DF\x03\x02\x02\x02\u0D0B\u0D0C\x07" +
		"\u018A\x02\x02\u0D0C\u0D0F\x05\u0444\u0223\x02\u0D0D\u0D0E\t\x06\x02\x02" +
		"\u0D0E\u0D10\x05\u0444\u0223\x02\u0D0F\u0D0D\x03\x02\x02\x02\u0D0F\u0D10" +
		"\x03\x02\x02\x02\u0D10\u01E1\x03\x02\x02\x02\u0D11\u0D13\x07\u01B8\x02" +
		"\x02\u0D12\u0D14\x07\u0100\x02\x02\u0D13\u0D12\x03\x02\x02\x02\u0D13\u0D14" +
		"\x03\x02\x02\x02\u0D14\u0D16\x03\x02\x02\x02\u0D15\u0D11\x03\x02\x02\x02" +
		"\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D17\x03\x02\x02\x02\u0D17\u0D1C\t" +
		"\t\x02\x02\u0D18\u0D1A\x07\u01AD\x02\x02\u0D19\u0D1B\x07@\x02\x02\u0D1A" +
		"\u0D19\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02\u0D1B\u0D1D\x03\x02" +
		"\x02\x02\u0D1C\u0D18\x03\x02\x02\x02\u0D1C\u0D1D\x03\x02\x02\x02\u0D1D" +
		"\u01E3\x03\x02\x02\x02\u0D1E\u0D20\t-\x02\x02\u0D1F\u0D21\t.\x02\x02\u0D20" +
		"\u0D1F\x03\x02\x02\x02\u0D20\u0D21\x03\x02\x02\x02\u0D21\u01E5\x03\x02" +
		"\x02\x02\u0D22\u0D24\x07\u0100\x02\x02\u0D23\u0D22\x03\x02\x02\x02\u0D23" +
		"\u0D24\x03\x02\x02\x02\u0D24\u0D25\x03\x02\x02\x02\u0D25\u0D26\x07\u01E4" +
		"\x02\x02\u0D26\u01E7\x03\x02\x02\x02\u0D27\u0D29\x07\u01F2\x02\x02\u0D28" +
		"\u0D2A\x07\u0100\x02\x02\u0D29\u0D28\x03\x02\x02\x02\u0D29\u0D2A\x03\x02" +
		"\x02\x02\u0D2A\u0D2B\x03\x02\x02\x02\u0D2B\u0D2C\t/\x02\x02\u0D2C\u01E9" +
		"\x03\x02\x02\x02\u0D2D\u0D2F\x07\u0100\x02\x02\u0D2E\u0D2D\x03\x02\x02" +
		"\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30\x03\x02\x02\x02\u0D30\u0D31" +
		"\x07\u01F3\x02\x02\u0D31\u01EB\x03\x02\x02\x02\u0D32\u0D34\x07\u01FA\x02" +
		"\x02\u0D33\u0D35\x07\u0100\x02\x02\u0D34\u0D33\x03\x02\x02\x02\u0D34\u0D35" +
		"\x03\x02\x02\x02\u0D35\u0D37\x03\x02\x02\x02\u0D36\u0D32\x03\x02\x02\x02" +
		"\u0D36\u0D37\x03\x02\x02\x02\u0D37\u0D59\x03\x02\x02\x02\u0D38\u0D3A\x07" +
		",\x02\x02\u0D39\u0D3B\t0\x02\x02\u0D3A\u0D39\x03\x02\x02\x02\u0D3A\u0D3B" +
		"\x03\x02\x02\x02\u0D3B\u0D5A\x03\x02\x02\x02\u0D3C\u0D5A\x07-\x02\x02" +
		"\u0D3D\u0D5A\x07R\x02\x02\u0D3E\u0D5A\x07S\x02\x02\u0D3F\u0D5A\x07T\x02" +
		"\x02\u0D40\u0D5A\x07U\x02\x02\u0D41\u0D5A\x07V\x02\x02\u0D42\u0D5A\x07" +
		"W\x02\x02\u0D43\u0D5A\x07X\x02\x02\u0D44\u0D5A\x07Y\x02\x02\u0D45\u0D5A" +
		"\x07Z\x02\x02\u0D46\u0D5A\x07[\x02\x02\u0D47\u0D5A\x07\\\x02\x02\u0D48" +
		"\u0D5A\x07]\x02\x02\u0D49\u0D5A\x07d\x02\x02\u0D4A\u0D5A\x07q\x02\x02" +
		"\u0D4B\u0D5A\x07\x90\x02\x02\u0D4C\u0D5A\x07\x91\x02\x02\u0D4D\u0D5A\x07" +
		"\x95\x02\x02\u0D4E\u0D5A\x07\xC4\x02\x02\u0D4F\u0D5A\x07\xDD\x02\x02\u0D50" +
		"\u0D5A\x07\xF2\x02\x02\u0D51\u0D5A\x07\u0103\x02\x02\u0D52\u0D5A\x07\u0120" +
		"\x02\x02\u0D53\u0D5A\x07\u0132\x02\x02\u0D54\u0D5A\x07\u0154\x02\x02\u0D55" +
		"\u0D5A\x07\u015F\x02\x02\u0D56\u0D5A\x07\u0167\x02\x02\u0D57\u0D5A\x07" +
		"\u0177\x02\x02\u0D58\u0D5A\x07\u01DB\x02\x02\u0D59\u0D38\x03\x02\x02\x02" +
		"\u0D59\u0D3C\x03\x02\x02\x02\u0D59\u0D3D\x03\x02\x02\x02\u0D59\u0D3E\x03" +
		"\x02\x02\x02\u0D59\u0D3F\x03\x02\x02\x02\u0D59\u0D40\x03\x02\x02\x02\u0D59" +
		"\u0D41\x03\x02\x02\x02\u0D59\u0D42\x03\x02\x02\x02\u0D59\u0D43\x03\x02" +
		"\x02\x02\u0D59\u0D44\x03\x02\x02\x02\u0D59\u0D45\x03\x02\x02\x02\u0D59" +
		"\u0D46\x03\x02\x02\x02\u0D59\u0D47\x03\x02\x02\x02\u0D59\u0D48\x03\x02" +
		"\x02\x02\u0D59\u0D49\x03\x02\x02\x02\u0D59\u0D4A\x03\x02\x02\x02\u0D59" +
		"\u0D4B\x03\x02\x02\x02\u0D59\u0D4C\x03\x02\x02\x02\u0D59\u0D4D\x03\x02" +
		"\x02\x02\u0D59\u0D4E\x03\x02\x02\x02\u0D59\u0D4F\x03\x02\x02\x02\u0D59" +
		"\u0D50\x03\x02\x02\x02\u0D59\u0D51\x03\x02\x02\x02\u0D59\u0D52\x03\x02" +
		"\x02\x02\u0D59\u0D53\x03\x02\x02\x02\u0D59\u0D54\x03\x02\x02\x02\u0D59" +
		"\u0D55\x03\x02\x02\x02\u0D59\u0D56\x03\x02\x02\x02\u0D59\u0D57\x03\x02" +
		"\x02\x02\u0D59\u0D58\x03\x02\x02\x02\u0D5A\u01ED\x03\x02\x02\x02\u0D5B" +
		"\u0D5C\x07\u01FC\x02\x02\u0D5C\u0D5E\t1\x02\x02\u0D5D\u0D5F\x07\u0145" +
		"\x02\x02\u0D5E\u0D5D\x03\x02\x02\x02\u0D5E\u0D5F\x03\x02\x02\x02\u0D5F" +
		"\u0D62\x03\x02\x02\x02\u0D60\u0D63\x05\u0494\u024B\x02\u0D61\u0D63\x05" +
		"\u046A\u0236\x02\u0D62\u0D60\x03\x02\x02\x02\u0D62\u0D61\x03\x02\x02\x02" +
		"\u0D63\u01EF\x03\x02\x02\x02\u0D64\u0D66\x07\u01FD\x02\x02\u0D65\u0D67" +
		"\x07\u0100\x02\x02\u0D66\u0D65\x03\x02\x02\x02\u0D66\u0D67\x03\x02\x02" +
		"\x02\u0D67\u0D6D\x03\x02\x02\x02\u0D68\u0D6A\x07\u01FE\x02\x02\u0D69\u0D6B" +
		"\x07\x17\x02\x02\u0D6A\u0D69\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02" +
		"\u0D6B\u0D6D\x03\x02\x02\x02\u0D6C\u0D64\x03\x02\x02\x02\u0D6C\u0D68\x03" +
		"\x02\x02\x02\u0D6C\u0D6D\x03\x02\x02\x02\u0D6D\u0D6E\x03\x02\x02\x02\u0D6E" +
		"\u0D75\x05\u01F2\xFA\x02\u0D6F\u0D71\x07\u0213\x02\x02\u0D70\u0D6F\x03" +
		"\x02\x02\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D72\x03\x02\x02\x02\u0D72" +
		"\u0D74\x05\u01F2\xFA\x02\u0D73\u0D70\x03\x02\x02\x02\u0D74\u0D77\x03\x02" +
		"\x02\x02\u0D75\u0D73\x03\x02\x02\x02\u0D75\u0D76\x03\x02\x02\x02\u0D76" +
		"\u01F1\x03\x02\x02\x02\u0D77\u0D75\x03\x02\x02\x02\u0D78\u0D7A\x05\u01F4" +
		"\xFB\x02\u0D79\u0D7B\x05\u01F6\xFC\x02\u0D7A\u0D79\x03\x02\x02\x02\u0D7A" +
		"\u0D7B\x03\x02\x02\x02\u0D7B\u01F3\x03\x02\x02\x02\u0D7C\u0D7F\x05\u0496" +
		"\u024C\x02\u0D7D\u0D7F\x05\u0494\u024B\x02\u0D7E\u0D7C\x03\x02\x02\x02" +
		"\u0D7E\u0D7D\x03\x02\x02\x02\u0D7F\u01F5\x03\x02\x02\x02\u0D80\u0D81\t" +
		"\x06\x02\x02\u0D81\u0D82\x05\u0496\u024C\x02\u0D82\u01F7\x03\x02\x02\x02" +
		"\u0D83\u0D85\x07\u0204\x02\x02\u0D84\u0D83\x03\x02\x02\x02\u0D84\u0D85" +
		"\x03\x02\x02\x02\u0D85\u0D86\x03\x02\x02\x02\u0D86\u0D87\x07\u0123\x02" +
		"\x02\u0D87\u0D88\x071\x02\x02\u0D88\u01F9\x03\x02\x02\x02\u0D89\u0D8A" +
		"\x07\u0166\x02\x02\u0D8A\u0D8C\x07\x93\x02\x02\u0D8B\u0D8D\x05\u01FC\xFF" +
		"\x02\u0D8C\u0D8B\x03\x02\x02\x02\u0D8C\u0D8D\x03\x02\x02\x02\u0D8D\u0D8F" +
		"\x03\x02\x02\x02\u0D8E\u0D90\x05\u01FE\u0100\x02\u0D8F\u0D8E\x03\x02\x02" +
		"\x02\u0D8F\u0D90\x03\x02\x02\x02\u0D90\u0D91\x03\x02\x02\x02\u0D91\u0D93" +
		"\x07\u0218\x02\x02\u0D92\u0D94\x05\u020A\u0106\x02\u0D93\u0D92\x03\x02" +
		"\x02\x02\u0D93\u0D94\x03\x02\x02\x02\u0D94\u0D95\x03\x02\x02\x02\u0D95" +
		"\u0D96\x05\u0210\u0109\x02\u0D96\u01FB\x03\x02\x02\x02\u0D97\u0D99\t2" +
		"\x02\x02\u0D98\u0D9A\x05\u0200\u0101\x02\u0D99\u0D98\x03\x02\x02\x02\u0D9A" +
		"\u0D9B\x03\x02\x02\x02\u0D9B\u0D99\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02" +
		"\x02\x02\u0D9C\u01FD\x03\x02\x02\x02\u0D9D\u0D9E\t3\x02\x02\u0D9E\u0D9F" +
		"\x05\u046A\u0236\x02\u0D9F\u01FF\x03\x02\x02\x02\u0DA0\u0DA3\x05\u0202" +
		"\u0102\x02\u0DA1\u0DA3\x05\u0206\u0104\x02\u0DA2\u0DA0\x03\x02\x02\x02" +
		"\u0DA2\u0DA1\x03\x02\x02\x02\u0DA3\u0201\x03\x02\x02\x02\u0DA4\u0DA6\x07" +
		"3\x02\x02\u0DA5\u0DA4\x03\x02\x02\x02\u0DA5\u0DA6\x03\x02\x02\x02\u0DA6" +
		"\u0DA7\x03\x02\x02\x02\u0DA7\u0DA9\x07\u0182\x02\x02\u0DA8\u0DA5\x03\x02" +
		"\x02\x02\u0DA8\u0DA9\x03\x02\x02\x02\u0DA9\u0DAB\x03\x02\x02\x02\u0DAA" +
		"\u0DAC\x05\u0204\u0103\x02\u0DAB\u0DAA\x03\x02\x02\x02\u0DAC\u0DAD\x03" +
		"\x02\x02\x02\u0DAD\u0DAB\x03\x02\x02\x02\u0DAD\u0DAE\x03\x02\x02\x02\u0DAE" +
		"\u0203\x03\x02\x02\x02\u0DAF\u0DB1\x07\u014A\x02\x02\u0DB0\u0DAF\x03\x02" +
		"\x02\x02\u0DB0\u0DB1\x03\x02\x02\x02\u0DB1\u0DB4\x03\x02\x02\x02\u0DB2" +
		"\u0DB5\x05\u0434\u021B\x02\u0DB3\u0DB5\x05\u0470\u0239\x02\u0DB4\u0DB2" +
		"\x03\x02\x02\x02\u0DB4\u0DB3\x03\x02\x02\x02\u0DB5\u0DB8\x03\x02\x02\x02" +
		"\u0DB6\u0DB8\x07\x16\x02\x02\u0DB7\u0DB0\x03\x02\x02\x02\u0DB7\u0DB6\x03" +
		"\x02\x02\x02\u0DB8\u0205\x03\x02\x02\x02\u0DB9\u0DBB\x073\x02\x02\u0DBA" +
		"\u0DB9\x03\x02\x02\x02\u0DBA\u0DBB\x03\x02\x02\x02\u0DBB\u0DBC\x03\x02" +
		"\x02\x02\u0DBC\u0DBE\x07\u01FD\x02\x02\u0DBD\u0DBF\x05\u0208\u0105\x02" +
		"\u0DBE\u0DBD\x03\x02\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02\u0DC0\u0DBE\x03" +
		"\x02\x02\x02\u0DC0\u0DC1\x03\x02\x02\x02\u0DC1\u0207\x03\x02\x02\x02\u0DC2" +
		"\u0DC6\x05\u0434\u021B\x02\u0DC3\u0DC6\x05\u0496\u024C\x02\u0DC4\u0DC6" +
		"\x07\x16\x02\x02\u0DC5\u0DC2\x03\x02\x02\x02\u0DC5\u0DC3\x03\x02\x02\x02" +
		"\u0DC5\u0DC4\x03\x02\x02\x02\u0DC6\u0209\x03\x02\x02\x02\u0DC7\u0DC8\x07" +
		"\x81\x02\x02\u0DC8\u0DCA\x07\u0218\x02\x02\u0DC9\u0DCB\x05\u020C\u0107" +
		"\x02\u0DCA\u0DC9\x03\x02\x02\x02\u0DCB\u0DCC\x03\x02\x02\x02\u0DCC\u0DCA" +
		"\x03\x02\x02\x02\u0DCC\u0DCD\x03\x02\x02\x02\u0DCD\u0DCE\x03\x02\x02\x02" +
		"\u0DCE\u0DCF\x07\xA0\x02\x02\u0DCF\u0DD0\x07\x81\x02\x02\u0DD0\u0DD1\x07" +
		"\u0218\x02\x02\u0DD1\u020B\x03\x02\x02\x02\u0DD2\u0DD3\x05\u020E\u0108" +
		"\x02\u0DD3\u0DD4\x07\u0218\x02\x02\u0DD4\u0DD5\x05\u03DC\u01EF\x02\u0DD5" +
		"\u0DD6\x07\u0218\x02\x02\u0DD6\u0DD7\x05\u0214\u010B\x02\u0DD7\u020D\x03" +
		"\x02\x02\x02\u0DD8\u0DD9\x05\u048C\u0247\x02\u0DD9\u0DDB\x07\u01A5\x02" +
		"\x02\u0DDA\u0DDC\x05\u049C\u024F\x02\u0DDB\u0DDA\x03\x02\x02\x02\u0DDB" +
		"\u0DDC\x03\x02\x02\x02\u0DDC\u020F\x03\x02\x02\x02\u0DDD\u0DE1\x05\u0214" +
		"\u010B\x02\u0DDE\u0DE0\x05\u0212\u010A\x02\u0DDF\u0DDE\x03\x02\x02\x02" +
		"\u0DE0\u0DE3\x03\x02\x02\x02\u0DE1\u0DDF\x03\x02\x02\x02\u0DE1\u0DE2\x03" +
		"\x02\x02\x02\u0DE2\u0211\x03\x02\x02\x02\u0DE3\u0DE1\x03\x02\x02\x02\u0DE4" +
		"\u0DE5\x05\u020E\u0108\x02\u0DE5\u0DE6\x07\u0218\x02\x02\u0DE6\u0DE7\x05" +
		"\u0214\u010B\x02\u0DE7\u0213\x03\x02\x02\x02\u0DE8\u0DEA\x05\u0218\u010D" +
		"\x02\u0DE9\u0DE8\x03\x02\x02\x02\u0DEA\u0DED\x03\x02\x02\x02\u0DEB\u0DE9" +
		"\x03\x02\x02\x02\u0DEB\u0DEC\x03\x02\x02\x02\u0DEC\u0DF1\x03\x02\x02\x02" +
		"\u0DED\u0DEB\x03\x02\x02\x02\u0DEE\u0DF0\x05\u0216\u010C\x02\u0DEF\u0DEE" +
		"\x03\x02\x02\x02\u0DF0\u0DF3\x03\x02\x02\x02\u0DF1\u0DEF\x03\x02\x02\x02" +
		"\u0DF1\u0DF2\x03\x02\x02\x02\u0DF2\u0215\x03\x02\x02\x02\u0DF3\u0DF1\x03" +
		"\x02\x02\x02\u0DF4\u0DF5\x05\u047E\u0240\x02\u0DF5\u0DFD\x07\u0218\x02" +
		"\x02\u0DF6\u0DFE\x05\u0236\u011C\x02\u0DF7\u0DF9\x05\u0218\u010D\x02\u0DF8" +
		"\u0DF7\x03\x02\x02\x02\u0DF9\u0DFC\x03\x02\x02\x02\u0DFA\u0DF8\x03\x02" +
		"\x02\x02\u0DFA\u0DFB\x03\x02\x02\x02\u0DFB\u0DFE\x03\x02\x02\x02\u0DFC" +
		"\u0DFA\x03\x02\x02\x02\u0DFD\u0DF6\x03\x02\x02\x02\u0DFD\u0DFA\x03\x02" +
		"\x02\x02\u0DFE\u0217\x03\x02\x02\x02\u0DFF\u0E01\x05\u021A\u010E\x02\u0E00" +
		"\u0DFF\x03\x02\x02\x02\u0E01\u0E04\x03\x02\x02\x02\u0E02\u0E00\x03\x02" +
		"\x02\x02\u0E02\u0E03\x03\x02\x02\x02\u0E03\u0E05\x03\x02\x02\x02\u0E04" +
		"\u0E02\x03\x02\x02\x02\u0E05\u0E06\x07\u0218\x02\x02\u0E06\u0219\x03\x02" +
		"\x02\x02\u0E07\u0E39\x05\u021C\u010F\x02\u0E08\u0E39\x05\u0226\u0114\x02" +
		"\u0E09\u0E39\x05\u0238\u011D\x02\u0E0A\u0E39\x05\u023C\u011F\x02\u0E0B" +
		"\u0E39\x05\u0250\u0129\x02\u0E0C\u0E39\x05\u0254\u012B\x02\u0E0D\u0E39" +
		"\x05\u0266\u0134\x02\u0E0E\u0E39\x05\u026A\u0136\x02\u0E0F\u0E39\x05\u026C" +
		"\u0137\x02\u0E10\u0E39\x05\u026E\u0138\x02\u0E11\u0E39\x05\u0270\u0139" +
		"\x02\u0E12\u0E39\x05\u027A\u013E\x02\u0E13\u0E39\x05\u028A\u0146\x02\u0E14" +
		"\u0E39\x05\u028C\u0147\x02\u0E15\u0E39\x05\u028E\u0148\x02\u0E16\u0E39" +
		"\x05\u02A8\u0155\x02\u0E17\u0E39\x05\u02A2\u0152\x02\u0E18\u0E39\x05\u02A4" +
		"\u0153\x02\u0E19\u0E39\x05\u02A6\u0154\x02\u0E1A\u0E39\x05\u02AC\u0157" +
		"\x02\u0E1B\u0E39\x05\u02AE\u0158\x02\u0E1C\u0E39\x05\u02B0\u0159\x02\u0E1D" +
		"\u0E39\x05\u02B2\u015A\x02\u0E1E\u0E39\x05\u02B8\u015D\x02\u0E1F\u0E39" +
		"\x05\u02BE\u0160\x02\u0E20\u0E39\x05\u02C4\u0163\x02\u0E21\u0E39\x05\u02C6" +
		"\u0164\x02\u0E22\u0E39\x05\u02E4\u0173\x02\u0E23\u0E39\x05\u02F8\u017D" +
		"\x02\u0E24\u0E39\x05\u0302\u0182\x02\u0E25\u0E39\x05\u030E\u0188\x02\u0E26" +
		"\u0E39\x05\u031C\u018F\x02\u0E27\u0E39\x05\u0336\u019C\x02\u0E28\u0E39" +
		"\x05\u0338\u019D\x02\u0E29\u0E39\x05\u0340\u01A1\x02\u0E2A\u0E39\x05\u0356" +
		"\u01AC\x02\u0E2B\u0E39\x05\u0358\u01AD\x02\u0E2C\u0E39\x05\u035C\u01AF" +
		"\x02\u0E2D\u0E39\x05\u0360\u01B1\x02\u0E2E\u0E39\x05\u0366\u01B4\x02\u0E2F" +
		"\u0E39\x05\u037A\u01BE\x02\u0E30\u0E39\x05\u0386\u01C4\x02\u0E31\u0E39" +
		"\x05\u03A0\u01D1\x02\u0E32\u0E39\x05\u03A4\u01D3\x02\u0E33\u0E39\x05\u03A6" +
		"\u01D4\x02\u0E34\u0E39\x05\u03B4\u01DB\x02\u0E35\u0E39\x05\u03C6\u01E4" +
		"\x02\u0E36\u0E39\x05\u03C8\u01E5\x02\u0E37\u0E39\x05\u03E6\u01F4\x02\u0E38" +
		"\u0E07\x03\x02\x02\x02\u0E38\u0E08\x03\x02\x02\x02\u0E38\u0E09\x03\x02" +
		"\x02\x02\u0E38\u0E0A\x03\x02\x02\x02\u0E38\u0E0B\x03\x02\x02\x02\u0E38" +
		"\u0E0C\x03\x02\x02\x02\u0E38\u0E0D\x03\x02\x02\x02\u0E38\u0E0E\x03\x02" +
		"\x02\x02\u0E38\u0E0F\x03\x02\x02\x02\u0E38\u0E10\x03\x02\x02\x02\u0E38" +
		"\u0E11\x03\x02\x02\x02\u0E38\u0E12\x03\x02\x02\x02\u0E38\u0E13\x03\x02" +
		"\x02\x02\u0E38\u0E14\x03\x02\x02\x02\u0E38\u0E15\x03\x02\x02\x02\u0E38" +
		"\u0E16\x03\x02\x02\x02\u0E38\u0E17\x03\x02\x02\x02\u0E38\u0E18\x03\x02" +
		"\x02\x02\u0E38\u0E19\x03\x02\x02\x02\u0E38\u0E1A\x03\x02\x02\x02\u0E38" +
		"\u0E1B\x03\x02\x02\x02\u0E38\u0E1C\x03\x02\x02\x02\u0E38\u0E1D\x03\x02" +
		"\x02\x02\u0E38\u0E1E\x03\x02\x02\x02\u0E38\u0E1F\x03\x02\x02\x02\u0E38" +
		"\u0E20\x03\x02\x02\x02\u0E38\u0E21\x03\x02\x02\x02\u0E38\u0E22\x03\x02" +
		"\x02\x02\u0E38\u0E23\x03\x02\x02\x02\u0E38\u0E24\x03\x02\x02\x02\u0E38" +
		"\u0E25\x03\x02\x02\x02\u0E38\u0E26\x03\x02\x02\x02\u0E38\u0E27\x03\x02" +
		"\x02\x02\u0E38\u0E28\x03\x02\x02\x02\u0E38\u0E29\x03\x02\x02\x02\u0E38" +
		"\u0E2A\x03\x02\x02\x02\u0E38\u0E2B\x03\x02\x02\x02\u0E38\u0E2C\x03\x02" +
		"\x02\x02\u0E38\u0E2D\x03\x02\x02\x02\u0E38\u0E2E\x03\x02\x02\x02\u0E38" +
		"\u0E2F\x03\x02\x02\x02\u0E38\u0E30\x03\x02\x02\x02\u0E38\u0E31\x03\x02" +
		"\x02\x02\u0E38\u0E32\x03\x02\x02\x02\u0E38\u0E33\x03\x02\x02\x02\u0E38" +
		"\u0E34\x03\x02\x02\x02\u0E38\u0E35\x03\x02\x02\x02\u0E38\u0E36\x03\x02" +
		"\x02\x02\u0E38\u0E37\x03\x02\x02\x02\u0E39\u021B\x03\x02\x02\x02\u0E3A" +
		"\u0E3B\x07\x04\x02\x02\u0E3B\u0E40\x05\u0434\u021B\x02\u0E3C\u0E41\x05" +
		"\u021E\u0110\x02\u0E3D\u0E41\x05\u0222\u0112\x02\u0E3E\u0E41\x05\u0220" +
		"\u0111\x02\u0E3F\u0E41\x05\u0224\u0113\x02\u0E40\u0E3C\x03\x02\x02\x02" +
		"\u0E40\u0E3D\x03\x02\x02\x02\u0E40\u0E3E\x03\x02\x02\x02\u0E40\u0E3F\x03" +
		"\x02\x02\x02\u0E40\u0E41\x03\x02\x02\x02\u0E41\u0E43\x03\x02\x02\x02\u0E42" +
		"\u0E44\x05\u0406\u0204\x02\u0E43\u0E42\x03\x02\x02\x02\u0E43\u0E44\x03" +
		"\x02\x02\x02\u0E44\u0E46\x03\x02\x02\x02\u0E45\u0E47\x05\u0408\u0205\x02" +
		"\u0E46\u0E45\x03\x02\x02\x02\u0E46\u0E47\x03\x02\x02\x02\u0E47\u0E49\x03" +
		"\x02\x02\x02\u0E48\u0E4A\x07\xA1\x02\x02\u0E49\u0E48\x03\x02\x02\x02\u0E49" +
		"\u0E4A\x03\x02\x02\x02\u0E4A\u021D\x03\x02\x02\x02\u0E4B\u0E5F\x07\xD9" +
		"\x02\x02\u0E4C\u0E4E\x07q\x02\x02\u0E4D\u0E4F\x07\u0209\x02\x02\u0E4E" +
		"\u0E4D\x03\x02\x02\x02\u0E4E\u0E4F\x03\x02\x02\x02\u0E4F\u0E60\x03\x02" +
		"\x02\x02\u0E50\u0E52\x07t\x02\x02\u0E51\u0E53\x07\u020A\x02\x02\u0E52" +
		"\u0E51\x03\x02\x02\x02\u0E52\u0E53\x03\x02\x02\x02\u0E53\u0E60\x03\x02" +
		"\x02\x02\u0E54\u0E60\x07u\x02\x02\u0E55\u0E60\x07\u01E7\x02\x02\u0E56" +
		"\u0E60\x07\u01E8\x02\x02\u0E57\u0E59\x07\u01EC\x02\x02\u0E58\u0E5A\x07" +
		"\u012A\x02\x02\u0E59\u0E58\x03\x02\x02\x02\u0E59\u0E5A\x03\x02\x02\x02" +
		"\u0E5A\u0E60\x03\x02\x02\x02\u0E5B\u0E60\x07\u01ED\x02\x02\u0E5C\u0E60" +
		"\x07\u0208\x02\x02\u0E5D\u0E60\x07\u0209\x02\x02\u0E5E\u0E60\x07\u020A" +
		"\x02\x02\u0E5F\u0E4C\x03\x02\x02\x02\u0E5F\u0E50\x03\x02\x02\x02\u0E5F" +
		"\u0E54\x03\x02\x02\x02\u0E5F\u0E55\x03\x02\x02\x02\u0E5F\u0E56\x03\x02" +
		"\x02\x02\u0E5F\u0E57\x03\x02\x02\x02\u0E5F\u0E5B\x03\x02\x02\x02\u0E5F" +
		"\u0E5C\x03\x02\x02\x02\u0E5F\u0E5D\x03\x02\x02\x02\u0E5F\u0E5E\x03\x02" +
		"\x02\x02\u0E60\u021F\x03\x02\x02\x02\u0E61\u0E62\x07\xD9\x02\x02\u0E62" +
		"\u0E63\x05\u047C\u023F\x02\u0E63\u0221\x03\x02\x02\x02\u0E64\u0E65\x07" +
		"\xD9\x02\x02\u0E65\u0E66\x07\xC1\x02\x02\u0E66\u0E67\x07\u0105\x02\x02" +
		"\u0E67\u0223\x03\x02\x02\x02\u0E68\u0E6A\x07\u0129\x02\x02\u0E69\u0E68" +
		"\x03\x02\x02\x02\u0E69\u0E6A\x03\x02\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02" +
		"\u0E6B\u0E6C\x07k\x02\x02\u0E6C\u0225\x03\x02\x02\x02\u0E6D\u0E71\x07" +
		"\x06\x02\x02\u0E6E\u0E72\x05\u0228\u0115\x02\u0E6F\u0E72\x05\u022A\u0116" +
		"\x02\u0E70\u0E72\x05\u022C\u0117\x02\u0E71\u0E6E\x03\x02\x02\x02\u0E71" +
		"\u0E6F\x03\x02\x02\x02\u0E71\u0E70\x03\x02\x02\x02\u0E72\u0E74\x03\x02" +
		"\x02\x02\u0E73\u0E75\x05\u0402\u0202\x02\u0E74\u0E73\x03\x02\x02\x02\u0E74" +
		"\u0E75\x03\x02\x02\x02\u0E75\u0E77\x03\x02\x02\x02\u0E76\u0E78\x05\u0404" +
		"\u0203\x02\u0E77\u0E76\x03\x02\x02\x02\u0E77\u0E78\x03\x02\x02\x02\u0E78" +
		"\u0E7A\x03\x02\x02\x02\u0E79\u0E7B\x07\xA2\x02\x02\u0E7A\u0E79\x03\x02" +
		"\x02\x02\u0E7A\u0E7B\x03\x02\x02\x02\u0E7B\u0227\x03\x02\x02\x02\u0E7C" +
		"\u0E7E\x05\u022E\u0118\x02\u0E7D\u0E7C\x03\x02\x02\x02\u0E7E\u0E7F\x03" +
		"\x02\x02\x02\u0E7F\u0E7D\x03\x02\x02\x02\u0E7F\u0E80\x03\x02\x02\x02\u0E80" +
		"\u0E81\x03\x02\x02\x02\u0E81\u0E83\x07\u01EB\x02\x02\u0E82\u0E84\x05\u0230" +
		"\u0119\x02\u0E83\u0E82\x03\x02\x02\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85" +
		"\u0E83\x03\x02\x02\x02\u0E85\u0E86\x03\x02\x02\x02\u0E86\u0229\x03\x02" +
		"\x02\x02\u0E87\u0E89\x05\u022E\u0118\x02\u0E88\u0E87\x03\x02\x02\x02\u0E89" +
		"\u0E8A\x03\x02\x02\x02\u0E8A\u0E88\x03\x02\x02\x02\u0E8A\u0E8B\x03\x02" +
		"\x02\x02\u0E8B\u0E92\x03\x02\x02\x02\u0E8C\u0E8E\x07\u01EB\x02\x02\u0E8D" +
		"\u0E8F\x05\u0232\u011A\x02\u0E8E\u0E8D\x03\x02\x02\x02\u0E8F\u0E90\x03" +
		"\x02\x02\x02\u0E90\u0E8E\x03\x02\x02\x02\u0E90\u0E91\x03\x02\x02\x02\u0E91" +
		"\u0E93\x03\x02\x02\x02\u0E92\u0E8C\x03\x02\x02\x02\u0E92\u0E93\x03\x02" +
		"\x02\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u0E96\x07\xE0\x02\x02\u0E95" +
		"\u0E97\x05\u0234\u011B\x02\u0E96\u0E95\x03\x02\x02\x02\u0E97\u0E98\x03" +
		"\x02\x02\x02\u0E98\u0E96\x03\x02\x02\x02\u0E98\u0E99\x03\x02\x02\x02\u0E99" +
		"\u022B\x03\x02\x02\x02\u0E9A\u0E9B\t4\x02\x02\u0E9B\u0E9C\x05\u0434\u021B" +
		"\x02\u0E9C\u0E9D\x07\u01EB\x02\x02\u0E9D\u0E9E\x05\u0230\u0119\x02\u0E9E" +
		"\u022D\x03\x02\x02\x02\u0E9F\u0EA2\x05\u0434\u021B\x02\u0EA0\u0EA2\x05" +
		"\u0496\u024C\x02\u0EA1\u0E9F\x03\x02\x02\x02\u0EA1\u0EA0\x03\x02\x02\x02" +
		"\u0EA2\u022F\x03\x02\x02\x02\u0EA3\u0EA5\x05\u0434\u021B\x02\u0EA4\u0EA6" +
		"\x07\u019E\x02\x02\u0EA5\u0EA4\x03\x02\x02\x02\u0EA5\u0EA6\x03\x02\x02" +
		"\x02\u0EA6\u0231\x03\x02\x02\x02\u0EA7\u0EAA\x05\u0434\u021B\x02\u0EA8" +
		"\u0EAA\x05\u0496\u024C\x02\u0EA9\u0EA7\x03\x02\x02\x02\u0EA9\u0EA8\x03" +
		"\x02\x02\x02\u0EAA\u0233\x03\x02\x02\x02\u0EAB\u0EAD\x05\u0434\u021B\x02" +
		"\u0EAC\u0EAE\x07\u019E\x02\x02\u0EAD\u0EAC\x03\x02\x02\x02\u0EAD\u0EAE" +
		"\x03\x02\x02\x02\u0EAE\u0235\x03\x02\x02\x02\u0EAF\u0EB1\x07\xE2\x02\x02" +
		"\u0EB0\u0EB2\x07\u01EB\x02\x02\u0EB1\u0EB0\x03\x02\x02\x02\u0EB1\u0EB2" +
		"\x03\x02\x02\x02\u0EB2\u0EB3\x03\x02\x02\x02\u0EB3\u0EB4\x07\u0218\x02" +
		"\x02\u0EB4\u0237\x03\x02\x02\x02\u0EB5\u0EB7\x07\x13\x02\x02\u0EB6\u0EB8" +
		"\x05\u023A\u011E\x02\u0EB7\u0EB6\x03\x02\x02\x02\u0EB8\u0EB9\x03\x02\x02" +
		"\x02\u0EB9\u0EB7\x03\x02\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02\u0EBA\u0239" +
		"\x03\x02\x02\x02\u0EBB\u0EBC\x05\u0480\u0241\x02\u0EBC\u0EBF\x07\u01EB" +
		"\x02\x02\u0EBD\u0EBE\x07\u0169\x02\x02\u0EBE\u0EC0\x07\u01EB\x02\x02\u0EBF" +
		"\u0EBD\x03\x02\x02\x02\u0EBF\u0EC0\x03\x02\x02\x02\u0EC0\u0EC1\x03\x02" +
		"\x02\x02\u0EC1\u0EC2\x05\u0480\u0241\x02\u0EC2\u023B\x03\x02\x02\x02\u0EC3" +
		"\u0EC6\x076\x02\x02\u0EC4\u0EC7\x05\u0434\u021B\x02\u0EC5\u0EC7\x05\u0496" +
		"\u024C\x02\u0EC6\u0EC4\x03\x02\x02\x02\u0EC6\u0EC5\x03\x02\x02\x02\u0EC7" +
		"\u0EC9\x03\x02\x02\x02\u0EC8\u0ECA\x05\u023E\u0120\x02\u0EC9\u0EC8\x03" +
		"\x02\x02\x02\u0EC9\u0ECA\x03\x02\x02\x02\u0ECA\u0ECC\x03\x02\x02\x02\u0ECB" +
		"\u0ECD\x05\u024E\u0128\x02\u0ECC\u0ECB\x03\x02\x02\x02\u0ECC\u0ECD\x03" +
		"\x02\x02\x02\u0ECD\u0ECF\x03\x02\x02\x02\u0ECE\u0ED0\x05\u03FE\u0200\x02" +
		"\u0ECF\u0ECE\x03\x02\x02\x02\u0ECF\u0ED0\x03\x02\x02\x02\u0ED0\u0ED2\x03" +
		"\x02\x02\x02\u0ED1\u0ED3\x05\u0406\u0204\x02\u0ED2\u0ED1\x03\x02\x02\x02" +
		"\u0ED2\u0ED3\x03\x02\x02\x02\u0ED3\u0ED5\x03\x02\x02\x02\u0ED4\u0ED6\x05" +
		"\u0408\u0205\x02\u0ED5\u0ED4\x03\x02\x02\x02\u0ED5\u0ED6\x03\x02\x02\x02" +
		"\u0ED6\u0ED8\x03\x02\x02\x02\u0ED7\u0ED9\x07\xA3\x02\x02\u0ED8\u0ED7\x03" +
		"\x02\x02\x02\u0ED8\u0ED9\x03\x02\x02\x02\u0ED9\u023D\x03\x02\x02\x02\u0EDA" +
		"\u0EDC\x07\u01FC\x02\x02\u0EDB\u0EDD\x05\u0240\u0121\x02\u0EDC\u0EDB\x03" +
		"\x02\x02\x02\u0EDD\u0EDE\x03\x02\x02\x02\u0EDE\u0EDC\x03\x02\x02\x02\u0EDE" +
		"\u0EDF\x03\x02\x02\x02\u0EDF\u023F\x03\x02\x02\x02\u0EE0\u0EE4\x05\u0242" +
		"\u0122\x02\u0EE1\u0EE4\x05\u0246\u0124\x02\u0EE2\u0EE4\x05\u024A\u0126" +
		"\x02\u0EE3\u0EE0\x03\x02\x02\x02\u0EE3\u0EE1\x03\x02\x02\x02\u0EE3\u0EE2" +
		"\x03\x02\x02\x02\u0EE4\u0241\x03\x02\x02\x02\u0EE5\u0EE7\x073\x02\x02" +
		"\u0EE6\u0EE5\x03\x02\x02\x02\u0EE6\u0EE7\x03\x02\x02\x02\u0EE7\u0EE8\x03" +
		"\x02\x02\x02\u0EE8\u0EEA\x07\u0182\x02\x02\u0EE9\u0EE6\x03\x02\x02\x02" +
		"\u0EE9\u0EEA\x03\x02\x02\x02\u0EEA\u0EEC\x03\x02\x02\x02\u0EEB\u0EED\x05" +
		"\u0244\u0123\x02\u0EEC\u0EEB\x03\x02\x02\x02\u0EED\u0EEE\x03\x02\x02\x02" +
		"\u0EEE\u0EEC\x03\x02\x02\x02\u0EEE\u0EEF\x03\x02\x02\x02\u0EEF\u0243\x03" +
		"\x02\x02\x02\u0EF0\u0EF1\x07\x07\x02\x02\u0EF1\u0EF5\x07\u0145\x02\x02" +
		"\u0EF2\u0EF5\x07\xFC\x02\x02\u0EF3\u0EF5\x07\u01CD\x02\x02\u0EF4\u0EF0" +
		"\x03\x02\x02\x02\u0EF4\u0EF2\x03\x02\x02\x02\u0EF4\u0EF3\x03\x02\x02\x02" +
		"\u0EF4\u0EF5\x03\x02\x02\x02\u0EF5\u0EF6\x03\x02\x02\x02\u0EF6\u0EFA\x05" +
		"\u0434\u021B\x02\u0EF7\u0EFA\x05\u0496\u024C\x02\u0EF8\u0EFA\x05\u0470" +
		"\u0239\x02\u0EF9\u0EF4\x03\x02\x02\x02\u0EF9\u0EF7\x03\x02\x02\x02\u0EF9" +
		"\u0EF8\x03\x02\x02\x02\u0EFA\u0EFD\x03\x02\x02\x02\u0EFB\u0EFD\x07\u0147" +
		"\x02\x02\u0EFC\u0EF9\x03\x02\x02\x02\u0EFC\u0EFB\x03\x02\x02\x02\u0EFD" +
		"\u0245\x03\x02\x02\x02\u0EFE\u0F00\x073\x02\x02\u0EFF\u0EFE\x03\x02\x02" +
		"\x02\u0EFF\u0F00\x03\x02\x02\x02\u0F00\u0F01\x03\x02\x02\x02\u0F01\u0F03" +
		"\x07\u01FD\x02\x02\u0F02\u0F04\x05\u0248\u0125\x02\u0F03\u0F02\x03\x02" +
		"\x02\x02\u0F04\u0F05\x03\x02\x02\x02\u0F05\u0F03\x03\x02\x02\x02\u0F05" +
		"\u0F06\x03\x02\x02\x02\u0F06\u0247\x03\x02\x02\x02\u0F07\u0F08\x07\x07" +
		"\x02\x02\u0F08\u0F0E\x07\u0145\x02\x02\u0F09\u0F0B\x07\u010F\x02\x02\u0F0A" +
		"\u0F0C\x07\u0145\x02\x02\u0F0B\u0F0A\x03\x02\x02\x02\u0F0B\u0F0C\x03\x02" +
		"\x02\x02\u0F0C\u0F0E\x03\x02\x02\x02\u0F0D\u0F07\x03\x02\x02\x02\u0F0D" +
		"\u0F09\x03\x02\x02\x02\u0F0D\u0F0E\x03\x02\x02\x02\u0F0E\u0F11\x03\x02" +
		"\x02\x02\u0F0F\u0F12\x05\u0434\u021B\x02\u0F10\u0F12\x05\u0496\u024C\x02" +
		"\u0F11\u0F0F\x03\x02\x02\x02\u0F11\u0F10\x03\x02\x02\x02\u0F12\u0249\x03" +
		"\x02\x02\x02\u0F13\u0F15\x073\x02\x02\u0F14\u0F13\x03\x02\x02\x02\u0F14" +
		"\u0F15\x03\x02\x02\x02\u0F15\u0F16\x03\x02\x02\x02\u0F16\u0F18\x07a\x02" +
		"\x02\u0F17\u0F19\x05\u024C\u0127\x02\u0F18\u0F17\x03\x02\x02\x02\u0F19" +
		"\u0F1A\x03\x02\x02\x02\u0F1A\u0F18\x03\x02\x02\x02\u0F1A\u0F1B\x03\x02" +
		"\x02\x02\u0F1B\u024B\x03\x02\x02\x02\u0F1C\u0F1D\x07\x07\x02\x02\u0F1D" +
		"\u0F23\x07\u0145\x02\x02\u0F1E\u0F20\x07\u010F\x02\x02\u0F1F\u0F21\x07" +
		"\u0145\x02\x02\u0F20\u0F1F\x03\x02\x02\x02\u0F20\u0F21\x03\x02\x02\x02" +
		"\u0F21\u0F23\x03\x02\x02\x02\u0F22\u0F1C\x03\x02\x02\x02\u0F22\u0F1E\x03" +
		"\x02\x02\x02\u0F22\u0F23\x03\x02\x02\x02\u0F23\u0F24\x03\x02\x02\x02\u0F24" +
		"\u0F28\x05\u0434\u021B\x02\u0F25\u0F28\x05\u0496\u024C\x02\u0F26\u0F28" +
		"\x07\u0147\x02\x02\u0F27\u0F22\x03\x02\x02\x02\u0F27\u0F25\x03\x02\x02" +
		"\x02\u0F27\u0F26\x03\x02\x02\x02\u0F28\u024D\x03\x02\x02\x02\u0F29\u0F2A" +
		"\t3\x02\x02\u0F2A\u0F2B\x05\u0434\u021B\x02\u0F2B\u024F\x03\x02\x02\x02" +
		"\u0F2C\u0F2E\x077\x02\x02\u0F2D\u0F2F\x05\u0252\u012A\x02\u0F2E\u0F2D" +
		"\x03\x02\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30\u0F2E\x03\x02\x02\x02" +
		"\u0F30\u0F31\x03\x02\x02\x02\u0F31\u0251\x03\x02\x02\x02\u0F32\u0F33\x05" +
		"\u0478\u023D\x02\u0F33\u0F34\t&\x02\x02\u0F34\u0F38\x03\x02\x02\x02\u0F35" +
		"\u0F38\x05\u0434\u021B\x02\u0F36\u0F38\x05\u0496\u024C\x02\u0F37\u0F32" +
		"\x03\x02\x02\x02\u0F37\u0F35\x03\x02\x02\x02\u0F37\u0F36\x03\x02\x02\x02" +
		"\u0F38\u0253\x03\x02\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\u0F39\u0F3B\x07E\x02\x02\u0F3A\u0F3C\x05\u0256\u012C\x02\u0F3B\u0F3A" +
		"\x03\x02\x02\x02\u0F3C\u0F3D\x03\x02\x02\x02\u0F3D\u0F3B\x03\x02\x02\x02" +
		"\u0F3D\u0F3E\x03\x02\x02\x02\u0F3E\u0255\x03\x02\x02\x02\u0F3F\u0F43\x05" +
		"\u0470\u0239\x02\u0F40\u0F44\x05\u0258\u012D\x02\u0F41\u0F44\x05\u025A" +
		"\u012E\x02\u0F42\u0F44\x05\u025C\u012F\x02\u0F43\u0F40\x03\x02\x02\x02" +
		"\u0F43\u0F41\x03\x02\x02\x02\u0F43\u0F42\x03\x02\x02\x02\u0F43\u0F44\x03" +
		"\x02\x02\x02\u0F44\u0257\x03\x02\x02\x02\u0F45\u0F4A\t\x0E\x02\x02\u0F46" +
		"\u0F48\x07\xD6\x02\x02\u0F47\u0F46\x03\x02\x02\x02\u0F47\u0F48\x03\x02" +
		"\x02\x02\u0F48\u0F49\x03\x02\x02\x02\u0F49\u0F4B\x07\u0188\x02\x02\u0F4A" +
		"\u0F47\x03\x02\x02\x02\u0F4A\u0F4B\x03\x02\x02\x02\u0F4B\u0F54\x03\x02" +
		"\x02\x02\u0F4C\u0F4E\x07\u0204\x02\x02\u0F4D\u0F4C\x03\x02\x02\x02\u0F4D" +
		"\u0F4E\x03\x02\x02\x02\u0F4E\u0F52\x03\x02\x02\x02\u0F4F\u0F50\x07\u0138" +
		"\x02\x02\u0F50\u0F53\x07\u0199\x02\x02\u0F51\u0F53\x07\u0120\x02\x02\u0F52" +
		"\u0F4F\x03\x02\x02\x02\u0F52\u0F51\x03\x02\x02\x02\u0F53\u0F55\x03\x02" +
		"\x02\x02\u0F54\u0F4D\x03\x02\x02\x02\u0F54\u0F55\x03\x02\x02\x02\u0F55" +
		"\u0259\x03\x02\x02\x02\u0F56\u0F58\x07\u0204\x02\x02\u0F57\u0F56\x03\x02" +
		"\x02\x02\u0F57\u0F58\x03\x02\x02\x02\u0F58\u0F5C\x03\x02\x02\x02\u0F59" +
		"\u0F5A\x07\u0138\x02\x02\u0F5A\u0F5D\x07\u0199\x02\x02\u0F5B\u0F5D\x07" +
		"\u0120\x02\x02\u0F5C\u0F59\x03\x02\x02\x02\u0F5C\u0F5B\x03\x02\x02\x02" +
		"\u0F5D\u025B\x03\x02\x02\x02\u0F5E\u0F60\x07\u0204\x02\x02\u0F5F\u0F5E" +
		"\x03\x02\x02\x02\u0F5F\u0F60\x03\x02\x02\x02\u0F60\u0F61\x03\x02\x02\x02" +
		"\u0F61\u0F62\x07\u0138\x02\x02\u0F62\u0F66\x07\u0201\x02\x02\u0F63\u0F64" +
		"\x07\u0204\x02\x02\u0F64\u0F66\x07\u0201\x02\x02\u0F65\u0F5F\x03\x02\x02" +
		"\x02\u0F65\u0F63\x03\x02\x02\x02\u0F66\u0F6D\x03\x02\x02\x02\u0F67\u0F69" +
		"\x07\u01FC\x02\x02\u0F68\u0F6A\x05\u025E\u0130\x02\u0F69\u0F68\x03\x02" +
		"\x02\x02\u0F6A\u0F6B\x03\x02\x02\x02\u0F6B\u0F69\x03\x02\x02\x02\u0F6B" +
		"\u0F6C\x03\x02\x02\x02\u0F6C\u0F6E\x03\x02\x02\x02\u0F6D\u0F67\x03\x02" +
		"\x02\x02\u0F6D\u0F6E\x03\x02\x02\x02\u0F6E\u025D\x03\x02\x02\x02\u0F6F" +
		"\u0F73\x05\u0260\u0131\x02\u0F70\u0F73\x05\u0262\u0132\x02\u0F71\u0F73" +
		"\x05\u0264\u0133\x02\u0F72\u0F6F\x03\x02\x02\x02\u0F72\u0F70\x03\x02\x02" +
		"\x02\u0F72\u0F71\x03\x02\x02\x02\u0F73\u025F\x03\x02\x02\x02\u0F74\u0F76" +
		"\x07F\x02\x02\u0F75\u0F77\x07\u0145\x02\x02\u0F76\u0F75\x03\x02\x02\x02" +
		"\u0F76\u0F77\x03\x02\x02\x02\u0F77\u0F78\x03\x02\x02\x02\u0F78\u0F79\t" +
		"5\x02\x02\u0F79\u0261\x03\x02\x02\x02\u0F7A\u0F7D\x07\x1E\x02\x02\u0F7B" +
		"\u0F7E\x05\u0434\u021B\x02\u0F7C\u0F7E\x05\u049C\u024F\x02\u0F7D\u0F7B" +
		"\x03\x02\x02\x02\u0F7D\u0F7C\x03\x02\x02\x02\u0F7E\u0263\x03\x02\x02\x02" +
		"\u0F7F\u0F81\x07\x1F\x02\x02\u0F80\u0F82\x07\u0145\x02\x02\u0F81\u0F80" +
		"\x03\x02\x02\x02\u0F81\u0F82\x03\x02\x02\x02\u0F82\u0F85\x03\x02\x02\x02" +
		"\u0F83\u0F86\x05\u0434\u021B\x02\u0F84\u0F86\x05\u049C\u024F\x02\u0F85" +
		"\u0F83\x03\x02\x02\x02\u0F85\u0F84\x03\x02\x02\x02\u0F86\u0265\x03\x02" +
		"\x02\x02\u0F87\u0F89\x07^\x02\x02\u0F88\u0F8A\x05\u0268\u0135\x02\u0F89" +
		"\u0F88\x03\x02\x02\x02\u0F8A\u0F8B\x03\x02\x02\x02\u0F8B\u0F89\x03\x02" +
		"\x02\x02\u0F8B\u0F8C\x03\x02\x02\x02\u0F8C\u0F8D\x03\x02\x02\x02\u0F8D" +
		"\u0F8E\t6\x02\x02\u0F8E\u0F90\x05\u040A\u0206\x02\u0F8F\u0F91\x05\u0402" +
		"\u0202\x02\u0F90\u0F8F\x03\x02\x02\x02\u0F90\u0F91\x03\x02\x02\x02\u0F91" +
		"\u0F93\x03\x02\x02\x02\u0F92\u0F94\x05\u0404\u0203\x02\u0F93\u0F92\x03" +
		"\x02\x02\x02\u0F93\u0F94\x03\x02\x02\x02\u0F94\u0F96\x03\x02\x02\x02\u0F95" +
		"\u0F97\x07\xA4\x02\x02\u0F96\u0F95\x03\x02\x02\x02\u0F96\u0F97\x03\x02" +
		"\x02\x02\u0F97\u0267\x03\x02\x02\x02\u0F98\u0F9A\x05\u0434\u021B\x02\u0F99" +
		"\u0F9B\x07\u019E\x02\x02\u0F9A\u0F99\x03\x02\x02\x02\u0F9A\u0F9B\x03\x02" +
		"\x02\x02\u0F9B\u0269\x03\x02\x02\x02\u0F9C\u0F9D\x07b\x02\x02\u0F9D\u026B" +
		"\x03\x02\x02\x02\u0F9E\u0F9F\x07\x85\x02\x02\u0F9F\u0FA1\x05\u0470\u0239" +
		"\x02\u0FA0\u0FA2\x07\u017B\x02\x02\u0FA1\u0FA0\x03\x02\x02\x02\u0FA1\u0FA2" +
		"\x03\x02\x02\x02\u0FA2\u0FA4\x03\x02\x02\x02\u0FA3\u0FA5\x05\u03FA\u01FE" +
		"\x02\u0FA4\u0FA3\x03\x02\x02\x02\u0FA4\u0FA5\x03\x02\x02\x02\u0FA5\u0FA7" +
		"\x03\x02\x02\x02\u0FA6\u0FA8\x05\u03FC\u01FF\x02\u0FA7\u0FA6\x03\x02\x02" +
		"\x02\u0FA7\u0FA8\x03\x02\x02\x02\u0FA8\u0FAA\x03\x02\x02\x02\u0FA9\u0FAB" +
		"\x07\xA5\x02\x02\u0FAA\u0FA9\x03\x02\x02\x02\u0FAA\u0FAB\x03\x02\x02\x02" +
		"\u0FAB\u026D\x03\x02\x02\x02\u0FAC\u0FB4\x07\x8E\x02\x02\u0FAD\u0FAF\x07" +
		"\xF8\x02\x02\u0FAE\u0FB0\x07\u01DD\x02\x02\u0FAF\u0FAE\x03\x02\x02\x02" +
		"\u0FAF\u0FB0\x03\x02\x02\x02\u0FB0\u0FB5\x03\x02\x02\x02\u0FB1\u0FB2\x07" +
		"\xEA\x02\x02\u0FB2\u0FB5\x07\u01DD\x02\x02\u0FB3\u0FB5\x07\u0150\x02\x02" +
		"\u0FB4\u0FAD\x03\x02\x02\x02\u0FB4\u0FB1\x03\x02\x02\x02\u0FB4\u0FB3\x03" +
		"\x02\x02\x02\u0FB5\u0FB6\x03\x02\x02\x02\u0FB6\u0FB8\x05\u0462\u0232\x02" +
		"\u0FB7\u0FB9\x07\u0204\x02\x02\u0FB8\u0FB7\x03\x02\x02\x02\u0FB8\u0FB9" +
		"\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02\x02\x02\u0FBA\u0FBD\x07\u0105\x02" +
		"\x02\u0FBB\u0FBE\x05\u0434\u021B\x02\u0FBC\u0FBE\x05\u0496\u024C\x02\u0FBD" +
		"\u0FBB\x03\x02\x02\x02\u0FBD\u0FBC\x03\x02\x02\x02\u0FBE\u026F\x03\x02" +
		"\x02\x02\u0FBF\u0FC1\x07\x90\x02\x02\u0FC0\u0FC2\x05\u0272\u013A\x02\u0FC1" +
		"\u0FC0\x03\x02\x02\x02\u0FC2\u0FC3\x03\x02\x02\x02\u0FC3\u0FC1\x03\x02" +
		"\x02\x02\u0FC3\u0FC4\x03\x02\x02\x02\u0FC4\u0FC6\x03\x02\x02\x02\u0FC5" +
		"\u0FC7\x05\u0274\u013B\x02\u0FC6\u0FC5\x03\x02\x02\x02\u0FC6\u0FC7\x03" +
		"\x02\x02\x02\u0FC7\u0FC9\x03\x02\x02\x02\u0FC8\u0FCA\x05\u0276\u013C\x02" +
		"\u0FC9\u0FC8\x03\x02\x02\x02\u0FC9\u0FCA\x03\x02\x02\x02\u0FCA\u0FCC\x03" +
		"\x02\x02\x02\u0FCB\u0FCD\x05\u0278\u013D\x02\u0FCC\u0FCB\x03\x02\x02\x02" +
		"\u0FCC\u0FCD\x03\x02\x02\x02\u0FCD\u0271\x03\x02\x02\x02\u0FCE\u0FD1\x05" +
		"\u0434\u021B\x02\u0FCF\u0FD1\x05\u0496\u024C\x02\u0FD0\u0FCE\x03\x02\x02" +
		"\x02\u0FD0\u0FCF\x03\x02\x02\x02\u0FD1\u0273\x03\x02\x02\x02\u0FD2\u0FD5" +
		"\x07 \x02\x02\u0FD3\u0FD6\x05\u0434\u021B\x02\u0FD4\u0FD6\x05\u0496\u024C" +
		"\x02\u0FD5\u0FD3\x03\x02\x02\x02\u0FD5\u0FD4\x03\x02\x02\x02\u0FD6\u0275" +
		"\x03\x02\x02\x02\u0FD7\u0FDA\x07\u01F9\x02\x02\u0FD8\u0FDB\x05\u047C\u023F" +
		"\x02\u0FD9\u0FDB\x05\u046E\u0238\x02\u0FDA\u0FD8\x03\x02\x02\x02\u0FDA" +
		"\u0FD9\x03\x02\x02\x02\u0FDB\u0277\x03\x02\x02\x02\u0FDC\u0FDE\x07\u0204" +
		"\x02\x02\u0FDD\u0FDC\x03\x02\x02\x02\u0FDD\u0FDE\x03\x02\x02\x02\u0FDE" +
		"\u0FDF\x03\x02\x02\x02\u0FDF\u0FE0\x07\u0138\x02\x02\u0FE0\u0FE1\x07\b" +
		"\x02\x02\u0FE1\u0279\x03\x02\x02\x02\u0FE2\u0FE5\x07\x92\x02\x02\u0FE3" +
		"\u0FE6\x05\u0434\u021B\x02\u0FE4\u0FE6\x05\u0496\u024C\x02\u0FE5\u0FE3" +
		"\x03\x02\x02\x02\u0FE5\u0FE4\x03\x02\x02\x02\u0FE6\u0FEA\x03\x02\x02\x02" +
		"\u0FE7\u0FEB\x05\u027C\u013F\x02\u0FE8\u0FEB\x05\u027E\u0140\x02\u0FE9" +
		"\u0FEB\x05\u0280\u0141\x02\u0FEA\u0FE7\x03\x02\x02\x02\u0FEA\u0FE8\x03" +
		"\x02\x02\x02\u0FEA\u0FE9\x03\x02\x02\x02\u0FEB\u0FED\x03\x02\x02\x02\u0FEC" +
		"\u0FEE\x05\u0288\u0145\x02\u0FED\u0FEC\x03\x02\x02\x02\u0FED\u0FEE\x03" +
		"\x02\x02\x02\u0FEE\u0FF0\x03\x02\x02\x02\u0FEF\u0FF1\x05\u0402\u0202\x02" +
		"\u0FF0\u0FEF\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02\x02\x02\u0FF1\u0FF3\x03" +
		"\x02\x02\x02\u0FF2\u0FF4\x05\u0404\u0203\x02\u0FF3\u0FF2\x03\x02\x02\x02" +
		"\u0FF3\u0FF4\x03\x02\x02\x02\u0FF4\u0FF6\x03\x02\x02\x02\u0FF5\u0FF7\x07" +
		"\xA6\x02\x02\u0FF6\u0FF5\x03\x02\x02\x02\u0FF6\u0FF7\x03\x02\x02\x02\u0FF7" +
		"\u027B\x03\x02\x02\x02\u0FF8\u0FFA\x07\xFD\x02\x02\u0FF9\u0FFB\x05\u0284" +
		"\u0143\x02\u0FFA\u0FF9\x03\x02\x02\x02\u0FFB\u0FFC\x03\x02\x02\x02\u0FFC" +
		"\u0FFA\x03\x02\x02\x02\u0FFC\u0FFD\x03\x02\x02\x02\u0FFD\u027D\x03\x02" +
		"\x02\x02\u0FFE\u1001\x07\xFD\x02\x02\u0FFF\u1002\x05\u0434\u021B\x02\u1000" +
		"\u1002\x05\u0496\u024C\x02\u1001\u0FFF\x03\x02\x02\x02\u1001\u1000\x03" +
		"\x02\x02\x02\u1002\u1004\x03\x02\x02\x02\u1003\u1005\x05\u0282\u0142\x02" +
		"\u1004\u1003\x03\x02\x02\x02\u1004\u1005\x03\x02\x02\x02\u1005\u027F\x03" +
		"\x02\x02\x02\u1006\u1009\x073\x02\x02\u1007\u100A\x05\u0434\u021B\x02" +
		"\u1008\u100A\x05\u0496\u024C\x02\u1009\u1007\x03\x02\x02\x02\u1009\u1008" +
		"\x03\x02\x02\x02\u100A\u100C\x03\x02\x02\x02\u100B\u100D\x05\u0282\u0142" +
		"\x02\u100C\u100B\x03\x02\x02\x02\u100C\u100D\x03\x02\x02\x02\u100D\u0281" +
		"\x03\x02\x02\x02\u100E\u1010\x07\xE0\x02\x02\u100F\u1011\x05\u0286\u0144" +
		"\x02\u1010\u100F\x03\x02\x02\x02\u1011\u1012\x03\x02\x02\x02\u1012\u1010" +
		"\x03\x02\x02\x02\u1012\u1013\x03\x02\x02\x02\u1013\u0283\x03\x02\x02\x02" +
		"\u1014\u1016\x05\u0434\u021B\x02\u1015\u1017\x07\u019E\x02\x02\u1016\u1015" +
		"\x03\x02\x02\x02\u1016\u1017\x03\x02\x02\x02\u1017\u0285\x03\x02\x02\x02" +
		"\u1018\u101A\x05\u0434\u021B\x02\u1019\u101B\x07\u019E\x02\x02\u101A\u1019" +
		"\x03\x02\x02\x02\u101A\u101B\x03\x02\x02\x02\u101B\u0287\x03\x02\x02\x02" +
		"\u101C\u101D\x07\u0186\x02\x02\u101D\u101E\x05\u0434\u021B\x02\u101E\u0289" +
		"\x03\x02\x02\x02\u101F\u1027\x07\x9F\x02\x02\u1020\u1022\x07\xF8\x02\x02" +
		"\u1021\u1023\x07\u01DD\x02\x02\u1022\u1021\x03\x02\x02\x02\u1022\u1023" +
		"\x03\x02\x02\x02\u1023\u1028\x03\x02\x02\x02\u1024\u1025\x07\xEA\x02\x02" +
		"\u1025\u1028\x07\u01DD\x02\x02\u1026\u1028\x07\u0150\x02\x02\u1027\u1020" +
		"\x03\x02\x02\x02\u1027\u1024\x03\x02\x02\x02\u1027\u1026\x03\x02\x02\x02" +
		"\u1028\u1029\x03\x02\x02\x02\u1029\u102B\x05\u0462\u0232\x02\u102A\u102C" +
		"\x07\u0204\x02\x02\u102B\u102A\x03\x02\x02\x02\u102B\u102C\x03\x02\x02" +
		"\x02\u102C\u102D\x03\x02\x02\x02\u102D\u1030\x07\u0105\x02\x02\u102E\u1031" +
		"\x05\u0496\u024C\x02\u102F\u1031\x05\u0434\u021B\x02\u1030\u102E\x03\x02" +
		"\x02\x02\u1030\u102F\x03\x02\x02\x02\u1031\u028B\x03\x02\x02\x02\u1032" +
		"\u1033\x07\xB8\x02\x02\u1033\u103A\x05\u0496\u024C\x02\u1034\u1036\x07" +
		"\u01FC\x02\x02\u1035\u1037\x05\u0434\u021B\x02\u1036\u1035\x03\x02\x02" +
		"\x02\u1037\u1038\x03\x02\x02\x02\u1038\u1036\x03\x02\x02\x02\u1038\u1039" +
		"\x03\x02\x02\x02\u1039\u103B\x03\x02\x02\x02\u103A\u1034\x03\x02\x02\x02" +
		"\u103A\u103B\x03\x02\x02\x02\u103B\u028D\x03\x02\x02\x02\u103C\u103D\x07" +
		"\xC3\x02\x02\u103D\u1041\x05\u0290\u0149\x02\u103E\u1040\x05\u0292\u014A" +
		"\x02\u103F\u103E\x03\x02\x02\x02\u1040\u1043\x03\x02\x02\x02\u1041\u103F" +
		"\x03\x02\x02\x02\u1041\u1042\x03\x02\x02\x02\u1042\u1045\x03\x02\x02\x02" +
		"\u1043\u1041\x03\x02\x02\x02\u1044\u1046\x05\u0294\u014B\x02\u1045\u1044" +
		"\x03\x02\x02\x02\u1046\u1047\x03\x02\x02\x02\u1047\u1045\x03\x02\x02\x02" +
		"\u1047\u1048\x03\x02\x02\x02\u1048\u104A\x03\x02\x02\x02\u1049\u104B\x05" +
		"\u029E\u0150\x02\u104A\u1049\x03\x02\x02\x02\u104A\u104B\x03\x02\x02\x02" +
		"\u104B\u104D\x03\x02\x02\x02\u104C\u104E\x07\xA7\x02\x02\u104D\u104C\x03" +
		"\x02\x02\x02\u104D\u104E\x03\x02\x02\x02\u104E\u028F\x03\x02\x02\x02\u104F" +
		"\u1054\x05\u0434\u021B\x02\u1050\u1054\x05\u0496\u024C\x02\u1051\u1054" +
		"\x05\u040A\u0206\x02\u1052\u1054\x05\u0418\u020D\x02\u1053\u104F\x03\x02" +
		"\x02\x02\u1053\u1050\x03\x02\x02\x02\u1053\u1051\x03\x02\x02\x02\u1053" +
		"\u1052\x03\x02\x02\x02\u1054\u0291\x03\x02\x02\x02\u1055\u1056\x07\x12" +
		"\x02\x02\u1056\u1057\x05\u0290\u0149\x02\u1057\u0293\x03\x02\x02\x02\u1058" +
		"\u105A\x05\u0296\u014C\x02\u1059\u1058\x03\x02\x02\x02\u105A\u105B\x03" +
		"\x02\x02\x02\u105B\u1059\x03\x02\x02\x02\u105B\u105C\x03\x02\x02\x02\u105C" +
		"\u1060\x03\x02\x02\x02\u105D\u105F\x05\u021A\u010E\x02\u105E\u105D\x03" +
		"\x02\x02\x02\u105F\u1062\x03\x02\x02\x02\u1060\u105E\x03\x02\x02\x02\u1060" +
		"\u1061\x03\x02\x02\x02\u1061\u0295\x03\x02\x02\x02\u1062\u1060\x03\x02" +
		"\x02\x02\u1063\u1064\x07\u0202\x02\x02\u1064\u1068\x05\u0298\u014D\x02" +
		"\u1065\u1067\x05\u029C\u014F\x02\u1066\u1065\x03\x02\x02\x02\u1067\u106A" +
		"\x03\x02\x02\x02\u1068\u1066\x03\x02\x02\x02\u1068\u1069\x03\x02\x02\x02" +
		"\u1069\u0297\x03\x02\x02\x02\u106A\u1068\x03\x02\x02\x02\u106B\u1076\x07" +
		"\x16\x02\x02\u106C\u106E\x07\u013A\x02\x02\u106D\u106C\x03\x02\x02\x02" +
		"\u106D\u106E\x03\x02\x02\x02\u106E\u106F\x03\x02\x02\x02\u106F\u1071\x05" +
		"\u02A0\u0151\x02\u1070\u1072\x05\u029A\u014E\x02\u1071\u1070\x03\x02\x02" +
		"\x02\u1071\u1072\x03\x02\x02\x02\u1072\u1076\x03\x02\x02\x02\u1073\u1076" +
		"\x05\u0418\u020D\x02\u1074\u1076\x05\u0498\u024D\x02\u1075\u106B\x03\x02" +
		"\x02\x02\u1075\u106D\x03\x02\x02\x02\u1075\u1073\x03\x02\x02\x02\u1075" +
		"\u1074\x03\x02\x02\x02\u1076\u0299\x03\x02\x02\x02\u1077\u1078\t\x06\x02" +
		"\x02\u1078\u1079\x05\u02A0\u0151\x02\u1079\u029B\x03\x02\x02\x02\u107A" +
		"\u107B\x07\x12\x02\x02\u107B\u107C\x05\u0298\u014D\x02\u107C\u029D\x03" +
		"\x02\x02\x02\u107D\u107E\x07\u0202\x02\x02\u107E\u1082\x07\u014F\x02\x02" +
		"\u107F\u1081\x05\u021A\u010E\x02\u1080\u107F\x03\x02\x02\x02\u1081\u1084" +
		"\x03\x02\x02\x02\u1082\u1080\x03\x02\x02\x02\u1082\u1083\x03\x02\x02\x02" +
		"\u1083\u029F\x03\x02\x02\x02\u1084\u1082\x03\x02\x02\x02\u1085\u1089\x05" +
		"\u0434\u021B\x02\u1086\u1089\x05\u0496\u024C\x02\u1087\u1089\x05\u040A" +
		"\u0206\x02\u1088\u1085\x03\x02\x02\x02\u1088\u1086\x03\x02\x02\x02\u1088" +
		"\u1087\x03\x02\x02\x02\u1089\u02A1\x03\x02\x02\x02\u108A\u108C\x07\u0231" +
		"\x02\x02\u108B\u108A\x03\x02\x02\x02\u108C\u108D\x03\x02\x02\x02\u108D" +
		"\u108B\x03\x02\x02\x02\u108D\u108E\x03\x02\x02\x02\u108E\u02A3\x03\x02" +
		"\x02\x02\u108F\u1091\x07\u0233\x02\x02\u1090\u108F\x03\x02\x02\x02\u1091" +
		"\u1092\x03\x02\x02\x02\u1092\u1090\x03\x02\x02\x02\u1092\u1093\x03\x02" +
		"\x02\x02\u1093\u02A5\x03\x02\x02\x02\u1094\u1096\x07\u0232\x02\x02\u1095" +
		"\u1094\x03\x02\x02\x02\u1096\u1097\x03\x02\x02\x02\u1097\u1095\x03\x02" +
		"\x02\x02\u1097\u1098\x03\x02\x02\x02\u1098\u02A7\x03\x02\x02\x02\u1099" +
		"\u109B\x07\xC8\x02\x02\u109A\u109C\x07\u0131\x02\x02\u109B\u109A\x03\x02" +
		"\x02\x02\u109B\u109C\x03\x02\x02\x02\u109C\u109E\x03\x02\x02\x02\u109D" +
		"\u109F\x07>\x02\x02\u109E\u109D\x03\x02\x02\x02\u109E\u109F\x03\x02\x02" +
		"\x02\u109F\u10A1\x03\x02\x02\x02\u10A0\u10A2\x05\u02AA\u0156\x02\u10A1" +
		"\u10A0\x03\x02\x02\x02\u10A2\u10A3\x03\x02\x02\x02\u10A3\u10A1\x03\x02" +
		"\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4\u02A9\x03\x02\x02\x02\u10A5" +
		"\u10A8\x05\u0434\u021B\x02\u10A6\u10A8\x05\u0496\u024C\x02\u10A7\u10A5" +
		"\x03\x02\x02\x02\u10A7\u10A6\x03\x02\x02\x02\u10A8\u02AB\x03\x02\x02\x02" +
		"\u10A9\u10AB\x07\xC9\x02\x02\u10AA\u10AC\x07\u016B\x02\x02\u10AB\u10AA" +
		"\x03\x02\x02\x02\u10AB\u10AC\x03\x02\x02\x02\u10AC\u02AD\x03\x02\x02\x02" +
		"\u10AD\u10AE\x07\xDE\x02\x02\u10AE\u10AF\x05\u0486\u0244\x02\u10AF\u02AF" +
		"\x03\x02\x02\x02\u10B0\u10B1\x07\xDF\x02\x02\u10B1\u02B1\x03\x02\x02\x02" +
		"\u10B2\u10B4\x07\xE2\x02\x02\u10B3\u10B5\x07\u01EB\x02\x02\u10B4\u10B3" +
		"\x03\x02\x02\x02\u10B4\u10B5\x03\x02\x02\x02\u10B5\u10B8\x03\x02\x02\x02" +
		"\u10B6\u10B9\x05\u02B4\u015B\x02\u10B7\u10B9\x05\u02B6\u015C\x02\u10B8" +
		"\u10B6\x03\x02\x02\x02\u10B8\u10B7\x03\x02\x02\x02\u10B9\u02B3\x03\x02" +
		"\x02\x02\u10BA\u10BB\x05\u0480\u0241\x02\u10BB\u02B5\x03\x02\x02\x02\u10BC" +
		"\u10CA\x07\u012D\x02\x02\u10BD\u10BF\x05\u0480\u0241\x02\u10BE\u10BD\x03" +
		"\x02\x02\x02\u10BF\u10C0\x03\x02\x02\x02\u10C0\u10BE\x03\x02\x02\x02\u10C0" +
		"\u10C1\x03\x02\x02\x02\u10C1\u10C7\x03\x02\x02\x02\u10C2\u10C4\x07\x88" +
		"\x02\x02\u10C3\u10C5\x07\u0148\x02\x02\u10C4\u10C3\x03\x02\x02\x02\u10C4" +
		"\u10C5\x03\x02\x02\x02\u10C5\u10C6\x03\x02\x02\x02\u10C6\u10C8\x05\u0434" +
		"\u021B\x02\u10C7\u10C2\x03\x02\x02\x02\u10C7\u10C8\x03\x02\x02\x02\u10C8" +
		"\u10CA\x03\x02\x02\x02\u10C9\u10BC\x03\x02\x02\x02\u10C9\u10BE\x03\x02" +
		"\x02\x02\u10CA\u02B7\x03\x02\x02\x02\u10CB\u10CC\x07\xEE\x02\x02\u10CC" +
		"\u10CD\x05\u0418\u020D\x02\u10CD\u10CF\x05\u02BA\u015E\x02\u10CE\u10D0" +
		"\x05\u02BC\u015F\x02\u10CF\u10CE\x03\x02\x02\x02\u10CF\u10D0\x03\x02\x02" +
		"\x02\u10D0\u10D2\x03\x02\x02\x02\u10D1\u10D3\x07\xA8\x02\x02\u10D2\u10D1" +
		"\x03\x02\x02\x02\u10D2\u10D3\x03\x02\x02\x02\u10D3\u02B9\x03\x02\x02\x02" +
		"\u10D4\u10D6\x07\u01E2\x02\x02\u10D5\u10D4\x03\x02\x02\x02\u10D5\u10D6" +
		"\x03\x02\x02\x02\u10D6\u10DF\x03\x02\x02\x02\u10D7\u10D8\x07\u0137\x02" +
		"\x02\u10D8\u10E0\x07\u01AC\x02\x02\u10D9\u10DB\x05\u021A\u010E\x02\u10DA" +
		"\u10D9\x03\x02\x02\x02\u10DB\u10DE\x03\x02\x02\x02\u10DC\u10DA\x03\x02" +
		"\x02\x02\u10DC\u10DD\x03\x02\x02\x02\u10DD\u10E0\x03\x02\x02\x02\u10DE" +
		"\u10DC\x03\x02\x02\x02\u10DF\u10D7\x03\x02\x02\x02\u10DF\u10DC\x03\x02" +
		"\x02\x02\u10E0\u02BB\x03\x02\x02\x02\u10E1\u10EA\x07\x9C\x02\x02\u10E2" +
		"\u10E3\x07\u0137\x02\x02\u10E3\u10EB\x07\u01AC\x02\x02\u10E4\u10E6\x05" +
		"\u021A\u010E\x02\u10E5\u10E4\x03\x02\x02\x02\u10E6\u10E9\x03\x02\x02\x02" +
		"\u10E7\u10E5\x03\x02\x02\x02\u10E7\u10E8\x03\x02\x02\x02\u10E8\u10EB\x03" +
		"\x02\x02\x02\u10E9\u10E7\x03\x02\x02\x02\u10EA\u10E2\x03\x02\x02\x02\u10EA" +
		"\u10E7\x03\x02\x02\x02\u10EB\u02BD\x03\x02\x02\x02\u10EC\u10EE\x07\xF6" +
		"\x02\x02\u10ED\u10EF\x05\u0434\u021B\x02\u10EE\u10ED\x03\x02\x02\x02\u10EF" +
		"\u10F0\x03\x02\x02\x02\u10F0\u10EE\x03\x02\x02\x02\u10F0\u10F1\x03\x02" +
		"\x02\x02\u10F1\u10F3\x03\x02\x02\x02\u10F2\u10F4\x05\u02C0\u0161\x02\u10F3" +
		"\u10F2\x03\x02\x02\x02\u10F3\u10F4\x03\x02\x02\x02\u10F4\u02BF\x03\x02" +
		"\x02\x02\u10F5\u10F7\x07\u018C\x02\x02\u10F6\u10F8\x05\u02C2\u0162\x02" +
		"\u10F7\u10F6\x03\x02\x02\x02\u10F8\u10F9\x03\x02\x02\x02\u10F9\u10F7\x03" +
		"\x02\x02\x02\u10F9\u10FA\x03\x02\x02\x02\u10FA\u02C1\x03\x02\x02\x02\u10FB" +
		"\u10FD\t7\x02\x02\u10FC\u10FE\x07o\x02\x02\u10FD\u10FC\x03\x02\x02\x02" +
		"\u10FD\u10FE\x03\x02\x02\x02\u10FE\u10FF\x03\x02\x02\x02\u10FF\u1102\x07" +
		"3\x02\x02\u1100\u1103\x05\u0434\u021B\x02\u1101\u1103\x05\u0496\u024C" +
		"\x02\u1102\u1100\x03\x02\x02\x02\u1102\u1101\x03\x02\x02\x02\u1103\u02C3" +
		"\x03\x02\x02\x02\u1104\u1106\x07\xF7\x02\x02\u1105\u1107\x05\u0486\u0244" +
		"\x02\u1106\u1105\x03\x02\x02\x02\u1107\u1108\x03\x02\x02\x02\u1108\u1106" +
		"\x03\x02\x02\x02\u1108\u1109\x03\x02\x02\x02\u1109\u02C5\x03\x02\x02\x02" +
		"\u110A\u110B\x07\xFA\x02\x02\u110B\u1110\x05\u0434\u021B\x02\u110C\u1111" +
		"\x05\u02C8\u0165\x02\u110D\u1111\x05\u02CA\u0166\x02\u110E\u1111\x05\u02CC" +
		"\u0167\x02\u110F\u1111\x05\u02CE\u0168\x02\u1110\u110C\x03\x02\x02\x02" +
		"\u1110\u110D\x03\x02\x02\x02\u1110\u110E\x03\x02\x02\x02\u1110\u110F\x03" +
		"\x02\x02\x02\u1111\u02C7\x03\x02\x02\x02\u1112\u1114\x07\u01DA\x02\x02" +
		"\u1113\u1115\x05\u02D0\u0169\x02\u1114\u1113\x03\x02\x02\x02\u1115\u1116" +
		"\x03\x02\x02\x02\u1116\u1114\x03\x02\x02\x02\u1116\u1117\x03\x02\x02\x02" +
		"\u1117\u02C9\x03\x02\x02\x02\u1118\u111B\x07\u018C\x02\x02\u1119\u111C" +
		"\x05\u02D4\u016B\x02\u111A\u111C\x05\u02D8\u016D\x02\u111B\u1119\x03\x02" +
		"\x02\x02\u111B\u111A\x03\x02\x02\x02\u111C\u111D\x03\x02\x02\x02\u111D" +
		"\u111B\x03\x02\x02\x02\u111D\u111E\x03\x02\x02\x02\u111E\u02CB\x03\x02" +
		"\x02\x02\u111F\u1121\x07\u01DA\x02\x02\u1120\u1122\x05\u02D0\u0169\x02" +
		"\u1121\u1120\x03\x02\x02\x02\u1122\u1123\x03\x02\x02\x02\u1123\u1121\x03" +
		"\x02\x02\x02\u1123\u1124\x03\x02\x02\x02\u1124\u1126\x03\x02\x02\x02\u1125" +
		"\u1127\x05\u02CA\u0166\x02\u1126\u1125\x03\x02\x02\x02\u1127\u1128\x03" +
		"\x02\x02\x02\u1128\u1126\x03\x02\x02\x02\u1128\u1129\x03\x02\x02\x02\u1129" +
		"\u02CD\x03\x02\x02\x02\u112A\u112D\x07g\x02\x02\u112B\u112E\x05\u0434" +
		"\u021B\x02\u112C\u112E\x05\u0496\u024C\x02\u112D\u112B\x03\x02\x02\x02" +
		"\u112D\u112C\x03\x02\x02\x02\u112E\u112F\x03\x02\x02\x02\u112F\u1133\x05" +
		"\u02E0\u0171\x02\u1130\u1132\x05\u02E2\u0172\x02\u1131\u1130\x03\x02\x02" +
		"\x02\u1132\u1135\x03\x02\x02\x02\u1133\u1131\x03\x02\x02\x02\u1133\u1134" +
		"\x03\x02\x02\x02\u1134\u02CF\x03\x02\x02\x02\u1135\u1133\x03\x02\x02\x02" +
		"\u1136\u1137\x05\u0434\u021B\x02\u1137\u113A\x07\xD6\x02\x02\u1138\u113B" +
		"\x05\u02D2\u016A\x02\u1139\u113B\x05\u02D6\u016C\x02\u113A\u1138\x03\x02" +
		"\x02\x02\u113A\u1139\x03\x02\x02\x02\u113B\u113C\x03\x02\x02\x02\u113C" +
		"\u113A\x03\x02\x02\x02\u113C\u113D\x03\x02\x02\x02\u113D\u02D1\x03\x02" +
		"\x02\x02\u113E\u1142\x07A\x02\x02\u113F\u1141\x05\u02E2\u0172\x02\u1140" +
		"\u113F\x03\x02\x02\x02\u1141\u1144\x03\x02\x02\x02\u1142\u1140\x03\x02" +
		"\x02\x02\u1142\u1143\x03\x02\x02\x02\u1143\u02D3\x03\x02\x02\x02\u1144" +
		"\u1142\x03\x02\x02\x02\u1145\u1146\x07A\x02\x02\u1146\u114A\x05\u02DE" +
		"\u0170\x02\u1147\u1149\x05\u02E2\u0172\x02\u1148\u1147\x03\x02\x02\x02" +
		"\u1149\u114C\x03\x02\x02\x02\u114A\u1148\x03\x02\x02\x02\u114A\u114B\x03" +
		"\x02\x02\x02\u114B\u02D5\x03\x02\x02\x02\u114C\u114A\x03\x02\x02\x02\u114D" +
		"\u114F\t8\x02\x02\u114E\u1150\x05\u02DA\u016E\x02\u114F\u114E\x03\x02" +
		"\x02\x02\u1150\u1151\x03\x02\x02\x02\u1151\u114F\x03\x02\x02\x02\u1151" +
		"\u1152\x03\x02\x02\x02\u1152\u02D7\x03\x02\x02\x02\u1153\u1155\t9\x02" +
		"\x02\u1154\u1156\x05\u02DC\u016F\x02\u1155\u1154\x03\x02\x02\x02\u1156" +
		"\u1157\x03\x02\x02\x02\u1157\u1155\x03\x02\x02\x02\u1157\u1158\x03\x02" +
		"\x02\x02\u1158\u02D9\x03\x02\x02\x02\u1159\u115C\x05\u0434\u021B\x02\u115A" +
		"\u115C\x05\u0496\u024C\x02\u115B\u1159\x03\x02\x02\x02\u115B\u115A\x03" +
		"\x02\x02\x02\u115C\u1160\x03\x02\x02\x02\u115D\u115F\x05\u02E2\u0172\x02" +
		"\u115E\u115D\x03\x02\x02\x02\u115F\u1162\x03\x02\x02\x02\u1160\u115E\x03" +
		"\x02\x02\x02\u1160\u1161\x03\x02\x02\x02\u1161\u02DB\x03\x02\x02\x02\u1162" +
		"\u1160\x03\x02\x02\x02\u1163\u1166\x05\u0434\u021B\x02\u1164\u1166\x05" +
		"\u0496\u024C\x02\u1165\u1163\x03\x02\x02\x02\u1165\u1164\x03\x02\x02\x02" +
		"\u1166\u1167\x03\x02\x02\x02\u1167\u116B\x05\u02DE\u0170\x02\u1168\u116A" +
		"\x05\u02E2\u0172\x02\u1169\u1168\x03\x02\x02\x02\u116A\u116D\x03\x02\x02" +
		"\x02\u116B\u1169\x03\x02\x02\x02\u116B\u116C\x03\x02\x02\x02\u116C\u02DD" +
		"\x03\x02\x02\x02\u116D\u116B\x03\x02\x02\x02\u116E\u1171\x073\x02\x02" +
		"\u116F\u1172\x05\u0434\u021B\x02\u1170\u1172\x05\u0496\u024C\x02\u1171" +
		"\u116F\x03\x02\x02\x02\u1171\u1170\x03\x02\x02\x02\u1172\u02DF\x03\x02" +
		"\x02\x02\u1173\u1176\x07\u01EB\x02\x02\u1174\u1177\x05\u0434\u021B\x02" +
		"\u1175\u1177\x05\u0496\u024C\x02\u1176\u1174\x03\x02\x02\x02\u1176\u1175" +
		"\x03\x02\x02\x02\u1177\u02E1\x03\x02\x02\x02\u1178\u117A\t:\x02\x02\u1179" +
		"\u117B\x07\xF5\x02\x02\u117A\u1179\x03\x02\x02\x02\u117A\u117B\x03\x02" +
		"\x02\x02\u117B\u117E\x03\x02\x02\x02\u117C\u117F\x05\u0434\u021B\x02\u117D" +
		"\u117F\x05\u0496\u024C\x02\u117E\u117C\x03\x02\x02\x02\u117E\u117D\x03" +
		"\x02\x02\x02\u117F\u02E3\x03\x02\x02\x02\u1180\u1181\x07\u0128\x02\x02" +
		"\u1181\u1183\x05\u0470\u0239\x02\u1182\u1184\x05\u02E6\u0174\x02\u1183" +
		"\u1182\x03\x02\x02\x02\u1184\u1185\x03\x02\x02\x02\u1185\u1183\x03\x02" +
		"\x02\x02\u1185\u1186\x03\x02\x02\x02\u1186\u1188\x03\x02\x02\x02\u1187" +
		"\u1189\x05\u02E8\u0175\x02\u1188\u1187\x03\x02\x02\x02\u1188\u1189\x03" +
		"\x02\x02\x02\u1189\u118D\x03\x02\x02\x02\u118A\u118C\x05\u02EE\u0178\x02" +
		"\u118B\u118A\x03\x02\x02\x02\u118C\u118F\x03\x02\x02\x02\u118D\u118B\x03" +
		"\x02\x02\x02\u118D\u118E\x03\x02\x02\x02\u118E\u1191\x03\x02\x02\x02\u118F" +
		"\u118D\x03\x02\x02\x02\u1190\u1192\x05\u02F0\u0179\x02\u1191\u1190\x03" +
		"\x02\x02\x02\u1191\u1192\x03\x02\x02\x02\u1192\u1196\x03\x02\x02\x02\u1193" +
		"\u1195\x05\u02F4\u017B\x02\u1194\u1193\x03\x02\x02\x02\u1195\u1198\x03" +
		"\x02\x02\x02\u1196\u1194\x03\x02\x02\x02\u1196\u1197\x03\x02\x02\x02\u1197" +
		"\u02E5\x03\x02\x02\x02\u1198\u1196\x03\x02\x02\x02\u1199\u119B\x07\u0148" +
		"\x02\x02\u119A\u1199\x03\x02\x02\x02\u119A\u119B\x03\x02\x02\x02\u119B" +
		"\u119C\x03\x02\x02\x02\u119C\u119E\t+\x02\x02\u119D\u119F\x07\u0105\x02" +
		"\x02\u119E\u119D\x03\x02\x02\x02\u119E\u119F\x03\x02\x02\x02\u119F\u11A1" +
		"\x03\x02\x02\x02\u11A0\u11A2\x05\u0444\u0223\x02\u11A1\u11A0\x03\x02\x02" +
		"\x02\u11A2\u11A3\x03\x02\x02\x02\u11A3\u11A1\x03\x02\x02\x02\u11A3\u11A4" +
		"\x03\x02\x02\x02\u11A4\u02E7\x03\x02\x02\x02\u11A5\u11A7\x07J\x02\x02" +
		"\u11A6\u11A5\x03\x02\x02\x02\u11A6\u11A7\x03\x02\x02\x02\u11A7\u11A8\x03" +
		"\x02\x02\x02\u11A8\u11AA\x07\u01AE\x02\x02\u11A9\u11AB\x07\u0100\x02\x02" +
		"\u11AA\u11A9\x03\x02\x02\x02\u11AA\u11AB\x03\x02\x02\x02\u11AB\u11AD\x03" +
		"\x02\x02\x02\u11AC\u11AE\x05\u045C\u022F\x02\u11AD\u11AC\x03\x02\x02\x02" +
		"\u11AE\u11AF\x03\x02\x02\x02\u11AF\u11AD\x03\x02\x02\x02\u11AF\u11B0\x03" +
		"\x02\x02\x02\u11B0\u11B2\x03\x02\x02\x02\u11B1\u11B3\x05\u02EA\u0176\x02" +
		"\u11B2\u11B1\x03\x02\x02\x02\u11B2\u11B3\x03\x02\x02\x02\u11B3\u11B5\x03" +
		"\x02\x02\x02\u11B4\u11B6\x05\u02EC\u0177\x02\u11B5\u11B4\x03\x02\x02\x02" +
		"\u11B5\u11B6\x03\x02\x02\x02\u11B6\u02E9\x03\x02\x02\x02\u11B7\u11B9\x07" +
		"\xD6\x02\x02\u11B8\u11B7\x03\x02\x02\x02\u11B8\u11B9\x03\x02\x02\x02\u11B9" +
		"\u11BA\x03\x02\x02\x02\u11BA\u11BB\x07\x10\x02\x02\u11BB\u11BC\x07\u0100" +
		"\x02\x02\u11BC\u11BD\x05\u045C\u022F\x02\u11BD\u02EB\x03\x02\x02\x02\u11BE" +
		"\u11C0\x07\xD6\x02\x02\u11BF\u11BE\x03\x02\x02\x02\u11BF\u11C0\x03\x02" +
		"\x02\x02\u11C0\u11C1\x03\x02\x02\x02\u11C1\u11C3\x07\u0132\x02\x02\u11C2" +
		"\u11C4\x07\u0100\x02\x02\u11C3\u11C2\x03\x02\x02\x02\u11C3\u11C4\x03\x02" +
		"\x02\x02\u11C4\u11C5\x03\x02\x02\x02\u11C5\u11C6\x05\u045C\u022F\x02\u11C6" +
		"\u02ED\x03\x02\x02\x02\u11C7\u11C9\x07\u01FC\x02\x02\u11C8\u11CA\x05\u0470" +
		"\u0239\x02\u11C9\u11C8\x03\x02\x02\x02\u11CA\u11CB\x03\x02\x02\x02\u11CB" +
		"\u11C9\x03\x02\x02\x02\u11CB\u11CC\x03\x02\x02\x02\u11CC\u02EF\x03\x02" +
		"\x02\x02\u11CD\u11CE\x07\u0150\x02\x02\u11CE\u11D0\x07\u0166\x02\x02\u11CF" +
		"\u11D1\x07\u0100\x02\x02\u11D0\u11CF\x03\x02\x02\x02\u11D0\u11D1\x03\x02" +
		"\x02\x02\u11D1\u11D2\x03\x02\x02\x02\u11D2\u11D4\x05\u0480\u0241\x02\u11D3" +
		"\u11D5\x05\u02F2\u017A\x02\u11D4\u11D3\x03\x02\x02\x02\u11D4\u11D5\x03" +
		"\x02\x02\x02\u11D5\u02F1\x03\x02\x02\x02\u11D6\u11D7\t\x06\x02\x02\u11D7" +
		"\u11D8\x05\u0480\u0241\x02\u11D8\u02F3\x03\x02\x02\x02\u11D9\u11DB\x07" +
		"\xE0\x02\x02\u11DA\u11DC\x05\u02F6\u017C\x02\u11DB\u11DA\x03\x02\x02\x02" +
		"\u11DC\u11DD\x03\x02\x02\x02\u11DD\u11DB\x03\x02\x02\x02\u11DD\u11DE\x03" +
		"\x02\x02\x02\u11DE\u02F5\x03\x02\x02\x02\u11DF\u11E9\x05\u0470\u0239\x02" +
		"\u11E0";
	private static readonly _serializedATNSegment9: string =
		"\u11EA\x07\u0120\x02\x02\u11E1\u11EA\x07\u01A1\x02\x02\u11E2\u11E3\x07" +
		"\u0138\x02\x02\u11E3\u11EA\x07\u0199\x02\x02\u11E4\u11EA\x07l\x02\x02" +
		"\u11E5\u11EA\x07\u0185\x02\x02\u11E6\u11E7\x07\u0204\x02\x02\u11E7\u11E8" +
		"\x07\u0189\x02\x02\u11E8\u11EA\x07l\x02\x02\u11E9\u11E0\x03\x02\x02\x02" +
		"\u11E9\u11E1\x03\x02\x02\x02\u11E9\u11E2\x03\x02\x02\x02\u11E9\u11E4\x03" +
		"\x02\x02\x02\u11E9\u11E5\x03\x02\x02\x02\u11E9\u11E6\x03\x02\x02\x02\u11E9" +
		"\u11EA\x03\x02\x02\x02\u11EA\u02F7\x03\x02\x02\x02\u11EB\u11ED\x07\u012E" +
		"\x02\x02\u11EC\u11EE\x07\v\x02\x02\u11ED\u11EC\x03\x02\x02\x02\u11ED\u11EE" +
		"\x03\x02\x02\x02\u11EE\u11F1\x03\x02\x02\x02\u11EF\u11F2\x05\u02FA\u017E" +
		"\x02\u11F0\u11F2\x05\u02FE\u0180\x02\u11F1\u11EF\x03\x02\x02\x02\u11F1" +
		"\u11F0\x03\x02\x02\x02\u11F2\u02F9\x03\x02\x02\x02\u11F3\u11F4\x05\u02FC" +
		"\u017F\x02\u11F4\u11F6\x07\u01EB\x02\x02\u11F5\u11F7\x05\u0434\u021B\x02" +
		"\u11F6\u11F5\x03\x02\x02\x02\u11F7\u11F8\x03\x02\x02\x02\u11F8\u11F6\x03" +
		"\x02\x02\x02\u11F8\u11F9\x03\x02\x02\x02\u11F9\u02FB\x03\x02\x02\x02\u11FA" +
		"\u11FD\x05\u0434\u021B\x02\u11FB\u11FD\x05\u0496\u024C\x02\u11FC\u11FA" +
		"\x03\x02\x02\x02\u11FC\u11FB\x03\x02\x02\x02\u11FD\u02FD\x03\x02\x02\x02" +
		"\u11FE\u11FF\t4\x02\x02\u11FF\u1200\x05\u0300\u0181\x02\u1200\u1202\x07" +
		"\u01EB\x02\x02\u1201\u1203\x05\u0434\u021B\x02\u1202\u1201\x03\x02\x02" +
		"\x02\u1203\u1204\x03\x02\x02\x02\u1204\u1202\x03\x02\x02\x02\u1204\u1205" +
		"\x03\x02\x02\x02\u1205\u02FF\x03\x02\x02\x02\u1206\u1207\x05\u0434\u021B" +
		"\x02\u1207\u0301\x03\x02\x02\x02\u1208\u120B\x07\u0130\x02\x02\u1209\u120C" +
		"\x05\u0434\u021B\x02\u120A\u120C\x05\u0496\u024C\x02\u120B\u1209\x03\x02" +
		"\x02\x02\u120B\u120A\x03\x02\x02\x02\u120C\u120D\x03\x02\x02\x02\u120D" +
		"\u1210\x073\x02\x02\u120E\u1211\x05\u0304\u0183\x02\u120F\u1211\x05\u0308" +
		"\u0185\x02\u1210\u120E\x03\x02\x02\x02\u1210\u120F\x03\x02\x02\x02\u1211" +
		"\u1213\x03\x02\x02\x02\u1212\u1214\x05\u0402\u0202\x02\u1213\u1212\x03" +
		"\x02\x02\x02\u1213\u1214\x03\x02\x02\x02\u1214\u1216\x03\x02\x02\x02\u1215" +
		"\u1217\x05\u0404\u0203\x02\u1216\u1215\x03\x02\x02\x02\u1216\u1217\x03" +
		"\x02\x02\x02\u1217\u1219\x03\x02\x02\x02\u1218\u121A\x07\xA9\x02\x02\u1219" +
		"\u1218\x03\x02\x02\x02\u1219\u121A\x03\x02\x02\x02\u121A\u0303\x03\x02" +
		"\x02\x02\u121B\u121D\x05\u0306\u0184\x02\u121C\u121B\x03\x02\x02\x02\u121D" +
		"\u121E\x03\x02\x02\x02\u121E\u121C\x03\x02\x02\x02\u121E\u121F\x03\x02" +
		"\x02\x02\u121F\u0305\x03\x02\x02\x02\u1220\u1222\x05\u0434\u021B\x02\u1221" +
		"\u1223\x07\u019E\x02\x02\u1222\u1221\x03\x02\x02\x02\u1222\u1223\x03\x02" +
		"\x02\x02\u1223\u0307\x03\x02\x02\x02\u1224\u1225\x05\u030A\u0186\x02\u1225" +
		"\u1227\x07\xE0\x02\x02\u1226\u1228\x05\u030C\u0187\x02\u1227\u1226\x03" +
		"\x02\x02\x02\u1228\u1229\x03\x02\x02\x02\u1229\u1227\x03\x02\x02\x02\u1229" +
		"\u122A\x03\x02\x02\x02\u122A\u0309\x03\x02\x02\x02\u122B\u122E\x05\u0434" +
		"\u021B\x02\u122C\u122E\x05\u0496\u024C\x02\u122D\u122B\x03\x02\x02\x02" +
		"\u122D\u122C\x03\x02\x02\x02\u122E\u030B\x03\x02\x02\x02\u122F\u1231\x05" +
		"\u0434\u021B\x02\u1230\u1232\x07\u019E\x02\x02\u1231\u1230\x03\x02\x02" +
		"\x02\u1231\u1232\x03\x02\x02\x02\u1232\u030D\x03\x02\x02\x02\u1233\u1238" +
		"\x07\u0149\x02\x02\u1234\u1239\x05\u0310\u0189\x02\u1235\u1239\x05\u0314" +
		"\u018B\x02\u1236\u1239\x05\u0318\u018D\x02\u1237\u1239\x05\u031A\u018E" +
		"\x02\u1238\u1234\x03\x02\x02\x02\u1238\u1235\x03\x02\x02\x02\u1238\u1236" +
		"\x03\x02\x02\x02\u1238\u1237\x03\x02\x02\x02\u1239\u123A\x03\x02\x02\x02" +
		"\u123A\u1238\x03\x02\x02\x02\u123A\u123B\x03\x02\x02\x02\u123B\u030F\x03" +
		"\x02\x02\x02\u123C\u123E\x07\xF8\x02\x02\u123D\u123F\x05\u0312\u018A\x02" +
		"\u123E\u123D\x03\x02\x02\x02\u123F\u1240\x03\x02\x02\x02\u1240\u123E\x03" +
		"\x02\x02\x02\u1240\u1241\x03\x02\x02\x02\u1241\u0311\x03\x02\x02\x02\u1242" +
		"\u1249\x05\u0470\u0239\x02\u1243\u124A\x07\u0198\x02\x02\u1244\u1246\x07" +
		"\u0204\x02\x02\u1245\u1244\x03\x02\x02\x02\u1245\u1246\x03\x02\x02\x02" +
		"\u1246\u1247\x03\x02\x02\x02\u1247\u1248\x07\u0138\x02\x02\u1248\u124A" +
		"\x07\u0199\x02\x02\u1249\u1243\x03\x02\x02\x02\u1249\u1245\x03\x02\x02" +
		"\x02\u1249\u124A\x03\x02\x02\x02\u124A\u0313\x03\x02\x02\x02\u124B\u124D" +
		"\x07\u0150\x02\x02\u124C\u124E\x05\u0316\u018C\x02\u124D\u124C\x03\x02" +
		"\x02\x02\u124E\u124F\x03\x02\x02\x02\u124F\u124D\x03\x02\x02\x02\u124F" +
		"\u1250\x03\x02\x02\x02\u1250\u0315\x03\x02\x02\x02\u1251\u1257\x05\u0470" +
		"\u0239\x02\u1252\u1254\x07\u0204\x02\x02\u1253\u1252\x03\x02\x02\x02\u1253" +
		"\u1254\x03\x02\x02\x02\u1254\u1255\x03\x02\x02\x02\u1255\u1256\x07\u0138" +
		"\x02\x02\u1256\u1258\x07\u0199\x02\x02\u1257\u1253\x03\x02\x02\x02\u1257" +
		"\u1258\x03\x02\x02\x02\u1258\u0317\x03\x02\x02\x02\u1259\u125B\x07\xEA" +
		"\x02\x02\u125A\u125C\x05\u0470\u0239\x02\u125B\u125A\x03\x02\x02\x02\u125C" +
		"\u125D\x03\x02\x02\x02\u125D\u125B\x03\x02\x02\x02\u125D\u125E\x03\x02" +
		"\x02\x02\u125E\u0319\x03\x02\x02\x02\u125F\u1261\x07\xCB\x02\x02\u1260" +
		"\u1262\x05\u0470\u0239\x02\u1261\u1260\x03\x02\x02\x02\u1262\u1263\x03" +
		"\x02\x02\x02\u1263\u1261\x03\x02\x02\x02\u1263\u1264\x03\x02\x02\x02\u1264" +
		"\u031B\x03\x02\x02\x02\u1265\u1268\x07\u0159\x02\x02\u1266\u1269\x05\u031E" +
		"\u0190\x02\u1267\u1269\x05\u0320\u0191\x02\u1268\u1266\x03\x02\x02\x02" +
		"\u1268\u1267\x03\x02\x02\x02\u1269\u031D\x03\x02\x02\x02\u126A\u126C\x05" +
		"\u0322\u0192\x02\u126B\u126A\x03\x02\x02\x02\u126B\u126C\x03\x02\x02\x02" +
		"\u126C\u1270\x03\x02\x02\x02\u126D\u126F\x05\u021A\u010E\x02\u126E\u126D" +
		"\x03\x02\x02\x02\u126F\u1272\x03\x02\x02\x02\u1270\u126E\x03\x02\x02\x02" +
		"\u1270\u1271\x03\x02\x02\x02\u1271\u1273\x03\x02\x02\x02\u1272\u1270\x03" +
		"\x02\x02\x02\u1273\u1274\x07\xAB\x02\x02\u1274\u031F\x03\x02\x02\x02\u1275" +
		"\u1278\x05\u0480\u0241\x02\u1276\u1277\t\x06\x02\x02\u1277\u1279\x05\u0480" +
		"\u0241\x02\u1278\u1276\x03\x02\x02\x02\u1278\u1279\x03\x02\x02\x02\u1279" +
		"\u127B\x03\x02\x02\x02\u127A\u127C\x05\u0322\u0192\x02\u127B\u127A\x03" +
		"\x02\x02\x02\u127B\u127C\x03\x02\x02\x02\u127C\u0321\x03\x02\x02\x02\u127D" +
		"\u1281\x05\u0324\u0193\x02\u127E\u1281\x05\u0326\u0194\x02\u127F\u1281" +
		"\x05\u0328\u0195\x02\u1280\u127D\x03\x02\x02\x02\u1280\u127E\x03\x02\x02" +
		"\x02\u1280\u127F\x03\x02\x02\x02\u1281\u0323\x03\x02\x02\x02\u1282\u1285" +
		"\x05\u0434\u021B\x02\u1283\u1285\x05\u049C\u024F\x02\u1284\u1282\x03\x02" +
		"\x02\x02\u1284\u1283\x03\x02\x02\x02\u1285\u1286\x03\x02\x02\x02\u1286" +
		"\u1287\x07\u01E9\x02\x02\u1287\u0325\x03\x02\x02\x02\u1288\u128A\x05\u0334" +
		"\u019B\x02\u1289\u1288\x03\x02\x02\x02\u1289\u128A\x03\x02\x02\x02\u128A" +
		"\u128B\x03\x02\x02\x02\u128B\u128C\x07\u01F7\x02\x02\u128C\u128D\x05\u0418" +
		"\u020D\x02\u128D\u0327\x03\x02\x02\x02\u128E\u128F\x05\u0334\u019B\x02" +
		"\u128F\u1290\x05\u032A\u0196\x02\u1290\u1296\x03\x02\x02\x02\u1291\u1293" +
		"\x05\u032A\u0196\x02\u1292\u1294\x05\u0334\u019B\x02\u1293\u1292\x03\x02" +
		"\x02\x02\u1293\u1294\x03\x02\x02\x02\u1294\u1296\x03\x02\x02\x02\u1295" +
		"\u128E\x03\x02\x02\x02\u1295\u1291\x03\x02\x02\x02\u1296\u0329\x03\x02" +
		"\x02\x02\u1297\u1298\x07\u01FF\x02\x02\u1298\u129C\x05\u032C\u0197\x02" +
		"\u1299\u129B\x05\u032E\u0198\x02\u129A\u1299\x03\x02\x02\x02\u129B\u129E" +
		"\x03\x02\x02\x02\u129C\u129A\x03\x02\x02\x02\u129C\u129D\x03\x02\x02\x02" +
		"\u129D\u032B\x03\x02\x02\x02\u129E\u129C\x03\x02\x02\x02\u129F\u12A2\x05" +
		"\u0434\u021B\x02\u12A0\u12A2\x05\u0496\u024C\x02\u12A1\u129F\x03\x02\x02" +
		"\x02\u12A1\u12A0\x03\x02\x02\x02\u12A2\u12A3\x03\x02\x02\x02\u12A3\u12A4" +
		"\x05\u0330\u0199\x02\u12A4\u12A5\x05\u0332\u019A\x02\u12A5\u12A6\x05\u0326" +
		"\u0194\x02\u12A6\u032D\x03\x02\x02\x02\u12A7\u12A8\x07\t\x02\x02\u12A8" +
		"\u12A9\x05\u032C\u0197\x02\u12A9\u032F\x03\x02\x02\x02\u12AA\u12AE\x07" +
		"\xD9\x02\x02\u12AB\u12AF\x05\u0434\u021B\x02\u12AC\u12AF\x05\u0496\u024C" +
		"\x02\u12AD\u12AF\x05\u040A\u0206\x02\u12AE\u12AB\x03\x02\x02\x02\u12AE" +
		"\u12AC\x03\x02\x02\x02\u12AE\u12AD\x03\x02\x02\x02\u12AF\u0331\x03\x02" +
		"\x02\x02\u12B0\u12B4\x073\x02\x02\u12B1\u12B5\x05\u0434\u021B\x02\u12B2" +
		"\u12B5\x05\u0496\u024C\x02\u12B3\u12B5\x05\u040A\u0206\x02\u12B4\u12B1" +
		"\x03\x02\x02\x02\u12B4\u12B2\x03\x02\x02\x02\u12B4\u12B3\x03\x02\x02\x02" +
		"\u12B5\u0333\x03\x02\x02\x02\u12B6\u12B8\x07\u0204\x02\x02\u12B7\u12B6" +
		"\x03\x02\x02\x02\u12B7\u12B8\x03\x02\x02\x02\u12B8\u12B9\x03\x02\x02\x02" +
		"\u12B9\u12BA\x07\u01DF\x02\x02\u12BA\u12BB\t:\x02\x02\u12BB\u0335\x03" +
		"\x02\x02\x02\u12BC\u12BE\x07\u016F\x02\x02\u12BD\u12BF\x05\u0462\u0232" +
		"\x02\u12BE\u12BD\x03\x02\x02\x02\u12BF\u12C0\x03\x02\x02\x02\u12C0\u12BE" +
		"\x03\x02\x02\x02\u12C0\u12C1\x03\x02\x02\x02\u12C1\u0337\x03\x02\x02\x02" +
		"\u12C2\u12C3\x07\u0178\x02\x02\u12C3\u12C5\x05\u0470\u0239\x02\u12C4\u12C6" +
		"\x07\u0137\x02\x02\u12C5\u12C4\x03\x02\x02\x02\u12C5\u12C6\x03\x02\x02" +
		"\x02\u12C6\u12C8\x03\x02\x02\x02\u12C7\u12C9\x07\u017B\x02\x02\u12C8\u12C7" +
		"\x03\x02\x02\x02\u12C8\u12C9\x03\x02\x02\x02\u12C9\u12CB\x03\x02\x02\x02" +
		"\u12CA\u12CC\x05\u033A\u019E\x02\u12CB\u12CA\x03\x02\x02\x02\u12CB\u12CC" +
		"\x03\x02\x02\x02\u12CC\u12CE\x03\x02\x02\x02\u12CD\u12CF\x05\u033C\u019F" +
		"\x02\u12CE\u12CD\x03\x02\x02\x02\u12CE\u12CF\x03\x02\x02\x02\u12CF\u12D1" +
		"\x03\x02\x02\x02\u12D0\u12D2\x05\u033E\u01A0\x02\u12D1\u12D0\x03\x02\x02" +
		"\x02\u12D1\u12D2\x03\x02\x02\x02\u12D2\u12D4\x03\x02\x02\x02\u12D3\u12D5" +
		"\x05\u03FA\u01FE\x02\u12D4\u12D3\x03\x02\x02\x02\u12D4\u12D5\x03\x02\x02" +
		"\x02\u12D5\u12D7\x03\x02\x02\x02\u12D6\u12D8\x05\u03FC\u01FF\x02\u12D7" +
		"\u12D6\x03\x02\x02\x02\u12D7\u12D8\x03\x02\x02\x02\u12D8\u12DA\x03\x02" +
		"\x02\x02\u12D9\u12DB\x05\u03F6\u01FC\x02\u12DA\u12D9\x03\x02\x02\x02\u12DA" +
		"\u12DB\x03\x02\x02\x02\u12DB\u12DD\x03\x02\x02\x02\u12DC\u12DE\x05\u03F8" +
		"\u01FD\x02\u12DD\u12DC\x03\x02\x02\x02\u12DD\u12DE\x03\x02\x02\x02\u12DE" +
		"\u12E0\x03\x02\x02\x02\u12DF\u12E1\x07\xAC\x02\x02\u12E0\u12DF\x03\x02" +
		"\x02\x02\u12E0\u12E1\x03\x02\x02\x02\u12E1\u0339\x03\x02\x02\x02\u12E2" +
		"\u12E3\x07\xFD\x02\x02\u12E3\u12E4\x05\u0434\u021B\x02\u12E4\u033B\x03" +
		"\x02\x02\x02\u12E5\u12E7\x07\u0204\x02\x02\u12E6\u12E5\x03\x02\x02\x02" +
		"\u12E6\u12E7\x03\x02\x02\x02\u12E7\u12EB\x03\x02\x02\x02\u12E8\u12E9\t" +
		";\x02\x02\u12E9\u12EC\x07\u0120\x02\x02\u12EA\u12EC\x07\u0201\x02\x02" +
		"\u12EB\u12E8\x03\x02\x02\x02\u12EB\u12EA\x03\x02\x02\x02\u12EC\u033D\x03" +
		"\x02\x02\x02\u12ED\u12EF\x07\u0105\x02\x02\u12EE\u12F0\x07\u0100\x02\x02" +
		"\u12EF\u12EE\x03\x02\x02\x02\u12EF\u12F0\x03\x02\x02\x02\u12F0\u12F1\x03" +
		"\x02\x02\x02\u12F1\u12F2\x05\u0444\u0223\x02\u12F2\u033F\x03\x02\x02\x02" +
		"\u12F3\u12F6\x07\u0179\x02\x02\u12F4\u12F7\x05\u0342\u01A2\x02\u12F5\u12F7" +
		"\x05\u0346\u01A4\x02\u12F6\u12F4\x03\x02\x02\x02\u12F6\u12F5\x03\x02\x02" +
		"\x02\u12F7\u12F9\x03\x02\x02\x02\u12F8\u12FA\x05\u0406\u0204\x02\u12F9" +
		"\u12F8\x03\x02\x02\x02\u12F9\u12FA\x03\x02\x02\x02\u12FA\u12FC\x03\x02" +
		"\x02\x02\u12FB\u12FD\x05\u0408\u0205\x02\u12FC\u12FB\x03\x02\x02\x02\u12FC" +
		"\u12FD\x03\x02\x02\x02\u12FD\u12FF\x03\x02\x02\x02\u12FE\u1300\x07\xAD" +
		"\x02\x02\u12FF\u12FE\x03\x02\x02\x02\u12FF\u1300\x03\x02\x02\x02\u1300" +
		"\u0341\x03\x02\x02\x02\u1301\u1302\x05\u046A\u0236\x02\u1302\u1303\x07" +
		"\xD9\x02\x02\u1303\u130B\x05\u0344\u01A3\x02\u1304\u130A\x05\u034C\u01A7" +
		"\x02\u1305\u130A\x05\u034E\u01A8\x02\u1306\u130A\x05\u0350\u01A9\x02\u1307" +
		"\u130A\x05\u0352\u01AA\x02\u1308\u130A\x05\u0354\u01AB\x02\u1309\u1304" +
		"\x03\x02\x02\x02\u1309\u1305\x03\x02\x02\x02\u1309\u1306\x03\x02\x02\x02" +
		"\u1309\u1307\x03\x02\x02\x02\u1309\u1308\x03\x02\x02\x02\u130A\u130D\x03" +
		"\x02\x02\x02\u130B\u1309\x03\x02\x02\x02\u130B\u130C\x03\x02\x02\x02\u130C" +
		"\u0343\x03\x02\x02\x02\u130D\u130B\x03\x02\x02\x02\u130E\u130F\x07\u01E3" +
		"\x02\x02\u130F\u1315\x05\u046A\u0236\x02\u1310\u1311\x07\u0109\x02\x02" +
		"\u1311\u1315\x07\u01E3\x02\x02\u1312\u1313\x07\x16\x02\x02\u1313\u1315" +
		"\x07\u01E3\x02\x02\u1314\u130E\x03\x02\x02\x02\u1314\u1310\x03\x02\x02" +
		"\x02\u1314\u1312\x03\x02\x02\x02\u1315\u0345\x03\x02\x02\x02\u1316\u1317" +
		"\x05\u0462\u0232\x02\u1317\u1319\t<\x02\x02\u1318\u131A\x07\xFD\x02\x02" +
		"\u1319\u1318\x03\x02\x02\x02\u1319\u131A\x03\x02\x02\x02\u131A\u131B\x03" +
		"\x02\x02\x02\u131B\u131D\x05\u0434\u021B\x02\u131C\u131E\x05\u0348\u01A5" +
		"\x02\u131D\u131C\x03\x02\x02\x02\u131D\u131E\x03\x02\x02\x02\u131E\u1320" +
		"\x03\x02\x02\x02\u131F\u1321\x05\u034A\u01A6\x02\u1320\u131F\x03\x02\x02" +
		"\x02\u1320\u1321\x03\x02\x02\x02\u1321\u0347\x03\x02\x02\x02\u1322\u1323" +
		"\x07\u0138\x02\x02\u1323\u1327\x07o\x02\x02\u1324\u1326\x05\u021A\u010E" +
		"\x02\u1325\u1324\x03\x02\x02\x02\u1326\u1329\x03\x02\x02\x02\u1327\u1325" +
		"\x03\x02\x02\x02\u1327\u1328\x03\x02\x02\x02\u1328\u0349\x03\x02\x02\x02" +
		"\u1329\u1327\x03\x02\x02\x02\u132A\u132B\x07\u0204\x02\x02\u132B\u132F" +
		"\x07o\x02\x02\u132C\u132E\x05\u021A\u010E\x02\u132D\u132C\x03\x02\x02" +
		"\x02\u132E\u1331\x03\x02\x02\x02\u132F\u132D\x03\x02\x02\x02\u132F\u1330" +
		"\x03\x02\x02\x02\u1330\u034B\x03\x02\x02\x02\u1331\u132F\x03\x02\x02\x02" +
		"\u1332\u1334\x07)\x02\x02\u1333\u1335\x07\u01E7\x02\x02\u1334\u1333\x03" +
		"\x02\x02\x02\u1334\u1335\x03\x02\x02\x02\u1335\u1338\x03\x02\x02\x02\u1336" +
		"\u1339\x05\u049A\u024E\x02\u1337\u1339\x05\u0434\u021B\x02\u1338\u1336" +
		"\x03\x02\x02\x02\u1338\u1337\x03\x02\x02\x02\u1339\u034D\x03\x02\x02\x02" +
		"\u133A\u133C\x07\u0204\x02\x02\u133B\u133A\x03\x02\x02\x02\u133B\u133C" +
		"\x03\x02\x02\x02\u133C\u133D\x03\x02\x02\x02\u133D\u133E\x07\u0138\x02" +
		"\x02\u133E\u133F\x07\u0201\x02\x02\u133F\u034F\x03\x02\x02\x02\u1340\u1342" +
		"\x07\u01E3\x02\x02\u1341\u1343\x07\xF1\x02\x02\u1342\u1341\x03\x02\x02" +
		"\x02\u1342\u1343\x03\x02\x02\x02\u1343\u1344\x03\x02\x02\x02\u1344\u1345" +
		"\x05\u046A\u0236\x02\u1345\u0351\x03\x02\x02\x02\u1346\u1348\x07\u01B9" +
		"\x02\x02\u1347\u1349\x07\xF1\x02\x02\u1348\u1347\x03\x02\x02\x02\u1348" +
		"\u1349\x03\x02\x02\x02\u1349\u134C\x03\x02\x02\x02\u134A\u134D\x05\u049A" +
		"\u024E\x02\u134B\u134D\x05\u0434\u021B\x02\u134C\u134A\x03\x02\x02\x02" +
		"\u134C\u134B\x03\x02\x02\x02\u134D\u0353\x03\x02\x02\x02\u134E\u1350\x07" +
		"\u01CB\x02\x02\u134F\u1351\x07\xF1\x02\x02\u1350\u134F\x03\x02\x02\x02" +
		"\u1350\u1351\x03\x02\x02\x02\u1351\u1352\x03\x02\x02\x02\u1352\u1353\x05" +
		"\u0434\u021B\x02\u1353\u0355\x03\x02\x02\x02\u1354\u1355\x07\u0185\x02" +
		"\x02\u1355\u1358\x05\u0484\u0243\x02\u1356\u1357\x07\xD9\x02\x02\u1357" +
		"\u1359\x05\u0444\u0223\x02\u1358\u1356\x03\x02\x02\x02\u1358\u1359\x03" +
		"\x02\x02\x02\u1359\u0357\x03\x02\x02\x02\u135A\u135B\x07\u0195\x02\x02" +
		"\u135B\u135D\x05\u0470\u0239\x02\u135C\u135E\x07\u017B\x02\x02\u135D\u135C" +
		"\x03\x02\x02\x02\u135D\u135E\x03\x02\x02\x02\u135E\u1360\x03\x02\x02\x02" +
		"\u135F\u1361\x05\u035A\u01AE\x02\u1360\u135F\x03\x02\x02\x02\u1360\u1361" +
		"\x03\x02\x02\x02\u1361\u1362\x03\x02\x02\x02\u1362\u1364\x05\u03F6\u01FC" +
		"\x02\u1363\u1365\x05\u03F8\u01FD\x02\u1364\u1363\x03\x02\x02\x02\u1364" +
		"\u1365\x03\x02\x02\x02\u1365\u1367\x03\x02\x02\x02\u1366\u1368\x07\xAE" +
		"\x02\x02\u1367\u1366\x03\x02\x02\x02\u1367\u1368\x03\x02\x02\x02\u1368" +
		"\u0359\x03\x02\x02\x02\u1369\u136A\x07\xFD\x02\x02\u136A\u136B\x05\u0444" +
		"\u0223\x02\u136B\u035B\x03\x02\x02\x02\u136C\u136D\x07\u019A\x02\x02\u136D" +
		"\u136F\x05\u0484\u0243\x02\u136E\u1370\x05\u035E\u01B0\x02\u136F\u136E" +
		"\x03\x02\x02\x02\u136F\u1370\x03\x02\x02\x02\u1370\u1372\x03\x02\x02\x02" +
		"\u1371\u1373\x05\u03FA\u01FE\x02\u1372\u1371\x03\x02\x02\x02\u1372\u1373" +
		"\x03\x02\x02\x02\u1373\u1375\x03\x02\x02\x02\u1374\u1376\x05\u03FC\u01FF" +
		"\x02\u1375\u1374\x03\x02\x02\x02\u1375\u1376\x03\x02\x02\x02\u1376\u1378" +
		"\x03\x02\x02\x02\u1377\u1379\x07\xAF\x02\x02\u1378\u1377\x03\x02\x02\x02" +
		"\u1378\u1379\x03\x02\x02\x02\u1379\u035D\x03\x02\x02\x02\u137A\u137B\x07" +
		"\xD9\x02\x02\u137B\u137C\x05\u0434\u021B\x02\u137C\u035F\x03\x02\x02\x02" +
		"\u137D\u137F\x07\u01A4\x02\x02\u137E\u1380\x07\v\x02\x02\u137F\u137E\x03" +
		"\x02\x02\x02\u137F\u1380\x03\x02\x02\x02\u1380\u1381\x03\x02\x02\x02\u1381" +
		"\u1383\x05\u0444\u0223\x02\u1382\u1384\x05\u0362\u01B2\x02\u1383\u1382" +
		"\x03\x02\x02\x02\u1383\u1384\x03\x02\x02\x02\u1384\u1386\x03\x02\x02\x02" +
		"\u1385\u1387\x05\u03F6\u01FC\x02\u1386\u1385\x03\x02\x02\x02\u1386\u1387" +
		"\x03\x02\x02\x02\u1387\u1389\x03\x02\x02\x02\u1388\u138A\x05\u0364\u01B3" +
		"\x02\u1389\u1388\x03\x02\x02\x02\u138A\u138B\x03\x02\x02\x02\u138B\u1389" +
		"\x03\x02\x02\x02\u138B\u138C\x03\x02\x02\x02\u138C\u138E\x03\x02\x02\x02" +
		"\u138D\u138F\x07\xB0\x02\x02\u138E\u138D\x03\x02\x02\x02\u138E\u138F\x03" +
		"\x02\x02\x02\u138F\u0361\x03\x02\x02\x02\u1390\u1391\x07\u01FF\x02\x02" +
		"\u1391\u1392\x05\u0444\u0223\x02\u1392\u0363\x03\x02\x02\x02\u1393\u1394" +
		"\x07\u0202\x02\x02\u1394\u139D\x05\u0418\u020D\x02\u1395\u1396\x07\u0137" +
		"\x02\x02\u1396\u139E\x07\u01AC\x02\x02\u1397\u1399\x05\u021A\u010E\x02" +
		"\u1398\u1397\x03\x02\x02\x02\u1399\u139C\x03\x02\x02\x02\u139A\u1398\x03" +
		"\x02\x02\x02\u139A\u139B\x03\x02\x02\x02\u139B\u139E\x03\x02\x02\x02\u139C" +
		"\u139A\x03\x02\x02\x02\u139D\u1395\x03\x02\x02\x02\u139D\u139A\x03\x02" +
		"\x02\x02\u139E\u0365\x03\x02\x02\x02\u139F\u13A2\x07\u01AB\x02\x02\u13A0" +
		"\u13A3\x05\u0368\u01B5\x02\u13A1\u13A3\x05\u036A\u01B6\x02\u13A2\u13A0" +
		"\x03\x02\x02\x02\u13A2\u13A1\x03\x02\x02\x02\u13A3\u13A5\x03\x02\x02\x02" +
		"\u13A4\u13A6\x05\u0406\u0204\x02\u13A5\u13A4\x03\x02\x02\x02\u13A5\u13A6" +
		"\x03\x02\x02\x02\u13A6\u13A8\x03\x02\x02\x02\u13A7\u13A9\x05\u0408\u0205" +
		"\x02\u13A8\u13A7\x03\x02\x02\x02\u13A8\u13A9\x03\x02\x02\x02\u13A9\u0367" +
		"\x03\x02\x02\x02\u13AA\u13AD\x05\u0434\u021B\x02\u13AB\u13AD\x05\u0496" +
		"\u024C\x02\u13AC\u13AA\x03\x02\x02\x02\u13AC\u13AB\x03\x02\x02\x02\u13AD" +
		"\u13AF\x03\x02\x02\x02\u13AE\u13B0\x05\u036C\u01B7\x02\u13AF\u13AE\x03" +
		"\x02\x02\x02\u13AF\u13B0\x03\x02\x02\x02\u13B0\u13B2\x03\x02\x02\x02\u13B1" +
		"\u13B3\x05\u036E\u01B8\x02\u13B2\u13B1\x03\x02\x02\x02\u13B2\u13B3\x03" +
		"\x02\x02\x02\u13B3\u13B5\x03\x02\x02\x02\u13B4\u13B6\x05\u0370\u01B9\x02" +
		"\u13B5\u13B4\x03\x02\x02\x02\u13B5\u13B6\x03\x02\x02\x02\u13B6\u13B8\x03" +
		"\x02\x02\x02\u13B7\u13B9\x05\u0372\u01BA\x02\u13B8\u13B7\x03\x02\x02\x02" +
		"\u13B8\u13B9\x03\x02\x02\x02\u13B9\u0369\x03\x02\x02\x02\u13BA\u13BB\x07" +
		"\u01EB\x02\x02\u13BB\u13BC\t=\x02\x02\u13BC\u13BD\x05\u0434\u021B\x02" +
		"\u13BD\u036B\x03\x02\x02\x02\u13BE\u13BF\x07\xD9\x02\x02\u13BF\u13C0\x05" +
		"\u0434\u021B\x02\u13C0\u036D\x03\x02\x02\x02\u13C1\u13C6\x07\u0204\x02" +
		"\x02\u13C2\u13C7\x07\x9B\x02\x02\u13C3\u13C7\x07\x9D\x02\x02\u13C4\u13C7" +
		"\x07\xC2\x02\x02\u13C5\u13C7\x05\u0434\u021B\x02\u13C6\u13C2\x03\x02\x02" +
		"\x02\u13C6\u13C3\x03\x02\x02\x02\u13C6\u13C4\x03\x02\x02\x02\u13C6\u13C5" +
		"\x03\x02\x02\x02\u13C7\u036F\x03\x02\x02\x02\u13C8\u13CA\x07\u018C\x02" +
		"\x02\u13C9\u13CB\x07\u0119\x02\x02\u13CA\u13C9\x03\x02\x02\x02\u13CA\u13CB" +
		"\x03\x02\x02\x02\u13CB\u0371\x03\x02\x02\x02\u13CC\u13CE\t:\x02\x02\u13CD" +
		"\u13CF\x07\b\x02\x02\u13CE\u13CD\x03\x02\x02\x02\u13CE\u13CF\x03\x02\x02" +
		"\x02\u13CF\u13D3\x03\x02\x02\x02\u13D0\u13D4\x05\u0374\u01BB\x02\u13D1" +
		"\u13D4\x05\u0376\u01BC\x02\u13D2\u13D4\x05\u0378\u01BD\x02\u13D3\u13D0" +
		"\x03\x02\x02\x02\u13D3\u13D1\x03\x02\x02\x02\u13D3\u13D2\x03\x02\x02\x02" +
		"\u13D4\u0373\x03\x02\x02\x02\u13D5\u13D6\x07\u0156\x02\x02\u13D6\u0375" +
		"\x03\x02\x02\x02\u13D7\u13DA\x05\u0434\u021B\x02\u13D8\u13DA\x05\u0496" +
		"\u024C\x02\u13D9\u13D7\x03\x02\x02\x02\u13D9\u13D8\x03\x02\x02\x02\u13DA" +
		"\u13DC\x03\x02\x02\x02\u13DB\u13DD\t#\x02\x02\u13DC\u13DB\x03\x02\x02" +
		"\x02\u13DC\u13DD\x03\x02\x02\x02\u13DD\u0377\x03\x02\x02\x02\u13DE\u13DF" +
		"\x05\u047C\u023F\x02\u13DF\u0379\x03\x02\x02\x02\u13E0\u13E7\x07\u01B0" +
		"\x02\x02\u13E1\u13E3\x05\u037C\u01BF\x02\u13E2\u13E1\x03\x02\x02\x02\u13E3" +
		"\u13E4\x03\x02\x02\x02\u13E4\u13E2\x03\x02\x02\x02\u13E4\u13E5\x03\x02" +
		"\x02\x02\u13E5\u13E8\x03\x02\x02\x02\u13E6\u13E8\x05\u037E\u01C0\x02\u13E7" +
		"\u13E2\x03\x02\x02\x02\u13E7\u13E6\x03\x02\x02\x02\u13E8\u037B\x03\x02" +
		"\x02\x02\u13E9\u13EB\x05\u0380\u01C1\x02\u13EA\u13E9\x03\x02\x02\x02\u13EB" +
		"\u13EC\x03\x02\x02\x02\u13EC\u13EA\x03\x02\x02\x02\u13EC\u13ED\x03\x02" +
		"\x02\x02\u13ED\u13EE\x03\x02\x02\x02\u13EE\u13F0\x07\u01EB\x02\x02\u13EF" +
		"\u13F1\x05\u0382\u01C2\x02\u13F0\u13EF\x03\x02\x02\x02\u13F1\u13F2\x03" +
		"\x02\x02\x02\u13F2\u13F0\x03\x02\x02\x02\u13F2\u13F3\x03\x02\x02\x02\u13F3" +
		"\u037D\x03\x02\x02\x02\u13F4\u13F6\x05\u0380\u01C1\x02\u13F5\u13F4\x03" +
		"\x02\x02\x02\u13F6\u13F7\x03\x02\x02\x02\u13F7\u13F5\x03\x02\x02\x02\u13F7" +
		"\u13F8\x03\x02\x02\x02\u13F8\u13FD\x03\x02\x02\x02\u13F9\u13FA\x07\u01F8" +
		"\x02\x02\u13FA\u13FE\x073\x02\x02\u13FB\u13FC\x07\x96\x02\x02\u13FC\u13FE" +
		"\x073\x02\x02\u13FD\u13F9\x03\x02\x02\x02\u13FD\u13FB\x03\x02\x02\x02" +
		"\u13FE\u13FF\x03\x02\x02\x02\u13FF\u1400\x05\u0384\u01C3\x02\u1400\u037F" +
		"\x03\x02\x02\x02\u1401\u1402\x05\u0434\u021B\x02\u1402\u0381\x03\x02\x02" +
		"\x02\u1403\u140D\x07\u0148\x02\x02\u1404\u140D\x07\u0146\x02\x02\u1405" +
		"\u1408\x07\xB8\x02\x02\u1406\u1409\x05\u0434\u021B\x02\u1407\u1409\x05" +
		"\u0496\u024C\x02\u1408\u1406\x03\x02\x02\x02\u1408\u1407\x03\x02\x02\x02" +
		"\u1409\u140D\x03\x02\x02\x02\u140A\u140D\x05\u0434\u021B\x02\u140B\u140D" +
		"\x05\u0496\u024C\x02\u140C\u1403\x03\x02\x02\x02\u140C\u1404\x03\x02\x02" +
		"\x02\u140C\u1405\x03\x02\x02\x02\u140C\u140A\x03\x02\x02\x02\u140C\u140B" +
		"\x03\x02\x02\x02\u140D\u0383\x03\x02\x02\x02\u140E\u1411\x05\u0434\u021B" +
		"\x02\u140F\u1411\x05\u0496\u024C\x02\u1410\u140E\x03\x02\x02\x02\u1410" +
		"\u140F\x03\x02\x02\x02\u1411\u0385\x03\x02\x02\x02\u1412\u1413\x07\u01BA" +
		"\x02\x02\u1413\u1415\x05\u0470\u0239\x02\u1414\u1416\x05\u0388\u01C5\x02" +
		"\u1415\u1414\x03\x02\x02\x02\u1416\u1417\x03\x02\x02\x02\u1417\u1415\x03" +
		"\x02\x02\x02\u1417\u1418\x03\x02\x02\x02\u1418\u141A\x03\x02\x02\x02\u1419" +
		"\u141B\x05\u038A\u01C6\x02\u141A\u1419\x03\x02\x02\x02\u141A\u141B\x03" +
		"\x02\x02\x02\u141B\u141D\x03\x02\x02\x02\u141C\u141E\x05\u038C\u01C7\x02" +
		"\u141D\u141C\x03\x02\x02\x02\u141D\u141E\x03\x02\x02\x02\u141E\u1420\x03" +
		"\x02\x02\x02\u141F\u1421\x05\u0392\u01CA\x02\u1420\u141F\x03\x02\x02\x02" +
		"\u1420\u1421\x03\x02\x02\x02\u1421\u1425\x03\x02\x02\x02\u1422\u1424\x05" +
		"\u0396\u01CC\x02\u1423\u1422\x03\x02\x02\x02\u1424\u1427\x03\x02\x02\x02" +
		"\u1425\u1423\x03\x02\x02\x02\u1425\u1426\x03\x02\x02\x02\u1426\u1429\x03" +
		"\x02\x02\x02\u1427\u1425\x03\x02\x02\x02\u1428\u142A\x05\u0398\u01CD\x02" +
		"\u1429\u1428\x03\x02\x02\x02\u1429\u142A\x03\x02\x02\x02\u142A\u142E\x03" +
		"\x02\x02\x02\u142B\u142D\x05\u039C\u01CF\x02\u142C\u142B\x03\x02\x02\x02" +
		"\u142D\u1430\x03\x02\x02\x02\u142E\u142C\x03\x02\x02\x02\u142E\u142F\x03" +
		"\x02\x02\x02\u142F\u0387\x03\x02\x02\x02\u1430\u142E\x03\x02\x02\x02\u1431" +
		"\u1433\x07\u0148\x02\x02\u1432\u1431\x03\x02\x02\x02\u1432\u1433\x03\x02" +
		"\x02\x02\u1433\u1434\x03\x02\x02\x02\u1434\u1436\t+\x02\x02\u1435\u1437" +
		"\x07\u0105\x02\x02\u1436\u1435\x03\x02\x02\x02\u1436\u1437\x03\x02\x02" +
		"\x02\u1437\u1439\x03\x02\x02\x02\u1438\u143A\x05\u0444\u0223\x02\u1439" +
		"\u1438\x03\x02\x02\x02\u143A\u143B\x03\x02\x02\x02\u143B\u1439\x03\x02" +
		"\x02\x02\u143B\u143C\x03\x02\x02\x02\u143C\u0389\x03\x02\x02\x02\u143D" +
		"\u143F\x07\u0204\x02\x02\u143E\u143D\x03\x02\x02\x02\u143E\u143F\x03\x02" +
		"\x02\x02\u143F\u1440\x03\x02\x02\x02\u1440\u1442\x07\x97\x02\x02\u1441" +
		"\u1443\x07\xF1\x02\x02\u1442\u1441\x03\x02\x02\x02\u1442\u1443\x03\x02" +
		"\x02\x02\u1443\u1445\x03\x02\x02\x02\u1444\u1446\x07\u014C\x02\x02\u1445" +
		"\u1444\x03\x02\x02\x02\u1445\u1446\x03\x02\x02\x02\u1446\u038B\x03\x02" +
		"\x02\x02\u1447\u1449\x07J\x02\x02\u1448\u1447\x03\x02\x02\x02\u1448\u1449" +
		"\x03\x02\x02\x02\u1449\u144A\x03\x02\x02\x02\u144A\u144C\x07\u01AE\x02" +
		"\x02\u144B\u144D\x07\u0100\x02\x02\u144C\u144B\x03\x02\x02\x02\u144C\u144D" +
		"\x03\x02\x02\x02\u144D\u144F\x03\x02\x02\x02\u144E\u1450\x05\u045C\u022F" +
		"\x02\u144F\u144E\x03\x02\x02\x02\u1450\u1451\x03\x02\x02\x02\u1451\u144F" +
		"\x03\x02\x02\x02\u1451\u1452\x03\x02\x02\x02\u1452\u1454\x03\x02\x02\x02" +
		"\u1453\u1455\x05\u038E\u01C8\x02\u1454\u1453\x03\x02\x02\x02\u1454\u1455" +
		"\x03\x02\x02\x02\u1455\u1457\x03\x02\x02\x02\u1456\u1458\x05\u0390\u01C9" +
		"\x02\u1457\u1456\x03\x02\x02\x02\u1457\u1458\x03\x02\x02\x02\u1458\u038D" +
		"\x03\x02\x02\x02\u1459\u145B\x07\xD6\x02\x02\u145A\u1459\x03\x02\x02\x02" +
		"\u145A\u145B\x03\x02\x02\x02\u145B\u145C\x03\x02\x02\x02\u145C\u145D\x07" +
		"\x10\x02\x02\u145D\u145E\x07\u0100\x02\x02\u145E\u145F\x05\u045C\u022F" +
		"\x02\u145F\u038F\x03\x02\x02\x02\u1460\u1462\x07\xD6\x02\x02\u1461\u1460" +
		"\x03\x02\x02\x02\u1461\u1462\x03\x02\x02\x02\u1462\u1463\x03\x02\x02\x02" +
		"\u1463\u1465\x07\u0132\x02\x02\u1464\u1466\x07\u0100\x02\x02\u1465\u1464" +
		"\x03\x02\x02\x02\u1465\u1466\x03\x02\x02\x02\u1466\u1467\x03\x02\x02\x02" +
		"\u1467\u1468\x05\u045C\u022F\x02\u1468\u0391\x03\x02\x02\x02\u1469\u146A" +
		"\x07\xF8\x02\x02\u146A\u146C\x07\u0166\x02\x02\u146B\u146D\x07\u0100\x02" +
		"\x02\u146C\u146B\x03\x02\x02\x02\u146C\u146D\x03\x02\x02\x02\u146D\u146E" +
		"\x03\x02\x02\x02\u146E\u1470\x05\u0480\u0241\x02\u146F\u1471\x05\u0394" +
		"\u01CB\x02\u1470\u146F\x03\x02\x02\x02\u1470\u1471\x03\x02\x02\x02\u1471" +
		"\u0393\x03\x02\x02\x02\u1472\u1473\t\x06\x02\x02\u1473\u1474\x05\u0480" +
		"\u0241\x02\u1474\u0395\x03\x02\x02\x02\u1475\u1477\x07\u01FC\x02\x02\u1476" +
		"\u1478\x05\u0470\u0239\x02\u1477\u1476\x03\x02\x02\x02\u1478\u1479\x03" +
		"\x02\x02\x02\u1479\u1477\x03\x02\x02\x02\u1479\u147A\x03\x02\x02\x02\u147A" +
		"\u0397\x03\x02\x02\x02\u147B\u147C\x07\u0150\x02\x02\u147C\u147E\x07\u0166" +
		"\x02\x02\u147D\u147F\x07\u0100\x02\x02\u147E\u147D\x03\x02\x02\x02\u147E" +
		"\u147F\x03\x02\x02\x02\u147F\u1480\x03\x02\x02\x02\u1480\u1482\x05\u0480" +
		"\u0241\x02\u1481\u1483\x05\u039A\u01CE\x02\u1482\u1481\x03";
	private static readonly _serializedATNSegment10: string =
		"\x02\x02\x02\u1482\u1483\x03\x02\x02\x02\u1483\u0399\x03\x02\x02\x02\u1484" +
		"\u1485\t\x06\x02\x02\u1485\u1486\x05\u0480\u0241\x02\u1486\u039B\x03\x02" +
		"\x02\x02\u1487\u1489\x07\xE0\x02\x02\u1488\u148A\x05\u039E\u01D0\x02\u1489" +
		"\u1488\x03\x02\x02\x02\u148A\u148B\x03\x02\x02\x02\u148B\u1489\x03\x02" +
		"\x02\x02\u148B\u148C\x03\x02\x02\x02\u148C\u039D\x03\x02\x02\x02\u148D" +
		"\u1497\x05\u0470\u0239\x02\u148E\u1498\x07\u0120\x02\x02\u148F\u1498\x07" +
		"\u01A1\x02\x02\u1490\u1491\x07\u0138\x02\x02\u1491\u1498\x07\u0199\x02" +
		"\x02\u1492\u1498\x07l\x02\x02\u1493\u1498\x07\u0185\x02\x02\u1494\u1495" +
		"\x07\u0204\x02\x02\u1495\u1496\x07\u0189\x02\x02\u1496\u1498\x07l\x02" +
		"\x02\u1497\u148E\x03\x02\x02\x02\u1497\u148F\x03\x02\x02\x02\u1497\u1490" +
		"\x03\x02\x02\x02\u1497\u1492\x03\x02\x02\x02\u1497\u1493\x03\x02\x02\x02" +
		"\u1497\u1494\x03\x02\x02\x02\u1497\u1498\x03\x02\x02\x02\u1498\u039F\x03" +
		"\x02\x02\x02\u1499\u149A\x07\u01CA\x02\x02\u149A\u149C\x05\u0470\u0239" +
		"\x02\u149B\u149D\x05\u03A2\u01D2\x02\u149C\u149B\x03\x02\x02\x02\u149C" +
		"\u149D\x03\x02\x02\x02\u149D\u149F\x03\x02\x02\x02\u149E\u14A0\x05\u03FA" +
		"\u01FE\x02\u149F\u149E\x03\x02\x02\x02\u149F\u14A0\x03\x02\x02\x02\u14A0" +
		"\u14A2\x03\x02\x02\x02\u14A1\u14A3\x05\u03FC\u01FF\x02\u14A2\u14A1\x03" +
		"\x02\x02\x02\u14A2\u14A3\x03\x02\x02\x02\u14A3\u14A5\x03\x02\x02\x02\u14A4" +
		"\u14A6\x07\xB1\x02\x02\u14A5\u14A4\x03\x02\x02\x02\u14A5\u14A6\x03\x02" +
		"\x02\x02\u14A6\u03A1\x03\x02\x02\x02\u14A7\u14A9\x07\u0105\x02\x02\u14A8" +
		"\u14AA\x07\u0100\x02\x02\u14A9\u14A8\x03\x02\x02\x02\u14A9\u14AA\x03\x02" +
		"\x02\x02\u14AA\u14C6\x03\x02\x02\x02\u14AB\u14AD\x07\xBC\x02\x02\u14AC" +
		"\u14AE\x07\u01EB\x02\x02\u14AD\u14AC\x03\x02\x02\x02\u14AD\u14AE\x03\x02" +
		"\x02\x02\u14AE\u14C7\x03\x02\x02\x02\u14AF\u14C7\x07\u021A\x02\x02\u14B0" +
		"\u14B2\x07\xE3\x02\x02\u14B1\u14B3\x07\u01E1\x02\x02\u14B2\u14B1\x03\x02" +
		"\x02\x02\u14B2\u14B3\x03\x02\x02\x02\u14B3\u14C7\x03\x02\x02\x02\u14B4" +
		"\u14C7\x07\u0222\x02\x02\u14B5\u14B6\x07\u013A\x02\x02\u14B6\u14B8\x07" +
		"\u0111\x02\x02\u14B7\u14B9\x07\u01E1\x02\x02\u14B8\u14B7\x03\x02\x02\x02" +
		"\u14B8\u14B9\x03\x02\x02\x02\u14B9\u14C7\x03\x02\x02\x02\u14BA\u14BB\x07" +
		"\u013A\x02\x02\u14BB\u14C7\x07\u021E\x02\x02\u14BC\u14BE\x07\xE3\x02\x02" +
		"\u14BD\u14BF\x07\u01E1\x02\x02\u14BE\u14BD\x03\x02\x02\x02\u14BE\u14BF" +
		"\x03\x02\x02\x02\u14BF\u14C0\x03\x02\x02\x02\u14C0\u14C1\x07\u014B\x02" +
		"\x02\u14C1\u14C3\x07\xBC\x02\x02\u14C2\u14C4\x07\u01EB\x02\x02\u14C3\u14C2" +
		"\x03\x02\x02\x02\u14C3\u14C4\x03\x02\x02\x02\u14C4\u14C7\x03\x02\x02\x02" +
		"\u14C5\u14C7\x07\u0223\x02\x02\u14C6\u14AB\x03\x02\x02\x02\u14C6\u14AF" +
		"\x03\x02\x02\x02\u14C6\u14B0\x03\x02\x02\x02\u14C6\u14B4\x03\x02\x02\x02" +
		"\u14C6\u14B5\x03\x02\x02\x02\u14C6\u14BA\x03\x02\x02\x02\u14C6\u14BC\x03" +
		"\x02\x02\x02\u14C6\u14C5\x03\x02\x02\x02\u14C7\u14C8\x03\x02\x02\x02\u14C8" +
		"\u14C9\x05\u0444\u0223\x02\u14C9\u03A3\x03\x02\x02\x02\u14CA\u14CD\x07" +
		"\u01CC\x02\x02\u14CB\u14CE\x07\u019F\x02\x02\u14CC\u14CE\x05\u0496\u024C" +
		"\x02\u14CD\u14CB\x03\x02\x02\x02\u14CD\u14CC\x03\x02\x02\x02\u14CE\u03A5" +
		"\x03\x02\x02\x02\u14CF\u14D1\x07\u01CD\x02\x02\u14D0\u14D2\x05\u03A8\u01D5" +
		"\x02\u14D1\u14D0\x03\x02\x02\x02\u14D2\u14D3\x03\x02\x02\x02\u14D3\u14D1" +
		"\x03\x02\x02\x02\u14D3\u14D4\x03\x02\x02\x02\u14D4\u14D5\x03\x02\x02\x02" +
		"\u14D5\u14D7\x05\u03B0\u01D9\x02\u14D6\u14D8\x05\u03B2\u01DA\x02\u14D7" +
		"\u14D6\x03\x02\x02\x02\u14D7\u14D8\x03\x02\x02\x02\u14D8\u14DA\x03\x02" +
		"\x02\x02\u14D9\u14DB\x05\u03FE\u0200\x02\u14DA\u14D9\x03\x02\x02\x02\u14DA" +
		"\u14DB\x03\x02\x02\x02\u14DB\u14DD\x03\x02\x02\x02\u14DC\u14DE\x05\u0400" +
		"\u0201\x02\u14DD\u14DC\x03\x02\x02\x02\u14DD\u14DE\x03\x02\x02\x02\u14DE" +
		"\u14E0\x03\x02\x02\x02\u14DF\u14E1\x07\xB2\x02\x02\u14E0\u14DF\x03\x02" +
		"\x02\x02\u14E0\u14E1\x03\x02\x02\x02\u14E1\u03A7\x03\x02\x02\x02\u14E2" +
		"\u14E4\x05\u03AA\u01D6\x02\u14E3\u14E2\x03\x02\x02\x02\u14E4\u14E5\x03" +
		"\x02\x02\x02\u14E5\u14E3\x03\x02\x02\x02\u14E5\u14E6\x03\x02\x02\x02\u14E6" +
		"\u14E9\x03\x02\x02\x02\u14E7\u14EA\x05\u03AC\u01D7\x02\u14E8\u14EA\x05" +
		"\u03AE\u01D8\x02\u14E9\u14E7\x03\x02\x02\x02\u14E9\u14E8\x03\x02\x02\x02" +
		"\u14EA\u03A9\x03\x02\x02\x02\u14EB\u14EE\x05\u0434\u021B\x02\u14EC\u14EE" +
		"\x05\u0496\u024C\x02\u14ED\u14EB\x03\x02\x02\x02\u14ED\u14EC\x03\x02\x02" +
		"\x02\u14EE\u03AB\x03\x02\x02\x02\u14EF\u14F1\x07\x86\x02\x02\u14F0\u14F2" +
		"\x073\x02\x02\u14F1\u14F0\x03\x02\x02\x02\u14F1\u14F2\x03\x02\x02\x02" +
		"\u14F2\u14F6\x03\x02\x02\x02\u14F3\u14F7\x07\u01B9\x02\x02\u14F4\u14F7" +
		"\x05\u0434\u021B\x02\u14F5\u14F7\x05\u0496\u024C\x02\u14F6\u14F3\x03\x02" +
		"\x02\x02\u14F6\u14F4\x03\x02\x02\x02\u14F6\u14F5\x03\x02\x02\x02\u14F7" +
		"\u03AD\x03\x02\x02\x02\u14F8\u14FB\x07\xD6\x02\x02\u14F9\u14FC\x05\u0434" +
		"\u021B\x02\u14FA\u14FC\x05\u0496\u024C\x02\u14FB\u14F9\x03\x02\x02\x02" +
		"\u14FB\u14FA\x03\x02\x02\x02\u14FC\u03AF\x03\x02\x02\x02\u14FD\u14FE\x07" +
		"\xFD\x02\x02\u14FE\u14FF\x05\u0434\u021B\x02\u14FF\u03B1\x03\x02\x02\x02" +
		"\u1500\u1502\x07\u0204\x02\x02\u1501\u1500\x03\x02\x02\x02\u1501\u1502" +
		"\x03\x02\x02\x02\u1502\u1503\x03\x02\x02\x02\u1503\u1504\x07\u015F\x02" +
		"\x02\u1504\u1505\x05\u0444\u0223\x02\u1505\u03B3\x03\x02\x02\x02\u1506" +
		"\u150A\x07\u01D1\x02\x02\u1507\u150B\x05\u03B6\u01DC\x02\u1508\u150B\x05" +
		"\u03B8\u01DD\x02\u1509\u150B\x05\u03BA\u01DE\x02\u150A\u1507\x03\x02\x02" +
		"\x02\u150A\u1508\x03\x02\x02\x02\u150A\u1509\x03\x02\x02\x02\u150B\u150D" +
		"\x03\x02\x02\x02\u150C\u150E\x05\u0402\u0202\x02\u150D\u150C\x03\x02\x02" +
		"\x02\u150D\u150E\x03\x02\x02\x02\u150E\u1510\x03\x02\x02\x02\u150F\u1511" +
		"\x05\u0404\u0203\x02\u1510\u150F\x03\x02\x02\x02\u1510\u1511\x03\x02\x02" +
		"\x02\u1511\u1513\x03\x02\x02\x02\u1512\u1514\x07\xB3\x02\x02\u1513\u1512" +
		"\x03\x02\x02\x02\u1513\u1514\x03\x02\x02\x02\u1514\u03B5\x03\x02\x02\x02" +
		"\u1515\u1517\x05\u03BC\u01DF\x02\u1516\u1515\x03\x02\x02\x02\u1517\u1518" +
		"\x03\x02\x02\x02\u1518\u1516\x03\x02\x02\x02\u1518\u1519\x03\x02\x02\x02" +
		"\u1519\u151A\x03\x02\x02\x02\u151A\u151C\x07\xD9\x02\x02\u151B\u151D\x05" +
		"\u03BE\u01E0\x02\u151C\u151B\x03\x02\x02\x02\u151D\u151E\x03\x02\x02\x02" +
		"\u151E\u151C\x03\x02\x02\x02\u151E\u151F\x03\x02\x02\x02\u151F\u03B7\x03" +
		"\x02\x02\x02\u1520\u1522\x05\u03BC\u01DF\x02\u1521\u1520\x03\x02\x02\x02" +
		"\u1522\u1523\x03\x02\x02\x02\u1523\u1521\x03\x02\x02\x02\u1523\u1524\x03" +
		"\x02\x02\x02\u1524\u1525\x03\x02\x02\x02\u1525\u1526\x07\xD9\x02\x02\u1526" +
		"\u1527\x05\u03C0\u01E1\x02\u1527\u1529\x07\xE0\x02\x02\u1528\u152A\x05" +
		"\u03C2\u01E2\x02\u1529\u1528\x03\x02\x02\x02\u152A\u152B\x03\x02\x02\x02" +
		"\u152B\u1529\x03\x02\x02\x02\u152B\u152C\x03\x02\x02\x02\u152C\u03B9\x03" +
		"\x02\x02\x02\u152D\u152E\t4\x02\x02\u152E\u152F\x05\u0444\u0223\x02\u152F" +
		"\u1530\x07\xD9\x02\x02\u1530\u1531\x05\u03C4\u01E3\x02\u1531\u03BB\x03" +
		"\x02\x02\x02\u1532\u1535\x05\u0434\u021B\x02\u1533\u1535\x05\u0496\u024C" +
		"\x02\u1534\u1532\x03\x02\x02\x02\u1534\u1533\x03\x02\x02\x02\u1535\u03BD" +
		"\x03\x02\x02\x02\u1536\u1538\x05\u0434\u021B\x02\u1537\u1539\x07\u019E" +
		"\x02\x02\u1538\u1537\x03\x02\x02\x02\u1538\u1539\x03\x02\x02\x02\u1539" +
		"\u03BF\x03\x02\x02\x02\u153A\u153D\x05\u0434\u021B\x02\u153B\u153D\x05" +
		"\u0496\u024C\x02\u153C\u153A\x03\x02\x02\x02\u153C\u153B\x03\x02\x02\x02" +
		"\u153D\u03C1\x03\x02\x02\x02\u153E\u1540\x05\u0434\u021B\x02\u153F\u1541" +
		"\x07\u019E\x02\x02\u1540\u153F\x03\x02\x02\x02\u1540\u1541\x03\x02\x02" +
		"\x02\u1541\u03C3\x03\x02\x02\x02\u1542\u1544\x05\u0444\u0223\x02\u1543" +
		"\u1545\x07\u019E\x02\x02\u1544\u1543\x03\x02\x02\x02\u1544\u1545\x03\x02" +
		"\x02\x02\u1545\u03C5\x03\x02\x02\x02\u1546\u1547\x07\u01DE\x02\x02\u1547" +
		"\u1548\x05\u0486\u0244\x02\u1548\u03C7\x03\x02\x02\x02\u1549\u154A\x07" +
		"\u01F6\x02\x02\u154A\u154B\x05\u03CA\u01E6\x02\u154B\u154D\x05\u03D0\u01E9" +
		"\x02\u154C\u154E\x05\u03D8\u01ED\x02\u154D\u154C\x03\x02\x02\x02\u154D" +
		"\u154E\x03\x02\x02\x02\u154E\u1550\x03\x02\x02\x02\u154F\u1551\x05\u03DA" +
		"\u01EE\x02\u1550\u154F\x03\x02\x02\x02\u1550\u1551\x03\x02\x02\x02\u1551" +
		"\u1553\x03\x02\x02\x02\u1552\u1554\x05\u03FE\u0200\x02\u1553\u1552\x03" +
		"\x02\x02\x02\u1553\u1554\x03\x02\x02\x02\u1554\u1556\x03\x02\x02\x02\u1555" +
		"\u1557\x05\u0400\u0201\x02\u1556\u1555\x03\x02\x02\x02\u1556\u1557\x03" +
		"\x02\x02\x02\u1557\u1559\x03\x02\x02\x02\u1558\u155A\x07\xB4\x02\x02\u1559" +
		"\u1558\x03\x02\x02\x02\u1559\u155A\x03\x02\x02\x02\u155A\u03C9\x03\x02" +
		"\x02\x02\u155B\u1563\x05\u0434\u021B\x02\u155C\u1560\x05\u03CC\u01E7\x02" +
		"\u155D\u155F\x05\u03CE\u01E8\x02\u155E\u155D\x03\x02\x02\x02\u155F\u1562" +
		"\x03\x02\x02\x02\u1560\u155E\x03\x02\x02\x02\u1560\u1561\x03\x02\x02\x02" +
		"\u1561\u1564\x03\x02\x02\x02\u1562\u1560\x03\x02\x02\x02\u1563\u155C\x03" +
		"\x02\x02\x02\u1563\u1564\x03\x02\x02\x02\u1564\u03CB\x03\x02\x02\x02\u1565" +
		"\u1567\x07\x86\x02\x02\u1566\u1568\x073\x02\x02\u1567\u1566\x03\x02\x02" +
		"\x02\u1567\u1568\x03\x02\x02\x02\u1568\u156A\x03\x02\x02\x02\u1569\u156B" +
		"\x07\v\x02\x02\u156A\u1569\x03\x02\x02\x02\u156A\u156B\x03\x02\x02\x02" +
		"\u156B\u156E\x03\x02\x02\x02\u156C\u156F\x05\u0434\u021B\x02\u156D\u156F" +
		"\x05\u0496\u024C\x02\u156E\u156C\x03\x02\x02\x02\u156E\u156D\x03\x02\x02" +
		"\x02\u156F\u03CD\x03\x02\x02\x02\u1570\u1572\x07\u014B\x02\x02\u1571\u1573" +
		"\x07\v\x02\x02\u1572\u1571\x03\x02\x02\x02\u1572\u1573\x03\x02\x02\x02" +
		"\u1573\u1576\x03\x02\x02\x02\u1574\u1577\x05\u0434\u021B\x02\u1575\u1577" +
		"\x05\u0496\u024C\x02\u1576\u1574\x03\x02\x02\x02\u1576\u1575\x03\x02\x02" +
		"\x02\u1577\u03CF\x03\x02\x02\x02\u1578\u157A\x07\xFD\x02\x02\u1579\u157B" +
		"\x05\u03D2\u01EA\x02\u157A\u1579\x03\x02\x02\x02\u157B\u157C\x03\x02\x02" +
		"\x02\u157C\u157A\x03\x02\x02\x02\u157C\u157D\x03\x02\x02\x02\u157D\u03D1" +
		"\x03\x02\x02\x02\u157E\u1580\x05\u0434\u021B\x02\u157F\u1581\x05\u03D4" +
		"\u01EB\x02\u1580\u157F\x03\x02\x02\x02\u1580\u1581\x03\x02\x02\x02\u1581" +
		"\u1583\x03\x02\x02\x02\u1582\u1584\x05\u03D6\u01EC\x02\u1583\u1582\x03" +
		"\x02\x02\x02\u1583\u1584\x03\x02\x02\x02\u1584\u03D3\x03\x02\x02\x02\u1585" +
		"\u1587\x07\x87\x02\x02\u1586\u1588\x07\xF1\x02\x02\u1587\u1586\x03\x02" +
		"\x02\x02\u1587\u1588\x03\x02\x02\x02\u1588\u1589\x03\x02\x02\x02\u1589" +
		"\u158A\x05\u0434\u021B\x02\u158A\u03D5\x03\x02\x02\x02\u158B\u158D\x07" +
		"k\x02\x02\u158C\u158E\x07\xF1\x02\x02\u158D\u158C\x03\x02\x02\x02\u158D" +
		"\u158E\x03\x02\x02\x02\u158E\u158F\x03\x02\x02\x02\u158F\u1590\x05\u0434" +
		"\u021B\x02\u1590\u03D7\x03\x02\x02\x02\u1591\u1593\x07\u0204\x02\x02\u1592" +
		"\u1591\x03\x02\x02\x02\u1592\u1593\x03\x02\x02\x02\u1593\u1594\x03\x02" +
		"\x02\x02\u1594\u1595\x07\u015F\x02\x02\u1595\u1596\x05\u0444\u0223\x02" +
		"\u1596\u03D9\x03\x02\x02\x02\u1597\u1599\x07\u01DA\x02\x02\u1598\u159A" +
		"\x07\xF1\x02\x02\u1599\u1598\x03\x02\x02\x02\u1599\u159A\x03\x02\x02\x02" +
		"\u159A\u159B\x03\x02\x02\x02\u159B\u159C\x05\u0444\u0223\x02\u159C\u03DB" +
		"\x03\x02\x02\x02\u159D\u15A0\x07\u01FB\x02\x02\u159E\u15A1\x05\u03DE\u01F0" +
		"\x02\u159F\u15A1\x05\u03E2\u01F2\x02\u15A0\u159E\x03\x02\x02\x02\u15A0" +
		"\u159F\x03\x02\x02\x02\u15A1\u03DD\x03\x02\x02\x02\u15A2\u15A4\x07\xE1" +
		"\x02\x02\u15A3\u15A2\x03\x02\x02\x02\u15A3\u15A4\x03\x02\x02\x02\u15A4" +
		"\u15A5\x03\x02\x02\x02\u15A5\u15A7\x07\t\x02\x02\u15A6\u15A8\x07\u01C7" +
		"\x02\x02\u15A7\u15A6\x03\x02\x02\x02\u15A7\u15A8\x03\x02\x02\x02\u15A8" +
		"\u15A9\x03\x02\x02\x02\u15A9\u15AA\t>\x02\x02\u15AA\u15AC\x07\u0166\x02" +
		"\x02\u15AB\u15AD\x07\u0148\x02\x02\u15AC\u15AB\x03\x02\x02\x02\u15AC\u15AD" +
		"\x03\x02\x02\x02\u15AD\u15AE\x03\x02\x02\x02\u15AE\u15AF\x05\u03E0\u01F1" +
		"\x02\u15AF\u03DF\x03\x02\x02\x02\u15B0\u15BA\x07\xF8\x02\x02\u15B1\u15BA" +
		"\x07\u0150\x02\x02\u15B2\u15BA\x07\xEA\x02\x02\u15B3\u15BA\x07\xCB\x02" +
		"\x02\u15B4\u15B6\x05\u0470\u0239\x02\u15B5\u15B4\x03\x02\x02\x02\u15B6" +
		"\u15B7\x03\x02\x02\x02\u15B7\u15B5\x03\x02\x02\x02\u15B7\u15B8\x03\x02" +
		"\x02\x02\u15B8\u15BA\x03\x02\x02\x02\u15B9\u15B0\x03\x02\x02\x02\u15B9" +
		"\u15B1\x03\x02\x02\x02\u15B9\u15B2\x03\x02\x02\x02\u15B9\u15B3\x03\x02" +
		"\x02\x02\u15B9\u15B5\x03\x02\x02\x02\u15BA\u03E1\x03\x02\x02\x02\u15BB" +
		"\u15BD\x07\xD6\x02\x02\u15BC\u15BB\x03\x02\x02\x02\u15BC\u15BD\x03\x02" +
		"\x02\x02\u15BD\u15BE\x03\x02\x02\x02\u15BE\u15C0\x07\x7F\x02\x02\u15BF" +
		"\u15C1\x07\u0148\x02\x02\u15C0\u15BF\x03\x02\x02\x02\u15C0\u15C1\x03\x02" +
		"\x02\x02\u15C1\u15C3\x03\x02\x02\x02\u15C2\u15C4\x05\u03E4\u01F3\x02\u15C3" +
		"\u15C2\x03\x02\x02\x02\u15C4\u15C5\x03\x02\x02\x02\u15C5\u15C3\x03\x02" +
		"\x02\x02\u15C5\u15C6\x03\x02\x02\x02\u15C6\u03E3\x03\x02\x02\x02\u15C7" +
		"\u15C8\x07\v\x02\x02\u15C8\u15D4\x07\u0168\x02\x02\u15C9\u15CB\x07\v\x02" +
		"\x02\u15CA\u15CC\x07\u0183\x02\x02\u15CB\u15CA\x03\x02\x02\x02\u15CB\u15CC" +
		"\x03\x02\x02\x02\u15CC\u15CE\x03\x02\x02\x02\u15CD\u15CF\x07\u0145\x02" +
		"\x02\u15CE\u15CD\x03\x02\x02\x02\u15CE\u15CF\x03\x02\x02\x02\u15CF\u15D0" +
		"\x03\x02\x02\x02\u15D0\u15D4\x05\u0434\u021B\x02\u15D1\u15D4\x05\u0480" +
		"\u0241\x02\u15D2\u15D4\x05\u0470\u0239\x02\u15D3\u15C7\x03\x02\x02\x02" +
		"\u15D3\u15C9\x03\x02\x02\x02\u15D3\u15D1\x03\x02\x02\x02\u15D3\u15D2\x03" +
		"\x02\x02\x02\u15D4\u03E5\x03\x02\x02\x02\u15D5\u15D6\x07\u0207\x02\x02" +
		"\u15D6\u15D8\x05\u0484\u0243\x02\u15D7\u15D9\x05\u03E8\u01F5\x02\u15D8" +
		"\u15D7\x03\x02\x02\x02\u15D8\u15D9\x03\x02\x02\x02\u15D9\u15DB\x03\x02" +
		"\x02\x02\u15DA\u15DC\x05\u03EA\u01F6\x02\u15DB\u15DA\x03\x02\x02\x02\u15DB" +
		"\u15DC\x03\x02\x02\x02\u15DC\u15DE\x03\x02\x02\x02\u15DD\u15DF\x05\u03F2" +
		"\u01FA\x02\u15DE\u15DD\x03\x02\x02\x02\u15DE\u15DF\x03\x02\x02\x02\u15DF" +
		"\u15E1\x03\x02\x02\x02\u15E0\u15E2\x05\u03F4\u01FB\x02\u15E1\u15E0\x03" +
		"\x02\x02\x02\u15E1\u15E2\x03\x02\x02\x02\u15E2\u15E4\x03\x02\x02\x02\u15E3" +
		"\u15E5\x05\u03FA\u01FE\x02\u15E4\u15E3\x03\x02\x02\x02\u15E4\u15E5\x03" +
		"\x02\x02\x02\u15E5\u15E7\x03\x02\x02\x02\u15E6\u15E8\x05\u03FC\u01FF\x02" +
		"\u15E7\u15E6\x03\x02\x02\x02\u15E7\u15E8\x03\x02\x02\x02\u15E8\u15EA\x03" +
		"\x02\x02\x02\u15E9\u15EB\x07\xB5\x02\x02\u15EA\u15E9\x03\x02\x02\x02\u15EA" +
		"\u15EB\x03\x02\x02\x02\u15EB\u03E7\x03\x02\x02\x02\u15EC\u15EF\x07\xD9" +
		"\x02\x02\u15ED\u15F0\x05\u0434\u021B\x02\u15EE\u15F0\x05\u0496\u024C\x02" +
		"\u15EF\u15ED\x03\x02\x02\x02\u15EF\u15EE\x03\x02\x02\x02\u15F0\u03E9\x03" +
		"\x02\x02\x02\u15F1\u15F3\t:\x02\x02\u15F2\u15F4\x07\b\x02\x02\u15F3\u15F2" +
		"\x03\x02\x02\x02\u15F3\u15F4\x03\x02\x02\x02\u15F4\u15F8\x03\x02\x02\x02" +
		"\u15F5\u15F9\x05\u03EC\u01F7\x02\u15F6\u15F9\x05\u03EE\u01F8\x02\u15F7" +
		"\u15F9\x05\u03F0\u01F9\x02\u15F8\u15F5\x03\x02\x02\x02\u15F8\u15F6\x03" +
		"\x02\x02\x02\u15F8\u15F7\x03\x02\x02\x02\u15F9\u03EB\x03\x02\x02\x02\u15FA" +
		"\u15FB\x07\u0156\x02\x02\u15FB\u03ED\x03\x02\x02\x02\u15FC\u15FF\x05\u0434" +
		"\u021B\x02\u15FD\u15FF\x05\u0496\u024C\x02\u15FE\u15FC\x03\x02\x02\x02" +
		"\u15FE\u15FD\x03\x02\x02\x02\u15FF\u1601\x03\x02\x02\x02\u1600\u1602\t" +
		"#\x02\x02\u1601\u1600\x03\x02\x02\x02\u1601\u1602\x03\x02\x02\x02\u1602" +
		"\u03EF\x03\x02\x02\x02\u1603\u1604\x05\u047C\u023F\x02\u1604\u03F1\x03" +
		"\x02\x02\x02\u1605\u1607\x07 \x02\x02\u1606\u1605\x03\x02\x02\x02\u1606" +
		"\u1607\x03\x02\x02\x02\u1607\u1608\x03\x02\x02\x02\u1608\u160C\t?\x02" +
		"\x02\u1609\u160B\x05\u021A\u010E\x02\u160A\u1609\x03\x02\x02\x02\u160B" +
		"\u160E\x03\x02\x02\x02\u160C\u160A\x03\x02\x02\x02\u160C\u160D\x03\x02" +
		"\x02\x02\u160D\u03F3\x03\x02\x02\x02\u160E\u160C\x03\x02\x02\x02\u160F" +
		"\u1611\x07\u013A\x02\x02\u1610\u1612\x07 \x02\x02\u1611\u1610\x03\x02" +
		"\x02\x02\u1611\u1612\x03\x02\x02\x02\u1612\u1613\x03\x02\x02\x02\u1613" +
		"\u1617\t?\x02\x02\u1614\u1616\x05\u021A\u010E\x02\u1615\u1614\x03\x02" +
		"\x02\x02\u1616\u1619\x03\x02\x02\x02\u1617\u1615\x03\x02\x02\x02\u1617" +
		"\u1618\x03\x02\x02\x02\u1618\u03F5\x03\x02\x02\x02\u1619\u1617\x03\x02" +
		"\x02\x02\u161A\u161C\x07 \x02\x02\u161B\u161A\x03\x02\x02\x02\u161B\u161C" +
		"\x03\x02\x02\x02\u161C\u161D\x03\x02\x02\x02\u161D\u1621\x07\xA0\x02\x02" +
		"\u161E\u1620\x05\u021A\u010E\x02\u161F\u161E\x03\x02\x02\x02\u1620\u1623" +
		"\x03\x02\x02\x02\u1621\u161F\x03\x02\x02\x02\u1621\u1622\x03\x02\x02\x02" +
		"\u1622\u03F7\x03\x02\x02\x02\u1623\u1621\x03\x02\x02\x02\u1624\u1626\x07" +
		"\u013A\x02\x02\u1625\u1627\x07 \x02\x02\u1626\u1625\x03\x02\x02\x02\u1626" +
		"\u1627\x03\x02\x02\x02\u1627\u1628\x03\x02\x02\x02\u1628\u162C\x07\xA0" +
		"\x02\x02\u1629\u162B\x05\u021A\u010E\x02\u162A\u1629\x03\x02\x02\x02\u162B" +
		"\u162E\x03\x02\x02\x02\u162C\u162A\x03\x02\x02\x02\u162C\u162D\x03\x02" +
		"\x02\x02\u162D\u03F9\x03\x02\x02\x02\u162E\u162C\x03\x02\x02\x02\u162F" +
		"\u1631\x07\xFE\x02\x02\u1630\u1632\x07\u0105\x02\x02\u1631\u1630\x03\x02" +
		"\x02\x02\u1631\u1632\x03\x02\x02\x02\u1632\u1636\x03\x02\x02\x02\u1633" +
		"\u1635\x05\u021A\u010E\x02\u1634\u1633\x03\x02\x02\x02\u1635\u1638\x03" +
		"\x02\x02\x02\u1636\u1634\x03\x02\x02\x02\u1636\u1637\x03\x02\x02\x02\u1637" +
		"\u03FB\x03\x02\x02\x02\u1638\u1636\x03\x02\x02\x02\u1639\u163A\x07\u013A" +
		"\x02\x02\u163A\u163C\x07\xFE\x02\x02\u163B\u163D\x07\u0105\x02\x02\u163C" +
		"\u163B\x03\x02\x02\x02\u163C\u163D\x03\x02\x02\x02\u163D\u1641\x03\x02" +
		"\x02\x02\u163E\u1640\x05\u021A\u010E\x02\u163F\u163E\x03\x02\x02\x02\u1640" +
		"\u1643\x03\x02\x02\x02\u1641\u163F\x03\x02\x02\x02\u1641\u1642\x03\x02" +
		"\x02\x02\u1642\u03FD\x03\x02\x02\x02\u1643\u1641\x03\x02\x02\x02\u1644" +
		"\u1646\x07\u0148\x02\x02\u1645\u1644\x03\x02\x02\x02\u1645\u1646\x03\x02" +
		"\x02\x02\u1646\u1647\x03\x02\x02\x02\u1647\u164B\x07\u0151\x02\x02\u1648" +
		"\u164A\x05\u021A\u010E\x02\u1649\u1648\x03\x02\x02\x02\u164A\u164D\x03" +
		"\x02\x02\x02\u164B\u1649\x03\x02\x02\x02\u164B\u164C\x03\x02\x02\x02\u164C" +
		"\u03FF\x03\x02\x02\x02\u164D\u164B\x03\x02\x02\x02\u164E\u1650\x07\u013A" +
		"\x02\x02\u164F\u1651\x07\u0148\x02\x02\u1650\u164F\x03\x02\x02\x02\u1650" +
		"\u1651\x03\x02\x02\x02\u1651\u1652\x03\x02\x02\x02\u1652\u1656\x07\u0151" +
		"\x02\x02\u1653\u1655\x05\u021A\u010E\x02\u1654\u1653\x03\x02\x02\x02\u1655" +
		"\u1658\x03\x02\x02\x02\u1656\u1654\x03\x02\x02\x02\u1656\u1657\x03\x02" +
		"\x02\x02\u1657\u0401\x03\x02\x02\x02\u1658\u1656\x03\x02\x02\x02\u1659" +
		"\u165B\x07\u0148\x02\x02\u165A\u1659\x03\x02\x02\x02\u165A\u165B\x03\x02" +
		"\x02\x02\u165B\u165C\x03\x02\x02\x02\u165C\u165D\x07\u01B9\x02\x02\u165D" +
		"\u1661\x07\xBE\x02\x02\u165E\u1660\x05\u021A\u010E\x02\u165F\u165E\x03" +
		"\x02\x02\x02\u1660\u1663\x03\x02\x02\x02\u1661\u165F\x03\x02\x02\x02\u1661" +
		"\u1662\x03\x02\x02\x02\u1662\u0403\x03\x02\x02\x02\u1663\u1661\x03\x02" +
		"\x02\x02\u1664\u1666\x07\u013A\x02\x02\u1665\u1667\x07\u0148\x02\x02\u1666" +
		"\u1665\x03\x02\x02\x02\u1666\u1667\x03\x02\x02\x02\u1667\u1668\x03\x02" +
		"\x02\x02\u1668\u1669\x07\u01B9\x02\x02\u1669\u166D\x07\xBE\x02\x02\u166A" +
		"\u166C\x05\u021A\u010E\x02\u166B\u166A\x03\x02\x02\x02\u166C\u166F\x03" +
		"\x02\x02\x02\u166D\u166B\x03\x02\x02\x02\u166D\u166E\x03\x02\x02\x02\u166E" +
		"\u0405\x03\x02\x02\x02\u166F\u166D\x03\x02\x02\x02\u1670\u1672\x07\u0148" +
		"\x02\x02\u1671\u1670\x03\x02\x02\x02\u1671\u1672\x03\x02\x02\x02\u1672" +
		"\u1673\x03\x02\x02\x02\u1673\u1677\x07\xC6\x02\x02\u1674\u1676\x05\u021A" +
		"\u010E\x02\u1675\u1674\x03\x02\x02\x02\u1676\u1679\x03\x02\x02\x02\u1677" +
		"\u1675\x03\x02\x02\x02\u1677\u1678\x03\x02\x02\x02\u1678\u0407\x03\x02" +
		"\x02\x02\u1679\u1677\x03\x02\x02\x02\u167A\u167C\x07\u013A\x02\x02\u167B" +
		"\u167D\x07\u0148\x02\x02\u167C\u167B\x03\x02\x02\x02\u167C\u167D\x03\x02" +
		"\x02\x02\u167D\u167E\x03\x02\x02\x02\u167E\u1682\x07\xC6\x02\x02\u167F" +
		"\u1681\x05\u021A\u010E\x02\u1680\u167F\x03\x02\x02\x02\u1681\u1684\x03" +
		"\x02\x02\x02\u1682\u1680\x03\x02\x02\x02\u1682\u1683\x03\x02\x02\x02\u1683" +
		"\u0409\x03\x02\x02\x02\u1684\u1682\x03\x02\x02\x02\u1685\u1689\x05\u040E" +
		"\u0208\x02\u1686\u1688\x05\u040C\u0207\x02\u1687\u1686\x03\x02\x02\x02" +
		"\u1688\u168B\x03\x02\x02\x02\u1689\u1687\x03\x02\x02\x02\u1689\u168A\x03" +
		"\x02\x02\x02\u168A\u040B\x03\x02\x02\x02\u168B\u1689\x03\x02\x02\x02\u168C" +
		"\u168D\t@\x02\x02\u168D\u168E\x05\u040E\u0208\x02\u168E\u040D\x03\x02" +
		"\x02\x02\u168F\u1693\x05\u0412\u020A\x02\u1690\u1692\x05\u0410\u0209\x02" +
		"\u1691\u1690\x03\x02\x02\x02\u1692\u1695\x03\x02\x02\x02\u1693\u1691\x03" +
		"\x02\x02\x02\u1693\u1694\x03\x02\x02\x02\u1694\u040F\x03\x02\x02\x02\u1695" +
		"\u1693\x03\x02\x02\x02\u1696\u1697\tA\x02\x02\u1697\u1698\x05\u0412\u020A" +
		"\x02\u1698\u0411\x03\x02\x02\x02\u1699\u169B\t@\x02\x02\u169A\u1699\x03" +
		"\x02\x02\x02\u169A\u169B\x03\x02\x02\x02\u169B\u169C\x03\x02\x02\x02\u169C" +
		"\u16A0\x05\u0416\u020C\x02\u169D\u169F\x05\u0414\u020B\x02\u169E\u169D" +
		"\x03\x02\x02\x02\u169F\u16A2\x03\x02\x02\x02\u16A0\u169E\x03\x02\x02\x02" +
		"\u16A0\u16A1\x03\x02\x02\x02\u16A1\u0413\x03\x02\x02\x02\u16A2\u16A0\x03" +
		"\x02\x02\x02\u16A3\u16A4\x07\u0211\x02\x02\u16A4\u16A5\x05\u0416\u020C" +
		"\x02\u16A5\u0415\x03\x02\x02\x02\u16A6\u16A7\x07\u0220\x02\x02\u16A7\u16A8" +
		"\x05\u040A\u0206\x02\u16A8\u16A9\x07\u0227\x02\x02\u16A9\u16AD\x03\x02" +
		"\x02\x02\u16AA\u16AD\x05\u0434\u021B\x02\u16AB\u16AD\x05\u0496\u024C\x02" +
		"\u16AC\u16A6\x03\x02\x02\x02\u16AC\u16AA\x03\x02\x02\x02\u16AC\u16AB\x03" +
		"\x02\x02\x02\u16AD\u0417\x03\x02\x02\x02\u16AE\u16B2\x05\u041C\u020F\x02" +
		"\u16AF\u16B1\x05\u041A\u020E\x02\u16B0\u16AF\x03\x02\x02\x02\u16B1\u16B4" +
		"\x03\x02\x02\x02\u16B2\u16B0\x03\x02\x02\x02\u16B2\u16B3\x03\x02\x02\x02" +
		"\u16B3\u0419\x03\x02\x02\x02\u16B4\u16B2\x03\x02\x02\x02\u16B5\u16BC\t" +
		"B\x02\x02\u16B6\u16BD\x05\u041C\u020F\x02\u16B7\u16B9\x05\u0432\u021A" +
		"\x02\u16B8\u16B7\x03\x02\x02\x02\u16B9\u16BA\x03\x02\x02\x02\u16BA\u16B8" +
		"\x03\x02\x02\x02\u16BA\u16BB\x03\x02\x02\x02\u16BB\u16BD\x03\x02\x02\x02" +
		"\u16BC\u16B6\x03\x02\x02\x02\u16BC\u16B8\x03\x02\x02\x02\u16BD\u041B\x03" +
		"\x02\x02\x02\u16BE\u16C0\x07\u013A\x02\x02\u16BF\u16BE\x03\x02\x02\x02" +
		"\u16BF\u16C0\x03\x02\x02\x02\u16C0\u16C1\x03\x02\x02\x02\u16C1\u16C2\x05" +
		"\u041E\u0210\x02\u16C2\u041D\x03\x02\x02\x02\u16C3\u16C4\x07\u0220\x02" +
		"\x02\u16C4\u16C5\x05\u0418\u020D\x02\u16C5\u16C6\x07\u0227\x02\x02\u16C6" +
		"\u16CB\x03\x02\x02\x02\u16C7\u16CB\x05\u0426\u0214\x02\u16C8\u16CB\x05" +
		"\u0420\u0211\x02\u16C9\u16CB\x05\u0422\u0212\x02\u16CA\u16C3\x03\x02\x02" +
		"\x02\u16CA\u16C7\x03\x02\x02\x02\u16CA\u16C8\x03\x02\x02\x02\u16CA\u16C9" +
		"\x03\x02\x02\x02\u16CB\u041F\x03\x02\x02\x02\u16CC\u16CE\x05\u0434\u021B" +
		"\x02\u16CD\u16CF\x07\u0100\x02\x02\u16CE\u16CD\x03\x02\x02\x02\u16CE\u16CF" +
		"\x03\x02\x02\x02\u16CF\u16D1\x03\x02\x02\x02\u16D0\u16D2\x07\u013A\x02" +
		"\x02\u16D1\u16D0\x03\x02\x02\x02\u16D1\u16D2\x03\x02\x02\x02\u16D2\u16DA" +
		"\x03\x02\x02\x02\u16D3\u16DB\x07\u013E\x02\x02\u16D4\u16DB\x07\r\x02\x02" +
		"\u16D5\u16DB\x07\x0E\x02\x02\u16D6\u16DB\x07\x0F\x02\x02\u16D7\u16DB\x07" +
		"v\x02\x02\u16D8\u16DB\x07\u0103\x02\x02\u16D9\u16DB\x05\u0464\u0233\x02" +
		"\u16DA\u16D3\x03\x02\x02\x02\u16DA\u16D4\x03\x02\x02\x02\u16DA\u16D5\x03" +
		"\x02\x02\x02\u16DA\u16D6\x03\x02\x02\x02\u16DA\u16D7\x03\x02\x02\x02\u16DA" +
		"\u16D8\x03\x02\x02\x02\u16DA\u16D9\x03\x02\x02\x02\u16DB\u0421\x03\x02" +
		"\x02\x02\u16DC\u16F2\x05\u0468\u0235\x02\u16DD\u16DF\x05\u0450\u0229\x02" +
		"\u16DE\u16DD\x03\x02\x02\x02\u16DF\u16E2\x03\x02\x02\x02\u16E0\u16DE\x03" +
		"\x02\x02\x02\u16E0\u16E1\x03\x02\x02\x02\u16E1\u16E4\x03\x02\x02\x02\u16E2" +
		"\u16E0\x03\x02\x02\x02\u16E3\u16E5\x05\u0452\u022A\x02\u16E4\u16E3\x03" +
		"\x02\x02\x02\u16E4\u16E5\x03\x02\x02\x02\u16E5\u16E9\x03\x02\x02\x02\u16E6" +
		"\u16E8\x05\u0424\u0213\x02\u16E7\u16E6\x03\x02\x02\x02\u16E8\u16EB\x03" +
		"\x02\x02\x02\u16E9\u16E7\x03\x02\x02\x02\u16E9\u16EA\x03\x02\x02\x02\u16EA" +
		"\u16F3\x03\x02\x02\x02\u16EB\u16E9\x03\x02\x02\x02\u16EC\u16EE\x05\u0454" +
		"\u022B\x02\u16ED\u16EC\x03\x02\x02\x02\u16EE\u16F1\x03\x02\x02\x02\u16EF" +
		"\u16ED\x03\x02\x02\x02\u16EF\u16F0\x03\x02\x02\x02\u16F0\u16F3\x03\x02" +
		"\x02\x02\u16F1\u16EF\x03\x02\x02\x02\u16F2\u16E0\x03\x02\x02\x02\u16F2" +
		"\u16EF\x03\x02\x02\x02\u16F3\u0423\x03\x02\x02\x02\u16F4\u16F5\x07\u0220" +
		"\x02\x02\u16F5\u16FC\x05\u0440\u0221\x02\u16F6\u16F8\x07\u0213\x02\x02" +
		"\u16F7\u16F6\x03\x02\x02\x02\u16F7\u16F8\x03\x02\x02\x02\u16F8\u16F9\x03" +
		"\x02\x02\x02\u16F9\u16FB\x05\u0440\u0221\x02\u16FA\u16F7\x03\x02\x02\x02" +
		"\u16FB\u16FE\x03\x02\x02\x02\u16FC\u16FA\x03\x02\x02\x02\u16FC\u16FD\x03" +
		"\x02\x02\x02\u16FD\u16FF\x03\x02\x02\x02\u16FE\u16FC\x03\x02\x02\x02\u16FF" +
		"\u1700\x07\u0227\x02\x02\u1700\u0425\x03\x02\x02\x02\u1701\u1705\x05\u0428" +
		"\u0215\x02\u1702\u1705\x05\u042A\u0216\x02\u1703\u1705\x05\u042C\u0217" +
		"\x02\u1704\u1701\x03\x02\x02\x02\u1704\u1702\x03\x02\x02\x02\u1704\u1703" +
		"\x03\x02\x02\x02\u1705\u0427\x03\x02\x02\x02\u1706\u1708\x05\u040A\u0206" +
		"\x02\u1707\u1709\x07\u0100\x02\x02\u1708\u1707\x03\x02\x02\x02\u1708\u1709" +
		"\x03\x02\x02\x02\u1709\u170B\x03\x02\x02\x02\u170A\u170C\x07\u013A\x02" +
		"\x02\u170B\u170A\x03\x02\x02\x02\u170B\u170C\x03\x02\x02\x02\u170C\u170D" +
		"\x03\x02\x02\x02\u170D\u170E\tC\x02\x02\u170E\u0429\x03\x02\x02\x02\u170F" +
		"\u1710\x05\u040A\u0206\x02\u1710\u1711\x05\u0430\u0219\x02\u1711\u1712" +
		"\x05\u040A\u0206\x02\u1712\u042B\x03\x02\x02\x02\u1713\u1714\x05\u040A" +
		"\u0206\x02\u1714\u1715\x05\u0430\u0219\x02\u1715\u1716\x07\u0220\x02\x02" +
		"\u1716\u1717\x05\u042E\u0218\x02\u1717\u1718\x07\u0227\x02\x02\u1718\u042D" +
		"\x03\x02\x02\x02\u1719\u171C\x05\u040A\u0206\x02\u171A\u171B\tB\x02\x02" +
		"\u171B\u171D\x05\u040A\u0206\x02\u171C\u171A\x03\x02\x02\x02\u171D\u171E" +
		"\x03\x02\x02\x02\u171E\u171C\x03\x02\x02\x02\u171E\u171F\x03\x02\x02\x02" +
		"\u171F\u042F\x03\x02\x02\x02\u1720\u1722\t\n\x02\x02\u1721\u1720\x03\x02" +
		"\x02\x02\u1721\u1722\x03\x02\x02\x02\u1722\u174C\x03\x02\x02\x02\u1723" +
		"\u1725\x07\u013A\x02";
	private static readonly _serializedATNSegment11: string =
		"\x02\u1724\u1723\x03\x02\x02\x02\u1724\u1725\x03\x02\x02\x02\u1725\u1735" +
		"\x03\x02\x02\x02\u1726\u1728\x07\xE3\x02\x02\u1727\u1729\x07\u01E1\x02" +
		"\x02\u1728\u1727\x03\x02\x02\x02\u1728\u1729\x03\x02\x02\x02\u1729\u1736" +
		"\x03\x02\x02\x02\u172A\u1736\x07\u0222\x02\x02\u172B\u172D\x07\u0111\x02" +
		"\x02\u172C\u172E\x07\u01E1\x02\x02\u172D\u172C\x03\x02\x02\x02\u172D\u172E" +
		"\x03\x02\x02\x02\u172E\u1736\x03\x02\x02\x02\u172F\u1736\x07\u021E\x02" +
		"\x02\u1730\u1732\x07\xBC\x02\x02\u1731\u1733\x07\u01EB\x02\x02\u1732\u1731" +
		"\x03\x02\x02\x02\u1732\u1733\x03\x02\x02\x02\u1733\u1736\x03\x02\x02\x02" +
		"\u1734\u1736\x07\u021A\x02\x02\u1735\u1726\x03\x02\x02\x02\u1735\u172A" +
		"\x03\x02\x02\x02\u1735\u172B\x03\x02\x02\x02\u1735\u172F\x03\x02\x02\x02" +
		"\u1735\u1730\x03\x02\x02\x02\u1735\u1734\x03\x02\x02\x02\u1736\u174D\x03" +
		"\x02\x02\x02\u1737\u174D\x07\u0224\x02\x02\u1738\u173A\x07\xE3\x02\x02" +
		"\u1739\u173B\x07\u01E1\x02\x02\u173A\u1739\x03\x02\x02\x02\u173A\u173B" +
		"\x03\x02\x02\x02\u173B\u173C\x03\x02\x02\x02\u173C\u173D\x07\u014B\x02" +
		"\x02\u173D\u173F\x07\xBC\x02\x02\u173E\u1740\x07\u01EB\x02\x02\u173F\u173E" +
		"\x03\x02\x02\x02\u173F\u1740\x03\x02\x02\x02\u1740\u174D\x03\x02\x02\x02" +
		"\u1741\u174D\x07\u0223\x02\x02\u1742\u1744\x07\u0111\x02\x02\u1743\u1745" +
		"\x07\u01E1\x02\x02\u1744\u1743\x03\x02\x02\x02\u1744\u1745\x03\x02\x02" +
		"\x02\u1745\u1746\x03\x02\x02\x02\u1746\u1747\x07\u014B\x02\x02\u1747\u1749" +
		"\x07\xBC\x02\x02\u1748\u174A\x07\u01EB\x02\x02\u1749\u1748\x03\x02\x02" +
		"\x02\u1749\u174A\x03\x02\x02\x02\u174A\u174D\x03\x02\x02\x02\u174B\u174D" +
		"\x07\u021F\x02\x02\u174C\u1724\x03\x02\x02\x02\u174C\u1737\x03\x02\x02" +
		"\x02\u174C\u1738\x03\x02\x02\x02\u174C\u1741\x03\x02\x02\x02\u174C\u1742" +
		"\x03\x02\x02\x02\u174C\u174B\x03\x02\x02\x02\u174D\u0431\x03\x02\x02\x02" +
		"\u174E\u1750\x07\u013A\x02\x02\u174F\u174E\x03\x02\x02\x02\u174F\u1750" +
		"\x03\x02\x02\x02\u1750\u1752\x03\x02\x02\x02\u1751\u1753\x05\u0430\u0219" +
		"\x02\u1752\u1751\x03\x02\x02\x02\u1752\u1753\x03\x02\x02\x02\u1753\u175A" +
		"\x03\x02\x02\x02\u1754\u175B\x05\u040A\u0206\x02\u1755\u1756\x07\u0220" +
		"\x02\x02\u1756\u1757\x05\u040A\u0206\x02\u1757\u1758\x05\u0432\u021A\x02" +
		"\u1758\u1759\x07\u0227\x02\x02\u1759\u175B\x03\x02\x02\x02\u175A\u1754" +
		"\x03\x02\x02\x02\u175A\u1755\x03\x02\x02\x02\u175B\u0433\x03\x02\x02\x02" +
		"\u175C\u1761\x05\u0444\u0223\x02\u175D\u1761\x05\u0436\u021C\x02\u175E" +
		"\u1761\x05\u0438\u021D\x02\u175F\u1761\x05\u04A4\u0253\x02\u1760\u175C" +
		"\x03\x02\x02\x02\u1760\u175D\x03\x02\x02\x02\u1760\u175E\x03\x02\x02\x02" +
		"\u1760\u175F\x03\x02\x02\x02\u1761\u0435\x03\x02\x02\x02\u1762\u1772\x05" +
		"\u0444\u0223\x02\u1763\u1764\x07\u0220\x02\x02\u1764\u176B\x05\u0440\u0221" +
		"\x02\u1765\u1767\x07\u0213\x02\x02\u1766\u1765\x03\x02\x02\x02\u1766\u1767" +
		"\x03\x02\x02\x02\u1767\u1768\x03\x02\x02\x02\u1768\u176A\x05\u0440\u0221" +
		"\x02\u1769\u1766\x03\x02\x02\x02\u176A\u176D\x03\x02\x02\x02\u176B\u1769" +
		"\x03\x02\x02\x02\u176B\u176C\x03\x02\x02\x02\u176C\u176E\x03\x02\x02\x02" +
		"\u176D\u176B\x03\x02\x02\x02\u176E\u176F\x07\u0227\x02\x02\u176F\u1771" +
		"\x03\x02\x02\x02\u1770\u1763\x03\x02\x02\x02\u1771\u1774\x03\x02\x02\x02" +
		"\u1772\u1770\x03\x02\x02\x02\u1772\u1773\x03\x02\x02\x02\u1773\u1776\x03" +
		"\x02\x02\x02\u1774\u1772\x03\x02\x02\x02\u1775\u1777\x05\u043A\u021E\x02" +
		"\u1776\u1775\x03\x02\x02\x02\u1776\u1777\x03\x02\x02\x02\u1777\u0437\x03" +
		"\x02\x02\x02\u1778\u1779\x07\xDB\x02\x02\u1779\u1789\x05\u0472\u023A\x02" +
		"\u177A\u177B\x07\u0220\x02\x02\u177B\u1782\x05\u0442\u0222\x02\u177C\u177E" +
		"\x07\u0213\x02\x02\u177D\u177C\x03\x02\x02\x02\u177D\u177E\x03\x02\x02" +
		"\x02\u177E\u177F\x03\x02\x02\x02\u177F\u1781\x05\u0442\u0222\x02\u1780" +
		"\u177D\x03\x02\x02\x02\u1781\u1784\x03\x02\x02\x02\u1782\u1780\x03\x02" +
		"\x02\x02\u1782\u1783\x03\x02\x02\x02\u1783\u1785\x03\x02\x02\x02\u1784" +
		"\u1782\x03\x02\x02\x02\u1785\u1786\x07\u0227\x02\x02\u1786\u1788\x03\x02" +
		"\x02\x02\u1787\u177A\x03\x02\x02\x02\u1788\u178B\x03\x02\x02\x02\u1789" +
		"\u1787\x03\x02\x02\x02\u1789\u178A\x03\x02\x02\x02\u178A\u178D\x03\x02" +
		"\x02\x02\u178B\u1789\x03\x02\x02\x02\u178C\u178E\x05\u043A\u021E\x02\u178D" +
		"\u178C\x03\x02\x02\x02\u178D\u178E\x03\x02\x02\x02\u178E\u0439\x03\x02" +
		"\x02\x02\u178F\u1790\x07\u0220\x02\x02\u1790\u1791\x05\u043C\u021F\x02" +
		"\u1791\u1793\x07\u0212\x02\x02\u1792\u1794\x05\u043E\u0220\x02\u1793\u1792" +
		"\x03\x02\x02\x02\u1793\u1794\x03\x02\x02\x02\u1794\u1795\x03\x02\x02\x02" +
		"\u1795\u1796\x07\u0227\x02\x02\u1796\u043B\x03\x02\x02\x02\u1797\u1798" +
		"\x05\u040A\u0206\x02\u1798\u043D\x03\x02\x02\x02\u1799\u179A\x05\u040A" +
		"\u0206\x02\u179A\u043F\x03\x02\x02\x02\u179B\u17A7\x07\v\x02\x02\u179C" +
		"\u17A7\x05\u049C\u024F\x02\u179D\u179F\x05\u0444\u0223\x02\u179E\u17A0" +
		"\x05\u049C\u024F\x02\u179F\u179E\x03\x02\x02\x02\u179F\u17A0\x03\x02\x02" +
		"\x02\u17A0\u17A7\x03\x02\x02\x02\u17A1\u17A3\x05\u0474\u023B\x02\u17A2" +
		"\u17A4\x05\u049C\u024F\x02\u17A3\u17A2\x03\x02\x02\x02\u17A3\u17A4\x03" +
		"\x02\x02\x02\u17A4\u17A7\x03\x02\x02\x02\u17A5\u17A7\x05\u040A\u0206\x02" +
		"\u17A6\u179B\x03\x02\x02\x02\u17A6\u179C\x03\x02\x02\x02\u17A6\u179D\x03" +
		"\x02\x02\x02\u17A6\u17A1\x03\x02\x02\x02\u17A6\u17A5\x03\x02\x02\x02\u17A7" +
		"\u0441\x03\x02\x02\x02\u17A8\u17B4\x05\u0496\u024C\x02\u17A9\u17B4\x05" +
		"\u0434\u021B\x02\u17AA\u17AC\x05\u0444\u0223\x02\u17AB\u17AD\x05\u049C" +
		"\u024F\x02\u17AC\u17AB\x03\x02\x02\x02\u17AC\u17AD\x03\x02\x02\x02\u17AD" +
		"\u17B4\x03\x02\x02\x02\u17AE\u17B0\x05\u0474\u023B\x02\u17AF\u17B1\x05" +
		"\u049C\u024F\x02\u17B0\u17AF\x03\x02\x02\x02\u17B0\u17B1\x03\x02\x02\x02" +
		"\u17B1\u17B4\x03\x02\x02\x02\u17B2\u17B4\x05\u040A\u0206\x02\u17B3\u17A8" +
		"\x03\x02\x02\x02\u17B3\u17A9\x03\x02\x02\x02\u17B3\u17AA\x03\x02\x02\x02" +
		"\u17B3\u17AE\x03\x02\x02\x02\u17B3\u17B2\x03\x02\x02\x02\u17B4\u0443\x03" +
		"\x02\x02\x02\u17B5\u17BA\x05\u0446\u0224\x02\u17B6\u17BA\x05\u0448\u0225" +
		"\x02\u17B7\u17BA\x05\u044A\u0226\x02\u17B8\u17BA\x05\u044C\u0227\x02\u17B9" +
		"\u17B5\x03\x02\x02\x02\u17B9\u17B6\x03\x02\x02\x02\u17B9\u17B7\x03\x02" +
		"\x02\x02\u17B9\u17B8\x03\x02\x02\x02\u17BA\u0445\x03\x02\x02\x02\u17BB" +
		"\u17BE\x05\u046A\u0236\x02\u17BC\u17BE\x05\u0468\u0235\x02\u17BD\u17BB" +
		"\x03\x02\x02\x02\u17BD\u17BC\x03\x02\x02\x02\u17BE\u17C8\x03\x02\x02\x02" +
		"\u17BF\u17C1\x05\u044E\u0228\x02\u17C0\u17BF\x03\x02\x02\x02\u17C1\u17C2" +
		"\x03\x02\x02\x02\u17C2\u17C0\x03\x02\x02\x02\u17C2\u17C3\x03\x02\x02\x02" +
		"\u17C3\u17C5\x03\x02\x02\x02\u17C4\u17C6\x05\u0452\u022A\x02\u17C5\u17C4" +
		"\x03\x02\x02\x02\u17C5\u17C6\x03\x02\x02\x02\u17C6\u17C9\x03\x02\x02\x02" +
		"\u17C7\u17C9\x05\u0452\u022A\x02\u17C8\u17C0\x03\x02\x02\x02\u17C8\u17C7" +
		"\x03\x02\x02\x02\u17C8\u17C9\x03\x02\x02\x02\u17C9\u0447\x03\x02\x02\x02" +
		"\u17CA\u17CB\x05\u047E\u0240\x02\u17CB\u17CC\x05\u0456\u022C\x02\u17CC" +
		"\u0449\x03\x02\x02\x02\u17CD\u17CE\x05\u0492\u024A\x02\u17CE\u17CF\x05" +
		"\u0458\u022D\x02\u17CF\u044B\x03\x02\x02\x02\u17D0\u17D1\x07\u0118\x02" +
		"\x02\u17D1\u17D2\x05\u0452\u022A\x02\u17D2\u044D\x03\x02\x02\x02\u17D3" +
		"\u17D6\x05\u0450\u0229\x02\u17D4\u17D6\x05\u045A\u022E\x02\u17D5\u17D3" +
		"\x03\x02\x02\x02\u17D5\u17D4\x03\x02\x02\x02\u17D6\u044F\x03\x02\x02\x02" +
		"\u17D7\u17D8\tD\x02\x02\u17D8\u17D9\x05\u046A\u0236\x02\u17D9\u0451\x03" +
		"\x02\x02\x02\u17DA\u17DB\tD\x02\x02\u17DB\u17DC\x05\u0470\u0239\x02\u17DC" +
		"\u0453\x03\x02\x02\x02\u17DD\u17DE\tD\x02\x02\u17DE\u17DF\x05\u047C\u023F" +
		"\x02\u17DF\u0455\x03\x02\x02\x02\u17E0\u17E1\tD\x02\x02\u17E1\u17E2\x05" +
		"\u048C\u0247\x02\u17E2\u0457\x03\x02\x02\x02\u17E3\u17E4\tD\x02\x02\u17E4" +
		"\u17E5\x05\u0478\u023D\x02\u17E5\u0459\x03\x02\x02\x02\u17E6\u17E7\tD" +
		"\x02\x02\u17E7\u17E8\x05\u0436\u021C\x02\u17E8\u045B\x03\x02\x02\x02\u17E9" +
		"\u17EA\x05\u0494\u024B\x02\u17EA\u045D\x03\x02\x02\x02\u17EB\u17EC\x05" +
		"\u048E\u0248\x02\u17EC\u045F\x03\x02\x02\x02\u17ED\u17EE\x05\u0482\u0242" +
		"\x02\u17EE\u0461\x03\x02\x02\x02\u17EF\u17F0\x05\u0494\u024B\x02\u17F0" +
		"\u0463\x03\x02\x02\x02\u17F1\u17F2\x05\u0494\u024B\x02\u17F2\u0465\x03" +
		"\x02\x02\x02\u17F3\u17F4\x05\u048E\u0248\x02\u17F4\u0467\x03\x02\x02\x02" +
		"\u17F5\u17F6\x05\u0494\u024B\x02\u17F6\u0469\x03\x02\x02\x02\u17F7\u17F8" +
		"\x05\u0494\u024B\x02\u17F8\u046B\x03\x02\x02\x02\u17F9\u17FD\x07\xD2\x02" +
		"\x02\u17FA\u17FD\x07n\x02\x02\u17FB\u17FD\x05\u046A\u0236\x02\u17FC\u17F9" +
		"\x03\x02\x02\x02\u17FC\u17FA\x03\x02\x02\x02\u17FC\u17FB\x03\x02\x02\x02" +
		"\u17FD\u046D\x03\x02\x02\x02\u17FE\u17FF\x05\u048E\u0248\x02\u17FF\u046F" +
		"\x03\x02\x02\x02\u1800\u1801\x05\u0494\u024B\x02\u1801\u0471\x03\x02\x02" +
		"\x02\u1802\u1809\x07\xFC\x02\x02\u1803\u1809\x07\u010F\x02\x02\u1804\u1809" +
		"\x07\u0173\x02\x02\u1805\u1809\x07\u01D2\x02\x02\u1806\u1809\x07\u0203" +
		"\x02\x02\u1807\u1809\x05\u0494\u024B\x02\u1808\u1802\x03\x02\x02\x02\u1808" +
		"\u1803\x03\x02\x02\x02\u1808\u1804\x03\x02\x02\x02\u1808\u1805\x03\x02" +
		"\x02\x02\u1808\u1806\x03\x02\x02\x02\u1808\u1807\x03\x02\x02\x02\u1809" +
		"\u0473\x03\x02\x02\x02\u180A\u180B\x05\u0494\u024B\x02\u180B\u0475\x03" +
		"\x02\x02\x02\u180C\u180D\x05\u048E\u0248\x02\u180D\u0477\x03\x02\x02\x02" +
		"\u180E\u180F\x05\u0494\u024B\x02\u180F\u0479\x03\x02\x02\x02\u1810\u1811" +
		"\x05\u0494\u024B\x02\u1811\u047B\x03\x02\x02\x02\u1812\u1813\x05\u0494" +
		"\u024B\x02\u1813\u047D\x03\x02\x02\x02\u1814\u1817\x05\u0494\u024B\x02" +
		"\u1815\u1817\x05\u049C\u024F\x02\u1816\u1814\x03\x02\x02\x02\u1816\u1815" +
		"\x03\x02\x02\x02\u1817\u047F\x03\x02\x02\x02\u1818\u181A\x05\u047E\u0240" +
		"\x02\u1819\u181B\x05\u0456\u022C\x02\u181A\u1819\x03\x02\x02\x02\u181A" +
		"\u181B\x03\x02\x02\x02\u181B\u181E\x03\x02\x02\x02\u181C\u181E\x05\u048C" +
		"\u0247\x02\u181D\u1818\x03\x02\x02\x02\u181D\u181C\x03\x02\x02\x02\u181E" +
		"\u0481\x03\x02\x02\x02\u181F\u1822\x07\u0229\x02\x02\u1820\u1822\x05\u0494" +
		"\u024B\x02\u1821\u181F\x03\x02\x02\x02\u1821\u1820\x03\x02\x02\x02\u1822" +
		"\u0483\x03\x02\x02\x02\u1823\u1824\x05\u0444\u0223\x02\u1824\u0485\x03" +
		"\x02\x02\x02\u1825\u1826\x05\u0444\u0223\x02\u1826\u0487\x03\x02\x02\x02" +
		"\u1827\u1828\x05\u0494\u024B\x02\u1828\u0489\x03\x02\x02\x02\u1829\u182A" +
		"\x05\u0494\u024B\x02\u182A\u048B\x03\x02\x02\x02\u182B\u182E\x05\u0494" +
		"\u024B\x02\u182C\u182E\x05\u049C\u024F\x02\u182D\u182B\x03\x02\x02\x02" +
		"\u182D\u182C\x03\x02\x02\x02\u182E\u048D\x03\x02\x02\x02\u182F\u1830\x05" +
		"\u0494\u024B\x02\u1830\u048F\x03\x02\x02\x02\u1831\u1832\x05\u0494\u024B" +
		"\x02\u1832\u0491\x03\x02\x02\x02\u1833\u1834\x05\u0494\u024B\x02\u1834" +
		"\u0493\x03\x02\x02\x02\u1835\u1836\tE\x02\x02\u1836\u0495\x03\x02\x02" +
		"\x02\u1837\u183E\x07\u0229\x02\x02\u1838\u183E\x05\u04A2\u0252\x02\u1839" +
		"\u183E\x05\u049A\u024E\x02\u183A\u183E\x05\u0498\u024D\x02\u183B\u183E" +
		"\x05\u049E\u0250\x02\u183C\u183E\x05\u04A0\u0251\x02\u183D\u1837\x03\x02" +
		"\x02\x02\u183D\u1838\x03\x02\x02\x02\u183D\u1839\x03\x02\x02\x02\u183D" +
		"\u183A\x03\x02\x02\x02\u183D\u183B\x03\x02\x02\x02\u183D\u183C\x03\x02" +
		"\x02\x02\u183E\u0497\x03\x02\x02\x02\u183F\u1840\tF\x02\x02\u1840\u0499" +
		"\x03\x02\x02\x02\u1841\u1845\x07\u022E\x02\x02\u1842\u1845\x07\u020B\x02" +
		"\x02\u1843\u1845\x05\u049C\u024F\x02\u1844\u1841\x03\x02\x02\x02\u1844" +
		"\u1842\x03\x02\x02\x02\u1844\u1843\x03\x02\x02\x02\u1845\u049B\x03\x02" +
		"\x02\x02\u1846\u1847\tG\x02\x02\u1847\u049D\x03\x02\x02\x02\u1848\u1849" +
		"\x07\x8C\x02\x02\u1849\u184C\x07\u0220\x02\x02\u184A\u184D\x05\u0494\u024B" +
		"\x02\u184B\u184D\x05\u0496\u024C\x02\u184C\u184A\x03\x02\x02\x02\u184C" +
		"\u184B\x03\x02\x02\x02\u184D\u184E\x03\x02\x02\x02\u184E\u184F\x07\u0227" +
		"\x02\x02\u184F\u049F\x03\x02\x02\x02\u1850\u1851\x07\x8D\x02\x02\u1851" +
		"\u1854\x07\u0220\x02\x02\u1852\u1855\x05\u0494\u024B\x02\u1853\u1855\x05" +
		"\u0496\u024C\x02\u1854\u1852\x03\x02\x02\x02\u1854\u1853\x03\x02\x02\x02" +
		"\u1855\u1856\x03\x02\x02\x02\u1856\u1857\x07\u0227\x02\x02\u1857\u04A1" +
		"\x03\x02\x02\x02\u1858\u1859\x07\v\x02\x02\u1859\u1868\x05\u0496\u024C" +
		"\x02\u185A\u1868\x07\xE8\x02\x02\u185B\u1868\x07\xE9\x02\x02\u185C\u1868" +
		"\x07\u0125\x02\x02\u185D\u1868\x07\u0126\x02\x02\u185E\u1868\x07\u013B" +
		"\x02\x02\u185F\u1868\x07\u013C\x02\x02\u1860\u1868\x07\u0171\x02\x02\u1861" +
		"\u1868\x07\u0172\x02\x02\u1862\u1868\x07\u01C4\x02\x02\u1863\u1868\x07" +
		"\u01C5\x02\x02\u1864\u1868\x07\u020B\x02\x02\u1865\u1868\x07\u020D\x02" +
		"\x02\u1866\u1868\x07\u020E\x02\x02\u1867\u1858\x03\x02\x02\x02\u1867\u185A" +
		"\x03\x02\x02\x02\u1867\u185B\x03\x02\x02\x02\u1867\u185C\x03\x02\x02\x02" +
		"\u1867\u185D\x03\x02\x02\x02\u1867\u185E\x03\x02\x02\x02\u1867\u185F\x03" +
		"\x02\x02\x02\u1867\u1860\x03\x02\x02\x02\u1867\u1861\x03\x02\x02\x02\u1867" +
		"\u1862\x03\x02\x02\x02\u1867\u1863\x03\x02\x02\x02\u1867\u1864\x03\x02" +
		"\x02\x02\u1867\u1865\x03\x02\x02\x02\u1867\u1866\x03\x02\x02\x02\u1868" +
		"\u04A3\x03\x02\x02\x02\u1869\u186A\x07\x07\x02\x02\u186A\u186B\x07\u0145" +
		"\x02\x02\u186B\u188B\x05\u0434\u021B\x02\u186C\u188B\x07q\x02\x02\u186D" +
		"\u188B\x07t\x02\x02\u186E\u188B\x07u\x02\x02\u186F\u188B\x07x\x02\x02" +
		"\u1870\u188B\x07y\x02\x02\u1871\u188B\x07z\x02\x02\u1872\u188B\x07{\x02" +
		"\x02\u1873\u188B\x07|\x02\x02\u1874\u188B\x07}\x02\x02\u1875\u188B\x07" +
		"~\x02\x02\u1876\u1878\x07\u010F\x02\x02\u1877\u1879\x07\u0145\x02\x02" +
		"\u1878\u1877\x03\x02\x02\x02\u1878\u1879\x03\x02\x02\x02\u1879\u187A\x03" +
		"\x02\x02\x02\u187A\u188B\x05\u0434\u021B\x02\u187B\u188B\x07\u0118\x02" +
		"\x02\u187C\u188B\x07\u011B\x02\x02\u187D\u188B\x07\u0157\x02\x02\u187E" +
		"\u188B\x07\u0196\x02\x02\u187F\u188B\x07\u01B5\x02\x02\u1880\u188B\x07" +
		"\u01B6\x02\x02\u1881\u188B\x07\u01BB\x02\x02\u1882\u188B\x07\u01BC\x02" +
		"\x02\u1883\u188B\x07\u01BD\x02\x02\u1884\u188B\x07\u01BF\x02\x02\u1885" +
		"\u188B\x07\u01C0\x02\x02\u1886\u188B\x07\u01C1\x02\x02\u1887\u188B\x07" +
		"\u01D9\x02\x02\u1888\u188B\x07\u01E7\x02\x02\u1889\u188B\x07\u0203\x02" +
		"\x02\u188A\u1869\x03\x02\x02\x02\u188A\u186C\x03\x02\x02\x02\u188A\u186D" +
		"\x03\x02\x02\x02\u188A\u186E\x03\x02\x02\x02\u188A\u186F\x03\x02\x02\x02" +
		"\u188A\u1870\x03\x02\x02\x02\u188A\u1871\x03\x02\x02\x02\u188A\u1872\x03" +
		"\x02\x02\x02\u188A\u1873\x03\x02\x02\x02\u188A\u1874\x03\x02\x02\x02\u188A" +
		"\u1875\x03\x02\x02\x02\u188A\u1876\x03\x02\x02\x02\u188A\u187B\x03\x02" +
		"\x02\x02\u188A\u187C\x03\x02\x02\x02\u188A\u187D\x03\x02\x02\x02\u188A" +
		"\u187E\x03\x02\x02\x02\u188A\u187F\x03\x02\x02\x02\u188A\u1880\x03\x02" +
		"\x02\x02\u188A\u1881\x03\x02\x02\x02\u188A\u1882\x03\x02\x02\x02\u188A" +
		"\u1883\x03\x02\x02\x02\u188A\u1884\x03\x02\x02\x02\u188A\u1885\x03\x02" +
		"\x02\x02\u188A\u1886\x03\x02\x02\x02\u188A\u1887\x03\x02\x02\x02\u188A" +
		"\u1888\x03\x02\x02\x02\u188A\u1889\x03\x02\x02\x02\u188B\u04A5\x03\x02" +
		"\x02\x02\u188C\u188E\x07\u0234\x02\x02\u188D\u188C\x03\x02\x02\x02\u188E" +
		"\u188F\x03\x02\x02\x02\u188F\u188D\x03\x02\x02\x02\u188F\u1890\x03\x02" +
		"\x02\x02\u1890\u04A7\x03\x02\x02\x02\u03D5\u04AE\u04B2\u04B5\u04B8\u04BD" +
		"\u04C1\u04CF\u04D8\u04DE\u04E2\u04E4\u04E7\u04EA\u04EF\u04F4\u04F9\u04FE" +
		"\u0503\u0508\u0510\u0516\u051E\u0524\u052A\u052E\u0538\u0542\u0546\u054A" +
		"\u054D\u0551\u0554\u0558\u055B\u055E\u0561\u0565\u056A\u056D\u0570\u0573" +
		"\u0577\u057C\u0580\u0586\u0593\u0597\u05A4\u05A8\u05AE\u05B1\u05BC\u05BE" +
		"\u05C5\u05C7\u05D0\u05D5\u05D9\u05DE\u05E3\u05EA\u05ED\u05F0\u05F5\u05FA" +
		"\u05FE\u0602\u0606\u0609\u060D\u0612\u0616\u061C\u0620\u0622\u0625\u0629" +
		"\u062E\u0630\u0635\u0637\u063B\u063F\u0642\u0646\u0649\u064E\u0651\u0654" +
		"\u0658\u065B\u0660\u0663\u0666\u0668\u066C\u0672\u0675\u0678\u067C\u0680" +
		"\u0683\u0686\u068B\u068F\u0694\u0697\u069C\u06A4\u06A9\u06AD\u06B2\u06BB" +
		"\u06C0\u06CF\u06D3\u06E0\u06E5\u06E8\u06EB\u06EF\u06F1\u06F8\u06FE\u0701" +
		"\u0705\u070A\u070F\u0713\u0716\u071C\u071F\u0723\u0726\u0729\u072E\u0731" +
		"\u0735\u0738\u073B\u073F\u0744\u0748\u074C\u0750\u0753\u075C\u0761\u0765" +
		"\u076B\u0771\u0773\u0779\u077F\u0782\u078A\u078E\u0791\u0794\u0799\u079E" +
		"\u07A1\u07A6\u07AB\u07B0\u07BA\u07C6\u07CE\u07D4\u07D9\u07E0\u07EE\u07F1" +
		"\u07F6\u07FC\u0800\u0803\u080C\u080F\u0813\u0816\u081A\u081D\u0820\u0824" +
		"\u0827\u0829\u082D\u0830\u0833\u0838\u0840\u0844\u0846\u084D\u084F\u0856" +
		"\u085A\u085E\u0863\u0867\u0869\u086E\u0872\u0876\u0879\u087E\u0884\u0887" +
		"\u088B\u088F\u0892\u0895\u089A\u089D\u08A0\u08A5\u08A9\u08AC\u08B4\u08BA" +
		"\u08BE\u08C0\u08C5\u08CD\u08DB\u08E4\u08EC\u08EE\u08F4\u08F9\u08FC\u0908" +
		"\u090B\u090D\u0915\u091E\u0920\u0928\u0932\u0935\u0937\u093F\u094D\u094F" +
		"\u0954\u095B\u0960\u0964\u096B\u0972\u0979\u097E\u0982\u0987\u098B\u0990" +
		"\u0994\u0999\u099D\u09A2\u09A6\u09AD\u09B8\u09BD\u09C6\u09CC\u09E0\u09EC" +
		"\u09EE\u0A07\u0A0B\u0A0F\u0A12\u0A15\u0A19\u0A1D\u0A20\u0A23\u0A27\u0A2B" +
		"\u0A2F\u0A33\u0A37\u0A3B\u0A41\u0A47\u0A4E\u0A51\u0A5B\u0A61\u0A67\u0A6B" +
		"\u0A6D\u0A72\u0A74\u0A7E\u0A81\u0A85\u0A88\u0A8D\u0A99\u0AA0\u0AA5\u0AA9" +
		"\u0AAC\u0AAF\u0AB2\u0AB4\u0AB9\u0AC0\u0AC4\u0AC6\u0ACA\u0ADD\u0AE2\u0AE5" +
		"\u0AE9\u0AEF\u0AF2\u0AF9\u0B06\u0B09\u0B0B\u0B12\u0B18\u0B1B\u0B21\u0B25" +
		"\u0B28\u0B2B\u0B2E\u0B32\u0B36\u0B3A\u0B42\u0B47\u0B51\u0B57\u0B5B\u0B5F" +
		"\u0B64\u0B68\u0B6F\u0B74\u0B7A\u0B7F\u0B82\u0B86\u0B8F\u0B94\u0B99\u0B9E" +
		"\u0BA2\u0BA9\u0BAD\u0BB1\u0BB3\u0BBA\u0BBF\u0BC3\u0BCD\u0BD2\u0BD8\u0BDB" +
		"\u0BE1\u0BE4\u0BE8\u0BEA\u0BF0\u0BF3\u0BF7\u0BFB\u0BFE\u0C01\u0C04\u0C0C" +
		"\u0C12\u0C19\u0C1E\u0C21\u0C24\u0C27\u0C33\u0C37\u0C3D\u0C41\u0C44\u0C49" +
		"\u0C51\u0C56\u0C6D\u0C6F\u0C81\u0C84\u0C8A\u0C91\u0C96\u0C99\u0CA1\u0CA6" +
		"\u0CA9\u0CAD\u0CB0\u0CB5\u0CBA\u0CBD\u0CC2\u0CC4\u0CCB\u0CCE\u0CD3\u0CD7" +
		"\u0CDE\u0CE1\u0CE5\u0CF7\u0CFE\u0D01\u0D0F\u0D13\u0D15\u0D1A\u0D1C\u0D20" +
		"\u0D23\u0D29\u0D2E\u0D34\u0D36\u0D3A\u0D59\u0D5E\u0D62\u0D66\u0D6A\u0D6C" +
		"\u0D70\u0D75\u0D7A\u0D7E\u0D84\u0D8C\u0D8F\u0D93\u0D9B\u0DA2\u0DA5\u0DA8" +
		"\u0DAD\u0DB0\u0DB4\u0DB7\u0DBA\u0DC0\u0DC5\u0DCC\u0DDB\u0DE1\u0DEB\u0DF1" +
		"\u0DFA\u0DFD\u0E02\u0E38\u0E40\u0E43\u0E46\u0E49\u0E4E\u0E52\u0E59\u0E5F" +
		"\u0E69\u0E71\u0E74\u0E77\u0E7A\u0E7F\u0E85\u0E8A\u0E90\u0E92\u0E98\u0EA1" +
		"\u0EA5\u0EA9\u0EAD\u0EB1\u0EB9\u0EBF\u0EC6\u0EC9\u0ECC\u0ECF\u0ED2\u0ED5" +
		"\u0ED8\u0EDE\u0EE3\u0EE6\u0EE9\u0EEE\u0EF4\u0EF9\u0EFC\u0EFF\u0F05\u0F0B" +
		"\u0F0D\u0F11\u0F14\u0F1A\u0F20\u0F22\u0F27\u0F30\u0F37\u0F3D\u0F43\u0F47" +
		"\u0F4A\u0F4D\u0F52\u0F54\u0F57\u0F5C\u0F5F\u0F65\u0F6B\u0F6D\u0F72\u0F76" +
		"\u0F7D\u0F81\u0F85\u0F8B\u0F90\u0F93\u0F96\u0F9A\u0FA1\u0FA4\u0FA7\u0FAA" +
		"\u0FAF\u0FB4\u0FB8\u0FBD\u0FC3\u0FC6\u0FC9\u0FCC\u0FD0\u0FD5\u0FDA\u0FDD" +
		"\u0FE5\u0FEA\u0FED\u0FF0\u0FF3\u0FF6\u0FFC\u1001\u1004\u1009\u100C\u1012" +
		"\u1016\u101A\u1022\u1027\u102B\u1030\u1038\u103A\u1041\u1047\u104A\u104D" +
		"\u1053\u105B\u1060\u1068\u106D\u1071\u1075\u1082\u1088\u108D\u1092\u1097" +
		"\u109B\u109E\u10A3\u10A7\u10AB\u10B4\u10B8\u10C0\u10C4\u10C7\u10C9\u10CF" +
		"\u10D2\u10D5\u10DC\u10DF\u10E7\u10EA\u10F0\u10F3\u10F9\u10FD\u1102\u1108" +
		"\u1110\u1116\u111B\u111D\u1123\u1128\u112D\u1133\u113A\u113C\u1142\u114A" +
		"\u1151\u1157\u115B\u1160\u1165\u116B\u1171\u1176\u117A\u117E\u1185\u1188" +
		"\u118D\u1191\u1196\u119A\u119E\u11A3\u11A6\u11AA\u11AF\u11B2\u11B5\u11B8" +
		"\u11BF\u11C3\u11CB\u11D0\u11D4\u11DD\u11E9\u11ED\u11F1\u11F8\u11FC\u1204" +
		"\u120B\u1210\u1213\u1216\u1219\u121E\u1222\u1229\u122D\u1231\u1238\u123A" +
		"\u1240\u1245\u1249\u124F\u1253\u1257\u125D\u1263\u1268\u126B\u1270\u1278" +
		"\u127B\u1280\u1284\u1289\u1293\u1295\u129C\u12A1\u12AE\u12B4\u12B7\u12C0" +
		"\u12C5\u12C8\u12CB\u12CE\u12D1\u12D4\u12D7\u12DA\u12DD\u12E0\u12E6\u12EB" +
		"\u12EF\u12F6\u12F9\u12FC\u12FF\u1309\u130B\u1314\u1319\u131D\u1320\u1327" +
		"\u132F\u1334\u1338\u133B\u1342\u1348\u134C\u1350\u1358\u135D\u1360\u1364" +
		"\u1367\u136F\u1372\u1375\u1378\u137F\u1383\u1386\u138B\u138E\u139A\u139D" +
		"\u13A2\u13A5\u13A8\u13AC\u13AF\u13B2\u13B5\u13B8\u13C6\u13CA\u13CE\u13D3" +
		"\u13D9\u13DC\u13E4\u13E7\u13EC\u13F2\u13F7\u13FD\u1408\u140C\u1410\u1417" +
		"\u141A\u141D\u1420\u1425\u1429\u142E\u1432\u1436\u143B\u143E\u1442\u1445" +
		"\u1448\u144C\u1451\u1454\u1457\u145A\u1461\u1465\u146C\u1470\u1479\u147E" +
		"\u1482\u148B\u1497\u149C\u149F\u14A2\u14A5\u14A9\u14AD\u14B2\u14B8\u14BE" +
		"\u14C3\u14C6\u14CD\u14D3\u14D7\u14DA\u14DD\u14E0\u14E5\u14E9\u14ED\u14F1" +
		"\u14F6\u14FB\u1501\u150A\u150D\u1510\u1513\u1518\u151E\u1523\u152B\u1534" +
		"\u1538\u153C\u1540\u1544\u154D\u1550\u1553\u1556\u1559\u1560\u1563\u1567" +
		"\u156A\u156E\u1572\u1576\u157C\u1580\u1583\u1587\u158D\u1592\u1599\u15A0" +
		"\u15A3\u15A7\u15AC\u15B7\u15B9\u15BC\u15C0\u15C5\u15CB\u15CE\u15D3\u15D8" +
		"\u15DB\u15DE\u15E1\u15E4\u15E7\u15EA\u15EF\u15F3\u15F8\u15FE\u1601\u1606" +
		"\u160C\u1611\u1617\u161B\u1621\u1626\u162C\u1631\u1636\u163C\u1641\u1645" +
		"\u164B\u1650\u1656\u165A\u1661\u1666\u166D\u1671\u1677\u167C\u1682\u1689" +
		"\u1693\u169A\u16A0\u16AC\u16B2\u16BA\u16BC\u16BF\u16CA\u16CE\u16D1\u16DA" +
		"\u16E0\u16E4\u16E9\u16EF\u16F2\u16F7\u16FC\u1704\u1708\u170B\u171E\u1721" +
		"\u1724\u1728\u172D\u1732\u1735\u173A\u173F\u1744\u1749\u174C\u174F\u1752" +
		"\u175A\u1760\u1766\u176B\u1772\u1776\u177D\u1782\u1789\u178D\u1793\u179F" +
		"\u17A3\u17A6\u17AC\u17B0\u17B3\u17B9\u17BD\u17C2\u17C5\u17C8\u17D5\u17FC" +
		"\u1808\u1816\u181A\u181D\u1821\u182D\u183D\u1844\u184C\u1854\u1867\u1878" +
		"\u188A\u188F";
	public static readonly _serializedATN: string = Utils.join(
		[
			Cobol85Parser._serializedATNSegment0,
			Cobol85Parser._serializedATNSegment1,
			Cobol85Parser._serializedATNSegment2,
			Cobol85Parser._serializedATNSegment3,
			Cobol85Parser._serializedATNSegment4,
			Cobol85Parser._serializedATNSegment5,
			Cobol85Parser._serializedATNSegment6,
			Cobol85Parser._serializedATNSegment7,
			Cobol85Parser._serializedATNSegment8,
			Cobol85Parser._serializedATNSegment9,
			Cobol85Parser._serializedATNSegment10,
			Cobol85Parser._serializedATNSegment11,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!Cobol85Parser.__ATN) {
			Cobol85Parser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(Cobol85Parser._serializedATN));
		}

		return Cobol85Parser.__ATN;
	}

}

export class StartRuleContext extends ParserRuleContext {
	public compilationUnit(): CompilationUnitContext {
		return this.getRuleContext(0, CompilationUnitContext);
	}
	public EOF(): TerminalNode { return this.getToken(Cobol85Parser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_startRule; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStartRule) {
			listener.enterStartRule(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStartRule) {
			listener.exitStartRule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStartRule) {
			return visitor.visitStartRule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompilationUnitContext extends ParserRuleContext {
	public programUnit(): ProgramUnitContext[];
	public programUnit(i: number): ProgramUnitContext;
	public programUnit(i?: number): ProgramUnitContext | ProgramUnitContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramUnitContext);
		} else {
			return this.getRuleContext(i, ProgramUnitContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_compilationUnit; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCompilationUnit) {
			listener.enterCompilationUnit(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCompilationUnit) {
			listener.exitCompilationUnit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCompilationUnit) {
			return visitor.visitCompilationUnit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramUnitContext extends ParserRuleContext {
	public identificationDivision(): IdentificationDivisionContext {
		return this.getRuleContext(0, IdentificationDivisionContext);
	}
	public environmentDivision(): EnvironmentDivisionContext | undefined {
		return this.tryGetRuleContext(0, EnvironmentDivisionContext);
	}
	public dataDivision(): DataDivisionContext | undefined {
		return this.tryGetRuleContext(0, DataDivisionContext);
	}
	public procedureDivision(): ProcedureDivisionContext | undefined {
		return this.tryGetRuleContext(0, ProcedureDivisionContext);
	}
	public programUnit(): ProgramUnitContext[];
	public programUnit(i: number): ProgramUnitContext;
	public programUnit(i?: number): ProgramUnitContext | ProgramUnitContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramUnitContext);
		} else {
			return this.getRuleContext(i, ProgramUnitContext);
		}
	}
	public endProgramStatement(): EndProgramStatementContext | undefined {
		return this.tryGetRuleContext(0, EndProgramStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_programUnit; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProgramUnit) {
			listener.enterProgramUnit(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProgramUnit) {
			listener.exitProgramUnit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProgramUnit) {
			return visitor.visitProgramUnit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EndProgramStatementContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(Cobol85Parser.END, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(Cobol85Parser.PROGRAM, 0); }
	public programName(): ProgramNameContext {
		return this.getRuleContext(0, ProgramNameContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_endProgramStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEndProgramStatement) {
			listener.enterEndProgramStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEndProgramStatement) {
			listener.exitEndProgramStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEndProgramStatement) {
			return visitor.visitEndProgramStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentificationDivisionContext extends ParserRuleContext {
	public DIVISION(): TerminalNode { return this.getToken(Cobol85Parser.DIVISION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public programIdParagraph(): ProgramIdParagraphContext {
		return this.getRuleContext(0, ProgramIdParagraphContext);
	}
	public IDENTIFICATION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IDENTIFICATION, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ID, 0); }
	public identificationDivisionBody(): IdentificationDivisionBodyContext[];
	public identificationDivisionBody(i: number): IdentificationDivisionBodyContext;
	public identificationDivisionBody(i?: number): IdentificationDivisionBodyContext | IdentificationDivisionBodyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentificationDivisionBodyContext);
		} else {
			return this.getRuleContext(i, IdentificationDivisionBodyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_identificationDivision; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIdentificationDivision) {
			listener.enterIdentificationDivision(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIdentificationDivision) {
			listener.exitIdentificationDivision(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIdentificationDivision) {
			return visitor.visitIdentificationDivision(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentificationDivisionBodyContext extends ParserRuleContext {
	public authorParagraph(): AuthorParagraphContext | undefined {
		return this.tryGetRuleContext(0, AuthorParagraphContext);
	}
	public installationParagraph(): InstallationParagraphContext | undefined {
		return this.tryGetRuleContext(0, InstallationParagraphContext);
	}
	public dateWrittenParagraph(): DateWrittenParagraphContext | undefined {
		return this.tryGetRuleContext(0, DateWrittenParagraphContext);
	}
	public dateCompiledParagraph(): DateCompiledParagraphContext | undefined {
		return this.tryGetRuleContext(0, DateCompiledParagraphContext);
	}
	public securityParagraph(): SecurityParagraphContext | undefined {
		return this.tryGetRuleContext(0, SecurityParagraphContext);
	}
	public remarksParagraph(): RemarksParagraphContext | undefined {
		return this.tryGetRuleContext(0, RemarksParagraphContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_identificationDivisionBody; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIdentificationDivisionBody) {
			listener.enterIdentificationDivisionBody(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIdentificationDivisionBody) {
			listener.exitIdentificationDivisionBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIdentificationDivisionBody) {
			return visitor.visitIdentificationDivisionBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramIdParagraphContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(Cobol85Parser.PROGRAM_ID, 0); }
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public programName(): ProgramNameContext {
		return this.getRuleContext(0, ProgramNameContext);
	}
	public commentEntry(): CommentEntryContext | undefined {
		return this.tryGetRuleContext(0, CommentEntryContext);
	}
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INITIAL, 0); }
	public LIBRARY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIBRARY, 0); }
	public DEFINITION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEFINITION, 0); }
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECURSIVE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_programIdParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProgramIdParagraph) {
			listener.enterProgramIdParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProgramIdParagraph) {
			listener.exitProgramIdParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProgramIdParagraph) {
			return visitor.visitProgramIdParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorParagraphContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(Cobol85Parser.AUTHOR, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public commentEntry(): CommentEntryContext | undefined {
		return this.tryGetRuleContext(0, CommentEntryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_authorParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAuthorParagraph) {
			listener.enterAuthorParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAuthorParagraph) {
			listener.exitAuthorParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAuthorParagraph) {
			return visitor.visitAuthorParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationParagraphContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(Cobol85Parser.INSTALLATION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public commentEntry(): CommentEntryContext | undefined {
		return this.tryGetRuleContext(0, CommentEntryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_installationParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInstallationParagraph) {
			listener.enterInstallationParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInstallationParagraph) {
			listener.exitInstallationParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInstallationParagraph) {
			return visitor.visitInstallationParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DateWrittenParagraphContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(Cobol85Parser.DATE_WRITTEN, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public commentEntry(): CommentEntryContext | undefined {
		return this.tryGetRuleContext(0, CommentEntryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dateWrittenParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDateWrittenParagraph) {
			listener.enterDateWrittenParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDateWrittenParagraph) {
			listener.exitDateWrittenParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDateWrittenParagraph) {
			return visitor.visitDateWrittenParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DateCompiledParagraphContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(Cobol85Parser.DATE_COMPILED, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public commentEntry(): CommentEntryContext | undefined {
		return this.tryGetRuleContext(0, CommentEntryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dateCompiledParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDateCompiledParagraph) {
			listener.enterDateCompiledParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDateCompiledParagraph) {
			listener.exitDateCompiledParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDateCompiledParagraph) {
			return visitor.visitDateCompiledParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityParagraphContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(Cobol85Parser.SECURITY, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public commentEntry(): CommentEntryContext | undefined {
		return this.tryGetRuleContext(0, CommentEntryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_securityParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSecurityParagraph) {
			listener.enterSecurityParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSecurityParagraph) {
			listener.exitSecurityParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSecurityParagraph) {
			return visitor.visitSecurityParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemarksParagraphContext extends ParserRuleContext {
	public REMARKS(): TerminalNode { return this.getToken(Cobol85Parser.REMARKS, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public commentEntry(): CommentEntryContext | undefined {
		return this.tryGetRuleContext(0, CommentEntryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_remarksParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRemarksParagraph) {
			listener.enterRemarksParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRemarksParagraph) {
			listener.exitRemarksParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRemarksParagraph) {
			return visitor.visitRemarksParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnvironmentDivisionContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(Cobol85Parser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(Cobol85Parser.DIVISION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public environmentDivisionBody(): EnvironmentDivisionBodyContext[];
	public environmentDivisionBody(i: number): EnvironmentDivisionBodyContext;
	public environmentDivisionBody(i?: number): EnvironmentDivisionBodyContext | EnvironmentDivisionBodyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EnvironmentDivisionBodyContext);
		} else {
			return this.getRuleContext(i, EnvironmentDivisionBodyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_environmentDivision; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEnvironmentDivision) {
			listener.enterEnvironmentDivision(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEnvironmentDivision) {
			listener.exitEnvironmentDivision(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEnvironmentDivision) {
			return visitor.visitEnvironmentDivision(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnvironmentDivisionBodyContext extends ParserRuleContext {
	public configurationSection(): ConfigurationSectionContext | undefined {
		return this.tryGetRuleContext(0, ConfigurationSectionContext);
	}
	public specialNamesParagraph(): SpecialNamesParagraphContext | undefined {
		return this.tryGetRuleContext(0, SpecialNamesParagraphContext);
	}
	public inputOutputSection(): InputOutputSectionContext | undefined {
		return this.tryGetRuleContext(0, InputOutputSectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_environmentDivisionBody; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEnvironmentDivisionBody) {
			listener.enterEnvironmentDivisionBody(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEnvironmentDivisionBody) {
			listener.exitEnvironmentDivisionBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEnvironmentDivisionBody) {
			return visitor.visitEnvironmentDivisionBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConfigurationSectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(Cobol85Parser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public configurationSectionParagraph(): ConfigurationSectionParagraphContext[];
	public configurationSectionParagraph(i: number): ConfigurationSectionParagraphContext;
	public configurationSectionParagraph(i?: number): ConfigurationSectionParagraphContext | ConfigurationSectionParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConfigurationSectionParagraphContext);
		} else {
			return this.getRuleContext(i, ConfigurationSectionParagraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_configurationSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterConfigurationSection) {
			listener.enterConfigurationSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitConfigurationSection) {
			listener.exitConfigurationSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitConfigurationSection) {
			return visitor.visitConfigurationSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConfigurationSectionParagraphContext extends ParserRuleContext {
	public sourceComputerParagraph(): SourceComputerParagraphContext | undefined {
		return this.tryGetRuleContext(0, SourceComputerParagraphContext);
	}
	public objectComputerParagraph(): ObjectComputerParagraphContext | undefined {
		return this.tryGetRuleContext(0, ObjectComputerParagraphContext);
	}
	public specialNamesParagraph(): SpecialNamesParagraphContext | undefined {
		return this.tryGetRuleContext(0, SpecialNamesParagraphContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_configurationSectionParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterConfigurationSectionParagraph) {
			listener.enterConfigurationSectionParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitConfigurationSectionParagraph) {
			listener.exitConfigurationSectionParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitConfigurationSectionParagraph) {
			return visitor.visitConfigurationSectionParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SourceComputerParagraphContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(Cobol85Parser.SOURCE_COMPUTER, 0); }
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public computerName(): ComputerNameContext {
		return this.getRuleContext(0, ComputerNameContext);
	}
	public DEBUGGING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUGGING, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sourceComputerParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSourceComputerParagraph) {
			listener.enterSourceComputerParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSourceComputerParagraph) {
			listener.exitSourceComputerParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSourceComputerParagraph) {
			return visitor.visitSourceComputerParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ObjectComputerParagraphContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(Cobol85Parser.OBJECT_COMPUTER, 0); }
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public computerName(): ComputerNameContext {
		return this.getRuleContext(0, ComputerNameContext);
	}
	public objectComputerClause(): ObjectComputerClauseContext[];
	public objectComputerClause(i: number): ObjectComputerClauseContext;
	public objectComputerClause(i?: number): ObjectComputerClauseContext | ObjectComputerClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ObjectComputerClauseContext);
		} else {
			return this.getRuleContext(i, ObjectComputerClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_objectComputerParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterObjectComputerParagraph) {
			listener.enterObjectComputerParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitObjectComputerParagraph) {
			listener.exitObjectComputerParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitObjectComputerParagraph) {
			return visitor.visitObjectComputerParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ObjectComputerClauseContext extends ParserRuleContext {
	public memorySizeClause(): MemorySizeClauseContext | undefined {
		return this.tryGetRuleContext(0, MemorySizeClauseContext);
	}
	public diskSizeClause(): DiskSizeClauseContext | undefined {
		return this.tryGetRuleContext(0, DiskSizeClauseContext);
	}
	public collatingSequenceClause(): CollatingSequenceClauseContext | undefined {
		return this.tryGetRuleContext(0, CollatingSequenceClauseContext);
	}
	public segmentLimitClause(): SegmentLimitClauseContext | undefined {
		return this.tryGetRuleContext(0, SegmentLimitClauseContext);
	}
	public characterSetClause(): CharacterSetClauseContext | undefined {
		return this.tryGetRuleContext(0, CharacterSetClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_objectComputerClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterObjectComputerClause) {
			listener.enterObjectComputerClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitObjectComputerClause) {
			listener.exitObjectComputerClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitObjectComputerClause) {
			return visitor.visitObjectComputerClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MemorySizeClauseContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(Cobol85Parser.MEMORY, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIZE, 0); }
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_memorySizeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMemorySizeClause) {
			listener.enterMemorySizeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMemorySizeClause) {
			listener.exitMemorySizeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMemorySizeClause) {
			return visitor.visitMemorySizeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DiskSizeClauseContext extends ParserRuleContext {
	public DISK(): TerminalNode { return this.getToken(Cobol85Parser.DISK, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIZE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WORDS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_diskSizeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDiskSizeClause) {
			listener.enterDiskSizeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDiskSizeClause) {
			listener.exitDiskSizeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDiskSizeClause) {
			return visitor.visitDiskSizeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollatingSequenceClauseContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(Cobol85Parser.SEQUENCE, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COLLATING, 0); }
	public collatingSequenceClauseAlphanumeric(): CollatingSequenceClauseAlphanumericContext | undefined {
		return this.tryGetRuleContext(0, CollatingSequenceClauseAlphanumericContext);
	}
	public collatingSequenceClauseNational(): CollatingSequenceClauseNationalContext | undefined {
		return this.tryGetRuleContext(0, CollatingSequenceClauseNationalContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public alphabetName(): AlphabetNameContext[];
	public alphabetName(i: number): AlphabetNameContext;
	public alphabetName(i?: number): AlphabetNameContext | AlphabetNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlphabetNameContext);
		} else {
			return this.getRuleContext(i, AlphabetNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_collatingSequenceClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCollatingSequenceClause) {
			listener.enterCollatingSequenceClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCollatingSequenceClause) {
			listener.exitCollatingSequenceClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCollatingSequenceClause) {
			return visitor.visitCollatingSequenceClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollatingSequenceClauseAlphanumericContext extends ParserRuleContext {
	public ALPHANUMERIC(): TerminalNode { return this.getToken(Cobol85Parser.ALPHANUMERIC, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCollatingSequenceClauseAlphanumeric) {
			listener.enterCollatingSequenceClauseAlphanumeric(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCollatingSequenceClauseAlphanumeric) {
			listener.exitCollatingSequenceClauseAlphanumeric(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCollatingSequenceClauseAlphanumeric) {
			return visitor.visitCollatingSequenceClauseAlphanumeric(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollatingSequenceClauseNationalContext extends ParserRuleContext {
	public NATIONAL(): TerminalNode { return this.getToken(Cobol85Parser.NATIONAL, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_collatingSequenceClauseNational; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCollatingSequenceClauseNational) {
			listener.enterCollatingSequenceClauseNational(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCollatingSequenceClauseNational) {
			listener.exitCollatingSequenceClauseNational(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCollatingSequenceClauseNational) {
			return visitor.visitCollatingSequenceClauseNational(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SegmentLimitClauseContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(Cobol85Parser.SEGMENT_LIMIT, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_segmentLimitClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSegmentLimitClause) {
			listener.enterSegmentLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSegmentLimitClause) {
			listener.exitSegmentLimitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSegmentLimitClause) {
			return visitor.visitSegmentLimitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharacterSetClauseContext extends ParserRuleContext {
	public CHARACTER(): TerminalNode { return this.getToken(Cobol85Parser.CHARACTER, 0); }
	public SET(): TerminalNode { return this.getToken(Cobol85Parser.SET, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_characterSetClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCharacterSetClause) {
			listener.enterCharacterSetClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCharacterSetClause) {
			listener.exitCharacterSetClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCharacterSetClause) {
			return visitor.visitCharacterSetClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SpecialNamesParagraphContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(Cobol85Parser.SPECIAL_NAMES, 0); }
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public specialNameClause(): SpecialNameClauseContext[];
	public specialNameClause(i: number): SpecialNameClauseContext;
	public specialNameClause(i?: number): SpecialNameClauseContext | SpecialNameClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SpecialNameClauseContext);
		} else {
			return this.getRuleContext(i, SpecialNameClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_specialNamesParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSpecialNamesParagraph) {
			listener.enterSpecialNamesParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSpecialNamesParagraph) {
			listener.exitSpecialNamesParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSpecialNamesParagraph) {
			return visitor.visitSpecialNamesParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SpecialNameClauseContext extends ParserRuleContext {
	public channelClause(): ChannelClauseContext | undefined {
		return this.tryGetRuleContext(0, ChannelClauseContext);
	}
	public odtClause(): OdtClauseContext | undefined {
		return this.tryGetRuleContext(0, OdtClauseContext);
	}
	public alphabetClause(): AlphabetClauseContext | undefined {
		return this.tryGetRuleContext(0, AlphabetClauseContext);
	}
	public classClause(): ClassClauseContext | undefined {
		return this.tryGetRuleContext(0, ClassClauseContext);
	}
	public currencySignClause(): CurrencySignClauseContext | undefined {
		return this.tryGetRuleContext(0, CurrencySignClauseContext);
	}
	public decimalPointClause(): DecimalPointClauseContext | undefined {
		return this.tryGetRuleContext(0, DecimalPointClauseContext);
	}
	public symbolicCharactersClause(): SymbolicCharactersClauseContext | undefined {
		return this.tryGetRuleContext(0, SymbolicCharactersClauseContext);
	}
	public environmentSwitchNameClause(): EnvironmentSwitchNameClauseContext | undefined {
		return this.tryGetRuleContext(0, EnvironmentSwitchNameClauseContext);
	}
	public defaultDisplaySignClause(): DefaultDisplaySignClauseContext | undefined {
		return this.tryGetRuleContext(0, DefaultDisplaySignClauseContext);
	}
	public defaultComputationalSignClause(): DefaultComputationalSignClauseContext | undefined {
		return this.tryGetRuleContext(0, DefaultComputationalSignClauseContext);
	}
	public reserveNetworkClause(): ReserveNetworkClauseContext | undefined {
		return this.tryGetRuleContext(0, ReserveNetworkClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_specialNameClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSpecialNameClause) {
			listener.enterSpecialNameClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSpecialNameClause) {
			listener.exitSpecialNameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSpecialNameClause) {
			return visitor.visitSpecialNameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetClauseContext extends ParserRuleContext {
	public alphabetClauseFormat1(): AlphabetClauseFormat1Context | undefined {
		return this.tryGetRuleContext(0, AlphabetClauseFormat1Context);
	}
	public alphabetClauseFormat2(): AlphabetClauseFormat2Context | undefined {
		return this.tryGetRuleContext(0, AlphabetClauseFormat2Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alphabetClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlphabetClause) {
			listener.enterAlphabetClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlphabetClause) {
			listener.exitAlphabetClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlphabetClause) {
			return visitor.visitAlphabetClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetClauseFormat1Context extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(Cobol85Parser.ALPHABET, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EBCDIC, 0); }
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIVE, 0); }
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public ALPHANUMERIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public alphabetLiterals(): AlphabetLiteralsContext[];
	public alphabetLiterals(i: number): AlphabetLiteralsContext;
	public alphabetLiterals(i?: number): AlphabetLiteralsContext | AlphabetLiteralsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlphabetLiteralsContext);
		} else {
			return this.getRuleContext(i, AlphabetLiteralsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alphabetClauseFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlphabetClauseFormat1) {
			listener.enterAlphabetClauseFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlphabetClauseFormat1) {
			listener.exitAlphabetClauseFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlphabetClauseFormat1) {
			return visitor.visitAlphabetClauseFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetLiteralsContext extends ParserRuleContext {
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public alphabetThrough(): AlphabetThroughContext | undefined {
		return this.tryGetRuleContext(0, AlphabetThroughContext);
	}
	public alphabetAlso(): AlphabetAlsoContext[];
	public alphabetAlso(i: number): AlphabetAlsoContext;
	public alphabetAlso(i?: number): AlphabetAlsoContext | AlphabetAlsoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlphabetAlsoContext);
		} else {
			return this.getRuleContext(i, AlphabetAlsoContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alphabetLiterals; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlphabetLiterals) {
			listener.enterAlphabetLiterals(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlphabetLiterals) {
			listener.exitAlphabetLiterals(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlphabetLiterals) {
			return visitor.visitAlphabetLiterals(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetThroughContext extends ParserRuleContext {
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alphabetThrough; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlphabetThrough) {
			listener.enterAlphabetThrough(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlphabetThrough) {
			listener.exitAlphabetThrough(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlphabetThrough) {
			return visitor.visitAlphabetThrough(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetAlsoContext extends ParserRuleContext {
	public ALSO(): TerminalNode { return this.getToken(Cobol85Parser.ALSO, 0); }
	public literal(): LiteralContext[];
	public literal(i: number): LiteralContext;
	public literal(i?: number): LiteralContext | LiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LiteralContext);
		} else {
			return this.getRuleContext(i, LiteralContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alphabetAlso; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlphabetAlso) {
			listener.enterAlphabetAlso(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlphabetAlso) {
			listener.exitAlphabetAlso(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlphabetAlso) {
			return visitor.visitAlphabetAlso(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetClauseFormat2Context extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(Cobol85Parser.ALPHABET, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public NATIONAL(): TerminalNode { return this.getToken(Cobol85Parser.NATIONAL, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIVE, 0); }
	public CCSVERSION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CCSVERSION, 0); }
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alphabetClauseFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlphabetClauseFormat2) {
			listener.enterAlphabetClauseFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlphabetClauseFormat2) {
			listener.exitAlphabetClauseFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlphabetClauseFormat2) {
			return visitor.visitAlphabetClauseFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChannelClauseContext extends ParserRuleContext {
	public CHANNEL(): TerminalNode { return this.getToken(Cobol85Parser.CHANNEL, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public mnemonicName(): MnemonicNameContext {
		return this.getRuleContext(0, MnemonicNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_channelClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterChannelClause) {
			listener.enterChannelClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitChannelClause) {
			listener.exitChannelClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitChannelClause) {
			return visitor.visitChannelClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClassClauseContext extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(Cobol85Parser.CLASS, 0); }
	public className(): ClassNameContext {
		return this.getRuleContext(0, ClassNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public classClauseThrough(): ClassClauseThroughContext[];
	public classClauseThrough(i: number): ClassClauseThroughContext;
	public classClauseThrough(i?: number): ClassClauseThroughContext | ClassClauseThroughContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClassClauseThroughContext);
		} else {
			return this.getRuleContext(i, ClassClauseThroughContext);
		}
	}
	public ALPHANUMERIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_classClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClassClause) {
			listener.enterClassClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClassClause) {
			listener.exitClassClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClassClause) {
			return visitor.visitClassClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClassClauseThroughContext extends ParserRuleContext {
	public classClauseFrom(): ClassClauseFromContext {
		return this.getRuleContext(0, ClassClauseFromContext);
	}
	public classClauseTo(): ClassClauseToContext | undefined {
		return this.tryGetRuleContext(0, ClassClauseToContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_classClauseThrough; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClassClauseThrough) {
			listener.enterClassClauseThrough(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClassClauseThrough) {
			listener.exitClassClauseThrough(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClassClauseThrough) {
			return visitor.visitClassClauseThrough(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClassClauseFromContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_classClauseFrom; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClassClauseFrom) {
			listener.enterClassClauseFrom(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClassClauseFrom) {
			listener.exitClassClauseFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClassClauseFrom) {
			return visitor.visitClassClauseFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClassClauseToContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_classClauseTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClassClauseTo) {
			listener.enterClassClauseTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClassClauseTo) {
			listener.exitClassClauseTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClassClauseTo) {
			return visitor.visitClassClauseTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencySignClauseContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(Cobol85Parser.CURRENCY, 0); }
	public literal(): LiteralContext[];
	public literal(i: number): LiteralContext;
	public literal(i?: number): LiteralContext | LiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LiteralContext);
		} else {
			return this.getRuleContext(i, LiteralContext);
		}
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYMBOL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_currencySignClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCurrencySignClause) {
			listener.enterCurrencySignClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCurrencySignClause) {
			listener.exitCurrencySignClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCurrencySignClause) {
			return visitor.visitCurrencySignClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DecimalPointClauseContext extends ParserRuleContext {
	public DECIMAL_POINT(): TerminalNode { return this.getToken(Cobol85Parser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode { return this.getToken(Cobol85Parser.COMMA, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_decimalPointClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDecimalPointClause) {
			listener.enterDecimalPointClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDecimalPointClause) {
			listener.exitDecimalPointClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDecimalPointClause) {
			return visitor.visitDecimalPointClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaultComputationalSignClauseContext extends ParserRuleContext {
	public DEFAULT(): TerminalNode { return this.getToken(Cobol85Parser.DEFAULT, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIGN, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMP, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRAILING, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_defaultComputationalSignClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDefaultComputationalSignClause) {
			listener.enterDefaultComputationalSignClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDefaultComputationalSignClause) {
			listener.exitDefaultComputationalSignClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDefaultComputationalSignClause) {
			return visitor.visitDefaultComputationalSignClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaultDisplaySignClauseContext extends ParserRuleContext {
	public DEFAULT_DISPLAY(): TerminalNode { return this.getToken(Cobol85Parser.DEFAULT_DISPLAY, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_defaultDisplaySignClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDefaultDisplaySignClause) {
			listener.enterDefaultDisplaySignClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDefaultDisplaySignClause) {
			listener.exitDefaultDisplaySignClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDefaultDisplaySignClause) {
			return visitor.visitDefaultDisplaySignClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnvironmentSwitchNameClauseContext extends ParserRuleContext {
	public environmentName(): EnvironmentNameContext | undefined {
		return this.tryGetRuleContext(0, EnvironmentNameContext);
	}
	public mnemonicName(): MnemonicNameContext | undefined {
		return this.tryGetRuleContext(0, MnemonicNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public environmentSwitchNameSpecialNamesStatusPhrase(): EnvironmentSwitchNameSpecialNamesStatusPhraseContext | undefined {
		return this.tryGetRuleContext(0, EnvironmentSwitchNameSpecialNamesStatusPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_environmentSwitchNameClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEnvironmentSwitchNameClause) {
			listener.enterEnvironmentSwitchNameClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEnvironmentSwitchNameClause) {
			listener.exitEnvironmentSwitchNameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEnvironmentSwitchNameClause) {
			return visitor.visitEnvironmentSwitchNameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnvironmentSwitchNameSpecialNamesStatusPhraseContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public condition(): ConditionContext[];
	public condition(i: number): ConditionContext;
	public condition(i?: number): ConditionContext | ConditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConditionContext);
		} else {
			return this.getRuleContext(i, ConditionContext);
		}
	}
	public STATUS(): TerminalNode[];
	public STATUS(i: number): TerminalNode;
	public STATUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.STATUS);
		} else {
			return this.getToken(Cobol85Parser.STATUS, i);
		}
	}
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.IS);
		} else {
			return this.getToken(Cobol85Parser.IS, i);
		}
	}
	public OFF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEnvironmentSwitchNameSpecialNamesStatusPhrase) {
			listener.enterEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEnvironmentSwitchNameSpecialNamesStatusPhrase) {
			listener.exitEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEnvironmentSwitchNameSpecialNamesStatusPhrase) {
			return visitor.visitEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OdtClauseContext extends ParserRuleContext {
	public ODT(): TerminalNode { return this.getToken(Cobol85Parser.ODT, 0); }
	public mnemonicName(): MnemonicNameContext {
		return this.getRuleContext(0, MnemonicNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_odtClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOdtClause) {
			listener.enterOdtClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOdtClause) {
			listener.exitOdtClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOdtClause) {
			return visitor.visitOdtClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveNetworkClauseContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(Cobol85Parser.RESERVE, 0); }
	public NETWORK(): TerminalNode { return this.getToken(Cobol85Parser.NETWORK, 0); }
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WORDS, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIST, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public CAPABLE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CAPABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reserveNetworkClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReserveNetworkClause) {
			listener.enterReserveNetworkClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReserveNetworkClause) {
			listener.exitReserveNetworkClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReserveNetworkClause) {
			return visitor.visitReserveNetworkClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicCharactersClauseContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(Cobol85Parser.SYMBOLIC, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); }
	public symbolicCharacters(): SymbolicCharactersContext[];
	public symbolicCharacters(i: number): SymbolicCharactersContext;
	public symbolicCharacters(i?: number): SymbolicCharactersContext | SymbolicCharactersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicCharactersContext);
		} else {
			return this.getRuleContext(i, SymbolicCharactersContext);
		}
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public alphabetName(): AlphabetNameContext | undefined {
		return this.tryGetRuleContext(0, AlphabetNameContext);
	}
	public ALPHANUMERIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicCharactersClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicCharactersClause) {
			listener.enterSymbolicCharactersClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicCharactersClause) {
			listener.exitSymbolicCharactersClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicCharactersClause) {
			return visitor.visitSymbolicCharactersClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicCharactersContext extends ParserRuleContext {
	public symbolicCharacter(): SymbolicCharacterContext[];
	public symbolicCharacter(i: number): SymbolicCharacterContext;
	public symbolicCharacter(i?: number): SymbolicCharacterContext | SymbolicCharacterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicCharacterContext);
		} else {
			return this.getRuleContext(i, SymbolicCharacterContext);
		}
	}
	public integerLiteral(): IntegerLiteralContext[];
	public integerLiteral(i: number): IntegerLiteralContext;
	public integerLiteral(i?: number): IntegerLiteralContext | IntegerLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntegerLiteralContext);
		} else {
			return this.getRuleContext(i, IntegerLiteralContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicCharacters; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicCharacters) {
			listener.enterSymbolicCharacters(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicCharacters) {
			listener.exitSymbolicCharacters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicCharacters) {
			return visitor.visitSymbolicCharacters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InputOutputSectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(Cobol85Parser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public inputOutputSectionParagraph(): InputOutputSectionParagraphContext[];
	public inputOutputSectionParagraph(i: number): InputOutputSectionParagraphContext;
	public inputOutputSectionParagraph(i?: number): InputOutputSectionParagraphContext | InputOutputSectionParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InputOutputSectionParagraphContext);
		} else {
			return this.getRuleContext(i, InputOutputSectionParagraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inputOutputSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInputOutputSection) {
			listener.enterInputOutputSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInputOutputSection) {
			listener.exitInputOutputSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInputOutputSection) {
			return visitor.visitInputOutputSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InputOutputSectionParagraphContext extends ParserRuleContext {
	public fileControlParagraph(): FileControlParagraphContext | undefined {
		return this.tryGetRuleContext(0, FileControlParagraphContext);
	}
	public ioControlParagraph(): IoControlParagraphContext | undefined {
		return this.tryGetRuleContext(0, IoControlParagraphContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inputOutputSectionParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInputOutputSectionParagraph) {
			listener.enterInputOutputSectionParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInputOutputSectionParagraph) {
			listener.exitInputOutputSectionParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInputOutputSectionParagraph) {
			return visitor.visitInputOutputSectionParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileControlParagraphContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(Cobol85Parser.FILE_CONTROL, 0); }
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public fileControlEntry(): FileControlEntryContext[];
	public fileControlEntry(i: number): FileControlEntryContext;
	public fileControlEntry(i?: number): FileControlEntryContext | FileControlEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileControlEntryContext);
		} else {
			return this.getRuleContext(i, FileControlEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileControlParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileControlParagraph) {
			listener.enterFileControlParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileControlParagraph) {
			listener.exitFileControlParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileControlParagraph) {
			return visitor.visitFileControlParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileControlEntryContext extends ParserRuleContext {
	public selectClause(): SelectClauseContext {
		return this.getRuleContext(0, SelectClauseContext);
	}
	public fileControlClause(): FileControlClauseContext[];
	public fileControlClause(i: number): FileControlClauseContext;
	public fileControlClause(i?: number): FileControlClauseContext | FileControlClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileControlClauseContext);
		} else {
			return this.getRuleContext(i, FileControlClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileControlEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileControlEntry) {
			listener.enterFileControlEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileControlEntry) {
			listener.exitFileControlEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileControlEntry) {
			return visitor.visitFileControlEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectClauseContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(Cobol85Parser.SELECT, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OPTIONAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_selectClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSelectClause) {
			listener.enterSelectClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSelectClause) {
			listener.exitSelectClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSelectClause) {
			return visitor.visitSelectClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileControlClauseContext extends ParserRuleContext {
	public assignClause(): AssignClauseContext | undefined {
		return this.tryGetRuleContext(0, AssignClauseContext);
	}
	public reserveClause(): ReserveClauseContext | undefined {
		return this.tryGetRuleContext(0, ReserveClauseContext);
	}
	public organizationClause(): OrganizationClauseContext | undefined {
		return this.tryGetRuleContext(0, OrganizationClauseContext);
	}
	public paddingCharacterClause(): PaddingCharacterClauseContext | undefined {
		return this.tryGetRuleContext(0, PaddingCharacterClauseContext);
	}
	public recordDelimiterClause(): RecordDelimiterClauseContext | undefined {
		return this.tryGetRuleContext(0, RecordDelimiterClauseContext);
	}
	public accessModeClause(): AccessModeClauseContext | undefined {
		return this.tryGetRuleContext(0, AccessModeClauseContext);
	}
	public recordKeyClause(): RecordKeyClauseContext | undefined {
		return this.tryGetRuleContext(0, RecordKeyClauseContext);
	}
	public alternateRecordKeyClause(): AlternateRecordKeyClauseContext | undefined {
		return this.tryGetRuleContext(0, AlternateRecordKeyClauseContext);
	}
	public fileStatusClause(): FileStatusClauseContext | undefined {
		return this.tryGetRuleContext(0, FileStatusClauseContext);
	}
	public passwordClause(): PasswordClauseContext | undefined {
		return this.tryGetRuleContext(0, PasswordClauseContext);
	}
	public relativeKeyClause(): RelativeKeyClauseContext | undefined {
		return this.tryGetRuleContext(0, RelativeKeyClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileControlClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileControlClause) {
			listener.enterFileControlClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileControlClause) {
			listener.exitFileControlClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileControlClause) {
			return visitor.visitFileControlClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AssignClauseContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(Cobol85Parser.ASSIGN, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISK, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); }
	public KEYBOARD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEYBOARD, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PORT, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PRINTER, 0); }
	public READER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.READER, 0); }
	public REMOTE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REMOTE, 0); }
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TAPE, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.VIRTUAL, 0); }
	public assignmentName(): AssignmentNameContext | undefined {
		return this.tryGetRuleContext(0, AssignmentNameContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_assignClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAssignClause) {
			listener.enterAssignClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAssignClause) {
			listener.exitAssignClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAssignClause) {
			return visitor.visitAssignClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveClauseContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(Cobol85Parser.RESERVE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public ALTERNATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALTERNATE, 0); }
	public AREA(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reserveClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReserveClause) {
			listener.enterReserveClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReserveClause) {
			listener.exitReserveClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReserveClause) {
			return visitor.visitReserveClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationClauseContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SEQUENTIAL, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ORGANIZATION, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORD, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BINARY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_organizationClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOrganizationClause) {
			listener.enterOrganizationClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOrganizationClause) {
			listener.exitOrganizationClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOrganizationClause) {
			return visitor.visitOrganizationClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingCharacterClauseContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(Cobol85Parser.PADDING, 0); }
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_paddingCharacterClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPaddingCharacterClause) {
			listener.enterPaddingCharacterClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPaddingCharacterClause) {
			listener.exitPaddingCharacterClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPaddingCharacterClause) {
			return visitor.visitPaddingCharacterClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordDelimiterClauseContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(Cobol85Parser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(Cobol85Parser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.STANDARD_1, 0); }
	public IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IMPLICIT, 0); }
	public assignmentName(): AssignmentNameContext | undefined {
		return this.tryGetRuleContext(0, AssignmentNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordDelimiterClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordDelimiterClause) {
			listener.enterRecordDelimiterClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordDelimiterClause) {
			listener.exitRecordDelimiterClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordDelimiterClause) {
			return visitor.visitRecordDelimiterClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AccessModeClauseContext extends ParserRuleContext {
	public ACCESS(): TerminalNode { return this.getToken(Cobol85Parser.ACCESS, 0); }
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DYNAMIC, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EXCLUSIVE, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_accessModeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAccessModeClause) {
			listener.enterAccessModeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAccessModeClause) {
			listener.exitAccessModeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAccessModeClause) {
			return visitor.visitAccessModeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordKeyClauseContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(Cobol85Parser.RECORD, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public passwordClause(): PasswordClauseContext | undefined {
		return this.tryGetRuleContext(0, PasswordClauseContext);
	}
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DUPLICATES, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordKeyClause) {
			listener.enterRecordKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordKeyClause) {
			listener.exitRecordKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordKeyClause) {
			return visitor.visitRecordKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlternateRecordKeyClauseContext extends ParserRuleContext {
	public ALTERNATE(): TerminalNode { return this.getToken(Cobol85Parser.ALTERNATE, 0); }
	public RECORD(): TerminalNode { return this.getToken(Cobol85Parser.RECORD, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public passwordClause(): PasswordClauseContext | undefined {
		return this.tryGetRuleContext(0, PasswordClauseContext);
	}
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DUPLICATES, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alternateRecordKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlternateRecordKeyClause) {
			listener.enterAlternateRecordKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlternateRecordKeyClause) {
			listener.exitAlternateRecordKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlternateRecordKeyClause) {
			return visitor.visitAlternateRecordKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PasswordClauseContext extends ParserRuleContext {
	public PASSWORD(): TerminalNode { return this.getToken(Cobol85Parser.PASSWORD, 0); }
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_passwordClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPasswordClause) {
			listener.enterPasswordClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPasswordClause) {
			listener.exitPasswordClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPasswordClause) {
			return visitor.visitPasswordClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileStatusClauseContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(Cobol85Parser.STATUS, 0); }
	public qualifiedDataName(): QualifiedDataNameContext[];
	public qualifiedDataName(i: number): QualifiedDataNameContext;
	public qualifiedDataName(i?: number): QualifiedDataNameContext | QualifiedDataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedDataNameContext);
		} else {
			return this.getRuleContext(i, QualifiedDataNameContext);
		}
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FILE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileStatusClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileStatusClause) {
			listener.enterFileStatusClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileStatusClause) {
			listener.exitFileStatusClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileStatusClause) {
			return visitor.visitFileStatusClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelativeKeyClauseContext extends ParserRuleContext {
	public RELATIVE(): TerminalNode { return this.getToken(Cobol85Parser.RELATIVE, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_relativeKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRelativeKeyClause) {
			listener.enterRelativeKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRelativeKeyClause) {
			listener.exitRelativeKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRelativeKeyClause) {
			return visitor.visitRelativeKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IoControlParagraphContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(Cobol85Parser.I_O_CONTROL, 0); }
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public fileName(): FileNameContext | undefined {
		return this.tryGetRuleContext(0, FileNameContext);
	}
	public ioControlClause(): IoControlClauseContext[];
	public ioControlClause(i: number): IoControlClauseContext;
	public ioControlClause(i?: number): IoControlClauseContext | IoControlClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IoControlClauseContext);
		} else {
			return this.getRuleContext(i, IoControlClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_ioControlParagraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIoControlParagraph) {
			listener.enterIoControlParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIoControlParagraph) {
			listener.exitIoControlParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIoControlParagraph) {
			return visitor.visitIoControlParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IoControlClauseContext extends ParserRuleContext {
	public rerunClause(): RerunClauseContext | undefined {
		return this.tryGetRuleContext(0, RerunClauseContext);
	}
	public sameClause(): SameClauseContext | undefined {
		return this.tryGetRuleContext(0, SameClauseContext);
	}
	public multipleFileClause(): MultipleFileClauseContext | undefined {
		return this.tryGetRuleContext(0, MultipleFileClauseContext);
	}
	public commitmentControlClause(): CommitmentControlClauseContext | undefined {
		return this.tryGetRuleContext(0, CommitmentControlClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_ioControlClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIoControlClause) {
			listener.enterIoControlClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIoControlClause) {
			listener.exitIoControlClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIoControlClause) {
			return visitor.visitIoControlClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunClauseContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(Cobol85Parser.RERUN, 0); }
	public EVERY(): TerminalNode { return this.getToken(Cobol85Parser.EVERY, 0); }
	public rerunEveryRecords(): RerunEveryRecordsContext | undefined {
		return this.tryGetRuleContext(0, RerunEveryRecordsContext);
	}
	public rerunEveryOf(): RerunEveryOfContext | undefined {
		return this.tryGetRuleContext(0, RerunEveryOfContext);
	}
	public rerunEveryClock(): RerunEveryClockContext | undefined {
		return this.tryGetRuleContext(0, RerunEveryClockContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public assignmentName(): AssignmentNameContext | undefined {
		return this.tryGetRuleContext(0, AssignmentNameContext);
	}
	public fileName(): FileNameContext | undefined {
		return this.tryGetRuleContext(0, FileNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_rerunClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRerunClause) {
			listener.enterRerunClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRerunClause) {
			listener.exitRerunClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRerunClause) {
			return visitor.visitRerunClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunEveryRecordsContext extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public RECORDS(): TerminalNode { return this.getToken(Cobol85Parser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_rerunEveryRecords; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRerunEveryRecords) {
			listener.enterRerunEveryRecords(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRerunEveryRecords) {
			listener.exitRerunEveryRecords(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRerunEveryRecords) {
			return visitor.visitRerunEveryRecords(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunEveryOfContext extends ParserRuleContext {
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.OF);
		} else {
			return this.getToken(Cobol85Parser.OF, i);
		}
	}
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public REEL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_rerunEveryOf; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRerunEveryOf) {
			listener.enterRerunEveryOf(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRerunEveryOf) {
			listener.exitRerunEveryOf(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRerunEveryOf) {
			return visitor.visitRerunEveryOf(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunEveryClockContext extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CLOCK_UNITS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_rerunEveryClock; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRerunEveryClock) {
			listener.enterRerunEveryClock(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRerunEveryClock) {
			listener.exitRerunEveryClock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRerunEveryClock) {
			return visitor.visitRerunEveryClock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameClauseContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(Cobol85Parser.SAME, 0); }
	public AREA(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public fileName(): FileNameContext[];
	public fileName(i: number): FileNameContext;
	public fileName(i?: number): FileNameContext | FileNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileNameContext);
		} else {
			return this.getRuleContext(i, FileNameContext);
		}
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sameClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSameClause) {
			listener.enterSameClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSameClause) {
			listener.exitSameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSameClause) {
			return visitor.visitSameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultipleFileClauseContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(Cobol85Parser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(Cobol85Parser.FILE, 0); }
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); }
	public multipleFilePosition(): MultipleFilePositionContext[];
	public multipleFilePosition(i: number): MultipleFilePositionContext;
	public multipleFilePosition(i?: number): MultipleFilePositionContext | MultipleFilePositionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MultipleFilePositionContext);
		} else {
			return this.getRuleContext(i, MultipleFilePositionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multipleFileClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultipleFileClause) {
			listener.enterMultipleFileClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultipleFileClause) {
			listener.exitMultipleFileClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultipleFileClause) {
			return visitor.visitMultipleFileClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultipleFilePositionContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.POSITION, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multipleFilePosition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultipleFilePosition) {
			listener.enterMultipleFilePosition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultipleFilePosition) {
			listener.exitMultipleFilePosition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultipleFilePosition) {
			return visitor.visitMultipleFilePosition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommitmentControlClauseContext extends ParserRuleContext {
	public COMMITMENT(): TerminalNode { return this.getToken(Cobol85Parser.COMMITMENT, 0); }
	public CONTROL(): TerminalNode { return this.getToken(Cobol85Parser.CONTROL, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_commitmentControlClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCommitmentControlClause) {
			listener.enterCommitmentControlClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCommitmentControlClause) {
			listener.exitCommitmentControlClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCommitmentControlClause) {
			return visitor.visitCommitmentControlClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDivisionContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(Cobol85Parser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(Cobol85Parser.DIVISION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public dataDivisionSection(): DataDivisionSectionContext[];
	public dataDivisionSection(i: number): DataDivisionSectionContext;
	public dataDivisionSection(i?: number): DataDivisionSectionContext | DataDivisionSectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDivisionSectionContext);
		} else {
			return this.getRuleContext(i, DataDivisionSectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDivision; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDivision) {
			listener.enterDataDivision(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDivision) {
			listener.exitDataDivision(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDivision) {
			return visitor.visitDataDivision(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDivisionSectionContext extends ParserRuleContext {
	public fileSection(): FileSectionContext | undefined {
		return this.tryGetRuleContext(0, FileSectionContext);
	}
	public dataBaseSection(): DataBaseSectionContext | undefined {
		return this.tryGetRuleContext(0, DataBaseSectionContext);
	}
	public workingStorageSection(): WorkingStorageSectionContext | undefined {
		return this.tryGetRuleContext(0, WorkingStorageSectionContext);
	}
	public linkageSection(): LinkageSectionContext | undefined {
		return this.tryGetRuleContext(0, LinkageSectionContext);
	}
	public communicationSection(): CommunicationSectionContext | undefined {
		return this.tryGetRuleContext(0, CommunicationSectionContext);
	}
	public localStorageSection(): LocalStorageSectionContext | undefined {
		return this.tryGetRuleContext(0, LocalStorageSectionContext);
	}
	public screenSection(): ScreenSectionContext | undefined {
		return this.tryGetRuleContext(0, ScreenSectionContext);
	}
	public reportSection(): ReportSectionContext | undefined {
		return this.tryGetRuleContext(0, ReportSectionContext);
	}
	public programLibrarySection(): ProgramLibrarySectionContext | undefined {
		return this.tryGetRuleContext(0, ProgramLibrarySectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDivisionSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDivisionSection) {
			listener.enterDataDivisionSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDivisionSection) {
			listener.exitDataDivisionSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDivisionSection) {
			return visitor.visitDataDivisionSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileSectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(Cobol85Parser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public fileDescriptionEntry(): FileDescriptionEntryContext[];
	public fileDescriptionEntry(i: number): FileDescriptionEntryContext;
	public fileDescriptionEntry(i?: number): FileDescriptionEntryContext | FileDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, FileDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileSection) {
			listener.enterFileSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileSection) {
			listener.exitFileSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileSection) {
			return visitor.visitFileSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileDescriptionEntryContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public FD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FD, 0); }
	public SD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SD, 0); }
	public fileDescriptionEntryClause(): FileDescriptionEntryClauseContext[];
	public fileDescriptionEntryClause(i: number): FileDescriptionEntryClauseContext;
	public fileDescriptionEntryClause(i?: number): FileDescriptionEntryClauseContext | FileDescriptionEntryClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileDescriptionEntryClauseContext);
		} else {
			return this.getRuleContext(i, FileDescriptionEntryClauseContext);
		}
	}
	public dataDescriptionEntry(): DataDescriptionEntryContext[];
	public dataDescriptionEntry(i: number): DataDescriptionEntryContext;
	public dataDescriptionEntry(i?: number): DataDescriptionEntryContext | DataDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, DataDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileDescriptionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileDescriptionEntry) {
			listener.enterFileDescriptionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileDescriptionEntry) {
			listener.exitFileDescriptionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileDescriptionEntry) {
			return visitor.visitFileDescriptionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileDescriptionEntryClauseContext extends ParserRuleContext {
	public externalClause(): ExternalClauseContext | undefined {
		return this.tryGetRuleContext(0, ExternalClauseContext);
	}
	public globalClause(): GlobalClauseContext | undefined {
		return this.tryGetRuleContext(0, GlobalClauseContext);
	}
	public blockContainsClause(): BlockContainsClauseContext | undefined {
		return this.tryGetRuleContext(0, BlockContainsClauseContext);
	}
	public recordContainsClause(): RecordContainsClauseContext | undefined {
		return this.tryGetRuleContext(0, RecordContainsClauseContext);
	}
	public labelRecordsClause(): LabelRecordsClauseContext | undefined {
		return this.tryGetRuleContext(0, LabelRecordsClauseContext);
	}
	public valueOfClause(): ValueOfClauseContext | undefined {
		return this.tryGetRuleContext(0, ValueOfClauseContext);
	}
	public dataRecordsClause(): DataRecordsClauseContext | undefined {
		return this.tryGetRuleContext(0, DataRecordsClauseContext);
	}
	public linageClause(): LinageClauseContext | undefined {
		return this.tryGetRuleContext(0, LinageClauseContext);
	}
	public codeSetClause(): CodeSetClauseContext | undefined {
		return this.tryGetRuleContext(0, CodeSetClauseContext);
	}
	public reportClause(): ReportClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportClauseContext);
	}
	public recordingModeClause(): RecordingModeClauseContext | undefined {
		return this.tryGetRuleContext(0, RecordingModeClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileDescriptionEntryClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileDescriptionEntryClause) {
			listener.enterFileDescriptionEntryClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileDescriptionEntryClause) {
			listener.exitFileDescriptionEntryClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileDescriptionEntryClause) {
			return visitor.visitFileDescriptionEntryClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExternalClauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode { return this.getToken(Cobol85Parser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_externalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterExternalClause) {
			listener.enterExternalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitExternalClause) {
			listener.exitExternalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitExternalClause) {
			return visitor.visitExternalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GlobalClauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode { return this.getToken(Cobol85Parser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_globalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterGlobalClause) {
			listener.enterGlobalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitGlobalClause) {
			listener.exitGlobalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitGlobalClause) {
			return visitor.visitGlobalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockContainsClauseContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(Cobol85Parser.BLOCK, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); }
	public blockContainsTo(): BlockContainsToContext | undefined {
		return this.tryGetRuleContext(0, BlockContainsToContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_blockContainsClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterBlockContainsClause) {
			listener.enterBlockContainsClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitBlockContainsClause) {
			listener.exitBlockContainsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitBlockContainsClause) {
			return visitor.visitBlockContainsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockContainsToContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_blockContainsTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterBlockContainsTo) {
			listener.enterBlockContainsTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitBlockContainsTo) {
			listener.exitBlockContainsTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitBlockContainsTo) {
			return visitor.visitBlockContainsTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContainsClauseContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(Cobol85Parser.RECORD, 0); }
	public recordContainsClauseFormat1(): RecordContainsClauseFormat1Context | undefined {
		return this.tryGetRuleContext(0, RecordContainsClauseFormat1Context);
	}
	public recordContainsClauseFormat2(): RecordContainsClauseFormat2Context | undefined {
		return this.tryGetRuleContext(0, RecordContainsClauseFormat2Context);
	}
	public recordContainsClauseFormat3(): RecordContainsClauseFormat3Context | undefined {
		return this.tryGetRuleContext(0, RecordContainsClauseFormat3Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordContainsClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordContainsClause) {
			listener.enterRecordContainsClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordContainsClause) {
			listener.exitRecordContainsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordContainsClause) {
			return visitor.visitRecordContainsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContainsClauseFormat1Context extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordContainsClauseFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordContainsClauseFormat1) {
			listener.enterRecordContainsClauseFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordContainsClauseFormat1) {
			listener.exitRecordContainsClauseFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordContainsClauseFormat1) {
			return visitor.visitRecordContainsClauseFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContainsClauseFormat2Context extends ParserRuleContext {
	public VARYING(): TerminalNode { return this.getToken(Cobol85Parser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIZE, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEPENDING, 0); }
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FROM, 0); }
	public recordContainsTo(): RecordContainsToContext | undefined {
		return this.tryGetRuleContext(0, RecordContainsToContext);
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordContainsClauseFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordContainsClauseFormat2) {
			listener.enterRecordContainsClauseFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordContainsClauseFormat2) {
			listener.exitRecordContainsClauseFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordContainsClauseFormat2) {
			return visitor.visitRecordContainsClauseFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContainsClauseFormat3Context extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public recordContainsTo(): RecordContainsToContext {
		return this.getRuleContext(0, RecordContainsToContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTAINS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordContainsClauseFormat3; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordContainsClauseFormat3) {
			listener.enterRecordContainsClauseFormat3(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordContainsClauseFormat3) {
			listener.exitRecordContainsClauseFormat3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordContainsClauseFormat3) {
			return visitor.visitRecordContainsClauseFormat3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContainsToContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordContainsTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordContainsTo) {
			listener.enterRecordContainsTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordContainsTo) {
			listener.exitRecordContainsTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordContainsTo) {
			return visitor.visitRecordContainsTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelRecordsClauseContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(Cobol85Parser.LABEL, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORD, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORDS, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OMITTED, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.STANDARD, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ARE, 0); }
	public dataName(): DataNameContext[];
	public dataName(i: number): DataNameContext;
	public dataName(i?: number): DataNameContext | DataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataNameContext);
		} else {
			return this.getRuleContext(i, DataNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_labelRecordsClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLabelRecordsClause) {
			listener.enterLabelRecordsClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLabelRecordsClause) {
			listener.exitLabelRecordsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLabelRecordsClause) {
			return visitor.visitLabelRecordsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValueOfClauseContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(Cobol85Parser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(Cobol85Parser.OF, 0); }
	public valuePair(): ValuePairContext[];
	public valuePair(i: number): ValuePairContext;
	public valuePair(i?: number): ValuePairContext | ValuePairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValuePairContext);
		} else {
			return this.getRuleContext(i, ValuePairContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_valueOfClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterValueOfClause) {
			listener.enterValueOfClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitValueOfClause) {
			listener.exitValueOfClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitValueOfClause) {
			return visitor.visitValueOfClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValuePairContext extends ParserRuleContext {
	public systemName(): SystemNameContext {
		return this.getRuleContext(0, SystemNameContext);
	}
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_valuePair; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterValuePair) {
			listener.enterValuePair(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitValuePair) {
			listener.exitValuePair(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitValuePair) {
			return visitor.visitValuePair(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataRecordsClauseContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(Cobol85Parser.DATA, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORD, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORDS, 0); }
	public dataName(): DataNameContext[];
	public dataName(i: number): DataNameContext;
	public dataName(i?: number): DataNameContext | DataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataNameContext);
		} else {
			return this.getRuleContext(i, DataNameContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataRecordsClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataRecordsClause) {
			listener.enterDataRecordsClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataRecordsClause) {
			listener.exitDataRecordsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataRecordsClause) {
			return visitor.visitDataRecordsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageClauseContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(Cobol85Parser.LINAGE, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINES, 0); }
	public linageAt(): LinageAtContext[];
	public linageAt(i: number): LinageAtContext;
	public linageAt(i?: number): LinageAtContext | LinageAtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LinageAtContext);
		} else {
			return this.getRuleContext(i, LinageAtContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_linageClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLinageClause) {
			listener.enterLinageClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLinageClause) {
			listener.exitLinageClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLinageClause) {
			return visitor.visitLinageClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageAtContext extends ParserRuleContext {
	public linageFootingAt(): LinageFootingAtContext | undefined {
		return this.tryGetRuleContext(0, LinageFootingAtContext);
	}
	public linageLinesAtTop(): LinageLinesAtTopContext | undefined {
		return this.tryGetRuleContext(0, LinageLinesAtTopContext);
	}
	public linageLinesAtBottom(): LinageLinesAtBottomContext | undefined {
		return this.tryGetRuleContext(0, LinageLinesAtBottomContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_linageAt; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLinageAt) {
			listener.enterLinageAt(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLinageAt) {
			listener.exitLinageAt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLinageAt) {
			return visitor.visitLinageAt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageFootingAtContext extends ParserRuleContext {
	public FOOTING(): TerminalNode { return this.getToken(Cobol85Parser.FOOTING, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_linageFootingAt; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLinageFootingAt) {
			listener.enterLinageFootingAt(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLinageFootingAt) {
			listener.exitLinageFootingAt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLinageFootingAt) {
			return visitor.visitLinageFootingAt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageLinesAtTopContext extends ParserRuleContext {
	public TOP(): TerminalNode { return this.getToken(Cobol85Parser.TOP, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public LINES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINES, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_linageLinesAtTop; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLinageLinesAtTop) {
			listener.enterLinageLinesAtTop(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLinageLinesAtTop) {
			listener.exitLinageLinesAtTop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLinageLinesAtTop) {
			return visitor.visitLinageLinesAtTop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageLinesAtBottomContext extends ParserRuleContext {
	public BOTTOM(): TerminalNode { return this.getToken(Cobol85Parser.BOTTOM, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public LINES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINES, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_linageLinesAtBottom; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLinageLinesAtBottom) {
			listener.enterLinageLinesAtBottom(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLinageLinesAtBottom) {
			listener.exitLinageLinesAtBottom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLinageLinesAtBottom) {
			return visitor.visitLinageLinesAtBottom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordingModeClauseContext extends ParserRuleContext {
	public RECORDING(): TerminalNode { return this.getToken(Cobol85Parser.RECORDING, 0); }
	public modeStatement(): ModeStatementContext {
		return this.getRuleContext(0, ModeStatementContext);
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordingModeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordingModeClause) {
			listener.enterRecordingModeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordingModeClause) {
			listener.exitRecordingModeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordingModeClause) {
			return visitor.visitRecordingModeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ModeStatementContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_modeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterModeStatement) {
			listener.enterModeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitModeStatement) {
			listener.exitModeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitModeStatement) {
			return visitor.visitModeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CodeSetClauseContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(Cobol85Parser.CODE_SET, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_codeSetClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCodeSetClause) {
			listener.enterCodeSetClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCodeSetClause) {
			listener.exitCodeSetClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCodeSetClause) {
			return visitor.visitCodeSetClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportClauseContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REPORTS, 0); }
	public reportName(): ReportNameContext[];
	public reportName(i: number): ReportNameContext;
	public reportName(i?: number): ReportNameContext | ReportNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportNameContext);
		} else {
			return this.getRuleContext(i, ReportNameContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportClause) {
			listener.enterReportClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportClause) {
			listener.exitReportClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportClause) {
			return visitor.visitReportClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataBaseSectionContext extends ParserRuleContext {
	public DATA_BASE(): TerminalNode { return this.getToken(Cobol85Parser.DATA_BASE, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public dataBaseSectionEntry(): DataBaseSectionEntryContext[];
	public dataBaseSectionEntry(i: number): DataBaseSectionEntryContext;
	public dataBaseSectionEntry(i?: number): DataBaseSectionEntryContext | DataBaseSectionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataBaseSectionEntryContext);
		} else {
			return this.getRuleContext(i, DataBaseSectionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataBaseSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataBaseSection) {
			listener.enterDataBaseSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataBaseSection) {
			listener.exitDataBaseSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataBaseSection) {
			return visitor.visitDataBaseSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataBaseSectionEntryContext extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public literal(): LiteralContext[];
	public literal(i: number): LiteralContext;
	public literal(i?: number): LiteralContext | LiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LiteralContext);
		} else {
			return this.getRuleContext(i, LiteralContext);
		}
	}
	public INVOKE(): TerminalNode { return this.getToken(Cobol85Parser.INVOKE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataBaseSectionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataBaseSectionEntry) {
			listener.enterDataBaseSectionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataBaseSectionEntry) {
			listener.exitDataBaseSectionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataBaseSectionEntry) {
			return visitor.visitDataBaseSectionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WorkingStorageSectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(Cobol85Parser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public dataDescriptionEntry(): DataDescriptionEntryContext[];
	public dataDescriptionEntry(i: number): DataDescriptionEntryContext;
	public dataDescriptionEntry(i?: number): DataDescriptionEntryContext | DataDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, DataDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_workingStorageSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWorkingStorageSection) {
			listener.enterWorkingStorageSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWorkingStorageSection) {
			listener.exitWorkingStorageSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWorkingStorageSection) {
			return visitor.visitWorkingStorageSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinkageSectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(Cobol85Parser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public dataDescriptionEntry(): DataDescriptionEntryContext[];
	public dataDescriptionEntry(i: number): DataDescriptionEntryContext;
	public dataDescriptionEntry(i?: number): DataDescriptionEntryContext | DataDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, DataDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_linkageSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLinkageSection) {
			listener.enterLinkageSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLinkageSection) {
			listener.exitLinkageSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLinkageSection) {
			return visitor.visitLinkageSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommunicationSectionContext extends ParserRuleContext {
	public COMMUNICATION(): TerminalNode { return this.getToken(Cobol85Parser.COMMUNICATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public communicationDescriptionEntry(): CommunicationDescriptionEntryContext[];
	public communicationDescriptionEntry(i: number): CommunicationDescriptionEntryContext;
	public communicationDescriptionEntry(i?: number): CommunicationDescriptionEntryContext | CommunicationDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CommunicationDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, CommunicationDescriptionEntryContext);
		}
	}
	public dataDescriptionEntry(): DataDescriptionEntryContext[];
	public dataDescriptionEntry(i: number): DataDescriptionEntryContext;
	public dataDescriptionEntry(i?: number): DataDescriptionEntryContext | DataDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, DataDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_communicationSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCommunicationSection) {
			listener.enterCommunicationSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCommunicationSection) {
			listener.exitCommunicationSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCommunicationSection) {
			return visitor.visitCommunicationSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommunicationDescriptionEntryContext extends ParserRuleContext {
	public communicationDescriptionEntryFormat1(): CommunicationDescriptionEntryFormat1Context | undefined {
		return this.tryGetRuleContext(0, CommunicationDescriptionEntryFormat1Context);
	}
	public communicationDescriptionEntryFormat2(): CommunicationDescriptionEntryFormat2Context | undefined {
		return this.tryGetRuleContext(0, CommunicationDescriptionEntryFormat2Context);
	}
	public communicationDescriptionEntryFormat3(): CommunicationDescriptionEntryFormat3Context | undefined {
		return this.tryGetRuleContext(0, CommunicationDescriptionEntryFormat3Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_communicationDescriptionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCommunicationDescriptionEntry) {
			listener.enterCommunicationDescriptionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCommunicationDescriptionEntry) {
			listener.exitCommunicationDescriptionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCommunicationDescriptionEntry) {
			return visitor.visitCommunicationDescriptionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommunicationDescriptionEntryFormat1Context extends ParserRuleContext {
	public CD(): TerminalNode { return this.getToken(Cobol85Parser.CD, 0); }
	public cdName(): CdNameContext {
		return this.getRuleContext(0, CdNameContext);
	}
	public INPUT(): TerminalNode { return this.getToken(Cobol85Parser.INPUT, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INITIAL, 0); }
	public dataDescName(): DataDescNameContext[];
	public dataDescName(i: number): DataDescNameContext;
	public dataDescName(i?: number): DataDescNameContext | DataDescNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescNameContext);
		} else {
			return this.getRuleContext(i, DataDescNameContext);
		}
	}
	public symbolicQueueClause(): SymbolicQueueClauseContext[];
	public symbolicQueueClause(i: number): SymbolicQueueClauseContext;
	public symbolicQueueClause(i?: number): SymbolicQueueClauseContext | SymbolicQueueClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicQueueClauseContext);
		} else {
			return this.getRuleContext(i, SymbolicQueueClauseContext);
		}
	}
	public symbolicSubQueueClause(): SymbolicSubQueueClauseContext[];
	public symbolicSubQueueClause(i: number): SymbolicSubQueueClauseContext;
	public symbolicSubQueueClause(i?: number): SymbolicSubQueueClauseContext | SymbolicSubQueueClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicSubQueueClauseContext);
		} else {
			return this.getRuleContext(i, SymbolicSubQueueClauseContext);
		}
	}
	public messageDateClause(): MessageDateClauseContext[];
	public messageDateClause(i: number): MessageDateClauseContext;
	public messageDateClause(i?: number): MessageDateClauseContext | MessageDateClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MessageDateClauseContext);
		} else {
			return this.getRuleContext(i, MessageDateClauseContext);
		}
	}
	public messageTimeClause(): MessageTimeClauseContext[];
	public messageTimeClause(i: number): MessageTimeClauseContext;
	public messageTimeClause(i?: number): MessageTimeClauseContext | MessageTimeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MessageTimeClauseContext);
		} else {
			return this.getRuleContext(i, MessageTimeClauseContext);
		}
	}
	public symbolicSourceClause(): SymbolicSourceClauseContext[];
	public symbolicSourceClause(i: number): SymbolicSourceClauseContext;
	public symbolicSourceClause(i?: number): SymbolicSourceClauseContext | SymbolicSourceClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicSourceClauseContext);
		} else {
			return this.getRuleContext(i, SymbolicSourceClauseContext);
		}
	}
	public textLengthClause(): TextLengthClauseContext[];
	public textLengthClause(i: number): TextLengthClauseContext;
	public textLengthClause(i?: number): TextLengthClauseContext | TextLengthClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextLengthClauseContext);
		} else {
			return this.getRuleContext(i, TextLengthClauseContext);
		}
	}
	public endKeyClause(): EndKeyClauseContext[];
	public endKeyClause(i: number): EndKeyClauseContext;
	public endKeyClause(i?: number): EndKeyClauseContext | EndKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndKeyClauseContext);
		} else {
			return this.getRuleContext(i, EndKeyClauseContext);
		}
	}
	public statusKeyClause(): StatusKeyClauseContext[];
	public statusKeyClause(i: number): StatusKeyClauseContext;
	public statusKeyClause(i?: number): StatusKeyClauseContext | StatusKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatusKeyClauseContext);
		} else {
			return this.getRuleContext(i, StatusKeyClauseContext);
		}
	}
	public messageCountClause(): MessageCountClauseContext[];
	public messageCountClause(i: number): MessageCountClauseContext;
	public messageCountClause(i?: number): MessageCountClauseContext | MessageCountClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MessageCountClauseContext);
		} else {
			return this.getRuleContext(i, MessageCountClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_communicationDescriptionEntryFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCommunicationDescriptionEntryFormat1) {
			listener.enterCommunicationDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCommunicationDescriptionEntryFormat1) {
			listener.exitCommunicationDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCommunicationDescriptionEntryFormat1) {
			return visitor.visitCommunicationDescriptionEntryFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommunicationDescriptionEntryFormat2Context extends ParserRuleContext {
	public CD(): TerminalNode { return this.getToken(Cobol85Parser.CD, 0); }
	public cdName(): CdNameContext {
		return this.getRuleContext(0, CdNameContext);
	}
	public OUTPUT(): TerminalNode { return this.getToken(Cobol85Parser.OUTPUT, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public destinationCountClause(): DestinationCountClauseContext[];
	public destinationCountClause(i: number): DestinationCountClauseContext;
	public destinationCountClause(i?: number): DestinationCountClauseContext | DestinationCountClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DestinationCountClauseContext);
		} else {
			return this.getRuleContext(i, DestinationCountClauseContext);
		}
	}
	public textLengthClause(): TextLengthClauseContext[];
	public textLengthClause(i: number): TextLengthClauseContext;
	public textLengthClause(i?: number): TextLengthClauseContext | TextLengthClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextLengthClauseContext);
		} else {
			return this.getRuleContext(i, TextLengthClauseContext);
		}
	}
	public statusKeyClause(): StatusKeyClauseContext[];
	public statusKeyClause(i: number): StatusKeyClauseContext;
	public statusKeyClause(i?: number): StatusKeyClauseContext | StatusKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatusKeyClauseContext);
		} else {
			return this.getRuleContext(i, StatusKeyClauseContext);
		}
	}
	public destinationTableClause(): DestinationTableClauseContext[];
	public destinationTableClause(i: number): DestinationTableClauseContext;
	public destinationTableClause(i?: number): DestinationTableClauseContext | DestinationTableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DestinationTableClauseContext);
		} else {
			return this.getRuleContext(i, DestinationTableClauseContext);
		}
	}
	public errorKeyClause(): ErrorKeyClauseContext[];
	public errorKeyClause(i: number): ErrorKeyClauseContext;
	public errorKeyClause(i?: number): ErrorKeyClauseContext | ErrorKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ErrorKeyClauseContext);
		} else {
			return this.getRuleContext(i, ErrorKeyClauseContext);
		}
	}
	public symbolicDestinationClause(): SymbolicDestinationClauseContext[];
	public symbolicDestinationClause(i: number): SymbolicDestinationClauseContext;
	public symbolicDestinationClause(i?: number): SymbolicDestinationClauseContext | SymbolicDestinationClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicDestinationClauseContext);
		} else {
			return this.getRuleContext(i, SymbolicDestinationClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_communicationDescriptionEntryFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCommunicationDescriptionEntryFormat2) {
			listener.enterCommunicationDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCommunicationDescriptionEntryFormat2) {
			listener.exitCommunicationDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCommunicationDescriptionEntryFormat2) {
			return visitor.visitCommunicationDescriptionEntryFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommunicationDescriptionEntryFormat3Context extends ParserRuleContext {
	public CD(): TerminalNode { return this.getToken(Cobol85Parser.CD, 0); }
	public cdName(): CdNameContext {
		return this.getRuleContext(0, CdNameContext);
	}
	public INITIAL(): TerminalNode { return this.getToken(Cobol85Parser.INITIAL, 0); }
	public I_O(): TerminalNode { return this.getToken(Cobol85Parser.I_O, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public dataDescName(): DataDescNameContext[];
	public dataDescName(i: number): DataDescNameContext;
	public dataDescName(i?: number): DataDescNameContext | DataDescNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescNameContext);
		} else {
			return this.getRuleContext(i, DataDescNameContext);
		}
	}
	public messageDateClause(): MessageDateClauseContext[];
	public messageDateClause(i: number): MessageDateClauseContext;
	public messageDateClause(i?: number): MessageDateClauseContext | MessageDateClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MessageDateClauseContext);
		} else {
			return this.getRuleContext(i, MessageDateClauseContext);
		}
	}
	public messageTimeClause(): MessageTimeClauseContext[];
	public messageTimeClause(i: number): MessageTimeClauseContext;
	public messageTimeClause(i?: number): MessageTimeClauseContext | MessageTimeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MessageTimeClauseContext);
		} else {
			return this.getRuleContext(i, MessageTimeClauseContext);
		}
	}
	public symbolicTerminalClause(): SymbolicTerminalClauseContext[];
	public symbolicTerminalClause(i: number): SymbolicTerminalClauseContext;
	public symbolicTerminalClause(i?: number): SymbolicTerminalClauseContext | SymbolicTerminalClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicTerminalClauseContext);
		} else {
			return this.getRuleContext(i, SymbolicTerminalClauseContext);
		}
	}
	public textLengthClause(): TextLengthClauseContext[];
	public textLengthClause(i: number): TextLengthClauseContext;
	public textLengthClause(i?: number): TextLengthClauseContext | TextLengthClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TextLengthClauseContext);
		} else {
			return this.getRuleContext(i, TextLengthClauseContext);
		}
	}
	public endKeyClause(): EndKeyClauseContext[];
	public endKeyClause(i: number): EndKeyClauseContext;
	public endKeyClause(i?: number): EndKeyClauseContext | EndKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndKeyClauseContext);
		} else {
			return this.getRuleContext(i, EndKeyClauseContext);
		}
	}
	public statusKeyClause(): StatusKeyClauseContext[];
	public statusKeyClause(i: number): StatusKeyClauseContext;
	public statusKeyClause(i?: number): StatusKeyClauseContext | StatusKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatusKeyClauseContext);
		} else {
			return this.getRuleContext(i, StatusKeyClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_communicationDescriptionEntryFormat3; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCommunicationDescriptionEntryFormat3) {
			listener.enterCommunicationDescriptionEntryFormat3(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCommunicationDescriptionEntryFormat3) {
			listener.exitCommunicationDescriptionEntryFormat3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCommunicationDescriptionEntryFormat3) {
			return visitor.visitCommunicationDescriptionEntryFormat3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DestinationCountClauseContext extends ParserRuleContext {
	public DESTINATION(): TerminalNode { return this.getToken(Cobol85Parser.DESTINATION, 0); }
	public COUNT(): TerminalNode { return this.getToken(Cobol85Parser.COUNT, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_destinationCountClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDestinationCountClause) {
			listener.enterDestinationCountClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDestinationCountClause) {
			listener.exitDestinationCountClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDestinationCountClause) {
			return visitor.visitDestinationCountClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DestinationTableClauseContext extends ParserRuleContext {
	public DESTINATION(): TerminalNode { return this.getToken(Cobol85Parser.DESTINATION, 0); }
	public TABLE(): TerminalNode { return this.getToken(Cobol85Parser.TABLE, 0); }
	public OCCURS(): TerminalNode { return this.getToken(Cobol85Parser.OCCURS, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public TIMES(): TerminalNode { return this.getToken(Cobol85Parser.TIMES, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INDEXED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public indexName(): IndexNameContext[];
	public indexName(i: number): IndexNameContext;
	public indexName(i?: number): IndexNameContext | IndexNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexNameContext);
		} else {
			return this.getRuleContext(i, IndexNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_destinationTableClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDestinationTableClause) {
			listener.enterDestinationTableClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDestinationTableClause) {
			listener.exitDestinationTableClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDestinationTableClause) {
			return visitor.visitDestinationTableClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EndKeyClauseContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(Cobol85Parser.END, 0); }
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_endKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEndKeyClause) {
			listener.enterEndKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEndKeyClause) {
			listener.exitEndKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEndKeyClause) {
			return visitor.visitEndKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ErrorKeyClauseContext extends ParserRuleContext {
	public ERROR(): TerminalNode { return this.getToken(Cobol85Parser.ERROR, 0); }
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_errorKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterErrorKeyClause) {
			listener.enterErrorKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitErrorKeyClause) {
			listener.exitErrorKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitErrorKeyClause) {
			return visitor.visitErrorKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MessageCountClauseContext extends ParserRuleContext {
	public COUNT(): TerminalNode { return this.getToken(Cobol85Parser.COUNT, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public MESSAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MESSAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_messageCountClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMessageCountClause) {
			listener.enterMessageCountClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMessageCountClause) {
			listener.exitMessageCountClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMessageCountClause) {
			return visitor.visitMessageCountClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MessageDateClauseContext extends ParserRuleContext {
	public MESSAGE(): TerminalNode { return this.getToken(Cobol85Parser.MESSAGE, 0); }
	public DATE(): TerminalNode { return this.getToken(Cobol85Parser.DATE, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_messageDateClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMessageDateClause) {
			listener.enterMessageDateClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMessageDateClause) {
			listener.exitMessageDateClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMessageDateClause) {
			return visitor.visitMessageDateClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MessageTimeClauseContext extends ParserRuleContext {
	public MESSAGE(): TerminalNode { return this.getToken(Cobol85Parser.MESSAGE, 0); }
	public TIME(): TerminalNode { return this.getToken(Cobol85Parser.TIME, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_messageTimeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMessageTimeClause) {
			listener.enterMessageTimeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMessageTimeClause) {
			listener.exitMessageTimeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMessageTimeClause) {
			return visitor.visitMessageTimeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatusKeyClauseContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(Cobol85Parser.STATUS, 0); }
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_statusKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStatusKeyClause) {
			listener.enterStatusKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStatusKeyClause) {
			listener.exitStatusKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStatusKeyClause) {
			return visitor.visitStatusKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicDestinationClauseContext extends ParserRuleContext {
	public DESTINATION(): TerminalNode { return this.getToken(Cobol85Parser.DESTINATION, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public SYMBOLIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicDestinationClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicDestinationClause) {
			listener.enterSymbolicDestinationClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicDestinationClause) {
			listener.exitSymbolicDestinationClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicDestinationClause) {
			return visitor.visitSymbolicDestinationClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicQueueClauseContext extends ParserRuleContext {
	public QUEUE(): TerminalNode { return this.getToken(Cobol85Parser.QUEUE, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public SYMBOLIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicQueueClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicQueueClause) {
			listener.enterSymbolicQueueClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicQueueClause) {
			listener.exitSymbolicQueueClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicQueueClause) {
			return visitor.visitSymbolicQueueClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicSourceClauseContext extends ParserRuleContext {
	public SOURCE(): TerminalNode { return this.getToken(Cobol85Parser.SOURCE, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public SYMBOLIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicSourceClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicSourceClause) {
			listener.enterSymbolicSourceClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicSourceClause) {
			listener.exitSymbolicSourceClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicSourceClause) {
			return visitor.visitSymbolicSourceClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicTerminalClauseContext extends ParserRuleContext {
	public TERMINAL(): TerminalNode { return this.getToken(Cobol85Parser.TERMINAL, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public SYMBOLIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicTerminalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicTerminalClause) {
			listener.enterSymbolicTerminalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicTerminalClause) {
			listener.exitSymbolicTerminalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicTerminalClause) {
			return visitor.visitSymbolicTerminalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicSubQueueClauseContext extends ParserRuleContext {
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public SUB_QUEUE_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SUB_QUEUE_1, 0); }
	public SUB_QUEUE_2(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SUB_QUEUE_2, 0); }
	public SUB_QUEUE_3(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SUB_QUEUE_3, 0); }
	public SYMBOLIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYMBOLIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicSubQueueClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicSubQueueClause) {
			listener.enterSymbolicSubQueueClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicSubQueueClause) {
			listener.exitSymbolicSubQueueClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicSubQueueClause) {
			return visitor.visitSymbolicSubQueueClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TextLengthClauseContext extends ParserRuleContext {
	public TEXT(): TerminalNode { return this.getToken(Cobol85Parser.TEXT, 0); }
	public LENGTH(): TerminalNode { return this.getToken(Cobol85Parser.LENGTH, 0); }
	public dataDescName(): DataDescNameContext {
		return this.getRuleContext(0, DataDescNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_textLengthClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterTextLengthClause) {
			listener.enterTextLengthClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitTextLengthClause) {
			listener.exitTextLengthClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitTextLengthClause) {
			return visitor.visitTextLengthClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LocalStorageSectionContext extends ParserRuleContext {
	public LOCAL_STORAGE(): TerminalNode { return this.getToken(Cobol85Parser.LOCAL_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public LD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LD, 0); }
	public localName(): LocalNameContext | undefined {
		return this.tryGetRuleContext(0, LocalNameContext);
	}
	public dataDescriptionEntry(): DataDescriptionEntryContext[];
	public dataDescriptionEntry(i: number): DataDescriptionEntryContext;
	public dataDescriptionEntry(i?: number): DataDescriptionEntryContext | DataDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, DataDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_localStorageSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLocalStorageSection) {
			listener.enterLocalStorageSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLocalStorageSection) {
			listener.exitLocalStorageSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLocalStorageSection) {
			return visitor.visitLocalStorageSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenSectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(Cobol85Parser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public screenDescriptionEntry(): ScreenDescriptionEntryContext[];
	public screenDescriptionEntry(i: number): ScreenDescriptionEntryContext;
	public screenDescriptionEntry(i?: number): ScreenDescriptionEntryContext | ScreenDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenSection) {
			listener.enterScreenSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenSection) {
			listener.exitScreenSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenSection) {
			return visitor.visitScreenSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionEntryContext extends ParserRuleContext {
	public INTEGERLITERAL(): TerminalNode { return this.getToken(Cobol85Parser.INTEGERLITERAL, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FILLER, 0); }
	public screenName(): ScreenNameContext | undefined {
		return this.tryGetRuleContext(0, ScreenNameContext);
	}
	public screenDescriptionBlankClause(): ScreenDescriptionBlankClauseContext[];
	public screenDescriptionBlankClause(i: number): ScreenDescriptionBlankClauseContext;
	public screenDescriptionBlankClause(i?: number): ScreenDescriptionBlankClauseContext | ScreenDescriptionBlankClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionBlankClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionBlankClauseContext);
		}
	}
	public screenDescriptionBellClause(): ScreenDescriptionBellClauseContext[];
	public screenDescriptionBellClause(i: number): ScreenDescriptionBellClauseContext;
	public screenDescriptionBellClause(i?: number): ScreenDescriptionBellClauseContext | ScreenDescriptionBellClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionBellClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionBellClauseContext);
		}
	}
	public screenDescriptionBlinkClause(): ScreenDescriptionBlinkClauseContext[];
	public screenDescriptionBlinkClause(i: number): ScreenDescriptionBlinkClauseContext;
	public screenDescriptionBlinkClause(i?: number): ScreenDescriptionBlinkClauseContext | ScreenDescriptionBlinkClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionBlinkClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionBlinkClauseContext);
		}
	}
	public screenDescriptionEraseClause(): ScreenDescriptionEraseClauseContext[];
	public screenDescriptionEraseClause(i: number): ScreenDescriptionEraseClauseContext;
	public screenDescriptionEraseClause(i?: number): ScreenDescriptionEraseClauseContext | ScreenDescriptionEraseClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionEraseClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionEraseClauseContext);
		}
	}
	public screenDescriptionLightClause(): ScreenDescriptionLightClauseContext[];
	public screenDescriptionLightClause(i: number): ScreenDescriptionLightClauseContext;
	public screenDescriptionLightClause(i?: number): ScreenDescriptionLightClauseContext | ScreenDescriptionLightClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionLightClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionLightClauseContext);
		}
	}
	public screenDescriptionGridClause(): ScreenDescriptionGridClauseContext[];
	public screenDescriptionGridClause(i: number): ScreenDescriptionGridClauseContext;
	public screenDescriptionGridClause(i?: number): ScreenDescriptionGridClauseContext | ScreenDescriptionGridClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionGridClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionGridClauseContext);
		}
	}
	public screenDescriptionReverseVideoClause(): ScreenDescriptionReverseVideoClauseContext[];
	public screenDescriptionReverseVideoClause(i: number): ScreenDescriptionReverseVideoClauseContext;
	public screenDescriptionReverseVideoClause(i?: number): ScreenDescriptionReverseVideoClauseContext | ScreenDescriptionReverseVideoClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionReverseVideoClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionReverseVideoClauseContext);
		}
	}
	public screenDescriptionUnderlineClause(): ScreenDescriptionUnderlineClauseContext[];
	public screenDescriptionUnderlineClause(i: number): ScreenDescriptionUnderlineClauseContext;
	public screenDescriptionUnderlineClause(i?: number): ScreenDescriptionUnderlineClauseContext | ScreenDescriptionUnderlineClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionUnderlineClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionUnderlineClauseContext);
		}
	}
	public screenDescriptionSizeClause(): ScreenDescriptionSizeClauseContext[];
	public screenDescriptionSizeClause(i: number): ScreenDescriptionSizeClauseContext;
	public screenDescriptionSizeClause(i?: number): ScreenDescriptionSizeClauseContext | ScreenDescriptionSizeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionSizeClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionSizeClauseContext);
		}
	}
	public screenDescriptionLineClause(): ScreenDescriptionLineClauseContext[];
	public screenDescriptionLineClause(i: number): ScreenDescriptionLineClauseContext;
	public screenDescriptionLineClause(i?: number): ScreenDescriptionLineClauseContext | ScreenDescriptionLineClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionLineClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionLineClauseContext);
		}
	}
	public screenDescriptionColumnClause(): ScreenDescriptionColumnClauseContext[];
	public screenDescriptionColumnClause(i: number): ScreenDescriptionColumnClauseContext;
	public screenDescriptionColumnClause(i?: number): ScreenDescriptionColumnClauseContext | ScreenDescriptionColumnClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionColumnClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionColumnClauseContext);
		}
	}
	public screenDescriptionForegroundColorClause(): ScreenDescriptionForegroundColorClauseContext[];
	public screenDescriptionForegroundColorClause(i: number): ScreenDescriptionForegroundColorClauseContext;
	public screenDescriptionForegroundColorClause(i?: number): ScreenDescriptionForegroundColorClauseContext | ScreenDescriptionForegroundColorClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionForegroundColorClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionForegroundColorClauseContext);
		}
	}
	public screenDescriptionBackgroundColorClause(): ScreenDescriptionBackgroundColorClauseContext[];
	public screenDescriptionBackgroundColorClause(i: number): ScreenDescriptionBackgroundColorClauseContext;
	public screenDescriptionBackgroundColorClause(i?: number): ScreenDescriptionBackgroundColorClauseContext | ScreenDescriptionBackgroundColorClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionBackgroundColorClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionBackgroundColorClauseContext);
		}
	}
	public screenDescriptionControlClause(): ScreenDescriptionControlClauseContext[];
	public screenDescriptionControlClause(i: number): ScreenDescriptionControlClauseContext;
	public screenDescriptionControlClause(i?: number): ScreenDescriptionControlClauseContext | ScreenDescriptionControlClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionControlClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionControlClauseContext);
		}
	}
	public screenDescriptionValueClause(): ScreenDescriptionValueClauseContext[];
	public screenDescriptionValueClause(i: number): ScreenDescriptionValueClauseContext;
	public screenDescriptionValueClause(i?: number): ScreenDescriptionValueClauseContext | ScreenDescriptionValueClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionValueClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionValueClauseContext);
		}
	}
	public screenDescriptionPictureClause(): ScreenDescriptionPictureClauseContext[];
	public screenDescriptionPictureClause(i: number): ScreenDescriptionPictureClauseContext;
	public screenDescriptionPictureClause(i?: number): ScreenDescriptionPictureClauseContext | ScreenDescriptionPictureClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionPictureClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionPictureClauseContext);
		}
	}
	public screenDescriptionUsageClause(): ScreenDescriptionUsageClauseContext[];
	public screenDescriptionUsageClause(i: number): ScreenDescriptionUsageClauseContext;
	public screenDescriptionUsageClause(i?: number): ScreenDescriptionUsageClauseContext | ScreenDescriptionUsageClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionUsageClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionUsageClauseContext);
		}
	}
	public screenDescriptionBlankWhenZeroClause(): ScreenDescriptionBlankWhenZeroClauseContext[];
	public screenDescriptionBlankWhenZeroClause(i: number): ScreenDescriptionBlankWhenZeroClauseContext;
	public screenDescriptionBlankWhenZeroClause(i?: number): ScreenDescriptionBlankWhenZeroClauseContext | ScreenDescriptionBlankWhenZeroClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionBlankWhenZeroClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionBlankWhenZeroClauseContext);
		}
	}
	public screenDescriptionJustifiedClause(): ScreenDescriptionJustifiedClauseContext[];
	public screenDescriptionJustifiedClause(i: number): ScreenDescriptionJustifiedClauseContext;
	public screenDescriptionJustifiedClause(i?: number): ScreenDescriptionJustifiedClauseContext | ScreenDescriptionJustifiedClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionJustifiedClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionJustifiedClauseContext);
		}
	}
	public screenDescriptionSignClause(): ScreenDescriptionSignClauseContext[];
	public screenDescriptionSignClause(i: number): ScreenDescriptionSignClauseContext;
	public screenDescriptionSignClause(i?: number): ScreenDescriptionSignClauseContext | ScreenDescriptionSignClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionSignClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionSignClauseContext);
		}
	}
	public screenDescriptionAutoClause(): ScreenDescriptionAutoClauseContext[];
	public screenDescriptionAutoClause(i: number): ScreenDescriptionAutoClauseContext;
	public screenDescriptionAutoClause(i?: number): ScreenDescriptionAutoClauseContext | ScreenDescriptionAutoClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionAutoClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionAutoClauseContext);
		}
	}
	public screenDescriptionSecureClause(): ScreenDescriptionSecureClauseContext[];
	public screenDescriptionSecureClause(i: number): ScreenDescriptionSecureClauseContext;
	public screenDescriptionSecureClause(i?: number): ScreenDescriptionSecureClauseContext | ScreenDescriptionSecureClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionSecureClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionSecureClauseContext);
		}
	}
	public screenDescriptionRequiredClause(): ScreenDescriptionRequiredClauseContext[];
	public screenDescriptionRequiredClause(i: number): ScreenDescriptionRequiredClauseContext;
	public screenDescriptionRequiredClause(i?: number): ScreenDescriptionRequiredClauseContext | ScreenDescriptionRequiredClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionRequiredClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionRequiredClauseContext);
		}
	}
	public screenDescriptionPromptClause(): ScreenDescriptionPromptClauseContext[];
	public screenDescriptionPromptClause(i: number): ScreenDescriptionPromptClauseContext;
	public screenDescriptionPromptClause(i?: number): ScreenDescriptionPromptClauseContext | ScreenDescriptionPromptClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionPromptClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionPromptClauseContext);
		}
	}
	public screenDescriptionFullClause(): ScreenDescriptionFullClauseContext[];
	public screenDescriptionFullClause(i: number): ScreenDescriptionFullClauseContext;
	public screenDescriptionFullClause(i?: number): ScreenDescriptionFullClauseContext | ScreenDescriptionFullClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionFullClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionFullClauseContext);
		}
	}
	public screenDescriptionZeroFillClause(): ScreenDescriptionZeroFillClauseContext[];
	public screenDescriptionZeroFillClause(i: number): ScreenDescriptionZeroFillClauseContext;
	public screenDescriptionZeroFillClause(i?: number): ScreenDescriptionZeroFillClauseContext | ScreenDescriptionZeroFillClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionZeroFillClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionZeroFillClauseContext);
		}
	}
	public screenDescriptionFromClause(): ScreenDescriptionFromClauseContext[];
	public screenDescriptionFromClause(i: number): ScreenDescriptionFromClauseContext;
	public screenDescriptionFromClause(i?: number): ScreenDescriptionFromClauseContext | ScreenDescriptionFromClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionFromClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionFromClauseContext);
		}
	}
	public screenDescriptionUsingClause(): ScreenDescriptionUsingClauseContext[];
	public screenDescriptionUsingClause(i: number): ScreenDescriptionUsingClauseContext;
	public screenDescriptionUsingClause(i?: number): ScreenDescriptionUsingClauseContext | ScreenDescriptionUsingClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScreenDescriptionUsingClauseContext);
		} else {
			return this.getRuleContext(i, ScreenDescriptionUsingClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionEntry) {
			listener.enterScreenDescriptionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionEntry) {
			listener.exitScreenDescriptionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionEntry) {
			return visitor.visitScreenDescriptionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionBlankClauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode { return this.getToken(Cobol85Parser.BLANK, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionBlankClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionBlankClause) {
			listener.enterScreenDescriptionBlankClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionBlankClause) {
			listener.exitScreenDescriptionBlankClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionBlankClause) {
			return visitor.visitScreenDescriptionBlankClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionBellClauseContext extends ParserRuleContext {
	public BELL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BELL, 0); }
	public BEEP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BEEP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionBellClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionBellClause) {
			listener.enterScreenDescriptionBellClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionBellClause) {
			listener.exitScreenDescriptionBellClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionBellClause) {
			return visitor.visitScreenDescriptionBellClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionBlinkClauseContext extends ParserRuleContext {
	public BLINK(): TerminalNode { return this.getToken(Cobol85Parser.BLINK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionBlinkClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionBlinkClause) {
			listener.enterScreenDescriptionBlinkClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionBlinkClause) {
			listener.exitScreenDescriptionBlinkClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionBlinkClause) {
			return visitor.visitScreenDescriptionBlinkClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionEraseClauseContext extends ParserRuleContext {
	public ERASE(): TerminalNode { return this.getToken(Cobol85Parser.ERASE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EOS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionEraseClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionEraseClause) {
			listener.enterScreenDescriptionEraseClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionEraseClause) {
			listener.exitScreenDescriptionEraseClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionEraseClause) {
			return visitor.visitScreenDescriptionEraseClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionLightClauseContext extends ParserRuleContext {
	public HIGHLIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.HIGHLIGHT, 0); }
	public LOWLIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOWLIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionLightClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionLightClause) {
			listener.enterScreenDescriptionLightClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionLightClause) {
			listener.exitScreenDescriptionLightClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionLightClause) {
			return visitor.visitScreenDescriptionLightClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionGridClauseContext extends ParserRuleContext {
	public GRID(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.GRID, 0); }
	public LEFTLINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEFTLINE, 0); }
	public OVERLINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OVERLINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionGridClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionGridClause) {
			listener.enterScreenDescriptionGridClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionGridClause) {
			listener.exitScreenDescriptionGridClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionGridClause) {
			return visitor.visitScreenDescriptionGridClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionReverseVideoClauseContext extends ParserRuleContext {
	public REVERSE_VIDEO(): TerminalNode { return this.getToken(Cobol85Parser.REVERSE_VIDEO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionReverseVideoClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionReverseVideoClause) {
			listener.enterScreenDescriptionReverseVideoClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionReverseVideoClause) {
			listener.exitScreenDescriptionReverseVideoClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionReverseVideoClause) {
			return visitor.visitScreenDescriptionReverseVideoClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionUnderlineClauseContext extends ParserRuleContext {
	public UNDERLINE(): TerminalNode { return this.getToken(Cobol85Parser.UNDERLINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionUnderlineClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionUnderlineClause) {
			listener.enterScreenDescriptionUnderlineClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionUnderlineClause) {
			listener.exitScreenDescriptionUnderlineClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionUnderlineClause) {
			return visitor.visitScreenDescriptionUnderlineClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionSizeClauseContext extends ParserRuleContext {
	public SIZE(): TerminalNode { return this.getToken(Cobol85Parser.SIZE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionSizeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionSizeClause) {
			listener.enterScreenDescriptionSizeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionSizeClause) {
			listener.exitScreenDescriptionSizeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionSizeClause) {
			return visitor.visitScreenDescriptionSizeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionLineClauseContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(Cobol85Parser.LINE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PLUS, 0); }
	public PLUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); }
	public MINUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionLineClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionLineClause) {
			listener.enterScreenDescriptionLineClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionLineClause) {
			listener.exitScreenDescriptionLineClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionLineClause) {
			return visitor.visitScreenDescriptionLineClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionColumnClauseContext extends ParserRuleContext {
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COLUMN, 0); }
	public COL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PLUS, 0); }
	public PLUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); }
	public MINUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionColumnClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionColumnClause) {
			listener.enterScreenDescriptionColumnClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionColumnClause) {
			listener.exitScreenDescriptionColumnClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionColumnClause) {
			return visitor.visitScreenDescriptionColumnClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionForegroundColorClauseContext extends ParserRuleContext {
	public FOREGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOR, 0); }
	public FOREGROUND_COLOUR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOUR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionForegroundColorClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionForegroundColorClause) {
			listener.enterScreenDescriptionForegroundColorClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionForegroundColorClause) {
			listener.exitScreenDescriptionForegroundColorClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionForegroundColorClause) {
			return visitor.visitScreenDescriptionForegroundColorClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionBackgroundColorClauseContext extends ParserRuleContext {
	public BACKGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOR, 0); }
	public BACKGROUND_COLOUR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOUR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionBackgroundColorClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionBackgroundColorClause) {
			listener.enterScreenDescriptionBackgroundColorClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionBackgroundColorClause) {
			listener.exitScreenDescriptionBackgroundColorClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionBackgroundColorClause) {
			return visitor.visitScreenDescriptionBackgroundColorClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionControlClauseContext extends ParserRuleContext {
	public CONTROL(): TerminalNode { return this.getToken(Cobol85Parser.CONTROL, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionControlClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionControlClause) {
			listener.enterScreenDescriptionControlClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionControlClause) {
			listener.exitScreenDescriptionControlClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionControlClause) {
			return visitor.visitScreenDescriptionControlClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionValueClauseContext extends ParserRuleContext {
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.VALUE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionValueClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionValueClause) {
			listener.enterScreenDescriptionValueClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionValueClause) {
			listener.exitScreenDescriptionValueClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionValueClause) {
			return visitor.visitScreenDescriptionValueClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionPictureClauseContext extends ParserRuleContext {
	public pictureString(): PictureStringContext {
		return this.getRuleContext(0, PictureStringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionPictureClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionPictureClause) {
			listener.enterScreenDescriptionPictureClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionPictureClause) {
			listener.exitScreenDescriptionPictureClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionPictureClause) {
			return visitor.visitScreenDescriptionPictureClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionFromClauseContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public screenDescriptionToClause(): ScreenDescriptionToClauseContext | undefined {
		return this.tryGetRuleContext(0, ScreenDescriptionToClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionFromClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionFromClause) {
			listener.enterScreenDescriptionFromClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionFromClause) {
			listener.exitScreenDescriptionFromClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionFromClause) {
			return visitor.visitScreenDescriptionFromClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionToClauseContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionToClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionToClause) {
			listener.enterScreenDescriptionToClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionToClause) {
			listener.exitScreenDescriptionToClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionToClause) {
			return visitor.visitScreenDescriptionToClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionUsingClauseContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(Cobol85Parser.USING, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionUsingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionUsingClause) {
			listener.enterScreenDescriptionUsingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionUsingClause) {
			listener.exitScreenDescriptionUsingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionUsingClause) {
			return visitor.visitScreenDescriptionUsingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionUsageClauseContext extends ParserRuleContext {
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); }
	public DISPLAY_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISPLAY_1, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionUsageClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionUsageClause) {
			listener.enterScreenDescriptionUsageClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionUsageClause) {
			listener.exitScreenDescriptionUsageClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionUsageClause) {
			return visitor.visitScreenDescriptionUsageClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionBlankWhenZeroClauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode { return this.getToken(Cobol85Parser.BLANK, 0); }
	public ZERO(): TerminalNode { return this.getToken(Cobol85Parser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WHEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionBlankWhenZeroClause) {
			listener.enterScreenDescriptionBlankWhenZeroClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionBlankWhenZeroClause) {
			listener.exitScreenDescriptionBlankWhenZeroClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionBlankWhenZeroClause) {
			return visitor.visitScreenDescriptionBlankWhenZeroClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionJustifiedClauseContext extends ParserRuleContext {
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionJustifiedClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionJustifiedClause) {
			listener.enterScreenDescriptionJustifiedClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionJustifiedClause) {
			listener.exitScreenDescriptionJustifiedClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionJustifiedClause) {
			return visitor.visitScreenDescriptionJustifiedClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionSignClauseContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionSignClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionSignClause) {
			listener.enterScreenDescriptionSignClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionSignClause) {
			listener.exitScreenDescriptionSignClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionSignClause) {
			return visitor.visitScreenDescriptionSignClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionAutoClauseContext extends ParserRuleContext {
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AUTO, 0); }
	public AUTO_SKIP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AUTO_SKIP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionAutoClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionAutoClause) {
			listener.enterScreenDescriptionAutoClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionAutoClause) {
			listener.exitScreenDescriptionAutoClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionAutoClause) {
			return visitor.visitScreenDescriptionAutoClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionSecureClauseContext extends ParserRuleContext {
	public SECURE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SECURE, 0); }
	public NO_ECHO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO_ECHO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionSecureClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionSecureClause) {
			listener.enterScreenDescriptionSecureClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionSecureClause) {
			listener.exitScreenDescriptionSecureClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionSecureClause) {
			return visitor.visitScreenDescriptionSecureClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionRequiredClauseContext extends ParserRuleContext {
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REQUIRED, 0); }
	public EMPTY_CHECK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EMPTY_CHECK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionRequiredClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionRequiredClause) {
			listener.enterScreenDescriptionRequiredClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionRequiredClause) {
			listener.exitScreenDescriptionRequiredClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionRequiredClause) {
			return visitor.visitScreenDescriptionRequiredClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionPromptClauseContext extends ParserRuleContext {
	public PROMPT(): TerminalNode { return this.getToken(Cobol85Parser.PROMPT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public screenDescriptionPromptOccursClause(): ScreenDescriptionPromptOccursClauseContext | undefined {
		return this.tryGetRuleContext(0, ScreenDescriptionPromptOccursClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionPromptClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionPromptClause) {
			listener.enterScreenDescriptionPromptClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionPromptClause) {
			listener.exitScreenDescriptionPromptClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionPromptClause) {
			return visitor.visitScreenDescriptionPromptClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionPromptOccursClauseContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(Cobol85Parser.OCCURS, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TIMES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionPromptOccursClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionPromptOccursClause) {
			listener.enterScreenDescriptionPromptOccursClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionPromptOccursClause) {
			listener.exitScreenDescriptionPromptOccursClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionPromptOccursClause) {
			return visitor.visitScreenDescriptionPromptOccursClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionFullClauseContext extends ParserRuleContext {
	public FULL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FULL, 0); }
	public LENGTH_CHECK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LENGTH_CHECK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionFullClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionFullClause) {
			listener.enterScreenDescriptionFullClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionFullClause) {
			listener.exitScreenDescriptionFullClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionFullClause) {
			return visitor.visitScreenDescriptionFullClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenDescriptionZeroFillClauseContext extends ParserRuleContext {
	public ZERO_FILL(): TerminalNode { return this.getToken(Cobol85Parser.ZERO_FILL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenDescriptionZeroFillClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenDescriptionZeroFillClause) {
			listener.enterScreenDescriptionZeroFillClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenDescriptionZeroFillClause) {
			listener.exitScreenDescriptionZeroFillClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenDescriptionZeroFillClause) {
			return visitor.visitScreenDescriptionZeroFillClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportSectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(Cobol85Parser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public reportDescription(): ReportDescriptionContext[];
	public reportDescription(i: number): ReportDescriptionContext;
	public reportDescription(i?: number): ReportDescriptionContext | ReportDescriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportDescriptionContext);
		} else {
			return this.getRuleContext(i, ReportDescriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportSection) {
			listener.enterReportSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportSection) {
			listener.exitReportSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportSection) {
			return visitor.visitReportSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionContext extends ParserRuleContext {
	public reportDescriptionEntry(): ReportDescriptionEntryContext {
		return this.getRuleContext(0, ReportDescriptionEntryContext);
	}
	public reportGroupDescriptionEntry(): ReportGroupDescriptionEntryContext[];
	public reportGroupDescriptionEntry(i: number): ReportGroupDescriptionEntryContext;
	public reportGroupDescriptionEntry(i?: number): ReportGroupDescriptionEntryContext | ReportGroupDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, ReportGroupDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescription; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescription) {
			listener.enterReportDescription(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescription) {
			listener.exitReportDescription(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescription) {
			return visitor.visitReportDescription(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionEntryContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(Cobol85Parser.RD, 0); }
	public reportName(): ReportNameContext {
		return this.getRuleContext(0, ReportNameContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public reportDescriptionGlobalClause(): ReportDescriptionGlobalClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportDescriptionGlobalClauseContext);
	}
	public reportDescriptionPageLimitClause(): ReportDescriptionPageLimitClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportDescriptionPageLimitClauseContext);
	}
	public reportDescriptionHeadingClause(): ReportDescriptionHeadingClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportDescriptionHeadingClauseContext);
	}
	public reportDescriptionFirstDetailClause(): ReportDescriptionFirstDetailClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportDescriptionFirstDetailClauseContext);
	}
	public reportDescriptionLastDetailClause(): ReportDescriptionLastDetailClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportDescriptionLastDetailClauseContext);
	}
	public reportDescriptionFootingClause(): ReportDescriptionFootingClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportDescriptionFootingClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescriptionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescriptionEntry) {
			listener.enterReportDescriptionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescriptionEntry) {
			listener.exitReportDescriptionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescriptionEntry) {
			return visitor.visitReportDescriptionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionGlobalClauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode { return this.getToken(Cobol85Parser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescriptionGlobalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescriptionGlobalClause) {
			listener.enterReportDescriptionGlobalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescriptionGlobalClause) {
			listener.exitReportDescriptionGlobalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescriptionGlobalClause) {
			return visitor.visitReportDescriptionGlobalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionPageLimitClauseContext extends ParserRuleContext {
	public PAGE(): TerminalNode { return this.getToken(Cobol85Parser.PAGE, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIMITS, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINES, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescriptionPageLimitClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescriptionPageLimitClause) {
			listener.enterReportDescriptionPageLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescriptionPageLimitClause) {
			listener.exitReportDescriptionPageLimitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescriptionPageLimitClause) {
			return visitor.visitReportDescriptionPageLimitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionHeadingClauseContext extends ParserRuleContext {
	public HEADING(): TerminalNode { return this.getToken(Cobol85Parser.HEADING, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescriptionHeadingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescriptionHeadingClause) {
			listener.enterReportDescriptionHeadingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescriptionHeadingClause) {
			listener.exitReportDescriptionHeadingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescriptionHeadingClause) {
			return visitor.visitReportDescriptionHeadingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionFirstDetailClauseContext extends ParserRuleContext {
	public FIRST(): TerminalNode { return this.getToken(Cobol85Parser.FIRST, 0); }
	public DETAIL(): TerminalNode { return this.getToken(Cobol85Parser.DETAIL, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescriptionFirstDetailClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescriptionFirstDetailClause) {
			listener.enterReportDescriptionFirstDetailClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescriptionFirstDetailClause) {
			listener.exitReportDescriptionFirstDetailClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescriptionFirstDetailClause) {
			return visitor.visitReportDescriptionFirstDetailClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionLastDetailClauseContext extends ParserRuleContext {
	public LAST(): TerminalNode { return this.getToken(Cobol85Parser.LAST, 0); }
	public DETAIL(): TerminalNode { return this.getToken(Cobol85Parser.DETAIL, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescriptionLastDetailClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescriptionLastDetailClause) {
			listener.enterReportDescriptionLastDetailClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescriptionLastDetailClause) {
			listener.exitReportDescriptionLastDetailClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescriptionLastDetailClause) {
			return visitor.visitReportDescriptionLastDetailClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportDescriptionFootingClauseContext extends ParserRuleContext {
	public FOOTING(): TerminalNode { return this.getToken(Cobol85Parser.FOOTING, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportDescriptionFootingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportDescriptionFootingClause) {
			listener.enterReportDescriptionFootingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportDescriptionFootingClause) {
			listener.exitReportDescriptionFootingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportDescriptionFootingClause) {
			return visitor.visitReportDescriptionFootingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupDescriptionEntryContext extends ParserRuleContext {
	public reportGroupDescriptionEntryFormat1(): ReportGroupDescriptionEntryFormat1Context | undefined {
		return this.tryGetRuleContext(0, ReportGroupDescriptionEntryFormat1Context);
	}
	public reportGroupDescriptionEntryFormat2(): ReportGroupDescriptionEntryFormat2Context | undefined {
		return this.tryGetRuleContext(0, ReportGroupDescriptionEntryFormat2Context);
	}
	public reportGroupDescriptionEntryFormat3(): ReportGroupDescriptionEntryFormat3Context | undefined {
		return this.tryGetRuleContext(0, ReportGroupDescriptionEntryFormat3Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupDescriptionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupDescriptionEntry) {
			listener.enterReportGroupDescriptionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupDescriptionEntry) {
			listener.exitReportGroupDescriptionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupDescriptionEntry) {
			return visitor.visitReportGroupDescriptionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupDescriptionEntryFormat1Context extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	public reportGroupTypeClause(): ReportGroupTypeClauseContext {
		return this.getRuleContext(0, ReportGroupTypeClauseContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public reportGroupLineNumberClause(): ReportGroupLineNumberClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupLineNumberClauseContext);
	}
	public reportGroupNextGroupClause(): ReportGroupNextGroupClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupNextGroupClauseContext);
	}
	public reportGroupUsageClause(): ReportGroupUsageClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupUsageClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupDescriptionEntryFormat1) {
			listener.enterReportGroupDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupDescriptionEntryFormat1) {
			listener.exitReportGroupDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupDescriptionEntryFormat1) {
			return visitor.visitReportGroupDescriptionEntryFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupDescriptionEntryFormat2Context extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public reportGroupUsageClause(): ReportGroupUsageClauseContext {
		return this.getRuleContext(0, ReportGroupUsageClauseContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public reportGroupLineNumberClause(): ReportGroupLineNumberClauseContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupLineNumberClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupDescriptionEntryFormat2) {
			listener.enterReportGroupDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupDescriptionEntryFormat2) {
			listener.exitReportGroupDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupDescriptionEntryFormat2) {
			return visitor.visitReportGroupDescriptionEntryFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupDescriptionEntryFormat3Context extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public reportGroupPictureClause(): ReportGroupPictureClauseContext[];
	public reportGroupPictureClause(i: number): ReportGroupPictureClauseContext;
	public reportGroupPictureClause(i?: number): ReportGroupPictureClauseContext | ReportGroupPictureClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupPictureClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupPictureClauseContext);
		}
	}
	public reportGroupUsageClause(): ReportGroupUsageClauseContext[];
	public reportGroupUsageClause(i: number): ReportGroupUsageClauseContext;
	public reportGroupUsageClause(i?: number): ReportGroupUsageClauseContext | ReportGroupUsageClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupUsageClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupUsageClauseContext);
		}
	}
	public reportGroupSignClause(): ReportGroupSignClauseContext[];
	public reportGroupSignClause(i: number): ReportGroupSignClauseContext;
	public reportGroupSignClause(i?: number): ReportGroupSignClauseContext | ReportGroupSignClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupSignClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupSignClauseContext);
		}
	}
	public reportGroupJustifiedClause(): ReportGroupJustifiedClauseContext[];
	public reportGroupJustifiedClause(i: number): ReportGroupJustifiedClauseContext;
	public reportGroupJustifiedClause(i?: number): ReportGroupJustifiedClauseContext | ReportGroupJustifiedClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupJustifiedClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupJustifiedClauseContext);
		}
	}
	public reportGroupBlankWhenZeroClause(): ReportGroupBlankWhenZeroClauseContext[];
	public reportGroupBlankWhenZeroClause(i: number): ReportGroupBlankWhenZeroClauseContext;
	public reportGroupBlankWhenZeroClause(i?: number): ReportGroupBlankWhenZeroClauseContext | ReportGroupBlankWhenZeroClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupBlankWhenZeroClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupBlankWhenZeroClauseContext);
		}
	}
	public reportGroupLineNumberClause(): ReportGroupLineNumberClauseContext[];
	public reportGroupLineNumberClause(i: number): ReportGroupLineNumberClauseContext;
	public reportGroupLineNumberClause(i?: number): ReportGroupLineNumberClauseContext | ReportGroupLineNumberClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupLineNumberClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupLineNumberClauseContext);
		}
	}
	public reportGroupColumnNumberClause(): ReportGroupColumnNumberClauseContext[];
	public reportGroupColumnNumberClause(i: number): ReportGroupColumnNumberClauseContext;
	public reportGroupColumnNumberClause(i?: number): ReportGroupColumnNumberClauseContext | ReportGroupColumnNumberClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupColumnNumberClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupColumnNumberClauseContext);
		}
	}
	public reportGroupIndicateClause(): ReportGroupIndicateClauseContext[];
	public reportGroupIndicateClause(i: number): ReportGroupIndicateClauseContext;
	public reportGroupIndicateClause(i?: number): ReportGroupIndicateClauseContext | ReportGroupIndicateClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupIndicateClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupIndicateClauseContext);
		}
	}
	public reportGroupSourceClause(): ReportGroupSourceClauseContext[];
	public reportGroupSourceClause(i: number): ReportGroupSourceClauseContext;
	public reportGroupSourceClause(i?: number): ReportGroupSourceClauseContext | ReportGroupSourceClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupSourceClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupSourceClauseContext);
		}
	}
	public reportGroupValueClause(): ReportGroupValueClauseContext[];
	public reportGroupValueClause(i: number): ReportGroupValueClauseContext;
	public reportGroupValueClause(i?: number): ReportGroupValueClauseContext | ReportGroupValueClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupValueClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupValueClauseContext);
		}
	}
	public reportGroupSumClause(): ReportGroupSumClauseContext[];
	public reportGroupSumClause(i: number): ReportGroupSumClauseContext;
	public reportGroupSumClause(i?: number): ReportGroupSumClauseContext | ReportGroupSumClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupSumClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupSumClauseContext);
		}
	}
	public reportGroupResetClause(): ReportGroupResetClauseContext[];
	public reportGroupResetClause(i: number): ReportGroupResetClauseContext;
	public reportGroupResetClause(i?: number): ReportGroupResetClauseContext | ReportGroupResetClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportGroupResetClauseContext);
		} else {
			return this.getRuleContext(i, ReportGroupResetClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupDescriptionEntryFormat3) {
			listener.enterReportGroupDescriptionEntryFormat3(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupDescriptionEntryFormat3) {
			listener.exitReportGroupDescriptionEntryFormat3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupDescriptionEntryFormat3) {
			return visitor.visitReportGroupDescriptionEntryFormat3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupBlankWhenZeroClauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode { return this.getToken(Cobol85Parser.BLANK, 0); }
	public ZERO(): TerminalNode { return this.getToken(Cobol85Parser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WHEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupBlankWhenZeroClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupBlankWhenZeroClause) {
			listener.enterReportGroupBlankWhenZeroClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupBlankWhenZeroClause) {
			listener.exitReportGroupBlankWhenZeroClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupBlankWhenZeroClause) {
			return visitor.visitReportGroupBlankWhenZeroClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupColumnNumberClauseContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(Cobol85Parser.COLUMN, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupColumnNumberClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupColumnNumberClause) {
			listener.enterReportGroupColumnNumberClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupColumnNumberClause) {
			listener.exitReportGroupColumnNumberClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupColumnNumberClause) {
			return visitor.visitReportGroupColumnNumberClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupIndicateClauseContext extends ParserRuleContext {
	public GROUP(): TerminalNode { return this.getToken(Cobol85Parser.GROUP, 0); }
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INDICATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupIndicateClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupIndicateClause) {
			listener.enterReportGroupIndicateClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupIndicateClause) {
			listener.exitReportGroupIndicateClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupIndicateClause) {
			return visitor.visitReportGroupIndicateClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupJustifiedClauseContext extends ParserRuleContext {
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupJustifiedClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupJustifiedClause) {
			listener.enterReportGroupJustifiedClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupJustifiedClause) {
			listener.exitReportGroupJustifiedClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupJustifiedClause) {
			return visitor.visitReportGroupJustifiedClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupLineNumberClauseContext extends ParserRuleContext {
	public reportGroupLineNumberNextPage(): ReportGroupLineNumberNextPageContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupLineNumberNextPageContext);
	}
	public reportGroupLineNumberPlus(): ReportGroupLineNumberPlusContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupLineNumberPlusContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupLineNumberClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupLineNumberClause) {
			listener.enterReportGroupLineNumberClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupLineNumberClause) {
			listener.exitReportGroupLineNumberClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupLineNumberClause) {
			return visitor.visitReportGroupLineNumberClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupLineNumberNextPageContext extends ParserRuleContext {
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PAGE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupLineNumberNextPage; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupLineNumberNextPage) {
			listener.enterReportGroupLineNumberNextPage(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupLineNumberNextPage) {
			listener.exitReportGroupLineNumberNextPage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupLineNumberNextPage) {
			return visitor.visitReportGroupLineNumberNextPage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupLineNumberPlusContext extends ParserRuleContext {
	public PLUS(): TerminalNode { return this.getToken(Cobol85Parser.PLUS, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupLineNumberPlus; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupLineNumberPlus) {
			listener.enterReportGroupLineNumberPlus(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupLineNumberPlus) {
			listener.exitReportGroupLineNumberPlus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupLineNumberPlus) {
			return visitor.visitReportGroupLineNumberPlus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupNextGroupClauseContext extends ParserRuleContext {
	public NEXT(): TerminalNode { return this.getToken(Cobol85Parser.NEXT, 0); }
	public GROUP(): TerminalNode { return this.getToken(Cobol85Parser.GROUP, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public reportGroupNextGroupNextPage(): ReportGroupNextGroupNextPageContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupNextGroupNextPageContext);
	}
	public reportGroupNextGroupPlus(): ReportGroupNextGroupPlusContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupNextGroupPlusContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupNextGroupClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupNextGroupClause) {
			listener.enterReportGroupNextGroupClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupNextGroupClause) {
			listener.exitReportGroupNextGroupClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupNextGroupClause) {
			return visitor.visitReportGroupNextGroupClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupNextGroupPlusContext extends ParserRuleContext {
	public PLUS(): TerminalNode { return this.getToken(Cobol85Parser.PLUS, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupNextGroupPlus; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupNextGroupPlus) {
			listener.enterReportGroupNextGroupPlus(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupNextGroupPlus) {
			listener.exitReportGroupNextGroupPlus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupNextGroupPlus) {
			return visitor.visitReportGroupNextGroupPlus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupNextGroupNextPageContext extends ParserRuleContext {
	public NEXT(): TerminalNode { return this.getToken(Cobol85Parser.NEXT, 0); }
	public PAGE(): TerminalNode { return this.getToken(Cobol85Parser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupNextGroupNextPage; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupNextGroupNextPage) {
			listener.enterReportGroupNextGroupNextPage(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupNextGroupNextPage) {
			listener.exitReportGroupNextGroupNextPage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupNextGroupNextPage) {
			return visitor.visitReportGroupNextGroupNextPage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupPictureClauseContext extends ParserRuleContext {
	public pictureString(): PictureStringContext {
		return this.getRuleContext(0, PictureStringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupPictureClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupPictureClause) {
			listener.enterReportGroupPictureClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupPictureClause) {
			listener.exitReportGroupPictureClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupPictureClause) {
			return visitor.visitReportGroupPictureClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupResetClauseContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(Cobol85Parser.RESET, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FINAL, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupResetClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupResetClause) {
			listener.enterReportGroupResetClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupResetClause) {
			listener.exitReportGroupResetClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupResetClause) {
			return visitor.visitReportGroupResetClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupSignClauseContext extends ParserRuleContext {
	public SIGN(): TerminalNode { return this.getToken(Cobol85Parser.SIGN, 0); }
	public SEPARATE(): TerminalNode { return this.getToken(Cobol85Parser.SEPARATE, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRAILING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupSignClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupSignClause) {
			listener.enterReportGroupSignClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupSignClause) {
			listener.exitReportGroupSignClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupSignClause) {
			return visitor.visitReportGroupSignClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupSourceClauseContext extends ParserRuleContext {
	public SOURCE(): TerminalNode { return this.getToken(Cobol85Parser.SOURCE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupSourceClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupSourceClause) {
			listener.enterReportGroupSourceClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupSourceClause) {
			listener.exitReportGroupSourceClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupSourceClause) {
			return visitor.visitReportGroupSourceClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupSumClauseContext extends ParserRuleContext {
	public SUM(): TerminalNode { return this.getToken(Cobol85Parser.SUM, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public UPON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.UPON, 0); }
	public dataName(): DataNameContext[];
	public dataName(i: number): DataNameContext;
	public dataName(i?: number): DataNameContext | DataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataNameContext);
		} else {
			return this.getRuleContext(i, DataNameContext);
		}
	}
	public COMMACHAR(): TerminalNode[];
	public COMMACHAR(i: number): TerminalNode;
	public COMMACHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.COMMACHAR);
		} else {
			return this.getToken(Cobol85Parser.COMMACHAR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupSumClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupSumClause) {
			listener.enterReportGroupSumClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupSumClause) {
			listener.exitReportGroupSumClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupSumClause) {
			return visitor.visitReportGroupSumClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypeClauseContext extends ParserRuleContext {
	public TYPE(): TerminalNode { return this.getToken(Cobol85Parser.TYPE, 0); }
	public reportGroupTypeReportHeading(): ReportGroupTypeReportHeadingContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupTypeReportHeadingContext);
	}
	public reportGroupTypePageHeading(): ReportGroupTypePageHeadingContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupTypePageHeadingContext);
	}
	public reportGroupTypeControlHeading(): ReportGroupTypeControlHeadingContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupTypeControlHeadingContext);
	}
	public reportGroupTypeDetail(): ReportGroupTypeDetailContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupTypeDetailContext);
	}
	public reportGroupTypeControlFooting(): ReportGroupTypeControlFootingContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupTypeControlFootingContext);
	}
	public reportGroupTypePageFooting(): ReportGroupTypePageFootingContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupTypePageFootingContext);
	}
	public reportGroupTypeReportFooting(): ReportGroupTypeReportFootingContext | undefined {
		return this.tryGetRuleContext(0, ReportGroupTypeReportFootingContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypeClause) {
			listener.enterReportGroupTypeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypeClause) {
			listener.exitReportGroupTypeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypeClause) {
			return visitor.visitReportGroupTypeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypeReportHeadingContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.HEADING, 0); }
	public RH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypeReportHeading; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypeReportHeading) {
			listener.enterReportGroupTypeReportHeading(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypeReportHeading) {
			listener.exitReportGroupTypeReportHeading(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypeReportHeading) {
			return visitor.visitReportGroupTypeReportHeading(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypePageHeadingContext extends ParserRuleContext {
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PAGE, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.HEADING, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypePageHeading; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypePageHeading) {
			listener.enterReportGroupTypePageHeading(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypePageHeading) {
			listener.exitReportGroupTypePageHeading(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypePageHeading) {
			return visitor.visitReportGroupTypePageHeading(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypeControlHeadingContext extends ParserRuleContext {
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTROL, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.HEADING, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CH, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FINAL, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypeControlHeading; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypeControlHeading) {
			listener.enterReportGroupTypeControlHeading(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypeControlHeading) {
			listener.exitReportGroupTypeControlHeading(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypeControlHeading) {
			return visitor.visitReportGroupTypeControlHeading(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypeDetailContext extends ParserRuleContext {
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypeDetail; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypeDetail) {
			listener.enterReportGroupTypeDetail(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypeDetail) {
			listener.exitReportGroupTypeDetail(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypeDetail) {
			return visitor.visitReportGroupTypeDetail(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypeControlFootingContext extends ParserRuleContext {
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTROL, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CF, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FINAL, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypeControlFooting; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypeControlFooting) {
			listener.enterReportGroupTypeControlFooting(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypeControlFooting) {
			listener.exitReportGroupTypeControlFooting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypeControlFooting) {
			return visitor.visitReportGroupTypeControlFooting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupUsageClauseContext extends ParserRuleContext {
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); }
	public DISPLAY_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISPLAY_1, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupUsageClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupUsageClause) {
			listener.enterReportGroupUsageClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupUsageClause) {
			listener.exitReportGroupUsageClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupUsageClause) {
			return visitor.visitReportGroupUsageClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypePageFootingContext extends ParserRuleContext {
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PAGE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOOTING, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypePageFooting; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypePageFooting) {
			listener.enterReportGroupTypePageFooting(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypePageFooting) {
			listener.exitReportGroupTypePageFooting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypePageFooting) {
			return visitor.visitReportGroupTypePageFooting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupTypeReportFootingContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REPORT, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOOTING, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupTypeReportFooting; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupTypeReportFooting) {
			listener.enterReportGroupTypeReportFooting(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupTypeReportFooting) {
			listener.exitReportGroupTypeReportFooting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupTypeReportFooting) {
			return visitor.visitReportGroupTypeReportFooting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportGroupValueClauseContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(Cobol85Parser.VALUE, 0); }
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportGroupValueClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportGroupValueClause) {
			listener.enterReportGroupValueClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportGroupValueClause) {
			listener.exitReportGroupValueClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportGroupValueClause) {
			return visitor.visitReportGroupValueClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramLibrarySectionContext extends ParserRuleContext {
	public PROGRAM_LIBRARY(): TerminalNode { return this.getToken(Cobol85Parser.PROGRAM_LIBRARY, 0); }
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public libraryDescriptionEntry(): LibraryDescriptionEntryContext[];
	public libraryDescriptionEntry(i: number): LibraryDescriptionEntryContext;
	public libraryDescriptionEntry(i?: number): LibraryDescriptionEntryContext | LibraryDescriptionEntryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LibraryDescriptionEntryContext);
		} else {
			return this.getRuleContext(i, LibraryDescriptionEntryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_programLibrarySection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProgramLibrarySection) {
			listener.enterProgramLibrarySection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProgramLibrarySection) {
			listener.exitProgramLibrarySection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProgramLibrarySection) {
			return visitor.visitProgramLibrarySection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryDescriptionEntryContext extends ParserRuleContext {
	public libraryDescriptionEntryFormat1(): LibraryDescriptionEntryFormat1Context | undefined {
		return this.tryGetRuleContext(0, LibraryDescriptionEntryFormat1Context);
	}
	public libraryDescriptionEntryFormat2(): LibraryDescriptionEntryFormat2Context | undefined {
		return this.tryGetRuleContext(0, LibraryDescriptionEntryFormat2Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryDescriptionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryDescriptionEntry) {
			listener.enterLibraryDescriptionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryDescriptionEntry) {
			listener.exitLibraryDescriptionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryDescriptionEntry) {
			return visitor.visitLibraryDescriptionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryDescriptionEntryFormat1Context extends ParserRuleContext {
	public LD(): TerminalNode { return this.getToken(Cobol85Parser.LD, 0); }
	public libraryName(): LibraryNameContext {
		return this.getRuleContext(0, LibraryNameContext);
	}
	public EXPORT(): TerminalNode { return this.getToken(Cobol85Parser.EXPORT, 0); }
	public libraryAttributeClauseFormat1(): LibraryAttributeClauseFormat1Context | undefined {
		return this.tryGetRuleContext(0, LibraryAttributeClauseFormat1Context);
	}
	public libraryEntryProcedureClauseFormat1(): LibraryEntryProcedureClauseFormat1Context | undefined {
		return this.tryGetRuleContext(0, LibraryEntryProcedureClauseFormat1Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryDescriptionEntryFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryDescriptionEntryFormat1) {
			listener.enterLibraryDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryDescriptionEntryFormat1) {
			listener.exitLibraryDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryDescriptionEntryFormat1) {
			return visitor.visitLibraryDescriptionEntryFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryDescriptionEntryFormat2Context extends ParserRuleContext {
	public LB(): TerminalNode { return this.getToken(Cobol85Parser.LB, 0); }
	public libraryName(): LibraryNameContext {
		return this.getRuleContext(0, LibraryNameContext);
	}
	public IMPORT(): TerminalNode { return this.getToken(Cobol85Parser.IMPORT, 0); }
	public libraryIsGlobalClause(): LibraryIsGlobalClauseContext | undefined {
		return this.tryGetRuleContext(0, LibraryIsGlobalClauseContext);
	}
	public libraryIsCommonClause(): LibraryIsCommonClauseContext | undefined {
		return this.tryGetRuleContext(0, LibraryIsCommonClauseContext);
	}
	public libraryAttributeClauseFormat2(): LibraryAttributeClauseFormat2Context[];
	public libraryAttributeClauseFormat2(i: number): LibraryAttributeClauseFormat2Context;
	public libraryAttributeClauseFormat2(i?: number): LibraryAttributeClauseFormat2Context | LibraryAttributeClauseFormat2Context[] {
		if (i === undefined) {
			return this.getRuleContexts(LibraryAttributeClauseFormat2Context);
		} else {
			return this.getRuleContext(i, LibraryAttributeClauseFormat2Context);
		}
	}
	public libraryEntryProcedureClauseFormat2(): LibraryEntryProcedureClauseFormat2Context[];
	public libraryEntryProcedureClauseFormat2(i: number): LibraryEntryProcedureClauseFormat2Context;
	public libraryEntryProcedureClauseFormat2(i?: number): LibraryEntryProcedureClauseFormat2Context | LibraryEntryProcedureClauseFormat2Context[] {
		if (i === undefined) {
			return this.getRuleContexts(LibraryEntryProcedureClauseFormat2Context);
		} else {
			return this.getRuleContext(i, LibraryEntryProcedureClauseFormat2Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryDescriptionEntryFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryDescriptionEntryFormat2) {
			listener.enterLibraryDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryDescriptionEntryFormat2) {
			listener.exitLibraryDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryDescriptionEntryFormat2) {
			return visitor.visitLibraryDescriptionEntryFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryAttributeClauseFormat1Context extends ParserRuleContext {
	public ATTRIBUTE(): TerminalNode { return this.getToken(Cobol85Parser.ATTRIBUTE, 0); }
	public SHARING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHARING, 0); }
	public DONTCARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DONTCARE, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PRIVATE, 0); }
	public SHAREDBYRUNUNIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHAREDBYRUNUNIT, 0); }
	public SHAREDBYALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHAREDBYALL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryAttributeClauseFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryAttributeClauseFormat1) {
			listener.enterLibraryAttributeClauseFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryAttributeClauseFormat1) {
			listener.exitLibraryAttributeClauseFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryAttributeClauseFormat1) {
			return visitor.visitLibraryAttributeClauseFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryAttributeClauseFormat2Context extends ParserRuleContext {
	public ATTRIBUTE(): TerminalNode { return this.getToken(Cobol85Parser.ATTRIBUTE, 0); }
	public libraryAttributeFunction(): LibraryAttributeFunctionContext | undefined {
		return this.tryGetRuleContext(0, LibraryAttributeFunctionContext);
	}
	public LIBACCESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIBACCESS, 0); }
	public libraryAttributeParameter(): LibraryAttributeParameterContext | undefined {
		return this.tryGetRuleContext(0, LibraryAttributeParameterContext);
	}
	public libraryAttributeTitle(): LibraryAttributeTitleContext | undefined {
		return this.tryGetRuleContext(0, LibraryAttributeTitleContext);
	}
	public BYFUNCTION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BYFUNCTION, 0); }
	public BYTITLE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BYTITLE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryAttributeClauseFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryAttributeClauseFormat2) {
			listener.enterLibraryAttributeClauseFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryAttributeClauseFormat2) {
			listener.exitLibraryAttributeClauseFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryAttributeClauseFormat2) {
			return visitor.visitLibraryAttributeClauseFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryAttributeFunctionContext extends ParserRuleContext {
	public FUNCTIONNAME(): TerminalNode { return this.getToken(Cobol85Parser.FUNCTIONNAME, 0); }
	public IS(): TerminalNode { return this.getToken(Cobol85Parser.IS, 0); }
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryAttributeFunction; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryAttributeFunction) {
			listener.enterLibraryAttributeFunction(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryAttributeFunction) {
			listener.exitLibraryAttributeFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryAttributeFunction) {
			return visitor.visitLibraryAttributeFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryAttributeParameterContext extends ParserRuleContext {
	public LIBPARAMETER(): TerminalNode { return this.getToken(Cobol85Parser.LIBPARAMETER, 0); }
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryAttributeParameter; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryAttributeParameter) {
			listener.enterLibraryAttributeParameter(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryAttributeParameter) {
			listener.exitLibraryAttributeParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryAttributeParameter) {
			return visitor.visitLibraryAttributeParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryAttributeTitleContext extends ParserRuleContext {
	public TITLE(): TerminalNode { return this.getToken(Cobol85Parser.TITLE, 0); }
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryAttributeTitle; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryAttributeTitle) {
			listener.enterLibraryAttributeTitle(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryAttributeTitle) {
			listener.exitLibraryAttributeTitle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryAttributeTitle) {
			return visitor.visitLibraryAttributeTitle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureClauseFormat1Context extends ParserRuleContext {
	public ENTRY_PROCEDURE(): TerminalNode { return this.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0); }
	public programName(): ProgramNameContext {
		return this.getRuleContext(0, ProgramNameContext);
	}
	public libraryEntryProcedureForClause(): LibraryEntryProcedureForClauseContext | undefined {
		return this.tryGetRuleContext(0, LibraryEntryProcedureForClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureClauseFormat1) {
			listener.enterLibraryEntryProcedureClauseFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureClauseFormat1) {
			listener.exitLibraryEntryProcedureClauseFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureClauseFormat1) {
			return visitor.visitLibraryEntryProcedureClauseFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureClauseFormat2Context extends ParserRuleContext {
	public ENTRY_PROCEDURE(): TerminalNode { return this.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0); }
	public programName(): ProgramNameContext {
		return this.getRuleContext(0, ProgramNameContext);
	}
	public libraryEntryProcedureForClause(): LibraryEntryProcedureForClauseContext | undefined {
		return this.tryGetRuleContext(0, LibraryEntryProcedureForClauseContext);
	}
	public libraryEntryProcedureWithClause(): LibraryEntryProcedureWithClauseContext | undefined {
		return this.tryGetRuleContext(0, LibraryEntryProcedureWithClauseContext);
	}
	public libraryEntryProcedureUsingClause(): LibraryEntryProcedureUsingClauseContext | undefined {
		return this.tryGetRuleContext(0, LibraryEntryProcedureUsingClauseContext);
	}
	public libraryEntryProcedureGivingClause(): LibraryEntryProcedureGivingClauseContext | undefined {
		return this.tryGetRuleContext(0, LibraryEntryProcedureGivingClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureClauseFormat2) {
			listener.enterLibraryEntryProcedureClauseFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureClauseFormat2) {
			listener.exitLibraryEntryProcedureClauseFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureClauseFormat2) {
			return visitor.visitLibraryEntryProcedureClauseFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureForClauseContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(Cobol85Parser.FOR, 0); }
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureForClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureForClause) {
			listener.enterLibraryEntryProcedureForClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureForClause) {
			listener.exitLibraryEntryProcedureForClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureForClause) {
			return visitor.visitLibraryEntryProcedureForClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureGivingClauseContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(Cobol85Parser.GIVING, 0); }
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureGivingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureGivingClause) {
			listener.enterLibraryEntryProcedureGivingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureGivingClause) {
			listener.exitLibraryEntryProcedureGivingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureGivingClause) {
			return visitor.visitLibraryEntryProcedureGivingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureUsingClauseContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(Cobol85Parser.USING, 0); }
	public libraryEntryProcedureUsingName(): LibraryEntryProcedureUsingNameContext[];
	public libraryEntryProcedureUsingName(i: number): LibraryEntryProcedureUsingNameContext;
	public libraryEntryProcedureUsingName(i?: number): LibraryEntryProcedureUsingNameContext | LibraryEntryProcedureUsingNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LibraryEntryProcedureUsingNameContext);
		} else {
			return this.getRuleContext(i, LibraryEntryProcedureUsingNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureUsingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureUsingClause) {
			listener.enterLibraryEntryProcedureUsingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureUsingClause) {
			listener.exitLibraryEntryProcedureUsingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureUsingClause) {
			return visitor.visitLibraryEntryProcedureUsingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureUsingNameContext extends ParserRuleContext {
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public fileName(): FileNameContext | undefined {
		return this.tryGetRuleContext(0, FileNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureUsingName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureUsingName) {
			listener.enterLibraryEntryProcedureUsingName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureUsingName) {
			listener.exitLibraryEntryProcedureUsingName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureUsingName) {
			return visitor.visitLibraryEntryProcedureUsingName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureWithClauseContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(Cobol85Parser.WITH, 0); }
	public libraryEntryProcedureWithName(): LibraryEntryProcedureWithNameContext[];
	public libraryEntryProcedureWithName(i: number): LibraryEntryProcedureWithNameContext;
	public libraryEntryProcedureWithName(i?: number): LibraryEntryProcedureWithNameContext | LibraryEntryProcedureWithNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LibraryEntryProcedureWithNameContext);
		} else {
			return this.getRuleContext(i, LibraryEntryProcedureWithNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureWithClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureWithClause) {
			listener.enterLibraryEntryProcedureWithClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureWithClause) {
			listener.exitLibraryEntryProcedureWithClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureWithClause) {
			return visitor.visitLibraryEntryProcedureWithClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryEntryProcedureWithNameContext extends ParserRuleContext {
	public localName(): LocalNameContext | undefined {
		return this.tryGetRuleContext(0, LocalNameContext);
	}
	public fileName(): FileNameContext | undefined {
		return this.tryGetRuleContext(0, FileNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryEntryProcedureWithName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryEntryProcedureWithName) {
			listener.enterLibraryEntryProcedureWithName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryEntryProcedureWithName) {
			listener.exitLibraryEntryProcedureWithName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryEntryProcedureWithName) {
			return visitor.visitLibraryEntryProcedureWithName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryIsCommonClauseContext extends ParserRuleContext {
	public COMMON(): TerminalNode { return this.getToken(Cobol85Parser.COMMON, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryIsCommonClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryIsCommonClause) {
			listener.enterLibraryIsCommonClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryIsCommonClause) {
			listener.exitLibraryIsCommonClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryIsCommonClause) {
			return visitor.visitLibraryIsCommonClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryIsGlobalClauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode { return this.getToken(Cobol85Parser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryIsGlobalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryIsGlobalClause) {
			listener.enterLibraryIsGlobalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryIsGlobalClause) {
			listener.exitLibraryIsGlobalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryIsGlobalClause) {
			return visitor.visitLibraryIsGlobalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescriptionEntryContext extends ParserRuleContext {
	public dataDescriptionEntryFormat1(): DataDescriptionEntryFormat1Context | undefined {
		return this.tryGetRuleContext(0, DataDescriptionEntryFormat1Context);
	}
	public dataDescriptionEntryFormat2(): DataDescriptionEntryFormat2Context | undefined {
		return this.tryGetRuleContext(0, DataDescriptionEntryFormat2Context);
	}
	public dataDescriptionEntryFormat3(): DataDescriptionEntryFormat3Context | undefined {
		return this.tryGetRuleContext(0, DataDescriptionEntryFormat3Context);
	}
	public dataDescriptionEntryExecSql(): DataDescriptionEntryExecSqlContext | undefined {
		return this.tryGetRuleContext(0, DataDescriptionEntryExecSqlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDescriptionEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDescriptionEntry) {
			listener.enterDataDescriptionEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDescriptionEntry) {
			listener.exitDataDescriptionEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDescriptionEntry) {
			return visitor.visitDataDescriptionEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescriptionEntryFormat1Context extends ParserRuleContext {
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public INTEGERLITERAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INTEGERLITERAL, 0); }
	public LEVEL_NUMBER_77(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_77, 0); }
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FILLER, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public dataRedefinesClause(): DataRedefinesClauseContext[];
	public dataRedefinesClause(i: number): DataRedefinesClauseContext;
	public dataRedefinesClause(i?: number): DataRedefinesClauseContext | DataRedefinesClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataRedefinesClauseContext);
		} else {
			return this.getRuleContext(i, DataRedefinesClauseContext);
		}
	}
	public dataIntegerStringClause(): DataIntegerStringClauseContext[];
	public dataIntegerStringClause(i: number): DataIntegerStringClauseContext;
	public dataIntegerStringClause(i?: number): DataIntegerStringClauseContext | DataIntegerStringClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataIntegerStringClauseContext);
		} else {
			return this.getRuleContext(i, DataIntegerStringClauseContext);
		}
	}
	public dataExternalClause(): DataExternalClauseContext[];
	public dataExternalClause(i: number): DataExternalClauseContext;
	public dataExternalClause(i?: number): DataExternalClauseContext | DataExternalClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataExternalClauseContext);
		} else {
			return this.getRuleContext(i, DataExternalClauseContext);
		}
	}
	public dataGlobalClause(): DataGlobalClauseContext[];
	public dataGlobalClause(i: number): DataGlobalClauseContext;
	public dataGlobalClause(i?: number): DataGlobalClauseContext | DataGlobalClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataGlobalClauseContext);
		} else {
			return this.getRuleContext(i, DataGlobalClauseContext);
		}
	}
	public dataTypeDefClause(): DataTypeDefClauseContext[];
	public dataTypeDefClause(i: number): DataTypeDefClauseContext;
	public dataTypeDefClause(i?: number): DataTypeDefClauseContext | DataTypeDefClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataTypeDefClauseContext);
		} else {
			return this.getRuleContext(i, DataTypeDefClauseContext);
		}
	}
	public dataThreadLocalClause(): DataThreadLocalClauseContext[];
	public dataThreadLocalClause(i: number): DataThreadLocalClauseContext;
	public dataThreadLocalClause(i?: number): DataThreadLocalClauseContext | DataThreadLocalClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataThreadLocalClauseContext);
		} else {
			return this.getRuleContext(i, DataThreadLocalClauseContext);
		}
	}
	public dataPictureClause(): DataPictureClauseContext[];
	public dataPictureClause(i: number): DataPictureClauseContext;
	public dataPictureClause(i?: number): DataPictureClauseContext | DataPictureClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataPictureClauseContext);
		} else {
			return this.getRuleContext(i, DataPictureClauseContext);
		}
	}
	public dataCommonOwnLocalClause(): DataCommonOwnLocalClauseContext[];
	public dataCommonOwnLocalClause(i: number): DataCommonOwnLocalClauseContext;
	public dataCommonOwnLocalClause(i?: number): DataCommonOwnLocalClauseContext | DataCommonOwnLocalClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataCommonOwnLocalClauseContext);
		} else {
			return this.getRuleContext(i, DataCommonOwnLocalClauseContext);
		}
	}
	public dataTypeClause(): DataTypeClauseContext[];
	public dataTypeClause(i: number): DataTypeClauseContext;
	public dataTypeClause(i?: number): DataTypeClauseContext | DataTypeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataTypeClauseContext);
		} else {
			return this.getRuleContext(i, DataTypeClauseContext);
		}
	}
	public dataUsingClause(): DataUsingClauseContext[];
	public dataUsingClause(i: number): DataUsingClauseContext;
	public dataUsingClause(i?: number): DataUsingClauseContext | DataUsingClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataUsingClauseContext);
		} else {
			return this.getRuleContext(i, DataUsingClauseContext);
		}
	}
	public dataUsageClause(): DataUsageClauseContext[];
	public dataUsageClause(i: number): DataUsageClauseContext;
	public dataUsageClause(i?: number): DataUsageClauseContext | DataUsageClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataUsageClauseContext);
		} else {
			return this.getRuleContext(i, DataUsageClauseContext);
		}
	}
	public dataValueClause(): DataValueClauseContext[];
	public dataValueClause(i: number): DataValueClauseContext;
	public dataValueClause(i?: number): DataValueClauseContext | DataValueClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataValueClauseContext);
		} else {
			return this.getRuleContext(i, DataValueClauseContext);
		}
	}
	public dataReceivedByClause(): DataReceivedByClauseContext[];
	public dataReceivedByClause(i: number): DataReceivedByClauseContext;
	public dataReceivedByClause(i?: number): DataReceivedByClauseContext | DataReceivedByClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataReceivedByClauseContext);
		} else {
			return this.getRuleContext(i, DataReceivedByClauseContext);
		}
	}
	public dataOccursClause(): DataOccursClauseContext[];
	public dataOccursClause(i: number): DataOccursClauseContext;
	public dataOccursClause(i?: number): DataOccursClauseContext | DataOccursClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataOccursClauseContext);
		} else {
			return this.getRuleContext(i, DataOccursClauseContext);
		}
	}
	public dataSignClause(): DataSignClauseContext[];
	public dataSignClause(i: number): DataSignClauseContext;
	public dataSignClause(i?: number): DataSignClauseContext | DataSignClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataSignClauseContext);
		} else {
			return this.getRuleContext(i, DataSignClauseContext);
		}
	}
	public dataSynchronizedClause(): DataSynchronizedClauseContext[];
	public dataSynchronizedClause(i: number): DataSynchronizedClauseContext;
	public dataSynchronizedClause(i?: number): DataSynchronizedClauseContext | DataSynchronizedClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataSynchronizedClauseContext);
		} else {
			return this.getRuleContext(i, DataSynchronizedClauseContext);
		}
	}
	public dataJustifiedClause(): DataJustifiedClauseContext[];
	public dataJustifiedClause(i: number): DataJustifiedClauseContext;
	public dataJustifiedClause(i?: number): DataJustifiedClauseContext | DataJustifiedClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataJustifiedClauseContext);
		} else {
			return this.getRuleContext(i, DataJustifiedClauseContext);
		}
	}
	public dataBlankWhenZeroClause(): DataBlankWhenZeroClauseContext[];
	public dataBlankWhenZeroClause(i: number): DataBlankWhenZeroClauseContext;
	public dataBlankWhenZeroClause(i?: number): DataBlankWhenZeroClauseContext | DataBlankWhenZeroClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataBlankWhenZeroClauseContext);
		} else {
			return this.getRuleContext(i, DataBlankWhenZeroClauseContext);
		}
	}
	public dataWithLowerBoundsClause(): DataWithLowerBoundsClauseContext[];
	public dataWithLowerBoundsClause(i: number): DataWithLowerBoundsClauseContext;
	public dataWithLowerBoundsClause(i?: number): DataWithLowerBoundsClauseContext | DataWithLowerBoundsClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataWithLowerBoundsClauseContext);
		} else {
			return this.getRuleContext(i, DataWithLowerBoundsClauseContext);
		}
	}
	public dataAlignedClause(): DataAlignedClauseContext[];
	public dataAlignedClause(i: number): DataAlignedClauseContext;
	public dataAlignedClause(i?: number): DataAlignedClauseContext | DataAlignedClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataAlignedClauseContext);
		} else {
			return this.getRuleContext(i, DataAlignedClauseContext);
		}
	}
	public dataRecordAreaClause(): DataRecordAreaClauseContext[];
	public dataRecordAreaClause(i: number): DataRecordAreaClauseContext;
	public dataRecordAreaClause(i?: number): DataRecordAreaClauseContext | DataRecordAreaClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataRecordAreaClauseContext);
		} else {
			return this.getRuleContext(i, DataRecordAreaClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDescriptionEntryFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDescriptionEntryFormat1) {
			listener.enterDataDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDescriptionEntryFormat1) {
			listener.exitDataDescriptionEntryFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDescriptionEntryFormat1) {
			return visitor.visitDataDescriptionEntryFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescriptionEntryFormat2Context extends ParserRuleContext {
	public LEVEL_NUMBER_66(): TerminalNode { return this.getToken(Cobol85Parser.LEVEL_NUMBER_66, 0); }
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	public dataRenamesClause(): DataRenamesClauseContext {
		return this.getRuleContext(0, DataRenamesClauseContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDescriptionEntryFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDescriptionEntryFormat2) {
			listener.enterDataDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDescriptionEntryFormat2) {
			listener.exitDataDescriptionEntryFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDescriptionEntryFormat2) {
			return visitor.visitDataDescriptionEntryFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescriptionEntryFormat3Context extends ParserRuleContext {
	public LEVEL_NUMBER_88(): TerminalNode { return this.getToken(Cobol85Parser.LEVEL_NUMBER_88, 0); }
	public conditionName(): ConditionNameContext {
		return this.getRuleContext(0, ConditionNameContext);
	}
	public dataValueClause(): DataValueClauseContext {
		return this.getRuleContext(0, DataValueClauseContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDescriptionEntryFormat3; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDescriptionEntryFormat3) {
			listener.enterDataDescriptionEntryFormat3(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDescriptionEntryFormat3) {
			listener.exitDataDescriptionEntryFormat3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDescriptionEntryFormat3) {
			return visitor.visitDataDescriptionEntryFormat3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescriptionEntryExecSqlContext extends ParserRuleContext {
	public EXECSQLLINE(): TerminalNode[];
	public EXECSQLLINE(i: number): TerminalNode;
	public EXECSQLLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.EXECSQLLINE);
		} else {
			return this.getToken(Cobol85Parser.EXECSQLLINE, i);
		}
	}
	public DOT_FS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DOT_FS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDescriptionEntryExecSql; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDescriptionEntryExecSql) {
			listener.enterDataDescriptionEntryExecSql(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDescriptionEntryExecSql) {
			listener.exitDataDescriptionEntryExecSql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDescriptionEntryExecSql) {
			return visitor.visitDataDescriptionEntryExecSql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataAlignedClauseContext extends ParserRuleContext {
	public ALIGNED(): TerminalNode { return this.getToken(Cobol85Parser.ALIGNED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataAlignedClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataAlignedClause) {
			listener.enterDataAlignedClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataAlignedClause) {
			listener.exitDataAlignedClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataAlignedClause) {
			return visitor.visitDataAlignedClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataBlankWhenZeroClauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode { return this.getToken(Cobol85Parser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZERO, 0); }
	public ZEROS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZEROS, 0); }
	public ZEROES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZEROES, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WHEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataBlankWhenZeroClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataBlankWhenZeroClause) {
			listener.enterDataBlankWhenZeroClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataBlankWhenZeroClause) {
			listener.exitDataBlankWhenZeroClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataBlankWhenZeroClause) {
			return visitor.visitDataBlankWhenZeroClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataCommonOwnLocalClauseContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMMON, 0); }
	public OWN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OWN, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataCommonOwnLocalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataCommonOwnLocalClause) {
			listener.enterDataCommonOwnLocalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataCommonOwnLocalClause) {
			listener.exitDataCommonOwnLocalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataCommonOwnLocalClause) {
			return visitor.visitDataCommonOwnLocalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataExternalClauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode { return this.getToken(Cobol85Parser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataExternalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataExternalClause) {
			listener.enterDataExternalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataExternalClause) {
			listener.exitDataExternalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataExternalClause) {
			return visitor.visitDataExternalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataGlobalClauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode { return this.getToken(Cobol85Parser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataGlobalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataGlobalClause) {
			listener.enterDataGlobalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataGlobalClause) {
			listener.exitDataGlobalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataGlobalClause) {
			return visitor.visitDataGlobalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataIntegerStringClauseContext extends ParserRuleContext {
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INTEGER, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataIntegerStringClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataIntegerStringClause) {
			listener.enterDataIntegerStringClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataIntegerStringClause) {
			listener.exitDataIntegerStringClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataIntegerStringClause) {
			return visitor.visitDataIntegerStringClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataJustifiedClauseContext extends ParserRuleContext {
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataJustifiedClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataJustifiedClause) {
			listener.enterDataJustifiedClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataJustifiedClause) {
			listener.exitDataJustifiedClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataJustifiedClause) {
			return visitor.visitDataJustifiedClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataOccursClauseContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(Cobol85Parser.OCCURS, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public dataOccursTo(): DataOccursToContext | undefined {
		return this.tryGetRuleContext(0, DataOccursToContext);
	}
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TIMES, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEPENDING, 0); }
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	public dataOccursSort(): DataOccursSortContext[];
	public dataOccursSort(i: number): DataOccursSortContext;
	public dataOccursSort(i?: number): DataOccursSortContext | DataOccursSortContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataOccursSortContext);
		} else {
			return this.getRuleContext(i, DataOccursSortContext);
		}
	}
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INDEXED, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCAL, 0); }
	public indexName(): IndexNameContext[];
	public indexName(i: number): IndexNameContext;
	public indexName(i?: number): IndexNameContext | IndexNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexNameContext);
		} else {
			return this.getRuleContext(i, IndexNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataOccursClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataOccursClause) {
			listener.enterDataOccursClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataOccursClause) {
			listener.exitDataOccursClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataOccursClause) {
			return visitor.visitDataOccursClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataOccursToContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataOccursTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataOccursTo) {
			listener.enterDataOccursTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataOccursTo) {
			listener.exitDataOccursTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataOccursTo) {
			return visitor.visitDataOccursTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataOccursSortContext extends ParserRuleContext {
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DESCENDING, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public qualifiedDataName(): QualifiedDataNameContext[];
	public qualifiedDataName(i: number): QualifiedDataNameContext;
	public qualifiedDataName(i?: number): QualifiedDataNameContext | QualifiedDataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedDataNameContext);
		} else {
			return this.getRuleContext(i, QualifiedDataNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataOccursSort; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataOccursSort) {
			listener.enterDataOccursSort(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataOccursSort) {
			listener.exitDataOccursSort(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataOccursSort) {
			return visitor.visitDataOccursSort(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataPictureClauseContext extends ParserRuleContext {
	public pictureString(): PictureStringContext {
		return this.getRuleContext(0, PictureStringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PIC, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataPictureClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataPictureClause) {
			listener.enterDataPictureClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataPictureClause) {
			listener.exitDataPictureClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataPictureClause) {
			return visitor.visitDataPictureClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureStringContext extends ParserRuleContext {
	public pictureChars(): PictureCharsContext[];
	public pictureChars(i: number): PictureCharsContext;
	public pictureChars(i?: number): PictureCharsContext | PictureCharsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PictureCharsContext);
		} else {
			return this.getRuleContext(i, PictureCharsContext);
		}
	}
	public pictureCardinality(): PictureCardinalityContext[];
	public pictureCardinality(i: number): PictureCardinalityContext;
	public pictureCardinality(i?: number): PictureCardinalityContext | PictureCardinalityContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PictureCardinalityContext);
		} else {
			return this.getRuleContext(i, PictureCardinalityContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_pictureString; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPictureString) {
			listener.enterPictureString(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPictureString) {
			listener.exitPictureString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPictureString) {
			return visitor.visitPictureString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureCharsContext extends ParserRuleContext {
	public DOLLARCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DOLLARCHAR, 0); }
	public IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IDENTIFIER, 0); }
	public NUMERICLITERAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERICLITERAL, 0); }
	public SLASHCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SLASHCHAR, 0); }
	public COMMACHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMMACHAR, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DOT, 0); }
	public COLONCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COLONCHAR, 0); }
	public ASTERISKCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASTERISKCHAR, 0); }
	public DOUBLEASTERISKCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0); }
	public LPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); }
	public RPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); }
	public PLUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); }
	public MINUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); }
	public LESSTHANCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LESSTHANCHAR, 0); }
	public MORETHANCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MORETHANCHAR, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_pictureChars; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPictureChars) {
			listener.enterPictureChars(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPictureChars) {
			listener.exitPictureChars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPictureChars) {
			return visitor.visitPictureChars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureCardinalityContext extends ParserRuleContext {
	public LPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.LPARENCHAR, 0); }
	public integerLiteral(): IntegerLiteralContext {
		return this.getRuleContext(0, IntegerLiteralContext);
	}
	public RPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.RPARENCHAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_pictureCardinality; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPictureCardinality) {
			listener.enterPictureCardinality(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPictureCardinality) {
			listener.exitPictureCardinality(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPictureCardinality) {
			return visitor.visitPictureCardinality(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataReceivedByClauseContext extends ParserRuleContext {
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTENT, 0); }
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REFERENCE, 0); }
	public REF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REF, 0); }
	public RECEIVED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECEIVED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataReceivedByClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataReceivedByClause) {
			listener.enterDataReceivedByClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataReceivedByClause) {
			listener.exitDataReceivedByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataReceivedByClause) {
			return visitor.visitDataReceivedByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataRecordAreaClauseContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(Cobol85Parser.RECORD, 0); }
	public AREA(): TerminalNode { return this.getToken(Cobol85Parser.AREA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataRecordAreaClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataRecordAreaClause) {
			listener.enterDataRecordAreaClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataRecordAreaClause) {
			listener.exitDataRecordAreaClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataRecordAreaClause) {
			return visitor.visitDataRecordAreaClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataRedefinesClauseContext extends ParserRuleContext {
	public REDEFINES(): TerminalNode { return this.getToken(Cobol85Parser.REDEFINES, 0); }
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataRedefinesClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataRedefinesClause) {
			listener.enterDataRedefinesClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataRedefinesClause) {
			listener.exitDataRedefinesClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataRedefinesClause) {
			return visitor.visitDataRedefinesClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataRenamesClauseContext extends ParserRuleContext {
	public RENAMES(): TerminalNode { return this.getToken(Cobol85Parser.RENAMES, 0); }
	public qualifiedDataName(): QualifiedDataNameContext[];
	public qualifiedDataName(i: number): QualifiedDataNameContext;
	public qualifiedDataName(i?: number): QualifiedDataNameContext | QualifiedDataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedDataNameContext);
		} else {
			return this.getRuleContext(i, QualifiedDataNameContext);
		}
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataRenamesClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataRenamesClause) {
			listener.enterDataRenamesClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataRenamesClause) {
			listener.exitDataRenamesClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataRenamesClause) {
			return visitor.visitDataRenamesClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataSignClauseContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SEPARATE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataSignClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataSignClause) {
			listener.enterDataSignClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataSignClause) {
			listener.exitDataSignClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataSignClause) {
			return visitor.visitDataSignClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataSynchronizedClauseContext extends ParserRuleContext {
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RIGHT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataSynchronizedClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataSynchronizedClause) {
			listener.enterDataSynchronizedClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataSynchronizedClause) {
			listener.exitDataSynchronizedClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataSynchronizedClause) {
			return visitor.visitDataSynchronizedClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataThreadLocalClauseContext extends ParserRuleContext {
	public THREAD_LOCAL(): TerminalNode { return this.getToken(Cobol85Parser.THREAD_LOCAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataThreadLocalClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataThreadLocalClause) {
			listener.enterDataThreadLocalClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataThreadLocalClause) {
			listener.exitDataThreadLocalClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataThreadLocalClause) {
			return visitor.visitDataThreadLocalClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataTypeClauseContext extends ParserRuleContext {
	public TYPE(): TerminalNode { return this.getToken(Cobol85Parser.TYPE, 0); }
	public SHORT_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHORT_DATE, 0); }
	public LONG_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LONG_DATE, 0); }
	public NUMERIC_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERIC_DATE, 0); }
	public NUMERIC_TIME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERIC_TIME, 0); }
	public LONG_TIME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LONG_TIME, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataTypeClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataTypeClause) {
			listener.enterDataTypeClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataTypeClause) {
			listener.exitDataTypeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataTypeClause) {
			return visitor.visitDataTypeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataTypeDefClauseContext extends ParserRuleContext {
	public TYPEDEF(): TerminalNode { return this.getToken(Cobol85Parser.TYPEDEF, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataTypeDefClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataTypeDefClause) {
			listener.enterDataTypeDefClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataTypeDefClause) {
			listener.exitDataTypeDefClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataTypeDefClause) {
			return visitor.visitDataTypeDefClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataUsageClauseContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BINARY, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BIT, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMP_5, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMPUTATIONAL_5, 0); }
	public CONTROL_POINT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTROL_POINT, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DATE, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISPLAY, 0); }
	public DISPLAY_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISPLAY_1, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DOUBLE, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EVENT, 0); }
	public FUNCTION_POINTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FUNCTION_POINTER, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INDEX, 0); }
	public KANJI(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KANJI, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCK, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.POINTER, 0); }
	public PROCEDURE_POINTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROCEDURE_POINTER, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REAL, 0); }
	public TASK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TASK, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public TRUNCATED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRUNCATED, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EXTENDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataUsageClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataUsageClause) {
			listener.enterDataUsageClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataUsageClause) {
			listener.exitDataUsageClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataUsageClause) {
			return visitor.visitDataUsageClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataUsingClauseContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(Cobol85Parser.USING, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LANGUAGE, 0); }
	public CONVENTION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONVENTION, 0); }
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataUsingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataUsingClause) {
			listener.enterDataUsingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataUsingClause) {
			listener.exitDataUsingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataUsingClause) {
			return visitor.visitDataUsingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataValueClauseContext extends ParserRuleContext {
	public dataValueInterval(): DataValueIntervalContext[];
	public dataValueInterval(i: number): DataValueIntervalContext;
	public dataValueInterval(i?: number): DataValueIntervalContext | DataValueIntervalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataValueIntervalContext);
		} else {
			return this.getRuleContext(i, DataValueIntervalContext);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.VALUES, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ARE, 0); }
	public COMMACHAR(): TerminalNode[];
	public COMMACHAR(i: number): TerminalNode;
	public COMMACHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.COMMACHAR);
		} else {
			return this.getToken(Cobol85Parser.COMMACHAR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataValueClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataValueClause) {
			listener.enterDataValueClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataValueClause) {
			listener.exitDataValueClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataValueClause) {
			return visitor.visitDataValueClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataValueIntervalContext extends ParserRuleContext {
	public dataValueIntervalFrom(): DataValueIntervalFromContext {
		return this.getRuleContext(0, DataValueIntervalFromContext);
	}
	public dataValueIntervalTo(): DataValueIntervalToContext | undefined {
		return this.tryGetRuleContext(0, DataValueIntervalToContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataValueInterval; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataValueInterval) {
			listener.enterDataValueInterval(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataValueInterval) {
			listener.exitDataValueInterval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataValueInterval) {
			return visitor.visitDataValueInterval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataValueIntervalFromContext extends ParserRuleContext {
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataValueIntervalFrom; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataValueIntervalFrom) {
			listener.enterDataValueIntervalFrom(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataValueIntervalFrom) {
			listener.exitDataValueIntervalFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataValueIntervalFrom) {
			return visitor.visitDataValueIntervalFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataValueIntervalToContext extends ParserRuleContext {
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataValueIntervalTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataValueIntervalTo) {
			listener.enterDataValueIntervalTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataValueIntervalTo) {
			listener.exitDataValueIntervalTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataValueIntervalTo) {
			return visitor.visitDataValueIntervalTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataWithLowerBoundsClauseContext extends ParserRuleContext {
	public LOWER(): TerminalNode { return this.getToken(Cobol85Parser.LOWER, 0); }
	public BOUNDS(): TerminalNode { return this.getToken(Cobol85Parser.BOUNDS, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataWithLowerBoundsClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataWithLowerBoundsClause) {
			listener.enterDataWithLowerBoundsClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataWithLowerBoundsClause) {
			listener.exitDataWithLowerBoundsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataWithLowerBoundsClause) {
			return visitor.visitDataWithLowerBoundsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(Cobol85Parser.PROCEDURE, 0); }
	public DIVISION(): TerminalNode { return this.getToken(Cobol85Parser.DIVISION, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public procedureDivisionBody(): ProcedureDivisionBodyContext {
		return this.getRuleContext(0, ProcedureDivisionBodyContext);
	}
	public procedureDivisionUsingClause(): ProcedureDivisionUsingClauseContext | undefined {
		return this.tryGetRuleContext(0, ProcedureDivisionUsingClauseContext);
	}
	public procedureDivisionGivingClause(): ProcedureDivisionGivingClauseContext | undefined {
		return this.tryGetRuleContext(0, ProcedureDivisionGivingClauseContext);
	}
	public procedureDeclaratives(): ProcedureDeclarativesContext | undefined {
		return this.tryGetRuleContext(0, ProcedureDeclarativesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivision; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivision) {
			listener.enterProcedureDivision(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivision) {
			listener.exitProcedureDivision(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivision) {
			return visitor.visitProcedureDivision(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionUsingClauseContext extends ParserRuleContext {
	public USING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.USING, 0); }
	public CHAINING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHAINING, 0); }
	public procedureDivisionUsingParameter(): ProcedureDivisionUsingParameterContext[];
	public procedureDivisionUsingParameter(i: number): ProcedureDivisionUsingParameterContext;
	public procedureDivisionUsingParameter(i?: number): ProcedureDivisionUsingParameterContext | ProcedureDivisionUsingParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureDivisionUsingParameterContext);
		} else {
			return this.getRuleContext(i, ProcedureDivisionUsingParameterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionUsingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionUsingClause) {
			listener.enterProcedureDivisionUsingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionUsingClause) {
			listener.exitProcedureDivisionUsingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionUsingClause) {
			return visitor.visitProcedureDivisionUsingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionGivingClauseContext extends ParserRuleContext {
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.GIVING, 0); }
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RETURNING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionGivingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionGivingClause) {
			listener.enterProcedureDivisionGivingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionGivingClause) {
			listener.exitProcedureDivisionGivingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionGivingClause) {
			return visitor.visitProcedureDivisionGivingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionUsingParameterContext extends ParserRuleContext {
	public procedureDivisionByReferencePhrase(): ProcedureDivisionByReferencePhraseContext | undefined {
		return this.tryGetRuleContext(0, ProcedureDivisionByReferencePhraseContext);
	}
	public procedureDivisionByValuePhrase(): ProcedureDivisionByValuePhraseContext | undefined {
		return this.tryGetRuleContext(0, ProcedureDivisionByValuePhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionUsingParameter; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionUsingParameter) {
			listener.enterProcedureDivisionUsingParameter(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionUsingParameter) {
			listener.exitProcedureDivisionUsingParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionUsingParameter) {
			return visitor.visitProcedureDivisionUsingParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionByReferencePhraseContext extends ParserRuleContext {
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REFERENCE, 0); }
	public procedureDivisionByReference(): ProcedureDivisionByReferenceContext[];
	public procedureDivisionByReference(i: number): ProcedureDivisionByReferenceContext;
	public procedureDivisionByReference(i?: number): ProcedureDivisionByReferenceContext | ProcedureDivisionByReferenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureDivisionByReferenceContext);
		} else {
			return this.getRuleContext(i, ProcedureDivisionByReferenceContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionByReferencePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionByReferencePhrase) {
			listener.enterProcedureDivisionByReferencePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionByReferencePhrase) {
			listener.exitProcedureDivisionByReferencePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionByReferencePhrase) {
			return visitor.visitProcedureDivisionByReferencePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionByReferenceContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public fileName(): FileNameContext | undefined {
		return this.tryGetRuleContext(0, FileNameContext);
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OPTIONAL, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ANY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionByReference; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionByReference) {
			listener.enterProcedureDivisionByReference(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionByReference) {
			listener.exitProcedureDivisionByReference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionByReference) {
			return visitor.visitProcedureDivisionByReference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionByValuePhraseContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(Cobol85Parser.VALUE, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public procedureDivisionByValue(): ProcedureDivisionByValueContext[];
	public procedureDivisionByValue(i: number): ProcedureDivisionByValueContext;
	public procedureDivisionByValue(i?: number): ProcedureDivisionByValueContext | ProcedureDivisionByValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureDivisionByValueContext);
		} else {
			return this.getRuleContext(i, ProcedureDivisionByValueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionByValuePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionByValuePhrase) {
			listener.enterProcedureDivisionByValuePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionByValuePhrase) {
			listener.exitProcedureDivisionByValuePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionByValuePhrase) {
			return visitor.visitProcedureDivisionByValuePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionByValueContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public ANY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ANY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionByValue; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionByValue) {
			listener.enterProcedureDivisionByValue(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionByValue) {
			listener.exitProcedureDivisionByValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionByValue) {
			return visitor.visitProcedureDivisionByValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDeclarativesContext extends ParserRuleContext {
	public DECLARATIVES(): TerminalNode[];
	public DECLARATIVES(i: number): TerminalNode;
	public DECLARATIVES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DECLARATIVES);
		} else {
			return this.getToken(Cobol85Parser.DECLARATIVES, i);
		}
	}
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public END(): TerminalNode { return this.getToken(Cobol85Parser.END, 0); }
	public procedureDeclarative(): ProcedureDeclarativeContext[];
	public procedureDeclarative(i: number): ProcedureDeclarativeContext;
	public procedureDeclarative(i?: number): ProcedureDeclarativeContext | ProcedureDeclarativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureDeclarativeContext);
		} else {
			return this.getRuleContext(i, ProcedureDeclarativeContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDeclaratives; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDeclaratives) {
			listener.enterProcedureDeclaratives(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDeclaratives) {
			listener.exitProcedureDeclaratives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDeclaratives) {
			return visitor.visitProcedureDeclaratives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDeclarativeContext extends ParserRuleContext {
	public procedureSectionHeader(): ProcedureSectionHeaderContext {
		return this.getRuleContext(0, ProcedureSectionHeaderContext);
	}
	public DOT_FS(): TerminalNode[];
	public DOT_FS(i: number): TerminalNode;
	public DOT_FS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.DOT_FS);
		} else {
			return this.getToken(Cobol85Parser.DOT_FS, i);
		}
	}
	public useStatement(): UseStatementContext {
		return this.getRuleContext(0, UseStatementContext);
	}
	public paragraphs(): ParagraphsContext {
		return this.getRuleContext(0, ParagraphsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDeclarative; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDeclarative) {
			listener.enterProcedureDeclarative(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDeclarative) {
			listener.exitProcedureDeclarative(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDeclarative) {
			return visitor.visitProcedureDeclarative(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureSectionHeaderContext extends ParserRuleContext {
	public sectionName(): SectionNameContext {
		return this.getRuleContext(0, SectionNameContext);
	}
	public SECTION(): TerminalNode { return this.getToken(Cobol85Parser.SECTION, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureSectionHeader; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureSectionHeader) {
			listener.enterProcedureSectionHeader(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureSectionHeader) {
			listener.exitProcedureSectionHeader(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureSectionHeader) {
			return visitor.visitProcedureSectionHeader(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureDivisionBodyContext extends ParserRuleContext {
	public paragraphs(): ParagraphsContext {
		return this.getRuleContext(0, ParagraphsContext);
	}
	public procedureSection(): ProcedureSectionContext[];
	public procedureSection(i: number): ProcedureSectionContext;
	public procedureSection(i?: number): ProcedureSectionContext | ProcedureSectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSectionContext);
		} else {
			return this.getRuleContext(i, ProcedureSectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureDivisionBody; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureDivisionBody) {
			listener.enterProcedureDivisionBody(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureDivisionBody) {
			listener.exitProcedureDivisionBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureDivisionBody) {
			return visitor.visitProcedureDivisionBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureSectionContext extends ParserRuleContext {
	public procedureSectionHeader(): ProcedureSectionHeaderContext {
		return this.getRuleContext(0, ProcedureSectionHeaderContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public paragraphs(): ParagraphsContext {
		return this.getRuleContext(0, ParagraphsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureSection) {
			listener.enterProcedureSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureSection) {
			listener.exitProcedureSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureSection) {
			return visitor.visitProcedureSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphsContext extends ParserRuleContext {
	public sentence(): SentenceContext[];
	public sentence(i: number): SentenceContext;
	public sentence(i?: number): SentenceContext | SentenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenceContext);
		} else {
			return this.getRuleContext(i, SentenceContext);
		}
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_paragraphs; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterParagraphs) {
			listener.enterParagraphs(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitParagraphs) {
			listener.exitParagraphs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitParagraphs) {
			return visitor.visitParagraphs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphContext extends ParserRuleContext {
	public paragraphName(): ParagraphNameContext {
		return this.getRuleContext(0, ParagraphNameContext);
	}
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public alteredGoTo(): AlteredGoToContext | undefined {
		return this.tryGetRuleContext(0, AlteredGoToContext);
	}
	public sentence(): SentenceContext[];
	public sentence(i: number): SentenceContext;
	public sentence(i?: number): SentenceContext | SentenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenceContext);
		} else {
			return this.getRuleContext(i, SentenceContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_paragraph; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterParagraph) {
			listener.enterParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitParagraph) {
			listener.exitParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitParagraph) {
			return visitor.visitParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SentenceContext extends ParserRuleContext {
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sentence; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSentence) {
			listener.enterSentence(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSentence) {
			listener.exitSentence(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSentence) {
			return visitor.visitSentence(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public acceptStatement(): AcceptStatementContext | undefined {
		return this.tryGetRuleContext(0, AcceptStatementContext);
	}
	public addStatement(): AddStatementContext | undefined {
		return this.tryGetRuleContext(0, AddStatementContext);
	}
	public alterStatement(): AlterStatementContext | undefined {
		return this.tryGetRuleContext(0, AlterStatementContext);
	}
	public callStatement(): CallStatementContext | undefined {
		return this.tryGetRuleContext(0, CallStatementContext);
	}
	public cancelStatement(): CancelStatementContext | undefined {
		return this.tryGetRuleContext(0, CancelStatementContext);
	}
	public closeStatement(): CloseStatementContext | undefined {
		return this.tryGetRuleContext(0, CloseStatementContext);
	}
	public computeStatement(): ComputeStatementContext | undefined {
		return this.tryGetRuleContext(0, ComputeStatementContext);
	}
	public continueStatement(): ContinueStatementContext | undefined {
		return this.tryGetRuleContext(0, ContinueStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public disableStatement(): DisableStatementContext | undefined {
		return this.tryGetRuleContext(0, DisableStatementContext);
	}
	public displayStatement(): DisplayStatementContext | undefined {
		return this.tryGetRuleContext(0, DisplayStatementContext);
	}
	public divideStatement(): DivideStatementContext | undefined {
		return this.tryGetRuleContext(0, DivideStatementContext);
	}
	public enableStatement(): EnableStatementContext | undefined {
		return this.tryGetRuleContext(0, EnableStatementContext);
	}
	public entryStatement(): EntryStatementContext | undefined {
		return this.tryGetRuleContext(0, EntryStatementContext);
	}
	public evaluateStatement(): EvaluateStatementContext | undefined {
		return this.tryGetRuleContext(0, EvaluateStatementContext);
	}
	public exhibitStatement(): ExhibitStatementContext | undefined {
		return this.tryGetRuleContext(0, ExhibitStatementContext);
	}
	public execCicsStatement(): ExecCicsStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecCicsStatementContext);
	}
	public execSqlStatement(): ExecSqlStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecSqlStatementContext);
	}
	public execSqlImsStatement(): ExecSqlImsStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecSqlImsStatementContext);
	}
	public exitStatement(): ExitStatementContext | undefined {
		return this.tryGetRuleContext(0, ExitStatementContext);
	}
	public generateStatement(): GenerateStatementContext | undefined {
		return this.tryGetRuleContext(0, GenerateStatementContext);
	}
	public gobackStatement(): GobackStatementContext | undefined {
		return this.tryGetRuleContext(0, GobackStatementContext);
	}
	public goToStatement(): GoToStatementContext | undefined {
		return this.tryGetRuleContext(0, GoToStatementContext);
	}
	public ifStatement(): IfStatementContext | undefined {
		return this.tryGetRuleContext(0, IfStatementContext);
	}
	public initializeStatement(): InitializeStatementContext | undefined {
		return this.tryGetRuleContext(0, InitializeStatementContext);
	}
	public initiateStatement(): InitiateStatementContext | undefined {
		return this.tryGetRuleContext(0, InitiateStatementContext);
	}
	public inspectStatement(): InspectStatementContext | undefined {
		return this.tryGetRuleContext(0, InspectStatementContext);
	}
	public mergeStatement(): MergeStatementContext | undefined {
		return this.tryGetRuleContext(0, MergeStatementContext);
	}
	public moveStatement(): MoveStatementContext | undefined {
		return this.tryGetRuleContext(0, MoveStatementContext);
	}
	public multiplyStatement(): MultiplyStatementContext | undefined {
		return this.tryGetRuleContext(0, MultiplyStatementContext);
	}
	public openStatement(): OpenStatementContext | undefined {
		return this.tryGetRuleContext(0, OpenStatementContext);
	}
	public performStatement(): PerformStatementContext | undefined {
		return this.tryGetRuleContext(0, PerformStatementContext);
	}
	public purgeStatement(): PurgeStatementContext | undefined {
		return this.tryGetRuleContext(0, PurgeStatementContext);
	}
	public readStatement(): ReadStatementContext | undefined {
		return this.tryGetRuleContext(0, ReadStatementContext);
	}
	public receiveStatement(): ReceiveStatementContext | undefined {
		return this.tryGetRuleContext(0, ReceiveStatementContext);
	}
	public releaseStatement(): ReleaseStatementContext | undefined {
		return this.tryGetRuleContext(0, ReleaseStatementContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public rewriteStatement(): RewriteStatementContext | undefined {
		return this.tryGetRuleContext(0, RewriteStatementContext);
	}
	public searchStatement(): SearchStatementContext | undefined {
		return this.tryGetRuleContext(0, SearchStatementContext);
	}
	public sendStatement(): SendStatementContext | undefined {
		return this.tryGetRuleContext(0, SendStatementContext);
	}
	public setStatement(): SetStatementContext | undefined {
		return this.tryGetRuleContext(0, SetStatementContext);
	}
	public sortStatement(): SortStatementContext | undefined {
		return this.tryGetRuleContext(0, SortStatementContext);
	}
	public startStatement(): StartStatementContext | undefined {
		return this.tryGetRuleContext(0, StartStatementContext);
	}
	public stopStatement(): StopStatementContext | undefined {
		return this.tryGetRuleContext(0, StopStatementContext);
	}
	public stringStatement(): StringStatementContext | undefined {
		return this.tryGetRuleContext(0, StringStatementContext);
	}
	public subtractStatement(): SubtractStatementContext | undefined {
		return this.tryGetRuleContext(0, SubtractStatementContext);
	}
	public terminateStatement(): TerminateStatementContext | undefined {
		return this.tryGetRuleContext(0, TerminateStatementContext);
	}
	public unstringStatement(): UnstringStatementContext | undefined {
		return this.tryGetRuleContext(0, UnstringStatementContext);
	}
	public writeStatement(): WriteStatementContext | undefined {
		return this.tryGetRuleContext(0, WriteStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_statement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptStatementContext extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(Cobol85Parser.ACCEPT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public acceptFromDateStatement(): AcceptFromDateStatementContext | undefined {
		return this.tryGetRuleContext(0, AcceptFromDateStatementContext);
	}
	public acceptFromEscapeKeyStatement(): AcceptFromEscapeKeyStatementContext | undefined {
		return this.tryGetRuleContext(0, AcceptFromEscapeKeyStatementContext);
	}
	public acceptFromMnemonicStatement(): AcceptFromMnemonicStatementContext | undefined {
		return this.tryGetRuleContext(0, AcceptFromMnemonicStatementContext);
	}
	public acceptMessageCountStatement(): AcceptMessageCountStatementContext | undefined {
		return this.tryGetRuleContext(0, AcceptMessageCountStatementContext);
	}
	public onExceptionClause(): OnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, OnExceptionClauseContext);
	}
	public notOnExceptionClause(): NotOnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_acceptStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAcceptStatement) {
			listener.enterAcceptStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAcceptStatement) {
			listener.exitAcceptStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAcceptStatement) {
			return visitor.visitAcceptStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptFromDateStatementContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DATE, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DAY, 0); }
	public DAY_OF_WEEK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DAY_OF_WEEK, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TIME, 0); }
	public TIMER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TIMER, 0); }
	public TODAYS_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TODAYS_DATE, 0); }
	public TODAYS_NAME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TODAYS_NAME, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.YEAR, 0); }
	public YYYYMMDD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.YYYYMMDD, 0); }
	public YYYYDDD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.YYYYDDD, 0); }
	public MMDDYYYY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MMDDYYYY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_acceptFromDateStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAcceptFromDateStatement) {
			listener.enterAcceptFromDateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAcceptFromDateStatement) {
			listener.exitAcceptFromDateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAcceptFromDateStatement) {
			return visitor.visitAcceptFromDateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptFromMnemonicStatementContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public mnemonicName(): MnemonicNameContext {
		return this.getRuleContext(0, MnemonicNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_acceptFromMnemonicStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAcceptFromMnemonicStatement) {
			listener.enterAcceptFromMnemonicStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAcceptFromMnemonicStatement) {
			listener.exitAcceptFromMnemonicStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAcceptFromMnemonicStatement) {
			return visitor.visitAcceptFromMnemonicStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptFromEscapeKeyStatementContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public ESCAPE(): TerminalNode { return this.getToken(Cobol85Parser.ESCAPE, 0); }
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_acceptFromEscapeKeyStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAcceptFromEscapeKeyStatement) {
			listener.enterAcceptFromEscapeKeyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAcceptFromEscapeKeyStatement) {
			listener.exitAcceptFromEscapeKeyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAcceptFromEscapeKeyStatement) {
			return visitor.visitAcceptFromEscapeKeyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptMessageCountStatementContext extends ParserRuleContext {
	public COUNT(): TerminalNode { return this.getToken(Cobol85Parser.COUNT, 0); }
	public MESSAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MESSAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_acceptMessageCountStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAcceptMessageCountStatement) {
			listener.enterAcceptMessageCountStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAcceptMessageCountStatement) {
			listener.exitAcceptMessageCountStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAcceptMessageCountStatement) {
			return visitor.visitAcceptMessageCountStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddStatementContext extends ParserRuleContext {
	public ADD(): TerminalNode { return this.getToken(Cobol85Parser.ADD, 0); }
	public addToStatement(): AddToStatementContext | undefined {
		return this.tryGetRuleContext(0, AddToStatementContext);
	}
	public addToGivingStatement(): AddToGivingStatementContext | undefined {
		return this.tryGetRuleContext(0, AddToGivingStatementContext);
	}
	public addCorrespondingStatement(): AddCorrespondingStatementContext | undefined {
		return this.tryGetRuleContext(0, AddCorrespondingStatementContext);
	}
	public onSizeErrorPhrase(): OnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
	}
	public notOnSizeErrorPhrase(): NotOnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
	}
	public END_ADD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_ADD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddStatement) {
			listener.enterAddStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddStatement) {
			listener.exitAddStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddStatement) {
			return visitor.visitAddStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddToStatementContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public addFrom(): AddFromContext[];
	public addFrom(i: number): AddFromContext;
	public addFrom(i?: number): AddFromContext | AddFromContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AddFromContext);
		} else {
			return this.getRuleContext(i, AddFromContext);
		}
	}
	public addTo(): AddToContext[];
	public addTo(i: number): AddToContext;
	public addTo(i?: number): AddToContext | AddToContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AddToContext);
		} else {
			return this.getRuleContext(i, AddToContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addToStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddToStatement) {
			listener.enterAddToStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddToStatement) {
			listener.exitAddToStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddToStatement) {
			return visitor.visitAddToStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddToGivingStatementContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(Cobol85Parser.GIVING, 0); }
	public addFrom(): AddFromContext[];
	public addFrom(i: number): AddFromContext;
	public addFrom(i?: number): AddFromContext | AddFromContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AddFromContext);
		} else {
			return this.getRuleContext(i, AddFromContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TO, 0); }
	public addGiving(): AddGivingContext[];
	public addGiving(i: number): AddGivingContext;
	public addGiving(i?: number): AddGivingContext | AddGivingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AddGivingContext);
		} else {
			return this.getRuleContext(i, AddGivingContext);
		}
	}
	public addToGiving(): AddToGivingContext[];
	public addToGiving(i: number): AddToGivingContext;
	public addToGiving(i?: number): AddToGivingContext | AddToGivingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AddToGivingContext);
		} else {
			return this.getRuleContext(i, AddToGivingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addToGivingStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddToGivingStatement) {
			listener.enterAddToGivingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddToGivingStatement) {
			listener.exitAddToGivingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddToGivingStatement) {
			return visitor.visitAddToGivingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddCorrespondingStatementContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public addTo(): AddToContext {
		return this.getRuleContext(0, AddToContext);
	}
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CORRESPONDING, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CORR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addCorrespondingStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddCorrespondingStatement) {
			listener.enterAddCorrespondingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddCorrespondingStatement) {
			listener.exitAddCorrespondingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddCorrespondingStatement) {
			return visitor.visitAddCorrespondingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddFromContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addFrom; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddFrom) {
			listener.enterAddFrom(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddFrom) {
			listener.exitAddFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddFrom) {
			return visitor.visitAddFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddToContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddTo) {
			listener.enterAddTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddTo) {
			listener.exitAddTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddTo) {
			return visitor.visitAddTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddToGivingContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addToGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddToGiving) {
			listener.enterAddToGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddToGiving) {
			listener.exitAddToGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddToGiving) {
			return visitor.visitAddToGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddGivingContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_addGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAddGiving) {
			listener.enterAddGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAddGiving) {
			listener.exitAddGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAddGiving) {
			return visitor.visitAddGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlteredGoToContext extends ParserRuleContext {
	public GO(): TerminalNode { return this.getToken(Cobol85Parser.GO, 0); }
	public DOT_FS(): TerminalNode { return this.getToken(Cobol85Parser.DOT_FS, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alteredGoTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlteredGoTo) {
			listener.enterAlteredGoTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlteredGoTo) {
			listener.exitAlteredGoTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlteredGoTo) {
			return visitor.visitAlteredGoTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(Cobol85Parser.ALTER, 0); }
	public alterProceedTo(): AlterProceedToContext[];
	public alterProceedTo(i: number): AlterProceedToContext;
	public alterProceedTo(i?: number): AlterProceedToContext | AlterProceedToContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterProceedToContext);
		} else {
			return this.getRuleContext(i, AlterProceedToContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alterStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlterStatement) {
			listener.enterAlterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlterStatement) {
			listener.exitAlterStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlterStatement) {
			return visitor.visitAlterStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterProceedToContext extends ParserRuleContext {
	public procedureName(): ProcedureNameContext[];
	public procedureName(i: number): ProcedureNameContext;
	public procedureName(i?: number): ProcedureNameContext | ProcedureNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureNameContext);
		} else {
			return this.getRuleContext(i, ProcedureNameContext);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.TO);
		} else {
			return this.getToken(Cobol85Parser.TO, i);
		}
	}
	public PROCEED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROCEED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alterProceedTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlterProceedTo) {
			listener.enterAlterProceedTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlterProceedTo) {
			listener.exitAlterProceedTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlterProceedTo) {
			return visitor.visitAlterProceedTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallStatementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(Cobol85Parser.CALL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public callUsingPhrase(): CallUsingPhraseContext | undefined {
		return this.tryGetRuleContext(0, CallUsingPhraseContext);
	}
	public callGivingPhrase(): CallGivingPhraseContext | undefined {
		return this.tryGetRuleContext(0, CallGivingPhraseContext);
	}
	public onOverflowPhrase(): OnOverflowPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnOverflowPhraseContext);
	}
	public onExceptionClause(): OnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, OnExceptionClauseContext);
	}
	public notOnExceptionClause(): NotOnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
	}
	public END_CALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_CALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallStatement) {
			listener.enterCallStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallStatement) {
			listener.exitCallStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallStatement) {
			return visitor.visitCallStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallUsingPhraseContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(Cobol85Parser.USING, 0); }
	public callUsingParameter(): CallUsingParameterContext[];
	public callUsingParameter(i: number): CallUsingParameterContext;
	public callUsingParameter(i?: number): CallUsingParameterContext | CallUsingParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CallUsingParameterContext);
		} else {
			return this.getRuleContext(i, CallUsingParameterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callUsingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallUsingPhrase) {
			listener.enterCallUsingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallUsingPhrase) {
			listener.exitCallUsingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallUsingPhrase) {
			return visitor.visitCallUsingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallUsingParameterContext extends ParserRuleContext {
	public callByReferencePhrase(): CallByReferencePhraseContext | undefined {
		return this.tryGetRuleContext(0, CallByReferencePhraseContext);
	}
	public callByValuePhrase(): CallByValuePhraseContext | undefined {
		return this.tryGetRuleContext(0, CallByValuePhraseContext);
	}
	public callByContentPhrase(): CallByContentPhraseContext | undefined {
		return this.tryGetRuleContext(0, CallByContentPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callUsingParameter; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallUsingParameter) {
			listener.enterCallUsingParameter(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallUsingParameter) {
			listener.exitCallUsingParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallUsingParameter) {
			return visitor.visitCallUsingParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallByReferencePhraseContext extends ParserRuleContext {
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REFERENCE, 0); }
	public callByReference(): CallByReferenceContext[];
	public callByReference(i: number): CallByReferenceContext;
	public callByReference(i?: number): CallByReferenceContext | CallByReferenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CallByReferenceContext);
		} else {
			return this.getRuleContext(i, CallByReferenceContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callByReferencePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallByReferencePhrase) {
			listener.enterCallByReferencePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallByReferencePhrase) {
			listener.exitCallByReferencePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallByReferencePhrase) {
			return visitor.visitCallByReferencePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallByReferenceContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public fileName(): FileNameContext | undefined {
		return this.tryGetRuleContext(0, FileNameContext);
	}
	public ADDRESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INTEGER, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.STRING, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OMITTED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callByReference; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallByReference) {
			listener.enterCallByReference(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallByReference) {
			listener.exitCallByReference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallByReference) {
			return visitor.visitCallByReference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallByValuePhraseContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(Cobol85Parser.VALUE, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public callByValue(): CallByValueContext[];
	public callByValue(i: number): CallByValueContext;
	public callByValue(i?: number): CallByValueContext | CallByValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CallByValueContext);
		} else {
			return this.getRuleContext(i, CallByValueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callByValuePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallByValuePhrase) {
			listener.enterCallByValuePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallByValuePhrase) {
			listener.exitCallByValuePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallByValuePhrase) {
			return visitor.visitCallByValuePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallByValueContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public ADDRESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LENGTH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callByValue; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallByValue) {
			listener.enterCallByValue(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallByValue) {
			listener.exitCallByValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallByValue) {
			return visitor.visitCallByValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallByContentPhraseContext extends ParserRuleContext {
	public CONTENT(): TerminalNode { return this.getToken(Cobol85Parser.CONTENT, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public callByContent(): CallByContentContext[];
	public callByContent(i: number): CallByContentContext;
	public callByContent(i?: number): CallByContentContext | CallByContentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CallByContentContext);
		} else {
			return this.getRuleContext(i, CallByContentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callByContentPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallByContentPhrase) {
			listener.enterCallByContentPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallByContentPhrase) {
			listener.exitCallByContentPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallByContentPhrase) {
			return visitor.visitCallByContentPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallByContentContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public ADDRESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LENGTH, 0); }
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OMITTED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callByContent; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallByContent) {
			listener.enterCallByContent(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallByContent) {
			listener.exitCallByContent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallByContent) {
			return visitor.visitCallByContent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallGivingPhraseContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.GIVING, 0); }
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RETURNING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_callGivingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCallGivingPhrase) {
			listener.enterCallGivingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCallGivingPhrase) {
			listener.exitCallGivingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCallGivingPhrase) {
			return visitor.visitCallGivingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelStatementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(Cobol85Parser.CANCEL, 0); }
	public cancelCall(): CancelCallContext[];
	public cancelCall(i: number): CancelCallContext;
	public cancelCall(i?: number): CancelCallContext | CancelCallContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CancelCallContext);
		} else {
			return this.getRuleContext(i, CancelCallContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_cancelStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCancelStatement) {
			listener.enterCancelStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCancelStatement) {
			listener.exitCancelStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCancelStatement) {
			return visitor.visitCancelStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CancelCallContext extends ParserRuleContext {
	public libraryName(): LibraryNameContext | undefined {
		return this.tryGetRuleContext(0, LibraryNameContext);
	}
	public BYTITLE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BYTITLE, 0); }
	public BYFUNCTION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BYFUNCTION, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_cancelCall; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCancelCall) {
			listener.enterCancelCall(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCancelCall) {
			listener.exitCancelCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCancelCall) {
			return visitor.visitCancelCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CloseStatementContext extends ParserRuleContext {
	public CLOSE(): TerminalNode { return this.getToken(Cobol85Parser.CLOSE, 0); }
	public closeFile(): CloseFileContext[];
	public closeFile(i: number): CloseFileContext;
	public closeFile(i?: number): CloseFileContext | CloseFileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CloseFileContext);
		} else {
			return this.getRuleContext(i, CloseFileContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCloseStatement) {
			listener.enterCloseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCloseStatement) {
			listener.exitCloseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCloseStatement) {
			return visitor.visitCloseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CloseFileContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public closeReelUnitStatement(): CloseReelUnitStatementContext | undefined {
		return this.tryGetRuleContext(0, CloseReelUnitStatementContext);
	}
	public closeRelativeStatement(): CloseRelativeStatementContext | undefined {
		return this.tryGetRuleContext(0, CloseRelativeStatementContext);
	}
	public closePortFileIOStatement(): ClosePortFileIOStatementContext | undefined {
		return this.tryGetRuleContext(0, ClosePortFileIOStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closeFile; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCloseFile) {
			listener.enterCloseFile(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCloseFile) {
			listener.exitCloseFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCloseFile) {
			return visitor.visitCloseFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CloseReelUnitStatementContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.UNIT, 0); }
	public REMOVAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REMOVAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REWIND, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCK, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closeReelUnitStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCloseReelUnitStatement) {
			listener.enterCloseReelUnitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCloseReelUnitStatement) {
			listener.exitCloseReelUnitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCloseReelUnitStatement) {
			return visitor.visitCloseReelUnitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CloseRelativeStatementContext extends ParserRuleContext {
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REWIND, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCK, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closeRelativeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCloseRelativeStatement) {
			listener.enterCloseRelativeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCloseRelativeStatement) {
			listener.exitCloseRelativeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCloseRelativeStatement) {
			return visitor.visitCloseRelativeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClosePortFileIOStatementContext extends ParserRuleContext {
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WAIT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.USING, 0); }
	public closePortFileIOUsing(): ClosePortFileIOUsingContext[];
	public closePortFileIOUsing(i: number): ClosePortFileIOUsingContext;
	public closePortFileIOUsing(i?: number): ClosePortFileIOUsingContext | ClosePortFileIOUsingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClosePortFileIOUsingContext);
		} else {
			return this.getRuleContext(i, ClosePortFileIOUsingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closePortFileIOStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClosePortFileIOStatement) {
			listener.enterClosePortFileIOStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClosePortFileIOStatement) {
			listener.exitClosePortFileIOStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClosePortFileIOStatement) {
			return visitor.visitClosePortFileIOStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClosePortFileIOUsingContext extends ParserRuleContext {
	public closePortFileIOUsingCloseDisposition(): ClosePortFileIOUsingCloseDispositionContext | undefined {
		return this.tryGetRuleContext(0, ClosePortFileIOUsingCloseDispositionContext);
	}
	public closePortFileIOUsingAssociatedData(): ClosePortFileIOUsingAssociatedDataContext | undefined {
		return this.tryGetRuleContext(0, ClosePortFileIOUsingAssociatedDataContext);
	}
	public closePortFileIOUsingAssociatedDataLength(): ClosePortFileIOUsingAssociatedDataLengthContext | undefined {
		return this.tryGetRuleContext(0, ClosePortFileIOUsingAssociatedDataLengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closePortFileIOUsing; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClosePortFileIOUsing) {
			listener.enterClosePortFileIOUsing(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClosePortFileIOUsing) {
			listener.exitClosePortFileIOUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClosePortFileIOUsing) {
			return visitor.visitClosePortFileIOUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClosePortFileIOUsingCloseDispositionContext extends ParserRuleContext {
	public CLOSE_DISPOSITION(): TerminalNode { return this.getToken(Cobol85Parser.CLOSE_DISPOSITION, 0); }
	public ABORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ABORT, 0); }
	public ORDERLY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ORDERLY, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClosePortFileIOUsingCloseDisposition) {
			listener.enterClosePortFileIOUsingCloseDisposition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClosePortFileIOUsingCloseDisposition) {
			listener.exitClosePortFileIOUsingCloseDisposition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClosePortFileIOUsingCloseDisposition) {
			return visitor.visitClosePortFileIOUsingCloseDisposition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClosePortFileIOUsingAssociatedDataContext extends ParserRuleContext {
	public ASSOCIATED_DATA(): TerminalNode { return this.getToken(Cobol85Parser.ASSOCIATED_DATA, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closePortFileIOUsingAssociatedData; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClosePortFileIOUsingAssociatedData) {
			listener.enterClosePortFileIOUsingAssociatedData(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClosePortFileIOUsingAssociatedData) {
			listener.exitClosePortFileIOUsingAssociatedData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClosePortFileIOUsingAssociatedData) {
			return visitor.visitClosePortFileIOUsingAssociatedData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClosePortFileIOUsingAssociatedDataLengthContext extends ParserRuleContext {
	public ASSOCIATED_DATA_LENGTH(): TerminalNode { return this.getToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClosePortFileIOUsingAssociatedDataLength) {
			listener.enterClosePortFileIOUsingAssociatedDataLength(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClosePortFileIOUsingAssociatedDataLength) {
			listener.exitClosePortFileIOUsingAssociatedDataLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClosePortFileIOUsingAssociatedDataLength) {
			return visitor.visitClosePortFileIOUsingAssociatedDataLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComputeStatementContext extends ParserRuleContext {
	public COMPUTE(): TerminalNode { return this.getToken(Cobol85Parser.COMPUTE, 0); }
	public arithmeticExpression(): ArithmeticExpressionContext {
		return this.getRuleContext(0, ArithmeticExpressionContext);
	}
	public EQUALCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EQUALCHAR, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EQUAL, 0); }
	public computeStore(): ComputeStoreContext[];
	public computeStore(i: number): ComputeStoreContext;
	public computeStore(i?: number): ComputeStoreContext | ComputeStoreContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ComputeStoreContext);
		} else {
			return this.getRuleContext(i, ComputeStoreContext);
		}
	}
	public onSizeErrorPhrase(): OnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
	}
	public notOnSizeErrorPhrase(): NotOnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
	}
	public END_COMPUTE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_COMPUTE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_computeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterComputeStatement) {
			listener.enterComputeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitComputeStatement) {
			listener.exitComputeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitComputeStatement) {
			return visitor.visitComputeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComputeStoreContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_computeStore; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterComputeStore) {
			listener.enterComputeStore(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitComputeStore) {
			listener.exitComputeStore(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitComputeStore) {
			return visitor.visitComputeStore(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ContinueStatementContext extends ParserRuleContext {
	public CONTINUE(): TerminalNode { return this.getToken(Cobol85Parser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_continueStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterContinueStatement) {
			listener.enterContinueStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitContinueStatement) {
			listener.exitContinueStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitContinueStatement) {
			return visitor.visitContinueStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	public DELETE(): TerminalNode { return this.getToken(Cobol85Parser.DELETE, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORD, 0); }
	public invalidKeyPhrase(): InvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
	}
	public notInvalidKeyPhrase(): NotInvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
	}
	public END_DELETE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_deleteStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDeleteStatement) {
			listener.enterDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDeleteStatement) {
			listener.exitDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDeleteStatement) {
			return visitor.visitDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisableStatementContext extends ParserRuleContext {
	public DISABLE(): TerminalNode { return this.getToken(Cobol85Parser.DISABLE, 0); }
	public cdName(): CdNameContext {
		return this.getRuleContext(0, CdNameContext);
	}
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.I_O, 0); }
	public TERMINAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TERMINAL, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OUTPUT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_disableStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDisableStatement) {
			listener.enterDisableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDisableStatement) {
			listener.exitDisableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDisableStatement) {
			return visitor.visitDisableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayStatementContext extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(Cobol85Parser.DISPLAY, 0); }
	public displayOperand(): DisplayOperandContext[];
	public displayOperand(i: number): DisplayOperandContext;
	public displayOperand(i?: number): DisplayOperandContext | DisplayOperandContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DisplayOperandContext);
		} else {
			return this.getRuleContext(i, DisplayOperandContext);
		}
	}
	public displayAt(): DisplayAtContext | undefined {
		return this.tryGetRuleContext(0, DisplayAtContext);
	}
	public displayUpon(): DisplayUponContext | undefined {
		return this.tryGetRuleContext(0, DisplayUponContext);
	}
	public displayWith(): DisplayWithContext | undefined {
		return this.tryGetRuleContext(0, DisplayWithContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_displayStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDisplayStatement) {
			listener.enterDisplayStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDisplayStatement) {
			listener.exitDisplayStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDisplayStatement) {
			return visitor.visitDisplayStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayOperandContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_displayOperand; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDisplayOperand) {
			listener.enterDisplayOperand(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDisplayOperand) {
			listener.exitDisplayOperand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDisplayOperand) {
			return visitor.visitDisplayOperand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayAtContext extends ParserRuleContext {
	public AT(): TerminalNode { return this.getToken(Cobol85Parser.AT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_displayAt; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDisplayAt) {
			listener.enterDisplayAt(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDisplayAt) {
			listener.exitDisplayAt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDisplayAt) {
			return visitor.visitDisplayAt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayUponContext extends ParserRuleContext {
	public UPON(): TerminalNode { return this.getToken(Cobol85Parser.UPON, 0); }
	public mnemonicName(): MnemonicNameContext | undefined {
		return this.tryGetRuleContext(0, MnemonicNameContext);
	}
	public environmentName(): EnvironmentNameContext | undefined {
		return this.tryGetRuleContext(0, EnvironmentNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_displayUpon; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDisplayUpon) {
			listener.enterDisplayUpon(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDisplayUpon) {
			listener.exitDisplayUpon(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDisplayUpon) {
			return visitor.visitDisplayUpon(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayWithContext extends ParserRuleContext {
	public NO(): TerminalNode { return this.getToken(Cobol85Parser.NO, 0); }
	public ADVANCING(): TerminalNode { return this.getToken(Cobol85Parser.ADVANCING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_displayWith; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDisplayWith) {
			listener.enterDisplayWith(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDisplayWith) {
			listener.exitDisplayWith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDisplayWith) {
			return visitor.visitDisplayWith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideStatementContext extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(Cobol85Parser.DIVIDE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public divideIntoStatement(): DivideIntoStatementContext | undefined {
		return this.tryGetRuleContext(0, DivideIntoStatementContext);
	}
	public divideIntoGivingStatement(): DivideIntoGivingStatementContext | undefined {
		return this.tryGetRuleContext(0, DivideIntoGivingStatementContext);
	}
	public divideByGivingStatement(): DivideByGivingStatementContext | undefined {
		return this.tryGetRuleContext(0, DivideByGivingStatementContext);
	}
	public divideRemainder(): DivideRemainderContext | undefined {
		return this.tryGetRuleContext(0, DivideRemainderContext);
	}
	public onSizeErrorPhrase(): OnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
	}
	public notOnSizeErrorPhrase(): NotOnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_DIVIDE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideStatement) {
			listener.enterDivideStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideStatement) {
			listener.exitDivideStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideStatement) {
			return visitor.visitDivideStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideIntoStatementContext extends ParserRuleContext {
	public INTO(): TerminalNode { return this.getToken(Cobol85Parser.INTO, 0); }
	public divideInto(): DivideIntoContext[];
	public divideInto(i: number): DivideIntoContext;
	public divideInto(i?: number): DivideIntoContext | DivideIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DivideIntoContext);
		} else {
			return this.getRuleContext(i, DivideIntoContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideIntoStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideIntoStatement) {
			listener.enterDivideIntoStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideIntoStatement) {
			listener.exitDivideIntoStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideIntoStatement) {
			return visitor.visitDivideIntoStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideIntoGivingStatementContext extends ParserRuleContext {
	public INTO(): TerminalNode { return this.getToken(Cobol85Parser.INTO, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public divideGivingPhrase(): DivideGivingPhraseContext | undefined {
		return this.tryGetRuleContext(0, DivideGivingPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideIntoGivingStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideIntoGivingStatement) {
			listener.enterDivideIntoGivingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideIntoGivingStatement) {
			listener.exitDivideIntoGivingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideIntoGivingStatement) {
			return visitor.visitDivideIntoGivingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideByGivingStatementContext extends ParserRuleContext {
	public BY(): TerminalNode { return this.getToken(Cobol85Parser.BY, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public divideGivingPhrase(): DivideGivingPhraseContext | undefined {
		return this.tryGetRuleContext(0, DivideGivingPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideByGivingStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideByGivingStatement) {
			listener.enterDivideByGivingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideByGivingStatement) {
			listener.exitDivideByGivingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideByGivingStatement) {
			return visitor.visitDivideByGivingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideGivingPhraseContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(Cobol85Parser.GIVING, 0); }
	public divideGiving(): DivideGivingContext[];
	public divideGiving(i: number): DivideGivingContext;
	public divideGiving(i?: number): DivideGivingContext | DivideGivingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DivideGivingContext);
		} else {
			return this.getRuleContext(i, DivideGivingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideGivingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideGivingPhrase) {
			listener.enterDivideGivingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideGivingPhrase) {
			listener.exitDivideGivingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideGivingPhrase) {
			return visitor.visitDivideGivingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideIntoContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideInto; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideInto) {
			listener.enterDivideInto(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideInto) {
			listener.exitDivideInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideInto) {
			return visitor.visitDivideInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideGivingContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideGiving) {
			listener.enterDivideGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideGiving) {
			listener.exitDivideGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideGiving) {
			return visitor.visitDivideGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DivideRemainderContext extends ParserRuleContext {
	public REMAINDER(): TerminalNode { return this.getToken(Cobol85Parser.REMAINDER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_divideRemainder; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDivideRemainder) {
			listener.enterDivideRemainder(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDivideRemainder) {
			listener.exitDivideRemainder(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDivideRemainder) {
			return visitor.visitDivideRemainder(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableStatementContext extends ParserRuleContext {
	public ENABLE(): TerminalNode { return this.getToken(Cobol85Parser.ENABLE, 0); }
	public cdName(): CdNameContext {
		return this.getRuleContext(0, CdNameContext);
	}
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.I_O, 0); }
	public TERMINAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TERMINAL, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OUTPUT, 0); }
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_enableStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEnableStatement) {
			listener.enterEnableStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEnableStatement) {
			listener.exitEnableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEnableStatement) {
			return visitor.visitEnableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EntryStatementContext extends ParserRuleContext {
	public ENTRY(): TerminalNode { return this.getToken(Cobol85Parser.ENTRY, 0); }
	public literal(): LiteralContext {
		return this.getRuleContext(0, LiteralContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.USING, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_entryStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEntryStatement) {
			listener.enterEntryStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEntryStatement) {
			listener.exitEntryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEntryStatement) {
			return visitor.visitEntryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateStatementContext extends ParserRuleContext {
	public EVALUATE(): TerminalNode { return this.getToken(Cobol85Parser.EVALUATE, 0); }
	public evaluateSelect(): EvaluateSelectContext {
		return this.getRuleContext(0, EvaluateSelectContext);
	}
	public evaluateAlsoSelect(): EvaluateAlsoSelectContext[];
	public evaluateAlsoSelect(i: number): EvaluateAlsoSelectContext;
	public evaluateAlsoSelect(i?: number): EvaluateAlsoSelectContext | EvaluateAlsoSelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EvaluateAlsoSelectContext);
		} else {
			return this.getRuleContext(i, EvaluateAlsoSelectContext);
		}
	}
	public evaluateWhenPhrase(): EvaluateWhenPhraseContext[];
	public evaluateWhenPhrase(i: number): EvaluateWhenPhraseContext;
	public evaluateWhenPhrase(i?: number): EvaluateWhenPhraseContext | EvaluateWhenPhraseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EvaluateWhenPhraseContext);
		} else {
			return this.getRuleContext(i, EvaluateWhenPhraseContext);
		}
	}
	public evaluateWhenOther(): EvaluateWhenOtherContext | undefined {
		return this.tryGetRuleContext(0, EvaluateWhenOtherContext);
	}
	public END_EVALUATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_EVALUATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateStatement) {
			listener.enterEvaluateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateStatement) {
			listener.exitEvaluateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateStatement) {
			return visitor.visitEvaluateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateSelectContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	public condition(): ConditionContext | undefined {
		return this.tryGetRuleContext(0, ConditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateSelect; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateSelect) {
			listener.enterEvaluateSelect(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateSelect) {
			listener.exitEvaluateSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateSelect) {
			return visitor.visitEvaluateSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateAlsoSelectContext extends ParserRuleContext {
	public ALSO(): TerminalNode { return this.getToken(Cobol85Parser.ALSO, 0); }
	public evaluateSelect(): EvaluateSelectContext {
		return this.getRuleContext(0, EvaluateSelectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateAlsoSelect; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateAlsoSelect) {
			listener.enterEvaluateAlsoSelect(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateAlsoSelect) {
			listener.exitEvaluateAlsoSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateAlsoSelect) {
			return visitor.visitEvaluateAlsoSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateWhenPhraseContext extends ParserRuleContext {
	public evaluateWhen(): EvaluateWhenContext[];
	public evaluateWhen(i: number): EvaluateWhenContext;
	public evaluateWhen(i?: number): EvaluateWhenContext | EvaluateWhenContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EvaluateWhenContext);
		} else {
			return this.getRuleContext(i, EvaluateWhenContext);
		}
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateWhenPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateWhenPhrase) {
			listener.enterEvaluateWhenPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateWhenPhrase) {
			listener.exitEvaluateWhenPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateWhenPhrase) {
			return visitor.visitEvaluateWhenPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateWhenContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(Cobol85Parser.WHEN, 0); }
	public evaluateCondition(): EvaluateConditionContext {
		return this.getRuleContext(0, EvaluateConditionContext);
	}
	public evaluateAlsoCondition(): EvaluateAlsoConditionContext[];
	public evaluateAlsoCondition(i: number): EvaluateAlsoConditionContext;
	public evaluateAlsoCondition(i?: number): EvaluateAlsoConditionContext | EvaluateAlsoConditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EvaluateAlsoConditionContext);
		} else {
			return this.getRuleContext(i, EvaluateAlsoConditionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateWhen; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateWhen) {
			listener.enterEvaluateWhen(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateWhen) {
			listener.exitEvaluateWhen(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateWhen) {
			return visitor.visitEvaluateWhen(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateConditionContext extends ParserRuleContext {
	public ANY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ANY, 0); }
	public evaluateValue(): EvaluateValueContext | undefined {
		return this.tryGetRuleContext(0, EvaluateValueContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOT, 0); }
	public evaluateThrough(): EvaluateThroughContext | undefined {
		return this.tryGetRuleContext(0, EvaluateThroughContext);
	}
	public condition(): ConditionContext | undefined {
		return this.tryGetRuleContext(0, ConditionContext);
	}
	public booleanLiteral(): BooleanLiteralContext | undefined {
		return this.tryGetRuleContext(0, BooleanLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateCondition) {
			listener.enterEvaluateCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateCondition) {
			listener.exitEvaluateCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateCondition) {
			return visitor.visitEvaluateCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateThroughContext extends ParserRuleContext {
	public evaluateValue(): EvaluateValueContext {
		return this.getRuleContext(0, EvaluateValueContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateThrough; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateThrough) {
			listener.enterEvaluateThrough(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateThrough) {
			listener.exitEvaluateThrough(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateThrough) {
			return visitor.visitEvaluateThrough(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateAlsoConditionContext extends ParserRuleContext {
	public ALSO(): TerminalNode { return this.getToken(Cobol85Parser.ALSO, 0); }
	public evaluateCondition(): EvaluateConditionContext {
		return this.getRuleContext(0, EvaluateConditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateAlsoCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateAlsoCondition) {
			listener.enterEvaluateAlsoCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateAlsoCondition) {
			listener.exitEvaluateAlsoCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateAlsoCondition) {
			return visitor.visitEvaluateAlsoCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateWhenOtherContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(Cobol85Parser.WHEN, 0); }
	public OTHER(): TerminalNode { return this.getToken(Cobol85Parser.OTHER, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateWhenOther; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateWhenOther) {
			listener.enterEvaluateWhenOther(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateWhenOther) {
			listener.exitEvaluateWhenOther(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateWhenOther) {
			return visitor.visitEvaluateWhenOther(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EvaluateValueContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_evaluateValue; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEvaluateValue) {
			listener.enterEvaluateValue(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEvaluateValue) {
			listener.exitEvaluateValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEvaluateValue) {
			return visitor.visitEvaluateValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecCicsStatementContext extends ParserRuleContext {
	public EXECCICSLINE(): TerminalNode[];
	public EXECCICSLINE(i: number): TerminalNode;
	public EXECCICSLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.EXECCICSLINE);
		} else {
			return this.getToken(Cobol85Parser.EXECCICSLINE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_execCicsStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterExecCicsStatement) {
			listener.enterExecCicsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitExecCicsStatement) {
			listener.exitExecCicsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitExecCicsStatement) {
			return visitor.visitExecCicsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecSqlStatementContext extends ParserRuleContext {
	public EXECSQLLINE(): TerminalNode[];
	public EXECSQLLINE(i: number): TerminalNode;
	public EXECSQLLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.EXECSQLLINE);
		} else {
			return this.getToken(Cobol85Parser.EXECSQLLINE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_execSqlStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterExecSqlStatement) {
			listener.enterExecSqlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitExecSqlStatement) {
			listener.exitExecSqlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitExecSqlStatement) {
			return visitor.visitExecSqlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecSqlImsStatementContext extends ParserRuleContext {
	public EXECSQLIMSLINE(): TerminalNode[];
	public EXECSQLIMSLINE(i: number): TerminalNode;
	public EXECSQLIMSLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.EXECSQLIMSLINE);
		} else {
			return this.getToken(Cobol85Parser.EXECSQLIMSLINE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_execSqlImsStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterExecSqlImsStatement) {
			listener.enterExecSqlImsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitExecSqlImsStatement) {
			listener.exitExecSqlImsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitExecSqlImsStatement) {
			return visitor.visitExecSqlImsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExhibitStatementContext extends ParserRuleContext {
	public EXHIBIT(): TerminalNode { return this.getToken(Cobol85Parser.EXHIBIT, 0); }
	public NAMED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NAMED, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHANGED, 0); }
	public exhibitOperand(): ExhibitOperandContext[];
	public exhibitOperand(i: number): ExhibitOperandContext;
	public exhibitOperand(i?: number): ExhibitOperandContext | ExhibitOperandContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExhibitOperandContext);
		} else {
			return this.getRuleContext(i, ExhibitOperandContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_exhibitStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterExhibitStatement) {
			listener.enterExhibitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitExhibitStatement) {
			listener.exitExhibitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitExhibitStatement) {
			return visitor.visitExhibitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExhibitOperandContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_exhibitOperand; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterExhibitOperand) {
			listener.enterExhibitOperand(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitExhibitOperand) {
			listener.exitExhibitOperand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitExhibitOperand) {
			return visitor.visitExhibitOperand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExitStatementContext extends ParserRuleContext {
	public EXIT(): TerminalNode { return this.getToken(Cobol85Parser.EXIT, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_exitStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterExitStatement) {
			listener.enterExitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitExitStatement) {
			listener.exitExitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitExitStatement) {
			return visitor.visitExitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GenerateStatementContext extends ParserRuleContext {
	public GENERATE(): TerminalNode { return this.getToken(Cobol85Parser.GENERATE, 0); }
	public reportName(): ReportNameContext {
		return this.getRuleContext(0, ReportNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_generateStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterGenerateStatement) {
			listener.enterGenerateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitGenerateStatement) {
			listener.exitGenerateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitGenerateStatement) {
			return visitor.visitGenerateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GobackStatementContext extends ParserRuleContext {
	public GOBACK(): TerminalNode { return this.getToken(Cobol85Parser.GOBACK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_gobackStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterGobackStatement) {
			listener.enterGobackStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitGobackStatement) {
			listener.exitGobackStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitGobackStatement) {
			return visitor.visitGobackStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GoToStatementContext extends ParserRuleContext {
	public GO(): TerminalNode { return this.getToken(Cobol85Parser.GO, 0); }
	public goToStatementSimple(): GoToStatementSimpleContext | undefined {
		return this.tryGetRuleContext(0, GoToStatementSimpleContext);
	}
	public goToDependingOnStatement(): GoToDependingOnStatementContext | undefined {
		return this.tryGetRuleContext(0, GoToDependingOnStatementContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_goToStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterGoToStatement) {
			listener.enterGoToStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitGoToStatement) {
			listener.exitGoToStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitGoToStatement) {
			return visitor.visitGoToStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GoToStatementSimpleContext extends ParserRuleContext {
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_goToStatementSimple; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterGoToStatementSimple) {
			listener.enterGoToStatementSimple(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitGoToStatementSimple) {
			listener.exitGoToStatementSimple(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitGoToStatementSimple) {
			return visitor.visitGoToStatementSimple(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GoToDependingOnStatementContext extends ParserRuleContext {
	public MORE_LABELS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MORE_LABELS, 0); }
	public procedureName(): ProcedureNameContext[];
	public procedureName(i: number): ProcedureNameContext;
	public procedureName(i?: number): ProcedureNameContext | ProcedureNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureNameContext);
		} else {
			return this.getRuleContext(i, ProcedureNameContext);
		}
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEPENDING, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_goToDependingOnStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterGoToDependingOnStatement) {
			listener.enterGoToDependingOnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitGoToDependingOnStatement) {
			listener.exitGoToDependingOnStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitGoToDependingOnStatement) {
			return visitor.visitGoToDependingOnStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(Cobol85Parser.IF, 0); }
	public condition(): ConditionContext {
		return this.getRuleContext(0, ConditionContext);
	}
	public ifThen(): IfThenContext {
		return this.getRuleContext(0, IfThenContext);
	}
	public ifElse(): IfElseContext | undefined {
		return this.tryGetRuleContext(0, IfElseContext);
	}
	public END_IF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_IF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_ifStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIfStatement) {
			listener.enterIfStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIfStatement) {
			listener.exitIfStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIfStatement) {
			return visitor.visitIfStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfThenContext extends ParserRuleContext {
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NEXT, 0); }
	public SENTENCE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SENTENCE, 0); }
	public THEN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THEN, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_ifThen; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIfThen) {
			listener.enterIfThen(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIfThen) {
			listener.exitIfThen(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIfThen) {
			return visitor.visitIfThen(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfElseContext extends ParserRuleContext {
	public ELSE(): TerminalNode { return this.getToken(Cobol85Parser.ELSE, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NEXT, 0); }
	public SENTENCE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SENTENCE, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_ifElse; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIfElse) {
			listener.enterIfElse(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIfElse) {
			listener.exitIfElse(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIfElse) {
			return visitor.visitIfElse(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InitializeStatementContext extends ParserRuleContext {
	public INITIALIZE(): TerminalNode { return this.getToken(Cobol85Parser.INITIALIZE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public initializeReplacingPhrase(): InitializeReplacingPhraseContext | undefined {
		return this.tryGetRuleContext(0, InitializeReplacingPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_initializeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInitializeStatement) {
			listener.enterInitializeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInitializeStatement) {
			listener.exitInitializeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInitializeStatement) {
			return visitor.visitInitializeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InitializeReplacingPhraseContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(Cobol85Parser.REPLACING, 0); }
	public initializeReplacingBy(): InitializeReplacingByContext[];
	public initializeReplacingBy(i: number): InitializeReplacingByContext;
	public initializeReplacingBy(i?: number): InitializeReplacingByContext | InitializeReplacingByContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InitializeReplacingByContext);
		} else {
			return this.getRuleContext(i, InitializeReplacingByContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_initializeReplacingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInitializeReplacingPhrase) {
			listener.enterInitializeReplacingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInitializeReplacingPhrase) {
			listener.exitInitializeReplacingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInitializeReplacingPhrase) {
			return visitor.visitInitializeReplacingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InitializeReplacingByContext extends ParserRuleContext {
	public BY(): TerminalNode { return this.getToken(Cobol85Parser.BY, 0); }
	public ALPHABETIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHABETIC, 0); }
	public ALPHANUMERIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC, 0); }
	public ALPHANUMERIC_EDITED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHANUMERIC_EDITED, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); }
	public NATIONAL_EDITED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIONAL_EDITED, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERIC, 0); }
	public NUMERIC_EDITED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERIC_EDITED, 0); }
	public DBCS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DBCS, 0); }
	public EGCS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EGCS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public DATA(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DATA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_initializeReplacingBy; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInitializeReplacingBy) {
			listener.enterInitializeReplacingBy(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInitializeReplacingBy) {
			listener.exitInitializeReplacingBy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInitializeReplacingBy) {
			return visitor.visitInitializeReplacingBy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InitiateStatementContext extends ParserRuleContext {
	public INITIATE(): TerminalNode { return this.getToken(Cobol85Parser.INITIATE, 0); }
	public reportName(): ReportNameContext[];
	public reportName(i: number): ReportNameContext;
	public reportName(i?: number): ReportNameContext | ReportNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReportNameContext);
		} else {
			return this.getRuleContext(i, ReportNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_initiateStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInitiateStatement) {
			listener.enterInitiateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInitiateStatement) {
			listener.exitInitiateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInitiateStatement) {
			return visitor.visitInitiateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectStatementContext extends ParserRuleContext {
	public INSPECT(): TerminalNode { return this.getToken(Cobol85Parser.INSPECT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public inspectTallyingPhrase(): InspectTallyingPhraseContext | undefined {
		return this.tryGetRuleContext(0, InspectTallyingPhraseContext);
	}
	public inspectReplacingPhrase(): InspectReplacingPhraseContext | undefined {
		return this.tryGetRuleContext(0, InspectReplacingPhraseContext);
	}
	public inspectTallyingReplacingPhrase(): InspectTallyingReplacingPhraseContext | undefined {
		return this.tryGetRuleContext(0, InspectTallyingReplacingPhraseContext);
	}
	public inspectConvertingPhrase(): InspectConvertingPhraseContext | undefined {
		return this.tryGetRuleContext(0, InspectConvertingPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectStatement) {
			listener.enterInspectStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectStatement) {
			listener.exitInspectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectStatement) {
			return visitor.visitInspectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectTallyingPhraseContext extends ParserRuleContext {
	public TALLYING(): TerminalNode { return this.getToken(Cobol85Parser.TALLYING, 0); }
	public inspectFor(): InspectForContext[];
	public inspectFor(i: number): InspectForContext;
	public inspectFor(i?: number): InspectForContext | InspectForContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectForContext);
		} else {
			return this.getRuleContext(i, InspectForContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectTallyingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectTallyingPhrase) {
			listener.enterInspectTallyingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectTallyingPhrase) {
			listener.exitInspectTallyingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectTallyingPhrase) {
			return visitor.visitInspectTallyingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectReplacingPhraseContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(Cobol85Parser.REPLACING, 0); }
	public inspectReplacingCharacters(): InspectReplacingCharactersContext[];
	public inspectReplacingCharacters(i: number): InspectReplacingCharactersContext;
	public inspectReplacingCharacters(i?: number): InspectReplacingCharactersContext | InspectReplacingCharactersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectReplacingCharactersContext);
		} else {
			return this.getRuleContext(i, InspectReplacingCharactersContext);
		}
	}
	public inspectReplacingAllLeadings(): InspectReplacingAllLeadingsContext[];
	public inspectReplacingAllLeadings(i: number): InspectReplacingAllLeadingsContext;
	public inspectReplacingAllLeadings(i?: number): InspectReplacingAllLeadingsContext | InspectReplacingAllLeadingsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectReplacingAllLeadingsContext);
		} else {
			return this.getRuleContext(i, InspectReplacingAllLeadingsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectReplacingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectReplacingPhrase) {
			listener.enterInspectReplacingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectReplacingPhrase) {
			listener.exitInspectReplacingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectReplacingPhrase) {
			return visitor.visitInspectReplacingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectTallyingReplacingPhraseContext extends ParserRuleContext {
	public TALLYING(): TerminalNode { return this.getToken(Cobol85Parser.TALLYING, 0); }
	public inspectFor(): InspectForContext[];
	public inspectFor(i: number): InspectForContext;
	public inspectFor(i?: number): InspectForContext | InspectForContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectForContext);
		} else {
			return this.getRuleContext(i, InspectForContext);
		}
	}
	public inspectReplacingPhrase(): InspectReplacingPhraseContext[];
	public inspectReplacingPhrase(i: number): InspectReplacingPhraseContext;
	public inspectReplacingPhrase(i?: number): InspectReplacingPhraseContext | InspectReplacingPhraseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectReplacingPhraseContext);
		} else {
			return this.getRuleContext(i, InspectReplacingPhraseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectTallyingReplacingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectTallyingReplacingPhrase) {
			listener.enterInspectTallyingReplacingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectTallyingReplacingPhrase) {
			listener.exitInspectTallyingReplacingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectTallyingReplacingPhrase) {
			return visitor.visitInspectTallyingReplacingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectConvertingPhraseContext extends ParserRuleContext {
	public CONVERTING(): TerminalNode { return this.getToken(Cobol85Parser.CONVERTING, 0); }
	public inspectTo(): InspectToContext {
		return this.getRuleContext(0, InspectToContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public inspectBeforeAfter(): InspectBeforeAfterContext[];
	public inspectBeforeAfter(i: number): InspectBeforeAfterContext;
	public inspectBeforeAfter(i?: number): InspectBeforeAfterContext | InspectBeforeAfterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectBeforeAfterContext);
		} else {
			return this.getRuleContext(i, InspectBeforeAfterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectConvertingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectConvertingPhrase) {
			listener.enterInspectConvertingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectConvertingPhrase) {
			listener.exitInspectConvertingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectConvertingPhrase) {
			return visitor.visitInspectConvertingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectForContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FOR(): TerminalNode { return this.getToken(Cobol85Parser.FOR, 0); }
	public inspectCharacters(): InspectCharactersContext[];
	public inspectCharacters(i: number): InspectCharactersContext;
	public inspectCharacters(i?: number): InspectCharactersContext | InspectCharactersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectCharactersContext);
		} else {
			return this.getRuleContext(i, InspectCharactersContext);
		}
	}
	public inspectAllLeadings(): InspectAllLeadingsContext[];
	public inspectAllLeadings(i: number): InspectAllLeadingsContext;
	public inspectAllLeadings(i?: number): InspectAllLeadingsContext | InspectAllLeadingsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectAllLeadingsContext);
		} else {
			return this.getRuleContext(i, InspectAllLeadingsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectFor; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectFor) {
			listener.enterInspectFor(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectFor) {
			listener.exitInspectFor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectFor) {
			return visitor.visitInspectFor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectCharactersContext extends ParserRuleContext {
	public CHARACTERS(): TerminalNode { return this.getToken(Cobol85Parser.CHARACTERS, 0); }
	public inspectBeforeAfter(): InspectBeforeAfterContext[];
	public inspectBeforeAfter(i: number): InspectBeforeAfterContext;
	public inspectBeforeAfter(i?: number): InspectBeforeAfterContext | InspectBeforeAfterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectBeforeAfterContext);
		} else {
			return this.getRuleContext(i, InspectBeforeAfterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectCharacters; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectCharacters) {
			listener.enterInspectCharacters(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectCharacters) {
			listener.exitInspectCharacters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectCharacters) {
			return visitor.visitInspectCharacters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectReplacingCharactersContext extends ParserRuleContext {
	public CHARACTERS(): TerminalNode { return this.getToken(Cobol85Parser.CHARACTERS, 0); }
	public inspectBy(): InspectByContext {
		return this.getRuleContext(0, InspectByContext);
	}
	public inspectBeforeAfter(): InspectBeforeAfterContext[];
	public inspectBeforeAfter(i: number): InspectBeforeAfterContext;
	public inspectBeforeAfter(i?: number): InspectBeforeAfterContext | InspectBeforeAfterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectBeforeAfterContext);
		} else {
			return this.getRuleContext(i, InspectBeforeAfterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectReplacingCharacters; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectReplacingCharacters) {
			listener.enterInspectReplacingCharacters(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectReplacingCharacters) {
			listener.exitInspectReplacingCharacters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectReplacingCharacters) {
			return visitor.visitInspectReplacingCharacters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectAllLeadingsContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEADING, 0); }
	public inspectAllLeading(): InspectAllLeadingContext[];
	public inspectAllLeading(i: number): InspectAllLeadingContext;
	public inspectAllLeading(i?: number): InspectAllLeadingContext | InspectAllLeadingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectAllLeadingContext);
		} else {
			return this.getRuleContext(i, InspectAllLeadingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectAllLeadings; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectAllLeadings) {
			listener.enterInspectAllLeadings(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectAllLeadings) {
			listener.exitInspectAllLeadings(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectAllLeadings) {
			return visitor.visitInspectAllLeadings(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectReplacingAllLeadingsContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEADING, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FIRST, 0); }
	public inspectReplacingAllLeading(): InspectReplacingAllLeadingContext[];
	public inspectReplacingAllLeading(i: number): InspectReplacingAllLeadingContext;
	public inspectReplacingAllLeading(i?: number): InspectReplacingAllLeadingContext | InspectReplacingAllLeadingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectReplacingAllLeadingContext);
		} else {
			return this.getRuleContext(i, InspectReplacingAllLeadingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectReplacingAllLeadings; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectReplacingAllLeadings) {
			listener.enterInspectReplacingAllLeadings(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectReplacingAllLeadings) {
			listener.exitInspectReplacingAllLeadings(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectReplacingAllLeadings) {
			return visitor.visitInspectReplacingAllLeadings(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectAllLeadingContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public inspectBeforeAfter(): InspectBeforeAfterContext[];
	public inspectBeforeAfter(i: number): InspectBeforeAfterContext;
	public inspectBeforeAfter(i?: number): InspectBeforeAfterContext | InspectBeforeAfterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectBeforeAfterContext);
		} else {
			return this.getRuleContext(i, InspectBeforeAfterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectAllLeading; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectAllLeading) {
			listener.enterInspectAllLeading(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectAllLeading) {
			listener.exitInspectAllLeading(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectAllLeading) {
			return visitor.visitInspectAllLeading(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectReplacingAllLeadingContext extends ParserRuleContext {
	public inspectBy(): InspectByContext {
		return this.getRuleContext(0, InspectByContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public inspectBeforeAfter(): InspectBeforeAfterContext[];
	public inspectBeforeAfter(i: number): InspectBeforeAfterContext;
	public inspectBeforeAfter(i?: number): InspectBeforeAfterContext | InspectBeforeAfterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InspectBeforeAfterContext);
		} else {
			return this.getRuleContext(i, InspectBeforeAfterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectReplacingAllLeading; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectReplacingAllLeading) {
			listener.enterInspectReplacingAllLeading(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectReplacingAllLeading) {
			listener.exitInspectReplacingAllLeading(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectReplacingAllLeading) {
			return visitor.visitInspectReplacingAllLeading(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectByContext extends ParserRuleContext {
	public BY(): TerminalNode { return this.getToken(Cobol85Parser.BY, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectBy; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectBy) {
			listener.enterInspectBy(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectBy) {
			listener.exitInspectBy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectBy) {
			return visitor.visitInspectBy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectToContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectTo) {
			listener.enterInspectTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectTo) {
			listener.exitInspectTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectTo) {
			return visitor.visitInspectTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InspectBeforeAfterContext extends ParserRuleContext {
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AFTER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INITIAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inspectBeforeAfter; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInspectBeforeAfter) {
			listener.enterInspectBeforeAfter(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInspectBeforeAfter) {
			listener.exitInspectBeforeAfter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInspectBeforeAfter) {
			return visitor.visitInspectBeforeAfter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeStatementContext extends ParserRuleContext {
	public MERGE(): TerminalNode { return this.getToken(Cobol85Parser.MERGE, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public mergeOnKeyClause(): MergeOnKeyClauseContext[];
	public mergeOnKeyClause(i: number): MergeOnKeyClauseContext;
	public mergeOnKeyClause(i?: number): MergeOnKeyClauseContext | MergeOnKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MergeOnKeyClauseContext);
		} else {
			return this.getRuleContext(i, MergeOnKeyClauseContext);
		}
	}
	public mergeCollatingSequencePhrase(): MergeCollatingSequencePhraseContext | undefined {
		return this.tryGetRuleContext(0, MergeCollatingSequencePhraseContext);
	}
	public mergeUsing(): MergeUsingContext[];
	public mergeUsing(i: number): MergeUsingContext;
	public mergeUsing(i?: number): MergeUsingContext | MergeUsingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MergeUsingContext);
		} else {
			return this.getRuleContext(i, MergeUsingContext);
		}
	}
	public mergeOutputProcedurePhrase(): MergeOutputProcedurePhraseContext | undefined {
		return this.tryGetRuleContext(0, MergeOutputProcedurePhraseContext);
	}
	public mergeGivingPhrase(): MergeGivingPhraseContext[];
	public mergeGivingPhrase(i: number): MergeGivingPhraseContext;
	public mergeGivingPhrase(i?: number): MergeGivingPhraseContext | MergeGivingPhraseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MergeGivingPhraseContext);
		} else {
			return this.getRuleContext(i, MergeGivingPhraseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeStatement) {
			listener.enterMergeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeStatement) {
			listener.exitMergeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeStatement) {
			return visitor.visitMergeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeOnKeyClauseContext extends ParserRuleContext {
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DESCENDING, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public qualifiedDataName(): QualifiedDataNameContext[];
	public qualifiedDataName(i: number): QualifiedDataNameContext;
	public qualifiedDataName(i?: number): QualifiedDataNameContext | QualifiedDataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedDataNameContext);
		} else {
			return this.getRuleContext(i, QualifiedDataNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeOnKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeOnKeyClause) {
			listener.enterMergeOnKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeOnKeyClause) {
			listener.exitMergeOnKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeOnKeyClause) {
			return visitor.visitMergeOnKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeCollatingSequencePhraseContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(Cobol85Parser.SEQUENCE, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public alphabetName(): AlphabetNameContext[];
	public alphabetName(i: number): AlphabetNameContext;
	public alphabetName(i?: number): AlphabetNameContext | AlphabetNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlphabetNameContext);
		} else {
			return this.getRuleContext(i, AlphabetNameContext);
		}
	}
	public mergeCollatingAlphanumeric(): MergeCollatingAlphanumericContext | undefined {
		return this.tryGetRuleContext(0, MergeCollatingAlphanumericContext);
	}
	public mergeCollatingNational(): MergeCollatingNationalContext | undefined {
		return this.tryGetRuleContext(0, MergeCollatingNationalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeCollatingSequencePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeCollatingSequencePhrase) {
			listener.enterMergeCollatingSequencePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeCollatingSequencePhrase) {
			listener.exitMergeCollatingSequencePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeCollatingSequencePhrase) {
			return visitor.visitMergeCollatingSequencePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeCollatingAlphanumericContext extends ParserRuleContext {
	public ALPHANUMERIC(): TerminalNode { return this.getToken(Cobol85Parser.ALPHANUMERIC, 0); }
	public IS(): TerminalNode { return this.getToken(Cobol85Parser.IS, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeCollatingAlphanumeric; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeCollatingAlphanumeric) {
			listener.enterMergeCollatingAlphanumeric(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeCollatingAlphanumeric) {
			listener.exitMergeCollatingAlphanumeric(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeCollatingAlphanumeric) {
			return visitor.visitMergeCollatingAlphanumeric(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeCollatingNationalContext extends ParserRuleContext {
	public NATIONAL(): TerminalNode { return this.getToken(Cobol85Parser.NATIONAL, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeCollatingNational; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeCollatingNational) {
			listener.enterMergeCollatingNational(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeCollatingNational) {
			listener.exitMergeCollatingNational(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeCollatingNational) {
			return visitor.visitMergeCollatingNational(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeUsingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(Cobol85Parser.USING, 0); }
	public fileName(): FileNameContext[];
	public fileName(i: number): FileNameContext;
	public fileName(i?: number): FileNameContext | FileNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileNameContext);
		} else {
			return this.getRuleContext(i, FileNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeUsing; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeUsing) {
			listener.enterMergeUsing(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeUsing) {
			listener.exitMergeUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeUsing) {
			return visitor.visitMergeUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeOutputProcedurePhraseContext extends ParserRuleContext {
	public OUTPUT(): TerminalNode { return this.getToken(Cobol85Parser.OUTPUT, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(Cobol85Parser.PROCEDURE, 0); }
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public mergeOutputThrough(): MergeOutputThroughContext | undefined {
		return this.tryGetRuleContext(0, MergeOutputThroughContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeOutputProcedurePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeOutputProcedurePhrase) {
			listener.enterMergeOutputProcedurePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeOutputProcedurePhrase) {
			listener.exitMergeOutputProcedurePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeOutputProcedurePhrase) {
			return visitor.visitMergeOutputProcedurePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeOutputThroughContext extends ParserRuleContext {
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeOutputThrough; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeOutputThrough) {
			listener.enterMergeOutputThrough(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeOutputThrough) {
			listener.exitMergeOutputThrough(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeOutputThrough) {
			return visitor.visitMergeOutputThrough(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeGivingPhraseContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(Cobol85Parser.GIVING, 0); }
	public mergeGiving(): MergeGivingContext[];
	public mergeGiving(i: number): MergeGivingContext;
	public mergeGiving(i?: number): MergeGivingContext | MergeGivingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MergeGivingContext);
		} else {
			return this.getRuleContext(i, MergeGivingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeGivingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeGivingPhrase) {
			listener.enterMergeGivingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeGivingPhrase) {
			listener.exitMergeGivingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeGivingPhrase) {
			return visitor.visitMergeGivingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeGivingContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCK, 0); }
	public SAVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SAVE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REWIND, 0); }
	public CRUNCH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CRUNCH, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RELEASE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REMOVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mergeGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMergeGiving) {
			listener.enterMergeGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMergeGiving) {
			listener.exitMergeGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMergeGiving) {
			return visitor.visitMergeGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MoveStatementContext extends ParserRuleContext {
	public MOVE(): TerminalNode { return this.getToken(Cobol85Parser.MOVE, 0); }
	public moveToStatement(): MoveToStatementContext | undefined {
		return this.tryGetRuleContext(0, MoveToStatementContext);
	}
	public moveCorrespondingToStatement(): MoveCorrespondingToStatementContext | undefined {
		return this.tryGetRuleContext(0, MoveCorrespondingToStatementContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_moveStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMoveStatement) {
			listener.enterMoveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMoveStatement) {
			listener.exitMoveStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMoveStatement) {
			return visitor.visitMoveStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MoveToStatementContext extends ParserRuleContext {
	public moveToSendingArea(): MoveToSendingAreaContext {
		return this.getRuleContext(0, MoveToSendingAreaContext);
	}
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_moveToStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMoveToStatement) {
			listener.enterMoveToStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMoveToStatement) {
			listener.exitMoveToStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMoveToStatement) {
			return visitor.visitMoveToStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MoveToSendingAreaContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_moveToSendingArea; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMoveToSendingArea) {
			listener.enterMoveToSendingArea(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMoveToSendingArea) {
			listener.exitMoveToSendingArea(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMoveToSendingArea) {
			return visitor.visitMoveToSendingArea(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MoveCorrespondingToStatementContext extends ParserRuleContext {
	public moveCorrespondingToSendingArea(): MoveCorrespondingToSendingAreaContext {
		return this.getRuleContext(0, MoveCorrespondingToSendingAreaContext);
	}
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CORRESPONDING, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CORR, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_moveCorrespondingToStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMoveCorrespondingToStatement) {
			listener.enterMoveCorrespondingToStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMoveCorrespondingToStatement) {
			listener.exitMoveCorrespondingToStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMoveCorrespondingToStatement) {
			return visitor.visitMoveCorrespondingToStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MoveCorrespondingToSendingAreaContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_moveCorrespondingToSendingArea; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMoveCorrespondingToSendingArea) {
			listener.enterMoveCorrespondingToSendingArea(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMoveCorrespondingToSendingArea) {
			listener.exitMoveCorrespondingToSendingArea(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMoveCorrespondingToSendingArea) {
			return visitor.visitMoveCorrespondingToSendingArea(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiplyStatementContext extends ParserRuleContext {
	public MULTIPLY(): TerminalNode { return this.getToken(Cobol85Parser.MULTIPLY, 0); }
	public BY(): TerminalNode { return this.getToken(Cobol85Parser.BY, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public multiplyRegular(): MultiplyRegularContext | undefined {
		return this.tryGetRuleContext(0, MultiplyRegularContext);
	}
	public multiplyGiving(): MultiplyGivingContext | undefined {
		return this.tryGetRuleContext(0, MultiplyGivingContext);
	}
	public onSizeErrorPhrase(): OnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
	}
	public notOnSizeErrorPhrase(): NotOnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
	}
	public END_MULTIPLY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_MULTIPLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multiplyStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultiplyStatement) {
			listener.enterMultiplyStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultiplyStatement) {
			listener.exitMultiplyStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultiplyStatement) {
			return visitor.visitMultiplyStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiplyRegularContext extends ParserRuleContext {
	public multiplyRegularOperand(): MultiplyRegularOperandContext[];
	public multiplyRegularOperand(i: number): MultiplyRegularOperandContext;
	public multiplyRegularOperand(i?: number): MultiplyRegularOperandContext | MultiplyRegularOperandContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MultiplyRegularOperandContext);
		} else {
			return this.getRuleContext(i, MultiplyRegularOperandContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multiplyRegular; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultiplyRegular) {
			listener.enterMultiplyRegular(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultiplyRegular) {
			listener.exitMultiplyRegular(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultiplyRegular) {
			return visitor.visitMultiplyRegular(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiplyRegularOperandContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multiplyRegularOperand; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultiplyRegularOperand) {
			listener.enterMultiplyRegularOperand(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultiplyRegularOperand) {
			listener.exitMultiplyRegularOperand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultiplyRegularOperand) {
			return visitor.visitMultiplyRegularOperand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiplyGivingContext extends ParserRuleContext {
	public multiplyGivingOperand(): MultiplyGivingOperandContext {
		return this.getRuleContext(0, MultiplyGivingOperandContext);
	}
	public GIVING(): TerminalNode { return this.getToken(Cobol85Parser.GIVING, 0); }
	public multiplyGivingResult(): MultiplyGivingResultContext[];
	public multiplyGivingResult(i: number): MultiplyGivingResultContext;
	public multiplyGivingResult(i?: number): MultiplyGivingResultContext | MultiplyGivingResultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MultiplyGivingResultContext);
		} else {
			return this.getRuleContext(i, MultiplyGivingResultContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multiplyGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultiplyGiving) {
			listener.enterMultiplyGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultiplyGiving) {
			listener.exitMultiplyGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultiplyGiving) {
			return visitor.visitMultiplyGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiplyGivingOperandContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multiplyGivingOperand; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultiplyGivingOperand) {
			listener.enterMultiplyGivingOperand(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultiplyGivingOperand) {
			listener.exitMultiplyGivingOperand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultiplyGivingOperand) {
			return visitor.visitMultiplyGivingOperand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultiplyGivingResultContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multiplyGivingResult; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultiplyGivingResult) {
			listener.enterMultiplyGivingResult(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultiplyGivingResult) {
			listener.exitMultiplyGivingResult(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultiplyGivingResult) {
			return visitor.visitMultiplyGivingResult(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenStatementContext extends ParserRuleContext {
	public OPEN(): TerminalNode { return this.getToken(Cobol85Parser.OPEN, 0); }
	public openInputStatement(): OpenInputStatementContext[];
	public openInputStatement(i: number): OpenInputStatementContext;
	public openInputStatement(i?: number): OpenInputStatementContext | OpenInputStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OpenInputStatementContext);
		} else {
			return this.getRuleContext(i, OpenInputStatementContext);
		}
	}
	public openOutputStatement(): OpenOutputStatementContext[];
	public openOutputStatement(i: number): OpenOutputStatementContext;
	public openOutputStatement(i?: number): OpenOutputStatementContext | OpenOutputStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OpenOutputStatementContext);
		} else {
			return this.getRuleContext(i, OpenOutputStatementContext);
		}
	}
	public openIOStatement(): OpenIOStatementContext[];
	public openIOStatement(i: number): OpenIOStatementContext;
	public openIOStatement(i?: number): OpenIOStatementContext | OpenIOStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OpenIOStatementContext);
		} else {
			return this.getRuleContext(i, OpenIOStatementContext);
		}
	}
	public openExtendStatement(): OpenExtendStatementContext[];
	public openExtendStatement(i: number): OpenExtendStatementContext;
	public openExtendStatement(i?: number): OpenExtendStatementContext | OpenExtendStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OpenExtendStatementContext);
		} else {
			return this.getRuleContext(i, OpenExtendStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_openStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOpenStatement) {
			listener.enterOpenStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOpenStatement) {
			listener.exitOpenStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOpenStatement) {
			return visitor.visitOpenStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenInputStatementContext extends ParserRuleContext {
	public INPUT(): TerminalNode { return this.getToken(Cobol85Parser.INPUT, 0); }
	public openInput(): OpenInputContext[];
	public openInput(i: number): OpenInputContext;
	public openInput(i?: number): OpenInputContext | OpenInputContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OpenInputContext);
		} else {
			return this.getRuleContext(i, OpenInputContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_openInputStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOpenInputStatement) {
			listener.enterOpenInputStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOpenInputStatement) {
			listener.exitOpenInputStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOpenInputStatement) {
			return visitor.visitOpenInputStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenInputContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REVERSED, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REWIND, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_openInput; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOpenInput) {
			listener.enterOpenInput(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOpenInput) {
			listener.exitOpenInput(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOpenInput) {
			return visitor.visitOpenInput(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenOutputStatementContext extends ParserRuleContext {
	public OUTPUT(): TerminalNode { return this.getToken(Cobol85Parser.OUTPUT, 0); }
	public openOutput(): OpenOutputContext[];
	public openOutput(i: number): OpenOutputContext;
	public openOutput(i?: number): OpenOutputContext | OpenOutputContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OpenOutputContext);
		} else {
			return this.getRuleContext(i, OpenOutputContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_openOutputStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOpenOutputStatement) {
			listener.enterOpenOutputStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOpenOutputStatement) {
			listener.exitOpenOutputStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOpenOutputStatement) {
			return visitor.visitOpenOutputStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenOutputContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REWIND, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_openOutput; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOpenOutput) {
			listener.enterOpenOutput(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOpenOutput) {
			listener.exitOpenOutput(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOpenOutput) {
			return visitor.visitOpenOutput(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenIOStatementContext extends ParserRuleContext {
	public I_O(): TerminalNode { return this.getToken(Cobol85Parser.I_O, 0); }
	public fileName(): FileNameContext[];
	public fileName(i: number): FileNameContext;
	public fileName(i?: number): FileNameContext | FileNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileNameContext);
		} else {
			return this.getRuleContext(i, FileNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_openIOStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOpenIOStatement) {
			listener.enterOpenIOStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOpenIOStatement) {
			listener.exitOpenIOStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOpenIOStatement) {
			return visitor.visitOpenIOStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpenExtendStatementContext extends ParserRuleContext {
	public EXTEND(): TerminalNode { return this.getToken(Cobol85Parser.EXTEND, 0); }
	public fileName(): FileNameContext[];
	public fileName(i: number): FileNameContext;
	public fileName(i?: number): FileNameContext | FileNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileNameContext);
		} else {
			return this.getRuleContext(i, FileNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_openExtendStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOpenExtendStatement) {
			listener.enterOpenExtendStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOpenExtendStatement) {
			listener.exitOpenExtendStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOpenExtendStatement) {
			return visitor.visitOpenExtendStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformStatementContext extends ParserRuleContext {
	public PERFORM(): TerminalNode { return this.getToken(Cobol85Parser.PERFORM, 0); }
	public performInlineStatement(): PerformInlineStatementContext | undefined {
		return this.tryGetRuleContext(0, PerformInlineStatementContext);
	}
	public performProcedureStatement(): PerformProcedureStatementContext | undefined {
		return this.tryGetRuleContext(0, PerformProcedureStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformStatement) {
			listener.enterPerformStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformStatement) {
			listener.exitPerformStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformStatement) {
			return visitor.visitPerformStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformInlineStatementContext extends ParserRuleContext {
	public END_PERFORM(): TerminalNode { return this.getToken(Cobol85Parser.END_PERFORM, 0); }
	public performType(): PerformTypeContext | undefined {
		return this.tryGetRuleContext(0, PerformTypeContext);
	}
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performInlineStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformInlineStatement) {
			listener.enterPerformInlineStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformInlineStatement) {
			listener.exitPerformInlineStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformInlineStatement) {
			return visitor.visitPerformInlineStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformProcedureStatementContext extends ParserRuleContext {
	public procedureName(): ProcedureNameContext[];
	public procedureName(i: number): ProcedureNameContext;
	public procedureName(i?: number): ProcedureNameContext | ProcedureNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureNameContext);
		} else {
			return this.getRuleContext(i, ProcedureNameContext);
		}
	}
	public performType(): PerformTypeContext | undefined {
		return this.tryGetRuleContext(0, PerformTypeContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performProcedureStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformProcedureStatement) {
			listener.enterPerformProcedureStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformProcedureStatement) {
			listener.exitPerformProcedureStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformProcedureStatement) {
			return visitor.visitPerformProcedureStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformTypeContext extends ParserRuleContext {
	public performTimes(): PerformTimesContext | undefined {
		return this.tryGetRuleContext(0, PerformTimesContext);
	}
	public performUntil(): PerformUntilContext | undefined {
		return this.tryGetRuleContext(0, PerformUntilContext);
	}
	public performVarying(): PerformVaryingContext | undefined {
		return this.tryGetRuleContext(0, PerformVaryingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performType; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformType) {
			listener.enterPerformType(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformType) {
			listener.exitPerformType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformType) {
			return visitor.visitPerformType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformTimesContext extends ParserRuleContext {
	public TIMES(): TerminalNode { return this.getToken(Cobol85Parser.TIMES, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performTimes; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformTimes) {
			listener.enterPerformTimes(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformTimes) {
			listener.exitPerformTimes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformTimes) {
			return visitor.visitPerformTimes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformUntilContext extends ParserRuleContext {
	public UNTIL(): TerminalNode { return this.getToken(Cobol85Parser.UNTIL, 0); }
	public condition(): ConditionContext {
		return this.getRuleContext(0, ConditionContext);
	}
	public performTestClause(): PerformTestClauseContext | undefined {
		return this.tryGetRuleContext(0, PerformTestClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performUntil; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformUntil) {
			listener.enterPerformUntil(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformUntil) {
			listener.exitPerformUntil(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformUntil) {
			return visitor.visitPerformUntil(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformVaryingContext extends ParserRuleContext {
	public performTestClause(): PerformTestClauseContext | undefined {
		return this.tryGetRuleContext(0, PerformTestClauseContext);
	}
	public performVaryingClause(): PerformVaryingClauseContext {
		return this.getRuleContext(0, PerformVaryingClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performVarying; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformVarying) {
			listener.enterPerformVarying(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformVarying) {
			listener.exitPerformVarying(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformVarying) {
			return visitor.visitPerformVarying(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformVaryingClauseContext extends ParserRuleContext {
	public VARYING(): TerminalNode { return this.getToken(Cobol85Parser.VARYING, 0); }
	public performVaryingPhrase(): PerformVaryingPhraseContext {
		return this.getRuleContext(0, PerformVaryingPhraseContext);
	}
	public performAfter(): PerformAfterContext[];
	public performAfter(i: number): PerformAfterContext;
	public performAfter(i?: number): PerformAfterContext | PerformAfterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PerformAfterContext);
		} else {
			return this.getRuleContext(i, PerformAfterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performVaryingClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformVaryingClause) {
			listener.enterPerformVaryingClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformVaryingClause) {
			listener.exitPerformVaryingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformVaryingClause) {
			return visitor.visitPerformVaryingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformVaryingPhraseContext extends ParserRuleContext {
	public performFrom(): PerformFromContext {
		return this.getRuleContext(0, PerformFromContext);
	}
	public performBy(): PerformByContext {
		return this.getRuleContext(0, PerformByContext);
	}
	public performUntil(): PerformUntilContext {
		return this.getRuleContext(0, PerformUntilContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performVaryingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformVaryingPhrase) {
			listener.enterPerformVaryingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformVaryingPhrase) {
			listener.exitPerformVaryingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformVaryingPhrase) {
			return visitor.visitPerformVaryingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformAfterContext extends ParserRuleContext {
	public AFTER(): TerminalNode { return this.getToken(Cobol85Parser.AFTER, 0); }
	public performVaryingPhrase(): PerformVaryingPhraseContext {
		return this.getRuleContext(0, PerformVaryingPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performAfter; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformAfter) {
			listener.enterPerformAfter(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformAfter) {
			listener.exitPerformAfter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformAfter) {
			return visitor.visitPerformAfter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformFromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performFrom; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformFrom) {
			listener.enterPerformFrom(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformFrom) {
			listener.exitPerformFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformFrom) {
			return visitor.visitPerformFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformByContext extends ParserRuleContext {
	public BY(): TerminalNode { return this.getToken(Cobol85Parser.BY, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performBy; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformBy) {
			listener.enterPerformBy(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformBy) {
			listener.exitPerformBy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformBy) {
			return visitor.visitPerformBy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PerformTestClauseContext extends ParserRuleContext {
	public TEST(): TerminalNode { return this.getToken(Cobol85Parser.TEST, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AFTER, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_performTestClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPerformTestClause) {
			listener.enterPerformTestClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPerformTestClause) {
			listener.exitPerformTestClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPerformTestClause) {
			return visitor.visitPerformTestClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PurgeStatementContext extends ParserRuleContext {
	public PURGE(): TerminalNode { return this.getToken(Cobol85Parser.PURGE, 0); }
	public cdName(): CdNameContext[];
	public cdName(i: number): CdNameContext;
	public cdName(i?: number): CdNameContext | CdNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CdNameContext);
		} else {
			return this.getRuleContext(i, CdNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_purgeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPurgeStatement) {
			listener.enterPurgeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPurgeStatement) {
			listener.exitPurgeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPurgeStatement) {
			return visitor.visitPurgeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReadStatementContext extends ParserRuleContext {
	public READ(): TerminalNode { return this.getToken(Cobol85Parser.READ, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NEXT, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORD, 0); }
	public readInto(): ReadIntoContext | undefined {
		return this.tryGetRuleContext(0, ReadIntoContext);
	}
	public readWith(): ReadWithContext | undefined {
		return this.tryGetRuleContext(0, ReadWithContext);
	}
	public readKey(): ReadKeyContext | undefined {
		return this.tryGetRuleContext(0, ReadKeyContext);
	}
	public invalidKeyPhrase(): InvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
	}
	public notInvalidKeyPhrase(): NotInvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
	}
	public atEndPhrase(): AtEndPhraseContext | undefined {
		return this.tryGetRuleContext(0, AtEndPhraseContext);
	}
	public notAtEndPhrase(): NotAtEndPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotAtEndPhraseContext);
	}
	public END_READ(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_READ, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_readStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReadStatement) {
			listener.enterReadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReadStatement) {
			listener.exitReadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReadStatement) {
			return visitor.visitReadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReadIntoContext extends ParserRuleContext {
	public INTO(): TerminalNode { return this.getToken(Cobol85Parser.INTO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_readInto; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReadInto) {
			listener.enterReadInto(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReadInto) {
			listener.exitReadInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReadInto) {
			return visitor.visitReadInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReadWithContext extends ParserRuleContext {
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCK, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WAIT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	public KEPT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEPT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_readWith; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReadWith) {
			listener.enterReadWith(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReadWith) {
			listener.exitReadWith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReadWith) {
			return visitor.visitReadWith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReadKeyContext extends ParserRuleContext {
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_readKey; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReadKey) {
			listener.enterReadKey(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReadKey) {
			listener.exitReadKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReadKey) {
			return visitor.visitReadKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveStatementContext extends ParserRuleContext {
	public RECEIVE(): TerminalNode { return this.getToken(Cobol85Parser.RECEIVE, 0); }
	public receiveFromStatement(): ReceiveFromStatementContext | undefined {
		return this.tryGetRuleContext(0, ReceiveFromStatementContext);
	}
	public receiveIntoStatement(): ReceiveIntoStatementContext | undefined {
		return this.tryGetRuleContext(0, ReceiveIntoStatementContext);
	}
	public onExceptionClause(): OnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, OnExceptionClauseContext);
	}
	public notOnExceptionClause(): NotOnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
	}
	public END_RECEIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_RECEIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveStatement) {
			listener.enterReceiveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveStatement) {
			listener.exitReceiveStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveStatement) {
			return visitor.visitReceiveStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveFromStatementContext extends ParserRuleContext {
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public receiveFrom(): ReceiveFromContext {
		return this.getRuleContext(0, ReceiveFromContext);
	}
	public receiveBefore(): ReceiveBeforeContext[];
	public receiveBefore(i: number): ReceiveBeforeContext;
	public receiveBefore(i?: number): ReceiveBeforeContext | ReceiveBeforeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReceiveBeforeContext);
		} else {
			return this.getRuleContext(i, ReceiveBeforeContext);
		}
	}
	public receiveWith(): ReceiveWithContext[];
	public receiveWith(i: number): ReceiveWithContext;
	public receiveWith(i?: number): ReceiveWithContext | ReceiveWithContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReceiveWithContext);
		} else {
			return this.getRuleContext(i, ReceiveWithContext);
		}
	}
	public receiveThread(): ReceiveThreadContext[];
	public receiveThread(i: number): ReceiveThreadContext;
	public receiveThread(i?: number): ReceiveThreadContext | ReceiveThreadContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReceiveThreadContext);
		} else {
			return this.getRuleContext(i, ReceiveThreadContext);
		}
	}
	public receiveSize(): ReceiveSizeContext[];
	public receiveSize(i: number): ReceiveSizeContext;
	public receiveSize(i?: number): ReceiveSizeContext | ReceiveSizeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReceiveSizeContext);
		} else {
			return this.getRuleContext(i, ReceiveSizeContext);
		}
	}
	public receiveStatus(): ReceiveStatusContext[];
	public receiveStatus(i: number): ReceiveStatusContext;
	public receiveStatus(i?: number): ReceiveStatusContext | ReceiveStatusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReceiveStatusContext);
		} else {
			return this.getRuleContext(i, ReceiveStatusContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveFromStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveFromStatement) {
			listener.enterReceiveFromStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveFromStatement) {
			listener.exitReceiveFromStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveFromStatement) {
			return visitor.visitReceiveFromStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveFromContext extends ParserRuleContext {
	public THREAD(): TerminalNode { return this.getToken(Cobol85Parser.THREAD, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LAST, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ANY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveFrom; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveFrom) {
			listener.enterReceiveFrom(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveFrom) {
			listener.exitReceiveFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveFrom) {
			return visitor.visitReceiveFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveIntoStatementContext extends ParserRuleContext {
	public cdName(): CdNameContext {
		return this.getRuleContext(0, CdNameContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public MESSAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MESSAGE, 0); }
	public SEGMENT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SEGMENT, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INTO, 0); }
	public receiveNoData(): ReceiveNoDataContext | undefined {
		return this.tryGetRuleContext(0, ReceiveNoDataContext);
	}
	public receiveWithData(): ReceiveWithDataContext | undefined {
		return this.tryGetRuleContext(0, ReceiveWithDataContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveIntoStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveIntoStatement) {
			listener.enterReceiveIntoStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveIntoStatement) {
			listener.exitReceiveIntoStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveIntoStatement) {
			return visitor.visitReceiveIntoStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveNoDataContext extends ParserRuleContext {
	public NO(): TerminalNode { return this.getToken(Cobol85Parser.NO, 0); }
	public DATA(): TerminalNode { return this.getToken(Cobol85Parser.DATA, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveNoData; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveNoData) {
			listener.enterReceiveNoData(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveNoData) {
			listener.exitReceiveNoData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveNoData) {
			return visitor.visitReceiveNoData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveWithDataContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(Cobol85Parser.WITH, 0); }
	public DATA(): TerminalNode { return this.getToken(Cobol85Parser.DATA, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveWithData; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveWithData) {
			listener.enterReceiveWithData(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveWithData) {
			listener.exitReceiveWithData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveWithData) {
			return visitor.visitReceiveWithData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveBeforeContext extends ParserRuleContext {
	public BEFORE(): TerminalNode { return this.getToken(Cobol85Parser.BEFORE, 0); }
	public numericLiteral(): NumericLiteralContext | undefined {
		return this.tryGetRuleContext(0, NumericLiteralContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public TIME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TIME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveBefore; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveBefore) {
			listener.enterReceiveBefore(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveBefore) {
			listener.exitReceiveBefore(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveBefore) {
			return visitor.visitReceiveBefore(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveWithContext extends ParserRuleContext {
	public NO(): TerminalNode { return this.getToken(Cobol85Parser.NO, 0); }
	public WAIT(): TerminalNode { return this.getToken(Cobol85Parser.WAIT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveWith; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveWith) {
			listener.enterReceiveWith(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveWith) {
			listener.exitReceiveWith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveWith) {
			return visitor.visitReceiveWith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveThreadContext extends ParserRuleContext {
	public THREAD(): TerminalNode { return this.getToken(Cobol85Parser.THREAD, 0); }
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveThread; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveThread) {
			listener.enterReceiveThread(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveThread) {
			listener.exitReceiveThread(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveThread) {
			return visitor.visitReceiveThread(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveSizeContext extends ParserRuleContext {
	public SIZE(): TerminalNode { return this.getToken(Cobol85Parser.SIZE, 0); }
	public numericLiteral(): NumericLiteralContext | undefined {
		return this.tryGetRuleContext(0, NumericLiteralContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveSize; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveSize) {
			listener.enterReceiveSize(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveSize) {
			listener.exitReceiveSize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveSize) {
			return visitor.visitReceiveSize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReceiveStatusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(Cobol85Parser.STATUS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_receiveStatus; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReceiveStatus) {
			listener.enterReceiveStatus(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReceiveStatus) {
			listener.exitReceiveStatus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReceiveStatus) {
			return visitor.visitReceiveStatus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReleaseStatementContext extends ParserRuleContext {
	public RELEASE(): TerminalNode { return this.getToken(Cobol85Parser.RELEASE, 0); }
	public recordName(): RecordNameContext {
		return this.getRuleContext(0, RecordNameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FROM, 0); }
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_releaseStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReleaseStatement) {
			listener.enterReleaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReleaseStatement) {
			listener.exitReleaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReleaseStatement) {
			return visitor.visitReleaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(Cobol85Parser.RETURN, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public atEndPhrase(): AtEndPhraseContext {
		return this.getRuleContext(0, AtEndPhraseContext);
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECORD, 0); }
	public returnInto(): ReturnIntoContext | undefined {
		return this.tryGetRuleContext(0, ReturnIntoContext);
	}
	public notAtEndPhrase(): NotAtEndPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotAtEndPhraseContext);
	}
	public END_RETURN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_RETURN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_returnStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReturnStatement) {
			listener.enterReturnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReturnStatement) {
			listener.exitReturnStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReturnStatement) {
			return visitor.visitReturnStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnIntoContext extends ParserRuleContext {
	public INTO(): TerminalNode { return this.getToken(Cobol85Parser.INTO, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_returnInto; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReturnInto) {
			listener.enterReturnInto(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReturnInto) {
			listener.exitReturnInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReturnInto) {
			return visitor.visitReturnInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RewriteStatementContext extends ParserRuleContext {
	public REWRITE(): TerminalNode { return this.getToken(Cobol85Parser.REWRITE, 0); }
	public recordName(): RecordNameContext {
		return this.getRuleContext(0, RecordNameContext);
	}
	public rewriteFrom(): RewriteFromContext | undefined {
		return this.tryGetRuleContext(0, RewriteFromContext);
	}
	public invalidKeyPhrase(): InvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
	}
	public notInvalidKeyPhrase(): NotInvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
	}
	public END_REWRITE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_REWRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_rewriteStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRewriteStatement) {
			listener.enterRewriteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRewriteStatement) {
			listener.exitRewriteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRewriteStatement) {
			return visitor.visitRewriteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RewriteFromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_rewriteFrom; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRewriteFrom) {
			listener.enterRewriteFrom(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRewriteFrom) {
			listener.exitRewriteFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRewriteFrom) {
			return visitor.visitRewriteFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SearchStatementContext extends ParserRuleContext {
	public SEARCH(): TerminalNode { return this.getToken(Cobol85Parser.SEARCH, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	public searchVarying(): SearchVaryingContext | undefined {
		return this.tryGetRuleContext(0, SearchVaryingContext);
	}
	public atEndPhrase(): AtEndPhraseContext | undefined {
		return this.tryGetRuleContext(0, AtEndPhraseContext);
	}
	public searchWhen(): SearchWhenContext[];
	public searchWhen(i: number): SearchWhenContext;
	public searchWhen(i?: number): SearchWhenContext | SearchWhenContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SearchWhenContext);
		} else {
			return this.getRuleContext(i, SearchWhenContext);
		}
	}
	public END_SEARCH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_SEARCH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_searchStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSearchStatement) {
			listener.enterSearchStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSearchStatement) {
			listener.exitSearchStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSearchStatement) {
			return visitor.visitSearchStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SearchVaryingContext extends ParserRuleContext {
	public VARYING(): TerminalNode { return this.getToken(Cobol85Parser.VARYING, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_searchVarying; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSearchVarying) {
			listener.enterSearchVarying(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSearchVarying) {
			listener.exitSearchVarying(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSearchVarying) {
			return visitor.visitSearchVarying(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SearchWhenContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(Cobol85Parser.WHEN, 0); }
	public condition(): ConditionContext {
		return this.getRuleContext(0, ConditionContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NEXT, 0); }
	public SENTENCE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SENTENCE, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_searchWhen; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSearchWhen) {
			listener.enterSearchWhen(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSearchWhen) {
			listener.exitSearchWhen(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSearchWhen) {
			return visitor.visitSearchWhen(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendStatementContext extends ParserRuleContext {
	public SEND(): TerminalNode { return this.getToken(Cobol85Parser.SEND, 0); }
	public sendStatementSync(): SendStatementSyncContext | undefined {
		return this.tryGetRuleContext(0, SendStatementSyncContext);
	}
	public sendStatementAsync(): SendStatementAsyncContext | undefined {
		return this.tryGetRuleContext(0, SendStatementAsyncContext);
	}
	public onExceptionClause(): OnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, OnExceptionClauseContext);
	}
	public notOnExceptionClause(): NotOnExceptionClauseContext | undefined {
		return this.tryGetRuleContext(0, NotOnExceptionClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendStatement) {
			listener.enterSendStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendStatement) {
			listener.exitSendStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendStatement) {
			return visitor.visitSendStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendStatementSyncContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public sendFromPhrase(): SendFromPhraseContext | undefined {
		return this.tryGetRuleContext(0, SendFromPhraseContext);
	}
	public sendWithPhrase(): SendWithPhraseContext | undefined {
		return this.tryGetRuleContext(0, SendWithPhraseContext);
	}
	public sendReplacingPhrase(): SendReplacingPhraseContext | undefined {
		return this.tryGetRuleContext(0, SendReplacingPhraseContext);
	}
	public sendAdvancingPhrase(): SendAdvancingPhraseContext | undefined {
		return this.tryGetRuleContext(0, SendAdvancingPhraseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendStatementSync; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendStatementSync) {
			listener.enterSendStatementSync(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendStatementSync) {
			listener.exitSendStatementSync(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendStatementSync) {
			return visitor.visitSendStatementSync(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendStatementAsyncContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TOP, 0); }
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BOTTOM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendStatementAsync; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendStatementAsync) {
			listener.enterSendStatementAsync(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendStatementAsync) {
			listener.exitSendStatementAsync(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendStatementAsync) {
			return visitor.visitSendStatementAsync(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendFromPhraseContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendFromPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendFromPhrase) {
			listener.enterSendFromPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendFromPhrase) {
			listener.exitSendFromPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendFromPhrase) {
			return visitor.visitSendFromPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendWithPhraseContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(Cobol85Parser.WITH, 0); }
	public EGI(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EGI, 0); }
	public EMI(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EMI, 0); }
	public ESI(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ESI, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendWithPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendWithPhrase) {
			listener.enterSendWithPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendWithPhrase) {
			listener.exitSendWithPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendWithPhrase) {
			return visitor.visitSendWithPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendReplacingPhraseContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(Cobol85Parser.REPLACING, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendReplacingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendReplacingPhrase) {
			listener.enterSendReplacingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendReplacingPhrase) {
			listener.exitSendReplacingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendReplacingPhrase) {
			return visitor.visitSendReplacingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendAdvancingPhraseContext extends ParserRuleContext {
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AFTER, 0); }
	public sendAdvancingPage(): SendAdvancingPageContext | undefined {
		return this.tryGetRuleContext(0, SendAdvancingPageContext);
	}
	public sendAdvancingLines(): SendAdvancingLinesContext | undefined {
		return this.tryGetRuleContext(0, SendAdvancingLinesContext);
	}
	public sendAdvancingMnemonic(): SendAdvancingMnemonicContext | undefined {
		return this.tryGetRuleContext(0, SendAdvancingMnemonicContext);
	}
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendAdvancingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendAdvancingPhrase) {
			listener.enterSendAdvancingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendAdvancingPhrase) {
			listener.exitSendAdvancingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendAdvancingPhrase) {
			return visitor.visitSendAdvancingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendAdvancingPageContext extends ParserRuleContext {
	public PAGE(): TerminalNode { return this.getToken(Cobol85Parser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendAdvancingPage; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendAdvancingPage) {
			listener.enterSendAdvancingPage(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendAdvancingPage) {
			listener.exitSendAdvancingPage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendAdvancingPage) {
			return visitor.visitSendAdvancingPage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendAdvancingLinesContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendAdvancingLines; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendAdvancingLines) {
			listener.enterSendAdvancingLines(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendAdvancingLines) {
			listener.exitSendAdvancingLines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendAdvancingLines) {
			return visitor.visitSendAdvancingLines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SendAdvancingMnemonicContext extends ParserRuleContext {
	public mnemonicName(): MnemonicNameContext {
		return this.getRuleContext(0, MnemonicNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sendAdvancingMnemonic; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSendAdvancingMnemonic) {
			listener.enterSendAdvancingMnemonic(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSendAdvancingMnemonic) {
			listener.exitSendAdvancingMnemonic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSendAdvancingMnemonic) {
			return visitor.visitSendAdvancingMnemonic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(Cobol85Parser.SET, 0); }
	public setUpDownByStatement(): SetUpDownByStatementContext | undefined {
		return this.tryGetRuleContext(0, SetUpDownByStatementContext);
	}
	public setToStatement(): SetToStatementContext[];
	public setToStatement(i: number): SetToStatementContext;
	public setToStatement(i?: number): SetToStatementContext | SetToStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetToStatementContext);
		} else {
			return this.getRuleContext(i, SetToStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_setStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSetStatement) {
			listener.enterSetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSetStatement) {
			listener.exitSetStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSetStatement) {
			return visitor.visitSetStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetToStatementContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(Cobol85Parser.TO, 0); }
	public setTo(): SetToContext[];
	public setTo(i: number): SetToContext;
	public setTo(i?: number): SetToContext | SetToContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetToContext);
		} else {
			return this.getRuleContext(i, SetToContext);
		}
	}
	public setToValue(): SetToValueContext[];
	public setToValue(i: number): SetToValueContext;
	public setToValue(i?: number): SetToValueContext | SetToValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetToValueContext);
		} else {
			return this.getRuleContext(i, SetToValueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_setToStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSetToStatement) {
			listener.enterSetToStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSetToStatement) {
			listener.exitSetToStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSetToStatement) {
			return visitor.visitSetToStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetUpDownByStatementContext extends ParserRuleContext {
	public setByValue(): SetByValueContext {
		return this.getRuleContext(0, SetByValueContext);
	}
	public UP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.UP, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public DOWN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DOWN, 0); }
	public setTo(): SetToContext[];
	public setTo(i: number): SetToContext;
	public setTo(i?: number): SetToContext | SetToContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetToContext);
		} else {
			return this.getRuleContext(i, SetToContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_setUpDownByStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSetUpDownByStatement) {
			listener.enterSetUpDownByStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSetUpDownByStatement) {
			listener.exitSetUpDownByStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSetUpDownByStatement) {
			return visitor.visitSetUpDownByStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetToContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_setTo; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSetTo) {
			listener.enterSetTo(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSetTo) {
			listener.exitSetTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSetTo) {
			return visitor.visitSetTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetToValueContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OFF, 0); }
	public ENTRY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ENTRY, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_setToValue; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSetToValue) {
			listener.enterSetToValue(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSetToValue) {
			listener.exitSetToValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSetToValue) {
			return visitor.visitSetToValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetByValueContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_setByValue; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSetByValue) {
			listener.enterSetByValue(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSetByValue) {
			listener.exitSetByValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSetByValue) {
			return visitor.visitSetByValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortStatementContext extends ParserRuleContext {
	public SORT(): TerminalNode { return this.getToken(Cobol85Parser.SORT, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public sortOnKeyClause(): SortOnKeyClauseContext[];
	public sortOnKeyClause(i: number): SortOnKeyClauseContext;
	public sortOnKeyClause(i?: number): SortOnKeyClauseContext | SortOnKeyClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortOnKeyClauseContext);
		} else {
			return this.getRuleContext(i, SortOnKeyClauseContext);
		}
	}
	public sortDuplicatesPhrase(): SortDuplicatesPhraseContext | undefined {
		return this.tryGetRuleContext(0, SortDuplicatesPhraseContext);
	}
	public sortCollatingSequencePhrase(): SortCollatingSequencePhraseContext | undefined {
		return this.tryGetRuleContext(0, SortCollatingSequencePhraseContext);
	}
	public sortInputProcedurePhrase(): SortInputProcedurePhraseContext | undefined {
		return this.tryGetRuleContext(0, SortInputProcedurePhraseContext);
	}
	public sortUsing(): SortUsingContext[];
	public sortUsing(i: number): SortUsingContext;
	public sortUsing(i?: number): SortUsingContext | SortUsingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortUsingContext);
		} else {
			return this.getRuleContext(i, SortUsingContext);
		}
	}
	public sortOutputProcedurePhrase(): SortOutputProcedurePhraseContext | undefined {
		return this.tryGetRuleContext(0, SortOutputProcedurePhraseContext);
	}
	public sortGivingPhrase(): SortGivingPhraseContext[];
	public sortGivingPhrase(i: number): SortGivingPhraseContext;
	public sortGivingPhrase(i?: number): SortGivingPhraseContext | SortGivingPhraseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortGivingPhraseContext);
		} else {
			return this.getRuleContext(i, SortGivingPhraseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortStatement) {
			listener.enterSortStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortStatement) {
			listener.exitSortStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortStatement) {
			return visitor.visitSortStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortOnKeyClauseContext extends ParserRuleContext {
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DESCENDING, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public qualifiedDataName(): QualifiedDataNameContext[];
	public qualifiedDataName(i: number): QualifiedDataNameContext;
	public qualifiedDataName(i?: number): QualifiedDataNameContext | QualifiedDataNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedDataNameContext);
		} else {
			return this.getRuleContext(i, QualifiedDataNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortOnKeyClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortOnKeyClause) {
			listener.enterSortOnKeyClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortOnKeyClause) {
			listener.exitSortOnKeyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortOnKeyClause) {
			return visitor.visitSortOnKeyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortDuplicatesPhraseContext extends ParserRuleContext {
	public DUPLICATES(): TerminalNode { return this.getToken(Cobol85Parser.DUPLICATES, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ORDER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortDuplicatesPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortDuplicatesPhrase) {
			listener.enterSortDuplicatesPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortDuplicatesPhrase) {
			listener.exitSortDuplicatesPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortDuplicatesPhrase) {
			return visitor.visitSortDuplicatesPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortCollatingSequencePhraseContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(Cobol85Parser.SEQUENCE, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public alphabetName(): AlphabetNameContext[];
	public alphabetName(i: number): AlphabetNameContext;
	public alphabetName(i?: number): AlphabetNameContext | AlphabetNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlphabetNameContext);
		} else {
			return this.getRuleContext(i, AlphabetNameContext);
		}
	}
	public sortCollatingAlphanumeric(): SortCollatingAlphanumericContext | undefined {
		return this.tryGetRuleContext(0, SortCollatingAlphanumericContext);
	}
	public sortCollatingNational(): SortCollatingNationalContext | undefined {
		return this.tryGetRuleContext(0, SortCollatingNationalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortCollatingSequencePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortCollatingSequencePhrase) {
			listener.enterSortCollatingSequencePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortCollatingSequencePhrase) {
			listener.exitSortCollatingSequencePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortCollatingSequencePhrase) {
			return visitor.visitSortCollatingSequencePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortCollatingAlphanumericContext extends ParserRuleContext {
	public ALPHANUMERIC(): TerminalNode { return this.getToken(Cobol85Parser.ALPHANUMERIC, 0); }
	public IS(): TerminalNode { return this.getToken(Cobol85Parser.IS, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortCollatingAlphanumeric; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortCollatingAlphanumeric) {
			listener.enterSortCollatingAlphanumeric(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortCollatingAlphanumeric) {
			listener.exitSortCollatingAlphanumeric(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortCollatingAlphanumeric) {
			return visitor.visitSortCollatingAlphanumeric(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortCollatingNationalContext extends ParserRuleContext {
	public NATIONAL(): TerminalNode { return this.getToken(Cobol85Parser.NATIONAL, 0); }
	public alphabetName(): AlphabetNameContext {
		return this.getRuleContext(0, AlphabetNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortCollatingNational; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortCollatingNational) {
			listener.enterSortCollatingNational(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortCollatingNational) {
			listener.exitSortCollatingNational(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortCollatingNational) {
			return visitor.visitSortCollatingNational(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortInputProcedurePhraseContext extends ParserRuleContext {
	public INPUT(): TerminalNode { return this.getToken(Cobol85Parser.INPUT, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(Cobol85Parser.PROCEDURE, 0); }
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public sortInputThrough(): SortInputThroughContext | undefined {
		return this.tryGetRuleContext(0, SortInputThroughContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortInputProcedurePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortInputProcedurePhrase) {
			listener.enterSortInputProcedurePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortInputProcedurePhrase) {
			listener.exitSortInputProcedurePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortInputProcedurePhrase) {
			return visitor.visitSortInputProcedurePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortInputThroughContext extends ParserRuleContext {
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortInputThrough; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortInputThrough) {
			listener.enterSortInputThrough(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortInputThrough) {
			listener.exitSortInputThrough(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortInputThrough) {
			return visitor.visitSortInputThrough(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortUsingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(Cobol85Parser.USING, 0); }
	public fileName(): FileNameContext[];
	public fileName(i: number): FileNameContext;
	public fileName(i?: number): FileNameContext | FileNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileNameContext);
		} else {
			return this.getRuleContext(i, FileNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortUsing; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortUsing) {
			listener.enterSortUsing(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortUsing) {
			listener.exitSortUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortUsing) {
			return visitor.visitSortUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortOutputProcedurePhraseContext extends ParserRuleContext {
	public OUTPUT(): TerminalNode { return this.getToken(Cobol85Parser.OUTPUT, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(Cobol85Parser.PROCEDURE, 0); }
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public sortOutputThrough(): SortOutputThroughContext | undefined {
		return this.tryGetRuleContext(0, SortOutputThroughContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortOutputProcedurePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortOutputProcedurePhrase) {
			listener.enterSortOutputProcedurePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortOutputProcedurePhrase) {
			listener.exitSortOutputProcedurePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortOutputProcedurePhrase) {
			return visitor.visitSortOutputProcedurePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortOutputThroughContext extends ParserRuleContext {
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THRU, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortOutputThrough; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortOutputThrough) {
			listener.enterSortOutputThrough(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortOutputThrough) {
			listener.exitSortOutputThrough(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortOutputThrough) {
			return visitor.visitSortOutputThrough(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortGivingPhraseContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(Cobol85Parser.GIVING, 0); }
	public sortGiving(): SortGivingContext[];
	public sortGiving(i: number): SortGivingContext;
	public sortGiving(i?: number): SortGivingContext | SortGivingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortGivingContext);
		} else {
			return this.getRuleContext(i, SortGivingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortGivingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortGivingPhrase) {
			listener.enterSortGivingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortGivingPhrase) {
			listener.exitSortGivingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortGivingPhrase) {
			return visitor.visitSortGivingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortGivingContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCK, 0); }
	public SAVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SAVE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REWIND, 0); }
	public CRUNCH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CRUNCH, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RELEASE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REMOVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sortGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSortGiving) {
			listener.enterSortGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSortGiving) {
			listener.exitSortGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSortGiving) {
			return visitor.visitSortGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartStatementContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(Cobol85Parser.START, 0); }
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public startKey(): StartKeyContext | undefined {
		return this.tryGetRuleContext(0, StartKeyContext);
	}
	public invalidKeyPhrase(): InvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
	}
	public notInvalidKeyPhrase(): NotInvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
	}
	public END_START(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_START, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_startStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStartStatement) {
			listener.enterStartStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStartStatement) {
			listener.exitStartStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStartStatement) {
			return visitor.visitStartStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartKeyContext extends ParserRuleContext {
	public KEY(): TerminalNode { return this.getToken(Cobol85Parser.KEY, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EQUAL, 0); }
	public EQUALCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EQUALCHAR, 0); }
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.GREATER, 0); }
	public MORETHANCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MORETHANCHAR, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOT, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LESS, 0); }
	public LESSTHANCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LESSTHANCHAR, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OR, 0); }
	public MORETHANOREQUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MORETHANOREQUAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TO, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_startKey; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStartKey) {
			listener.enterStartKey(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStartKey) {
			listener.exitStartKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStartKey) {
			return visitor.visitStartKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StopStatementContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(Cobol85Parser.STOP, 0); }
	public RUN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RUN, 0); }
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stopStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStopStatement) {
			listener.enterStopStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStopStatement) {
			listener.exitStopStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStopStatement) {
			return visitor.visitStopStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringStatementContext extends ParserRuleContext {
	public STRING(): TerminalNode { return this.getToken(Cobol85Parser.STRING, 0); }
	public stringIntoPhrase(): StringIntoPhraseContext {
		return this.getRuleContext(0, StringIntoPhraseContext);
	}
	public stringSendingPhrase(): StringSendingPhraseContext[];
	public stringSendingPhrase(i: number): StringSendingPhraseContext;
	public stringSendingPhrase(i?: number): StringSendingPhraseContext | StringSendingPhraseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringSendingPhraseContext);
		} else {
			return this.getRuleContext(i, StringSendingPhraseContext);
		}
	}
	public stringWithPointerPhrase(): StringWithPointerPhraseContext | undefined {
		return this.tryGetRuleContext(0, StringWithPointerPhraseContext);
	}
	public onOverflowPhrase(): OnOverflowPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnOverflowPhraseContext);
	}
	public notOnOverflowPhrase(): NotOnOverflowPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotOnOverflowPhraseContext);
	}
	public END_STRING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stringStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStringStatement) {
			listener.enterStringStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStringStatement) {
			listener.exitStringStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStringStatement) {
			return visitor.visitStringStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringSendingPhraseContext extends ParserRuleContext {
	public stringDelimitedByPhrase(): StringDelimitedByPhraseContext | undefined {
		return this.tryGetRuleContext(0, StringDelimitedByPhraseContext);
	}
	public stringForPhrase(): StringForPhraseContext | undefined {
		return this.tryGetRuleContext(0, StringForPhraseContext);
	}
	public stringSending(): StringSendingContext[];
	public stringSending(i: number): StringSendingContext;
	public stringSending(i?: number): StringSendingContext | StringSendingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringSendingContext);
		} else {
			return this.getRuleContext(i, StringSendingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stringSendingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStringSendingPhrase) {
			listener.enterStringSendingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStringSendingPhrase) {
			listener.exitStringSendingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStringSendingPhrase) {
			return visitor.visitStringSendingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringSendingContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stringSending; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStringSending) {
			listener.enterStringSending(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStringSending) {
			listener.exitStringSending(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStringSending) {
			return visitor.visitStringSending(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringDelimitedByPhraseContext extends ParserRuleContext {
	public DELIMITED(): TerminalNode { return this.getToken(Cobol85Parser.DELIMITED, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SIZE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stringDelimitedByPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStringDelimitedByPhrase) {
			listener.enterStringDelimitedByPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStringDelimitedByPhrase) {
			listener.exitStringDelimitedByPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStringDelimitedByPhrase) {
			return visitor.visitStringDelimitedByPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringForPhraseContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(Cobol85Parser.FOR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stringForPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStringForPhrase) {
			listener.enterStringForPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStringForPhrase) {
			listener.exitStringForPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStringForPhrase) {
			return visitor.visitStringForPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringIntoPhraseContext extends ParserRuleContext {
	public INTO(): TerminalNode { return this.getToken(Cobol85Parser.INTO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stringIntoPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStringIntoPhrase) {
			listener.enterStringIntoPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStringIntoPhrase) {
			listener.exitStringIntoPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStringIntoPhrase) {
			return visitor.visitStringIntoPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringWithPointerPhraseContext extends ParserRuleContext {
	public POINTER(): TerminalNode { return this.getToken(Cobol85Parser.POINTER, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_stringWithPointerPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterStringWithPointerPhrase) {
			listener.enterStringWithPointerPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitStringWithPointerPhrase) {
			listener.exitStringWithPointerPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitStringWithPointerPhrase) {
			return visitor.visitStringWithPointerPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractStatementContext extends ParserRuleContext {
	public SUBTRACT(): TerminalNode { return this.getToken(Cobol85Parser.SUBTRACT, 0); }
	public subtractFromStatement(): SubtractFromStatementContext | undefined {
		return this.tryGetRuleContext(0, SubtractFromStatementContext);
	}
	public subtractFromGivingStatement(): SubtractFromGivingStatementContext | undefined {
		return this.tryGetRuleContext(0, SubtractFromGivingStatementContext);
	}
	public subtractCorrespondingStatement(): SubtractCorrespondingStatementContext | undefined {
		return this.tryGetRuleContext(0, SubtractCorrespondingStatementContext);
	}
	public onSizeErrorPhrase(): OnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnSizeErrorPhraseContext);
	}
	public notOnSizeErrorPhrase(): NotOnSizeErrorPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotOnSizeErrorPhraseContext);
	}
	public END_SUBTRACT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_SUBTRACT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractStatement) {
			listener.enterSubtractStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractStatement) {
			listener.exitSubtractStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractStatement) {
			return visitor.visitSubtractStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractFromStatementContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public subtractSubtrahend(): SubtractSubtrahendContext[];
	public subtractSubtrahend(i: number): SubtractSubtrahendContext;
	public subtractSubtrahend(i?: number): SubtractSubtrahendContext | SubtractSubtrahendContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubtractSubtrahendContext);
		} else {
			return this.getRuleContext(i, SubtractSubtrahendContext);
		}
	}
	public subtractMinuend(): SubtractMinuendContext[];
	public subtractMinuend(i: number): SubtractMinuendContext;
	public subtractMinuend(i?: number): SubtractMinuendContext | SubtractMinuendContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubtractMinuendContext);
		} else {
			return this.getRuleContext(i, SubtractMinuendContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractFromStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractFromStatement) {
			listener.enterSubtractFromStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractFromStatement) {
			listener.exitSubtractFromStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractFromStatement) {
			return visitor.visitSubtractFromStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractFromGivingStatementContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public subtractMinuendGiving(): SubtractMinuendGivingContext {
		return this.getRuleContext(0, SubtractMinuendGivingContext);
	}
	public GIVING(): TerminalNode { return this.getToken(Cobol85Parser.GIVING, 0); }
	public subtractSubtrahend(): SubtractSubtrahendContext[];
	public subtractSubtrahend(i: number): SubtractSubtrahendContext;
	public subtractSubtrahend(i?: number): SubtractSubtrahendContext | SubtractSubtrahendContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubtractSubtrahendContext);
		} else {
			return this.getRuleContext(i, SubtractSubtrahendContext);
		}
	}
	public subtractGiving(): SubtractGivingContext[];
	public subtractGiving(i: number): SubtractGivingContext;
	public subtractGiving(i?: number): SubtractGivingContext | SubtractGivingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubtractGivingContext);
		} else {
			return this.getRuleContext(i, SubtractGivingContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractFromGivingStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractFromGivingStatement) {
			listener.enterSubtractFromGivingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractFromGivingStatement) {
			listener.exitSubtractFromGivingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractFromGivingStatement) {
			return visitor.visitSubtractFromGivingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractCorrespondingStatementContext extends ParserRuleContext {
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public subtractMinuendCorresponding(): SubtractMinuendCorrespondingContext {
		return this.getRuleContext(0, SubtractMinuendCorrespondingContext);
	}
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CORRESPONDING, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CORR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractCorrespondingStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractCorrespondingStatement) {
			listener.enterSubtractCorrespondingStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractCorrespondingStatement) {
			listener.exitSubtractCorrespondingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractCorrespondingStatement) {
			return visitor.visitSubtractCorrespondingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractSubtrahendContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractSubtrahend; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractSubtrahend) {
			listener.enterSubtractSubtrahend(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractSubtrahend) {
			listener.exitSubtractSubtrahend(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractSubtrahend) {
			return visitor.visitSubtractSubtrahend(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractMinuendContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractMinuend; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractMinuend) {
			listener.enterSubtractMinuend(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractMinuend) {
			listener.exitSubtractMinuend(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractMinuend) {
			return visitor.visitSubtractMinuend(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractMinuendGivingContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractMinuendGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractMinuendGiving) {
			listener.enterSubtractMinuendGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractMinuendGiving) {
			listener.exitSubtractMinuendGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractMinuendGiving) {
			return visitor.visitSubtractMinuendGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractGivingContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractGiving; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractGiving) {
			listener.enterSubtractGiving(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractGiving) {
			listener.exitSubtractGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractGiving) {
			return visitor.visitSubtractGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubtractMinuendCorrespondingContext extends ParserRuleContext {
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ROUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subtractMinuendCorresponding; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubtractMinuendCorresponding) {
			listener.enterSubtractMinuendCorresponding(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubtractMinuendCorresponding) {
			listener.exitSubtractMinuendCorresponding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubtractMinuendCorresponding) {
			return visitor.visitSubtractMinuendCorresponding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TerminateStatementContext extends ParserRuleContext {
	public TERMINATE(): TerminalNode { return this.getToken(Cobol85Parser.TERMINATE, 0); }
	public reportName(): ReportNameContext {
		return this.getRuleContext(0, ReportNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_terminateStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterTerminateStatement) {
			listener.enterTerminateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitTerminateStatement) {
			listener.exitTerminateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitTerminateStatement) {
			return visitor.visitTerminateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringStatementContext extends ParserRuleContext {
	public UNSTRING(): TerminalNode { return this.getToken(Cobol85Parser.UNSTRING, 0); }
	public unstringSendingPhrase(): UnstringSendingPhraseContext {
		return this.getRuleContext(0, UnstringSendingPhraseContext);
	}
	public unstringIntoPhrase(): UnstringIntoPhraseContext {
		return this.getRuleContext(0, UnstringIntoPhraseContext);
	}
	public unstringWithPointerPhrase(): UnstringWithPointerPhraseContext | undefined {
		return this.tryGetRuleContext(0, UnstringWithPointerPhraseContext);
	}
	public unstringTallyingPhrase(): UnstringTallyingPhraseContext | undefined {
		return this.tryGetRuleContext(0, UnstringTallyingPhraseContext);
	}
	public onOverflowPhrase(): OnOverflowPhraseContext | undefined {
		return this.tryGetRuleContext(0, OnOverflowPhraseContext);
	}
	public notOnOverflowPhrase(): NotOnOverflowPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotOnOverflowPhraseContext);
	}
	public END_UNSTRING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_UNSTRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringStatement) {
			listener.enterUnstringStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringStatement) {
			listener.exitUnstringStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringStatement) {
			return visitor.visitUnstringStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringSendingPhraseContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public unstringDelimitedByPhrase(): UnstringDelimitedByPhraseContext | undefined {
		return this.tryGetRuleContext(0, UnstringDelimitedByPhraseContext);
	}
	public unstringOrAllPhrase(): UnstringOrAllPhraseContext[];
	public unstringOrAllPhrase(i: number): UnstringOrAllPhraseContext;
	public unstringOrAllPhrase(i?: number): UnstringOrAllPhraseContext | UnstringOrAllPhraseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnstringOrAllPhraseContext);
		} else {
			return this.getRuleContext(i, UnstringOrAllPhraseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringSendingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringSendingPhrase) {
			listener.enterUnstringSendingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringSendingPhrase) {
			listener.exitUnstringSendingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringSendingPhrase) {
			return visitor.visitUnstringSendingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringDelimitedByPhraseContext extends ParserRuleContext {
	public DELIMITED(): TerminalNode { return this.getToken(Cobol85Parser.DELIMITED, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BY, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringDelimitedByPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringDelimitedByPhrase) {
			listener.enterUnstringDelimitedByPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringDelimitedByPhrase) {
			listener.exitUnstringDelimitedByPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringDelimitedByPhrase) {
			return visitor.visitUnstringDelimitedByPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringOrAllPhraseContext extends ParserRuleContext {
	public OR(): TerminalNode { return this.getToken(Cobol85Parser.OR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringOrAllPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringOrAllPhrase) {
			listener.enterUnstringOrAllPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringOrAllPhrase) {
			listener.exitUnstringOrAllPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringOrAllPhrase) {
			return visitor.visitUnstringOrAllPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringIntoPhraseContext extends ParserRuleContext {
	public INTO(): TerminalNode { return this.getToken(Cobol85Parser.INTO, 0); }
	public unstringInto(): UnstringIntoContext[];
	public unstringInto(i: number): UnstringIntoContext;
	public unstringInto(i?: number): UnstringIntoContext | UnstringIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnstringIntoContext);
		} else {
			return this.getRuleContext(i, UnstringIntoContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringIntoPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringIntoPhrase) {
			listener.enterUnstringIntoPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringIntoPhrase) {
			listener.exitUnstringIntoPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringIntoPhrase) {
			return visitor.visitUnstringIntoPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringIntoContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public unstringDelimiterIn(): UnstringDelimiterInContext | undefined {
		return this.tryGetRuleContext(0, UnstringDelimiterInContext);
	}
	public unstringCountIn(): UnstringCountInContext | undefined {
		return this.tryGetRuleContext(0, UnstringCountInContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringInto; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringInto) {
			listener.enterUnstringInto(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringInto) {
			listener.exitUnstringInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringInto) {
			return visitor.visitUnstringInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringDelimiterInContext extends ParserRuleContext {
	public DELIMITER(): TerminalNode { return this.getToken(Cobol85Parser.DELIMITER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringDelimiterIn; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringDelimiterIn) {
			listener.enterUnstringDelimiterIn(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringDelimiterIn) {
			listener.exitUnstringDelimiterIn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringDelimiterIn) {
			return visitor.visitUnstringDelimiterIn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringCountInContext extends ParserRuleContext {
	public COUNT(): TerminalNode { return this.getToken(Cobol85Parser.COUNT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringCountIn; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringCountIn) {
			listener.enterUnstringCountIn(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringCountIn) {
			listener.exitUnstringCountIn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringCountIn) {
			return visitor.visitUnstringCountIn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringWithPointerPhraseContext extends ParserRuleContext {
	public POINTER(): TerminalNode { return this.getToken(Cobol85Parser.POINTER, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringWithPointerPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringWithPointerPhrase) {
			listener.enterUnstringWithPointerPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringWithPointerPhrase) {
			listener.exitUnstringWithPointerPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringWithPointerPhrase) {
			return visitor.visitUnstringWithPointerPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnstringTallyingPhraseContext extends ParserRuleContext {
	public TALLYING(): TerminalNode { return this.getToken(Cobol85Parser.TALLYING, 0); }
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_unstringTallyingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUnstringTallyingPhrase) {
			listener.enterUnstringTallyingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUnstringTallyingPhrase) {
			listener.exitUnstringTallyingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUnstringTallyingPhrase) {
			return visitor.visitUnstringTallyingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseStatementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(Cobol85Parser.USE, 0); }
	public useAfterClause(): UseAfterClauseContext | undefined {
		return this.tryGetRuleContext(0, UseAfterClauseContext);
	}
	public useDebugClause(): UseDebugClauseContext | undefined {
		return this.tryGetRuleContext(0, UseDebugClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_useStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUseStatement) {
			listener.enterUseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUseStatement) {
			listener.exitUseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUseStatement) {
			return visitor.visitUseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseAfterClauseContext extends ParserRuleContext {
	public AFTER(): TerminalNode { return this.getToken(Cobol85Parser.AFTER, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(Cobol85Parser.PROCEDURE, 0); }
	public useAfterOn(): UseAfterOnContext {
		return this.getRuleContext(0, UseAfterOnContext);
	}
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EXCEPTION, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ERROR, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.GLOBAL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.STANDARD, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_useAfterClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUseAfterClause) {
			listener.enterUseAfterClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUseAfterClause) {
			listener.exitUseAfterClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUseAfterClause) {
			return visitor.visitUseAfterClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseAfterOnContext extends ParserRuleContext {
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OUTPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.I_O, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EXTEND, 0); }
	public fileName(): FileNameContext[];
	public fileName(i: number): FileNameContext;
	public fileName(i?: number): FileNameContext | FileNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileNameContext);
		} else {
			return this.getRuleContext(i, FileNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_useAfterOn; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUseAfterOn) {
			listener.enterUseAfterOn(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUseAfterOn) {
			listener.exitUseAfterOn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUseAfterOn) {
			return visitor.visitUseAfterOn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseDebugClauseContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(Cobol85Parser.DEBUGGING, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOR, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public useDebugOn(): UseDebugOnContext[];
	public useDebugOn(i: number): UseDebugOnContext;
	public useDebugOn(i?: number): UseDebugOnContext | UseDebugOnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UseDebugOnContext);
		} else {
			return this.getRuleContext(i, UseDebugOnContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_useDebugClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUseDebugClause) {
			listener.enterUseDebugClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUseDebugClause) {
			listener.exitUseDebugClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUseDebugClause) {
			return visitor.visitUseDebugClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseDebugOnContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	public PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROCEDURES, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REFERENCES, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	public procedureName(): ProcedureNameContext | undefined {
		return this.tryGetRuleContext(0, ProcedureNameContext);
	}
	public fileName(): FileNameContext | undefined {
		return this.tryGetRuleContext(0, FileNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_useDebugOn; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterUseDebugOn) {
			listener.enterUseDebugOn(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitUseDebugOn) {
			listener.exitUseDebugOn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitUseDebugOn) {
			return visitor.visitUseDebugOn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteStatementContext extends ParserRuleContext {
	public WRITE(): TerminalNode { return this.getToken(Cobol85Parser.WRITE, 0); }
	public recordName(): RecordNameContext {
		return this.getRuleContext(0, RecordNameContext);
	}
	public writeFromPhrase(): WriteFromPhraseContext | undefined {
		return this.tryGetRuleContext(0, WriteFromPhraseContext);
	}
	public writeAdvancingPhrase(): WriteAdvancingPhraseContext | undefined {
		return this.tryGetRuleContext(0, WriteAdvancingPhraseContext);
	}
	public writeAtEndOfPagePhrase(): WriteAtEndOfPagePhraseContext | undefined {
		return this.tryGetRuleContext(0, WriteAtEndOfPagePhraseContext);
	}
	public writeNotAtEndOfPagePhrase(): WriteNotAtEndOfPagePhraseContext | undefined {
		return this.tryGetRuleContext(0, WriteNotAtEndOfPagePhraseContext);
	}
	public invalidKeyPhrase(): InvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, InvalidKeyPhraseContext);
	}
	public notInvalidKeyPhrase(): NotInvalidKeyPhraseContext | undefined {
		return this.tryGetRuleContext(0, NotInvalidKeyPhraseContext);
	}
	public END_WRITE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_WRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeStatement; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteStatement) {
			listener.enterWriteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteStatement) {
			listener.exitWriteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteStatement) {
			return visitor.visitWriteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteFromPhraseContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(Cobol85Parser.FROM, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeFromPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteFromPhrase) {
			listener.enterWriteFromPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteFromPhrase) {
			listener.exitWriteFromPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteFromPhrase) {
			return visitor.visitWriteFromPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteAdvancingPhraseContext extends ParserRuleContext {
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AFTER, 0); }
	public writeAdvancingPage(): WriteAdvancingPageContext | undefined {
		return this.tryGetRuleContext(0, WriteAdvancingPageContext);
	}
	public writeAdvancingLines(): WriteAdvancingLinesContext | undefined {
		return this.tryGetRuleContext(0, WriteAdvancingLinesContext);
	}
	public writeAdvancingMnemonic(): WriteAdvancingMnemonicContext | undefined {
		return this.tryGetRuleContext(0, WriteAdvancingMnemonicContext);
	}
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeAdvancingPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteAdvancingPhrase) {
			listener.enterWriteAdvancingPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteAdvancingPhrase) {
			listener.exitWriteAdvancingPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteAdvancingPhrase) {
			return visitor.visitWriteAdvancingPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteAdvancingPageContext extends ParserRuleContext {
	public PAGE(): TerminalNode { return this.getToken(Cobol85Parser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeAdvancingPage; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteAdvancingPage) {
			listener.enterWriteAdvancingPage(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteAdvancingPage) {
			listener.exitWriteAdvancingPage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteAdvancingPage) {
			return visitor.visitWriteAdvancingPage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteAdvancingLinesContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeAdvancingLines; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteAdvancingLines) {
			listener.enterWriteAdvancingLines(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteAdvancingLines) {
			listener.exitWriteAdvancingLines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteAdvancingLines) {
			return visitor.visitWriteAdvancingLines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteAdvancingMnemonicContext extends ParserRuleContext {
	public mnemonicName(): MnemonicNameContext {
		return this.getRuleContext(0, MnemonicNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeAdvancingMnemonic; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteAdvancingMnemonic) {
			listener.enterWriteAdvancingMnemonic(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteAdvancingMnemonic) {
			listener.exitWriteAdvancingMnemonic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteAdvancingMnemonic) {
			return visitor.visitWriteAdvancingMnemonic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteAtEndOfPagePhraseContext extends ParserRuleContext {
	public END_OF_PAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_OF_PAGE, 0); }
	public EOP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EOP, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AT, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeAtEndOfPagePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteAtEndOfPagePhrase) {
			listener.enterWriteAtEndOfPagePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteAtEndOfPagePhrase) {
			listener.exitWriteAtEndOfPagePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteAtEndOfPagePhrase) {
			return visitor.visitWriteAtEndOfPagePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WriteNotAtEndOfPagePhraseContext extends ParserRuleContext {
	public NOT(): TerminalNode { return this.getToken(Cobol85Parser.NOT, 0); }
	public END_OF_PAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.END_OF_PAGE, 0); }
	public EOP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EOP, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AT, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_writeNotAtEndOfPagePhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterWriteNotAtEndOfPagePhrase) {
			listener.enterWriteNotAtEndOfPagePhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitWriteNotAtEndOfPagePhrase) {
			listener.exitWriteNotAtEndOfPagePhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitWriteNotAtEndOfPagePhrase) {
			return visitor.visitWriteNotAtEndOfPagePhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AtEndPhraseContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(Cobol85Parser.END, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AT, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_atEndPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAtEndPhrase) {
			listener.enterAtEndPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAtEndPhrase) {
			listener.exitAtEndPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAtEndPhrase) {
			return visitor.visitAtEndPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NotAtEndPhraseContext extends ParserRuleContext {
	public NOT(): TerminalNode { return this.getToken(Cobol85Parser.NOT, 0); }
	public END(): TerminalNode { return this.getToken(Cobol85Parser.END, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AT, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_notAtEndPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterNotAtEndPhrase) {
			listener.enterNotAtEndPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitNotAtEndPhrase) {
			listener.exitNotAtEndPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitNotAtEndPhrase) {
			return visitor.visitNotAtEndPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InvalidKeyPhraseContext extends ParserRuleContext {
	public INVALID(): TerminalNode { return this.getToken(Cobol85Parser.INVALID, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_invalidKeyPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInvalidKeyPhrase) {
			listener.enterInvalidKeyPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInvalidKeyPhrase) {
			listener.exitInvalidKeyPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInvalidKeyPhrase) {
			return visitor.visitInvalidKeyPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NotInvalidKeyPhraseContext extends ParserRuleContext {
	public NOT(): TerminalNode { return this.getToken(Cobol85Parser.NOT, 0); }
	public INVALID(): TerminalNode { return this.getToken(Cobol85Parser.INVALID, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEY, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_notInvalidKeyPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterNotInvalidKeyPhrase) {
			listener.enterNotInvalidKeyPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitNotInvalidKeyPhrase) {
			listener.exitNotInvalidKeyPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitNotInvalidKeyPhrase) {
			return visitor.visitNotInvalidKeyPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OnOverflowPhraseContext extends ParserRuleContext {
	public OVERFLOW(): TerminalNode { return this.getToken(Cobol85Parser.OVERFLOW, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_onOverflowPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOnOverflowPhrase) {
			listener.enterOnOverflowPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOnOverflowPhrase) {
			listener.exitOnOverflowPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOnOverflowPhrase) {
			return visitor.visitOnOverflowPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NotOnOverflowPhraseContext extends ParserRuleContext {
	public NOT(): TerminalNode { return this.getToken(Cobol85Parser.NOT, 0); }
	public OVERFLOW(): TerminalNode { return this.getToken(Cobol85Parser.OVERFLOW, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_notOnOverflowPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterNotOnOverflowPhrase) {
			listener.enterNotOnOverflowPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitNotOnOverflowPhrase) {
			listener.exitNotOnOverflowPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitNotOnOverflowPhrase) {
			return visitor.visitNotOnOverflowPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OnSizeErrorPhraseContext extends ParserRuleContext {
	public SIZE(): TerminalNode { return this.getToken(Cobol85Parser.SIZE, 0); }
	public ERROR(): TerminalNode { return this.getToken(Cobol85Parser.ERROR, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_onSizeErrorPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOnSizeErrorPhrase) {
			listener.enterOnSizeErrorPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOnSizeErrorPhrase) {
			listener.exitOnSizeErrorPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOnSizeErrorPhrase) {
			return visitor.visitOnSizeErrorPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NotOnSizeErrorPhraseContext extends ParserRuleContext {
	public NOT(): TerminalNode { return this.getToken(Cobol85Parser.NOT, 0); }
	public SIZE(): TerminalNode { return this.getToken(Cobol85Parser.SIZE, 0); }
	public ERROR(): TerminalNode { return this.getToken(Cobol85Parser.ERROR, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_notOnSizeErrorPhrase; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterNotOnSizeErrorPhrase) {
			listener.enterNotOnSizeErrorPhrase(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitNotOnSizeErrorPhrase) {
			listener.exitNotOnSizeErrorPhrase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitNotOnSizeErrorPhrase) {
			return visitor.visitNotOnSizeErrorPhrase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OnExceptionClauseContext extends ParserRuleContext {
	public EXCEPTION(): TerminalNode { return this.getToken(Cobol85Parser.EXCEPTION, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_onExceptionClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterOnExceptionClause) {
			listener.enterOnExceptionClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitOnExceptionClause) {
			listener.exitOnExceptionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitOnExceptionClause) {
			return visitor.visitOnExceptionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NotOnExceptionClauseContext extends ParserRuleContext {
	public NOT(): TerminalNode { return this.getToken(Cobol85Parser.NOT, 0); }
	public EXCEPTION(): TerminalNode { return this.getToken(Cobol85Parser.EXCEPTION, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ON, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_notOnExceptionClause; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterNotOnExceptionClause) {
			listener.enterNotOnExceptionClause(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitNotOnExceptionClause) {
			listener.exitNotOnExceptionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitNotOnExceptionClause) {
			return visitor.visitNotOnExceptionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticExpressionContext extends ParserRuleContext {
	public multDivs(): MultDivsContext {
		return this.getRuleContext(0, MultDivsContext);
	}
	public plusMinus(): PlusMinusContext[];
	public plusMinus(i: number): PlusMinusContext;
	public plusMinus(i?: number): PlusMinusContext | PlusMinusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PlusMinusContext);
		} else {
			return this.getRuleContext(i, PlusMinusContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_arithmeticExpression; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterArithmeticExpression) {
			listener.enterArithmeticExpression(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitArithmeticExpression) {
			listener.exitArithmeticExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitArithmeticExpression) {
			return visitor.visitArithmeticExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PlusMinusContext extends ParserRuleContext {
	public multDivs(): MultDivsContext {
		return this.getRuleContext(0, MultDivsContext);
	}
	public PLUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); }
	public MINUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_plusMinus; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPlusMinus) {
			listener.enterPlusMinus(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPlusMinus) {
			listener.exitPlusMinus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPlusMinus) {
			return visitor.visitPlusMinus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultDivsContext extends ParserRuleContext {
	public powers(): PowersContext {
		return this.getRuleContext(0, PowersContext);
	}
	public multDiv(): MultDivContext[];
	public multDiv(i: number): MultDivContext;
	public multDiv(i?: number): MultDivContext | MultDivContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MultDivContext);
		} else {
			return this.getRuleContext(i, MultDivContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multDivs; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultDivs) {
			listener.enterMultDivs(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultDivs) {
			listener.exitMultDivs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultDivs) {
			return visitor.visitMultDivs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultDivContext extends ParserRuleContext {
	public powers(): PowersContext {
		return this.getRuleContext(0, PowersContext);
	}
	public ASTERISKCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASTERISKCHAR, 0); }
	public SLASHCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SLASHCHAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_multDiv; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMultDiv) {
			listener.enterMultDiv(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMultDiv) {
			listener.exitMultDiv(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMultDiv) {
			return visitor.visitMultDiv(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PowersContext extends ParserRuleContext {
	public basis(): BasisContext {
		return this.getRuleContext(0, BasisContext);
	}
	public power(): PowerContext[];
	public power(i: number): PowerContext;
	public power(i?: number): PowerContext | PowerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PowerContext);
		} else {
			return this.getRuleContext(i, PowerContext);
		}
	}
	public PLUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PLUSCHAR, 0); }
	public MINUSCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MINUSCHAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_powers; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPowers) {
			listener.enterPowers(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPowers) {
			listener.exitPowers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPowers) {
			return visitor.visitPowers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PowerContext extends ParserRuleContext {
	public DOUBLEASTERISKCHAR(): TerminalNode { return this.getToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0); }
	public basis(): BasisContext {
		return this.getRuleContext(0, BasisContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_power; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterPower) {
			listener.enterPower(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitPower) {
			listener.exitPower(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitPower) {
			return visitor.visitPower(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BasisContext extends ParserRuleContext {
	public LPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); }
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	public RPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_basis; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterBasis) {
			listener.enterBasis(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitBasis) {
			listener.exitBasis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitBasis) {
			return visitor.visitBasis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConditionContext extends ParserRuleContext {
	public combinableCondition(): CombinableConditionContext {
		return this.getRuleContext(0, CombinableConditionContext);
	}
	public andOrCondition(): AndOrConditionContext[];
	public andOrCondition(i: number): AndOrConditionContext;
	public andOrCondition(i?: number): AndOrConditionContext | AndOrConditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AndOrConditionContext);
		} else {
			return this.getRuleContext(i, AndOrConditionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_condition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCondition) {
			listener.enterCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCondition) {
			listener.exitCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCondition) {
			return visitor.visitCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AndOrConditionContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OR, 0); }
	public combinableCondition(): CombinableConditionContext | undefined {
		return this.tryGetRuleContext(0, CombinableConditionContext);
	}
	public abbreviation(): AbbreviationContext[];
	public abbreviation(i: number): AbbreviationContext;
	public abbreviation(i?: number): AbbreviationContext | AbbreviationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AbbreviationContext);
		} else {
			return this.getRuleContext(i, AbbreviationContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_andOrCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAndOrCondition) {
			listener.enterAndOrCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAndOrCondition) {
			listener.exitAndOrCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAndOrCondition) {
			return visitor.visitAndOrCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CombinableConditionContext extends ParserRuleContext {
	public simpleCondition(): SimpleConditionContext {
		return this.getRuleContext(0, SimpleConditionContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_combinableCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCombinableCondition) {
			listener.enterCombinableCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCombinableCondition) {
			listener.exitCombinableCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCombinableCondition) {
			return visitor.visitCombinableCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleConditionContext extends ParserRuleContext {
	public LPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); }
	public condition(): ConditionContext | undefined {
		return this.tryGetRuleContext(0, ConditionContext);
	}
	public RPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); }
	public relationCondition(): RelationConditionContext | undefined {
		return this.tryGetRuleContext(0, RelationConditionContext);
	}
	public classCondition(): ClassConditionContext | undefined {
		return this.tryGetRuleContext(0, ClassConditionContext);
	}
	public conditionNameReference(): ConditionNameReferenceContext | undefined {
		return this.tryGetRuleContext(0, ConditionNameReferenceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_simpleCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSimpleCondition) {
			listener.enterSimpleCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSimpleCondition) {
			listener.exitSimpleCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSimpleCondition) {
			return visitor.visitSimpleCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClassConditionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERIC, 0); }
	public ALPHABETIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHABETIC, 0); }
	public ALPHABETIC_LOWER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHABETIC_LOWER, 0); }
	public ALPHABETIC_UPPER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALPHABETIC_UPPER, 0); }
	public DBCS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DBCS, 0); }
	public KANJI(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KANJI, 0); }
	public className(): ClassNameContext | undefined {
		return this.tryGetRuleContext(0, ClassNameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_classCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClassCondition) {
			listener.enterClassCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClassCondition) {
			listener.exitClassCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClassCondition) {
			return visitor.visitClassCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConditionNameReferenceContext extends ParserRuleContext {
	public conditionName(): ConditionNameContext {
		return this.getRuleContext(0, ConditionNameContext);
	}
	public inData(): InDataContext[];
	public inData(i: number): InDataContext;
	public inData(i?: number): InDataContext | InDataContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InDataContext);
		} else {
			return this.getRuleContext(i, InDataContext);
		}
	}
	public inFile(): InFileContext | undefined {
		return this.tryGetRuleContext(0, InFileContext);
	}
	public conditionNameSubscriptReference(): ConditionNameSubscriptReferenceContext[];
	public conditionNameSubscriptReference(i: number): ConditionNameSubscriptReferenceContext;
	public conditionNameSubscriptReference(i?: number): ConditionNameSubscriptReferenceContext | ConditionNameSubscriptReferenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConditionNameSubscriptReferenceContext);
		} else {
			return this.getRuleContext(i, ConditionNameSubscriptReferenceContext);
		}
	}
	public inMnemonic(): InMnemonicContext[];
	public inMnemonic(i: number): InMnemonicContext;
	public inMnemonic(i?: number): InMnemonicContext | InMnemonicContext[] {
		if (i === undefined) {
			return this.getRuleContexts(InMnemonicContext);
		} else {
			return this.getRuleContext(i, InMnemonicContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_conditionNameReference; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterConditionNameReference) {
			listener.enterConditionNameReference(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitConditionNameReference) {
			listener.exitConditionNameReference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitConditionNameReference) {
			return visitor.visitConditionNameReference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConditionNameSubscriptReferenceContext extends ParserRuleContext {
	public LPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.LPARENCHAR, 0); }
	public subscript(): SubscriptContext[];
	public subscript(i: number): SubscriptContext;
	public subscript(i?: number): SubscriptContext | SubscriptContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubscriptContext);
		} else {
			return this.getRuleContext(i, SubscriptContext);
		}
	}
	public RPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.RPARENCHAR, 0); }
	public COMMACHAR(): TerminalNode[];
	public COMMACHAR(i: number): TerminalNode;
	public COMMACHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.COMMACHAR);
		} else {
			return this.getToken(Cobol85Parser.COMMACHAR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_conditionNameSubscriptReference; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterConditionNameSubscriptReference) {
			listener.enterConditionNameSubscriptReference(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitConditionNameSubscriptReference) {
			listener.exitConditionNameSubscriptReference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitConditionNameSubscriptReference) {
			return visitor.visitConditionNameSubscriptReference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationConditionContext extends ParserRuleContext {
	public relationSignCondition(): RelationSignConditionContext | undefined {
		return this.tryGetRuleContext(0, RelationSignConditionContext);
	}
	public relationArithmeticComparison(): RelationArithmeticComparisonContext | undefined {
		return this.tryGetRuleContext(0, RelationArithmeticComparisonContext);
	}
	public relationCombinedComparison(): RelationCombinedComparisonContext | undefined {
		return this.tryGetRuleContext(0, RelationCombinedComparisonContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_relationCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRelationCondition) {
			listener.enterRelationCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRelationCondition) {
			listener.exitRelationCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRelationCondition) {
			return visitor.visitRelationCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationSignConditionContext extends ParserRuleContext {
	public arithmeticExpression(): ArithmeticExpressionContext {
		return this.getRuleContext(0, ArithmeticExpressionContext);
	}
	public POSITIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.POSITIVE, 0); }
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NEGATIVE, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZERO, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_relationSignCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRelationSignCondition) {
			listener.enterRelationSignCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRelationSignCondition) {
			listener.exitRelationSignCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRelationSignCondition) {
			return visitor.visitRelationSignCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationArithmeticComparisonContext extends ParserRuleContext {
	public arithmeticExpression(): ArithmeticExpressionContext[];
	public arithmeticExpression(i: number): ArithmeticExpressionContext;
	public arithmeticExpression(i?: number): ArithmeticExpressionContext | ArithmeticExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArithmeticExpressionContext);
		} else {
			return this.getRuleContext(i, ArithmeticExpressionContext);
		}
	}
	public relationalOperator(): RelationalOperatorContext {
		return this.getRuleContext(0, RelationalOperatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_relationArithmeticComparison; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRelationArithmeticComparison) {
			listener.enterRelationArithmeticComparison(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRelationArithmeticComparison) {
			listener.exitRelationArithmeticComparison(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRelationArithmeticComparison) {
			return visitor.visitRelationArithmeticComparison(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationCombinedComparisonContext extends ParserRuleContext {
	public arithmeticExpression(): ArithmeticExpressionContext {
		return this.getRuleContext(0, ArithmeticExpressionContext);
	}
	public relationalOperator(): RelationalOperatorContext {
		return this.getRuleContext(0, RelationalOperatorContext);
	}
	public LPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.LPARENCHAR, 0); }
	public relationCombinedCondition(): RelationCombinedConditionContext {
		return this.getRuleContext(0, RelationCombinedConditionContext);
	}
	public RPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.RPARENCHAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_relationCombinedComparison; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRelationCombinedComparison) {
			listener.enterRelationCombinedComparison(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRelationCombinedComparison) {
			listener.exitRelationCombinedComparison(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRelationCombinedComparison) {
			return visitor.visitRelationCombinedComparison(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationCombinedConditionContext extends ParserRuleContext {
	public arithmeticExpression(): ArithmeticExpressionContext[];
	public arithmeticExpression(i: number): ArithmeticExpressionContext;
	public arithmeticExpression(i?: number): ArithmeticExpressionContext | ArithmeticExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArithmeticExpressionContext);
		} else {
			return this.getRuleContext(i, ArithmeticExpressionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.AND);
		} else {
			return this.getToken(Cobol85Parser.AND, i);
		}
	}
	public OR(): TerminalNode[];
	public OR(i: number): TerminalNode;
	public OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.OR);
		} else {
			return this.getToken(Cobol85Parser.OR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_relationCombinedCondition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRelationCombinedCondition) {
			listener.enterRelationCombinedCondition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRelationCombinedCondition) {
			listener.exitRelationCombinedCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRelationCombinedCondition) {
			return visitor.visitRelationCombinedCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationalOperatorContext extends ParserRuleContext {
	public NOTEQUALCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOTEQUALCHAR, 0); }
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.GREATER, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OR, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EQUAL, 0); }
	public MORETHANOREQUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MORETHANOREQUAL, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LESS, 0); }
	public LESSTHANOREQUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LESSTHANOREQUAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ARE, 0); }
	public MORETHANCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MORETHANCHAR, 0); }
	public LESSTHANCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LESSTHANCHAR, 0); }
	public EQUALCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EQUALCHAR, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOT, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THAN, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_relationalOperator; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRelationalOperator) {
			listener.enterRelationalOperator(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRelationalOperator) {
			listener.exitRelationalOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRelationalOperator) {
			return visitor.visitRelationalOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AbbreviationContext extends ParserRuleContext {
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	public LPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LPARENCHAR, 0); }
	public abbreviation(): AbbreviationContext | undefined {
		return this.tryGetRuleContext(0, AbbreviationContext);
	}
	public RPARENCHAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RPARENCHAR, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NOT, 0); }
	public relationalOperator(): RelationalOperatorContext | undefined {
		return this.tryGetRuleContext(0, RelationalOperatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_abbreviation; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAbbreviation) {
			listener.enterAbbreviation(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAbbreviation) {
			listener.exitAbbreviation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAbbreviation) {
			return visitor.visitAbbreviation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	public tableCall(): TableCallContext | undefined {
		return this.tryGetRuleContext(0, TableCallContext);
	}
	public functionCall(): FunctionCallContext | undefined {
		return this.tryGetRuleContext(0, FunctionCallContext);
	}
	public specialRegister(): SpecialRegisterContext | undefined {
		return this.tryGetRuleContext(0, SpecialRegisterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_identifier; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableCallContext extends ParserRuleContext {
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	public LPARENCHAR(): TerminalNode[];
	public LPARENCHAR(i: number): TerminalNode;
	public LPARENCHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.LPARENCHAR);
		} else {
			return this.getToken(Cobol85Parser.LPARENCHAR, i);
		}
	}
	public subscript(): SubscriptContext[];
	public subscript(i: number): SubscriptContext;
	public subscript(i?: number): SubscriptContext | SubscriptContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubscriptContext);
		} else {
			return this.getRuleContext(i, SubscriptContext);
		}
	}
	public RPARENCHAR(): TerminalNode[];
	public RPARENCHAR(i: number): TerminalNode;
	public RPARENCHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.RPARENCHAR);
		} else {
			return this.getToken(Cobol85Parser.RPARENCHAR, i);
		}
	}
	public referenceModifier(): ReferenceModifierContext | undefined {
		return this.tryGetRuleContext(0, ReferenceModifierContext);
	}
	public COMMACHAR(): TerminalNode[];
	public COMMACHAR(i: number): TerminalNode;
	public COMMACHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.COMMACHAR);
		} else {
			return this.getToken(Cobol85Parser.COMMACHAR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_tableCall; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterTableCall) {
			listener.enterTableCall(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitTableCall) {
			listener.exitTableCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitTableCall) {
			return visitor.visitTableCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode { return this.getToken(Cobol85Parser.FUNCTION, 0); }
	public functionName(): FunctionNameContext {
		return this.getRuleContext(0, FunctionNameContext);
	}
	public LPARENCHAR(): TerminalNode[];
	public LPARENCHAR(i: number): TerminalNode;
	public LPARENCHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.LPARENCHAR);
		} else {
			return this.getToken(Cobol85Parser.LPARENCHAR, i);
		}
	}
	public argument(): ArgumentContext[];
	public argument(i: number): ArgumentContext;
	public argument(i?: number): ArgumentContext | ArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArgumentContext);
		} else {
			return this.getRuleContext(i, ArgumentContext);
		}
	}
	public RPARENCHAR(): TerminalNode[];
	public RPARENCHAR(i: number): TerminalNode;
	public RPARENCHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.RPARENCHAR);
		} else {
			return this.getToken(Cobol85Parser.RPARENCHAR, i);
		}
	}
	public referenceModifier(): ReferenceModifierContext | undefined {
		return this.tryGetRuleContext(0, ReferenceModifierContext);
	}
	public COMMACHAR(): TerminalNode[];
	public COMMACHAR(i: number): TerminalNode;
	public COMMACHAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.COMMACHAR);
		} else {
			return this.getToken(Cobol85Parser.COMMACHAR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_functionCall; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFunctionCall) {
			listener.enterFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFunctionCall) {
			listener.exitFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFunctionCall) {
			return visitor.visitFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReferenceModifierContext extends ParserRuleContext {
	public LPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.LPARENCHAR, 0); }
	public characterPosition(): CharacterPositionContext {
		return this.getRuleContext(0, CharacterPositionContext);
	}
	public COLONCHAR(): TerminalNode { return this.getToken(Cobol85Parser.COLONCHAR, 0); }
	public RPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.RPARENCHAR, 0); }
	public length(): LengthContext | undefined {
		return this.tryGetRuleContext(0, LengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_referenceModifier; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReferenceModifier) {
			listener.enterReferenceModifier(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReferenceModifier) {
			listener.exitReferenceModifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReferenceModifier) {
			return visitor.visitReferenceModifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharacterPositionContext extends ParserRuleContext {
	public arithmeticExpression(): ArithmeticExpressionContext {
		return this.getRuleContext(0, ArithmeticExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_characterPosition; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCharacterPosition) {
			listener.enterCharacterPosition(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCharacterPosition) {
			listener.exitCharacterPosition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCharacterPosition) {
			return visitor.visitCharacterPosition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthContext extends ParserRuleContext {
	public arithmeticExpression(): ArithmeticExpressionContext {
		return this.getRuleContext(0, ArithmeticExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_length; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLength) {
			listener.enterLength(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLength) {
			listener.exitLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLength) {
			return visitor.visitLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubscriptContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	public indexName(): IndexNameContext | undefined {
		return this.tryGetRuleContext(0, IndexNameContext);
	}
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_subscript; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSubscript) {
			listener.enterSubscript(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSubscript) {
			listener.exitSubscript(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSubscript) {
			return visitor.visitSubscript(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentContext extends ParserRuleContext {
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public qualifiedDataName(): QualifiedDataNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	public indexName(): IndexNameContext | undefined {
		return this.tryGetRuleContext(0, IndexNameContext);
	}
	public arithmeticExpression(): ArithmeticExpressionContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_argument; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterArgument) {
			listener.enterArgument(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitArgument) {
			listener.exitArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitArgument) {
			return visitor.visitArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedDataNameContext extends ParserRuleContext {
	public qualifiedDataNameFormat1(): QualifiedDataNameFormat1Context | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameFormat1Context);
	}
	public qualifiedDataNameFormat2(): QualifiedDataNameFormat2Context | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameFormat2Context);
	}
	public qualifiedDataNameFormat3(): QualifiedDataNameFormat3Context | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameFormat3Context);
	}
	public qualifiedDataNameFormat4(): QualifiedDataNameFormat4Context | undefined {
		return this.tryGetRuleContext(0, QualifiedDataNameFormat4Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_qualifiedDataName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterQualifiedDataName) {
			listener.enterQualifiedDataName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitQualifiedDataName) {
			listener.exitQualifiedDataName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitQualifiedDataName) {
			return visitor.visitQualifiedDataName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedDataNameFormat1Context extends ParserRuleContext {
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	public conditionName(): ConditionNameContext | undefined {
		return this.tryGetRuleContext(0, ConditionNameContext);
	}
	public inFile(): InFileContext | undefined {
		return this.tryGetRuleContext(0, InFileContext);
	}
	public qualifiedInData(): QualifiedInDataContext[];
	public qualifiedInData(i: number): QualifiedInDataContext;
	public qualifiedInData(i?: number): QualifiedInDataContext | QualifiedInDataContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedInDataContext);
		} else {
			return this.getRuleContext(i, QualifiedInDataContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_qualifiedDataNameFormat1; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterQualifiedDataNameFormat1) {
			listener.enterQualifiedDataNameFormat1(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitQualifiedDataNameFormat1) {
			listener.exitQualifiedDataNameFormat1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitQualifiedDataNameFormat1) {
			return visitor.visitQualifiedDataNameFormat1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedDataNameFormat2Context extends ParserRuleContext {
	public paragraphName(): ParagraphNameContext {
		return this.getRuleContext(0, ParagraphNameContext);
	}
	public inSection(): InSectionContext {
		return this.getRuleContext(0, InSectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_qualifiedDataNameFormat2; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterQualifiedDataNameFormat2) {
			listener.enterQualifiedDataNameFormat2(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitQualifiedDataNameFormat2) {
			listener.exitQualifiedDataNameFormat2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitQualifiedDataNameFormat2) {
			return visitor.visitQualifiedDataNameFormat2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedDataNameFormat3Context extends ParserRuleContext {
	public textName(): TextNameContext {
		return this.getRuleContext(0, TextNameContext);
	}
	public inLibrary(): InLibraryContext {
		return this.getRuleContext(0, InLibraryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_qualifiedDataNameFormat3; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterQualifiedDataNameFormat3) {
			listener.enterQualifiedDataNameFormat3(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitQualifiedDataNameFormat3) {
			listener.exitQualifiedDataNameFormat3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitQualifiedDataNameFormat3) {
			return visitor.visitQualifiedDataNameFormat3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedDataNameFormat4Context extends ParserRuleContext {
	public LINAGE_COUNTER(): TerminalNode { return this.getToken(Cobol85Parser.LINAGE_COUNTER, 0); }
	public inFile(): InFileContext {
		return this.getRuleContext(0, InFileContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_qualifiedDataNameFormat4; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterQualifiedDataNameFormat4) {
			listener.enterQualifiedDataNameFormat4(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitQualifiedDataNameFormat4) {
			listener.exitQualifiedDataNameFormat4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitQualifiedDataNameFormat4) {
			return visitor.visitQualifiedDataNameFormat4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedInDataContext extends ParserRuleContext {
	public inData(): InDataContext | undefined {
		return this.tryGetRuleContext(0, InDataContext);
	}
	public inTable(): InTableContext | undefined {
		return this.tryGetRuleContext(0, InTableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_qualifiedInData; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterQualifiedInData) {
			listener.enterQualifiedInData(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitQualifiedInData) {
			listener.exitQualifiedInData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitQualifiedInData) {
			return visitor.visitQualifiedInData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InDataContext extends ParserRuleContext {
	public dataName(): DataNameContext {
		return this.getRuleContext(0, DataNameContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inData; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInData) {
			listener.enterInData(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInData) {
			listener.exitInData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInData) {
			return visitor.visitInData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InFileContext extends ParserRuleContext {
	public fileName(): FileNameContext {
		return this.getRuleContext(0, FileNameContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inFile; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInFile) {
			listener.enterInFile(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInFile) {
			listener.exitInFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInFile) {
			return visitor.visitInFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InMnemonicContext extends ParserRuleContext {
	public mnemonicName(): MnemonicNameContext {
		return this.getRuleContext(0, MnemonicNameContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inMnemonic; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInMnemonic) {
			listener.enterInMnemonic(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInMnemonic) {
			listener.exitInMnemonic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInMnemonic) {
			return visitor.visitInMnemonic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InSectionContext extends ParserRuleContext {
	public sectionName(): SectionNameContext {
		return this.getRuleContext(0, SectionNameContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inSection; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInSection) {
			listener.enterInSection(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInSection) {
			listener.exitInSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInSection) {
			return visitor.visitInSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InLibraryContext extends ParserRuleContext {
	public libraryName(): LibraryNameContext {
		return this.getRuleContext(0, LibraryNameContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inLibrary; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInLibrary) {
			listener.enterInLibrary(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInLibrary) {
			listener.exitInLibrary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInLibrary) {
			return visitor.visitInLibrary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InTableContext extends ParserRuleContext {
	public tableCall(): TableCallContext {
		return this.getRuleContext(0, TableCallContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IN, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_inTable; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterInTable) {
			listener.enterInTable(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitInTable) {
			listener.exitInTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitInTable) {
			return visitor.visitInTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_alphabetName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAlphabetName) {
			listener.enterAlphabetName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAlphabetName) {
			listener.exitAlphabetName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAlphabetName) {
			return visitor.visitAlphabetName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AssignmentNameContext extends ParserRuleContext {
	public systemName(): SystemNameContext {
		return this.getRuleContext(0, SystemNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_assignmentName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterAssignmentName) {
			listener.enterAssignmentName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitAssignmentName) {
			listener.exitAssignmentName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitAssignmentName) {
			return visitor.visitAssignmentName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BasisNameContext extends ParserRuleContext {
	public programName(): ProgramNameContext {
		return this.getRuleContext(0, ProgramNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_basisName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterBasisName) {
			listener.enterBasisName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitBasisName) {
			listener.exitBasisName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitBasisName) {
			return visitor.visitBasisName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CdNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_cdName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCdName) {
			listener.enterCdName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCdName) {
			listener.exitCdName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCdName) {
			return visitor.visitCdName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClassNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_className; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterClassName) {
			listener.enterClassName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitClassName) {
			listener.exitClassName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitClassName) {
			return visitor.visitClassName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComputerNameContext extends ParserRuleContext {
	public systemName(): SystemNameContext {
		return this.getRuleContext(0, SystemNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_computerName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterComputerName) {
			listener.enterComputerName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitComputerName) {
			listener.exitComputerName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitComputerName) {
			return visitor.visitComputerName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConditionNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_conditionName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterConditionName) {
			listener.enterConditionName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitConditionName) {
			listener.exitConditionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitConditionName) {
			return visitor.visitConditionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataName) {
			listener.enterDataName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataName) {
			listener.exitDataName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataName) {
			return visitor.visitDataName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataDescNameContext extends ParserRuleContext {
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FILLER, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CURSOR, 0); }
	public dataName(): DataNameContext | undefined {
		return this.tryGetRuleContext(0, DataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_dataDescName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterDataDescName) {
			listener.enterDataDescName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitDataDescName) {
			listener.exitDataDescName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitDataDescName) {
			return visitor.visitDataDescName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnvironmentNameContext extends ParserRuleContext {
	public systemName(): SystemNameContext {
		return this.getRuleContext(0, SystemNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_environmentName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterEnvironmentName) {
			listener.enterEnvironmentName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitEnvironmentName) {
			listener.exitEnvironmentName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitEnvironmentName) {
			return visitor.visitEnvironmentName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_fileName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFileName) {
			listener.enterFileName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFileName) {
			listener.exitFileName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFileName) {
			return visitor.visitFileName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionNameContext extends ParserRuleContext {
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INTEGER, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LENGTH, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RANDOM, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SUM, 0); }
	public WHEN_COMPILED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WHEN_COMPILED, 0); }
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_functionName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFunctionName) {
			listener.enterFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFunctionName) {
			listener.exitFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFunctionName) {
			return visitor.visitFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_indexName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIndexName) {
			listener.enterIndexName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIndexName) {
			listener.exitIndexName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIndexName) {
			return visitor.visitIndexName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LanguageNameContext extends ParserRuleContext {
	public systemName(): SystemNameContext {
		return this.getRuleContext(0, SystemNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_languageName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLanguageName) {
			listener.enterLanguageName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLanguageName) {
			listener.exitLanguageName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLanguageName) {
			return visitor.visitLanguageName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LibraryNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_libraryName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLibraryName) {
			listener.enterLibraryName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLibraryName) {
			listener.exitLibraryName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLibraryName) {
			return visitor.visitLibraryName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LocalNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_localName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLocalName) {
			listener.enterLocalName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLocalName) {
			listener.exitLocalName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLocalName) {
			return visitor.visitLocalName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MnemonicNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_mnemonicName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterMnemonicName) {
			listener.enterMnemonicName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitMnemonicName) {
			listener.exitMnemonicName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitMnemonicName) {
			return visitor.visitMnemonicName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_paragraphName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterParagraphName) {
			listener.enterParagraphName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitParagraphName) {
			listener.exitParagraphName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitParagraphName) {
			return visitor.visitParagraphName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureNameContext extends ParserRuleContext {
	public paragraphName(): ParagraphNameContext | undefined {
		return this.tryGetRuleContext(0, ParagraphNameContext);
	}
	public inSection(): InSectionContext | undefined {
		return this.tryGetRuleContext(0, InSectionContext);
	}
	public sectionName(): SectionNameContext | undefined {
		return this.tryGetRuleContext(0, SectionNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_procedureName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProcedureName) {
			listener.enterProcedureName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProcedureName) {
			listener.exitProcedureName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProcedureName) {
			return visitor.visitProcedureName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramNameContext extends ParserRuleContext {
	public NONNUMERICLITERAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NONNUMERICLITERAL, 0); }
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_programName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterProgramName) {
			listener.enterProgramName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitProgramName) {
			listener.exitProgramName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitProgramName) {
			return visitor.visitProgramName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordNameContext extends ParserRuleContext {
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_recordName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRecordName) {
			listener.enterRecordName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRecordName) {
			listener.exitRecordName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRecordName) {
			return visitor.visitRecordName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReportNameContext extends ParserRuleContext {
	public qualifiedDataName(): QualifiedDataNameContext {
		return this.getRuleContext(0, QualifiedDataNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_reportName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterReportName) {
			listener.enterReportName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitReportName) {
			listener.exitReportName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitReportName) {
			return visitor.visitReportName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoutineNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_routineName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterRoutineName) {
			listener.enterRoutineName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitRoutineName) {
			listener.exitRoutineName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitRoutineName) {
			return visitor.visitRoutineName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScreenNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_screenName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterScreenName) {
			listener.enterScreenName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitScreenName) {
			listener.exitScreenName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitScreenName) {
			return visitor.visitScreenName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SectionNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_sectionName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSectionName) {
			listener.enterSectionName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSectionName) {
			listener.exitSectionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSectionName) {
			return visitor.visitSectionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SystemNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_systemName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSystemName) {
			listener.enterSystemName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSystemName) {
			listener.exitSystemName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSystemName) {
			return visitor.visitSystemName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicCharacterContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_symbolicCharacter; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSymbolicCharacter) {
			listener.enterSymbolicCharacter(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSymbolicCharacter) {
			listener.exitSymbolicCharacter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSymbolicCharacter) {
			return visitor.visitSymbolicCharacter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TextNameContext extends ParserRuleContext {
	public cobolWord(): CobolWordContext {
		return this.getRuleContext(0, CobolWordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_textName; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterTextName) {
			listener.enterTextName(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitTextName) {
			listener.exitTextName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitTextName) {
			return visitor.visitTextName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CobolWordContext extends ParserRuleContext {
	public IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IDENTIFIER, 0); }
	public COBOL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COBOL, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROGRAM, 0); }
	public ABORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ABORT, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AS, 0); }
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASCII, 0); }
	public ASSOCIATED_DATA(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASSOCIATED_DATA, 0); }
	public ASSOCIATED_DATA_LENGTH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0); }
	public ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ATTRIBUTE, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AUTO, 0); }
	public AUTO_SKIP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.AUTO_SKIP, 0); }
	public BACKGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOR, 0); }
	public BACKGROUND_COLOUR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BACKGROUND_COLOUR, 0); }
	public BEEP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BEEP, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BELL, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BINARY, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BIT, 0); }
	public BLINK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BLINK, 0); }
	public BOUNDS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.BOUNDS, 0); }
	public CAPABLE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CAPABLE, 0); }
	public CCSVERSION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CCSVERSION, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHANGED, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CHANNEL, 0); }
	public CLOSE_DISPOSITION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CLOSE_DISPOSITION, 0); }
	public COMMITMENT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.COMMITMENT, 0); }
	public CONTROL_POINT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONTROL_POINT, 0); }
	public CONVENTION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CONVENTION, 0); }
	public CRUNCH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CRUNCH, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.CURSOR, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEFAULT, 0); }
	public DEFAULT_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEFAULT_DISPLAY, 0); }
	public DEFINITION(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEFINITION, 0); }
	public DFHRESP(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DFHRESP, 0); }
	public DFHVALUE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DFHVALUE, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DISK, 0); }
	public DONTCARE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DONTCARE, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DOUBLE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EBCDIC, 0); }
	public EMPTY_CHECK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EMPTY_CHECK, 0); }
	public ENTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ENTER, 0); }
	public ENTRY_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ENTRY_PROCEDURE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EOS, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ERASE, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ESCAPE, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EVENT, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EXCLUSIVE, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EXPORT, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.EXTENDED, 0); }
	public FOREGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOR, 0); }
	public FOREGROUND_COLOUR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FOREGROUND_COLOUR, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FULL, 0); }
	public FUNCTIONNAME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FUNCTIONNAME, 0); }
	public FUNCTION_POINTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FUNCTION_POINTER, 0); }
	public GRID(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.GRID, 0); }
	public HIGHLIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.HIGHLIGHT, 0); }
	public IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IMPLICIT, 0); }
	public IMPORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.IMPORT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INTEGER, 0); }
	public KEPT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEPT, 0); }
	public KEYBOARD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.KEYBOARD, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LANGUAGE, 0); }
	public LB(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LB, 0); }
	public LD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LD, 0); }
	public LEFTLINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEFTLINE, 0); }
	public LENGTH_CHECK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LENGTH_CHECK, 0); }
	public LIBACCESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIBACCESS, 0); }
	public LIBPARAMETER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIBPARAMETER, 0); }
	public LIBRARY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIBRARY, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LIST, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOCAL, 0); }
	public LONG_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LONG_DATE, 0); }
	public LONG_TIME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LONG_TIME, 0); }
	public LOWER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOWER, 0); }
	public LOWLIGHT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOWLIGHT, 0); }
	public MMDDYYYY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.MMDDYYYY, 0); }
	public NAMED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NAMED, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIONAL, 0); }
	public NATIONAL_EDITED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NATIONAL_EDITED, 0); }
	public NETWORK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NETWORK, 0); }
	public NO_ECHO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NO_ECHO, 0); }
	public NUMERIC_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERIC_DATE, 0); }
	public NUMERIC_TIME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERIC_TIME, 0); }
	public ODT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ODT, 0); }
	public ORDERLY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ORDERLY, 0); }
	public OVERLINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OVERLINE, 0); }
	public OWN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OWN, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PASSWORD, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PORT, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PRINTER, 0); }
	public PRIVATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PRIVATE, 0); }
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROCESS, 0); }
	public PROMPT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PROMPT, 0); }
	public READER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.READER, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REAL, 0); }
	public RECEIVED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECEIVED, 0); }
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RECURSIVE, 0); }
	public REF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REF, 0); }
	public REMOTE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REMOTE, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REMOVE, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REQUIRED, 0); }
	public REVERSE_VIDEO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.REVERSE_VIDEO, 0); }
	public SAVE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SAVE, 0); }
	public SECURE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SECURE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHARED, 0); }
	public SHAREDBYALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHAREDBYALL, 0); }
	public SHAREDBYRUNUNIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHAREDBYRUNUNIT, 0); }
	public SHARING(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHARING, 0); }
	public SHORT_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHORT_DATE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SYMBOL, 0); }
	public TASK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TASK, 0); }
	public THREAD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THREAD, 0); }
	public THREAD_LOCAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.THREAD_LOCAL, 0); }
	public TIMER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TIMER, 0); }
	public TODAYS_DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TODAYS_DATE, 0); }
	public TODAYS_NAME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TODAYS_NAME, 0); }
	public TRUNCATED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRUNCATED, 0); }
	public TYPEDEF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TYPEDEF, 0); }
	public UNDERLINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.UNDERLINE, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.VIRTUAL, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WAIT, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.YEAR, 0); }
	public YYYYMMDD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.YYYYMMDD, 0); }
	public YYYYDDD(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.YYYYDDD, 0); }
	public ZERO_FILL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZERO_FILL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_cobolWord; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCobolWord) {
			listener.enterCobolWord(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCobolWord) {
			listener.exitCobolWord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCobolWord) {
			return visitor.visitCobolWord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LiteralContext extends ParserRuleContext {
	public NONNUMERICLITERAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NONNUMERICLITERAL, 0); }
	public figurativeConstant(): FigurativeConstantContext | undefined {
		return this.tryGetRuleContext(0, FigurativeConstantContext);
	}
	public numericLiteral(): NumericLiteralContext | undefined {
		return this.tryGetRuleContext(0, NumericLiteralContext);
	}
	public booleanLiteral(): BooleanLiteralContext | undefined {
		return this.tryGetRuleContext(0, BooleanLiteralContext);
	}
	public cicsDfhRespLiteral(): CicsDfhRespLiteralContext | undefined {
		return this.tryGetRuleContext(0, CicsDfhRespLiteralContext);
	}
	public cicsDfhValueLiteral(): CicsDfhValueLiteralContext | undefined {
		return this.tryGetRuleContext(0, CicsDfhValueLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_literal; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterLiteral) {
			listener.enterLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitLiteral) {
			listener.exitLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitLiteral) {
			return visitor.visitLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanLiteralContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_booleanLiteral; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterBooleanLiteral) {
			listener.enterBooleanLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitBooleanLiteral) {
			listener.exitBooleanLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitBooleanLiteral) {
			return visitor.visitBooleanLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumericLiteralContext extends ParserRuleContext {
	public NUMERICLITERAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NUMERICLITERAL, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZERO, 0); }
	public integerLiteral(): IntegerLiteralContext | undefined {
		return this.tryGetRuleContext(0, IntegerLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_numericLiteral; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterNumericLiteral) {
			listener.enterNumericLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitNumericLiteral) {
			listener.exitNumericLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitNumericLiteral) {
			return visitor.visitNumericLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntegerLiteralContext extends ParserRuleContext {
	public INTEGERLITERAL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.INTEGERLITERAL, 0); }
	public LEVEL_NUMBER_66(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_66, 0); }
	public LEVEL_NUMBER_77(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_77, 0); }
	public LEVEL_NUMBER_88(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LEVEL_NUMBER_88, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_integerLiteral; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterIntegerLiteral) {
			listener.enterIntegerLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitIntegerLiteral) {
			listener.exitIntegerLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitIntegerLiteral) {
			return visitor.visitIntegerLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CicsDfhRespLiteralContext extends ParserRuleContext {
	public DFHRESP(): TerminalNode { return this.getToken(Cobol85Parser.DFHRESP, 0); }
	public LPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.LPARENCHAR, 0); }
	public RPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.RPARENCHAR, 0); }
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_cicsDfhRespLiteral; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCicsDfhRespLiteral) {
			listener.enterCicsDfhRespLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCicsDfhRespLiteral) {
			listener.exitCicsDfhRespLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCicsDfhRespLiteral) {
			return visitor.visitCicsDfhRespLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CicsDfhValueLiteralContext extends ParserRuleContext {
	public DFHVALUE(): TerminalNode { return this.getToken(Cobol85Parser.DFHVALUE, 0); }
	public LPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.LPARENCHAR, 0); }
	public RPARENCHAR(): TerminalNode { return this.getToken(Cobol85Parser.RPARENCHAR, 0); }
	public cobolWord(): CobolWordContext | undefined {
		return this.tryGetRuleContext(0, CobolWordContext);
	}
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_cicsDfhValueLiteral; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCicsDfhValueLiteral) {
			listener.enterCicsDfhValueLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCicsDfhValueLiteral) {
			listener.exitCicsDfhValueLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCicsDfhValueLiteral) {
			return visitor.visitCicsDfhValueLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FigurativeConstantContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ALL, 0); }
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public HIGH_VALUE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.HIGH_VALUE, 0); }
	public HIGH_VALUES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.HIGH_VALUES, 0); }
	public LOW_VALUE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOW_VALUE, 0); }
	public LOW_VALUES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LOW_VALUES, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NULL, 0); }
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.NULLS, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.QUOTE, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.QUOTES, 0); }
	public SPACE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SPACE, 0); }
	public SPACES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SPACES, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZERO, 0); }
	public ZEROS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZEROS, 0); }
	public ZEROES(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ZEROES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_figurativeConstant; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterFigurativeConstant) {
			listener.enterFigurativeConstant(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitFigurativeConstant) {
			listener.exitFigurativeConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitFigurativeConstant) {
			return visitor.visitFigurativeConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SpecialRegisterContext extends ParserRuleContext {
	public ADDRESS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.ADDRESS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.OF, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public DATE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DATE, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DAY, 0); }
	public DAY_OF_WEEK(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DAY_OF_WEEK, 0); }
	public DEBUG_CONTENTS(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUG_CONTENTS, 0); }
	public DEBUG_ITEM(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUG_ITEM, 0); }
	public DEBUG_LINE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUG_LINE, 0); }
	public DEBUG_NAME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUG_NAME, 0); }
	public DEBUG_SUB_1(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUG_SUB_1, 0); }
	public DEBUG_SUB_2(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUG_SUB_2, 0); }
	public DEBUG_SUB_3(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.DEBUG_SUB_3, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LENGTH, 0); }
	public LINAGE_COUNTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINAGE_COUNTER, 0); }
	public LINE_COUNTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.LINE_COUNTER, 0); }
	public PAGE_COUNTER(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.PAGE_COUNTER, 0); }
	public RETURN_CODE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.RETURN_CODE, 0); }
	public SHIFT_IN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHIFT_IN, 0); }
	public SHIFT_OUT(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SHIFT_OUT, 0); }
	public SORT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT_CONTROL, 0); }
	public SORT_CORE_SIZE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT_CORE_SIZE, 0); }
	public SORT_FILE_SIZE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT_FILE_SIZE, 0); }
	public SORT_MESSAGE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT_MESSAGE, 0); }
	public SORT_MODE_SIZE(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT_MODE_SIZE, 0); }
	public SORT_RETURN(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.SORT_RETURN, 0); }
	public TALLY(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TALLY, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.TIME, 0); }
	public WHEN_COMPILED(): TerminalNode | undefined { return this.tryGetToken(Cobol85Parser.WHEN_COMPILED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_specialRegister; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterSpecialRegister) {
			listener.enterSpecialRegister(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitSpecialRegister) {
			listener.exitSpecialRegister(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitSpecialRegister) {
			return visitor.visitSpecialRegister(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommentEntryContext extends ParserRuleContext {
	public COMMENTENTRYLINE(): TerminalNode[];
	public COMMENTENTRYLINE(i: number): TerminalNode;
	public COMMENTENTRYLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(Cobol85Parser.COMMENTENTRYLINE);
		} else {
			return this.getToken(Cobol85Parser.COMMENTENTRYLINE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return Cobol85Parser.RULE_commentEntry; }
	// @Override
	public enterRule(listener: Cobol85Listener): void {
		if (listener.enterCommentEntry) {
			listener.enterCommentEntry(this);
		}
	}
	// @Override
	public exitRule(listener: Cobol85Listener): void {
		if (listener.exitCommentEntry) {
			listener.exitCommentEntry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: Cobol85Visitor<Result>): Result {
		if (visitor.visitCommentEntry) {
			return visitor.visitCommentEntry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


